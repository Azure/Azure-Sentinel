{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "AS-CrowdstrikeAlerts-Integration", 
        "description": "This playbook is intended to be run on a timmed trigger. It will poll Crowdstrike for new alerts and replicate them in Sentinel",
        "preDeployment": ["Azure Keyvault Secret"],
        "postDeployment": ["Access to the Azure Key Vault must be granted to the playbook", "Connections in playbook must be authenticated", "Run After conditions must be adjusted after first successful run and confirmed table population"],
        "lastUpdateTime": "2025-01-06T17:48:00Z",
        "tags": ["Crowdstrike", "Microsoft Sentinel"], 
        "support": {
            "tier": "partner"
        },
        "author": {
            "name": "Accelerynt"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "AS-Crowdstrike-Alerts-Integration",
            "type": "string",
            "metadata": {
                "description": "Name of the Logic App resource to be created"
            }
        },
        "ClientID": {
            "type": "string",
            "metadata" : {
                "description" : "Enter the Client/Token ID for your Crowdstrike API"
            }
        },
        "KeyVaultName": {
            "type": "string",
            "metadata" : {
                "description" : "Name of the Key Vault that stores the Crowdstrike API key"
            }
        },
        "SecretName": {
            "type": "string",
            "metadata": {
                "description": "Name of Key Vault Secret that contains the value of the Crowdstrike API key"
            }
        },
        "SentinelResourceName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Microsoft Sentinel Workspace that Crowdstrike Alerts will be stored in/queried from"
            }
        },
        "CrowdstrikeDomain": {
            "type": "string",
            "metadata" : {
                "description" : "Enter the domain of your Crowdstrike base URL, following the format of 'api.crowdstrike.com'"
            }
        }
    },
    "variables": {
        "azureloganalyticsdatacollector": "[concat('azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
        "azuremonitorlogs": "[concat('azuremonitorlogs-', parameters('PlaybookName'))]",
        "keyvault": "[concat('keyvault-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azureloganalyticsdatacollector')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azuremonitorlogs')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('keyvault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                    "vaultName": "[parameters('KeyVaultName')]"
                },
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                }
            }
        },    
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "LogicAppsCategory": "security"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollector'))]",
                "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogs'))]",
                "[resourceId('Microsoft.Web/connections', variables('keyvault'))]"
            ],
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 5
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Minute",
                                "interval": 5
                            },
                            "type": "Recurrence",
                            "conditions": [],
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "runs": 1
                                }
                            }
                        }
                    },
                    "actions": {
                        "Condition_-_Check_for_Results": {
                            "actions": {
                                "For_each_-_Alert": {
                                    "foreach": "@body('HTTP_-_Get_Complete_Alerts')?['resources']",
                                    "actions": {
                                        "Condition_-_Check_for_new_entries": {
                                            "actions": {
                                                "Send_Data": {
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "body": "@{items('For_each_-_Alert')}",
                                                        "headers": {
                                                            "Log-Type": "Crowdstrike_Alerts"
                                                        },
                                                        "path": "/api/logs"
                                                    }
                                                }
                                            },
                                            "else": {
                                                "actions": {}
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "contains": [
                                                                "@variables('Duplicates')",
                                                                "@items('For_each_-_Alert')?['id']"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP_-_Get_Complete_Alerts": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "For_each_-_Sentinel_Logs_Alert_IDs": {
                                    "foreach": "@body('Run_query_and_list_results_V2_-_Get_Potential_Duplicates')?['value']",
                                    "actions": {
                                        "Append_to_array_variable": {
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "Duplicates",
                                                "value": "@items('For_each_-_Sentinel_Logs_Alert_IDs')?['id_s']"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Run_query_and_list_results_V2_-_Get_Potential_Duplicates": [
                                            "Succeeded",
                                            "FAILED"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "HTTP_-_Get_Complete_Alerts": {
                                    "runAfter": {
                                        "For_each_-_Sentinel_Logs_Alert_IDs": [
                                            "Succeeded",
                                            "FAILED"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "body": {
                                            "ids": "@body('HTTP_-_Get_Alert_IDs')?['resources']"
                                        },
                                        "headers": {
                                            "Accept": "application/json",
                                            "Authorization": "Bearer @{body('Parse_JSON_-_Access_Token')?['access_token']}"
                                        },
                                        "method": "POST",
                                        "uri": "[concat('https://', parameters('CrowdstrikeDomain') ,'/alerts/entities/alerts/v1')]"
                                    }
                                },
                                "Run_query_and_list_results_V2_-_Get_Potential_Duplicates": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "query": "Crowdstrike_Alerts_CL\n| where composite_id_s in @{replace(replace(variables('Crowdstrike Alert IDs'), '[', '('), ']', ')')}\n| project id_s",
                                            "timerangetype": "1",
                                            "timerange": {
                                                "exactTimeRangeFrom": "2025-01-01T00:00:00.000Z",
                                                "exactTimeRangeTo": "@variables('Local Timestamp')"
                                            }
                                        },
                                        "path": "/queryDataV2",
                                        "queries": {
                                            "resourcegroups": "[resourceGroup().name]",
                                            "resourcename": "[parameters('SentinelResourceName')]",
                                            "resourcetype": "Log Analytics Workspace",
                                            "subscriptions": "[subscription().subscriptionId]"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_-_Duplicates": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {}
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(variables('Crowdstrike Alert IDs'))",
                                            2
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Get_Secret": {
                        "runAfter": {
                                "Initialize_variable_-_Local_Timestamp": [
                                    "Succeeded"
                                ]
                            },
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                                }
                            },
                            "method": "get",
                            "path": "[concat('/secrets/@{encodeURIComponent(''', parameters('SecretName'), ''')}/value')]"
                        }
                        },
                        "HTTP_-_Get_Alert_IDs": {
                            "runAfter": {
                                "Parse_JSON_-_Access_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "uri": "[concat('https://', parameters('CrowdstrikeDomain') ,'/alerts/queries/alerts/v2?filter=created_timestamp:>=''@{addMinutes(variables(''Local Timestamp''), -10)}''&created_timestamp:<=''@{variables(''Local Timestamp'')}''&sort=created_timestamp.desc')]",
                                "method": "GET",
                                "headers": {
                                    "Accept": "application/json",
                                    "Authorization": "Bearer @{body('Parse_JSON_-_Access_Token')?['access_token']}"
                                }
                            },
                            "description": "This will only return a list of IDs, complete alerts must be fetched individually in a For Each loop "
                        },
                        "HTTP_-_Get_Token": {
                            "runAfter": {
                                "Get_Secret": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "body": "[concat('grant_type=client_credentials&client_id=', parameters('ClientID'),'&client_secret=@{body(''Get_Secret'')?[''value'']}&scope=https%3A%2F%2Fgraph.microsoft.com%2F.default')]",
                                "headers": {
                                    "Accept": "application/json",
                                    "Content-Type": "application/x-www-form-urlencoded"
                                },
                                "method": "POST",
                                "uri": "[concat('https://', parameters('CrowdstrikeDomain') ,'/oauth2/token')]"
                            }
                        },
                        "Initialize_variable_-_Crowdstrike_Alert_IDs": {
                            "runAfter": {
                                "HTTP_-_Get_Alert_IDs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Crowdstrike Alert IDs",
                                        "type": "string",
                                        "value": "@string(body('HTTP_-_Get_Alert_IDs')?['resources'])"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_Duplicates": {
                            "runAfter": {
                                "Initialize_variable_-_Crowdstrike_Alert_IDs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Duplicates",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_Local_Timestamp": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Local Timestamp",
                                        "type": "string",
                                        "value": "@{formatDateTime(utcNow(), 'yyyy-MM-ddTHH:mm:00.0000000Z')}"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_-_Access_Token": {
                            "runAfter": {
                                "HTTP_-_Get_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('HTTP_-_Get_Token')",
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "type": "string"
                                        },
                                        "expires_in": {
                                            "type": "integer"
                                        },
                                        "token_type": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureloganalyticsdatacollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollector'))]",
                                "connectionName": "[variables('azureloganalyticsdatacollector')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                            },
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogs'))]",
                                "connectionName": "[variables('azuremonitorlogs')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('keyvault'))]",
                                "connectionName": "[variables('keyvault')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    ]
}
