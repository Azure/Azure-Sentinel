{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "AS-Make-GitHub-Repository-Private", 
        "description": "This playbook is intended to be run from a Microsoft Sentinel Incident. It will look up the GitHub repositories associated with the Incident Account Entities and make them private. A comment noting the affected GitHub repositories will be added to the Incident.",
        "prerequisites": "1. Install 'AS-Make-GitHub-Repository-Private' GitHub App for your organization. 2. A private key for the GitHub App Must be generated and encoded. 3. The GitHub App installation ID. 4. An Azure Key Vault Secret. 5. Deploy the 'CreateJWT' Azure Function.  Support for the set up and configuration of each of these items can be found here: https://github.com/Accelerynt-Security/AS-Make-GitHub-Repository-Private",
        "postDeployment": ["Access to the Azure Key Vault must be granted to the playbook","The Microsoft Sentinel Contributor role must be applied to the playbook"],
        "lastUpdateTime": "2023-07-11T04:54:16Z",
        "entities": ["Account"], 
        "tags": ["Microsoft Sentinel", "Incident", "GitHub", "Repository"], 
        "support": {
            "tier": "partner"
        },
        "author": {
            "name": "Accelerynt"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "AS-Make-GitHub-Repository-Private",
            "type": "string",
            "metadata": {
                "description": "Name of the Logic App resource to be created"
            }
        },
        "GitHubOrganizationName": {
            "type": "string",
            "metadata" : {
                "description" : "Name of the GitHub Organization the repositories are housed in"
            }
        },
        "GitHubAppID": {
            "type": "string",
            "metadata" : {
                "description" : "ID of the 'AS-Update-GitHub-Repository' GitHub App"
            }
        },
        "GitHubAppInstallationID": {
            "type": "string",
            "metadata" : {
                "description" : "Installation ID of the 'AS-Update-GitHub-Repository' GitHub App installed in the GitHub Organization"
            }
        },
        "FunctionAppName": {
            "type": "string",
            "metadata" : {
                "description" : "Name of the Azure Function App housing the 'CreateJWT' Function"
            }
        },
        "KeyVaultName": {
            "type": "string",
            "metadata" : {
                "description" : "Name of the Key Vault that stores the GitHub App's encoded private key"
            }
        },
        "SecretName": {
            "type": "string",
            "metadata": {
                "description": "Name of Key Vault Secret that contains the GitHub App's encoded private key"
            }
        }
    },
    "variables": {
        "azuresentinel": "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "keyvault": "[concat('keyvault-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azuresentinel')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('keyvault')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                    "vaultName": "[parameters('KeyVaultName')]"
                },
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "LogicAppsCategory": "security"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('azuresentinel'))]",
                "[resourceId('Microsoft.Web/connections', variables('keyvault'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Condition_-_Incident_has_Account_Entities": {
                            "actions": {
                                "Add_comment_to_incident_(V3)": {
                                    "runAfter": {
                                        "For_each_-_Account_entity": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "[concat('<p><strong>Made the Following GitHub Repositories Private for ', parameters('GitHubOrganizationName'), ':</strong><br>\n@{variables(''Affected Repositories'')}</p>')]"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "CreateJWT": {
                                    "runAfter": {
                                        "Get_secret": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Function",
                                    "inputs": {
                                        "body": {
                                            "app_id": "[parameters('GitHubAppID')]",
                                            "private_key": "@decodeBase64(body('Get_secret')?['value'])"
                                        },
                                        "function": {
                                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name ,'/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/CreateJWT')]"
                                        }
                                    }
                                },
                                "For_each_-_Account_entity": {
                                    "foreach": "@body('Entities_-_Get_Accounts')?['Accounts']",
                                    "actions": {
                                        "For_each_-_Repository": {
                                            "foreach": "@body('Parse_JSON_-_Repositories')",
                                            "actions": {
                                                "Condition_-_Check_for_Repository_Name_Match": {
                                                    "actions": {
                                                        "Condition": {
                                                            "actions": {
                                                                "Append_to_string_variable_-_Affected_Repositories": {
                                                                    "runAfter": {},
                                                                    "type": "AppendToStringVariable",
                                                                    "inputs": {
                                                                        "name": "Affected Repositories",
                                                                        "value": "@{items('For_each_-_Account_entity')?['Name']}\n"
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "HTTP_-_Make_Repository_Private": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "expression": {
                                                                "and": [
                                                                    {
                                                                        "equals": [
                                                                            "@outputs('HTTP_-_Make_Repository_Private')['statusCode']",
                                                                            200
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "type": "If"
                                                        },
                                                        "HTTP_-_Make_Repository_Private": {
                                                            "runAfter": {},
                                                            "type": "Http",
                                                            "inputs": {
                                                                "body": {
                                                                    "private": true
                                                                },
                                                                "headers": {
                                                                    "Accept": "application/vnd.github+json",
                                                                    "Authorization": "Bearer @{body('Parse_JSON_-_Authentication')?['token']}"
                                                                },
                                                                "method": "PATCH",
                                                                "uri": "https://api.github.com/repos/@{items('For_each_-_Repository')['owner']['login']}/@{substring(items('For_each_-_Account_entity')['name'], add(indexOf(items('For_each_-_Account_entity')['name'],'/'), 1), sub(length(items('For_each_-_Account_entity')['name']), add(indexOf(items('For_each_-_Account_entity')['name'],'/'),1)))}"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {},
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "equals": [
                                                                    "@substring(items('For_each_-_Account_entity')['name'], add(indexOf(items('For_each_-_Account_entity')['name'],'/'), 1), sub(length(items('For_each_-_Account_entity')['name']), add(indexOf(items('For_each_-_Account_entity')['name'],'/'),1)))",
                                                                    "@items('For_each_-_Repository')?['name']"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_-_Repositories": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "Get_secret": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "[concat('/secrets/@{encodeURIComponent(''', parameters('SecretName'), ''')}/value')]"
                                    }
                                },
                                "HTTP_-_Authenticate_as_a_GitHub_App_installation": {
                                    "runAfter": {
                                        "CreateJWT": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Accept": "application/vnd.github+json",
                                            "Authorization": "Bearer @{body('CreateJWT')}"
                                        },
                                        "method": "POST",
                                        "uri": "[concat('https://api.github.com/app/installations/', parameters('GitHubAppInstallationID'), '/access_tokens')]"
                                    }
                                },
                                "HTTP_-_Get_Organization_Repositories": {
                                    "runAfter": {
                                        "Parse_JSON_-_Authentication": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Accept": "application/vnd.github+json",
                                            "Authorization": "Bearer @{body('Parse_JSON_-_Authentication')?['token']}"
                                        },
                                        "method": "GET",
                                        "uri": "[concat('https://api.github.com/orgs/', parameters('GitHubOrganizationName'), '/repos?per_page=100')]"
                                    },
                                    "description": "To update a repository via GitHub API, the owner of the repo is needed. Because we are only starting with a name, this call is necessary for the remaining required information."
                                },
                                "Parse_JSON_-_Authentication": {
                                    "runAfter": {
                                        "HTTP_-_Authenticate_as_a_GitHub_App_installation": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('HTTP_-_Authenticate_as_a_GitHub_App_installation')",
                                        "schema": {
                                            "properties": {
                                                "expires_at": {
                                                    "type": "string"
                                                },
                                                "permissions": {
                                                    "properties": {
                                                        "organization_user_blocking": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "repository_selection": {
                                                    "type": "string"
                                                },
                                                "token": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Parse_JSON_-_Repositories": {
                                    "runAfter": {
                                        "HTTP_-_Get_Organization_Repositories": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('HTTP_-_Get_Organization_Repositories')",
                                        "schema": {
                                            "items": {
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "owner": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "login": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "private": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_-_Affected_Repositories": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Entities_-_Get_Accounts')?['Accounts'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Entities_-_Get_Accounts": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/account"
                            }
                        },
                        "Initialize_variable_-_Affected_Repositories": {
                            "runAfter": {
                                "Entities_-_Get_Accounts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Affected Repositories",
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azuresentinel'))]",
                                "connectionName": "[variables('azuresentinel')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('keyvault'))]",
                                "connectionName": "[variables('keyvault')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    ]
}
