{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "AS-Datadog-Events-Integration", 
        "description": "This playbook is intended to be run on a timmed trigger. It will poll Datadog for new events and replicate them in Sentinel",
        "preDeployment": ["Azure Keyvault Secret"],
        "postDeployment": ["Access to the Azure Key Vault must be granted to the playbook"],
        "lastUpdateTime": "2025-10-13T17:15:00Z",
        "tags": ["Datadog", "Microsoft Sentinel"], 
        "support": {
            "tier": "partner"
        },
        "author": {
            "name": "Accelerynt"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "AS-Datadog-Events-Integration",
            "type": "string",
            "metadata": {
                "description": "Name of the Logic App resource to be created"
            }
        },
        "DatadogDomain": {
            "type": "string",
            "metadata" : {
                "description": "Enter the domain of your Datadog base URL, following the format of 'api.datadoghq.com'"
            }
        },
        "KeyVaultName": {
            "type": "string",
            "metadata" : {
                "description": "Name of the Key Vault that stores the Datadog API key"
            }
        },
        "APIKeySecretName": {
            "type": "string",
            "metadata": {
                "description": "Name of Key Vault Secret that contains the value of the Datadog API key"
            }
        },
        "ApplicationKeySecretName": {
            "type": "string",
            "metadata": {
                "description": "Name of Key Vault Secret that contains the value of the Datadog Application key"
            }
        },
        "SentinelResourceName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Microsoft Sentinel Workspace that Datadog Events will be stored in/queried from"
            }
        }
    },
    "variables": {
        "azureloganalyticsdatacollector": "[concat('azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
        "azuremonitorlogs": "[concat('azuremonitorlogs-', parameters('PlaybookName'))]",
        "keyvault": "[concat('keyvault-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azureloganalyticsdatacollector')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azuremonitorlogs')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('keyvault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                    "vaultName": "[parameters('KeyVaultName')]"
                },
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                }
            }
        },    
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "LogicAppsCategory": "security"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollector'))]",
                "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogs'))]",
                "[resourceId('Microsoft.Web/connections', variables('keyvault'))]"
            ],
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 5
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Minute",
                                "interval": 5
                            },
                            "type": "Recurrence",
                            "conditions": [],
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "runs": 1
                                }
                            }
                        }
                    },
                    "actions": {
                        "Compose_-_IDs_String_Values": {
                            "runAfter": {
                                "Select_IDs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@join(body('Select_IDs'), '\", \"')"
                        },
                        "Condition_-_Check_for_Results": {
                            "type": "If",
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@outputs('Compose_-_IDs_String_Values')",
                                                ""
                                            ]
                                        }
                                    }
                                ]
                            },
                            "actions": {
                                "For_each_-_Event": {
                                    "type": "Foreach",
                                    "foreach": "@body('HTTP_-_Get_Events')?['data']",
                                    "actions": {
                                        "Condition_-_Check_for_Duplicates": {
                                            "type": "If",
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "contains": [
                                                                "@body('Select_-_IDs')",
                                                                "@items('For_each_-_Event')?['id']"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "actions": {},
                                            "else": {
                                                "actions": {}
                                            },
                                            "runAfter": {
                                                "Send_Data": [
                                                    "SUCCEEDED"
                                                ]
                                            }
                                        },
                                        "Send_Data": {
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "body": "@{items('For_each_-_Event')}",
                                                "headers": {
                                                    "Log-Type": "Datadog_Events"
                                                },
                                                "path": "/api/logs"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Select_-_IDs": [
                                            "Succeeded",
                                            "FAILED"
                                        ]
                                    }
                                },
                                "Run_query_and_list_results_V2": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "query": "Datadog_Events_CL\n| where id_s in (\"@{outputs('Compose_-_IDs_String_Values')}\")\n| project id_s",
                                            "timerange": {
                                                "exactTimeRangeFrom": "2025-01-01T00:00:00.000Z",
                                                "exactTimeRangeTo": "@variables('UTC Now')"
                                            },
                                            "timerangetype": "1"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/queryDataV2",
                                        "queries": {
                                            "resourcegroups": "[resourceGroup().name]",
                                            "resourcename": "[parameters('SentinelResourceName')]",
                                            "resourcetype": "Log Analytics Workspace",
                                            "subscriptions": "[subscription().subscriptionId]"
                                        }
                                    }
                                },
                                "Select_-_IDs": {
                                    "type": "Select",
                                    "inputs": {
                                        "from": "@body('Run_query_and_list_results_V2')?['value']",
                                        "select": "@item()?['id_s']"
                                    },
                                    "runAfter": {
                                        "Run_query_and_list_results_V2": [
                                            "Succeeded",
                                            "FAILED"
                                        ]
                                    }
                                }
                            },
                            "else": {
                                "actions": {}
                            },
                            "runAfter": {
                                "Compose_-_IDs_String_Values": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "HTTP_-_Get_Events": {
                            "runAfter": {
                                "Get_Secret_-_Application_Key": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "headers": {
                                    "Accept": "application/json",
                                    "DD-API-KEY": "@{body('Get_Secret_-_API_Key')?['value']}",
                                    "DD-APPLICATION-KEY": "@{body('Get_Secret_-_Application_Key')?['value']}"
                                },
                                "method": "GET",
                                "uri": "[concat('https://', parameters('DatadogDomain'), '/api/v2/events?filter[from]=@{variables(''Unix Start Time'')}&filter[to]=@{variables(''Unix End Time'')}')]"
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "Initialize_variable_-_UTC_Now": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "UTC Now",
                                        "type": "string",
                                        "value": "@utcNow()"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_Unix_End_Time": {
                            "runAfter": {
                                "Initialize_variable_-_Unix_Start_Time": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Unix End Time",
                                        "type": "integer",
                                        "value": "@div(sub(ticks(variables('UTC Now')), ticks('1970-01-01T00:00:00Z')), 10000000)"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_Unix_Start_Time": {
                            "runAfter": {
                                "Initialize_variable_-_UTC_Now": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Unix Start Time",
                                        "type": "integer",
                                        "value": "@div(sub(ticks(addMinutes(variables('UTC Now'), -10)), ticks('1970-01-01T00:00:00Z')), 10000000)\r\n"
                                    }
                                ]
                            }
                        },
                        "Get_Secret_-_API_Key": {
                            "runAfter": {
                                    "Initialize_variable_-_Unix_End_Time": [
                                        "Succeeded"
                                    ]
                                },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "[concat('/secrets/@{encodeURIComponent(''', parameters('APIKeySecretName'), ''')}/value')]"
                            }
                        },
                        "Get_Secret_-_Application_Key": {
                            "runAfter": {
                                    "Get_Secret_-_API_Key": [
                                        "Succeeded"
                                    ]
                                },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "[concat('/secrets/@{encodeURIComponent(''', parameters('ApplicationKeySecretName'), ''')}/value')]"
                            }
                        },
                        "Select_IDs": {
                            "runAfter": {
                                "HTTP_-_Get_Events": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select",
                            "inputs": {
                                "from": "@body('HTTP_-_Get_Events')?['data']",
                                "select": "@item()?['id']"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureloganalyticsdatacollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollector'))]",
                                "connectionName": "[variables('azureloganalyticsdatacollector')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                            },
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogs'))]",
                                "connectionName": "[variables('azuremonitorlogs')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('keyvault'))]",
                                "connectionName": "[variables('keyvault')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    ]
}
