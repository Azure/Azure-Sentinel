{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "AS-Terminate-Okta-User-Sessions-From-Entity", 
        "description": "This playbook is intended to be run from a Microsoft Sentinel Entity. It will match Okta users against the account entities on the entity and then terminate all sessions of the matched users in Okta.",
        "prerequisites": "1. An Okta admin account is needed, along with an API token. 2. A Microsoft Azure key vault containing the Okta API token must also be set up. Support for the set up and configuration of each of these items can be found here: https://github.com/Accelerynt-Security/AS-Okta-Terminate-User-Sessions",
        "lastUpdateTime": "2023-09-20T14:29:33Z",
        "entities": ["Account"], 
        "tags": ["Microsoft Sentinel", "Entity", "Okta", "User Session"], 
        "support": {
            "tier": "developer"
        },
        "author": {
            "name": "Accelerynt"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "AS-Terminate-Okta-User-Sessions-From-Entity",
            "type": "string"
        },
        "OktaSubdomain": {
            "type": "string",
            "metadata" : {
                "description" : "Name of the subdomain (tenant) in the Okta Org URL"
            }
        },
        "KeyVaultName": {
            "type": "string",
            "metadata" : {
                "description" : "Name of the Key Vault that stores the Okta API token"
            }
        },
        "SecretName": {
            "type": "string",
            "metadata": {
                "description": "Name of Key Vault Secret that contains the value of the Okta API token"
            }
        }
    },
    "variables": {
        "azuresentinel": "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "keyvault": "[concat('keyvault-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azuresentinel')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('keyvault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                    "vaultName": "[parameters('KeyVaultName')]"
                },
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "LogicAppsCategory": "security"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('azuresentinel'))]",
                "[resourceId('Microsoft.Web/connections', variables('keyvault'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_entity": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/entity/@{encodeURIComponent('Account')}"
                            }
                        }
                    },
                    "actions": {
                        "Condition_-_Check_for_Results": {
                            "actions": {
                                "HTTP-_Terminate_User_Sessions": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Accept": "application/json",
                                            "Authorization": "SSWS @{body('Get_Secret')?['value']}",
                                            "Content-Type": "application/json"
                                        },
                                        "method": "DELETE",
                                        "uri": "[concat('https://', parameters('OktaSubdomain') , '.okta.com/api/v1/users/@{body(''HTTP_-_Get_Okta_User_Account'')?[0]?[''id'']}/sessions')]"
                                    }
                                }
                            },
                            "runAfter": {
                                "HTTP_-_Get_Okta_User_Account": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('HTTP_-_Get_Okta_User_Account'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Get_Secret": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('AS-Okta-Terminate-User-Sessions-API-Token')}/value"
                            }
                        },
                        "HTTP_-_Get_Okta_User_Account": {
                            "runAfter": {
                                "Get_Secret": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "headers": {
                                    "Accept": "application/json",
                                    "Authorization": "SSWS @{body('Get_Secret')?['value']}",
                                    "Content-Type": "application/json"
                                },
                                "method": "GET",
                                "uri": "[concat('https://', parameters('OktaSubdomain') , '.okta.com/api/v1/users?search=profile.email%20eq%20%22@{concat(replace(encodeUriComponent(triggerBody()?[''Entity'']?[''properties'']?[''Name'']),''.'',''%2E''), ''%40'', replace(encodeUriComponent(triggerBody()?[''Entity'']?[''properties'']?[''UPNSuffix'']),''.'',''%2E''))}%22')]"
                            },
                            "description": "Matching on Microsoft entity account email = Okta user account email"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azuresentinel'))]",
                                "connectionName": "[variables('azuresentinel')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('keyvault'))]",
                                "connectionName": "[variables('keyvault')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    ]
}
