{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "Workspace": {
        "type": "string",
        "metadata": {
          "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
        }
      },
      "WorkspaceRegion": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "The region of the selected workspace. The default value will use the Region selection above."
        }
      }
    },
  "resources": [
      {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimDataTester",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "ASIM Data tester",
            "category": "Security",
            "FunctionAlias": "ASimDataTester",
            "query": "let MACaddr_regex = @'^[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}$';\r\n  let FQDN_regex =  @'^([_a-zA-Z0-9][_a-zA-Z0-9-]{0,62}\\.)+[a-zA-Z]{2,63}$'; \/\/ -- based on https:\/\/stackoverflow.com\/questions\/11809631\/fully-qualified-domain-name-validation without lookahead.\r\n  let DNS_domain_regex = @'^([_a-zA-Z0-9][_a-zA-Z0-9-]{0,62}\\.)*[a-zA-Z]{2,63}$'; \/\/ -- Allow underscores in domain names, used by Microsoft DNS server\r\n  let domain_regex = @'^([_a-zA-Z0-9][_a-zA-Z0-9-]{0,62}\\.)*[a-zA-Z]{2,63}$';\r\n  let Hostname_regex = @'^[a-zA-Z0-9-]{1,61}$';\r\n  let MD5_regex = @'[a-zA-Z0-9]{32}';\r\n  let SHA1_regex = @'[a-zA-Z0-9]{40}';\r\n  let SHA256_regex = @'[a-zA-Z0-9]{64}';\r\n  let SHA512_regex = @'[a-zA-Z0-9]{128}';\r\n  let IPprotocol = materialize (externaldata (code: string, value: string)\r\n    [@\"https:\/\/www.iana.org\/assignments\/protocol-numbers\/protocol-numbers-1.csv\"] with (format=\"csv\", IgnoreFirstRecord=true) | project value);\r\n  let DnsQueryTypeName = materialize (externaldata (value: string)\r\n    [@\"https:\/\/www.iana.org\/assignments\/dns-parameters\/dns-parameters-4.csv\"] with (format=\"csv\", IgnoreFirstRecord=true));\r\n  let DnsResponseCodeName = materialize (externaldata (code: string, value: string)\r\n    [@\"https:\/\/www.iana.org\/assignments\/dns-parameters\/dns-parameters-6.csv\"] with (format=\"csv\", IgnoreFirstRecord=true) | project toupper(value));\r\n  \/\/let DnsQueryClassName = materialize (externaldata (dec: string, dex: string, value: string)\r\n  \/\/  [@\"https:\/\/www.iana.org\/assignments\/dns-parameters\/dns-parameters-2.csv\"] with (format=\"csv\", IgnoreFirstRecord=true) | project value);\r\n  let DnsQueryClassName = datatable(Class:int, ClassName: string)[\r\n      0, 'Reserved',\r\n      1, 'IN',\r\n      2, 'Unassigned',\r\n      3, 'CH',\r\n      4, 'HS',\r\n      254, 'None',\r\n      255, 'Any'] | project ClassName;\r\n  \/\/let schemas_in_data = materialize (T | summarize schemas = make_set(EventSchema)); \r\n  let ASimFields = materialize(externaldata (ColumnName: string, ColumnType: string, Class: string, Schema: string, LogicalType:string, ListOfValues: string, AliasedField: string)\r\n        [@\"https:\/\/raw.githubusercontent.com\/Azure\/Azure-Sentinel\/master\/ASIM\/dev\/ASimTester\/ASimTester.csv\"] with (format=\"csv\", IgnoreFirstRecord=true) | project-rename dict_schema = Schema);\r\n  let ASimFieldsWithAliases = materialize(ASimFields | project-rename SchemaColumn = ColumnName, SchemaType = ColumnType | lookup (ASimFields | project ParentClass = Class, ParentColumn = ColumnName, dict_schema=dict_schema) on $left.AliasedField == $right.ParentColumn, $left.dict_schema == $right.dict_schema);\r\n  let ParserSchema = (T | getschema | project ColumnName, type = ColumnType);\r\n  let total_records_materialize = materialize (T | count);\r\n  let total_records = toscalar (total_records_materialize);\r\n  let percent_records = (records:int) { round(todouble(records)\/todouble(total_records)*100,2) };\r\n  T \r\n  | extend f=pack_all()\r\n  | extend EventSchema = coalesce(selected_schema, f['EventSchema'], 'Common')\r\n  | mv-expand f\r\n  | project f, EventSchema\r\n  | extend ColumnName = tostring(bag_keys(f)[0])\r\n  | extend value = f[ColumnName]\r\n  | lookup ParserSchema on ColumnName\r\n  | summarize cnt_records = count() by ColumnName, tostring(value), type, EventSchema\r\n  | lookup ASimFieldsWithAliases on $left.ColumnName == $right.SchemaColumn, $left.EventSchema == $right.dict_schema\r\n  | extend Result = case( \r\n      SchemaType != \"\" and type != \"null\" and SchemaType != type, strcat (\"(0) Error: type mismatch for column [\", ColumnName, \"]. It is currently [\", type, \"] and should be [\", SchemaType, \"] (Schema:\", EventSchema, \")\"),\r\n      Class == \"Mandatory\" and value == \"\", strcat (\"(1) Warning: Empty value in \", cnt_records, \" records (\",percent_records(cnt_records),\"%)  in mandatory field [\", ColumnName, \"] (Schema:\", EventSchema, \")\"),\r\n      Class == \"Recommended\" and value == \"\", strcat (\"(2) Info: Empty value in \", cnt_records, \" records (\",percent_records(cnt_records),\"%)  in recommended field [\", ColumnName, \"] (Schema:\", EventSchema, \")\"),\r\n      Class == \"Optional\" and value == \"\", strcat (\"(2) Info: Empty value in \", cnt_records, \" records (\",percent_records(cnt_records),\"%)  in optional field [\", ColumnName, \"] (Schema:\", EventSchema, \")\"),\r\n      LogicalType == \"Enumerated\" and ListOfValues != \"\" and ListOfValues !has value, \"Invalid Value\",\r\n      (LogicalType == \"MAC Address\") and (value != \"\") and not (value matches regex MACaddr_regex), \"Invalid Value\", \r\n      (LogicalType == \"IP Address\") and (value != \"\") and not(ipv4_is_match(value, \"0.0.0.0\",0)) and not(ipv6_is_match(value, \"::1\",0)) and not(ipv6_is_match(value, \"0.0.0.0\",0)), \"Invalid Value\",\r\n      (LogicalType == \"FQDN\") and (value != \"\") and not (value matches regex FQDN_regex), \"Invalid Value\",\r\n      (LogicalType == \"RecommendedFQDN\") and (value != \"\") and not (value matches regex FQDN_regex), \"Abnormal Value\",\r\n      (LogicalType == \"Domain\") and (value != \"\") and not (value matches regex domain_regex), \"Invalid Value\",\r\n      (LogicalType == \"DnsDomain\") and (value != \"\") and not (value matches regex DNS_domain_regex), \"Invalid Value\",\r\n      (LogicalType == \"RecommendedDnsDomain\") and (value != \"\") and not (value matches regex DNS_domain_regex), \"Abnormal Value\",\r\n      (LogicalType == \"GUID\") and (value != \"\") and isnull(toguid(value)), \"Invalid Value\",\r\n      (LogicalType == \"Hostname\") and (value != \"\") and not (value matches regex Hostname_regex) and not(ipv4_is_match(value, \"0.0.0.0\",0)) and not(ipv6_is_match(value, \"::1\",0)), \"Invalid Value\", \r\n      (LogicalType == \"RiskLevel\") and (value != \"\") and (toint(value) < 0 or toint(value) > 100), \"Invalid Value\",\r\n      (LogicalType == \"DnsResponseCodeName\") and (value != \"\") and value !in (DnsResponseCodeName) and value != \"NA\" , \"Invalid Value\",\r\n      (LogicalType == \"DnsQueryTypeName\") and (value != \"\") and value !in (DnsQueryTypeName) and value != \"ANY\" and not(value matches regex @'^TYPE\\d+$'), \"Invalid Value\",\r\n      (LogicalType == \"DnsQueryClassName\") and (value != \"\") and value !in (DnsQueryClassName) and not(value matches regex @'^CLASS\\d+$'), \"Invalid Value\",\r\n      (LogicalType == \"NetworkProtocol\") and (value != \"\") and value !in (IPprotocol), \"Invalid Value\",\r\n      (LogicalType == \"MD5\") and (value != \"\") and not (value matches regex MD5_regex), \"Invalid Value\", \r\n      (LogicalType == \"SHA1\") and (value != \"\") and not (value matches regex SHA1_regex), \"Invalid Value\", \r\n      (LogicalType == \"SHA256\") and (value != \"\") and not (value matches regex SHA256_regex), \"Invalid Value\", \r\n      (LogicalType == \"SHA512\") and (value != \"\") and not (value matches regex SHA512_regex), \"Invalid Value\", \r\n      'None'\r\n     )\r\n    | where Result != \"None\"\r\n    | summarize values = make_set(value, 10), cnt_values=count(), cnt_records=sum(cnt_records) by Result, ColumnName, LogicalType, EventSchema\r\n    | extend Result = iif (Result == \"Invalid Value\", strcat (\"(0) Error: \", cnt_values, \" invalid value(s) (up to 10 listed) in \", cnt_records, \" records (\",percent_records(cnt_records),\"%) for field [\", ColumnName, \"] of type [\", LogicalType, \"]: \", tostring(values), \" (Schema:\", EventSchema, \")\"), Result)\r\n    | extend Result = iif (Result == \"Abnormal Value\", strcat (\"(1) Warning: \", cnt_values, \" abnormal value(s) (up to 10 listed) in \", cnt_records, \" records (\",percent_records(cnt_records),\"%) for field [\", ColumnName, \"] of type [\", LogicalType, \"]: \", tostring(values), \" (Schema:\", EventSchema, \")\"), Result)\r\n    | project Result\r\n    | sort by Result asc\r\n",
            "version": 1,
            "functionParameters": "T:(*),selected_schema:string=''"
          }
        }
      ]
    }
  ]
}
