Parser:
  Title: Authentication ASIM filtering parser for <product name>
  Version: '0.1.0'
  LastUpdated: <MMM DD, YYYY>
Product:
  Name: <product name>
Normalization:
  Schema: Authentication
  Version: '<current schema version>'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM filtering parser supports filtering and normalizing the <product name> logs to the ASIM authentication normalized schema.
ParserName: <ASimAuthenticationVendor+Product>
EquivalentBuiltInParser: <_Im_Authentication_Vendor+Product>
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: targetusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetappname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: srchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvchostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresultdetails_in
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
    starttime:datetime                    = datetime(null)
    , endtime:datetime                    = datetime(null)
    , targetusername_has_any:dynamic      = dynamic([])
    , actorusername_has_any:dynamic       = dynamic([])
    , srcipaddr_has_any_prefix:dynamic    = dynamic([])
    , srchostname_has_any:dynamic         = dynamic([])
    , targetipaddr_has_any_prefix:dynamic = dynamic([])
    , dvcipaddr_has_any_prefix:dynamic    = dynamic([])
    , dvchostname_has_any:dynamic         = dynamic([])
    , eventtype_in:dynamic                = dynamic([])
    , eventresultdetails_in:dynamic       = dynamic([])
    , eventresult:string                  = '*'
    , disabled:bool                       = false
  )
  {
    <parser query body>
  };
  parser (
    starttime                     = starttime
    , endtime                     = endtime
    , targetusername_has_any      = targetusername_has_any
    , actorusername_has_any       = actorusername_has_any
    , srcipaddr_has_any_prefix    = srcipaddr_has_any_prefix
    , srchostname_has_any         = srchostname_has_any
    , targetipaddr_has_any_prefix = targetipaddr_has_any_prefix
    , dvcipaddr_has_any_prefix    = dvcipaddr_has_any_prefix
    , dvchostname_has_any         = dvchostname_has_any
    , eventtype_in                = eventtype_in
    , eventresultdetails_in       = eventresultdetails_in
    , eventresult                 = eventresult
    , disabled                    = disabled
  )