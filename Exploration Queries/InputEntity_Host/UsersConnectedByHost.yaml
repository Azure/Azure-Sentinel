Id: 37fdc179-d35c-4dcd-b6ff-6cf02248d8f9
DisplayName: Accounts which remotely logged onto this host and the source IP address
Description: Accounts which remotely logged onto this host and the source IP address (set time range to +-1d when running the query)
InputEntityType: Host
InputFields:
  - HostName
OutputEntityTypes:
  - Account
  - Ip
QueryPeriodBefore: 1d
QueryPeriodAfter: 1d
DataSources:
  - imAuthentication
  - SigninLogs
Tactics:
  - Discovery
  - LateralMovement
  - Collection
query: |
    let isimAuthenticationInstalled=toscalar(union isfuzzy=true  (datatable(Test:string)[]), (imAuthentication| take 0) | getschema | count | project Exists=(Count>1));
    let Legacy = (v_Host_HostName:string){
    (datatable(exists:int)[1] | where not(isimAuthenticationInstalled)) // if table is not installed this table is [1]
    | join (
    SigninLogs
    | extend RemoteHost = tolower(tostring(DeviceDetail.displayName))
    | where RemoteHost has v_Host_HostName
    | extend OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser), TrustType = tostring(DeviceDetail.trustType)
    | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)
    | extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)
    | extend Latitude = tostring(LocationDetails.geoCoordinates.latitude), Longitude = tostring(LocationDetails.geoCoordinates.longitude)
    | extend info = pack('UserPrincipalName', UserPrincipalName, 'AppDisplayName', AppDisplayName, 'ClientAppUsed', ClientAppUsed, 'Browser', tostring(Browser), 'ResultType', ResultType, 'ResultDescription', ResultDescription, 'Location', Location, 'StatusCode', StatusCode, 'StatusDetails', StatusDetails)
    | summarize min(TimeGenerated), max(TimeGenerated), count(), Account_Aux_info = makeset(info) by RemoteHost , UserDisplayName, OS, IPAddress, State, City, Latitude, Longitude
    | extend IP_Aux_info = Account_Aux_info
    | project Account_Aux_StartTimeUtc = min_TimeGenerated, Account_Aux_EndTimeUtc = max_TimeGenerated, RemoteHost, UserDisplayName, OS, IPAddress, State, City, Latitude, Longitude, Account_Aux_info, IP_Aux_info
    | top 10 by Account_Aux_StartTimeUtc desc nulls last             
    | project-rename Account_UnstructuredName=UserDisplayName, Account_Host_UnstructuredName=RemoteHost, Account_Host_OSVersion=OS, IP_Address=IPAddress, IP_Location_State=State, IP_Location_City=City, IP_Location_Latitude=Latitude, IP_Location_Longitude=Longitude	
    | extend exists=int(1)
    ) on exists
    | project-away exists, exists1 
    };
    let Normalized = (v_Host_HostName:string){
    (datatable(exists:int)[1] | where isimAuthenticationInstalled)
    | join kind=inner (
      imAuthentication
      | where EventResult =~ "Success"
      | where Dvc has v_Host_HostName
      | extend IpAddr = column_ifexists("IpAddr", "")
      | extend IpAddr = case(isnotempty(IpAddr), IpAddr, SrcDvcIpAddr)
      | extend info = pack('User', User, 'LogonType', EventSubType, 'LogonProtocol', LogonProtocol, 'LogonMethod', LogonMethod, "EventProduct", EventProduct, "DvcOS", SrcDvcOs, "Latitude", column_ifexists("SrcGeoLatitude", ""), "Longitude", column_ifexists("SrcGeoLongtitude", ""), "RiskLevel", column_ifexists("SrcRiskLevel", ""))
      | summarize min(TimeGenerated), max(TimeGenerated), count(), Account_Aux_info = makeset(info) by Dvc , User, IpAddr
      | where isnotempty(IpAddr)
      | top 10 by min_TimeGenerated desc nulls last
      | project-rename Account_UnstructuredName=User, Account_Host_UnstructuredName=Dvc, IP_Address=IpAddr	
    | extend exists=int(1)
    ) on exists | project-away exists, exists1 };
    // change <HostName> value below
    union isfuzzy=true Legacy('<HostName>'), Normalized('<HostName>')