{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "Tanium-ResolveThreatResponseAlert",
    "description": "Maintaining alert hygiene in multiple consoles can be overwhelming. This playbook helps teams keep Tanium Threat Response up-to-date when using Microsoft Sentinel to centrally manage alerts.\nThis playbook will resolve any Tanium Threat Response alerts associated with a Microsoft Sentinel incident.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.\n\nDon't forget to **grant the role 'Key Vaults Secret User'** to the Playbook for your Key Vault.",
    "prerequisites": [
      "1. Tanium Threat Response installed and operational in your Tanium environment.",
      "2. Obtain your [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) using [RBAC Permissions Guidance](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/RBAC_Permissions_Guidance.htm) granting access to your Tanium environment.",
      "3. Create or select an Azure Integration Account to be used by the Playbook.",
      "4. Ensure you have permission to Assign Roles to the Resource Group.",
      "5. Create a key vault to be used by your playbook to access the Tanium API Token and Server Host."
    ],
    "entities": [ "host" ],
    "tags": [ "Remediation" ],
    "lastUpdateTime": "2025-09-12T00:00:00.000Z",
    "support": {
      "tier": "developer",
      "link": "https://www.tanium.com"
    },
    "author": {
      "name": "Tanium"
    },
    "parameterTemplateVersion": "3.2.0"
  },
  "parameters": {
    "PlaybookName": {
      "defaultValue": "Tanium-ResolveThreatResponseAlert",
      "type": "string"
    },
    "KeyVaultConnectionName": {
      "defaultValue": "Tanium-GeneralHostInfo-KeyVault-WebConn",
      "type": "string",
      "metadata": {
        "description": "The name to use for the Azure Key Vault Connector in the Logic App. (This will exist as an API Connection in your subscription)"
      }
    },
    "KeyVaultName": {
      "type": "String"
    },
    "AzureSentinelConnectionName": {
      "defaultValue": "Tanium-ResolveThreatResponseAlert-Sentinel-WebConn",
      "type": "string",
      "metadata": {
        "description": "The name to use for the Microsoft Sentinel Connector in the Logic App. (This will exist as an API Connection in your subscription)"
      }
    },
    "IntegrationAccountName": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
      }
    },
    "IntegrationAccountResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group name for the existing Azure Integration Account"
      }
    },
    "TaniumServerHostname": {
      "defaultValue": "",
      "type": "securestring",
      "metadata": {
        "description": "The hostname for your Tanium server e.g. tanium.example.com"
      }
    }
  },
  "variables": {
    "TaniumApiGatewayApi": "[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2018-07-01-preview",
      "name": "[parameters('AzureSentinelConnectionName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "displayName": "[parameters('AzureSentinelConnectionName')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
        },
        "parameterValueType": "Alternative"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[parameters('KeyVaultConnectionName')]",
      "location": "[resourceGroup().location]",
      "kind": "V1",
      "properties": {
        "displayName": "[parameters('KeyVaultConnectionName')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
        },
        "parameterValueType": "Alternative",
        "alternativeParameterValues": {
          "vaultName": "[parameters('KeyVaultName')]"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('PlaybookName')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "hidden-SentinelTemplateName": "Tanium-ResolveThreatResponseAlert",
        "hidden-SentinelTemplateVersion": "2.1"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            },
            "TaniumApiGatewayApi": {
              "type": "String"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "Was_Alert_Found": {
              "actions": {
                "Comment_success": {
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "incidentArmId": "@triggerBody()?['object']?['id']",
                      "message": "<p><span style=\"font-size: 16px\"><strong>Resolved Tanium Threat Response Alert</strong></span></p><p><span style=\"font-size: 12px\">\nThreat Response alert </span><span style=\"font-size: 12px\">@{body('Extract_Threat_Response_Alert_GUID')}</span><span style=\"font-size: 12px\"> is now resolved</span></p>"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/Incidents/Comment"
                  }
                }
              },
              "runAfter": {
                "Resolve_Threat_Response_Alert": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Comment_failure": {
                    "type": "ApiConnection",
                    "inputs": {
                      "body": {
                        "incidentArmId": "@triggerBody()?['object']?['id']",
                        "message": "<p><span style=\"font-size: 16px\"><strong>Failed to resolve Tanium Threat Response Alert</strong></span></p><p>Threat Response alert @{body('Extract_Threat_Response_Alert_GUID')['body']} failed to resolve<br>\nError: @{body('Resolve_Threat_Response_Alert')?['errors']?[0]['message']}</p>"
                      },
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                        }
                      },
                      "method": "post",
                      "path": "/Incidents/Comment"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Resolve_Threat_Response_Alert')?['errors']",
                      "@null"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Extract_Threat_Response_Alert_GUID": {
              "runAfter": {},
              "type": "JavaScriptCode",
              "inputs": {
                "code": "var sentinel = workflowContext.trigger.outputs.body;\r\n\r\nreturn JSON.parse(sentinel.object.properties.relatedEntities.find(function(e) {\r\n\treturn e.kind === 'Url';\r\n}).properties.url.replace(/\\\\/g, '')).alert_guid;"
              }
            },
            "Initialize_API_Mutation": {
              "runAfter": {
                "Extract_Threat_Response_Alert_GUID": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "apiMutation",
                    "type": "string",
                    "value": "mutation($threatResponseAlert: ThreatResponseAlertRef!) {\n  threatResponseAlertResolve(ref: $threatResponseAlert) {\n    error {\n      message\n      retryable\n      timedOut\n    }\n    guid\n    resolved\n  }\n}"
                  }
                ]
              }
            },
            "Initialize_API_Variables": {
              "runAfter": {
                "Extract_Threat_Response_Alert_GUID": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "apiVariables",
                    "type": "string",
                    "value": "{\n  \"threatResponseAlert\": {\n    \"guid\": \"@{body('Extract_Threat_Response_Alert_GUID')}\"\n  }\n}"
                  }
                ]
              }
            },
            "Resolve_Threat_Response_Alert": {
              "runAfter": {
                "Get_secret": [
                  "SUCCEEDED"
                ]
              },
              "type": "Http",
              "description": "Uses the Threat response alert Id from the Microsoft Sentinel Incident to call the Tanium API Gateway and request that it resolve that alert.",
              "inputs": {
                "body": {
                  "query": "@variables('apiMutation')",
                  "variables": "@json(variables('apiVariables'))"
                },
                "headers": {
                  "Content-Type": "application/json",
                  "session": "@{body('Get_secret')?['value']}"
                },
                "method": "POST",
                "uri": "@parameters('TaniumApiGatewayApi')"
              }
            },
            "Get_secret": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('TaniumApiToken')}/value"
              },
              "runAfter": {
                "Initialize_API_Variables": [
                  "Succeeded"
                ],
                "Initialize_API_Mutation": [
                  "Succeeded"
                ]
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "type": "Object",
            "value": {
              "azuresentinel": {
                "connectionName": "[parameters('AzureSentinelConnectionName')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              },
              "keyvault": {
                "connectionName": "[parameters('KeyVaultConnectionName')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('KeyVaultConnectionName'))]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/keyvault')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          },
          "TaniumApiGatewayApi": {
            "value": "[variables('TaniumApiGatewayApi')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(parameters('PlaybookName'))]",
      "properties": {
        "principalType": "ServicePrincipal",
        "principalId": "[reference(resourceId('Microsoft.Logic/workflows', parameters('PlaybookName')), '2019-05-01', 'Full').identity.principalId]",
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ab8e14d6-4a74-4a29-9ba8-549422addade')]",
        "scope": "[resourceGroup().id]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows', parameters('PlaybookName'))]"
      ]
    }

  ]
}
