{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Tanium-ListSecurityPatches",
        "description": "Tanium's real-time data can speed up investigations by providing important context for analysts, such as which security patches are missing on the endpoints in question.\nThis playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for applicable security patches for those endpoints, and then adds a comment to the incident with that information.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.",
        "prerequisites": [
            "1. Microsoft Sentinel incidents with associated hosts.",
            "2. A [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user privileges of that token.",
            "3. An Azure Integration Account",
            "4. Tanium Patch installed and operational in your Tanium environment.",
            "5. Permission to Assign Roles to the Resource Group"
        ],
        "entities": [ "host" ],
        "tags": [ "Enrichment" ],
        "lastUpdateTime": "2025-06-30T00:00:00.000Z",
        "support": {
            "tier": "developer",
            "link": "https://www.tanium.com"
        },
        "author": {
            "name": "Tanium"
        },
        "parameterTemplateVersion": "3.0.0"
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Tanium-SecurityPatches",
            "type": "string"
        },
        "AzureSentinelConnectionName": {
            "defaultValue": "Tanium-ListSecurityPatches-Sentinel-WebConn",
            "type": "string",
            "metadata": {
                "description": "The name to use for the Sentinel Connector in the Logic App . (This will exist as an API Connection in your subscription)"
            }
        },
        "IntegrationAccountName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
            }
        },
        "IntegrationAccountResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
            }
        },
        "TaniumApiToken": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
            }
        },
        "TaniumServerHostname": {
            "defaultValue": "<customerName>-api.cloud.tanium.com",
            "type": "String",
            "metadata": {
                "description": "The hostname for your Tanium server's API. For cloud customers use <customerName>-api.cloud.tanium.com. For on-prem use the hostname of your server."
            }
        }
    },
    "variables": {
        "TaniumApiGatewayApi": "[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('AzureSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('AzureSentinelConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                },
                "parameterValueType": "Alternative"
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2019-05-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "hidden-SentinelTemplateName": "Tanium-ListSecurityPatches",
                "hidden-SentinelTemplateVersion": "2.1"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "integrationAccount": {
                    "id": "[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "TaniumApiToken": {
                            "type": "securestring",
                            "metadata": {
                                "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                            }
                        },
                        "TaniumApiGatewayApi": {
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Get_Hosts_From_Incident": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/host"
                            }
                        },
                        "Exit_early_if_incident_has_no_hosts": {
                            "actions": {
                                "Add_comment__-_no_hosts_found": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>No hosts found for this incident.</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Exit_early": {
                                    "runAfter": {
                                        "Add_comment__-_no_hosts_found": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Succeeded"
                                    }
                                }
                            },
                            "else": {
                                "actions": {}
                            },
                            "runAfter": {
                                "Get_Hosts_From_Incident": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "less": [
                                            "@length(body('Get_Hosts_From_Incident')?['Hosts'])",
                                            1
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "List_Security_Updates_per_incident_host_and_add_comment": {
                            "type": "Scope",
                            "description": "For each host on the incident, find the available security patches and add a comment on the incident listing the patches available for that host",
                            "actions": {
                                "For_each_endpoint": {
                                    "type": "Foreach",
                                    "foreach": "@variables('endpoints')",
                                    "actions": {
                                        "Add_Available_Patch_List_to_Incident": {
                                            "runAfter": {
                                                "Create_HTML_table": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p class=\"editor-paragraph\">Available security patches for @{variables('currentHostName')}<br><br>@{body('Create_HTML_table')}</p>"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                            }
                                        },
                                        "Create_HTML_table": {
                                            "runAfter": {
                                                "For_each_not_installed_patch": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Table",
                                            "inputs": {
                                                "format": "HTML",
                                                "from": "@variables('results')"
                                            }
                                        },
                                        "For_each_not_installed_patch": {
                                            "foreach": "@variables('notInstalledRowIndices')",
                                            "actions": {
                                                "if_security_update": {
                                                    "actions": {
                                                        "Append_to_results": {
                                                            "type": "AppendToArrayVariable",
                                                            "inputs": {
                                                                "name": "results",
                                                                "value": {
                                                                    "Available Security Patches": "@variables('patchTitles')[items('For_each_not_installed_patch')]"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "expression": {
                                                        "or": [
                                                            {
                                                                "equals": [
                                                                    "@variables('classifications')[items('For_each_not_installed_patch')]",
                                                                    "Security Updates"
                                                                ]
                                                            },
                                                            {
                                                                "equals": [
                                                                    "@variables('classifications')[items('For_each_not_installed_patch')]",
                                                                    "security"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If",
                                                    "else": {
                                                        "actions": {}
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "For_each_sensor_reading_column": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_each_sensor_reading_column": {
                                            "foreach": "@body('Parse_endpoint_JSON')?['sensorReadings']?['columns']",
                                            "actions": {
                                                "if_column_is_from_patch_list_applicability": {
                                                    "actions": {
                                                        "Switch_on_sensor_column": {
                                                            "cases": {
                                                                "Case_Classification": {
                                                                    "case": "Classification",
                                                                    "actions": {
                                                                        "Set_classifications": {
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "classifications",
                                                                                "value": "@items('For_each_sensor_reading_column')?['values']"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "Case_Install_Status": {
                                                                    "case": "Install Status",
                                                                    "actions": {
                                                                        "For_each_install_status_row": {
                                                                            "foreach": "@items('For_each_sensor_reading_column')?['values']",
                                                                            "actions": {
                                                                                "If_install_status_is_Not_Installed": {
                                                                                    "actions": {
                                                                                        "Append_to_not_installed_column_indexes": {
                                                                                            "type": "AppendToArrayVariable",
                                                                                            "inputs": {
                                                                                                "name": "notInstalledRowIndices",
                                                                                                "value": "@variables('columnIndex')"
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    "else": {
                                                                                        "actions": {}
                                                                                    },
                                                                                    "expression": {
                                                                                        "and": [
                                                                                            {
                                                                                                "equals": [
                                                                                                    "@items('For_each_install_status_row')",
                                                                                                    "Not Installed"
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "type": "If"
                                                                                },
                                                                                "Increment_column_index": {
                                                                                    "runAfter": {
                                                                                        "If_install_status_is_Not_Installed": [
                                                                                            "Succeeded"
                                                                                        ]
                                                                                    },
                                                                                    "type": "IncrementVariable",
                                                                                    "inputs": {
                                                                                        "name": "columnIndex",
                                                                                        "value": 1
                                                                                    }
                                                                                }
                                                                            },
                                                                            "runAfter": {
                                                                                "Set_column_index_to_0": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Foreach"
                                                                        },
                                                                        "Set_column_index_to_0": {
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "columnIndex",
                                                                                "value": 0
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "Case_Title": {
                                                                    "case": "Title",
                                                                    "actions": {
                                                                        "Set_patch_titles": {
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "patchTitles",
                                                                                "value": "@items('For_each_sensor_reading_column')?['values']"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "default": {
                                                                "actions": {}
                                                            },
                                                            "expression": "@items('For_each_sensor_reading_column')?['name']",
                                                            "type": "Switch"
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "equals": [
                                                                    "@items('For_each_sensor_reading_column')?['sensor']?['name']",
                                                                    "Patch - Patch List Applicability"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If",
                                                    "else": {
                                                        "actions": {}
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Set_notInstalledRowIndices_to_empty_list": [
                                                    "Succeeded"
                                                ],
                                                "Set_currentHostName": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "Parse_endpoint_JSON": {
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@items('For_each_endpoint')?['node']",
                                                "schema": {
                                                    "properties": {
                                                        "ipAddress": {
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "os": {
                                                            "properties": {
                                                                "platform": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "sensorReadings": {
                                                            "properties": {
                                                                "columns": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "sensor": {
                                                                                "properties": {
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "values": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "sensor",
                                                                            "name",
                                                                            "values"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Set_notInstalledRowIndices_to_empty_list": {
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "notInstalledRowIndices",
                                                "value": []
                                            }
                                        },
                                        "Set_currentHostName": {
                                            "runAfter": {
                                                "Parse_endpoint_JSON": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "currentHostName",
                                                "value": "@body('Parse_endpoint_JSON')?['name']"
                                            }
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_classifications": [
                                    "Succeeded"
                                ],
                                "Initialize_patch_titles": [
                                    "Succeeded"
                                ],
                                "Initialize_notInstalledRowIndices": [
                                    "Succeeded"
                                ],
                                "Initialize_column_index": [
                                    "Succeeded"
                                ],
                                "Initialize_results": [
                                    "Succeeded"
                                ],
                                "Initialize_currentHostName": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Initialize_Endpoint_Filter": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endpointFilters",
                                        "type": "array"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Exit_early_if_incident_has_no_hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Initialize_API_Query": {
                            "type": "InitializeVariable",
                            "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "apiQuery",
                                        "type": "string",
                                        "value": "query ($endpointsFilter: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource, $refreshCursor: Cursor) {\n  endpoints(source: $source, first: 10, after: $endCursor, filter: $endpointsFilter, refresh: $refreshCursor) {\n    edges {\n      node {\n        name\n        ipAddress\n        os { platform }\n        sensorReadings(\n          sensors: [\n            {\n              name: \"Patch - Patch List Applicability\",\n              params: [{name: \"bin\", value: \"0\"}, {name: \"binCount\", value: \"1\"}],\n            \t\n            }\n          ]\n        ) {\n          columns {\n            sensor {\n              name\n            }\n            name\n            values\n          }\n        }\n      }\n    }\n    collectionInfo {\n      startCursor\n      success\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Exit_early_if_incident_has_no_hosts": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Initialize_API_Variables": {
                            "runAfter": {
                                "Initialize_Endpoint_Source_to_TS": [
                                    "Succeeded"
                                ],
                                "Set_Endpoint_filter": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "queryVariables",
                                        "type": "string",
                                        "value": "{\n  \"source\": @{variables('endpointSource')},\n  \"endpointsFilter\": {\n    \"any\": true,\n    \"filters\": @{variables('endpointFilters')}\n  }\n}"
                                    }
                                ]
                            }
                        },
                        "Initialize_API_Response": {
                            "runAfter": {
                                "Exit_early_if_incident_has_no_hosts": [
                                    "SUCCEEDED"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "apiResponse",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "Initialize_response_cursor": {
                            "runAfter": {
                                "Exit_early_if_incident_has_no_hosts": [
                                    "SUCCEEDED"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "cursor",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_refresh_cursor": {
                            "runAfter": {
                                "Initialize_API_Response": [
                                    "SUCCEEDED"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "refreshCursor",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Endpoint_Source_to_TS": {
                            "runAfter": {
                                "Exit_early_if_incident_has_no_hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endpointSource",
                                        "type": "object",
                                        "value": {
                                            "ts": {
                                                "stableWaitTime": 30
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        "Initialize_classifications": {
                            "runAfter": {
                                "Get_Available_Patches_for_incident_hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "classifications",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_column_index": {
                            "runAfter": {
                                "Get_Available_Patches_for_incident_hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "columnIndex",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_list_of_endpoints": {
                            "runAfter": {
                                "Exit_early_if_incident_has_no_hosts": [
                                    "SUCCEEDED"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endpoints",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_notInstalledRowIndices": {
                            "runAfter": {
                                "Get_Available_Patches_for_incident_hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "notInstalledRowIndices",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_patch_titles": {
                            "runAfter": {
                                "Get_Available_Patches_for_incident_hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "patchTitles",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_results": {
                            "runAfter": {
                                "Get_Available_Patches_for_incident_hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "results",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Get_Available_Patches_for_incident_hosts": {
                            "type": "Scope",
                            "actions": {
                                "Loop_Paginated_Response_if_has_multiple_pages": {
                                    "actions": {
                                        "Until_there_are_no_more_pages": {
                                            "actions": {
                                                "For_each_endpoint_in_paginated_API_Gateway_response": {
                                                    "foreach": "@body('Parse_page')?['data']?['endpoints']?['edges']",
                                                    "actions": {
                                                        "Append_endpoint_to_endpoints": {
                                                            "type": "AppendToArrayVariable",
                                                            "inputs": {
                                                                "name": "endpoints",
                                                                "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Update_cursor_to_next_page": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Foreach",
                                                    "runtimeConfiguration": {
                                                        "concurrency": {
                                                            "repetitions": 1
                                                        }
                                                    }
                                                },
                                                "Get_next_page": {
                                                    "runAfter": {
                                                        "Update_cursor_for_next_page": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http",
                                                    "inputs": {
                                                        "body": {
                                                            "query": "@variables('apiQuery')",
                                                            "variables": "@json(variables('queryVariables'))"
                                                        },
                                                        "headers": {
                                                            "Content-Type": "application/json",
                                                            "session": "@parameters('TaniumApiToken')"
                                                        },
                                                        "method": "POST",
                                                        "uri": "@parameters('TaniumApiGatewayApi')"
                                                    },
                                                    "runtimeConfiguration": {
                                                        "secureData": {
                                                            "properties": [
                                                                "inputs"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "Parse_page": {
                                                    "runAfter": {
                                                        "Get_next_page": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@body('Get_next_page')",
                                                        "schema": {
                                                            "properties": {
                                                                "data": {
                                                                    "properties": {
                                                                        "endpoints": {
                                                                            "properties": {
                                                                                "edges": {
                                                                                    "items": {
                                                                                        "properties": {
                                                                                            "node": {
                                                                                                "type": "object"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "node"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "pageInfo": {
                                                                                    "properties": {
                                                                                        "endCursor": {
                                                                                            "type": [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        },
                                                                                        "hasNextPage": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "hasPreviousPage": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "startCursor": {
                                                                                            "type": [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "Update_cursor_to_next_page": {
                                                    "runAfter": {
                                                        "Parse_page": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "cursor",
                                                        "value": "@body('Parse_page')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                                                    }
                                                },
                                                "Update_cursor_for_next_page": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "queryVariables",
                                                        "value": "{\n  \"source\": @{variables('endpointSource')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                                                    }
                                                }
                                            },
                                            "expression": "@equals(body('Parse_page')?['data']?['endpoints']?['pageInfo']?['hasNextPage'],false)",
                                            "limit": {
                                                "count": 60,
                                                "timeout": "PT1H"
                                            },
                                            "type": "Until"
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "runAfter": {
                                        "Set_response_cursor": [
                                            "SUCCEEDED"
                                        ],
                                        "Set_endpoints": [
                                            "SUCCEEDED"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@body('Parse_API_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                                                    "@true"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Exit_early_If_Tanium_Has_No_Data_for_Incident": {
                                    "actions": {
                                        "Add_comment__-_no_data_in_Tanium": {
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>No data found in Tanium for hosts.</p>"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                            }
                                        },
                                        "Exit_early__-_no_data_in_Tanium": {
                                            "runAfter": {
                                                "Add_comment__-_no_data_in_Tanium": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Terminate",
                                            "inputs": {
                                                "runStatus": "Succeeded"
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "runAfter": {
                                        "Parse_API_response": [
                                            "SUCCEEDED"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@body('Parse_API_response')?['data']?['endpoints']?['pageInfo']?['endCursor']",
                                                    "@null"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_API_response": {
                                    "runAfter": {
                                        "Check_for_successful_results": [
                                            "SUCCEEDED"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@variables('apiResponse')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "endpoints": {
                                                            "properties": {
                                                                "edges": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "node": {
                                                                                "properties": {
                                                                                    "ipAddress": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "os": {
                                                                                        "properties": {
                                                                                            "platform": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "sensorReadings": {
                                                                                        "properties": {
                                                                                            "columns": {
                                                                                                "items": {
                                                                                                    "properties": {
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "sensor": {
                                                                                                            "properties": {
                                                                                                                "name": {
                                                                                                                    "type": "string"
                                                                                                                }
                                                                                                            },
                                                                                                            "type": "object"
                                                                                                        },
                                                                                                        "values": {
                                                                                                            "items": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "type": "array"
                                                                                                        }
                                                                                                    },
                                                                                                    "required": [
                                                                                                        "sensor",
                                                                                                        "name",
                                                                                                        "values"
                                                                                                    ],
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "type": "array"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "node"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "pageInfo": {
                                                                    "properties": {
                                                                        "endCursor": {
                                                                            "type": [
                                                                                "string",
                                                                                "null"
                                                                            ]
                                                                        },
                                                                        "hasNextPage": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "hasPreviousPage": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "startCursor": {
                                                                            "type": [
                                                                                "string",
                                                                                "null"
                                                                            ]
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Until_endpoint_data_is_returned": {
                                    "actions": {
                                        "List_Available_Patches": {
                                            "type": "Http",
                                            "inputs": {
                                                "body": {
                                                    "query": "@variables('apiQuery')",
                                                    "variables": "@json(variables('queryVariables'))"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json",
                                                    "session": "@parameters('TaniumApiToken')"
                                                },
                                                "method": "POST",
                                                "uri": "@parameters('TaniumApiGatewayApi')"
                                            },
                                            "runtimeConfiguration": {
                                                "secureData": {
                                                    "properties": [
                                                        "inputs"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    "expression": "@not(equals(body('List_Available_Patches')?['data']?['endpoints']?['edges'],null))",
                                    "limit": {
                                        "count": 60,
                                        "timeout": "PT1H"
                                    },
                                    "type": "Until"
                                },
                                "Set_response_cursor": {
                                    "runAfter": {
                                        "Exit_early_If_Tanium_Has_No_Data_for_Incident": [
                                            "SUCCEEDED"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "cursor",
                                        "value": "@{body('Parse_API_response')?['data']?['endpoints']?['pageInfo']?['endCursor']}"
                                    }
                                },
                                "Set_apiResponse": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "apiResponse",
                                        "value": "@body('List_Available_Patches')"
                                    },
                                    "runAfter": {
                                        "Until_endpoint_data_is_returned": [
                                            "SUCCEEDED"
                                        ]
                                    }
                                },
                                "Set_refreshCursor": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "refreshCursor",
                                        "value": "@body('List_Available_Patches')?['data']?['endpoints']?['collectionInfo']?['startCursor']"
                                    },
                                    "runAfter": {
                                        "Until_endpoint_data_is_returned": [
                                            "SUCCEEDED"
                                        ]
                                    }
                                },
                                "Check_for_successful_results": {
                                    "type": "If",
                                    "description": "If we don't then we'll use the refresh cursor until we have endpoint data.",
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(body('List_Available_Patches')?['data']?['endpoints']?['edges'])",
                                                    0
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@body('List_Available_Patches')?['data']?['endpoints']?['collectionInfo']?['success']",
                                                    "@true"
                                                ]
                                            }
                                        ]
                                    },
                                    "actions": {},
                                    "else": {
                                        "actions": {
                                            "Until_endpoint_data_is_refreshed": {
                                                "type": "Until",
                                                "expression": "@greater(length(body('Refresh_API_Gateway_query')?['data']?['endpoints']?['edges']), 0)",
                                                "limit": {
                                                    "count": 60,
                                                    "timeout": "PT10M"
                                                },
                                                "actions": {
                                                    "Refresh_API_Gateway_query": {
                                                        "type": "Http",
                                                        "inputs": {
                                                            "uri": "@parameters('TaniumApiGatewayApi')",
                                                            "method": "POST",
                                                            "headers": {
                                                                "Content-Type": "application/json",
                                                                "session": "@parameters('TaniumApiToken')"
                                                            },
                                                            "body": {
                                                                "query": "@variables('apiQuery')",
                                                                "variables": "@json(variables('queryVariables'))"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Update_refresh_cursor_in_query_variables": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "runtimeConfiguration": {
                                                            "secureData": {
                                                                "properties": [
                                                                    "inputs"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    "Set_api_gateway_response_to_refreshed_response": {
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "apiResponse",
                                                            "value": "@body('Refresh_API_Gateway_query')"
                                                        },
                                                        "runAfter": {
                                                            "Set_refresh_cursor": [
                                                                "Succeeded"
                                                            ]
                                                        }
                                                    },
                                                    "Set_refresh_cursor": {
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "refreshCursor",
                                                            "value": "@{body('List_Available_Patches')?['data']?['endpoints']?['collectionInfo']?['startCursor']}"
                                                        },
                                                        "runAfter": {
                                                            "Refresh_API_Gateway_query": [
                                                                "Succeeded"
                                                            ]
                                                        }
                                                    },
                                                    "Update_refresh_cursor_in_query_variables": {
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "queryVariables",
                                                            "value": "{\n  \"source\": @{variables('endpointSource')},\n  \"refreshCursor\": \"@{variables('refreshCursor')}\"\n}"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_apiResponse": [
                                            "SUCCEEDED"
                                        ],
                                        "Set_refreshCursor": [
                                            "SUCCEEDED"
                                        ]
                                    }
                                },
                                "Set_endpoints": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "endpoints",
                                        "value": "@body('Parse_API_response')?['data']?['endpoints']?['edges']"
                                    },
                                    "runAfter": {
                                        "Exit_early_If_Tanium_Has_No_Data_for_Incident": [
                                            "SUCCEEDED"
                                        ]
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_API_Variables": [
                                    "Succeeded"
                                ],
                                "Initialize_API_Query": [
                                    "SUCCEEDED"
                                ],
                                "Initialize_refresh_cursor": [
                                    "SUCCEEDED"
                                ],
                                "Initialize_list_of_endpoints": [
                                    "SUCCEEDED"
                                ],
                                "Initialize_response_cursor": [
                                    "SUCCEEDED"
                                ]
                            }
                        },
                        "Build_Endpoint_Filter_from_Hosts": {
                            "type": "JavaScriptCode",
                            "inputs": {
                                "code": "var hosts=workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts,filters=[];for(let s=0;s<hosts.length;s++){var hn=hosts[s].hostName,ad=hosts[s].additionalData,hAd=null!=ad,hIp=hAd&&null!==ad.LastIpAddress&&void 0!==ad.LastIpAddress,hFq=hAd&&null!==ad.FQDN&&void 0!==ad.FQDN&&ad.FQDN.includes(\".\");if(null!=hn&&\"\"!==hn){var hf={path:\"name\",value:hn},sf={sensor:{column:\"Install Status\",name:\"Patch - Patch List Applicability\",params:[{name:\"bin\",value:\"0\"},{name:\"binCount\",value:\"1\"}]},value:\"Not Installed\"};if(hFq&&hIp){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:ad.LastIpAddress},sf,{any:!0,filters:[hf,{path:\"name\",value:ad.FQDN.trim()}],negated:!1}]});continue}if(hFq&&!hIp){filters.push({any:!0,filters:[hf,sf,{path:\"name\",value:ad.FQDN.trim()}],negated:!1});continue}if(hIp&&!hFq){filters.push({filters:[hf,sf,{op:\"CONTAINS\",path:\"ipAddress\",value:ad.LastIpAddress}]});continue}filters.push({filters:[hf,sf]})}}\nreturn filters;\n"
                            },
                            "runAfter": {
                                "Initialize_Endpoint_Filter": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Set_Endpoint_filter": {
                            "type": "SetVariable",
                            "inputs": {
                                "name": "endpointFilters",
                                "value": "@body('Build_Endpoint_Filter_from_Hosts')"
                            },
                            "runAfter": {
                                "Build_Endpoint_Filter_from_Hosts": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Initialize_currentHostName": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "currentHostName",
                                        "type": "string"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Get_Available_Patches_for_incident_hosts": [
                                    "Succeeded"
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionName": "[parameters('AzureSentinelConnectionName')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]",
                                "id": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    },
                    "TaniumApiToken": {
                        "value": "[parameters('TaniumApiToken')]"
                    },
                    "TaniumApiGatewayApi": {
                        "value": "[variables('TaniumApiGatewayApi')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(parameters('PlaybookName'))]",
            "properties": {
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.Logic/workflows', parameters('PlaybookName')), '2019-05-01', 'Full').identity.principalId]",
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ab8e14d6-4a74-4a29-9ba8-549422addade')]",
                "scope": "[resourceGroup().id]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Logic/workflows', parameters('PlaybookName'))]"
            ]
        }
    ]
}
