{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Tanium-Apply-SecurityPatches-WithoutReboot",
        "description": "This playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for applicable security patches for those endpoints, adds a comment to the incident with that information, then directs Tanium Patch to apply those security patches without rebooting the endpoint.",
        "prerequisites": [
            "1. Microsoft Sentinel incidents with associated hosts.",
            "2. A [Tanium API Token](https://docs.tanium.com/platform_user/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
            "3. A hostname for your Tanium environment reachable from Logic Apps.",
            "4. Tanium Patch installed and operational in your Tanium environment."
        ],
        "postDeploymentSteps": [
            "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
        ],
        "entities": [ "host" ],
        "tags": ["Enrichment"],
        "lastUpdateTime": "2023-12-08T00:00:00.000Z",
        "support": {
            "tier": "developer",
            "link": "https://www.tanium.com"
        },
        "author": {
            "name": "Tanium"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Tanium-Apply-SecurityPatches-WithoutReboot",
            "type": "string"
        },
        "IntegrationAccountName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
            }
        },
        "IntegrationAccountResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
            }
        },
        "TaniumApiToken": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
            }
        },
        "TaniumServerHostname": {
            "defaultValue": "hostname",
            "type": "String",
            "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
            }
        }
    },
    "variables": {
        "AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "TaniumApiGatewayApi": "[uri(concat('https://', parameters('TaniumServerHostname')), '/plugin/products/gateway/graphql')]",
        "TaniumPatchContentSetUri": "[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/content_sets/by-name/Patch%20Content%20Set')]",
        "TaniumGroupsUri": "[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/groups')]",
        "TaniumGroupsByNameUri": "[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/groups/by-name')]",
        "TaniumPatchDeploymentsUri": "[uri(concat('https://', parameters('TaniumServerHostname')), '/plugin/products/patch/v2/deployments')]",
        "TaniumServerUri": "[uri(concat('https://', parameters('TaniumServerHostname')), '/')]"
    },
    "resources": [
        {
          "type": "Microsoft.Web/connections",
          "apiVersion": "2018-07-01-preview",
          "name": "[variables('AzureSentinelConnectionName')]",
          "location": "[resourceGroup().location]",
          "properties": {
              "displayName": "[variables('AzureSentinelConnectionName')]",
              "customParameterValues": {},
              "api": {
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
              }
          }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2019-05-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "integrationAccount": {
                    "id": "[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "TaniumApiToken": {
                            "type": "SecureString",
                            "metadata": {
                                "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                            }
                        },
                        "TaniumApiGatewayApi": {
                            "type": "String"
                        },
                        "TaniumPatchContentSetUri": {
                            "type": "String"
                        },
                        "TaniumGroupsUri": {
                            "type": "String"
                        },
                        "TaniumGroupsByNameUri": {
                            "type": "String"
                        },
                        "TaniumPatchDeploymentsUri": {
                            "type": "String"
                        },
                        "TaniumServerUri": {
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Check_each_patch_deployment_id_is_completed": {
                            "foreach": "@variables('patch deployment ids')",
                            "actions": {
                                "Comment_if_patch_deployment_id_is_not_completed": {
                                    "actions": {},
                                    "runAfter": {},
                                    "else": {
                                        "actions": {
                                            "Add_undetermined_success_comment_to_incident_(V3)": {
                                                "runAfter": {
                                                    "Compose_unknown_result": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": {
                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                        "message": "<p>@{outputs('Compose_unknown_result')}</p>"
                                                    },
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/Incidents/Comment"
                                                }
                                            },
                                            "Compose_unknown_result": {
                                                "runAfter": {},
                                                "type": "Compose",
                                                "inputs": "\"Completion status of Tanium Patch deployment @{item()} could not be determined from the API. Browse to <a href=\"@{parameters('TaniumServerUri')}#/patch/deployments/deployment-transaction/install/@{item()}\">Tanium Patch deployment @{item()}</a> for status."
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "contains": [
                                                    "@variables('completed patch deployment ids')",
                                                    "@item()"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Until_all_patch_deployments_have_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Check_for_successful_results": {
                            "actions": {},
                            "runAfter": {
                                "Initialize_API_Gateway_refresh_cursor": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Until_endpoint_data_is_refreshed": {
                                        "actions": {
                                            "Refresh_API_Gateway_query": {
                                                "runAfter": {
                                                    "Update_refresh_cursor_in_query_variables": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Http",
                                                "inputs": {
                                                    "body": {
                                                        "query": "@variables('api gateway query')",
                                                        "variables": "@json(variables('api gateway query variables'))"
                                                    },
                                                    "headers": {
                                                        "Content-Type": "application/json",
                                                        "session": "@parameters('TaniumApiToken')"
                                                    },
                                                    "method": "POST",
                                                    "uri": "@parameters('TaniumApiGatewayApi')"
                                                },
                                                "runtimeConfiguration": {
                                                    "secureData": {
                                                        "properties": [
                                                            "inputs"
                                                        ]
                                                    }
                                                }
                                            },
                                            "Set_api_gateway_response_to_refreshed_response": {
                                                "runAfter": {
                                                    "Set_refresh_cursor": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "API Gateway Response",
                                                    "value": "@body('Refresh_API_Gateway_query')"
                                                }
                                            },
                                            "Set_refresh_cursor": {
                                                "runAfter": {
                                                    "Refresh_API_Gateway_query": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "api gateway refresh cursor",
                                                    "value": "@{body('Refresh_API_Gateway_query')?['data']?['endpoints']?['collectionInfo']?['startCursor']}"
                                                }
                                            },
                                            "Update_refresh_cursor_in_query_variables": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "api gateway query variables",
                                                    "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"refreshCursor\": \"@{variables('api gateway refresh cursor')}\"\n}"
                                                }
                                            }
                                        },
                                        "runAfter": {},
                                        "expression": "@greater(length(body('Refresh_API_Gateway_query')?['data']?['endpoints']?['edges']), 0)",
                                        "limit": {
                                            "count": 60,
                                            "timeout": "PT10M"
                                        },
                                        "type": "Until"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Query_API_Gateway')?['data']?['endpoints']?['edges'])",
                                            0
                                        ]
                                    },
                                    {
                                        "equals": [
                                            "@body('Query_API_Gateway')?['data']?['endpoints']?['collectionInfo']?['success']",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If",
                            "description": "If we don't then we'll use the refresh cursor until we have endpoint data."
                        },
                        "Get_Hosts_From_Incident": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/host"
                            }
                        },
                        "Exit_early_if_no_hosts_are_found": {
                            "actions": {
                                "Add_no_hosts_comment_to_incident_(V3)": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>No hosts found for this incident.</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Terminate": {
                                    "runAfter": {
                                        "Add_no_hosts_comment_to_incident_(V3)": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Succeeded"
                                    }
                                }
                            },
                            "runAfter": {
                                "Get_Hosts_From_Incident": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "less": [
                                            "@length(body('Get_Hosts_From_Incident')?['Hosts'])",
                                            1
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "For_each_endpoint": {
                            "foreach": "@variables('endpoints')",
                            "actions": {
                                "Add_patch_deployment_comment_to_incident_(V3)": {
                                    "runAfter": {
                                        "Append_patch_deployment_id_to_patch_deployment_ids": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Tanium Patch deployment @{body('HTTP_POST_patch_deployment')?['id']} created to apply security patches to the endpoint: @{body('Parse_endpoint_JSON')?['name']}</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Append_patch_deployment_id_to_patch_deployment_ids": {
                                    "runAfter": {
                                        "HTTP_POST_patch_deployment": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "patch deployment ids",
                                        "value": "@{body('HTTP_POST_patch_deployment')?['id']}"
                                    }
                                },
                                "Comment_available_security_patches_to_incident_(V3)": {
                                    "runAfter": {
                                        "Create_HTML_table_of_available_security_patches": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Available security patches for @{body('Parse_endpoint_JSON')?['name']}<br>\n<br>\n@{body('Create_HTML_table_of_available_security_patches')}</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Create_HTML_table_of_available_security_patches": {
                                    "runAfter": {
                                        "For_each_not_installed_patch": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "format": "HTML",
                                        "from": "@variables('results')"
                                    }
                                },
                                "For_each_not_installed_patch": {
                                    "foreach": "@variables('not installed row indexes')",
                                    "actions": {
                                        "if_security_update": {
                                            "actions": {
                                                "Append_to_applicable_tanium_security_patch_ids": {
                                                    "runAfter": {
                                                        "Append_to_results": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "tanium applicable security patch ids",
                                                        "value": "@variables('tanium patch ids')[items('For_each_not_installed_patch')]"
                                                    }
                                                },
                                                "Append_to_results": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "results",
                                                        "value": {
                                                            "Available Security Patches": "@variables('patch titles')[items('For_each_not_installed_patch')]",
                                                            "Tanium UID": "@variables('tanium patch ids')[items('For_each_not_installed_patch')]"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "expression": {
                                                "or": [
                                                    {
                                                        "equals": [
                                                            "@variables('classifications')[items('For_each_not_installed_patch')]",
                                                            "Security Updates"
                                                        ]
                                                    },
                                                    {
                                                        "equals": [
                                                            "@variables('classifications')[items('For_each_not_installed_patch')]",
                                                            "security"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {
                                        "For_each_sensor_reading_column": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "For_each_sensor_reading_column": {
                                    "foreach": "@body('Parse_endpoint_JSON')?['sensorReadings']?['columns']",
                                    "actions": {
                                        "if_column_is_from_patch_list_applicability": {
                                            "actions": {
                                                "Switch_on_sensor_column": {
                                                    "runAfter": {},
                                                    "cases": {
                                                        "Case_Classification": {
                                                            "case": "Classification",
                                                            "actions": {
                                                                "Set_classifications": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "classifications",
                                                                        "value": "@items('For_each_sensor_reading_column')?['values']"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "Case_Install_Status": {
                                                            "case": "Install Status",
                                                            "actions": {
                                                                "For_each_install_status_row": {
                                                                    "foreach": "@items('For_each_sensor_reading_column')?['values']",
                                                                    "actions": {
                                                                        "If_install_status_is_Not_Installed": {
                                                                            "actions": {
                                                                                "Append_to_not_installed_column_indexes": {
                                                                                    "runAfter": {},
                                                                                    "type": "AppendToArrayVariable",
                                                                                    "inputs": {
                                                                                        "name": "not installed row indexes",
                                                                                        "value": "@variables('column index')"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "runAfter": {},
                                                                            "expression": {
                                                                                "and": [
                                                                                    {
                                                                                        "equals": [
                                                                                            "@items('For_each_install_status_row')",
                                                                                            "Not Installed"
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "type": "If"
                                                                        },
                                                                        "Increment_column_index": {
                                                                            "runAfter": {
                                                                                "If_install_status_is_Not_Installed": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "IncrementVariable",
                                                                            "inputs": {
                                                                                "name": "column index",
                                                                                "value": 1
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "type": "Foreach"
                                                                }
                                                            }
                                                        },
                                                        "Case_Tanium_UID": {
                                                            "case": "Tanium UID",
                                                            "actions": {
                                                                "Set_tanium_patch_ids": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "tanium patch ids",
                                                                        "value": "@items('For_each_sensor_reading_column')?['values']"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "Case_Title": {
                                                            "case": "Title",
                                                            "actions": {
                                                                "Set_patch_titles": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "patch titles",
                                                                        "value": "@items('For_each_sensor_reading_column')?['values']"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "default": {
                                                        "actions": {}
                                                    },
                                                    "expression": "@items('For_each_sensor_reading_column')?['name']",
                                                    "type": "Switch"
                                                }
                                            },
                                            "runAfter": {},
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@items('For_each_sensor_reading_column')?['sensor']?['name']",
                                                            "Patch - Patch List Applicability"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_endpoint_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "Compose_limiting_group": {
                                    "runAfter": {
                                        "Comment_available_security_patches_to_incident_(V3)": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "All%20@{body('Parse_endpoint_JSON')?['os']?['platform']}"
                                },
                                "HTTP_GET_limiting_group": {
                                    "runAfter": {
                                        "Compose_limiting_group": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "session": "@parameters('TaniumApiToken')"
                                        },
                                        "method": "GET",
                                        "uri": "@{uri(parameters('TaniumGroupsByNameUri'), outputs('Compose_limiting_group'))}"

                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs"
                                            ]
                                        }
                                    }
                                },
                                "HTTP_POST_patch_deployment": {
                                    "runAfter": {
                                        "Set_patch_deployment": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "body": "@variables('patch deployment')",
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "session": "@parameters('TaniumApiToken')"
                                        },
                                        "method": "POST",
                                        "uri": "@parameters('TaniumPatchDeploymentsUri')"

                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs"
                                            ]
                                        }
                                    }
                                },
                                "HTTP_POST_targeting_group": {
                                    "runAfter": {
                                        "Set_targeting_question": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "body": {
                                            "text": "@{variables('targeting question')}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "session": "@parameters('TaniumApiToken')"
                                        },
                                        "method": "POST",
                                        "uri": "@parameters('TaniumGroupsUri')"
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs"
                                            ]
                                        }
                                    }
                                },
                                "Parse_endpoint_JSON": {
                                    "runAfter": {
                                        "Set_not_installed_row_indexes_to_empty_list": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@variables('endpoint')",
                                        "schema": {
                                            "properties": {
                                                "ipAddress": {
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "properties": {
                                                        "platform": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "sensorReadings": {
                                                    "properties": {
                                                        "columns": {
                                                            "items": {
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "sensor": {
                                                                        "properties": {
                                                                            "name": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "values": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "sensor",
                                                                    "name",
                                                                    "values"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Parse_limiting_group_response": {
                                    "runAfter": {
                                        "HTTP_GET_limiting_group": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('HTTP_GET_limiting_group')",
                                        "schema": {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "and_flag": {
                                                            "type": "boolean"
                                                        },
                                                        "content_set": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "created_persona": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "created_time": {
                                                            "type": "string"
                                                        },
                                                        "created_user": {
                                                            "properties": {
                                                                "display_name": {
                                                                    "type": "string"
                                                                },
                                                                "domain": {
                                                                    "type": "string"
                                                                },
                                                                "id": {
                                                                    "type": "integer"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "deleted_flag": {
                                                            "type": "boolean"
                                                        },
                                                        "filter_flag": {
                                                            "type": "boolean"
                                                        },
                                                        "filters": {
                                                            "type": "array"
                                                        },
                                                        "id": {
                                                            "type": "integer"
                                                        },
                                                        "management_rights_flag": {
                                                            "type": "boolean"
                                                        },
                                                        "modified_persona": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "modified_time": {
                                                            "type": "string"
                                                        },
                                                        "modified_user": {
                                                            "properties": {
                                                                "display_name": {
                                                                    "type": "string"
                                                                },
                                                                "domain": {
                                                                    "type": "string"
                                                                },
                                                                "id": {
                                                                    "type": "integer"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "not_flag": {
                                                            "type": "boolean"
                                                        },
                                                        "sub_groups": {
                                                            "items": {
                                                                "properties": {
                                                                    "and_flag": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "deleted_flag": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "filter_flag": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "filters": {
                                                                        "items": {
                                                                            "properties": {
                                                                                "all_values_flag": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "delimiter": {
                                                                                    "type": "string"
                                                                                },
                                                                                "delimiter_index": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "ignore_case_flag": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "max_age_seconds": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "not_flag": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "operator": {
                                                                                    "type": "string"
                                                                                },
                                                                                "sensor": {
                                                                                    "properties": {
                                                                                        "hash": {
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "id": {
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "substring_flag": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "substring_length": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "substring_start": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "value": {
                                                                                    "type": "string"
                                                                                },
                                                                                "value_type": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "sensor",
                                                                                "max_age_seconds",
                                                                                "ignore_case_flag",
                                                                                "operator",
                                                                                "value_type",
                                                                                "value",
                                                                                "not_flag",
                                                                                "all_values_flag",
                                                                                "substring_flag",
                                                                                "substring_start",
                                                                                "substring_length",
                                                                                "delimiter",
                                                                                "delimiter_index"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "id": {
                                                                        "type": "integer"
                                                                    },
                                                                    "management_rights_flag": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "not_flag": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "sub_groups": {
                                                                        "type": "array"
                                                                    },
                                                                    "text": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id",
                                                                    "type",
                                                                    "text",
                                                                    "and_flag",
                                                                    "not_flag",
                                                                    "management_rights_flag",
                                                                    "filter_flag",
                                                                    "deleted_flag",
                                                                    "filters",
                                                                    "sub_groups"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "text": {
                                                            "type": "string"
                                                        },
                                                        "track_computer_id_flag": {
                                                            "type": "integer"
                                                        },
                                                        "type": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Set_column_index_to_0": {
                                    "runAfter": {
                                        "Set_endpoint": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "column index",
                                        "value": 0
                                    }
                                },
                                "Set_endpoint": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "endpoint",
                                        "value": "@items('For_each_endpoint')?['node']"
                                    }
                                },
                                "Set_limiting_group_id": {
                                    "runAfter": {
                                        "Parse_limiting_group_response": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "limiting group id",
                                        "value": "@{body('Parse_limiting_group_response')?['data']?['id']}"
                                    }
                                },
                                "Set_not_installed_row_indexes_to_empty_list": {
                                    "runAfter": {
                                        "Set_column_index_to_0": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "not installed row indexes",
                                        "value": []
                                    }
                                },
                                "Set_patch_deployment": {
                                    "runAfter": {
                                        "Switch_on_OS_Platform": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "patch deployment",
                                        "value": {
                                            "contentSetId": "@variables('patch content set id')",
                                            "description": "Deploying applicable security patches to @{body('Parse_endpoint_JSON')?['name']} from Microsoft Sentinel",
                                            "distributeOverTimeMinutes": 0,
                                            "downloadImmediately": true,
                                            "download_immediately": true,
                                            "endTime": "@{variables('end time')}",
                                            "eussAvailableBeforeStart": false,
                                            "eussHideFromActivity": false,
                                            "frequencyType": "single",
                                            "issuerTimezone": "UTC",
                                            "name": "security patches to @{body('Parse_endpoint_JSON')?['name']}",
                                            "osType": "@{variables('os type')}",
                                            "overrideBlacklists": true,
                                            "overrideMaintenanceWindows": true,
                                            "patchListIdsWithLatestVersion": [],
                                            "patchListIdsWithPinnedVersion": [],
                                            "patchTaniumUids": "@variables('tanium applicable security patch ids')",
                                            "restart": false,
                                            "startTime": "@{variables('start time')}",
                                            "targetLimitingGroupIds": [
                                                "@int(variables('limiting group id'))"
                                            ],
                                            "targetedQuestionGroupIds": [
                                                "@body('HTTP_POST_targeting_group')?['data']?['id']"
                                            ],
                                            "type": "install",
                                            "useTaniumClientTimeZone": false
                                        }
                                    }
                                },
                                "Set_targeting_question": {
                                    "runAfter": {
                                        "Set_limiting_group_id": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "targeting question",
                                        "value": "Computer Name equals @{body('Parse_endpoint_JSON')?['name']} and IP Address contains @{body('Parse_endpoint_JSON')?['ipAddress']}"
                                    }
                                },
                                "Switch_on_OS_Platform": {
                                    "runAfter": {
                                        "HTTP_POST_targeting_group": [
                                            "Succeeded"
                                        ]
                                    },
                                    "cases": {
                                        "Case_Mac": {
                                            "case": "Mac",
                                            "actions": {
                                                "Set_os_type_to_macos": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "os type",
                                                        "value": "macos"
                                                    }
                                                }
                                            }
                                        },
                                        "Case_Windows": {
                                            "case": "Windows",
                                            "actions": {
                                                "Set_os_type_to_windows": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "os type",
                                                        "value": "windows"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "default": {
                                        "actions": {
                                            "Set_os_type_to_linux": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "os type",
                                                    "value": "linux"
                                                }
                                            }
                                        }
                                    },
                                    "expression": "@body('Parse_endpoint_JSON')?['os']?['platform']",
                                    "type": "Switch"
                                }
                            },
                            "runAfter": {
                                "Initialize_completed_patch_deployment_ids": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Build_Endpoint_Filter_from_Hosts_With_FQDN": {
                            "inputs": {
                                "code": "var hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nvar filters=[];for(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,t=hosts[i].additionalData,e=null!=t,l=e&&null!==t.LastIpAddress&&void 0!==t.LastIpAddress,n=e&&null!==t.FQDN&&void 0!==t.FQDN&&t.FQDN.includes(\".\");if(null!=a&&\"\"!==a){var s={path:\"name\",value:a},d={sensor:{column:\"Install Status\",name:\"Patch - Patch List Applicability\",params:[{name:\"bin\",value:\"0\"},{name:\"binCount\",value:\"1\"}]},value:\"Not Installed\"};if(n&&l){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},d,{any:!0,filters:[s,{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1}]});continue}if(n&&!l){filters.push({any:!0,filters:[s,d,{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1});continue}}}\r\nreturn filters; "
                            },
                            "runAfter": {
                                "Initialize_Endpoint_Filter": [
                                    "Succeeded"
                                ]
                            },
                            "type": "JavaScriptCode"
                        },
                        "Parse_Endpoint_Filter_so_next_code_block_can_access": {
                            "inputs": {
                                "content": "@variables('endpoint filters')",
                                "schema": {
                                    "type": "array"
                                }
                            },
                            "runAfter": {
                                "Set_Endpoint_Filter_if_Needed_from_Hosts_with_FQDN": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson"
                        },
                        "Build_Endpoint_Filter_from_Hosts_Without_FQDN": {
                            "inputs": {
                                "code": "var filters = workflowContext.actions.Parse_Endpoint_Filter_so_next_code_block_can_access.outputs.body;\r\nvar hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nfor(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,l=hosts[i].additionalData,t=null!=l,s=t&&null!==l.LastIpAddress&&void 0!==l.LastIpAddress,e=t&&null!==l.FQDN&&void 0!==l.FQDN&&l.FQDN.includes(\".\");if(null!=a&&\"\"!==a){var n={path:\"name\",value:a},d={sensor:{column:\"Install Status\",name:\"Patch - Patch List Applicability\",params:[{name:\"bin\",value:\"0\"},{name:\"binCount\",value:\"1\"}]},value:\"Not Installed\"};if(s&&!e){filters.push({filters:[n,d,{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress}]});continue}e||s||filters.push({filters:[n,d,]})}}\r\nreturn filters;"
                            },
                            "runAfter": {
                                "Parse_Endpoint_Filter_so_next_code_block_can_access": [
                                    "Succeeded"
                                ]
                            },
                            "type": "JavaScriptCode"
                        },
                        "Set_Endpoint_Filter_if_needed_from_Hosts_without_FQDN": {
                            "actions": {
                                "Set_Endpoint_Filters_from_Hosts_Without_FQDN": {
                                    "inputs": {
                                        "name": "endpoint filters",
                                        "value": "@body('Build_Endpoint_Filter_from_Hosts_Without_FQDN')"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@length(outputs('Build_Endpoint_Filter_from_Hosts_Without_FQDN')['body'])",
                                                0
                                            ]
                                        }
                                    }
                                ]
                            },
                            "runAfter": {
                                "Build_Endpoint_Filter_from_Hosts_Without_FQDN": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Set_Endpoint_Filter_if_Needed_from_Hosts_with_FQDN": {
                            "actions": {
                                "Set_Endpoint_filters_from_Hosts_with_FQDN": {
                                    "inputs": {
                                        "name": "endpoint filters",
                                        "value": "@body('Build_Endpoint_Filter_from_Hosts_With_FQDN')"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@length(outputs('Build_Endpoint_Filter_from_Hosts_With_FQDN')['body'])",
                                                0
                                            ]
                                        }
                                    }
                                ]
                            },
                            
                            "runAfter": {
                                "Build_Endpoint_Filter_from_Hosts_With_FQDN": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "HTTP_GET_patch_content_set": {
                            "runAfter": {
                                "Initialize_end_time": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "headers": {
                                    "Content-Type": "application/json",
                                    "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "GET",
                                "uri": "@parameters('TaniumPatchContentSetUri')"
                            },
                            "runtimeConfiguration": {
                                "secureData": {
                                    "properties": [
                                        "inputs"
                                    ]
                                }
                            }
                        },
                        "Initialize_API_Gateway_Query": {
                            "runAfter": {
                                "Exit_early_if_no_hosts_are_found": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api gateway query",
                                        "type": "string",
                                        "value": "query ($endpointsFilter: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource, $refreshCursor: Cursor) {\n  endpoints(source: $source, first: 10, after: $endCursor, filter: $endpointsFilter, refresh: $refreshCursor) {\n    edges {\n      node {\n        name\n        ipAddress\n        os { platform }\n        sensorReadings(\n          sensors: [\n            {\n              name: \"Patch - Patch List Applicability\",\n              params: [{name: \"bin\", value: \"0\"}, {name: \"binCount\", value: \"1\"}],\n            \t\n            }\n          ]\n        ) {\n          columns {\n            sensor {\n              name\n            }\n            name\n            values\n          }\n        }\n      }\n    }\n    collectionInfo {\n      startCursor\n      success\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                                    }
                                ]
                            },
                            "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                        },
                        "Initialize_API_Gateway_Query_Variables": {
                            "runAfter": {
                                "Initialize_Tanium_Endpoint_Source_to_TS": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api gateway query variables",
                                        "type": "string",
                                        "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"endpointsFilter\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                                    }
                                ]
                            }
                        },
                        "Initialize_API_Gateway_Response": {
                            "runAfter": {
                                "Until_some_endpoint_data_is_returned": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "API Gateway Response",
                                        "type": "object",
                                        "value": "@body('Query_API_Gateway')"
                                    }
                                ]
                            }
                        },
                        "Stop_If_Tanium_Has_No_Hosts_From_Incident": {
                            "actions": {
                                "Add_comment_to_incident_(V3)_3": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>No data found in Tanium for hosts.</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Terminate_no_hosts_in_Tanium": {
                                    "runAfter": {
                                        "Add_comment_to_incident_(V3)_3": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Succeeded"
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_API_Gateway_response": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']",
                                            "@null"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_API_Gateway_query_cursor": {
                            "runAfter": {
                                "Stop_If_Tanium_Has_No_Hosts_From_Incident": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "cursor",
                                        "type": "string",
                                        "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                                    }
                                ]
                            }
                        },
                        "Initialize_API_Gateway_refresh_cursor": {
                            "runAfter": {
                                "Initialize_API_Gateway_Response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api gateway refresh cursor",
                                        "type": "string",
                                        "value": "@{body('Query_API_Gateway')?['data']?['endpoints']?['collectionInfo']?['startCursor']}"
                                    }
                                ]
                            }
                        },
                        "Initialize_Endpoint_Filter": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endpoint filters",
                                        "type": "array"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_API_Gateway_Query": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Initialize_Tanium_Endpoint_Source_to_TS": {
                            "runAfter": {
                                "Set_Endpoint_Filter_if_needed_from_Hosts_without_FQDN": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "tanium endpoint source",
                                        "type": "object",
                                        "value": {
                                            "ts": {
                                                "stableWaitTime": 30
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        "Initialize_applied_count": {
                            "runAfter": {
                                "Initialize_failed_count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "applied count",
                                        "type": "integer"
                                    }
                                ]
                            }
                        },
                        "Initialize_classifications": {
                            "runAfter": {
                                "Initialize_patch_titles": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "classifications",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_column_index": {
                            "runAfter": {
                                "Initialize_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "column index",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_completed_patch_deployment_ids": {
                            "runAfter": {
                                "Initialize_patch_deployment_ids": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "completed patch deployment ids",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_end_time": {
                            "runAfter": {
                                "Initialize_start_time": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "end time",
                                        "type": "string",
                                        "value": "@{addHours(utcNow(), 2, 'yyyy-MM-ddTHH:mm:ssZ')}"
                                    }
                                ]
                            }
                        },
                        "Initialize_endpoint": {
                            "runAfter": {
                                "Paginate_API_Gateway_query_if_needed": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endpoint",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "Initialize_endpoints_array": {
                            "runAfter": {
                                "Initialize_API_Gateway_query_cursor": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endpoints",
                                        "type": "array",
                                        "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                                    }
                                ]
                            }
                        },
                        "Initialize_failed_count": {
                            "runAfter": {
                                "Initialize_succeeded_count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "failed count",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_limiting_group_id": {
                            "runAfter": {
                                "Initialize_patch_content_set_id": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "limiting group id",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_not_installed_row_indexes": {
                            "runAfter": {
                                "Initialize_column_index": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "not installed row indexes",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_os_type": {
                            "runAfter": {
                                "Initialize_patch_deployment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "os type",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_patch_content_set_id": {
                            "runAfter": {
                                "Parse_patch_content_set": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "patch content set id",
                                        "type": "string",
                                        "value": "@{body('Parse_patch_content_set')?['data']?['id']}"
                                    }
                                ]
                            }
                        },
                        "Initialize_patch_deployment": {
                            "runAfter": {
                                "Initialize_targeting_question": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "patch deployment",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "Initialize_patch_deployment_ids": {
                            "runAfter": {
                                "Initialize_patch_deployment_titles": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "patch deployment ids",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_patch_deployment_results": {
                            "runAfter": {
                                "Initialize_result_row_indexes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "patch deployment results",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_patch_deployment_titles": {
                            "runAfter": {
                                "Initialize_applied_count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "patch deployment titles",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_patch_titles": {
                            "runAfter": {
                                "Initialize_not_installed_row_indexes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "patch titles",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_result_row_indexes": {
                            "runAfter": {
                                "Initialize_os_type": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "result row indexes",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_results": {
                            "runAfter": {
                                "Initialize_endpoint": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "results",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_start_time": {
                            "runAfter": {
                                "Initialize_tanium_applicable_security_patch_ids": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "start time",
                                        "type": "string",
                                        "value": "@{addMinutes(utcNow(), -5, 'yyyy-MM-ddTHH:mm:ssZ')}"
                                    }
                                ]
                            }
                        },
                        "Initialize_succeeded_count": {
                            "runAfter": {
                                "Initialize_patch_deployment_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "succeeded count",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_tanium_applicable_security_patch_ids": {
                            "runAfter": {
                                "Initialize_tanium_patch_ids": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "tanium applicable security patch ids",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_tanium_patch_ids": {
                            "runAfter": {
                                "Initialize_classifications": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "tanium patch ids",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_targeting_question": {
                            "runAfter": {
                                "Initialize_limiting_group_id": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "targeting question",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Paginate_API_Gateway_query_if_needed": {
                            "actions": {
                                "Until_there_are_no_more_pages": {
                                    "actions": {
                                        "For_each_endpoint_in_paginated_API_Gateway_response": {
                                            "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                                            "actions": {
                                                "Append_endpoint_to_endpoints": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "endpoints",
                                                        "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Update_API_Gateway_query_cursor": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach",
                                            "runtimeConfiguration": {
                                                "concurrency": {
                                                    "repetitions": 1
                                                }
                                            }
                                        },
                                        "Paginate_API_Gateway": {
                                            "runAfter": {
                                                "Update_API_Gateway_query_variables": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "body": {
                                                    "query": "@variables('api gateway query')",
                                                    "variables": "@json(variables('api gateway query variables'))"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json",
                                                    "session": "@parameters('TaniumApiToken')"
                                                },
                                                "method": "POST",
                                                "uri": "@parameters('TaniumApiGatewayApi')"
                                            },
                                            "runtimeConfiguration": {
                                                "secureData": {
                                                    "properties": [
                                                        "inputs"
                                                    ]
                                                }
                                            }
                                        },
                                        "Parse_paginated_API_Gateway_response": {
                                            "runAfter": {
                                                "Paginate_API_Gateway": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Paginate_API_Gateway')",
                                                "schema": {
                                                    "properties": {
                                                        "data": {
                                                            "properties": {
                                                                "endpoints": {
                                                                    "properties": {
                                                                        "edges": {
                                                                            "items": {
                                                                                "properties": {
                                                                                    "node": {
                                                                                        "type": "object"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "node"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        },
                                                                        "pageInfo": {
                                                                            "properties": {
                                                                                "endCursor": {
                                                                                    "type": [
                                                                                        "string",
                                                                                        "null"
                                                                                    ]
                                                                                },
                                                                                "hasNextPage": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "hasPreviousPage": {
                                                                                    "type": "boolean"
                                                                                },
                                                                                "startCursor": {
                                                                                    "type": [
                                                                                        "string",
                                                                                        "null"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Update_API_Gateway_query_cursor": {
                                            "runAfter": {
                                                "Parse_paginated_API_Gateway_response": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "cursor",
                                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                                            }
                                        },
                                        "Update_API_Gateway_query_variables": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "api gateway query variables",
                                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                                    "limit": {
                                        "count": 60,
                                        "timeout": "PT1H"
                                    },
                                    "type": "Until"
                                }
                            },
                            "runAfter": {
                                "Initialize_endpoints_array": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Parse_API_Gateway_response": {
                            "runAfter": {
                                "Check_for_successful_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@variables('API Gateway Response')",
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "endpoints": {
                                                    "properties": {
                                                        "edges": {
                                                            "items": {
                                                                "properties": {
                                                                    "node": {
                                                                        "properties": {
                                                                            "ipAddress": {
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "os": {
                                                                                "properties": {
                                                                                    "platform": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "sensorReadings": {
                                                                                "properties": {
                                                                                    "columns": {
                                                                                        "items": {
                                                                                            "properties": {
                                                                                                "name": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "sensor": {
                                                                                                    "properties": {
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "values": {
                                                                                                    "items": {
                                                                                                        "type": "string"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                }
                                                                                            },
                                                                                            "required": [
                                                                                                "sensor",
                                                                                                "name",
                                                                                                "values"
                                                                                            ],
                                                                                            "type": "object"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "node"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "pageInfo": {
                                                            "properties": {
                                                                "endCursor": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "hasNextPage": {
                                                                    "type": "boolean"
                                                                },
                                                                "hasPreviousPage": {
                                                                    "type": "boolean"
                                                                },
                                                                "startCursor": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Parse_patch_content_set": {
                            "runAfter": {
                                "HTTP_GET_patch_content_set": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('HTTP_GET_patch_content_set')",
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "deleted_flag": {
                                                    "type": "integer"
                                                },
                                                "description": {
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "metadata": {
                                                    "items": {
                                                        "properties": {
                                                            "admin_flag": {
                                                                "type": "boolean"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name",
                                                            "value",
                                                            "admin_flag"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "reserved_name": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Set_api_gateway_query_for_patch_deployment_results": {
                            "runAfter": {
                                "For_each_endpoint": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "api gateway query",
                                "value": "query ($endpointsFilter: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource, $refreshCursor: Cursor) {\n  endpoints(\n    source: $source\n    first: 10\n    after: $endCursor\n    filter: $endpointsFilter\n    refresh: $refreshCursor\n  ) {\n    edges {\n      node {\n        name\n        sensorReadings(sensors: [{name: \"Patch - Deployment Results\"}]) {\n          columns {\n            name\n            values\n          }\n        }\n      }\n    }\n    collectionInfo {\n      startCursor\n      active\n      success\n    }\n  }\n}"
                            }
                        },
                        "Until_all_patch_deployments_have_results": {
                            "actions": {
                                "Delay_for_ten_minutes": {
                                    "runAfter": {},
                                    "type": "Wait",
                                    "inputs": {
                                        "interval": {
                                            "count": 10,
                                            "unit": "Minute"
                                        }
                                    }
                                },
                                "For_each_patch_deployment_id": {
                                    "foreach": "@variables('patch deployment ids')",
                                    "actions": {
                                        "Skip_if_deployment_is_already_completed": {
                                            "actions": {},
                                            "runAfter": {},
                                            "else": {
                                                "actions": {
                                                    "Check_for_patch_deployment_results": {
                                                        "actions": {},
                                                        "runAfter": {
                                                            "Set_refresh_cursor_for_patch_deployment_results": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Until_endpoint_patch_deployment_data_is_refreshed": {
                                                                    "actions": {
                                                                        "Delay_to_cool_down": {
                                                                            "runAfter": {
                                                                                "Set_API_Gateway_Response_with_refreshed_patch_deployment_results": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Wait",
                                                                            "inputs": {
                                                                                "interval": {
                                                                                    "count": 3,
                                                                                    "unit": "Minute"
                                                                                }
                                                                            }
                                                                        },
                                                                        "Refresh_patch_deployment_results": {
                                                                            "runAfter": {
                                                                                "Update_api_gateway_query_variables_with_refresh_cursor": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Http",
                                                                            "inputs": {
                                                                                "body": {
                                                                                    "query": "@variables('api gateway query')",
                                                                                    "variables": "@json(variables('api gateway query variables'))"
                                                                                },
                                                                                "headers": {
                                                                                    "Content-Type": "application/json",
                                                                                    "session": "@parameters('TaniumApiToken')"
                                                                                },
                                                                                "method": "POST",
                                                                                "uri": "@parameters('TaniumApiGatewayApi')"
                                                                            },
                                                                            "runtimeConfiguration": {
                                                                                "secureData": {
                                                                                    "properties": [
                                                                                        "inputs"
                                                                                    ]
                                                                                }
                                                                            }
                                                                        },
                                                                        "Set_API_Gateway_Response_with_refreshed_patch_deployment_results": {
                                                                            "runAfter": {
                                                                                "Refresh_patch_deployment_results": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "API Gateway Response",
                                                                                "value": "@body('Refresh_patch_deployment_results')"
                                                                            }
                                                                        },
                                                                        "Update_api_gateway_query_variables_with_refresh_cursor": {
                                                                            "runAfter": {},
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "api gateway query variables",
                                                                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"refreshCursor\": \"@{variables('api gateway refresh cursor')}\"\n}"
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "expression": "@greater(length(body('Refresh_patch_deployment_results')?['data']?['endpoints']?['edges']), 0)",
                                                                    "limit": {
                                                                        "count": 60,
                                                                        "timeout": "PT30M"
                                                                    },
                                                                    "type": "Until"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "greater": [
                                                                        "@length(body('Query_API_Gateway_for_patch_deployment_results')?['data']?['endpoints']?['edges'])",
                                                                        0
                                                                    ]
                                                                },
                                                                {
                                                                    "equals": [
                                                                        "@body('Query_API_Gateway_for_patch_deployment_results')?['data']?['endpoints']?['collectionInfo']?['success']",
                                                                        "@true"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If",
                                                        "description": "If we don't have results yet we need to use the refresh cursor"
                                                    },
                                                    "Create_HTML_table_of_patch_deployment_results": {
                                                        "runAfter": {
                                                            "If_endpoint_results_are_missing_the_deployment_id": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Table",
                                                        "inputs": {
                                                            "format": "HTML",
                                                            "from": "@variables('results')"
                                                        }
                                                    },
                                                    "For_each_column_from_patch_deployment_results": {
                                                        "foreach": "@body('Parse_API_Gateway_patch_deployment_results')?['sensorReadings']?['columns']",
                                                        "actions": {
                                                            "Switch_on_patch_deployment_results_column_name": {
                                                                "runAfter": {},
                                                                "cases": {
                                                                    "Case_Deployment_ID": {
                                                                        "case": "Deployment ID",
                                                                        "actions": {
                                                                            "For_each_deployment_id": {
                                                                                "foreach": "@items('For_each_column_from_patch_deployment_results')?['values']",
                                                                                "actions": {
                                                                                    "If_deployment_id_is_the_one_we_are_querying": {
                                                                                        "actions": {
                                                                                            "Append_column_index_to_result_row_indexes": {
                                                                                                "runAfter": {},
                                                                                                "type": "AppendToArrayVariable",
                                                                                                "inputs": {
                                                                                                    "name": "result row indexes",
                                                                                                    "value": "@variables('column index')"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        "runAfter": {},
                                                                                        "expression": {
                                                                                            "and": [
                                                                                                {
                                                                                                    "equals": [
                                                                                                        "@item()",
                                                                                                        "@string(items('For_each_patch_deployment_id'))"
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "type": "If"
                                                                                    },
                                                                                    "Increment_column_index_for_deployment_id": {
                                                                                        "runAfter": {
                                                                                            "If_deployment_id_is_the_one_we_are_querying": [
                                                                                                "Succeeded"
                                                                                            ]
                                                                                        },
                                                                                        "type": "IncrementVariable",
                                                                                        "inputs": {
                                                                                            "name": "column index",
                                                                                            "value": 1
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "runAfter": {},
                                                                                "type": "Foreach"
                                                                            }
                                                                        }
                                                                    },
                                                                    "Case_Patch_Title": {
                                                                        "case": "Patch Title",
                                                                        "actions": {
                                                                            "Set_variable": {
                                                                                "runAfter": {},
                                                                                "type": "SetVariable",
                                                                                "inputs": {
                                                                                    "name": "patch deployment titles",
                                                                                    "value": "@items('For_each_column_from_patch_deployment_results')?['values']"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "Case_Result": {
                                                                        "case": "Result",
                                                                        "actions": {
                                                                            "Set_patch_deployment_results": {
                                                                                "runAfter": {},
                                                                                "type": "SetVariable",
                                                                                "inputs": {
                                                                                    "name": "patch deployment results",
                                                                                    "value": "@items('For_each_column_from_patch_deployment_results')?['values']"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "default": {
                                                                    "actions": {}
                                                                },
                                                                "expression": "@items('For_each_column_from_patch_deployment_results')?['name']",
                                                                "type": "Switch"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Parse_API_Gateway_patch_deployment_results": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Foreach"
                                                    },
                                                    "If_all_deployments_succeeded": {
                                                        "actions": {
                                                            "Add_success_comment_to_incident_(V3)": {
                                                                "runAfter": {
                                                                    "Compose_success_message": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "body": {
                                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                        "message": "<p>@{outputs('Compose_success_message')}<br>\n<br>\n@{body('Create_HTML_table_of_patch_deployment_results')}</p>"
                                                                    },
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "post",
                                                                    "path": "/Incidents/Comment"
                                                                }
                                                            },
                                                            "Append_successful_deployment_to_completed": {
                                                                "runAfter": {
                                                                    "Add_success_comment_to_incident_(V3)": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "AppendToArrayVariable",
                                                                "inputs": {
                                                                    "name": "completed patch deployment ids",
                                                                    "value": "@items('For_each_patch_deployment_id')"
                                                                }
                                                            },
                                                            "Compose_success_message": {
                                                                "runAfter": {},
                                                                "type": "Compose",
                                                                "inputs": "Tanium Patch Deployment @{items('For_each_patch_deployment_id')} successfully completed."
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Create_HTML_table_of_patch_deployment_results": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "If_all_deployments_failed": {
                                                                    "actions": {
                                                                        "Add_failure_comment_to_incident_(V3)": {
                                                                            "runAfter": {
                                                                                "Compose_failure_message": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "ApiConnection",
                                                                            "inputs": {
                                                                                "body": {
                                                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                                    "message": "<p>@{outputs('Compose_failure_message')}<br>\n<br>\n@{body('Create_HTML_table_of_patch_deployment_results')}</p>"
                                                                                },
                                                                                "host": {
                                                                                    "connection": {
                                                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                                    }
                                                                                },
                                                                                "method": "post",
                                                                                "path": "/Incidents/Comment"
                                                                            }
                                                                        },
                                                                        "Append_failed_deployment_to_completed": {
                                                                            "runAfter": {
                                                                                "Add_failure_comment_to_incident_(V3)": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "AppendToArrayVariable",
                                                                            "inputs": {
                                                                                "name": "completed patch deployment ids",
                                                                                "value": "@items('For_each_patch_deployment_id')"
                                                                            }
                                                                        },
                                                                        "Compose_failure_message": {
                                                                            "runAfter": {},
                                                                            "type": "Compose",
                                                                            "inputs": "Tanium Patch Deployment @{items('For_each_patch_deployment_id')} failed."
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "else": {
                                                                        "actions": {
                                                                            "If_all_deployments_succeeded_or_failed": {
                                                                                "actions": {
                                                                                    "Add_partial_success_comment_to_incident_(V3)": {
                                                                                        "runAfter": {
                                                                                            "Compose_partial_success": [
                                                                                                "Succeeded"
                                                                                            ]
                                                                                        },
                                                                                        "type": "ApiConnection",
                                                                                        "inputs": {
                                                                                            "body": {
                                                                                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                                                "message": "<p>@{outputs('Compose_partial_success')}<br>\n<br>\n@{body('Create_HTML_table_of_patch_deployment_results')}</p>"
                                                                                            },
                                                                                            "host": {
                                                                                                "connection": {
                                                                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                                                }
                                                                                            },
                                                                                            "method": "post",
                                                                                            "path": "/Incidents/Comment"
                                                                                        }
                                                                                    },
                                                                                    "Append_complete_with_partial_success_to_completed": {
                                                                                        "runAfter": {
                                                                                            "Add_partial_success_comment_to_incident_(V3)": [
                                                                                                "Succeeded"
                                                                                            ]
                                                                                        },
                                                                                        "type": "AppendToArrayVariable",
                                                                                        "inputs": {
                                                                                            "name": "completed patch deployment ids",
                                                                                            "value": "@items('For_each_patch_deployment_id')"
                                                                                        }
                                                                                    },
                                                                                    "Compose_partial_success": {
                                                                                        "runAfter": {},
                                                                                        "type": "Compose",
                                                                                        "inputs": "Tanium Patch Deployment @{items('For_each_patch_deployment_id')} completed with partial success."
                                                                                    }
                                                                                },
                                                                                "runAfter": {},
                                                                                "expression": {
                                                                                    "and": [
                                                                                        {
                                                                                            "equals": [
                                                                                                "@add(variables('succeeded count'), variables('failed count'))",
                                                                                                "@variables('applied count')"
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "greater": [
                                                                                                "@variables('applied count')",
                                                                                                0
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "type": "If"
                                                                            }
                                                                        }
                                                                    },
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "equals": [
                                                                                    "@variables('failed count')",
                                                                                    "@variables('applied count')"
                                                                                ]
                                                                            },
                                                                            {
                                                                                "greater": [
                                                                                    "@variables('failed count')",
                                                                                    0
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@variables('succeeded count')",
                                                                        "@variables('applied count')"
                                                                    ]
                                                                },
                                                                {
                                                                    "greater": [
                                                                        "@variables('succeeded count')",
                                                                        0
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "If_endpoint_results_are_missing_the_deployment_id": {
                                                        "actions": {
                                                            "Add_deployment_missing_comment_to_incident_(V3)": {
                                                                "runAfter": {
                                                                    "Compose_deployment_missing_from_endpoint_results": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "body": {
                                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                        "message": "<p>@{outputs('Compose_deployment_missing_from_endpoint_results')}</p>"
                                                                    },
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "post",
                                                                    "path": "/Incidents/Comment"
                                                                }
                                                            },
                                                            "Append_deployment_id_missing_data_to_completed": {
                                                                "runAfter": {},
                                                                "type": "AppendToArrayVariable",
                                                                "inputs": {
                                                                    "name": "completed patch deployment ids",
                                                                    "value": "@item()"
                                                                }
                                                            },
                                                            "Compose_deployment_missing_from_endpoint_results": {
                                                                "runAfter": {
                                                                    "Append_deployment_id_missing_data_to_completed": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "Compose",
                                                                "inputs": "The endpoint data did not include results for Tanium Patch deployment @{items('For_each_patch_deployment_id')}. To view patching results you'll need to check Tanium Patch deployments directly: <a href=\"@{parameters('TaniumServerUri')}#/patch/deployments/deployment-transaction/install/@{items('For_each_patch_deployment_id')}\">Tanium Patch deployment @{items('For_each_patch_deployment_id')}</a>"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "For_each_column_from_patch_deployment_results": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "For_each_result_row_indexes": {
                                                                    "foreach": "@variables('result row indexes')",
                                                                    "actions": {
                                                                        "Append_deployment_result_to_results": {
                                                                            "runAfter": {
                                                                                "Increment_applied_deployments_count": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "AppendToArrayVariable",
                                                                            "inputs": {
                                                                                "name": "results",
                                                                                "value": {
                                                                                    "result": "@variables('patch deployment results')?[items('For_each_result_row_indexes')]",
                                                                                    "title": "@variables('patch deployment titles')?[items('For_each_result_row_indexes')]"
                                                                                }
                                                                            }
                                                                        },
                                                                        "Increment_applied_deployments_count": {
                                                                            "runAfter": {
                                                                                "Switch_on_patch_deployment_result": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "IncrementVariable",
                                                                            "inputs": {
                                                                                "name": "applied count",
                                                                                "value": 1
                                                                            }
                                                                        },
                                                                        "Switch_on_patch_deployment_result": {
                                                                            "runAfter": {},
                                                                            "cases": {
                                                                                "Case_Failed": {
                                                                                    "case": "Failed",
                                                                                    "actions": {
                                                                                        "Increment_failed_count": {
                                                                                            "runAfter": {},
                                                                                            "type": "IncrementVariable",
                                                                                            "inputs": {
                                                                                                "name": "failed count",
                                                                                                "value": 1
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "Case_Succeeded": {
                                                                                    "case": "Succeeded",
                                                                                    "actions": {
                                                                                        "Increment_succeeded_count": {
                                                                                            "runAfter": {},
                                                                                            "type": "IncrementVariable",
                                                                                            "inputs": {
                                                                                                "name": "succeeded count",
                                                                                                "value": 1
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            },
                                                                            "default": {
                                                                                "actions": {}
                                                                            },
                                                                            "expression": "@variables('patch deployment results')?[items('For_each_result_row_indexes')]",
                                                                            "type": "Switch"
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "type": "Foreach"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "greater": [
                                                                        "@length(variables('API Gateway Response')?['data']?['endpoints']?['edges'])",
                                                                        0
                                                                    ]
                                                                },
                                                                {
                                                                    "equals": [
                                                                        "@length(variables('result row indexes'))",
                                                                        0
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "Parse_API_Gateway_patch_deployment_results": {
                                                        "runAfter": {
                                                            "Check_for_patch_deployment_results": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "ParseJson",
                                                        "inputs": {
                                                            "content": "@variables('API Gateway Response')?['data']?['endpoints']?['edges']?[0]?['node']",
                                                            "schema": {
                                                                "properties": {
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "sensorReadings": {
                                                                        "properties": {
                                                                            "columns": {
                                                                                "items": {
                                                                                    "properties": {
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "values": {
                                                                                            "items": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "type": "array"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "values"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "description": "We know that each patch deployment applied to only one endpoint"
                                                    },
                                                    "Set_API_Gateway_Response_with_patch_deployment_results": {
                                                        "runAfter": {
                                                            "Until_api_gateway_response_has_patch_deployment_results": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "API Gateway Response",
                                                            "value": "@body('Query_API_Gateway_for_patch_deployment_results')"
                                                        }
                                                    },
                                                    "Set_API_Gateway_query_variables_for_patch_deployment_results": {
                                                        "runAfter": {
                                                            "Set_applied_count_to_zero": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "api gateway query variables",
                                                            "value": "{\n  \"endpointsFilter\": {\n    \"sensor\": { \"name\": \"Patch - Deployment Results\", \"column\": \"Deployment ID\" },\n    \"op\": \"EQ\",\n    \"value\": \"@{items('For_each_patch_deployment_id')}\"\n  },\n  \"source\": {\n    \"ts\": {\n      \"stableWaitTime\": 30\n    }\n  }\n}"
                                                        }
                                                    },
                                                    "Set_applied_count_to_zero": {
                                                        "runAfter": {
                                                            "Set_failed_count_to_zero": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "applied count",
                                                            "value": 0
                                                        }
                                                    },
                                                    "Set_column_index_to_zero": {
                                                        "runAfter": {
                                                            "Set_result_row_indexes_to_empty_array": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "column index",
                                                            "value": 0
                                                        }
                                                    },
                                                    "Set_failed_count_to_zero": {
                                                        "runAfter": {
                                                            "Set_succeeded_count_to_zero": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "failed count",
                                                            "value": 0
                                                        }
                                                    },
                                                    "Set_patch_deployment_results_to_empty_array": {
                                                        "runAfter": {},
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "patch deployment results",
                                                            "value": []
                                                        }
                                                    },
                                                    "Set_patch_deployment_titles_to_empty_array": {
                                                        "runAfter": {
                                                            "Set_results_to_empty_array": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "patch deployment titles",
                                                            "value": []
                                                        }
                                                    },
                                                    "Set_refresh_cursor_for_patch_deployment_results": {
                                                        "runAfter": {
                                                            "Set_API_Gateway_Response_with_patch_deployment_results": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "api gateway refresh cursor",
                                                            "value": "@{body('Query_API_Gateway_for_patch_deployment_results')?['data']?['endpoints']?['collectionInfo']?['startCursor']}"
                                                        }
                                                    },
                                                    "Set_result_row_indexes_to_empty_array": {
                                                        "runAfter": {
                                                            "Set_patch_deployment_titles_to_empty_array": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "result row indexes",
                                                            "value": []
                                                        }
                                                    },
                                                    "Set_results_to_empty_array": {
                                                        "runAfter": {
                                                            "Set_patch_deployment_results_to_empty_array": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "results",
                                                            "value": []
                                                        }
                                                    },
                                                    "Set_succeeded_count_to_zero": {
                                                        "runAfter": {
                                                            "Set_column_index_to_zero": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "succeeded count",
                                                            "value": 0
                                                        }
                                                    },
                                                    "Until_api_gateway_response_has_patch_deployment_results": {
                                                        "actions": {
                                                            "Query_API_Gateway_for_patch_deployment_results": {
                                                                "runAfter": {},
                                                                "type": "Http",
                                                                "inputs": {
                                                                    "body": {
                                                                        "query": "@variables('api gateway query')",
                                                                        "variables": "@json(variables('api gateway query variables'))"
                                                                    },
                                                                    "headers": {
                                                                        "Content-Type": "application/json",
                                                                        "session": "@parameters('TaniumApiToken')"
                                                                    },
                                                                    "method": "POST",
                                                                    "uri": "@parameters('TaniumApiGatewayApi')"
                                                                },
                                                                "runtimeConfiguration": {
                                                                    "secureData": {
                                                                        "properties": [
                                                                            "inputs"
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Set_API_Gateway_query_variables_for_patch_deployment_results": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "expression": "@not(equals(body('Query_API_Gateway_for_patch_deployment_results')?['data']?['endpoints'], null))",
                                                        "limit": {
                                                            "count": 60,
                                                            "timeout": "PT10M"
                                                        },
                                                        "type": "Until"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "contains": [
                                                            "@variables('completed patch deployment ids')",
                                                            "@items('For_each_patch_deployment_id')"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {
                                        "Delay_for_ten_minutes": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                        "concurrency": {
                                            "repetitions": 1
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Set_api_gateway_query_for_patch_deployment_results": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@greaterOrEquals(length(variables('completed patch deployment ids')), length(variables('patch deployment ids')))",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "Until_some_endpoint_data_is_returned": {
                            "actions": {
                                "Query_API_Gateway": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "body": {
                                            "query": "@variables('api gateway query')",
                                            "variables": "@json(variables('api gateway query variables'))"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json",
                                            "session": "@parameters('TaniumApiToken')"
                                        },
                                        "method": "POST",
                                        "uri": "@parameters('TaniumApiGatewayApi')"
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs"
                                            ]
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_API_Gateway_Query_Variables": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@not(equals(body('Query_API_Gateway')?['data']?['endpoints'], null))",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionName": "[variables('AzureSentinelConnectionName')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                                "id": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/azuresentinel')]"
                            }
                        }
                    },
                    "TaniumApiToken": {
                        "value": "[parameters('TaniumApiToken')]"
                    },
                    "TaniumApiGatewayApi": {
                        "value": "[variables('TaniumApiGatewayApi')]"
                    },
                    "TaniumPatchContentSetUri": {
                        "value": "[variables('TaniumPatchContentSetUri')]"
                    },
                    "TaniumGroupsUri": {
                        "value": "[variables('TaniumGroupsUri')]"
                    },
                    "TaniumGroupsByNameUri": {
                        "value": "[variables('TaniumGroupsByNameUri')]"
                    },
                    "TaniumPatchDeploymentsUri": {
                        "value": "[variables('TaniumPatchDeploymentsUri')]"
                    },
                    "TaniumServerUri": {
                        "value": "[variables('TaniumServerUri')]"
                    }
                }
            }
        }
    ]
}
