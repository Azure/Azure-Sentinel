{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Tanium - support@tanium.com",
    "comments": "Solution template for Tanium"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "Tanium Workbook",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    }
  },
  "variables": {
    "email": "support@tanium.com",
    "_email": "[variables('email')]",
    "_solutionName": "Tanium",
    "_solutionVersion": "3.0.0",
    "solutionId": "taniuminc1646329360287.tanium_sentinel_connector",
    "_solutionId": "[variables('solutionId')]",
    "workbookVersion1": "2.0",
    "workbookContentId1": "TaniumWorkbook",
    "workbookId1": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId1'))]",
    "workbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId1'))))]",
    "_workbookContentId1": "[variables('workbookContentId1')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_workbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','wb','-', uniqueString(concat(variables('_solutionId'),'-','Workbook','-',variables('_workbookContentId1'),'-', variables('workbookVersion1'))))]",
    "Tanium-ComplyFindings": "Tanium-ComplyFindings",
    "_Tanium-ComplyFindings": "[variables('Tanium-ComplyFindings')]",
    "playbookVersion1": "2.0",
    "playbookContentId1": "Tanium-ComplyFindings",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1'))))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "blanks": "[replace('b', 'b', '')]",
    "Tanium-GeneralHostInfo": "Tanium-GeneralHostInfo",
    "_Tanium-GeneralHostInfo": "[variables('Tanium-GeneralHostInfo')]",
    "playbookVersion2": "2.0",
    "playbookContentId2": "Tanium-GeneralHostInfo",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "Tanium-MSDefenderHealth": "Tanium-MSDefenderHealth",
    "_Tanium-MSDefenderHealth": "[variables('Tanium-MSDefenderHealth')]",
    "playbookVersion3": "2.0",
    "playbookContentId3": "Tanium-MSDefenderHealth",
    "_playbookContentId3": "[variables('playbookContentId3')]",
    "playbookId3": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId3'))]",
    "playbookTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId3'))))]",
    "_playbookcontentProductId3": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId3'),'-', variables('playbookVersion3'))))]",
    "Tanium-QuarantineHosts": "Tanium-QuarantineHosts",
    "_Tanium-QuarantineHosts": "[variables('Tanium-QuarantineHosts')]",
    "playbookVersion4": "2.0",
    "playbookContentId4": "Tanium-QuarantineHosts",
    "_playbookContentId4": "[variables('playbookContentId4')]",
    "playbookId4": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId4'))]",
    "playbookTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId4'))))]",
    "_playbookcontentProductId4": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId4'),'-', variables('playbookVersion4'))))]",
    "Tanium-ResolveThreatResponseAlert": "Tanium-ResolveThreatResponseAlert",
    "_Tanium-ResolveThreatResponseAlert": "[variables('Tanium-ResolveThreatResponseAlert')]",
    "playbookVersion5": "1.0",
    "playbookContentId5": "Tanium-ResolveThreatResponseAlert",
    "_playbookContentId5": "[variables('playbookContentId5')]",
    "playbookId5": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId5'))]",
    "playbookTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId5'))))]",
    "_playbookcontentProductId5": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId5'),'-', variables('playbookVersion5'))))]",
    "Tanium-SCCMClientHealth": "Tanium-SCCMClientHealth",
    "_Tanium-SCCMClientHealth": "[variables('Tanium-SCCMClientHealth')]",
    "playbookVersion6": "2.0",
    "playbookContentId6": "Tanium-SCCMClientHealth",
    "_playbookContentId6": "[variables('playbookContentId6')]",
    "playbookId6": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId6'))]",
    "playbookTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId6'))))]",
    "_playbookcontentProductId6": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId6'),'-', variables('playbookVersion6'))))]",
    "Tanium-UnquarantineHosts": "Tanium-UnquarantineHosts",
    "_Tanium-UnquarantineHosts": "[variables('Tanium-UnquarantineHosts')]",
    "playbookVersion7": "2.0",
    "playbookContentId7": "Tanium-UnquarantineHosts",
    "_playbookContentId7": "[variables('playbookContentId7')]",
    "playbookId7": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId7'))]",
    "playbookTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId7'))))]",
    "_playbookcontentProductId7": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId7'),'-', variables('playbookVersion7'))))]",
    "Tanium-SecurityPatches": "Tanium-SecurityPatches",
    "_Tanium-SecurityPatches": "[variables('Tanium-SecurityPatches')]",
    "TemplateEmptyArray": "[json('[]')]",
    "playbookVersion8": "2.0",
    "playbookContentId8": "Tanium-SecurityPatches",
    "_playbookContentId8": "[variables('playbookContentId8')]",
    "playbookId8": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId8'))]",
    "playbookTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId8'))))]",
    "_playbookcontentProductId8": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId8'),'-', variables('playbookVersion8'))))]",
    "analyticRuleObject1": {
      "analyticRuleVersion1": "1.1.0",
      "_analyticRulecontentId1": "dd9aa0ff-7ac1-4448-879c-e1a18d5890b4",
      "analyticRuleId1": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'dd9aa0ff-7ac1-4448-879c-e1a18d5890b4')]",
      "analyticRuleTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('dd9aa0ff-7ac1-4448-879c-e1a18d5890b4')))]",
      "_analyticRulecontentProductId1": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','dd9aa0ff-7ac1-4448-879c-e1a18d5890b4','-', '1.1.0')))]"
    },
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('workbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "TaniumWorkbook Workbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId1')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "The Tanium Workbook contains 20+ visualizations across 5 tabs (Threat Response, Comply, Discover, Microsoft Tooling Health and Patch). Each of these tabs shows examples of insights teams can leverage using Tanium's real-time data."
              },
              "properties": {
                "displayName": "[parameters('workbook1-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"885a9b5d-b2d6-4316-a6f9-6f65941b55b8\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Threat Response\",\"subTarget\":\"Threat Response\",\"style\":\"link\"},{\"id\":\"786ffe19-a17d-4ca9-9355-f97406ae048f\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Comply\",\"subTarget\":\"Comply\",\"preText\":\"Comply\",\"style\":\"link\"},{\"id\":\"efd238ee-2305-4384-a38c-a96d850ab4c9\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Discover\",\"subTarget\":\"Discover\",\"style\":\"link\"},{\"id\":\"a34745a8-6073-484d-adc5-d5c8e7fb9209\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Microsoft Tooling Health\",\"subTarget\":\"Microsoft Tooling Health\",\"style\":\"link\"},{\"id\":\"32a1a85f-978f-4b42-b27f-41cfb90e4e14\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Patch\",\"subTarget\":\"Patch\",\"style\":\"link\"}]},\"name\":\"horizontal tabs\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Vulnerability Distribution by OS\\nDistribution of all CVEs in the environment by OS\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyVulnerabilities_CL\\n    | extend roundedTime = bin(TimeGenerated, 1m) \\n    | distinct roundedTime    \\n    | order by roundedTime desc     \\n    | limit 1);\\n    \\n    \\nTaniumComplyVulnerabilities_CL\\n|where TimeGenerated >= lastRunTime\\n    and Scan_Type_s != 'container registries'\\n|distinct CVE_s, Computer_Name_s, Operating_System_Generation_s\\n|summarize count() by Operating_System_Generation_s\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"categoricalbar\",\"chartSettings\":{\"group\":\"Operating_System_Generation_s\",\"createOtherGroup\":25}},\"name\":\"query - 4\"},{\"type\":1,\"content\":{\"json\":\"## Critical Vulnerability Distribution by OS\\nBreakdown of operating systems with critical CVEs (score >= 9.0). Based on the CVSS v3 standard\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyVulnerabilities_CL\\n    | extend roundedTime = bin(TimeGenerated, 1m) \\n    | distinct roundedTime    \\n    | order by roundedTime desc     \\n    | limit 1);\\n\\nTaniumComplyVulnerabilities_CL \\n| where TimeGenerated >= lastRunTime\\n    and CVSS_v3_Score_d >=9.0 \\n| summarize count() by Operating_System_Generation_s\\n| sort by count_\",\"size\":4,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Operating_System_Generation_s\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}},\"showBorder\":false}},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Computers with most # of Critical Vulnerabilities\\nTop 10 endpoints, sorted by # of critical CVEs (score >= 9.0). Based on the CVSS v3 standard\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyVulnerabilities_CL\\n    | extend roundedTime = bin(TimeGenerated, 1m) \\n    | distinct roundedTime    \\n    | order by roundedTime desc     \\n    | limit 1);\\n\\nTaniumComplyVulnerabilities_CL \\n| where Scan_Type_s != 'container registries'\\n    and TimeGenerated >= lastRunTime\\n    and CVSS_v3_Score_d >=9.0\\n| summarize count() by Computer_Name_s \\n| limit 10\\n| sort by count_\",\"size\":4,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer_Name_s\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Computer_Name_s\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"count_\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"mapSettings\":{\"locInfo\":\"LatLong\",\"sizeSettings\":\"count_\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"count_\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"type\":\"heatmap\",\"colorAggregation\":\"Sum\",\"nodeColorField\":\"count_\",\"heatmapPalette\":\"greenRed\"}}},\"name\":\"query - 2\"},{\"type\":1,\"content\":{\"json\":\"## Vulnerability Distribution by Year\\nDistribution of all CVEs in the environment by year\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let getCveYear = (s:string) { substring(s, 4, 4) };\\nlet checkCveYearExists = (s:string) { iff(s startswith 'CVE-', getCveYear(s), 'Not Specified') };\\nlet extractCveYear = (year:string,cve:string) { iff(year != '', year, checkCveYearExists(cve)) };\\n\\nlet lastRunTime = toscalar(\\n    TaniumComplyVulnerabilities_CL\\n    | extend roundedTime = bin(TimeGenerated, 1m) \\n    | distinct roundedTime    \\n    | order by roundedTime desc     \\n    | limit 1);\\n    \\nlet Vulnerabilities = \\nTaniumComplyVulnerabilities_CL\\n|where TimeGenerated >= lastRunTime\\n|extend ParsedCveYear = extractCveYear(CVE_Year_s, CVE_s);\\n\\nVulnerabilities\\n| distinct ParsedCveYear,Computer_Name_s, CVE_s\\n| extend Year = strcat('Year ', ParsedCveYear)\\n| summarize count() by Year, ParsedCveYear\\n| sort by ParsedCveYear asc\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"categoricalbar\",\"chartSettings\":{\"xAxis\":\"Year\",\"group\":\"ParsedCveYear\",\"createOtherGroup\":100}},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Vulnerability Distribution by Severity\\nDistribution of all CVEs in the environment by Severity. Based on the CVSS v3 standard\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyVulnerabilities_CL\\n    | extend roundedTime = bin(TimeGenerated, 1m) \\n    | distinct roundedTime    \\n    | order by roundedTime desc     \\n    | limit 1);\\n    \\nTaniumComplyVulnerabilities_CL\\n|where TimeGenerated >= lastRunTime\\n|distinct CVE_s,CVSS_v3_Severity_s\\n|summarize count() by CVSS_v3_Severity_s\\n\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"High\",\"color\":\"orange\"},{\"seriesName\":\"Medium\",\"color\":\"yellow\"},{\"seriesName\":\"Critical\",\"color\":\"redBright\"},{\"seriesName\":\"Unscored\",\"color\":\"blue\"},{\"seriesName\":\"Low\",\"color\":\"green\"}]}},\"name\":\"query - 7\"},{\"type\":1,\"content\":{\"json\":\"## Compliance Outliers\\nFor each endpoint, sums up the all of its associated CVSS v3 scores. Higher numbers indicate endpoints requiring more attention\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyVulnerabilities_CL\\n    | extend roundedTime = bin(TimeGenerated, 1m) \\n    | distinct roundedTime    \\n    | order by roundedTime desc     \\n    | limit 1);\\n    \\nTaniumComplyVulnerabilities_CL\\n|where TimeGenerated >= lastRunTime\\n    and Scan_Type_s != 'container registries'\\n    and CVSS_v3_Severity_s != 'Unscored'\\n|distinct CVE_s,Computer_Name_s,CVSS_v3_Score_d, Operating_System_Generation_s\\n|summarize  CVECount=dcount(CVE_s), cvss_endpoint_score=sum(todecimal(CVSS_v3_Score_d)) by Computer_Name_s, Operating_System_Generation_s\\n|sort by cvss_endpoint_score asc\",\"size\":0,\"timeContext\":{\"durationMs\":604800000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"scatterchart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer_Name_s\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"cvss_endpoint_score\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Computer_Name_s\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"cvss_endpoint_score\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"xAxis\":\"cvss_endpoint_score\",\"yAxis\":[\"CVECount\"],\"showLegend\":true,\"customThresholdLine\":\"{cvecount}\",\"customThresholdLineStyle\":5},\"mapSettings\":{\"locInfo\":\"LatLong\",\"sizeSettings\":\"cvss_endpoint_score\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"cvss_endpoint_score\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"type\":\"heatmap\",\"colorAggregation\":\"Sum\",\"nodeColorField\":\"cvss_endpoint_score\",\"heatmapPalette\":\"greenRed\"}}},\"name\":\"query - 15\"},{\"type\":1,\"content\":{\"json\":\"## Comply Findings Summary\\nFor each unique combination of Benchmark (e.g. CIS) and Profile (e.g. Level 1), shows the % of endpoints that are compliant\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyCompliance_CL\\n    | order by TimeGenerated desc\\n    | distinct  bin(TimeGenerated, 5m)\\n    | limit 1);\\n\\nTaniumComplyCompliance_CL\\n| where TimeGenerated >= lastRunTime\\n    and Rule_ID_s != ''\\n    and Rule_ID_s != '[no results]'\\n    and Status_Category_s != 'Error'\\n| extend Benchmark = Standard_s\\n| extend Profile = Profile_s\\n| project Benchmark, Profile, Status_Category_s\\n| summarize FindingsCount = count() by Benchmark, Profile, Status_Category_s\\n| evaluate pivot(Status_Category_s, sum(FindingsCount))\\n| extend Findings = Pass + Fail + Informational\\n| extend PercentCompliantEndpoints = (Pass*1.0/Findings)\\n| project PercentCompliantEndpoints\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"stat\",\"tileSettings\":{\"showBorder\":false},\"statSettings\":{\"valueField\":\"PercentCompliantEndpoints\",\"valueAggregation\":\"Average\",\"colorSettings\":{\"type\":\"static\",\"mode\":\"background\",\"heatmapPalette\":\"greenRed\"},\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"percent\",\"useGrouping\":true,\"maximumFractionDigits\":0}},\"tagText\":\"Average\",\"valueFontStyle\":\"auto\",\"valueTooltipSettings\":{\"tooltip\":\"hello\"}}},\"customWidth\":\"25\",\"name\":\"query - 17\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyCompliance_CL\\n    | order by TimeGenerated desc\\n    | distinct  bin(TimeGenerated, 5m)\\n    | limit 1);\\n\\nTaniumComplyCompliance_CL\\n| where TimeGenerated >= lastRunTime\\n    and Rule_ID_s != ''\\n    and Rule_ID_s != '[no results]'\\n    and Status_Category_s != 'Error'\\n| extend Benchmark = Standard_s\\n| extend Profile = Profile_s\\n| project Benchmark, Profile, Status_Category_s\\n| summarize FindingsCount = count() by Benchmark, Profile, Status_Category_s\\n| evaluate pivot(Status_Category_s, sum(FindingsCount))\\n| extend Findings = Pass + Fail + Informational\\n| extend PercentCompliantEndpoints = (Pass*1.0/Findings)\\n| summarize median = percentile(PercentCompliantEndpoints, 50)\\n\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"stat\",\"tileSettings\":{\"showBorder\":false},\"statSettings\":{\"valueAggregation\":\"None\",\"colorSettings\":{\"type\":\"static\",\"mode\":\"background\",\"heatmapPalette\":\"greenRed\"},\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"percent\",\"useGrouping\":true,\"maximumFractionDigits\":0}},\"tagText\":\"Median\",\"valueFontStyle\":\"auto\",\"valueTooltipSettings\":{\"tooltip\":\"hello\"}}},\"customWidth\":\"25\",\"name\":\"query - 17 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyCompliance_CL\\n    | order by TimeGenerated desc\\n    | distinct  bin(TimeGenerated, 5m)\\n    | limit 1);\\n\\nTaniumComplyCompliance_CL\\n| where TimeGenerated >= lastRunTime\\n    and Rule_ID_s != ''\\n    and Rule_ID_s != '[no results]'\\n    and Status_Category_s != 'Error'\\n| extend Benchmark = Standard_s\\n| extend Profile = Profile_s\\n| project Benchmark, Profile, Status_Category_s\\n| summarize FindingsCount = count() by Benchmark, Profile, Status_Category_s\\n| evaluate pivot(Status_Category_s, sum(FindingsCount))\\n| extend Findings = Pass + Fail + Informational\\n| extend PercentCompliantEndpoints = (Pass*1.0/Findings)\\n| project PercentCompliantEndpoints\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"stat\",\"tileSettings\":{\"showBorder\":false},\"statSettings\":{\"valueField\":\"PercentCompliantEndpoints\",\"valueAggregation\":\"Max\",\"colorSettings\":{\"type\":\"static\",\"mode\":\"background\",\"heatmapPalette\":\"greenRed\"},\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"percent\",\"useGrouping\":true,\"maximumFractionDigits\":0}},\"tagText\":\"Max\",\"valueFontStyle\":\"auto\",\"valueTooltipSettings\":{\"tooltip\":\"hello\"}}},\"customWidth\":\"25\",\"name\":\"query - 17 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyCompliance_CL\\n    | order by TimeGenerated desc\\n    | distinct  bin(TimeGenerated, 5m)\\n    | limit 1);\\n\\nTaniumComplyCompliance_CL\\n| where TimeGenerated >= lastRunTime\\n    and Rule_ID_s != ''\\n    and Rule_ID_s != '[no results]'\\n    and Status_Category_s != 'Error'\\n| extend Benchmark = Standard_s\\n| extend Profile = Profile_s\\n| project Benchmark, Profile, Status_Category_s\\n| summarize FindingsCount = count() by Benchmark, Profile, Status_Category_s\\n| evaluate pivot(Status_Category_s, sum(FindingsCount))\\n| extend Findings = Pass + Fail + Informational\\n| extend PercentCompliantEndpoints = (Pass*1.0/Findings)\\n| project PercentCompliantEndpoints\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"stat\",\"tileSettings\":{\"showBorder\":false},\"statSettings\":{\"valueField\":\"PercentCompliantEndpoints\",\"valueAggregation\":\"Min\",\"colorSettings\":{\"type\":\"static\",\"mode\":\"background\",\"heatmapPalette\":\"greenRed\"},\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"percent\",\"useGrouping\":true,\"maximumFractionDigits\":0}},\"tagText\":\"Min\",\"valueFontStyle\":\"auto\",\"valueTooltipSettings\":{\"tooltip\":\"hello\"}}},\"customWidth\":\"25\",\"name\":\"query - 17 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyCompliance_CL\\n    | order by TimeGenerated desc\\n    | distinct  bin(TimeGenerated, 5m)\\n    | limit 1);\\n\\nTaniumComplyCompliance_CL\\n| where TimeGenerated >= lastRunTime\\n    and Rule_ID_s != ''\\n    and Rule_ID_s != '[no results]'\\n    and Status_Category_s != 'Error'\\n| extend Benchmark = Standard_s\\n| extend Profile = Profile_s\\n| project Benchmark, Profile, Status_Category_s\\n| summarize FindingsCount = count() by Benchmark, Profile, Status_Category_s\\n| evaluate pivot(Status_Category_s, sum(FindingsCount))\\n| extend ['Total Findings'] = Pass + Fail + Informational\\n| extend ['% of Compliant Endpoints'] = (todecimal(Pass)/todecimal(['Total Findings']))\\n| project Benchmark, Profile, ['% of Compliant Endpoints'], ['Total Findings'], Pass, Fail, Informational\\n\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"% of Compliant Endpoints\",\"formatter\":0,\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"percent\"}}},{\"columnMatch\":\"% Compliant Endpoints\",\"formatter\":0,\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"percent\"}}}],\"sortBy\":[{\"itemKey\":\"Benchmark\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"Benchmark\",\"sortOrder\":1}]},\"name\":\"query - 16\"},{\"type\":1,\"content\":{\"json\":\"## Top Compliance Failures\\nShows the Benchmark and Profile combinations that have resulted in high counts or rates of failure\"},\"name\":\"visualization title\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"02d52897-0eb4-448e-94a0-6376a2e79f0f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"BenchmarkFailuresLimit\",\"label\":\"Limit to\",\"type\":1,\"isRequired\":true,\"typeSettings\":{\"paramValidationRules\":[{\"regExp\":\"\\\\b([1-9]|[1-9]{1}[0-9]{1}|[1-9]{1}[0-9]{2})\\\\b\",\"match\":true,\"message\":\"Must be between 1 and 999\"}]},\"criteriaData\":[{\"criteriaContext\":{\"operator\":\"Default\",\"resultValType\":\"static\",\"resultVal\":\"10\"}}],\"timeContext\":{\"durationMs\":86400000}}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 20\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyCompliance_CL\\n    | order by TimeGenerated desc\\n    | distinct  bin(TimeGenerated, 5m)\\n    | limit 1);\\n\\nTaniumComplyCompliance_CL\\n| where TimeGenerated >= lastRunTime\\n    and Rule_ID_s != ''\\n    and Rule_ID_s != '[no results]'\\n    and Status_Category_s != 'Error'\\n| extend Benchmark = Standard_s\\n| extend Profile = Profile_s\\n| extend ['Rule Id'] = Rule_ID_s\\n| extend Rule = Rule_s\\n| project Benchmark, Profile, ['Rule Id'], Rule, Status_Category_s\\n| where Status_Category_s  == 'Fail'\\n| summarize ['Failed Count'] = count() by Benchmark, Profile, ['Rule Id'], Rule\\n| order by ['Failed Count'] desc\\n| limit {BenchmarkFailuresLimit}\\n\",\"size\":0,\"title\":\"By Failure Count\",\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 13\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumComplyCompliance_CL\\n    | order by TimeGenerated desc\\n    | distinct  bin(TimeGenerated, 5m)\\n    | limit 1);\\n\\nTaniumComplyCompliance_CL\\n| where TimeGenerated >= lastRunTime\\n    and Rule_ID_s != ''\\n    and Rule_ID_s != '[no results]'\\n    and Status_Category_s != 'Error'\\n| extend Benchmark = Standard_s\\n| extend Profile = Profile_s\\n| project Benchmark, Profile, Status_Category_s\\n| summarize FindingsCount = count() by Benchmark, Profile, Status_Category_s\\n| evaluate pivot(Status_Category_s, sum(FindingsCount))\\n| extend Findings = Pass + Fail + Informational\\n| extend ['% of Failures'] = (Fail*1.0/Findings)\\n| order by ['% of Failures'] desc\\n| limit {BenchmarkFailuresLimit}\\n\",\"size\":0,\"title\":\"By Failure %\",\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"% of Failures\",\"formatter\":0,\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"percent\"}}}]}},\"name\":\"query - 13 - Copy\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Comply\"},\"customWidth\":\"100\",\"name\":\"comply group\",\"styleSettings\":{\"maxWidth\":\"100\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Unmanaged Devices by OS\\nCount of unmanaged assets by Operating System. Nmap (Level 3+) scans are required\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumDiscoverUnmanagedAssets_CL\\n    | extend roundedTime = bin(TimeGenerated, 1m) \\n    | distinct roundedTime    \\n    | order by roundedTime desc     \\n    | limit 1);\\n    \\n    TaniumDiscoverUnmanagedAssets_CL\\n    | where TimeGenerated >= lastRunTime and Os_s <> '' \\n    | distinct MacAddress_s, Os_s\\n    | summarize count() by Os_s\\n    \\n    \",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"group\":\"Os_s\",\"createOtherGroup\":20}},\"name\":\"visualization title\"},{\"type\":1,\"content\":{\"json\":\"## Unmanaged Devices by Manufacturer\\nCount of unmanaged assets by manufacturer. All scan types applicable\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\nTaniumDiscoverUnmanagedAssets_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);\\n\\nTaniumDiscoverUnmanagedAssets_CL\\n|where TimeGenerated >= lastRunTime and  MacOrganization_s <> '' \\n|distinct MacAddress_s, MacOrganization_s\\n|summarize count() by MacOrganization_s\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"##  Unmanaged Devices by Open Ports\\nCounts which ports are most frequently found open on unmanaged assets. Level 4 scans required for port data\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumDiscoverUnmanagedAssets_CL\\n    | extend roundedTime = bin(TimeGenerated, 1m) \\n    | distinct roundedTime    \\n    | order by roundedTime desc     \\n    | limit 1);\\n\\nTaniumDiscoverUnmanagedAssets_CL\\n| where TimeGenerated >= lastRunTime\\n    and Ports_s != '' \\n| distinct MacAddress_s,Ports_s\\n| extend dPort = parse_json(strcat('[', Ports_s, ']'))\\n| mv-expand  dPort\\n| extend Port = strcat('Port ', tostring(dPort))\\n| project MacAddress_s, Port\\n| summarize count() by Port;\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"group\":\"Port\",\"createOtherGroup\":6,\"seriesLabelSettings\":[{\"seriesName\":\"Other\",\"color\":\"redBright\"}]}},\"name\":\"query - 5\"},{\"type\":1,\"content\":{\"json\":\"## All Unmanaged Assets\"},\"name\":\"visualization title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\n    TaniumDiscoverUnmanagedAssets_CL\\n    | extend roundedTime = bin(TimeGenerated, 1m) \\n    | distinct roundedTime    \\n    | order by roundedTime desc     \\n    | limit 1);\\n    \\n    TaniumDiscoverUnmanagedAssets_CL\\n    | where TimeGenerated >= lastRunTime and HostName_s <> ''\\n    | project ['Host Name']=HostName_s, ['Mac Address']=MacAddress_s, ['IP Address']=IPAddress, ['Mac Organization']=MacOrganization_s, ['Last Discovered At']=LastDiscoveredAt_t\\n    | sort by ['Last Discovered At']\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 7\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Discover\"},\"name\":\"discover_group\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Microsoft Tooling Health \",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Microsoft Defender Installation Status\\nShows distribution of endpoints with Microsoft Defender installed\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let cleanLeft = (s:string) { iff(s startswith '[\\\"', substring(s,2), s) };\\nlet cleanRight = (s:string) { iff(s endswith '\\\"]', substring(s, 0, strlen(s) - 2), s) };\\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\\nlet status = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\\n\\nlet lastRunTime = toscalar(\\nTaniumDefenderHealth_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);    \\n\\nlet MsftDefenderHealth =\\nTaniumDefenderHealth_CL\\n| where TimeGenerated >= lastRunTime\\n| extend ComputerName = clean(Computer_Name_s)\\n| extend Status = status(clean(Is_Defender_Installed_s))\\n| project ComputerName, Status, TimeGenerated;\\n\\nMsftDefenderHealth\\n| summarize Endpoints = count () by Status\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Installed\",\"color\":\"green\"},{\"seriesName\":\"Not Installed\",\"color\":\"redBright\"},{\"seriesName\":\"Unknown\",\"color\":\"orange\"}]}},\"name\":\"query - 1\"},{\"type\":1,\"content\":{\"json\":\"## Microsoft Defender Health Status\\nFor endpoints with Defender installed, shows Defender health status counts\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let cleanLeft = (s:string) { iff(s startswith '[\\\"', substring(s,2), s) };\\nlet cleanRight = (s:string) { iff(s endswith '\\\"]', substring(s, 0, strlen(s) - 2), s) };\\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\\nlet installationStatus = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\\nlet status = (s:string) { iff(s == 'True', 'Healthy', iff(s == 'False', 'Unhealthy', s))};\\n\\nlet lastRunTime = toscalar(\\nTaniumDefenderHealth_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime\\n| order by roundedTime desc\\n| limit 1);\\n\\nlet MsftDefenderHealth =\\nTaniumDefenderHealth_CL\\n| where TimeGenerated >= lastRunTime\\n| extend ComputerName = clean(Computer_Name_s)\\n| extend IsDefenderInstalled = installationStatus(clean(Is_Defender_Installed_s))\\n| extend Status = status(clean(Is_Defender_Healthy_s))\\n| project ComputerName, IsDefenderInstalled, Status, TimeGenerated;\\n\\nMsftDefenderHealth\\n| where IsDefenderInstalled == 'Installed'\\n| summarize Endpoints = count () by Status\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Healthy\",\"color\":\"green\"},{\"seriesName\":\"Unhealthy\",\"color\":\"redBright\"}]}},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Microsoft Defender AntiMalware Status\\nFor endpoints with Defender installed and in a healthy state, shows AntiMalware service status\"},\"name\":\"text - 22\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let cleanLeft = (s:string) { iff(s startswith '[\\\"', substring(s,2), s) };\\nlet cleanRight = (s:string) { iff(s endswith '\\\"]', substring(s, 0, strlen(s) - 2), s) };\\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\\nlet installationStatus = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\\nlet defenderHealth = (s: string) { iif(s == 'True', 'Healthy', iff(s == 'False', 'Unhealthy', s))};\\nlet malwareStatus = (s:string) { iff(s == 'True', 'Enabled', iff(s == 'False', 'Not Enabled', iff(s == '', 'Unknown', s)))};\\n\\nlet lastRunTime = toscalar(\\nTaniumDefenderHealth_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);   \\n\\nlet MsftDefenderHealth =\\nTaniumDefenderHealth_CL\\n| where TimeGenerated >= lastRunTime\\n| extend ComputerName = clean(Computer_Name_s)\\n| extend IsDefenderInstalled = installationStatus(clean(Is_Defender_Installed_s))\\n| extend DefenderHealth = defenderHealth(clean(Is_Defender_Healthy_s))\\n| extend IsAntiMalwareEnabled = malwareStatus(clean(Is_AntiMalware_Service_Enabled_s))\\n| project ComputerName, IsDefenderInstalled, DefenderHealth, IsAntiMalwareEnabled, TimeGenerated;\\n\\nMsftDefenderHealth\\n| where IsDefenderInstalled == 'Installed' and DefenderHealth == 'Healthy'\\n| summarize Endpoints = count () by IsAntiMalwareEnabled\\n\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Enabled\",\"color\":\"green\"},{\"seriesName\":\"Unknown\",\"color\":\"orange\"},{\"seriesName\":\"Not Enabled\",\"color\":\"redBright\"}]}},\"name\":\"query - 32\"},{\"type\":1,\"content\":{\"json\":\"## Microsoft Defender AntiSpyware Status\\n For endpoints with Defender installed and in a healthy state, shows AntiSpyware service status\"},\"name\":\"text - 21\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let cleanLeft = (s:string) { iff(s startswith '[\\\"', substring(s,2), s) };\\nlet cleanRight = (s:string) { iff(s endswith '\\\"]', substring(s, 0, strlen(s) - 2), s) };\\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\\nlet installationStatus = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\\nlet defenderHealth = (s: string) { iif(s == 'True', 'Healthy', iff(s == 'False', 'Unhealthy', s))};\\nlet spywareStatus = (s:string) { iff(s == 'True', 'Enabled', iff(s == 'False', 'Not Enabled', iff(s == '', 'Unknown', s)))};\\n\\nlet lastRunTime = toscalar(\\nTaniumDefenderHealth_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);   \\n\\nlet MsftDefenderHealth =\\nTaniumDefenderHealth_CL\\n| where TimeGenerated >= lastRunTime\\n| extend ComputerName = clean(Computer_Name_s)\\n| extend IsDefenderInstalled = installationStatus(clean(Is_Defender_Installed_s))\\n| extend DefenderHealth = defenderHealth(clean(Is_Defender_Healthy_s))\\n| extend IsAntiSpywareEnabled = spywareStatus(clean(Is_AntiSpyware_Service_Enabled_s))\\n| project ComputerName, IsDefenderInstalled, DefenderHealth, IsAntiSpywareEnabled, TimeGenerated;\\n\\nMsftDefenderHealth\\n| where IsDefenderInstalled == 'Installed' and DefenderHealth == 'Healthy'\\n| summarize Endpoints = count () by IsAntiSpywareEnabled\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Enabled\",\"color\":\"green\"},{\"seriesName\":\"N/A on Mac\",\"color\":\"blue\"},{\"seriesName\":\"Not Enabled\",\"color\":\"redBright\"},{\"seriesName\":\"Unknown\",\"color\":\"orange\"}]}},\"name\":\"query - 31\"},{\"type\":1,\"content\":{\"json\":\"## Microsoft Defender AntiSpyware Signature Update Age\\nFor endpoints with Defender installed and AntiSpyware enabled, shows endpoints that need signature updates\"},\"name\":\"text - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let cleanLeft = (s:string) { iff(s startswith '[\\\"', substring(s,2), s) };\\nlet cleanRight = (s:string) { iff(s endswith '\\\"]', substring(s, 0, strlen(s) - 2), s) };\\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\\nlet installationStatus = (s:string) { iff(s == 'True', 'Installed', iff(s == 'False', 'Not Installed', iff(s == '', 'Unknown', s)))};\\nlet spywareStatus = (s:string) { iff(s == 'True', 'Enabled', iff(s == 'False', 'Not Enabled', iff(s == '', 'Unknown', s)))};\\n\\nlet lastRunTime = toscalar(\\nTaniumDefenderHealth_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);   \\n\\nlet MsftDefenderHealth =\\nTaniumDefenderHealth_CL\\n| where TimeGenerated >= lastRunTime\\n| extend ComputerName = clean(Computer_Name_s)\\n| extend IsDefenderInstalled = installationStatus(clean(Is_Defender_Installed_s))\\n| extend IsAntiSpywareEnabled = spywareStatus(clean(Is_AntiSpyware_Service_Enabled_s))\\n| extend SignatureUpdateAge = toint(clean(AntiSpyware_Signature_Days_Age_s))\\n| project ComputerName, SignatureUpdateAge, IsDefenderInstalled, IsAntiSpywareEnabled, TimeGenerated;\\n\\nMsftDefenderHealth\\n| where IsDefenderInstalled == 'Installed' and IsAntiSpywareEnabled == 'Enabled'\\n| summarize Endpoints = count () by UpdateAge = strcat(SignatureUpdateAge, ' Days'), SignatureUpdateAge\\n| order by SignatureUpdateAge desc\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"categoricalbar\",\"chartSettings\":{\"xAxis\":\"UpdateAge\",\"yAxis\":\"Endpoints\",\"xSettings\":{\"label\":\"Age (Days)\"},\"ySettings\":{\"label\":\"Count\"}}},\"name\":\"query - 5\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Microsoft Tooling Health\"},\"customWidth\":\"50\",\"name\":\"tooling health column 1\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"MEMCM Health\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Microsoft Configuration Manager Health Status\\nDisplays health status for endpoints managed by Configuration Manager (formerly known as SCCM). Will not display properly if Configuration Manager is not set up\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumSCCMClientHealth_CL\\n|where Health_Status_s !has \\\"N/A\\\"\\n|project Computer_Name=Computer_Name_s,Health_Status=Health_Status_s, Reason=Reason_s\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 1\"},{\"type\":1,\"content\":{\"json\":\"## Microsoft Configuration Manager Health Distribution\\nDisplays distribution of health status of endpoints managed by Configuration Manager. Will not display properly if Configuration Manager is not set up\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumSCCMClientHealth_CL\\n|where Reason_s <> \\\"\\\"\\n|summarize count() by Reason_s\\n|project Health_Status=Reason_s,Count=count_\\n|render piechart\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 3\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Microsoft Tooling Health\"},\"customWidth\":\"50\",\"name\":\"tooling health column 2\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Alerts by Intel Documents over time\\nVisualization of how often the top intel docs (detection rules) generated alerts over the last 30 days\"},\"name\":\"text - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n|project Computer_Name_s,Timestamp_t,Intel_Name_s\\n|summarize count () by Timestamp_t, Intel_Name_s\\n|render areachart\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 0\"},{\"type\":1,\"content\":{\"json\":\"## Threat Response Alerts by Intel Document Type\\nBreakdown of how often each intel document type generates alerts\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n| summarize count() by Intel_Type_s\\n| render piechart  \",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Threat Response Alerts by User\\nBreakdown of how often each user generates Tanium alerts\"},\"name\":\"text - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n| summarize count() by Match_Details_match_properties_user_s\\n| render piechart  \",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 5\"},{\"type\":1,\"content\":{\"json\":\"## Threat Response Alerts by Process Name\\nBreakdown of the alerting processes that come up most frequently\"},\"name\":\"text - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n| where isnotempty(Match_Details_match_properties_name_s)\\n| extend ActingProcessName = Match_Details_match_properties_name_s\\n| summarize event_count=count() by bin(Timestamp_t, 7d), ActingProcessName\\n| top 20 by event_count\\n| render barchart\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 7\"},{\"type\":1,\"content\":{\"json\":\"## Threat Response Alerts by Computer Name and Intel\\nBreakdown of the endpoint and intel combinations that generate the most alerts\"},\"name\":\"text - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"TaniumThreatResponse_CL\\n|summarize count() by Computer_Name_s, Intel_Name_s\\n|project-rename Computer_Name=Computer_Name_s, Intel_Name=Intel_Name_s, Count=count_\\n|sort by Count\",\"size\":0,\"timeContext\":{\"durationMs\":2592000000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 9\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Threat Response\"},\"name\":\"Threat Response\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Endpoints requiring Reboot\\nCount of endpoints that require a reboot\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"\\nlet lastRunTime = toscalar(\\nTaniumHighUptime_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);    \\n\\nTaniumHighUptime_CL\\n| where TimeGenerated >= lastRunTime\\n|project TimeGenerated, Computer_Name_s,Reboot_Required_s\\n|where Reboot_Required_s contains 'Yes'\\n|count\",\"size\":4,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"card\",\"tileSettings\":{\"showBorder\":false},\"textSettings\":{\"style\":\"bignumber\"}},\"name\":\"query - 1\"},{\"type\":1,\"content\":{\"json\":\"## Endpoints with High Uptime\\nDisplays endpoints that have not rebooted in >=30 days. May indicate missing patches on Windows machines\"},\"name\":\"text - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let cleanLeft = (s:string) { iff(s startswith '[\\\"', substring(s,2), s) };\\nlet cleanRight = (s:string) { iff(s endswith '\\\"]', substring(s, 0, strlen(s) - 2), s) };\\nlet clean = (s:string) { cleanLeft(cleanRight(s)) };\\nlet parseDayCount = (s:string) { toint(split(s, ' ', 0)[0]) };\\n\\nlet lastRunTime = toscalar(\\nTaniumHighUptime_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);  \\n\\nTaniumHighUptime_CL\\n| where TimeGenerated >= lastRunTime and High_Uptime_s contains 'days'\\n| extend Days=parseDayCount(High_Uptime_s)\\n| project ['Computer Name']=clean(Computer_Name_s), Days\",\"size\":1,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer_Name\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Days\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0}},\"name\":\"query - 3\"},{\"type\":1,\"content\":{\"json\":\"## Patch Compliance\\nDisplays distribution of patch compliance across all endpoints\"},\"name\":\"text - 4\",\"styleSettings\":{\"margin\":\"50\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let getIndex = (s:string) { array_index_of(parse_json(s), 'All Patches') };\\nlet getDisplayOrder = (s:string) { iff(s startswith 'Over', 101, iff(s == 'Compliant', 0, split(s, ' ', 0)[0])) };\\n\\nlet lastRunTime = toscalar(\\nTaniumPatchListCompliance_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);  \\n\\nTaniumPatchListCompliance_CL\\n| where TimeGenerated >= lastRunTime and Patch_List_Name_s contains 'All Patches'\\n| extend patchIndex = getIndex(Patch_List_Name_s)\\n| extend PatchId = parse_json(Patch_List_Id_s)[patchIndex]\\n| extend ComplianceStatus = tostring(parse_json(Compliance_Status_s)[patchIndex])\\n| extend OrderValue = getDisplayOrder(ComplianceStatus)\\n| project Computer_Name_s, ComplianceStatus, OrderValue\\n| summarize Endpoints = count (), SortOrder = min(OrderValue) by ComplianceStatus\\n| order by SortOrder desc\\n\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"group\":\"ComplianceStatus\",\"createOtherGroup\":20,\"seriesLabelSettings\":[{\"seriesName\":\"1 - 5 missing\",\"color\":\"turquoise\"},{\"seriesName\":\"Over 100 missing\",\"color\":\"redBright\"},{\"seriesName\":\"Compliant\",\"color\":\"green\"},{\"seriesName\":\"51 - 100 missing\",\"color\":\"orange\"},{\"seriesName\":\"26 - 50 missing\",\"color\":\"yellow\"},{\"seriesName\":\"11 - 25 missing\",\"color\":\"purple\"},{\"seriesName\":\"6 - 10 missing\",\"color\":\"lightBlue\"},{\"seriesName\":\"Other\",\"color\":\"amethyst\"}]}},\"name\":\"query - 5\"},{\"type\":1,\"content\":{\"json\":\"## Severity of Missing Patches\\nDisplays distribution of severity of missing patches across all endpoints\"},\"name\":\"text - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let lastRunTime = toscalar(\\nTaniumPatchListApplicability_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);  \\n\\nTaniumPatchListApplicability_CL\\n| where TimeGenerated >= lastRunTime\\n| extend PatchId = parse_json(Patch_List_Ids_s)\\n| extend Title = parse_json(Title_s)\\n| extend InstallStatus = parse_json(Install_Status_s)\\n| extend Superseded = parse_json(Superseded_s)\\n| extend Severity = parse_json(Severity_s)\\n| mv-expand PatchId, Title, InstallStatus, Superseded, Severity\\n| project PatchId, Title, InstallStatus, Superseded, Severity\\n| where InstallStatus == 'Not Installed'\\n    and Superseded == 'False'\\n| distinct tostring(PatchId), tostring(Title), tostring(Severity)\\n| summarize PatchCount = count() by Severity\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Moderate\",\"color\":\"yellow\"},{\"seriesName\":\"None\",\"color\":\"green\"},{\"seriesName\":\"Low\",\"color\":\"blue\"},{\"seriesName\":\"Important\",\"color\":\"orange\"},{\"seriesName\":\"Critical\",\"color\":\"redBright\"}]}},\"name\":\"query - 7\"},{\"type\":1,\"content\":{\"json\":\"## Patch Tool Health\\n Displays health of built-in OS patching tools on Windows and Linux\"},\"name\":\"text - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let cleanStatus = (s:string) { iff(s == '[no results]', 'No Results', iff(s == 'TSE-Error: Error', 'TSE-Error', s)) };\\nlet lastRunTime = toscalar(\\nTaniumPatchCoverageStatus_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);  \\n\\nTaniumPatchCoverageStatus_CL\\n| where TimeGenerated >= lastRunTime\\n    and Status_s != 'Unsuppported'\\n    and Status_s != 'N/A on Tanium Client Container'\\n    and Status_s != 'An exception occurred, please see Patch sensors.log file for details.'\\n    and Status_s != ''\\n| extend Status = cleanStatus(Status_s)\\n| summarize count() by Status\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Needs Attention\",\"color\":\"orange\"},{\"seriesName\":\"TSE-Error\",\"color\":\"redBright\"},{\"seriesName\":\"Optimal\",\"color\":\"green\"},{\"seriesName\":\"Initializing\",\"color\":\"purple\"},{\"seriesName\":\"No Results\",\"color\":\"blue\"}]}},\"name\":\"query - 9\"},{\"type\":1,\"content\":{\"json\":\"## Critical/Important Missing Patches by Year\\nDisplays the distribution of Critical or Important patches by the patch's year of release\"},\"name\":\"text - 10\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let getReleaseYear = (s:string){ split(s,'/',2)[0] };\\n\\nlet lastRunTime = toscalar(\\nTaniumPatchListApplicability_CL\\n| extend roundedTime = bin(TimeGenerated, 1m) \\n| distinct roundedTime    \\n| order by roundedTime desc     \\n| limit 1);  \\n\\nTaniumPatchListApplicability_CL\\n| where TimeGenerated >= lastRunTime\\n| extend PatchId = parse_json(Patch_List_Ids_s)\\n| extend Title = parse_json(Title_s)\\n| extend KbArticle = parse_json(KB_Articles_s)\\n| extend InstallStatus = parse_json(Install_Status_s)\\n| extend Severity = parse_json(Severity_s)\\n| extend Superseded = parse_json(Superseded_s)\\n| extend ReleaseDate = parse_json(Release_Date_s)\\n| mv-expand PatchId, Title, KbArticle, InstallStatus, Severity, ReleaseDate, Superseded\\n| where InstallStatus == 'Not Installed'\\n    and (Severity == 'Critical' or Severity == 'Important')\\n    and Superseded == 'False'\\n| extend ReleaseYear = strcat('Year ', getReleaseYear(ReleaseDate))\\n| where Title != ''\\n| distinct tostring(Title), tostring(ReleaseYear), tostring(Severity)\\n| summarize Patches = count() by ReleaseYear, Severity\\n| order by ReleaseYear asc\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"categoricalbar\",\"chartSettings\":{\"xAxis\":\"ReleaseYear\",\"yAxis\":[\"Patches\"],\"createOtherGroup\":100}},\"name\":\"query - 11\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Patch\"},\"name\":\"Patch\"}],\"fromTemplateId\":\"sentinel-TaniumWorkbook\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId1'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=TaniumWorkbook; logoFileName=Tanium.svg; description=The Tanium Workbook contains 20+ visualizations across 5 tabs (Threat Response, Comply, Discover, Microsoft Tooling Health and Patch). Each of these tabs shows examples of insights teams can leverage using Tanium's real-time data.; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=2.0; title=Tanium Workbook; templateRelativePath=TaniumWorkbook.json; subtitle=; provider=Tanium}.description",
                "parentId": "[variables('workbookId1')]",
                "contentId": "[variables('_workbookContentId1')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                },
                "dependencies": {
                  "operator": "AND",
                  "criteria": [
                    {
                      "contentId": "TaniumComplyCompliance_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "TaniumComplyVulnerabilities_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "TaniumDefenderHealth_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "TaniumDiscoverUnmanagedAssets_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "TaniumHighUptime_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "TaniumPatchCoverageStatus_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "TaniumPatchListApplicability_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "TaniumPatchListCompliance_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "TaniumSCCMClientHealth_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "TaniumThreatResponse_CL",
                      "kind": "DataType"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_workbookContentId1')]",
        "contentKind": "Workbook",
        "displayName": "[parameters('workbook1-name')]",
        "contentProductId": "[variables('_workbookcontentProductId1')]",
        "id": "[variables('_workbookcontentProductId1')]",
        "version": "[variables('workbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Tanium-ComplyFindings Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-ComplyFindings",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "",
              "type": "string",
              "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
              }
            },
            "IntegrationAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "string",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Tanium-ComplyFindings",
                "hidden-SentinelTemplateVersion": "2.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    },
                    "TaniumApiToken": {
                      "type": "SecureString",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_4": {
                      "runAfter": {
                        "Add_CVE_Link_To_Table": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{body('Add_CVE_Link_To_Table')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Add_CVE_Link_To_Table": {
                      "runAfter": {
                        "Build_CVE_Table": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var d = workflowContext.actions.Build_CVE_Table.outputs.body;\r\n\r\nvar regex = /(cve-\\d+-\\d+)/gi;  \r\n  \r\nreturn d.replace(regex, function(match) {  \r\n    return '<a href=\"https://nvd.nist.gov/vuln/detail/' + match + '\" target=\"_blank\">' + match + '</a>';  \r\n});  \r\n"
                      }
                    },
                    "Get_Hosts_From_Incident": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Get_Hosts_From_Incident')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "function flD(e, l) {\r\n    v = e.node.compliance.cveFindings.map((f) => {\r\n      return {\r\n        name: e.node.name,\r\n        ipAddress: e.node.ipAddress,\r\n        cveId: f.cveId,\r\n        cvssScoreV3: f.cvssScoreV3,\r\n        severity: f.severity,\r\n        summary:\r\n          f.summary.replace(/[^a-z0-9.-_, ]/gi,'').substr(0, 70)+\r\n          (f.summary.length > 70 ? \"...\" : \"\"),\r\n      };\r\n    });\r\n    return srtD(v).slice(0,l)\r\n  }\r\n\r\nfunction srtD(fld) {\r\n  fld.sort((a, b) => {\r\n    if (a.cvssScoreV3 !== b.cvssScoreV3) {\r\n      return b.cvssScoreV3 - a.cvssScoreV3; // Descending order by cvssScoreV3\r\n    } else {\r\n      // Descending order by CVE ID year\r\n      let yearA = parseInt(a.cveId.split(\"-\")[1]);\r\n      let yearB = parseInt(b.cveId.split(\"-\")[1]);\r\n      return yearB - yearA;\r\n    }\r\n  });\r\n\r\n  return fld;\r\n}\r\n\r\nlet e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nreturn e.map((item) => flD(item, 20))"
                      }
                    },
                    "Build_Endpoint_Filter_from_Hosts": {
                      "inputs": {
                        "code": "var hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nvar filters=[];for(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,t=hosts[i].additionalData,e=null!=t,s=t&&null!==t.LastIpAddress&&void 0!==t.LastIpAddress,l=t&&null!==t.FQDN&&void 0!==t.FQDN&&t.FQDN.includes(\".\");if(null!=a&&\"\"!==a){if(l&&s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1}]});continue}if(l){filters.push({any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1});continue}if(s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{path:\"name\",value:hosts[i].hostName}]});continue}filters.push({filters:[{path:\"name\",value:hosts[i].hostName}]})}}\r\nreturn filters;"
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode"
                    },
                    "Set_Endpoint_Filter": {
                      "inputs": {
                        "name": "endpoint filters",
                        "value": "@body('Build_Endpoint_Filter_from_Hosts')"
                      },
                      "runAfter": {
                        "Build_Endpoint_Filter_from_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query endpointVulnerabilityCVSSv2($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n\tendpoints(source: $source, first: 10, after: $endCursor, filter: $incidentHosts) {\n\t  edges {\n\t\tnode {\n\t\t  id\n\t\t  name\n\t\t  ipAddress\n\t\t  compliance {\n\t\t\tcveFindings (\n\t\t\tfilter: {any: false, filters: [{any:true,path:\"cveId\",op:CONTAINS,value:\"-\"}]}\n\t\t\t){\n\t\t\t  cveId\n\t\t\t  cvssScoreV3\n\t\t\t  lastFound\n\t\t\t  severity\n\t\t\t  summary\n\t\t\t}\n\t\t  }\n\t\t}\n\t  }\n\t  pageInfo {\n\t\tstartCursor\n\t\tendCursor\n\t\thasPreviousPage\n\t\thasNextPage\n\t  }\n\t}\n  }\n"
                          }
                        ]
                      },
                      "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Stop_If_Tanium_Has_No_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filter": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "Set_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object",
                            "value": {
                              "tds": {
                                "allNamespaces": false
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Build_CVE_Table": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var d = workflowContext.actions.Flatten_API_Gateway_endpoints.outputs.body;\r\nconst gT = (d) => {      \r\n    if (!d || d.length === 0) return '';    \r\n    let iK = [...new Set([].concat(...d.map(e => Object.keys(e[0]))))];\r\n\r\n    let table = `<table><thead><tr>${iK.map(k => `<th>${k}</th>`).join('')}</tr></thead><tbody>`;  \r\n    iK = iK.slice(2,10);\r\n    \r\n    let count = table.length;  \r\n    for (let i of d) {  \r\n        let rows = i.map(r => {return \"<tr><td>\" + iK.map(k => {return r[k]} ).join(\"</td><td>\") + \"</td></tr>\" })\r\n        rows[0] = rows[0].replace('<tr><td>', `<tr><td rowspan=\"${rows.length}\">${i[0][\"name\"]}</td><td rowspan=\"${rows.length}\">${i[0][\"ipAddress\"]}</td><td>`)\r\n        for (let r of rows) {\r\n            if (count + r.length > 28000) break;\r\n            table += r;  \r\n            count += r.length;\r\n        }          \r\n    }  \r\n    return table + '</tbody></table>';  \r\n};\r\nreturn gT(d)"
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@json(variables('api gateway query variables'))"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                },
                                                "hasPreviousPage": {
                                                  "type": "boolean"
                                                },
                                                "startCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "properties": {
                                              "compliance": {
                                                "properties": {
                                                  "cveFindings": {
                                                    "items": {
                                                      "properties": {
                                                        "cveId": {
                                                          "type": "string"
                                                        },
                                                        "cvssScoreV3": {
                                                          "type": [
                                                            "number",
                                                            "null"
                                                          ]
                                                        },
                                                        "lastFound": {
                                                          "type": "string"
                                                        },
                                                        "severity": {
                                                          "type": [
                                                            "string",
                                                            "null"
                                                          ]
                                                        },
                                                        "summary": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "cveId",
                                                        "cvssScoreV3",
                                                        "lastFound",
                                                        "severity",
                                                        "summary"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "ipAddress": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        },
                                        "hasPreviousPage": {
                                          "type": "boolean"
                                        },
                                        "startCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@json(variables('api gateway query variables'))"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Stop_If_Tanium_Has_No_Hosts_From_Incident": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_3": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No data found in Tanium for hosts.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_no_hosts_in_Tanium": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_3": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@json(variables('api gateway query variables'))"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-ComplyFindings",
            "description": "Tanium's real-time data can speed up investigations by providing important context for analysts, such as whether or not there are compliance findings on the endpoints in question.\nThis playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for Comply Findings for those hosts, and then adds a comment to the incident with that information.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user privileges of that token.",
              "3. Tanium Comply installed and operational in your Tanium environment."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2023-12-07T00:00:00Z",
            "parameterTemplateVersion": "2.0.1",
            "releaseNotes": {
              "version": "2.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "Playbook",
        "displayName": "Tanium-ComplyFindings",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Tanium-GeneralHostInfo Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-GeneralHostInfo",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "",
              "type": "string",
              "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
              }
            },
            "IntegrationAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Tanium-GeneralHostInfo",
                "hidden-SentinelTemplateVersion": "2.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{body('Create_HTML_table')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Create_HTML_table": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Get_Hosts_From_Incident": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Set_Endpoint_Filter": {
                      "inputs": {
                        "name": "endpoint filters",
                        "value": "@body('Build_Endpoint_Filter_from_Hosts')"
                      },
                      "runAfter": {
                        "Build_Endpoint_Filter_from_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Get_Hosts_From_Incident')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tlet flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "Build_Endpoint_Filter_from_Hosts": {
                      "inputs": {
                        "code": "var hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nvar filters=[];for(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,t=hosts[i].additionalData,e=null!=t,s=t&&null!==t.LastIpAddress&&void 0!==t.LastIpAddress,l=t&&null!==t.FQDN&&void 0!==t.FQDN&&t.FQDN.includes(\".\");if(null!=a&&\"\"!==a){if(l&&s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1}]});continue}if(l){filters.push({any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1});continue}if(s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{path:\"name\",value:hosts[i].hostName}]});continue}filters.push({filters:[{path:\"name\",value:hosts[i].hostName}]})}}\r\nreturn filters;"
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(\n    source: $source\n    first: 10\n    after: $endCursor\n    filter: $incidentHosts\n  ) {\n    edges {\n      node {\n        id\n        name\n        ipAddress\n        os { platform generation }\n        disks {\n          name\n          free\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      },
                      "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Stop_If_Tanium_Has_No_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filter": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "Set_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object",
                            "value": {
                              "tds": {
                                "allNamespaces": false
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Stop_If_Tanium_Has_No_Hosts_From_Incident": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_3": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No data found in Tanium for hosts.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_no_hosts_in_Tanium": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_3": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@json(variables('api gateway query variables'))"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                },
                                                "hasPreviousPage": {
                                                  "type": "boolean"
                                                },
                                                "startCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        },
                                        "hasPreviousPage": {
                                          "type": "boolean"
                                        },
                                        "startCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@json(variables('api gateway query variables'))"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@json(variables('api gateway query variables'))"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-GeneralHostInfo",
            "description": "Tanium's real-time data can speed up investigations by providing important context for analysts, such as basic information about the computer's name, IP, and storage information.\nThis playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for general endpoint information for those hosts, and then adds a comment to the incident with that information.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2023-12-07T00:00:00Z",
            "parameterTemplateVersion": "2.0.1",
            "releaseNotes": {
              "version": "2.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "Tanium-GeneralHostInfo",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Tanium-MSDefenderHealth Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion3')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-MSDefenderHealth",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "",
              "type": "string",
              "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
              }
            },
            "IntegrationAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Tanium-MSDefenderHealth",
                "hidden-SentinelTemplateVersion": "2.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{body('Create_HTML_table')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Create_HTML_table": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Get_Hosts_From_Incident": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Get_Hosts_From_Incident')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tlet flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "Build_Endpoint_Filter_from_Hosts": {
                      "inputs": {
                        "code": "var hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nvar filters=[];for(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,t=hosts[i].additionalData,e=null!=t,s=t&&null!==t.LastIpAddress&&void 0!==t.LastIpAddress,l=t&&null!==t.FQDN&&void 0!==t.FQDN&&t.FQDN.includes(\".\");if(null!=a&&\"\"!==a){if(l&&s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1}]});continue}if(l){filters.push({any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1});continue}if(s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{path:\"name\",value:hosts[i].hostName}]});continue}filters.push({filters:[{path:\"name\",value:hosts[i].hostName}]})}}\r\nreturn filters;"
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(source: $source, first: 10, after: $endCursor, filter: $incidentHosts) {\n    edges {\n      node {\n        name\n        ipAddress\n        sensorReadings(\n          sensors: [{name: \"Microsoft Defender Installed\"}, {name: \"Microsoft Defender Health Details\"}]\n        ) {\n          columns {\n            sensor {\n              name\n            }\n            name\n            values\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      },
                      "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Stop_If_Tanium_Has_No_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filter": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Set_Endpoint_Filter": {
                      "inputs": {
                        "name": "endpoint filters",
                        "value": "@body('Build_Endpoint_Filter_from_Hosts')"
                      },
                      "runAfter": {
                        "Build_Endpoint_Filter_from_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    },
                    "Stop_If_Tanium_Has_No_Hosts_From_Incident": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_3": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No data found in Tanium for hosts.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_no_hosts_in_Tanium": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_3": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "Set_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object",
                            "value": {
                              "tds": {
                                "allNamespaces": false
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@json(variables('api gateway query variables'))"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                },
                                                "hasPreviousPage": {
                                                  "type": "boolean"
                                                },
                                                "startCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        },
                                        "hasPreviousPage": {
                                          "type": "boolean"
                                        },
                                        "startCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@json(variables('api gateway query variables'))"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@json(variables('api gateway query variables'))"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId3'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId3')]",
                "contentId": "[variables('_playbookContentId3')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-MSDefenderHealth",
            "description": "Tanium's real-time data can speed up investigations by providing important context for analysts, such as whether or not Defender is healthy on the endpoint.\nThis playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for the Microsoft Defender Health for those hosts, and then adds a comment to the incident with that information.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2023-12-07T00:00:00Z",
            "parameterTemplateVersion": "2.0.1",
            "releaseNotes": {
              "version": "2.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId3')]",
        "contentKind": "Playbook",
        "displayName": "Tanium-MSDefenderHealth",
        "contentProductId": "[variables('_playbookcontentProductId3')]",
        "id": "[variables('_playbookcontentProductId3')]",
        "version": "[variables('playbookVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Tanium-QuarantineHosts Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion4')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-QuarantineHosts",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "",
              "type": "string",
              "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
              }
            },
            "IntegrationAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumActionsApi": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/actions')]",
            "TaniumAllComputersUrl": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/groups/by-name/All%20Computers')]",
            "TaniumPackagesByNameUrlFragment": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/packages/by-name/')]",
            "TaniumActionResultDataUrlFragment": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/result_data/action/')]",
            "TaniumApiGatewayApi": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Tanium-QuarantineHosts",
                "hidden-SentinelTemplateVersion": "2.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumActionsApi": {
                      "type": "String"
                    },
                    "TaniumAllComputersUrl": {
                      "type": "String"
                    },
                    "TaniumPackagesByNameUrlFragment": {
                      "type": "String"
                    },
                    "TaniumActionResultDataUrlFragment": {
                      "type": "String"
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table_of_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>ISSUED TANIUM ACTIONS<br>\n@{body('Create_HTML_table_of_issued_actions')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Stop_If_Tanium_Has_No_Hosts_From_Incident": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_3": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No data found in Tanium for hosts.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_no_hosts_in_Tanium": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_3": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Add_comment_to_incident_-_hosts_that_will_be_targeted": {
                      "runAfter": {
                        "Create_HTML_table_of_matched_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>Preparing to issue quarantine actions targeting these endpoints associated with this incident<br>\n@{body('Create_HTML_table_of_matched_endpoints')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Check_issued_actions": {
                      "actions": {
                        "Terminate_-_no_actions_were_successfully_issued": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Unable to issue actions"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "If_Linux_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(variables('issued actions'))",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Collect_action_results_for_each_issued_action": {
                      "foreach": "@variables('issued actions')",
                      "actions": {
                        "Get_action_result": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumActionResultDataUrlFragment'), items('Collect_action_results_for_each_issued_action')?['id'])}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "If_action_result_could_be_determined": {
                          "actions": {
                            "For_each_action_result_set": {
                              "foreach": "@body('Parse_action_result')",
                              "actions": {
                                "Append_to_action_results": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "action results",
                                    "value": "@item()"
                                  }
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "Parse_action_result": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_to_unknown_action_results": {
                                "runAfter": {
                                  "Compose_unknown_action_result": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "unknown action results",
                                  "value": "@outputs('Compose_unknown_action_result')"
                                }
                              },
                              "Compose_unknown_action_result": {
                                "type": "Compose",
                                "inputs": {
                                  "action id": "@item()?['id']",
                                  "status": "Completed with unknown result"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(outputs('Parse_action_result')['body'])",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_action_result": {
                          "runAfter": {
                            "Parse_current_issued_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "JavaScriptCode",
                          "inputs": {
                            "code": "var action_results = workflowContext.actions.Get_action_result.outputs.body.data;\r\nvar action_id = workflowContext.actions.Parse_current_issued_action.outputs.body.id;\r\nvar columns = action_results.result_sets[0].columns.map(c => c.name);\r\nvar robjects = [];\r\n\r\naction_results.result_sets.forEach(function(rs) {\r\n\trs.rows.forEach(function(row) {\r\n\t\tvar robject = {'action id': action_id};\r\n\t\tcolumns.forEach(function(c, i) {\r\n\t\t\trobject[c] = row.data[i][0].text;\r\n\t\t});\r\n\t\trobjects.push(robject);\r\n\t});\r\n});\r\n\r\nreturn robjects;"
                          }
                        },
                        "Parse_current_issued_action": {
                          "runAfter": {
                            "Get_action_result": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('Collect_action_results_for_each_issued_action')",
                            "schema": {
                              "properties": {
                                "action_group": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "approver": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "comment": {
                                  "type": "string"
                                },
                                "creation_time": {
                                  "type": "string"
                                },
                                "distribute_seconds": {
                                  "type": "integer"
                                },
                                "expiration_time": {
                                  "type": "string"
                                },
                                "expire_seconds": {
                                  "type": "integer"
                                },
                                "history_saved_question": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "id": {
                                  "type": "integer"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "package_spec": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "saved_action": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "skip_lock_flag": {
                                  "type": "boolean"
                                },
                                "start_time": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "stopped_flag": {
                                  "type": "boolean"
                                },
                                "target_group": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "user": {
                                  "properties": {
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "domain": {
                                      "type": "string"
                                    },
                                    "effective_group_id": {
                                      "type": "integer"
                                    },
                                    "external_flag": {
                                      "type": "integer"
                                    },
                                    "group_id": {
                                      "type": "integer"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_login": {
                                      "type": "string"
                                    },
                                    "locked_out": {
                                      "type": "integer"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "previous_login": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Create_HTML_table_of_action_results": {
                      "runAfter": {
                        "Collect_action_results_for_each_issued_action": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@variables('action results')"
                      }
                    },
                    "Create_HTML_table_of_issued_actions": {
                      "runAfter": {
                        "Check_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "columns": [
                          {
                            "header": "action id",
                            "value": "@item()?['id']"
                          },
                          {
                            "header": "name",
                            "value": "@item()?['name']"
                          },
                          {
                            "header": "status",
                            "value": "@item()?['status']"
                          }
                        ],
                        "format": "HTML",
                        "from": "@variables('issued actions')"
                      }
                    },
                    "Create_HTML_table_of_matched_endpoints": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Create_HTML_table_of_unknown_action_results": {
                      "runAfter": {
                        "Create_HTML_table_of_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@variables('unknown action results')"
                      }
                    },
                    "Get_Hosts_From_Incident": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Get_Hosts_From_Incident')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tvar flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "For_each_endpoint": {
                      "foreach": "@variables('endpoints')",
                      "actions": {
                        "Compose_endpoint_filter_for_packages": {
                          "runAfter": {
                            "Parse_endpoint_JSON_data": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": true,
                            "filters": [
                              {
                                "operator": "Equal",
                                "sensor": {
                                  "name": "Computer Name"
                                },
                                "value": "@body('Parse_endpoint_JSON_data')?['node']?['name']"
                              },
                              {
                                "operator": "RegexMatch",
                                "sensor": {
                                  "name": "IP Address"
                                },
                                "value": "@body('Parse_endpoint_JSON_data')?['node']?['ipAddress']"
                              }
                            ]
                          }
                        },
                        "Parse_endpoint_JSON_data": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_endpoint')",
                            "schema": {
                              "properties": {
                                "node": {
                                  "properties": {
                                    "ipAddress": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "os": {
                                      "properties": {
                                        "platform": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Switch": {
                          "runAfter": {
                            "Compose_endpoint_filter_for_packages": [
                              "Succeeded"
                            ]
                          },
                          "cases": {
                            "Linux": {
                              "case": "Linux",
                              "actions": {
                                "Append_to_Linux_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "linux endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            },
                            "Mac": {
                              "case": "Mac",
                              "actions": {
                                "Append_to_macOS_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "macos endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            },
                            "Windows": {
                              "case": "Windows",
                              "actions": {
                                "Append_to_Windows_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "windows endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            }
                          },
                          "expression": "@body('Parse_endpoint_JSON_data')?['node']?['os']?['platform']",
                          "type": "Switch"
                        }
                      },
                      "runAfter": {
                        "Initialize_all_computers_id": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Build_Endpoint_Filter_from_Hosts": {
                      "inputs": {
                        "code": "var hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nvar filters=[];for(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,t=hosts[i].additionalData,e=null!=t,s=t&&null!==t.LastIpAddress&&void 0!==t.LastIpAddress,l=t&&null!==t.FQDN&&void 0!==t.FQDN&&t.FQDN.includes(\".\");if(null!=a&&\"\"!==a){if(l&&s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1}]});continue}if(l){filters.push({any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1});continue}if(s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{path:\"name\",value:hosts[i].hostName}]});continue}filters.push({filters:[{path:\"name\",value:hosts[i].hostName}]})}}\r\nreturn filters;"
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode"
                    },
                    "Set_Endpoint_Filter": {
                      "inputs": {
                        "name": "endpoint filters",
                        "value": "@body('Build_Endpoint_Filter_from_Hosts')"
                      },
                      "runAfter": {
                        "Build_Endpoint_Filter_from_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    },
                    "Get_the_\"All_Computers\"_group": {
                      "runAfter": {
                        "Initialize_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "GET",
                        "uri": "@parameters('TaniumAllComputersUrl')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "If_Linux_endpoints": {
                      "actions": {
                        "Check_Linux_issued_action_result": {
                          "actions": {
                            "Append_Linux_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_Linux_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_Linux_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Issue_Linux_action')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_Linux_action": {
                          "runAfter": {
                            "Compose_Linux_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_Linux_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel: @{variables('linux package name')}",
                            "package_spec": "@outputs('Compose_Linux_action_package_declaration')",
                            "target_group": "@outputs('Compose_Linux_target_group')"
                          }
                        },
                        "Compose_Linux_action_package_declaration": {
                          "runAfter": {
                            "Parse_Linux_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_Linux_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_Linux_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_Linux_target_group": {
                          "runAfter": {
                            "Compose_Linux_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('linux endpoint filters')"
                          }
                        },
                        "Get_Linux_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('linux package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_Linux_action": {
                          "runAfter": {
                            "Compose_Linux_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_Linux_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_Linux_package_json": {
                          "runAfter": {
                            "Get_Linux_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Linux_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "If_macOS_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('linux endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_Windows_endpoints": {
                      "actions": {
                        "Check_Windows_issued_action_result": {
                          "actions": {
                            "Append_Windows_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_Windows_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_Windows_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Issue_Windows_action')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_Windows_action_package_declaration": {
                          "runAfter": {
                            "Parse_Windows_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_Windows_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_Windows_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_Windows_target_group": {
                          "runAfter": {
                            "Compose_Windows_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('windows endpoint filters')"
                          }
                        },
                        "Compose_windows_action": {
                          "runAfter": {
                            "Compose_Windows_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_Windows_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel: @{variables('windows package name')}",
                            "package_spec": "@outputs('Compose_Windows_action_package_declaration')",
                            "target_group": "@outputs('Compose_Windows_target_group')"
                          }
                        },
                        "Get_Windows_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('windows package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_Windows_action": {
                          "runAfter": {
                            "Compose_windows_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_windows_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_Windows_package_json": {
                          "runAfter": {
                            "Get_Windows_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Windows_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_endpoint": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('windows endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_action_results": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_-_action_results": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_action_results')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "If_action_results_and_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Add_comment_to_incident_(V3)_-_unknown_action_results": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": {
                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_unknown_action_results')}</p>"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/Incidents/Comment"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('action results'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_action_results_and_unknown_action_results": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_-_known_and_unknown_action_results": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_action_results')}<br>\n<br>\n@{body('Create_HTML_table_of_unknown_action_results')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_2": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_-_known_and_unknown_action_results": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Create_HTML_table_of_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('action results'))",
                              0
                            ]
                          },
                          {
                            "greater": [
                              "@length(variables('unknown action results'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_macOS_endpoints": {
                      "actions": {
                        "Check_macOS_issued_action_result": {
                          "actions": {
                            "Append_macOS_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_macOS_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_macOS_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Issue_macOS_action')",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_macOS_action": {
                          "runAfter": {
                            "Compose_macOS_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_macOS_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel @{variables('macos package name')}",
                            "package_spec": "@outputs('Compose_macOS_action_package_declaration')",
                            "target_group": "@outputs('Compose_macOS_target_group')"
                          }
                        },
                        "Compose_macOS_action_package_declaration": {
                          "runAfter": {
                            "Parse_macOS_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_macOS_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_macOS_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_macOS_target_group": {
                          "runAfter": {
                            "Compose_macOS_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('macos endpoint filters')"
                          }
                        },
                        "Get_macOS_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('macos package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_macOS_action": {
                          "runAfter": {
                            "Compose_macOS_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_macOS_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_macOS_package_json": {
                          "runAfter": {
                            "Get_macOS_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_macOS_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "If_Windows_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('macos endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Initialize_package_parameters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(\n    source: $source\n    first: 10\n    after: $endCursor\n    filter: $incidentHosts\n  ) {\n    edges {\n      node {\n        name\n        ipAddress\n        os { platform }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Stop_If_Tanium_Has_No_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filter": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Linux_endpoint_filters": {
                      "runAfter": {
                        "Initialize_Windows_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "linux endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Linux_package_name": {
                      "runAfter": {
                        "Initialize_MacOS_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "linux package name",
                            "type": "string",
                            "value": "Apply Linux IPTables Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_MacOS_package_name": {
                      "runAfter": {
                        "Initialize_Windows_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "macos package name",
                            "type": "string",
                            "value": "Apply Mac PF Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "Set_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Windows_endpoint_filters": {
                      "runAfter": {
                        "Add_comment_to_incident_-_hosts_that_will_be_targeted": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "windows endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Windows_package_name": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "windows package name",
                            "type": "string",
                            "value": "Apply Windows IPsec Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_action_results": {
                      "runAfter": {
                        "Wait_for_the_max_expire_seconds_from_the_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "action results",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_all_computers_id": {
                      "runAfter": {
                        "Get_the_\"All_Computers\"_group": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "all computers id",
                            "type": "string",
                            "value": "@{body('Get_the_\"All_Computers\"_group')?['data']?['id']}"
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Initialize_issued_actions": {
                      "runAfter": {
                        "Initialize_macOS_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "issued actions",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_macOS_endpoint_filters": {
                      "runAfter": {
                        "Initialize_Linux_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "macos endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_package_parameters": {
                      "runAfter": {
                        "Initialize_Linux_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "package parameters",
                            "type": "array",
                            "value": [
                              {
                                "key": "$1",
                                "value": "0"
                              },
                              {
                                "key": "$2",
                                "value": "1"
                              },
                              {
                                "key": "$3",
                                "value": "1"
                              },
                              {
                                "key": "$4",
                                "value": "1"
                              },
                              {
                                "key": "$5",
                                "value": "1"
                              },
                              {
                                "key": "$6",
                                "value": "Quarantine via Tanium and Microsoft Sentinel"
                              },
                              {
                                "key": "$7",
                                "value": "[variables('blanks')]"
                              },
                              {
                                "key": "$8",
                                "value": "[variables('blanks')]"
                              },
                              {
                                "key": "$9",
                                "value": "[variables('blanks')]"
                              }
                            ]
                          }
                        ]
                      },
                      "description": "The quarantine packages use the same parameters across operating systems"
                    },
                    "Initialize_unknown_action_results": {
                      "runAfter": {
                        "Initialize_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "unknown action results",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until_there_are_no_more_pages_in_the_API_gateway_response": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@json(variables('api gateway query variables'))"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": "string"
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": "string"
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@json(variables('api gateway query variables'))"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Select_expire_seconds": {
                      "runAfter": {
                        "Add_comment_to_incident_(V3)_2": [
                          "Succeeded"
                        ]
                      },
                      "type": "Select",
                      "inputs": {
                        "from": "@variables('issued actions')",
                        "select": "@int(item()?['expire_seconds'])"
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@json(variables('api gateway query variables'))"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Wait_for_the_max_expire_seconds_from_the_issued_actions": {
                      "runAfter": {
                        "Select_expire_seconds": [
                          "Succeeded"
                        ]
                      },
                      "type": "Wait",
                      "inputs": {
                        "interval": {
                          "count": "@max(body('Select_expire_seconds'))",
                          "unit": "Second"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumActionsApi": {
                    "value": "[[variables('TaniumActionsApi')]"
                  },
                  "TaniumAllComputersUrl": {
                    "value": "[[variables('TaniumAllComputersUrl')]"
                  },
                  "TaniumPackagesByNameUrlFragment": {
                    "value": "[[variables('TaniumPackagesByNameUrlFragment')]"
                  },
                  "TaniumActionResultDataUrlFragment": {
                    "value": "[[variables('TaniumActionResultDataUrlFragment')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId4'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId4')]",
                "contentId": "[variables('_playbookContentId4')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-QuarantineHosts",
            "description": "During an investigation, it may be critical to isolate endpoints quickly if a compromise is detected. It's also important to track quarantine actions for auditing purposes.\nThis playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, then directs Tanium to quarantine those hosts. The status of the quarantine operation is commented on the Microsoft Sentinel incident.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Remediation"
            ],
            "lastUpdateTime": "2023-12-08T00:00:00Z",
            "parameterTemplateVersion": "2.0.1",
            "releaseNotes": {
              "version": "2.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId4')]",
        "contentKind": "Playbook",
        "displayName": "Tanium-QuarantineHosts",
        "contentProductId": "[variables('_playbookcontentProductId4')]",
        "id": "[variables('_playbookcontentProductId4')]",
        "version": "[variables('playbookVersion4')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Tanium-ResolveThreatResponseAlert Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion5')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-ResolveThreatResponseAlert",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "",
              "type": "string",
              "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
              }
            },
            "IntegrationAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Tanium-ResolveThreatResponseAlert",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Check_API_Gateway_response": {
                      "actions": {
                        "Comment_success": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p><span style=\"font-size: 16px\"><strong>Resolved Tanium Threat Response Alert</strong></span></p><p><span style=\"font-size: 12px\">\nThreat Response alert </span><span style=\"font-size: 12px\">@{body('Extract_Threat_Response_Alert_GUID')}</span><span style=\"font-size: 12px\"> is now resolved</span></p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "Resolve_Threat_Response_Alert_using_Tanium_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Comment_failure": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": {
                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                "message": "<p><span style=\"font-size: 16px\"><strong>Failed to resolve Tanium Threat Response Alert</strong></span></p><p>Threat Response alert @{body('Extract_Threat_Response_Alert_GUID')['body']} failed to resolve<br>\nError: @{body('Resolve_Threat_Response_Alert_using_Tanium_API_Gateway')?['errors']?[0]['message']}</p>"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/Incidents/Comment"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Resolve_Threat_Response_Alert_using_Tanium_API_Gateway')?['errors']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Extract_Threat_Response_Alert_GUID": {
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var sentinel = workflowContext.trigger.outputs.body;\r\n\r\nreturn JSON.parse(sentinel.object.properties.relatedEntities.find(function(e) {\r\n\treturn e.kind === 'Url';\r\n}).properties.url.replace(/\\\\/g, '')).alert_guid;"
                      }
                    },
                    "Initialize_API_Gateway_mutation": {
                      "runAfter": {
                        "Extract_Threat_Response_Alert_GUID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway mutation",
                            "type": "string",
                            "value": "mutation($threatResponseAlert: ThreatResponseAlertRef!) {\n  threatResponseAlertResolve(ref: $threatResponseAlert) {\n    error {\n      message\n      retryable\n      timedOut\n    }\n    guid\n    resolved\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_mutation_variables": {
                      "runAfter": {
                        "Initialize_API_Gateway_mutation": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway mutation variables",
                            "type": "object",
                            "value": {
                              "threatResponseAlert": {
                                "guid": "@body('Extract_Threat_Response_Alert_GUID')"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Resolve_Threat_Response_Alert_using_Tanium_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_mutation_variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway mutation')",
                          "variables": "@json(variables('api gateway mutation variables'))"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId5'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId5')]",
                "contentId": "[variables('_playbookContentId5')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-ResolveThreatResponseAlert",
            "description": "Maintaining alert hygiene in multiple consoles can be overwhelming. This playbook helps teams keep Tanium Threat Response up-to-date when using Microsoft Sentinel to centrally manage alerts.\nThis playbook will resolve any Tanium Threat Response alerts associated with a Microsoft Sentinel incident.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents created from Tanium Threat Response alerts by the analytics rules shipped by the Tanium solution for Microsoft Sentinel",
              "2. A [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
              "3. Tanium Threat Response installed and operational in your Tanium environment."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Remediation"
            ],
            "lastUpdateTime": "2022-09-15T00:00:00Z",
            "parameterTemplateVersion": "2.0.1",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId5')]",
        "contentKind": "Playbook",
        "displayName": "Tanium-ResolveThreatResponseAlert",
        "contentProductId": "[variables('_playbookcontentProductId5')]",
        "id": "[variables('_playbookcontentProductId5')]",
        "version": "[variables('playbookVersion5')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName6')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Tanium-SCCMClientHealth Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion6')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-SCCMClientHealth",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "",
              "type": "string",
              "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
              }
            },
            "IntegrationAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Tanium-SCCMClientHealth",
                "hidden-SentinelTemplateVersion": "2.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{body('Create_HTML_table')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Create_HTML_table": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Get_Hosts_From_Incident": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Get_Hosts_From_Incident')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tlet flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "Build_Endpoint_Filter_from_Hosts": {
                      "inputs": {
                        "code": "var hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nvar filters=[];for(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,t=hosts[i].additionalData,e=null!=t,s=t&&null!==t.LastIpAddress&&void 0!==t.LastIpAddress,l=t&&null!==t.FQDN&&void 0!==t.FQDN&&t.FQDN.includes(\".\");if(null!=a&&\"\"!==a){if(l&&s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1}]});continue}if(l){filters.push({any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1});continue}if(s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{path:\"name\",value:hosts[i].hostName}]});continue}filters.push({filters:[{path:\"name\",value:hosts[i].hostName}]})}}\r\nreturn filters;"
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode"
                    },
                    "Set_Endpoint_Filter": {
                      "inputs": {
                        "name": "endpoint filters",
                        "value": "@body('Build_Endpoint_Filter_from_Hosts')"
                      },
                      "runAfter": {
                        "Build_Endpoint_Filter_from_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(source: $source, first: 10, after: $endCursor, filter: $incidentHosts) {\n    edges {\n      node {\n        name\n        ipAddress\n        sensorReadings(sensors: [{name: \"SCCM Client Health\"}]) {\n          columns {\n            sensor {\n              name\n            }\n            name\n            values\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n"
                          }
                        ]
                      },
                      "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Stop_If_Tanium_Has_No_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filter": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Stop_If_Tanium_Has_No_Hosts_From_Incident": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_3": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No data found in Tanium for hosts.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_no_hosts_in_Tanium": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_3": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "Set_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object",
                            "value": {
                              "tds": {
                                "allNamespaces": false
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@json(variables('api gateway query variables'))"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                },
                                                "hasPreviousPage": {
                                                  "type": "boolean"
                                                },
                                                "startCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        },
                                        "hasPreviousPage": {
                                          "type": "boolean"
                                        },
                                        "startCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@json(variables('api gateway query variables'))"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@json(variables('api gateway query variables'))"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId6'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId6')]",
                "contentId": "[variables('_playbookContentId6')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion6')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-SCCMClientHealth",
            "description": "Tanium's real-time data can speed up investigations by providing important context for analysts, such as pulling back Microsoft Configuration Manager (formerly SCCM) Health.\nThis playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for the SCCM Client Health for those hosts, and then adds a comment to the incident with that information.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2023-12-07T00:00:00Z",
            "parameterTemplateVersion": "2.0.1",
            "releaseNotes": {
              "version": "2.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId6')]",
        "contentKind": "Playbook",
        "displayName": "Tanium-SCCMClientHealth",
        "contentProductId": "[variables('_playbookcontentProductId6')]",
        "id": "[variables('_playbookcontentProductId6')]",
        "version": "[variables('playbookVersion6')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName7')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Tanium-UnquarantineHosts Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion7')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-UnquarantineHosts",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "",
              "type": "string",
              "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
              }
            },
            "IntegrationAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumActionsApi": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/actions')]",
            "TaniumAllComputersUrl": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/groups/by-name/All%20Computers')]",
            "TaniumPackagesByNameUrlFragment": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/packages/by-name/')]",
            "TaniumActionResultDataUrlFragment": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/api/v2/result_data/action/')]",
            "TaniumApiGatewayApi": "[[uri(concat('https://', parameters('TaniumServerHostname')), '/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Tanium-UnquarantineHosts",
                "hidden-SentinelTemplateVersion": "2.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumActionsApi": {
                      "type": "String"
                    },
                    "TaniumAllComputersUrl": {
                      "type": "String"
                    },
                    "TaniumPackagesByNameUrlFragment": {
                      "type": "String"
                    },
                    "TaniumActionResultDataUrlFragment": {
                      "type": "String"
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)_2": {
                      "runAfter": {
                        "Create_HTML_table_of_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>ISSUED TANIUM ACTIONS<br>\n@{body('Create_HTML_table_of_issued_actions')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Add_comment_to_incident_-_hosts_that_will_be_targeted": {
                      "runAfter": {
                        "Create_HTML_table_of_matched_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>Preparing to issue quarantine actions targeting these endpoints associated with this incident<br>\n@{body('Create_HTML_table_of_matched_endpoints')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Check_issued_actions": {
                      "actions": {
                        "Terminate_-_no_actions_were_successfully_issued": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Unable to issue actions"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "If_Linux_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(variables('issued actions'))",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Collect_action_results_for_each_issued_action": {
                      "foreach": "@variables('issued actions')",
                      "actions": {
                        "Get_action_result": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumActionResultDataUrlFragment'), items('Collect_action_results_for_each_issued_action')?['id'])}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "If_action_result_could_be_determined": {
                          "actions": {
                            "For_each_action_result_set": {
                              "foreach": "@body('Parse_action_result')",
                              "actions": {
                                "Append_to_action_results": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "action results",
                                    "value": "@item()"
                                  }
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "Parse_action_result": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_to_unknown_action_results": {
                                "runAfter": {
                                  "Compose_unknown_action_result": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "unknown action results",
                                  "value": "@outputs('Compose_unknown_action_result')"
                                }
                              },
                              "Compose_unknown_action_result": {
                                "type": "Compose",
                                "inputs": {
                                  "action id": "@item()?['id']",
                                  "status": "Completed with unknown result"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(outputs('Parse_action_result')['body'])",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_action_result": {
                          "runAfter": {
                            "Parse_current_issued_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "JavaScriptCode",
                          "inputs": {
                            "code": "var action_results = workflowContext.actions.Get_action_result.outputs.body.data;\r\nvar action_id = workflowContext.actions.Parse_current_issued_action.outputs.body.id;\r\nvar columns = action_results.result_sets[0].columns.map(c => c.name);\r\nvar robjects = [];\r\n\r\naction_results.result_sets.forEach(function(rs) {\r\n\trs.rows.forEach(function(row) {\r\n\t\tlet robject = {'action id': action_id};\r\n\t\tcolumns.forEach(function(c, i) {\r\n\t\t\trobject[c] = row.data[i][0].text;\r\n\t\t});\r\n\t\trobjects.push(robject);\r\n\t});\r\n});\r\n\r\nreturn robjects;"
                          }
                        },
                        "Parse_current_issued_action": {
                          "runAfter": {
                            "Get_action_result": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('Collect_action_results_for_each_issued_action')",
                            "schema": {
                              "properties": {
                                "action_group": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "approver": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "comment": {
                                  "type": "string"
                                },
                                "creation_time": {
                                  "type": "string"
                                },
                                "distribute_seconds": {
                                  "type": "integer"
                                },
                                "expiration_time": {
                                  "type": "string"
                                },
                                "expire_seconds": {
                                  "type": "integer"
                                },
                                "history_saved_question": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "id": {
                                  "type": "integer"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "package_spec": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "saved_action": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "skip_lock_flag": {
                                  "type": "boolean"
                                },
                                "start_time": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "stopped_flag": {
                                  "type": "boolean"
                                },
                                "target_group": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "user": {
                                  "properties": {
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "domain": {
                                      "type": "string"
                                    },
                                    "effective_group_id": {
                                      "type": "integer"
                                    },
                                    "external_flag": {
                                      "type": "integer"
                                    },
                                    "group_id": {
                                      "type": "integer"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_login": {
                                      "type": "string"
                                    },
                                    "locked_out": {
                                      "type": "integer"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "previous_login": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Create_HTML_table_of_action_results": {
                      "runAfter": {
                        "Collect_action_results_for_each_issued_action": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@variables('action results')"
                      }
                    },
                    "Create_HTML_table_of_issued_actions": {
                      "runAfter": {
                        "Check_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "columns": [
                          {
                            "header": "action id",
                            "value": "@item()?['id']"
                          },
                          {
                            "header": "name",
                            "value": "@item()?['name']"
                          },
                          {
                            "header": "status",
                            "value": "@item()?['status']"
                          }
                        ],
                        "format": "HTML",
                        "from": "@variables('issued actions')"
                      }
                    },
                    "Create_HTML_table_of_matched_endpoints": {
                      "runAfter": {
                        "Flatten_API_Gateway_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@body('Flatten_API_Gateway_endpoints')"
                      }
                    },
                    "Create_HTML_table_of_unknown_action_results": {
                      "runAfter": {
                        "Create_HTML_table_of_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "format": "HTML",
                        "from": "@variables('unknown action results')"
                      }
                    },
                    "Get_Hosts_From_Incident": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Get_Hosts_From_Incident')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flatten_API_Gateway_endpoints": {
                      "runAfter": {
                        "Parse_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode",
                      "inputs": {
                        "code": "var e = workflowContext.actions.Parse_endpoints_array.outputs.body;\r\n\r\nfunction sensorReadings(r) {\r\n\treturn r.columns.map(c => {\r\n\t\tif (c.sensor && c.sensor.name) {\r\n\t\t\treturn { name: [c.sensor.name, c.name].join(' - '), value: c.values.join(' ') };\r\n\t\t} else {\r\n\t\t\treturn { name: c.name, value: c.values.join(' ') };\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction flatten(obj, pk = '') {\r\n\tif (pk !== '') pk += ' ';\r\n\tlet flat = {};\r\n\tObject.keys(obj).forEach((key) => {\r\n\t\tif (key === 'sensorReadings') {\r\n\t\t\tsensorReadings(obj[key]).forEach((r) => {\r\n\t\t\t\tflat[r.name] = r.value;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (typeof obj[key] === 'object' && obj[key] !== null) {\r\n\t\t\t\tObject.assign(flat, flatten(obj[key], pk + key));\r\n\t\t\t} else {\r\n\t\t\t\tflat[pk + key] = obj[key];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn flat;\r\n}\r\n\r\nreturn e.map(function(e) { return flatten(e.node); });"
                      }
                    },
                    "For_each_endpoint": {
                      "foreach": "@variables('endpoints')",
                      "actions": {
                        "Compose_endpoint_filter_for_packages": {
                          "runAfter": {
                            "Parse_endpoint_JSON_data": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": true,
                            "filters": [
                              {
                                "operator": "Equal",
                                "sensor": {
                                  "name": "Computer Name"
                                },
                                "value": "@body('Parse_endpoint_JSON_data')?['node']?['name']"
                              },
                              {
                                "operator": "RegexMatch",
                                "sensor": {
                                  "name": "IP Address"
                                },
                                "value": "@body('Parse_endpoint_JSON_data')?['node']?['ipAddress']"
                              }
                            ]
                          }
                        },
                        "Parse_endpoint_JSON_data": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_endpoint')",
                            "schema": {
                              "properties": {
                                "node": {
                                  "properties": {
                                    "ipAddress": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "os": {
                                      "properties": {
                                        "platform": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Switch": {
                          "runAfter": {
                            "Compose_endpoint_filter_for_packages": [
                              "Succeeded"
                            ]
                          },
                          "cases": {
                            "Linux": {
                              "case": "Linux",
                              "actions": {
                                "Append_to_Linux_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "linux endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            },
                            "Mac": {
                              "case": "Mac",
                              "actions": {
                                "Append_to_macOS_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "macos endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            },
                            "Windows": {
                              "case": "Windows",
                              "actions": {
                                "Append_to_Windows_endpoint_filters": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "windows endpoint filters",
                                    "value": "@outputs('Compose_endpoint_filter_for_packages')"
                                  }
                                }
                              }
                            }
                          },
                          "expression": "@body('Parse_endpoint_JSON_data')?['node']?['os']?['platform']",
                          "type": "Switch"
                        }
                      },
                      "runAfter": {
                        "Initialize_all_computers_id": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Build_Endpoint_Filter_from_Hosts": {
                      "inputs": {
                        "code": "var hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nvar filters=[];for(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,t=hosts[i].additionalData,e=null!=t,s=t&&null!==t.LastIpAddress&&void 0!==t.LastIpAddress,l=t&&null!==t.FQDN&&void 0!==t.FQDN&&t.FQDN.includes(\".\");if(null!=a&&\"\"!==a){if(l&&s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1}]});continue}if(l){filters.push({any:!0,filters:[{path:\"name\",value:hosts[i].hostName},{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1});continue}if(s){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},{path:\"name\",value:hosts[i].hostName}]});continue}filters.push({filters:[{path:\"name\",value:hosts[i].hostName}]})}}\r\nreturn filters;"
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode"
                    },
                    "Set_Endpoint_Filter": {
                      "inputs": {
                        "name": "endpoint filters",
                        "value": "@body('Build_Endpoint_Filter_from_Hosts')"
                      },
                      "runAfter": {
                        "Build_Endpoint_Filter_from_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    },
                    "Get_the_\"All_Computers\"_group": {
                      "runAfter": {
                        "Initialize_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "GET",
                        "uri": "@parameters('TaniumAllComputersUrl')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "If_Linux_endpoints": {
                      "actions": {
                        "Check_Linux_issued_action_result": {
                          "actions": {
                            "Append_Linux_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_Linux_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_Linux_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Issue_Linux_action')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_Linux_action": {
                          "runAfter": {
                            "Compose_Linux_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_Linux_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel: @{variables('linux package name')}",
                            "package_spec": "@outputs('Compose_Linux_action_package_declaration')",
                            "target_group": "@outputs('Compose_Linux_target_group')"
                          }
                        },
                        "Compose_Linux_action_package_declaration": {
                          "runAfter": {
                            "Parse_Linux_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_Linux_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_Linux_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_Linux_target_group": {
                          "runAfter": {
                            "Compose_Linux_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('linux endpoint filters')"
                          }
                        },
                        "Get_Linux_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('linux package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_Linux_action": {
                          "runAfter": {
                            "Compose_Linux_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_Linux_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_Linux_package_json": {
                          "runAfter": {
                            "Get_Linux_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Linux_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "If_macOS_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('linux endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_Windows_endpoints": {
                      "actions": {
                        "Check_Windows_issued_action_result": {
                          "actions": {
                            "Append_Windows_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_Windows_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_Windows_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Issue_Windows_action')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_Windows_action_package_declaration": {
                          "runAfter": {
                            "Parse_Windows_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_Windows_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_Windows_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_Windows_target_group": {
                          "runAfter": {
                            "Compose_Windows_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('windows endpoint filters')"
                          }
                        },
                        "Compose_windows_action": {
                          "runAfter": {
                            "Compose_Windows_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_Windows_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel: @{variables('windows package name')}",
                            "package_spec": "@outputs('Compose_Windows_action_package_declaration')",
                            "target_group": "@outputs('Compose_Windows_target_group')"
                          }
                        },
                        "Get_Windows_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('windows package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_Windows_action": {
                          "runAfter": {
                            "Compose_windows_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_windows_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_Windows_package_json": {
                          "runAfter": {
                            "Get_Windows_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_Windows_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_endpoint": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('windows endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_action_results": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_-_action_results": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_action_results')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "If_action_results_and_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Add_comment_to_incident_(V3)_-_unknown_action_results": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": {
                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_unknown_action_results')}</p>"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/Incidents/Comment"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('action results'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_action_results_and_unknown_action_results": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_-_known_and_unknown_action_results": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>QUARANTINE ACTION RESULTS<br>\n@{body('Create_HTML_table_of_action_results')}<br>\n<br>\n@{body('Create_HTML_table_of_unknown_action_results')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_2": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_-_known_and_unknown_action_results": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Create_HTML_table_of_unknown_action_results": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('action results'))",
                              0
                            ]
                          },
                          {
                            "greater": [
                              "@length(variables('unknown action results'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_macOS_endpoints": {
                      "actions": {
                        "Check_macOS_issued_action_result": {
                          "actions": {
                            "Append_macOS_issued_action_result_to_issued_actions": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "issued actions",
                                "value": "@body('Issue_macOS_action')?['data']"
                              }
                            }
                          },
                          "runAfter": {
                            "Issue_macOS_action": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Issue_macOS_action')",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Compose_macOS_action": {
                          "runAfter": {
                            "Compose_macOS_target_group": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "action_group": {
                              "id": "@variables('all computers id')"
                            },
                            "distribute_seconds": 0,
                            "expire_seconds": "@body('Parse_macOS_package_json')?['data']?['expire_seconds']",
                            "name": "Apply from Microsoft Sentinel @{variables('macos package name')}",
                            "package_spec": "@outputs('Compose_macOS_action_package_declaration')",
                            "target_group": "@outputs('Compose_macOS_target_group')"
                          }
                        },
                        "Compose_macOS_action_package_declaration": {
                          "runAfter": {
                            "Parse_macOS_package_json": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "expire_seconds": "@body('Parse_macOS_package_json')?['data']?['expire_seconds']",
                            "parameters": "@variables('package parameters')",
                            "source_id": "@body('Parse_macOS_package_json')?['data']?['id']"
                          }
                        },
                        "Compose_macOS_target_group": {
                          "runAfter": {
                            "Compose_macOS_action_package_declaration": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {
                            "and_flag": false,
                            "sub_groups": "@variables('macos endpoint filters')"
                          }
                        },
                        "Get_macOS_package": {
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "GET",
                            "uri": "@{concat(parameters('TaniumPackagesByNameUrlFragment'), join(split(variables('macos package name'), ' '), '%20'))}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Issue_macOS_action": {
                          "runAfter": {
                            "Compose_macOS_action": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@outputs('Compose_macOS_action')",
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumActionsApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Parse_macOS_package_json": {
                          "runAfter": {
                            "Get_macOS_package": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_macOS_package')",
                            "schema": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "available_time": {
                                      "type": "string"
                                    },
                                    "command": {
                                      "type": "string"
                                    },
                                    "command_timeout": {
                                      "type": "integer"
                                    },
                                    "content_set": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "creation_time": {
                                      "type": "string"
                                    },
                                    "deleted_flag": {
                                      "type": "boolean"
                                    },
                                    "display_name": {
                                      "type": "string"
                                    },
                                    "expire_seconds": {
                                      "type": "integer"
                                    },
                                    "hidden_flag": {
                                      "type": "boolean"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "last_modified_by": {
                                      "type": "string"
                                    },
                                    "last_update": {
                                      "type": "string"
                                    },
                                    "mod_user": {
                                      "properties": {
                                        "display_name": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "modification_time": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameter_definition": {
                                      "type": "string"
                                    },
                                    "process_group_flag": {
                                      "type": "boolean"
                                    },
                                    "skip_lock_flag": {
                                      "type": "boolean"
                                    },
                                    "source_hash": {
                                      "type": "string"
                                    },
                                    "source_id": {
                                      "type": "integer"
                                    },
                                    "verify_expire_seconds": {
                                      "type": "integer"
                                    },
                                    "verify_group": {
                                      "properties": {
                                        "id": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "verify_group_id": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "If_Windows_endpoints": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('macos endpoint filters'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Initialize_package_parameters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($incidentHosts: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource) {\n  endpoints(\n    source: $source\n    first: 10\n    after: $endCursor\n    filter: $incidentHosts\n  ) {\n    edges {\n      node {\n        name\n        ipAddress\n        os { platform }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TDS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Query_API_Gateway": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Stop_If_Tanium_Has_No_Hosts_From_Incident": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_3": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No data found in Tanium for hosts.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_no_hosts_in_Tanium": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_3": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Stop_If_Tanium_Has_No_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_Endpoint_Filter": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Linux_endpoint_filters": {
                      "runAfter": {
                        "Initialize_Windows_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "linux endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Linux_package_name": {
                      "runAfter": {
                        "Initialize_MacOS_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "linux package name",
                            "type": "string",
                            "value": "Remove Linux IPTables Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_MacOS_package_name": {
                      "runAfter": {
                        "Initialize_Windows_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "macos package name",
                            "type": "string",
                            "value": "Remove Mac PF Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TDS": {
                      "runAfter": {
                        "Set_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Windows_endpoint_filters": {
                      "runAfter": {
                        "Add_comment_to_incident_-_hosts_that_will_be_targeted": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "windows endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Windows_package_name": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "windows package name",
                            "type": "string",
                            "value": "Remove Windows IPsec Quarantine"
                          }
                        ]
                      }
                    },
                    "Initialize_action_results": {
                      "runAfter": {
                        "Wait_for_the_max_expire_seconds_from_the_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "action results",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_all_computers_id": {
                      "runAfter": {
                        "Get_the_\"All_Computers\"_group": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "all computers id",
                            "type": "string",
                            "value": "@{body('Get_the_\"All_Computers\"_group')?['data']?['id']}"
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Initialize_issued_actions": {
                      "runAfter": {
                        "Initialize_macOS_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "issued actions",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_macOS_endpoint_filters": {
                      "runAfter": {
                        "Initialize_Linux_endpoint_filters": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "macos endpoint filters",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_package_parameters": {
                      "runAfter": {
                        "Initialize_Linux_package_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "package parameters",
                            "type": "array"
                          }
                        ]
                      },
                      "description": "The un-quarantine packages have no parameters"
                    },
                    "Initialize_unknown_action_results": {
                      "runAfter": {
                        "Initialize_issued_actions": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "unknown action results",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until_there_are_no_more_pages_in_the_API_gateway_response": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@json(variables('api gateway query variables'))"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": "string"
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Switch_to_TS_from_TDS_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": "string"
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "errors": {
                              "items": {
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "message"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_endpoints_array": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('endpoints')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "description": "We need an action's output to use in the JavaScript code since it can't read from a variable"
                    },
                    "Query_API_Gateway": {
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('api gateway query')",
                          "variables": "@json(variables('api gateway query variables'))"
                        },
                        "headers": {
                          "Content-Type": "application/json",
                          "session": "@parameters('TaniumApiToken')"
                        },
                        "method": "POST",
                        "uri": "@parameters('TaniumApiGatewayApi')"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Select_expire_seconds": {
                      "runAfter": {
                        "Add_comment_to_incident_(V3)_2": [
                          "Succeeded"
                        ]
                      },
                      "type": "Select",
                      "inputs": {
                        "from": "@variables('issued actions')",
                        "select": "@int(item()?['expire_seconds'])"
                      }
                    },
                    "Switch_to_TS_from_TDS_if_needed": {
                      "actions": {
                        "Requery_the_API_Gateway": {
                          "runAfter": {
                            "Update_API_Query_variables_to_get_new_source": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@json(variables('api gateway query variables'))"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        },
                        "Set_Tanium_Endpoint_Source_to_TS": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "tanium endpoint source",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        },
                        "Update_API_Gateway_Response": {
                          "runAfter": {
                            "Requery_the_API_Gateway": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "API Gateway Response",
                            "value": "@body('Requery_the_API_Gateway')"
                          }
                        },
                        "Update_API_Query_variables_to_get_new_source": {
                          "runAfter": {
                            "Set_Tanium_Endpoint_Source_to_TS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "api gateway query variables",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"incidentHosts\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@string(body('Query_API_Gateway'))",
                              "must refer to an existing sensor"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Wait_for_the_max_expire_seconds_from_the_issued_actions": {
                      "runAfter": {
                        "Select_expire_seconds": [
                          "Succeeded"
                        ]
                      },
                      "type": "Wait",
                      "inputs": {
                        "interval": {
                          "count": "@max(body('Select_expire_seconds'))",
                          "unit": "Second"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumActionsApi": {
                    "value": "[[variables('TaniumActionsApi')]"
                  },
                  "TaniumAllComputersUrl": {
                    "value": "[[variables('TaniumAllComputersUrl')]"
                  },
                  "TaniumPackagesByNameUrlFragment": {
                    "value": "[[variables('TaniumPackagesByNameUrlFragment')]"
                  },
                  "TaniumActionResultDataUrlFragment": {
                    "value": "[[variables('TaniumActionResultDataUrlFragment')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId7'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId7')]",
                "contentId": "[variables('_playbookContentId7')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion7')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-UnquarantineHosts",
            "description": "This playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, then directs Tanium to un-quarantine those hosts. The status of the un-quarantine operation is commented on the Microsoft Sentinel incident.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Remediation"
            ],
            "lastUpdateTime": "2023-12-08T00:00:00Z",
            "parameterTemplateVersion": "2.0.1",
            "releaseNotes": {
              "version": "2.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId7')]",
        "contentKind": "Playbook",
        "displayName": "Tanium-UnquarantineHosts",
        "contentProductId": "[variables('_playbookcontentProductId7')]",
        "id": "[variables('_playbookcontentProductId7')]",
        "version": "[variables('playbookVersion7')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName8')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Tanium-SecurityPatches Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion8')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Tanium-SecurityPatches",
              "type": "string"
            },
            "IntegrationAccountName": {
              "defaultValue": "",
              "type": "string",
              "metadata": {
                "description": "The name of an existing Azure Integration Account (required to run inline JavaScript actions)"
              }
            },
            "IntegrationAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group name for the existing Azure Integration Account"
              }
            },
            "TaniumApiToken": {
              "defaultValue": "",
              "type": "securestring",
              "metadata": {
                "description": "The Tanium API Token used for this logic app. The logic app will be restricted to the level of access available to the user who generated the token."
              }
            },
            "TaniumServerHostname": {
              "defaultValue": "hostname",
              "type": "String",
              "metadata": {
                "description": "The hostname for your Tanium server e.g. tanium.example.com"
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "TaniumApiGatewayApi": "[[uri(concat('https://',parameters('TaniumServerHostname')),'/plugin/products/gateway/graphql')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Tanium-ListSecurityPatches",
                "hidden-SentinelTemplateVersion": "2.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "integrationAccount": {
                  "id": "[[resourceId(parameters('integrationAccountResourceGroupName'), 'Microsoft.Logic/integrationAccounts', parameters('integrationAccountName'))]"
                },
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "TaniumApiToken": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The Tanium API Token provides access to the Tanium Server. Access is restricted to the level of access available to the user who generated the token."
                      }
                    },
                    "TaniumApiGatewayApi": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Check_for_successful_results": {
                      "runAfter": {
                        "Initialize_API_Gateway_refresh_cursor": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Until_endpoint_data_is_refreshed": {
                            "actions": {
                              "Refresh_API_Gateway_query": {
                                "runAfter": {
                                  "Update_refresh_cursor_in_query_variables": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "body": {
                                    "query": "@variables('api gateway query')",
                                    "variables": "@json(variables('api gateway query variables'))"
                                  },
                                  "headers": {
                                    "Content-Type": "application/json",
                                    "session": "@parameters('TaniumApiToken')"
                                  },
                                  "method": "POST",
                                  "uri": "@parameters('TaniumApiGatewayApi')"
                                },
                                "runtimeConfiguration": {
                                  "secureData": {
                                    "properties": [
                                      "inputs"
                                    ]
                                  }
                                }
                              },
                              "Set_api_gateway_response_to_refreshed_response": {
                                "runAfter": {
                                  "Set_refresh_cursor": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "API Gateway Response",
                                  "value": "@body('Refresh_API_Gateway_query')"
                                }
                              },
                              "Set_refresh_cursor": {
                                "runAfter": {
                                  "Refresh_API_Gateway_query": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "api gateway refresh cursor",
                                  "value": "@{body('Refresh_API_Gateway_query')?['data']?['endpoints']?['collectionInfo']?['startCursor']}"
                                }
                              },
                              "Update_refresh_cursor_in_query_variables": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "api gateway query variables",
                                  "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"refreshCursor\": \"@{variables('api gateway refresh cursor')}\"\n}"
                                }
                              }
                            },
                            "expression": "@greater(length(body('Refresh_API_Gateway_query')?['data']?['endpoints']?['edges']), 0)",
                            "limit": {
                              "count": 60,
                              "timeout": "PT10M"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(body('Query_API_Gateway')?['data']?['endpoints']?['edges'])",
                              0
                            ]
                          },
                          {
                            "equals": [
                              "@body('Query_API_Gateway')?['data']?['endpoints']?['collectionInfo']?['success']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If",
                      "description": "If we don't then we'll use the refresh cursor until we have endpoint data."
                    },
                    "Get_Hosts_From_Incident": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Exit_early_if_no_hosts_are_found": {
                      "actions": {
                        "Add_no_hosts_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No hosts found for this incident.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Add_no_hosts_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "less": [
                              "@length(body('Get_Hosts_From_Incident')?['Hosts'])",
                              1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_each_endpoint": {
                      "foreach": "@variables('endpoints')",
                      "actions": {
                        "Comment_available_security_patches_to_incident_(V3)": {
                          "runAfter": {
                            "Create_HTML_table_of_available_security_patches": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>Available security patches for @{body('Parse_endpoint_JSON')?['name']}<br>\n<br>\n@{body('Create_HTML_table_of_available_security_patches')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Create_HTML_table_of_available_security_patches": {
                          "runAfter": {
                            "For_each_not_installed_patch": [
                              "Succeeded"
                            ]
                          },
                          "type": "Table",
                          "inputs": {
                            "format": "HTML",
                            "from": "@variables('results')"
                          }
                        },
                        "For_each_not_installed_patch": {
                          "foreach": "@variables('not installed row indexes')",
                          "actions": {
                            "if_security_update": {
                              "actions": {
                                "Append_to_results": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "results",
                                    "value": {
                                      "Available Security Patches": "@variables('patch titles')[items('For_each_not_installed_patch')]"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "or": [
                                  {
                                    "equals": [
                                      "@variables('classifications')[items('For_each_not_installed_patch')]",
                                      "Security Updates"
                                    ]
                                  },
                                  {
                                    "equals": [
                                      "@variables('classifications')[items('For_each_not_installed_patch')]",
                                      "security"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "For_each_sensor_reading_column": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_sensor_reading_column": {
                          "foreach": "@body('Parse_endpoint_JSON')?['sensorReadings']?['columns']",
                          "actions": {
                            "if_column_is_from_patch_list_applicability": {
                              "actions": {
                                "Switch_on_sensor_column": {
                                  "cases": {
                                    "Case_Classification": {
                                      "case": "Classification",
                                      "actions": {
                                        "Set_classifications": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "classifications",
                                            "value": "@items('For_each_sensor_reading_column')?['values']"
                                          }
                                        }
                                      }
                                    },
                                    "Case_Install_Status": {
                                      "case": "Install Status",
                                      "actions": {
                                        "For_each_install_status_row": {
                                          "foreach": "@items('For_each_sensor_reading_column')?['values']",
                                          "actions": {
                                            "If_install_status_is_Not_Installed": {
                                              "actions": {
                                                "Append_to_not_installed_column_indexes": {
                                                  "type": "AppendToArrayVariable",
                                                  "inputs": {
                                                    "name": "not installed row indexes",
                                                    "value": "@variables('column index')"
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@items('For_each_install_status_row')",
                                                      "Not Installed"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "Increment_column_index": {
                                              "runAfter": {
                                                "If_install_status_is_Not_Installed": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "IncrementVariable",
                                              "inputs": {
                                                "name": "column index",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "type": "Foreach"
                                        }
                                      }
                                    },
                                    "Case_Tanium_UID": {
                                      "case": "Tanium UID",
                                      "actions": {
                                        "Set_tanium_patch_ids": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "tanium patch ids",
                                            "value": "@items('For_each_sensor_reading_column')?['values']"
                                          }
                                        }
                                      }
                                    },
                                    "Case_Title": {
                                      "case": "Title",
                                      "actions": {
                                        "Set_patch_titles": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "patch titles",
                                            "value": "@items('For_each_sensor_reading_column')?['values']"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "expression": "@items('For_each_sensor_reading_column')?['name']",
                                  "type": "Switch"
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@items('For_each_sensor_reading_column')?['sensor']?['name']",
                                      "Patch - Patch List Applicability"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Parse_endpoint_JSON": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Parse_endpoint_JSON": {
                          "runAfter": {
                            "Set_not_installed_row_indexes_to_empty_list": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@variables('endpoint')",
                            "schema": {
                              "properties": {
                                "ipAddress": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "os": {
                                  "properties": {
                                    "platform": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "sensorReadings": {
                                  "properties": {
                                    "columns": {
                                      "items": {
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "sensor": {
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "values": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "sensor",
                                          "name",
                                          "values"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Set_column_index_to_0": {
                          "runAfter": {
                            "Set_endpoint": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "column index",
                            "value": 0
                          }
                        },
                        "Set_endpoint": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "endpoint",
                            "value": "@items('For_each_endpoint')?['node']"
                          }
                        },
                        "Set_not_installed_row_indexes_to_empty_list": {
                          "runAfter": {
                            "Set_column_index_to_0": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "not installed row indexes",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_result_row_indexes": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Build_Endpoint_Filter_from_Hosts_With_FQDN": {
                      "inputs": {
                        "code": "var hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nvar filters=[];for(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,t=hosts[i].additionalData,e=null!=t,l=e&&null!==t.LastIpAddress&&void 0!==t.LastIpAddress,n=e&&null!==t.FQDN&&void 0!==t.FQDN&&t.FQDN.includes(\".\");if(null!=a&&\"\"!==a){var s={path:\"name\",value:a},d={sensor:{column:\"Install Status\",name:\"Patch - Patch List Applicability\",params:[{name:\"bin\",value:\"0\"},{name:\"binCount\",value:\"1\"}]},value:\"Not Installed\"};if(n&&l){filters.push({filters:[{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress},d,{any:!0,filters:[s,{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1}]});continue}if(n&&!l){filters.push({any:!0,filters:[s,d,{path:\"name\",value:hosts[i].additionalData.FQDN.trim()}],negated:!1});continue}}}\r\nreturn filters; "
                      },
                      "runAfter": {
                        "Initialize_Endpoint_Filter": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode"
                    },
                    "Build_Endpoint_Filter_from_Hosts_Without_FQDN": {
                      "inputs": {
                        "code": "var filters = workflowContext.actions.Parse_Endpoint_Filter_so_next_code_block_can_access.outputs.body;\r\nvar hosts = workflowContext.actions.Get_Hosts_From_Incident.outputs.body.Hosts;\r\nfor(let i=0;i<hosts.length;i++){var a=hosts[i].hostName,l=hosts[i].additionalData,t=null!=l,s=t&&null!==l.LastIpAddress&&void 0!==l.LastIpAddress,e=t&&null!==l.FQDN&&void 0!==l.FQDN&&l.FQDN.includes(\".\");if(null!=a&&\"\"!==a){var n={path:\"name\",value:a},d={sensor:{column:\"Install Status\",name:\"Patch - Patch List Applicability\",params:[{name:\"bin\",value:\"0\"},{name:\"binCount\",value:\"1\"}]},value:\"Not Installed\"};if(s&&!e){filters.push({filters:[n,d,{op:\"CONTAINS\",path:\"ipAddress\",value:hosts[i].additionalData.LastIpAddress}]});continue}e||s||filters.push({filters:[n,d,]})}}\r\nreturn filters;"
                      },
                      "runAfter": {
                        "Parse_Endpoint_Filter_so_next_code_block_can_access": [
                          "Succeeded"
                        ]
                      },
                      "type": "JavaScriptCode"
                    },
                    "Initialize_Endpoint_Filter": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint filters",
                            "type": "array"
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "Parse_Endpoint_Filter_so_next_code_block_can_access": {
                      "inputs": {
                        "content": "@variables('endpoint filters')",
                        "schema": {
                          "type": "array"
                        }
                      },
                      "runAfter": {
                        "Set_Endpoint_Filter_if_Needed_from_Hosts_with_FQDN": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson"
                    },
                    "Set_Endpoint_Filter_if_Needed_from_Hosts_with_FQDN": {
                      "actions": {
                        "Set_Endpoint_filters_from_Hosts_with_FQDN": {
                          "inputs": {
                            "name": "endpoint filters",
                            "value": "@body('Build_Endpoint_Filter_from_Hosts_With_FQDN')"
                          },
                          "type": "SetVariable"
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@length(outputs('Build_Endpoint_Filter_from_Hosts_With_FQDN')['body'])",
                                0
                              ]
                            }
                          }
                        ]
                      },
                      "runAfter": {
                        "Build_Endpoint_Filter_from_Hosts_With_FQDN": [
                          "Succeeded"
                        ]
                      },
                      "type": "If"
                    },
                    "Set_Endpoint_Filter_if_needed_from_Hosts_without_FQDN": {
                      "actions": {
                        "Set_Endpoint_Filters_from_Hosts_Without_FQDN": {
                          "inputs": {
                            "name": "endpoint filters",
                            "value": "@body('Build_Endpoint_Filter_from_Hosts_Without_FQDN')"
                          },
                          "type": "SetVariable"
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@length(outputs('Build_Endpoint_Filter_from_Hosts_Without_FQDN')['body'])",
                                0
                              ]
                            }
                          }
                        ]
                      },
                      "runAfter": {
                        "Build_Endpoint_Filter_from_Hosts_Without_FQDN": [
                          "Succeeded"
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Gateway_Query": {
                      "runAfter": {
                        "Exit_early_if_no_hosts_are_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query",
                            "type": "string",
                            "value": "query ($endpointsFilter: EndpointFieldFilter, $endCursor: Cursor, $source: EndpointSource, $refreshCursor: Cursor) {\n  endpoints(source: $source, first: 10, after: $endCursor, filter: $endpointsFilter, refresh: $refreshCursor) {\n    edges {\n      node {\n        name\n        ipAddress\n        os { platform }\n        sensorReadings(\n          sensors: [\n            {\n              name: \"Patch - Patch List Applicability\",\n              params: [{name: \"bin\", value: \"0\"}, {name: \"binCount\", value: \"1\"}],\n            \t\n            }\n          ]\n        ) {\n          columns {\n            sensor {\n              name\n            }\n            name\n            values\n          }\n        }\n      }\n    }\n    collectionInfo {\n      startCursor\n      success\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"
                          }
                        ]
                      },
                      "description": "To check this query against a Tanium Server question use this in the query variables: {\"source\":{\"ts\":{\"stableWaitTime\":10}}}"
                    },
                    "Initialize_API_Gateway_Query_Variables": {
                      "runAfter": {
                        "Initialize_Tanium_Endpoint_Source_to_TS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway query variables",
                            "type": "string",
                            "value": "{\n  \"source\": @{variables('Tanium Endpoint Source')},\n  \"endpointsFilter\": {\n    \"any\": true,\n    \"filters\": @{variables('endpoint filters')}\n  }\n}"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_Response": {
                      "runAfter": {
                        "Until_some_endpoint_data_is_returned": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "API Gateway Response",
                            "type": "object",
                            "value": "@body('Query_API_Gateway')"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_query_cursor": {
                      "runAfter": {
                        "Stop_If_Tanium_Has_No_Hosts_From_Incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                          }
                        ]
                      }
                    },
                    "Initialize_API_Gateway_refresh_cursor": {
                      "runAfter": {
                        "Initialize_API_Gateway_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api gateway refresh cursor",
                            "type": "string",
                            "value": "@{body('Query_API_Gateway')?['data']?['endpoints']?['collectionInfo']?['startCursor']}"
                          }
                        ]
                      }
                    },
                    "Initialize_Tanium_Endpoint_Source_to_TS": {
                      "runAfter": {
                        "Set_Endpoint_Filter_if_needed_from_Hosts_without_FQDN": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium endpoint source",
                            "type": "object",
                            "value": {
                              "ts": {
                                "stableWaitTime": 30
                              }
                            }
                          }
                        ]
                      }
                    },
                    "Initialize_classifications": {
                      "runAfter": {
                        "Initialize_patch_titles": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "classifications",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_column_index": {
                      "runAfter": {
                        "Initialize_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "column index",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Initialize_endpoint": {
                      "runAfter": {
                        "Paginate_API_Gateway_query_if_needed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoint",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_endpoints_array": {
                      "runAfter": {
                        "Initialize_API_Gateway_query_cursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "endpoints",
                            "type": "array",
                            "value": "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['edges']"
                          }
                        ]
                      }
                    },
                    "Initialize_not_installed_row_indexes": {
                      "runAfter": {
                        "Initialize_column_index": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "not installed row indexes",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_patch_titles": {
                      "runAfter": {
                        "Initialize_not_installed_row_indexes": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "patch titles",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_result_row_indexes": {
                      "runAfter": {
                        "Initialize_tanium_patch_ids": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "result row indexes",
                            "type": "array",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        ]
                      }
                    },
                    "Initialize_results": {
                      "runAfter": {
                        "Initialize_endpoint": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "results",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_tanium_patch_ids": {
                      "runAfter": {
                        "Initialize_classifications": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tanium patch ids",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Paginate_API_Gateway_query_if_needed": {
                      "actions": {
                        "Until_there_are_no_more_pages": {
                          "actions": {
                            "For_each_endpoint_in_paginated_API_Gateway_response": {
                              "foreach": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['edges']",
                              "actions": {
                                "Append_endpoint_to_endpoints": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "endpoints",
                                    "value": "@items('For_each_endpoint_in_paginated_API_Gateway_response')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Update_API_Gateway_query_cursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Paginate_API_Gateway": {
                              "runAfter": {
                                "Update_API_Gateway_query_variables": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "@variables('api gateway query')",
                                  "variables": "@json(variables('api gateway query variables'))"
                                },
                                "headers": {
                                  "Content-Type": "application/json",
                                  "session": "@parameters('TaniumApiToken')"
                                },
                                "method": "POST",
                                "uri": "@parameters('TaniumApiGatewayApi')"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs"
                                  ]
                                }
                              }
                            },
                            "Parse_paginated_API_Gateway_response": {
                              "runAfter": {
                                "Paginate_API_Gateway": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Paginate_API_Gateway')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "endpoints": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "properties": {
                                                  "node": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "node"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "pageInfo": {
                                              "properties": {
                                                "endCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "hasNextPage": {
                                                  "type": "boolean"
                                                },
                                                "hasPreviousPage": {
                                                  "type": "boolean"
                                                },
                                                "startCursor": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Update_API_Gateway_query_cursor": {
                              "runAfter": {
                                "Parse_paginated_API_Gateway_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']"
                              }
                            },
                            "Update_API_Gateway_query_variables": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "api gateway query variables",
                                "value": "{\n  \"source\": @{variables('tanium endpoint source')},\n  \"endCursor\": \"@{variables('cursor')}\"\n}"
                              }
                            }
                          },
                          "expression": "@equals(body('Parse_paginated_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage'], false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Initialize_endpoints_array": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['hasNextPage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Stop_If_Tanium_Has_No_Hosts_From_Incident": {
                      "actions": {
                        "Add_comment_to_incident_(V3)_3": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No data found in Tanium for hosts.</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Terminate_no_hosts_in_Tanium": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)_3": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_API_Gateway_response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_API_Gateway_response')?['data']?['endpoints']?['pageInfo']?['endCursor']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_API_Gateway_response": {
                      "runAfter": {
                        "Check_for_successful_results": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@variables('API Gateway Response')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "endpoints": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "properties": {
                                          "node": {
                                            "properties": {
                                              "ipAddress": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "os": {
                                                "properties": {
                                                  "platform": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "sensorReadings": {
                                                "properties": {
                                                  "columns": {
                                                    "items": {
                                                      "properties": {
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "sensor": {
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "values": {
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "required": [
                                                        "sensor",
                                                        "name",
                                                        "values"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "node"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "pageInfo": {
                                      "properties": {
                                        "endCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "hasNextPage": {
                                          "type": "boolean"
                                        },
                                        "hasPreviousPage": {
                                          "type": "boolean"
                                        },
                                        "startCursor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Until_some_endpoint_data_is_returned": {
                      "actions": {
                        "Query_API_Gateway": {
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "@variables('api gateway query')",
                              "variables": "@json(variables('api gateway query variables'))"
                            },
                            "headers": {
                              "Content-Type": "application/json",
                              "session": "@parameters('TaniumApiToken')"
                            },
                            "method": "POST",
                            "uri": "@parameters('TaniumApiGatewayApi')"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs"
                              ]
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_API_Gateway_Query_Variables": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@not(equals(body('Query_API_Gateway')?['data']?['endpoints'], null))",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "id": "[[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('workspace-location-inline'),'/managedApis/azuresentinel')]"
                      }
                    }
                  },
                  "TaniumApiToken": {
                    "value": "[[parameters('TaniumApiToken')]"
                  },
                  "TaniumApiGatewayApi": {
                    "value": "[[variables('TaniumApiGatewayApi')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId8'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId8')]",
                "contentId": "[variables('_playbookContentId8')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion8')]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Tanium-ListSecurityPatches",
            "description": "Tanium's real-time data can speed up investigations by providing important context for analysts, such as which security patches are missing on the endpoints in question.\nThis playbook starts with a Microsoft Sentinel incident, gets the hosts associated with that incident, queries the Tanium API Gateway for applicable security patches for those endpoints, and then adds a comment to the incident with that information.\n\nSee [Tanium Help](https://help.tanium.com/bundle/ConnectAzureSentinel/page/Integrations/MSFT/ConnectAzureSentinel/Overview.htm) for a guide to setting up the Tanium Connector for Sentinel.",
            "prerequisites": [
              "1. Microsoft Sentinel incidents with associated hosts.",
              "2. A [Tanium API Token](https://help.tanium.com/bundle/ug_console_cloud/page/platform_user/console_api_tokens.html) granting access to your Tanium environment: the query will be made with the user priviledges of that token.",
              "3. Tanium Patch installed and operational in your Tanium environment."
            ],
            "postDeploymentSteps": [
              "1. Ensure the Logic App API connection to Microsoft Sentinel is authenticated."
            ],
            "entities": [
              "host"
            ],
            "tags": [
              "Enrichment"
            ],
            "lastUpdateTime": "2023-12-08T00:00:00Z",
            "parameterTemplateVersion": "2.0.1",
            "releaseNotes": {
              "version": "2.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId8')]",
        "contentKind": "Playbook",
        "displayName": "Tanium-SecurityPatches",
        "contentProductId": "[variables('_playbookcontentProductId8')]",
        "id": "[variables('_playbookcontentProductId8')]",
        "version": "[variables('playbookVersion8')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject1').analyticRuleTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "TaniumThreatResponseAlerts_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject1').analyticRuleVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Alerts from Tanium Threat Response (THR) that can be acted upon by Microsoft Sentinel Playbook",
                "displayName": "Tanium Threat Response Alerts",
                "enabled": false,
                "query": "let cap = (s:string) { strcat(toupper(substring(s,0,1)), substring(s,1))  };\nTaniumThreatResponse_CL\n| extend TaniumUrl = pack(\"computer_name\", Computer_Name_s, \"alert_guid\", Alert_Id_g, \"ip_address\", Computer_IP_s, \"platform\", Match_Details_finding_system_info_platform_s)\n| extend TaniumTHRLabel = strcat(cap(Intel_Type_s),\" - \", cap(Intel_Name_s), \" - \", cap(Match_Details_match_type_s))\n| where Computer_IP_s !contains \"N/A\"\n",
                "queryFrequency": "PT5M",
                "queryPeriod": "PT6M",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Url",
                        "columnName": "TaniumUrl"
                      }
                    ],
                    "entityType": "URL"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "Computer_IP_s"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "Computer_Name_s"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "TaniumTHRLabel"
                      }
                    ],
                    "entityType": "Malware"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject1').analyticRuleId1,'/'))))]",
              "properties": {
                "description": "Tanium Analytics Rule 1",
                "parentId": "[variables('analyticRuleObject1').analyticRuleId1]",
                "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject1').analyticRuleVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "Tanium",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Tanium",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Tanium Inc.",
                  "email": "support@tanium.com",
                  "tier": "Partner",
                  "link": "https://support.tanium.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
        "contentKind": "AnalyticsRule",
        "displayName": "Tanium Threat Response Alerts",
        "contentProductId": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "id": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Tanium",
        "publisherDisplayName": "Tanium Inc.",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Tanium/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://www.tanium.com/\">Tanium</a> solution for Microsoft Sentinel enables you to ingest Tanium Threat Response alerts as Microsoft Sentinel incidents as well as incorporate Tanium's real-time endpoint data.</p>\n<p><strong>Workbooks:</strong> 1, <strong>Analytic Rules:</strong> 1, <strong>Playbooks:</strong> 8</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/Tanium.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Tanium",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Tanium",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Tanium Inc.",
          "email": "support@tanium.com",
          "tier": "Partner",
          "link": "https://support.tanium.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId1')]",
              "version": "[variables('workbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-ComplyFindings')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-GeneralHostInfo')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-MSDefenderHealth')]",
              "version": "[variables('playbookVersion3')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-QuarantineHosts')]",
              "version": "[variables('playbookVersion4')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-ResolveThreatResponseAlert')]",
              "version": "[variables('playbookVersion5')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-SCCMClientHealth')]",
              "version": "[variables('playbookVersion6')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-UnquarantineHosts')]",
              "version": "[variables('playbookVersion7')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Tanium-SecurityPatches')]",
              "version": "[variables('playbookVersion8')]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
            }
          ]
        },
        "firstPublishDate": "2022-05-16",
        "lastPublishDate": "2025-05-19",
        "providers": [
          "Tanium"
        ],
        "categories": {
          "domains": [
            "Security - Network",
            "Security - Threat Protection"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
