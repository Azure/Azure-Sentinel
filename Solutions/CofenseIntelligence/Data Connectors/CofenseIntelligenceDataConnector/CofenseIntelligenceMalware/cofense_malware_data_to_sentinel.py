"""File for driver code of CofenseIntelligenceMalware."""
import inspect
import time
import asyncio
import aiohttp
import json
from datetime import datetime, timezone
from ..SharedCode.sentinel import post_data
from ..SharedCode import consts
from ..SharedCode.logger import applogger
from ..SharedCode.cofense_intelligence_exception import CofenseIntelligenceException
from ..SharedCode.utils import Utils
from ..SharedCode.manage_checkpoints import ManageCheckpoints


class CofenseIntelligenceMalware(Utils, ManageCheckpoints):
    """Get malware data from cofenseintelligence and post in log analytics."""

    def __init__(self) -> None:
        """Initialize instance variable for class."""
        Utils.__init__(self, consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS)
        ManageCheckpoints.__init__(
            self,
            "malware_checkpoint_data",
            consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
        )
        self.validate_params()
        self.proxy = self.create_proxy()

    def malware_proxy(self):
        """To create proxy.

        Raises:
            CofenseIntelligenceException: custom cofense exception

        Returns:
            dict: proxies
        """
        __method_name = inspect.currentframe().f_code.co_name
        try:
            proxy_url = None
            proxy_auth = None
            if consts.IS_PROXY_REQUIRED == "Yes":
                if consts.PROXY_URL and consts.PROXY_PORT:
                    if consts.PROXY_USERNAME and consts.PROXY_PASSWORD:
                        proxy_url = "{}://{}:{}".format(
                            consts.PROXY_REQUEST,
                            consts.PROXY_URL,
                            consts.PROXY_PORT,
                        )
                        proxy_auth = aiohttp.BasicAuth(
                            consts.PROXY_USERNAME, consts.PROXY_PASSWORD
                        )
                        applogger.info(
                            "{}(method={}) : {} : Proxy created successfully and \
                                the integration uses proxy for further execution.".format(
                                consts.LOGS_STARTS_WITH,
                                __method_name,
                                consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                            )
                        )
                    elif consts.PROXY_USERNAME or consts.PROXY_PASSWORD:
                        applogger.error(
                            "{}(method={}) : {} : Proxy username or password is missing.".format(
                                consts.LOGS_STARTS_WITH,
                                __method_name,
                                consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                            )
                        )
                        raise CofenseIntelligenceException()
                    else:
                        proxy_url = "{}://{}:{}".format(
                            consts.PROXY_REQUEST,
                            consts.PROXY_URL,
                            consts.PROXY_PORT,
                        )
                        applogger.info(
                            "{}(method={}) : {} : Proxy created successfully and \
                                the integration uses proxy for further execution.".format(
                                consts.LOGS_STARTS_WITH,
                                __method_name,
                                consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                            )
                        )
                else:
                    applogger.error(
                        "{}(method={}) : {} : Proxy Url or Port is missing.".format(
                            consts.LOGS_STARTS_WITH,
                            __method_name,
                            consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                        )
                    )
                    raise CofenseIntelligenceException()
            else:
                applogger.info(
                    "{}(method={}) : {} : Proxy not required. Execution gets started without using proxy.".format(
                        consts.LOGS_STARTS_WITH,
                        __method_name,
                        consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    )
                )
            return {"proxy_url": proxy_url, "proxy_auth": proxy_auth}
        except CofenseIntelligenceException:
            raise CofenseIntelligenceException()
        except Exception as error:
            applogger.error(
                "{}(method={}) : {} : Error while creating proxy :{}.".format(
                    consts.LOGS_STARTS_WITH,
                    __method_name,
                    consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    error,
                )
            )
            raise CofenseIntelligenceException()

    async def get_malware_data(
        self, threat_id, malware_url, session: aiohttp.ClientSession, proxy_data
    ):
        """Get malware data from cofense and add download urls.

        Args:
            threat_id (str): threat_id
            malware_url (str): get malware data url to fetch the data from cofense
            session (aiohttp.ClientSession): aiohttp session object to make api calls.

        Returns:
            dict: malware data
        """
        __method_name = inspect.currentframe().f_code.co_name
        try:
            final_url = malware_url.format(threat_id=threat_id)
            retry_count_429 = 0
            retry_count_401 = 0
            while retry_count_429 <= 1 and retry_count_401 <= 1:
                response = await session.get(
                    url=final_url,
                    auth=aiohttp.BasicAuth(
                        consts.COFENSE_USERNAME, consts.COFENSE_PASSWORD
                    ),
                    proxy=proxy_data["proxy_url"],
                    proxy_auth=proxy_data["proxy_auth"],
                )
                get_malware_status_code = response.status
                if get_malware_status_code >= 200 and get_malware_status_code <= 299:
                    applogger.info(
                        "{}(method={}) : {} : Fetched malware successfully for :{}.".format(
                            consts.LOGS_STARTS_WITH,
                            __method_name,
                            consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                            threat_id,
                        )
                    )
                    json_response = await response.json()
                    malware_data = json_response.get("data", {})
                    html_report_url = malware_data.get("apiReportURL", "")
                    url = html_report_url.rsplit("/", 1)
                    malware_data[
                        "ReportDownload(HTML)"
                    ] = "https://{}.azurewebsites.net/api/DownloadThreatReports?url={}/html".format(
                        consts.FUNCTION_APP_NAME, url[0]
                    )
                    malware_data[
                        "ReportDownload(PDF)"
                    ] = "https://{}.azurewebsites.net/api/DownloadThreatReports?url={}/pdf".format(
                        consts.FUNCTION_APP_NAME, url[0]
                    )
                    return malware_data
                elif get_malware_status_code == 401:
                    applogger.error(
                        "{}(method={}) : {} : Authentication Error, Status:401, trying again.".format(
                            consts.LOGS_STARTS_WITH,
                            __method_name,
                            consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                        )
                    )

                    retry_count_401 += 1
                elif get_malware_status_code == 429:
                    applogger.error(
                        "{}(method={}) : {} : Rate Limit Error, Status_Code:429,trying again.".format(
                            consts.LOGS_STARTS_WITH,
                            __method_name,
                            consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                        )
                    )
                    retry_count_429 += 1
                    time.sleep(consts.COFENSE_429_SLEEP)
                else:
                    applogger.error(
                        "{}(method={}) : {} : url: {}, Status Code : {}."
                        " while pulling Malware data.".format(
                            consts.LOGS_STARTS_WITH,
                            __method_name,
                            consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                            url,
                            get_malware_status_code,
                        )
                    )
                    raise CofenseIntelligenceException()
            raise CofenseIntelligenceException()
        except CofenseIntelligenceException as cofense_error:
            applogger.error(
                "{}(method={}) : {} : error occured while fetching malware data : {}.".format(
                    consts.LOGS_STARTS_WITH,
                    __method_name,
                    consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    cofense_error,
                )
            )
            raise CofenseIntelligenceException()

        except Exception as error:
            applogger.error(
                "{}(method={}) : {} : error occured while fetching malware data : {}.".format(
                    consts.LOGS_STARTS_WITH,
                    __method_name,
                    consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    error,
                )
            )
            raise CofenseIntelligenceException()

    async def fetch_malware_data_and_ingest_to_log_analytics(self, indicators_data):
        """Create async tasks and fetch the malware data asynchronously.

        Args:
            indicators_data (dict): Indicators data from cofense
        """
        __method_name = inspect.currentframe().f_code.co_name
        try:
            proxy_data = self.malware_proxy()
            get_malware_url = "{}{}".format(
                consts.COFENSE_BASE_URL, consts.ENDPOINTS["get_malware"]
            )
            threat_ids = set()
            for indicator in indicators_data.get("data", {}).get("indicators", []):
                threat_ids.add(indicator.get("threat_id", ""))
            applogger.info(threat_ids)
            tasks = []
            async with aiohttp.ClientSession() as session:
                for threat in threat_ids:
                    tasks.append(
                        asyncio.create_task(
                            self.get_malware_data(
                                threat_id=threat,
                                malware_url=get_malware_url,
                                session=session,
                                proxy_data=proxy_data,
                            )
                        )
                    )
                results = await asyncio.gather(*tasks, return_exceptions=True)
            success_count = 0
            failed_count = 0
            success_malware_data = []
            for i in results:
                if not isinstance(i, CofenseIntelligenceException):
                    success_count += 1
                    success_malware_data.append(i)
                else:
                    failed_count += 1
            applogger.info(
                "{}(method={}) : {} : Total_Invocations: {}, Successful Malware Fetching: {}, \
                    Failed Malware Fetching: {}.".format(
                    consts.LOGS_STARTS_WITH,
                    __method_name,
                    consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    len(results),
                    success_count,
                    failed_count,
                )
            )
            if len(success_malware_data) > 0:
                post_data(
                    body=json.dumps(success_malware_data),
                    log_type=consts.MALWARE_DATA_TABLE_NAME,
                )
                applogger.info(
                    "{}(method={}) : {} : Posted Malware Data to Log Analytics Successfully.".format(
                        consts.LOGS_STARTS_WITH,
                        __method_name,
                        consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    )
                )
            else:
                applogger.info(
                    "{}(method={}) : {} : No Malware Data found.".format(
                        consts.LOGS_STARTS_WITH,
                        __method_name,
                        consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    )
                )

        except CofenseIntelligenceException as error:
            applogger.error(
                "{}(method={}) : {} : error occured : {}.".format(
                    consts.LOGS_STARTS_WITH,
                    __method_name,
                    consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    error,
                )
            )
            raise CofenseIntelligenceException()

    async def fetch_cofense_indicators_and_ingest_malware_data(self):
        """Get Malware Ids from Cofense Indicators, Fetch Malware Data and Post to Sentinel."""
        __method_name = inspect.currentframe().f_code.co_name
        try:
            get_indicator_url = "{}{}".format(
                consts.COFENSE_BASE_URL, consts.ENDPOINTS["search_indicators"]
            )
            params = {"resultsPerPage": consts.COFENSE_PAGE_SIZE}
            checkpoint_since_last_published = self.get_checkpoint_data(
                "malware_sinceLastPublished"
            )
            checkpoint_page = self.get_checkpoint_data("malware_page")
            if checkpoint_since_last_published:
                applogger.info(
                    "{}(method={}) : {} : SincelastPublished Checkpoint found : {}.".format(
                        consts.LOGS_STARTS_WITH,
                        __method_name,
                        consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                        checkpoint_since_last_published,
                    )
                )
                params["sinceLastPublished"] = checkpoint_since_last_published
            else:
                applogger.info(
                    "{}(method={}) : {} : SincelastPublished Checkpoint not found,\
                        Fetching data of last 15 days.".format(
                        consts.LOGS_STARTS_WITH,
                        __method_name,
                        consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    )
                )
                now = datetime.now(timezone.utc)
                midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)
                params["sinceLastPublished"] = (
                    int(midnight.timestamp()) - consts.FIFTEEN_DAYS
                )
                applogger.info(
                    "{}(method={}) : {} : Updating Initial SincelastPublished Checkpoint {}.".format(
                        consts.LOGS_STARTS_WITH,
                        __method_name,
                        consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                        params["sinceLastPublished"],
                    )
                )
                self.post_data_to_checkpoint(
                    "malware_sinceLastPublished", params["sinceLastPublished"]
                )
            if checkpoint_page is not None:
                applogger.info(
                    "{}(method={}) : {} : Page Checkpoint found : {}.".format(
                        consts.LOGS_STARTS_WITH,
                        __method_name,
                        consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                        checkpoint_page,
                    )
                )
                params["page"] = checkpoint_page
            while True:
                indicators_data = self.get_cofense_data(
                    url=get_indicator_url,
                    params=params,
                    endpoint_name="get indicators",
                    proxies=self.proxy,
                )
                applogger.info(
                    "{}(method={}) : {} : Indicators fetched successfully.".format(
                        consts.LOGS_STARTS_WITH,
                        __method_name,
                        consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    )
                )
                if len(indicators_data.get("data", {}).get("indicators", [])) == 0:
                    applogger.info(
                        "{}(method={}) : {} : No indicators found.".format(
                            consts.LOGS_STARTS_WITH,
                            __method_name,
                            consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                        )
                    )
                    break
                await self.fetch_malware_data_and_ingest_to_log_analytics(
                    indicators_data
                )
                next_page = (
                    indicators_data.get("data", {})
                    .get("page", {})
                    .get("currentPage", 0)
                    + 1
                )
                if next_page == indicators_data.get("data", {}).get("page", {}).get(
                    "totalPages", 0
                ):
                    break
                params["page"] = next_page
                applogger.info(
                    "{}(method={}) : {} : Updating page checkpoint : {}.".format(
                        consts.LOGS_STARTS_WITH,
                        __method_name,
                        consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                        next_page,
                    )
                )
                self.post_data_to_checkpoint("malware_page", next_page)
            self.post_data_to_checkpoint("malware_sinceLastPublished", int(time.time()))
            self.post_data_to_checkpoint("malware_page", 0)
            applogger.info(
                "{}(method={}) : {} : Updated page and LastPublished checkpoint Successfully.".format(
                    consts.LOGS_STARTS_WITH,
                    __method_name,
                    consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                )
            )
        except CofenseIntelligenceException:
            raise CofenseIntelligenceException()
        except Exception as error:
            applogger.error(
                "{}(method={}) : {} : error occured : {}.".format(
                    consts.LOGS_STARTS_WITH,
                    __method_name,
                    consts.COFENSE_MALWARE_DATA_TO_LOG_ANALYTICS,
                    error,
                )
            )
            raise CofenseIntelligenceException()
