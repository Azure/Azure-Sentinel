{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "NetApp RPS Enrich IP Playbook",
    "description": "This playbook enriches IP data by calling the updated NetApp RPS enrich IP address API endpoint and asynchronously polls multiple job results.",
    "prerequisites": [
      "1. NetApp RPS Auth Playbook must be deployed first",
      "2. NetApp RPS Async Poll Playbook must be deployed",
      "3. Valid NetApp RPS API credentials configured in the Auth Playbook",
      "4. Caller must provide ip_address parameter"
    ],
    "postDeployment": [
      "1. Ensure the Auth Playbook is working correctly",
      "2. Ensure the Async Poll Playbook is deployed and functional",
      "3. Test the IP enrichment functionality with valid IP address",
      "4. Verify the new POST API endpoint is accessible and returns job information with agent_id"
    ],
    "lastUpdateTime": "2025-09-26T00:00:00.000Z",
    "tags": [
      "NetApp",
      "RPS",
      "Playbook",
      "IP",
      "Enrich",
      "NetworkInterface"
    ],
    "support": {
      "tier": "Community"
    },
    "author": {
      "name": "NetApp"
    }
  },
  "parameters": {
    "PlaybookName": {
      "type": "String",
      "defaultValue": "NetAppRPS-Enrich-IP-Playbook",
      "metadata": {
        "description": "Name of the Logic App/Playbook"
      }
    },
    "NetAppRPSAuthPlaybookName": {
      "type": "String",
      "defaultValue": "NetAppRPS-Auth-Playbook",
      "metadata": {
        "description": "Name of the NetApp RPS authentication playbook"
      }
    },
    "NetAppRPSAsyncPollPlaybookName": {
      "type": "String",
      "defaultValue": "NetAppRPS-Async-Poll-Playbook",
      "metadata": {
        "description": "Name of the NetApp RPS async poll playbook"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[parameters('location')]",
      "metadata": {
        "description": "Location for all resources"
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('PlaybookName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "authPlaybookName": {
              "defaultValue": "[parameters('NetAppRPSAuthPlaybookName')]",
              "type": "String"
            },
            "asyncPollPlaybookName": {
              "defaultValue": "[parameters('NetAppRPSAsyncPollPlaybookName')]",
              "type": "String"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ip_address": {
                      "type": "string"
                    },
                    "callbackData": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "ip_address"
                  ]
                }
              }
            }
          },
          "actions": {
            "Initialize_Variables": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IpAddress",
                    "type": "string",
                    "value": "@triggerBody()?['ip_address']"
                  },
                  {
                    "name": "CallbackData",
                    "type": "object",
                    "value": "@triggerBody()?['callbackData']"
                  },
                  {
                    "name": "AccountId",
                    "type": "string"
                  },
                  {
                    "name": "Token",
                    "type": "string"
                  },
                  {
                    "name": "JobIds",
                    "type": "array"
                  },
                  {
                    "name": "PollingResults",
                    "type": "array"
                  },
                  {
                    "name": "EnrichmentStatusCode",
                    "type": "integer",
                    "value": 0
                  }
                ]
              }
            },
            "Call_Auth_Playbook": {
              "runAfter": {
                "Initialize_Variables": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "method": "POST",
                "uri": "[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAuthPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                "headers": {
                  "Content-Type": "application/json"
                },
                "body": {
                  "caller_info": {
                    "playbook_name": "@workflow().name",
                    "correlation_id": "@workflow().run.name",
                    "request_id": "@guid()"
                  }
                },
                "retryPolicy": {
                  "type": "exponential",
                  "count": 3,
                  "interval": "PT5S",
                  "minimumInterval": "PT5S",
                  "maximumInterval": "PT30S"
                },
                "timeout": "PT30S"
              }
            },
            "Parse_Auth_Response": {
              "runAfter": {
                "Call_Auth_Playbook": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('Call_Auth_Playbook')",
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "account_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "access_token",
                    "account_id"
                  ]
                }
              }
            },
            "Set_Token": {
              "runAfter": {
                "Parse_Auth_Response": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "Token",
                "value": "@body('Parse_Auth_Response')?['access_token']"
              }
            },
            "Set_Account_ID": {
              "runAfter": {
                "Set_Token": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "AccountId",
                "value": "@body('Parse_Auth_Response')?['account_id']"
              }
            },
            "Get_IP_NetworkInterfaces": {
              "runAfter": {
                "Set_Account_ID": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "method": "POST",
                "uri": "https://snapcenter.cloudmanager.cloud.netapp.com/rps/v1/account/@{variables('AccountId')}/enrich/ip-address",
                "headers": {
                  "Authorization": "Bearer @{variables('Token')}",
                  "accept": "application/json",
                  "Content-Type": "application/json"
                },
                "body": {
                  "ip_address": "@{variables('IpAddress')}"
                },
                "retryPolicy": {
                  "type": "exponential",
                  "count": 3,
                  "interval": "PT5S",
                  "minimumInterval": "PT5S",
                  "maximumInterval": "PT30S"
                },
                "timeout": "PT45S"
              }
            },
            "Capture_Enrichment_Status_Code": {
              "runAfter": {
                "Get_IP_NetworkInterfaces": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "EnrichmentStatusCode",
                "value": "@outputs('Get_IP_NetworkInterfaces')['statusCode']"
              }
            },
            "Parse_JobIds_Response": {
              "runAfter": {
                "Capture_Enrichment_Status_Code": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('Get_IP_NetworkInterfaces')",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "job_id": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "source": {
                        "type": "string"
                      },
                      "agent_id": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "Extract_Job_IDs": {
              "runAfter": {
                "Parse_JobIds_Response": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "JobIds",
                "value": "@body('Parse_JobIds_Response')"
              }
            },
            "Poll_All_Jobs": {
              "runAfter": {
                "Extract_Job_IDs": [
                  "Succeeded"
                ]
              },
              "type": "Foreach",
              "foreach": "@variables('JobIds')",
              "actions": {
                "Call_Async_Poll_Playbook": {
                  "runAfter": {},
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAsyncPollPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "body": {
                      "job_id": "@item()?['job_id']",
                      "agent_id": "@item()?['agent_id']",
                      "system_id": "default",
                      "source": "@item()?['source']",
                      "caller_info": {
                        "playbook_name": "@workflow().name",
                        "correlation_id": "@workflow().run.name",
                        "original_ip": "@variables('IpAddress')"
                      }
                    },
                    "retryPolicy": {
                      "type": "exponential",
                      "count": 3,
                      "interval": "PT5S",
                      "minimumInterval": "PT5S",
                      "maximumInterval": "PT30S"
                    },
                    "timeout": "PT90S"
                  }
                },
                "Add_Poll_Result": {
                  "runAfter": {
                    "Call_Async_Poll_Playbook": [
                      "Succeeded"
                    ]
                  },
                  "type": "AppendToArrayVariable",
                  "inputs": {
                    "name": "PollingResults",
                    "value": {
                      "job_id": "@item()?['job_id']",
                      "poll_response": "@body('Call_Async_Poll_Playbook')",
                      "original_job_info": "@item()"
                    }
                  }
                },
                "Add_Failed_Poll_Result": {
                  "runAfter": {
                    "Call_Async_Poll_Playbook": [
                      "Failed",
                      "TimedOut"
                    ]
                  },
                  "type": "AppendToArrayVariable",
                  "inputs": {
                    "name": "PollingResults",
                    "value": {
                      "job_id": "@item()?['job_id']",
                      "poll_response": {
                        "success": false,
                        "error": "Failed to poll job or timeout occurred"
                      },
                      "original_job_info": "@item()"
                    }
                  }
                }
              },
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "Return_Response": {
              "runAfter": {
                "Poll_All_Jobs": [
                  "Succeeded",
                  "Skipped"
                ],
                "Call_Auth_Playbook": [
                  "Failed",
                  "TimedOut"
                ],
                "Get_IP_NetworkInterfaces": [
                  "Failed",
                  "TimedOut"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "statusCode": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 401, if(or(equals(actions('Get_IP_NetworkInterfaces')['status'], 'Failed'), equals(actions('Get_IP_NetworkInterfaces')['status'], 'TimedOut')), 500, if(equals(variables('EnrichmentStatusCode'), 200), 200, if(equals(variables('EnrichmentStatusCode'), 0), 500, variables('EnrichmentStatusCode')))))",
                "headers": {
                  "Content-Type": "application/json"
                },
                "body": {
                  "success": "@and(not(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut'))), not(or(equals(actions('Get_IP_NetworkInterfaces')['status'], 'Failed'), equals(actions('Get_IP_NetworkInterfaces')['status'], 'TimedOut'))), equals(variables('EnrichmentStatusCode'), 200))",
                  "error": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'Authentication failed in auth playbook', if(or(equals(actions('Get_IP_NetworkInterfaces')['status'], 'Failed'), equals(actions('Get_IP_NetworkInterfaces')['status'], 'TimedOut')), 'Failed retrieving IP network interfaces data', null))",
                  "stage": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'auth', if(or(equals(actions('Get_IP_NetworkInterfaces')['status'], 'Failed'), equals(actions('Get_IP_NetworkInterfaces')['status'], 'TimedOut')), 'enrichment', 'success'))",
                  "account_id": "@variables('AccountId')",
                  "ip_address": "@variables('IpAddress')",
                  "enrichment": {
                    "statusCode": "@variables('EnrichmentStatusCode')",
                    "job_ids_count": "@length(variables('JobIds'))",
                    "polling_results_count": "@length(variables('PollingResults'))",
                    "original_jobs": "@variables('JobIds')",
                    "polling_results": "@variables('PollingResults')",
                    "raw_initial_response": "@body('Get_IP_NetworkInterfaces')"
                  },
                  "callbackData": "@variables('CallbackData')",
                  "timestamp": "@utcnow()"
                }
              }
            }
          },
          "outputs": {}
        },
        "parameters": {}
      }
    }
  ],
  "outputs": {
    "PlaybookName": {
      "type": "string",
      "value": "[parameters('PlaybookName')]"
    },
    "PlaybookResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Logic/workflows', parameters('PlaybookName'))]"
    },
    "PlaybookUrl": {
      "type": "string",
      "value": "[concat('https://portal.azure.com/#resource', resourceId('Microsoft.Logic/workflows', parameters('PlaybookName')))]"
    },
    "TriggerUrl": {
      "type": "string",
      "value": "[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('PlaybookName'), '/triggers/manual'), '2019-05-01').value]"
    }
  }
}