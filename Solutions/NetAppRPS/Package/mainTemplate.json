{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "NetApp - support@netapp.com",
    "comments": "Solution template for NetAppRPS"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "support@netapp.com",
    "_email": "[variables('email')]",
    "_solutionName": "NetAppRPS",
    "_solutionVersion": "3.0.0",
    "solutionId": "netapp1234567890.netapp-rps-sentinel-solution",
    "_solutionId": "[variables('solutionId')]",
    "uiConfigId1": "NetAppRPS",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "NetAppRPS",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "_dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "analyticRuleObject1": {
      "analyticRuleVersion1": "1.0.0",
      "_analyticRulecontentId1": "33b9688b-2afb-442f-a3bb-fe2362717bb7",
      "analyticRuleId1": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '33b9688b-2afb-442f-a3bb-fe2362717bb7')]",
      "analyticRuleTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('33b9688b-2afb-442f-a3bb-fe2362717bb7')))]",
      "_analyticRulecontentProductId1": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','33b9688b-2afb-442f-a3bb-fe2362717bb7','-', '1.0.0')))]"
    },
    "analyticRuleObject2": {
      "analyticRuleVersion2": "1.0.0",
      "_analyticRulecontentId2": "be774c6e-7613-41db-b6e4-25975b680d24",
      "analyticRuleId2": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'be774c6e-7613-41db-b6e4-25975b680d24')]",
      "analyticRuleTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('be774c6e-7613-41db-b6e4-25975b680d24')))]",
      "_analyticRulecontentProductId2": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','be774c6e-7613-41db-b6e4-25975b680d24','-', '1.0.0')))]"
    },
    "NetApp-RPS-Auth-Playbook": "NetApp-RPS-Auth-Playbook",
    "_NetApp-RPS-Auth-Playbook": "[variables('NetApp-RPS-Auth-Playbook')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "NetApp-RPS-Auth-Playbook",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1'))))]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "blanks": "[replace('b', 'b', '')]",
    "RPS_Volume_Offline_Playbook": "RPS_Volume_Offline_Playbook",
    "_RPS_Volume_Offline_Playbook": "[variables('RPS_Volume_Offline_Playbook')]",
    "TemplateEmptyObject": "[json('{}')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "RPS_Volume_Offline_Playbook",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "RPS_Async_Poll_Playbook": "RPS_Async_Poll_Playbook",
    "_RPS_Async_Poll_Playbook": "[variables('RPS_Async_Poll_Playbook')]",
    "playbookVersion3": "1.0",
    "playbookContentId3": "RPS_Async_Poll_Playbook",
    "_playbookContentId3": "[variables('playbookContentId3')]",
    "playbookId3": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId3'))]",
    "playbookTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId3'))))]",
    "_playbookcontentProductId3": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId3'),'-', variables('playbookVersion3'))))]",
    "RPS_Volume_Snapshot_Playbook": "RPS_Volume_Snapshot_Playbook",
    "_RPS_Volume_Snapshot_Playbook": "[variables('RPS_Volume_Snapshot_Playbook')]",
    "playbookVersion4": "1.0",
    "playbookContentId4": "RPS_Volume_Snapshot_Playbook",
    "_playbookContentId4": "[variables('playbookContentId4')]",
    "playbookId4": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId4'))]",
    "playbookTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId4'))))]",
    "_playbookcontentProductId4": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId4'),'-', variables('playbookVersion4'))))]",
    "RPS_Enrich_StorageVM_Playbook": "RPS_Enrich_StorageVM_Playbook",
    "_RPS_Enrich_StorageVM_Playbook": "[variables('RPS_Enrich_StorageVM_Playbook')]",
    "playbookVersion5": "1.0",
    "playbookContentId5": "RPS_Enrich_StorageVM_Playbook",
    "_playbookContentId5": "[variables('playbookContentId5')]",
    "playbookId5": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId5'))]",
    "playbookTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId5'))))]",
    "_playbookcontentProductId5": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId5'),'-', variables('playbookVersion5'))))]",
    "RPS_Enrich_IP_Playbook": "RPS_Enrich_IP_Playbook",
    "_RPS_Enrich_IP_Playbook": "[variables('RPS_Enrich_IP_Playbook')]",
    "playbookVersion6": "1.0",
    "playbookContentId6": "RPS_Enrich_IP_Playbook",
    "_playbookContentId6": "[variables('playbookContentId6')]",
    "playbookId6": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId6'))]",
    "playbookTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId6'))))]",
    "_playbookcontentProductId6": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId6'),'-', variables('playbookVersion6'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetAppRPS data connector with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "NetAppRPS",
                  "publisher": "NetAppRPS",
                  "descriptionMarkdown": "Data connector for ingesting NetApp RPS (Ransomware Protection Service) alerts into Microsoft Sentinel. This connector enables seamless integration of RPS alerts, facilitating enhanced monitoring and response capabilities for ransomware threats within NetApp storage environments.",
                  "additionalRequirementBanner": "You need to have an active NetApp RPS subscription and appropriate permissions to access RPS alert data.",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "NetAppRPS",
                      "baseQuery": "rps_alerts_CL"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "rps_alerts_CL",
                      "lastDataReceivedQuery": "rps_alerts_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Default Query",
                      "query": "rps_alerts_CL"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "rps_alerts_CL"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions on the workspace are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": "[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-netskope-azuredeploy)",
                      "title": "Azure Resource Manager (ARM) Template"
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "NetAppRPS",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "NetApp",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "NetApp",
                  "email": "support@netapp.com",
                  "tier": "Partner",
                  "link": "https://support.netapp.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "NetAppRPS",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "NetAppRPS",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "NetApp",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "NetApp",
          "email": "support@netapp.com",
          "tier": "Partner",
          "link": "https://support.netapp.com"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "NetAppRPS",
          "publisher": "NetAppRPS",
          "descriptionMarkdown": "Data connector for ingesting NetApp RPS (Ransomware Protection Service) alerts into Microsoft Sentinel. This connector enables seamless integration of RPS alerts, facilitating enhanced monitoring and response capabilities for ransomware threats within NetApp storage environments.",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "NetAppRPS",
              "baseQuery": "rps_alerts_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "rps_alerts_CL",
              "lastDataReceivedQuery": "rps_alerts_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "rps_alerts_CL"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Default Query",
              "query": "rps_alerts_CL"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "description": "[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-netskope-azuredeploy)",
              "title": "Azure Resource Manager (ARM) Template"
            }
          ],
          "id": "[variables('_uiConfigId1')]",
          "additionalRequirementBanner": "You need to have an active NetApp RPS subscription and appropriate permissions to access RPS alert data."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject1').analyticRuleTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetAppRPS_HighSeverity_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject1').analyticRuleVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "apiVersion": "2023-02-01-preview",
              "kind": "NRT",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Detects high severity NetApp RPS alerts that require immediate attention. This rule monitors the rps_alerts_CL table for alerts with HIGH severity level.",
                "displayName": "NetApp RPS High Severity Alert",
                "enabled": false,
                "query": "rps_alerts_CL | where TimeGenerated > ago(1d)\n| where severity == \"HIGH\"\n",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "connectorId": "NetAppRPSCustomLogsIngestion",
                    "dataTypes": [
                      "rps_alerts_CL"
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "ContextInfo": "context",
                  "IncidentDetails": "incident",
                  "Severity": "severity"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "{{description}}",
                  "alertDescriptionFormat": "High severity alert detected from NetApp RPS: {{description}}"
                },
                "incidentConfiguration": {
                  "groupingConfiguration": {
                    "lookbackDuration": "PT5H",
                    "matchingMethod": "AllEntities",
                    "enabled": false,
                    "reopenClosedIncident": false
                  },
                  "createIncident": true
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject1').analyticRuleId1,'/'))))]",
              "properties": {
                "description": "NetAppRPS Analytics Rule 1",
                "parentId": "[variables('analyticRuleObject1').analyticRuleId1]",
                "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject1').analyticRuleVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "NetAppRPS",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "NetApp",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "NetApp",
                  "email": "support@netapp.com",
                  "tier": "Partner",
                  "link": "https://support.netapp.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
        "contentKind": "AnalyticsRule",
        "displayName": "NetApp RPS High Severity Alert",
        "contentProductId": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "id": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject2').analyticRuleTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetAppRPS_MediumSeverity_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject2').analyticRuleVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "apiVersion": "2023-02-01-preview",
              "kind": "NRT",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Detects medium severity NetApp RPS alerts that may require investigation. This rule monitors the rps_alerts_CL table for alerts with MEDIUM severity level.",
                "displayName": "NetApp RPS Medium Severity Alert",
                "enabled": false,
                "query": "rps_alerts_CL | where TimeGenerated > ago(1d)\n| where severity == \"MEDIUM\"\n",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "connectorId": "NetAppRPSCustomLogsIngestion",
                    "dataTypes": [
                      "rps_alerts_CL"
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "ContextInfo": "context",
                  "IncidentDetails": "incident",
                  "Severity": "severity"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "{{description}}",
                  "alertDescriptionFormat": "Medium severity alert detected from NetApp RPS: {{description}}"
                },
                "incidentConfiguration": {
                  "groupingConfiguration": {
                    "lookbackDuration": "PT5H",
                    "matchingMethod": "AllEntities",
                    "enabled": false,
                    "reopenClosedIncident": false
                  },
                  "createIncident": true
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject2').analyticRuleId2,'/'))))]",
              "properties": {
                "description": "NetAppRPS Analytics Rule 2",
                "parentId": "[variables('analyticRuleObject2').analyticRuleId2]",
                "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject2').analyticRuleVersion2]",
                "source": {
                  "kind": "Solution",
                  "name": "NetAppRPS",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "NetApp",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "NetApp",
                  "email": "support@netapp.com",
                  "tier": "Partner",
                  "link": "https://support.netapp.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
        "contentKind": "AnalyticsRule",
        "displayName": "NetApp RPS Medium Severity Alert",
        "contentProductId": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "id": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetAppRPS-Auth-Playbook Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Auth-Playbook",
              "metadata": {
                "description": "Name of the Logic App playbook to be created"
              }
            },
            "KeyVaultName": {
              "type": "String",
              "defaultValue": "[concat('rpskv', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Name of the shared Key Vault to store NetApp RPS credentials"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[parameters('location')]",
              "metadata": {
                "description": "Location for all resources"
              }
            },
            "ClientId": {
              "type": "securestring",
              "metadata": {
                "description": "Client ID for NetApp RPS API authentication"
              }
            },
            "ClientSecret": {
              "type": "securestring",
              "metadata": {
                "description": "Client Secret for NetApp RPS API authentication"
              }
            },
            "AccountId": {
              "type": "securestring",
              "metadata": {
                "description": "Account ID for NetApp RPS API authentication"
              }
            }
          },
          "variables": {
            "KeyVaultConnectionName": "[[concat('keyvault-', parameters('PlaybookName'))]",
            "connection-5": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/keyvault')]",
            "_connection-5": "[[variables('connection-5')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2019-09-01",
              "name": "[[parameters('KeyVaultName')]",
              "location": "[[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[[subscription().tenantId]",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 90,
                "enableRbacAuthorization": false
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[[concat(parameters('KeyVaultName'), '/client-id')]",
              "dependsOn": [
                "[[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]"
              ],
              "properties": {
                "value": "[[parameters('ClientId')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[[concat(parameters('KeyVaultName'), '/client-secret')]",
              "dependsOn": [
                "[[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]"
              ],
              "properties": {
                "value": "[[parameters('ClientSecret')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[[concat(parameters('KeyVaultName'), '/account-id')]",
              "dependsOn": [
                "[[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]"
              ],
              "properties": {
                "value": "[[parameters('AccountId')]"
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyVaultConnectionName')]",
              "location": "[[parameters('location')]",
              "kind": "V1",
              "dependsOn": [
                "[[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]"
              ],
              "properties": {
                "displayName": "[[variables('KeyVaultConnectionName')]",
                "parameterValueSet": {
                  "name": "oauthMI",
                  "values": {
                    "vaultName": {
                      "value": "[[parameters('KeyVaultName')]"
                    }
                  }
                },
                "api": {
                  "id": "[[variables('_connection-5')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[parameters('location')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('KeyVaultConnectionName'))]",
                "[[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]"
              ],
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "account_id": {
                              "type": "string"
                            },
                            "api_hostname": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Get_Client_ID": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('client-id')}/value"
                      }
                    },
                    "Get_Client_Secret": {
                      "runAfter": {
                        "Get_Client_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('client-secret')}/value"
                      }
                    },
                    "Get_Account_ID": {
                      "runAfter": {
                        "Get_Client_Secret": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('account-id')}/value"
                      }
                    },
                    "HTTP_Token_Request": {
                      "runAfter": {
                        "Get_Account_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://netapp-cloud-account.auth0.com/oauth/token",
                        "headers": {
                          "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "grant_type=client_credentials&client_id=@{body('Get_Client_ID')?['value']}&client_secret=@{body('Get_Client_Secret')?['value']}&audience=https://api.cloud.netapp.com"
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "HTTP_Token_Request": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": 200,
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "access_token": "@{body('HTTP_Token_Request')?['access_token']}",
                          "token_type": "@{body('HTTP_Token_Request')?['token_type']}",
                          "expires_in": "@{body('HTTP_Token_Request')?['expires_in']}",
                          "account_id": "@{body('Get_Account_ID')?['value']}"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyVaultConnectionName'))]",
                        "connectionName": "[[variables('KeyVaultConnectionName')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        },
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/keyvault')]"
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2019-09-01",
              "name": "[[concat(parameters('KeyVaultName'), '/add')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Logic/workflows', parameters('PlaybookName'))]",
                "[[resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName'))]"
              ],
              "properties": {
                "accessPolicies": [
                  {
                    "tenantId": "[[subscription().tenantId]",
                    "objectId": "[[reference(resourceId('Microsoft.Logic/workflows', parameters('PlaybookName')), '2019-05-01', 'Full').identity.principalId]",
                    "permissions": {
                      "secrets": [
                        "get"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "NetAppRPS",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "NetApp",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "NetApp",
                  "email": "support@netapp.com",
                  "tier": "Partner",
                  "link": "https://support.netapp.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "NetApp RPS Authentication Playbook",
            "description": "This playbook creates a shared Key Vault for NetApp RPS credentials and provides authentication services to all NetApp RPS playbooks in the solution.",
            "prerequisites": [
              "1. Valid client_id, client_secret, and account_id for NetApp RPS API authentication",
              "2. API endpoint that accepts OAuth2 client credentials flow"
            ],
            "postDeployment": [
              "1. Update the client_id, client_secret, and account_id values in the Key Vault",
              "2. Test the Logic App to ensure proper token retrieval",
              "3. The Key Vault created by this playbook will be shared across all NetApp RPS playbooks",
              "4. Other playbooks will call this Auth playbook to obtain authentication tokens"
            ],
            "lastUpdateTime": "2025-09-17T00:00:00Z",
            "tags": [
              "NetApp",
              "RPS",
              "Playbook",
              "Authentication"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "Playbook",
        "displayName": "NetAppRPS-Auth-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetAppRPS-Volume-Offline-Playbook Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Volume-Offline-Playbook",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "NetAppRPSAuthPlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Auth-Playbook",
              "metadata": {
                "description": "Name of the NetApp RPS authentication playbook"
              }
            },
            "NetAppRPSAsyncPollPlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Async-Poll-Playbook",
              "metadata": {
                "description": "Name of the NetApp RPS async poll playbook"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[parameters('location')]",
              "metadata": {
                "description": "Location for all resources"
              }
            }
          },
          "variables": {
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "authPlaybookName": {
                      "defaultValue": "[[parameters('NetAppRPSAuthPlaybookName')]",
                      "type": "String"
                    },
                    "asyncPollPlaybookName": {
                      "defaultValue": "[[parameters('NetAppRPSAsyncPollPlaybookName')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "volume_id": {
                              "type": "string"
                            },
                            "agent_id": {
                              "type": "string"
                            },
                            "system_id": {
                              "type": "string"
                            },
                            "callbackData": {
                              "type": "object"
                            },
                            "poll": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "volume_id",
                            "agent_id",
                            "system_id"
                          ]
                        }
                      }
                    }
                  },
                  "actions": {
                    "Initialize_Variables": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "VolumeId",
                            "type": "string",
                            "value": "@triggerBody()?['volume_id']"
                          },
                          {
                            "name": "AgentId",
                            "type": "string",
                            "value": "@triggerBody()?['agent_id']"
                          },
                          {
                            "name": "SystemId",
                            "type": "string",
                            "value": "@triggerBody()?['system_id']"
                          },
                          {
                            "name": "CallbackData",
                            "type": "object",
                            "value": "@triggerBody()?['callbackData']"
                          },
                          {
                            "name": "AccountId",
                            "type": "string"
                          },
                          {
                            "name": "DoPoll",
                            "type": "boolean",
                            "value": "@coalesce(triggerBody()?['poll'], true)"
                          },
                          {
                            "name": "Token",
                            "type": "string"
                          },
                          {
                            "name": "JobId",
                            "type": "string"
                          },
                          {
                            "name": "JobAgentId",
                            "type": "string"
                          },
                          {
                            "name": "PollResponse",
                            "type": "object",
                            "value": "[variables('TemplateEmptyObject')]"
                          },
                          {
                            "name": "SubmissionStatusCode",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Call_Auth_Playbook": {
                      "runAfter": {
                        "Initialize_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "[[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAuthPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "caller_info": {
                            "playbook_name": "@workflow().name",
                            "correlation_id": "@workflow().run.name",
                            "request_id": "@guid()"
                          }
                        },
                        "retryPolicy": {
                          "type": "exponential",
                          "count": 3,
                          "interval": "PT5S",
                          "minimumInterval": "PT5S",
                          "maximumInterval": "PT30S"
                        }
                      }
                    },
                    "Parse_Auth_Response": {
                      "runAfter": {
                        "Call_Auth_Playbook": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Call_Auth_Playbook')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "access_token": {
                              "type": "string"
                            },
                            "account_id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "access_token",
                            "account_id"
                          ]
                        }
                      }
                    },
                    "Set_Token": {
                      "runAfter": {
                        "Parse_Auth_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Token",
                        "value": "@body('Parse_Auth_Response')?['access_token']"
                      }
                    },
                    "Set_Account_ID": {
                      "runAfter": {
                        "Set_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AccountId",
                        "value": "@body('Parse_Auth_Response')?['account_id']"
                      }
                    },
                    "Submit_Volume_Offline": {
                      "runAfter": {
                        "Set_Account_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://snapcenter.cloudmanager.cloud.netapp.com/rps/v1/account/@{variables('AccountId')}/storage/take-volume-offline",
                        "headers": {
                          "Authorization": "Bearer @{variables('Token')}",
                          "Content-Type": "application/json",
                          "accept": "application/json"
                        },
                        "body": {
                          "volume_id": "@variables('VolumeId')",
                          "agent_id": "@variables('AgentId')",
                          "system_id": "@variables('SystemId')"
                        },
                        "retryPolicy": {
                          "type": "exponential",
                          "count": 3,
                          "interval": "PT5S",
                          "minimumInterval": "PT5S",
                          "maximumInterval": "PT30S"
                        }
                      }
                    },
                    "Capture_Submission_Status_Code": {
                      "runAfter": {
                        "Submit_Volume_Offline": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "SubmissionStatusCode",
                        "value": "@outputs('Submit_Volume_Offline')['statusCode']"
                      }
                    },
                    "Parse_Submission_Response": {
                      "runAfter": {
                        "Capture_Submission_Status_Code": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Submit_Volume_Offline')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "job_id": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "source": {
                              "type": "string"
                            },
                            "agent_id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "Store_JobId": {
                      "runAfter": {
                        "Parse_Submission_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "JobId",
                        "value": "@body('Parse_Submission_Response')?['job_id']"
                      }
                    },
                    "Store_Job_AgentId": {
                      "runAfter": {
                        "Store_JobId": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "JobAgentId",
                        "value": "@body('Parse_Submission_Response')?['agent_id']"
                      }
                    },
                    "Check_If_Should_Poll": {
                      "runAfter": {
                        "Store_Job_AgentId": [
                          "Succeeded"
                        ]
                      },
                      "type": "If",
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('DoPoll')",
                              true
                            ]
                          },
                          {
                            "or": [
                              {
                                "equals": [
                                  "@variables('SubmissionStatusCode')",
                                  200
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('SubmissionStatusCode')",
                                  201
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('SubmissionStatusCode')",
                                  202
                                ]
                              }
                            ]
                          },
                          {
                            "not": {
                              "equals": [
                                "@variables('JobId')",
                                ""
                              ]
                            }
                          }
                        ]
                      },
                      "actions": {
                        "Call_Async_Poll_Playbook": {
                          "type": "Http",
                          "inputs": {
                            "method": "POST",
                            "uri": "[[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAsyncPollPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                            "headers": {
                              "Content-Type": "application/json"
                            },
                            "body": {
                              "job_id": "@variables('JobId')",
                              "agent_id": "@variables('JobAgentId')",
                              "system_id": "@variables('SystemId')",
                              "source": "ontap",
                              "caller_info": {
                                "playbook_name": "@workflow().name",
                                "correlation_id": "@workflow().run.name",
                                "original_volume_id": "@variables('VolumeId')"
                              }
                            },
                            "retryPolicy": {
                              "type": "exponential",
                              "count": 3,
                              "interval": "PT5S",
                              "minimumInterval": "PT5S",
                              "maximumInterval": "PT30S"
                            }
                          }
                        }
                      }
                    },
                    "Parse_Poll_Response": {
                      "runAfter": {
                        "Check_If_Should_Poll": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Call_Async_Poll_Playbook')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "jobId": {
                              "type": "string"
                            },
                            "success": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "Store_Poll_Response": {
                      "runAfter": {
                        "Parse_Poll_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "PollResponse",
                        "value": "@body('Parse_Poll_Response')"
                      }
                    },
                    "Return_Response": {
                      "runAfter": {
                        "Store_Poll_Response": [
                          "Succeeded",
                          "Skipped"
                        ],
                        "Check_If_Should_Poll": [
                          "Succeeded"
                        ],
                        "Call_Auth_Playbook": [
                          "Failed",
                          "TimedOut"
                        ],
                        "Submit_Volume_Offline": [
                          "Failed",
                          "TimedOut"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 401, if(or(equals(actions('Submit_Volume_Offline')['status'], 'Failed'), equals(actions('Submit_Volume_Offline')['status'], 'TimedOut')), 500, if(or(equals(variables('SubmissionStatusCode'), 200), equals(variables('SubmissionStatusCode'), 201), equals(variables('SubmissionStatusCode'), 202)), 200, if(equals(variables('SubmissionStatusCode'), 0), 500, variables('SubmissionStatusCode')))))",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "success": "@and(not(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut'))), not(or(equals(actions('Submit_Volume_Offline')['status'], 'Failed'), equals(actions('Submit_Volume_Offline')['status'], 'TimedOut'))), or(equals(variables('SubmissionStatusCode'), 200), equals(variables('SubmissionStatusCode'), 201), equals(variables('SubmissionStatusCode'), 202)))",
                          "error": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'Authentication failed in auth playbook', if(or(equals(actions('Submit_Volume_Offline')['status'], 'Failed'), equals(actions('Submit_Volume_Offline')['status'], 'TimedOut')), 'Failed submitting volume offline request', null))",
                          "stage": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'auth', if(or(equals(actions('Submit_Volume_Offline')['status'], 'Failed'), equals(actions('Submit_Volume_Offline')['status'], 'TimedOut')), 'submit', 'success'))",
                          "submission": {
                            "statusCode": "@variables('SubmissionStatusCode')",
                            "jobId": "@variables('JobId')",
                            "raw": "@body('Submit_Volume_Offline')",
                            "details": "@if(or(equals(actions('Submit_Volume_Offline')['status'], 'Failed'), equals(actions('Submit_Volume_Offline')['status'], 'TimedOut')), body('Submit_Volume_Offline'), null)"
                          },
                          "polling": {
                            "invoked": "@and(variables('DoPoll'), not(empty(variables('JobId'))))",
                            "playbook": "@parameters('asyncPollPlaybookName')",
                            "jobFinalStatus": "@coalesce(variables('PollResponse')?['status'], 'unknown')",
                            "jobResponse": "@variables('PollResponse')"
                          },
                          "callbackData": "@variables('CallbackData')",
                          "timestamp": "@utcnow()"
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "NetAppRPS",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "NetApp",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "NetApp",
                  "email": "support@netapp.com",
                  "tier": "Partner",
                  "link": "https://support.netapp.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "NetApp RPS Volume Offline Playbook",
            "description": "This playbook takes a NetApp volume offline using the updated NetApp RPS take-volume-offline API endpoint and optionally polls for completion.",
            "prerequisites": [
              "1. NetApp RPS Auth Playbook must be deployed first",
              "2. NetApp RPS Async Poll Playbook must be deployed first",
              "3. Valid NetApp RPS API credentials configured in the Auth Playbook",
              "4. Caller must provide volume_id, agent_id, and system_id parameters"
            ],
            "postDeployment": [
              "1. Ensure the Auth Playbook is working correctly",
              "2. Ensure the Async Poll Playbook is working correctly",
              "3. Test the volume offline functionality with valid volume_id, agent_id, and system_id",
              "4. Verify the new take-volume-offline API endpoint is accessible"
            ],
            "lastUpdateTime": "2025-09-17T00:00:00Z",
            "tags": [
              "NetApp",
              "RPS",
              "Playbook",
              "Volume",
              "Offline"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "NetAppRPS-Volume-Offline-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetAppRPS-Async-Poll-Playbook Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion3')]",
          "parameters": {
            "PlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Async-Poll-Playbook",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "NetAppRPSAuthPlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Auth-Playbook",
              "metadata": {
                "description": "Name of the NetApp RPS authentication playbook"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[parameters('location')]",
              "metadata": {
                "description": "Location for all resources"
              }
            }
          },
          "variables": {
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "authPlaybookName": {
                      "defaultValue": "[[parameters('NetAppRPSAuthPlaybookName')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "job_id": {
                              "type": "string",
                              "description": "The NetApp RPS job ID to poll"
                            },
                            "agent_id": {
                              "type": "string",
                              "description": "NetApp agent ID"
                            },
                            "system_id": {
                              "type": "string",
                              "description": "System ID for the working environment"
                            },
                            "source": {
                              "type": "string",
                              "description": "Job source type"
                            },
                            "caller_info": {
                              "type": "object",
                              "description": "Optional caller information for tracking"
                            }
                          },
                          "required": [
                            "job_id",
                            "agent_id",
                            "system_id",
                            "source"
                          ]
                        }
                      }
                    }
                  },
                  "actions": {
                    "Initialize_variables": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "JobId",
                            "type": "string",
                            "value": "@triggerBody()?['job_id']"
                          },
                          {
                            "name": "AgentId",
                            "type": "string",
                            "value": "@triggerBody()?['agent_id']"
                          },
                          {
                            "name": "SystemId",
                            "type": "string",
                            "value": "@triggerBody()?['system_id']"
                          },
                          {
                            "name": "Source",
                            "type": "string",
                            "value": "@triggerBody()?['source']"
                          },
                          {
                            "name": "AccountId",
                            "type": "string"
                          },
                          {
                            "name": "PollCount",
                            "type": "integer",
                            "value": 0
                          },
                          {
                            "name": "MaxPollAttempts",
                            "type": "integer",
                            "value": 10
                          },
                          {
                            "name": "PollIntervalSeconds",
                            "type": "integer",
                            "value": 30
                          },
                          {
                            "name": "JobStatus",
                            "type": "string",
                            "value": "pending"
                          },
                          {
                            "name": "JobResponse",
                            "type": "object",
                            "value": "[variables('TemplateEmptyObject')]"
                          }
                        ]
                      }
                    },
                    "Call_Auth_Playbook": {
                      "runAfter": {
                        "Initialize_variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "[[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAuthPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "caller_info": {
                            "playbook_name": "@workflow().name",
                            "correlation_id": "@workflow().run.name",
                            "request_id": "@guid()"
                          }
                        }
                      }
                    },
                    "Set_Account_ID": {
                      "runAfter": {
                        "Call_Auth_Playbook": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AccountId",
                        "value": "@body('Call_Auth_Playbook')?['account_id']"
                      }
                    },
                    "Initial_Status_Check": {
                      "runAfter": {
                        "Set_Account_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "GET",
                        "uri": "https://snapcenter.cloudmanager.cloud.netapp.com/rps/v1/account/@{variables('AccountId')}/job/status?source=@{variables('Source')}&job_id=@{variables('JobId')}&agent_id=@{variables('AgentId')}&system_id=@{variables('SystemId')}",
                        "headers": {
                          "Authorization": "Bearer @{body('Call_Auth_Playbook')?['access_token']}",
                          "accept": "application/json"
                        },
                        "retryPolicy": {
                          "type": "exponential",
                          "count": 2,
                          "interval": "PT5S",
                          "minimumInterval": "PT5S",
                          "maximumInterval": "PT10S"
                        },
                        "timeout": "PT30S"
                      }
                    },
                    "Update_Initial_Status": {
                      "runAfter": {
                        "Initial_Status_Check": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "JobStatus",
                        "value": "@body('Initial_Status_Check')?['status']"
                      }
                    },
                    "Update_Initial_Response": {
                      "runAfter": {
                        "Update_Initial_Status": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "JobResponse",
                        "value": "@body('Initial_Status_Check')"
                      }
                    },
                    "Polling_Loop": {
                      "runAfter": {
                        "Update_Initial_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "Until",
                      "expression": "@or(or(equals(variables('JobStatus'), 'SUCCESS'), equals(variables('JobStatus'), 'success')), or(equals(variables('JobStatus'), 'FAILED'), equals(variables('JobStatus'), 'failed')), greater(variables('PollCount'), variables('MaxPollAttempts')))",
                      "limit": {
                        "count": 10,
                        "timeout": "PT6M"
                      },
                      "actions": {
                        "Increment_Poll_Count": {
                          "type": "IncrementVariable",
                          "inputs": {
                            "name": "PollCount",
                            "value": 1
                          }
                        },
                        "Check_Job_Status": {
                          "runAfter": {
                            "Increment_Poll_Count": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "method": "GET",
                            "uri": "https://snapcenter.cloudmanager.cloud.netapp.com/rps/v1/account/@{variables('AccountId')}/job/status?source=@{variables('Source')}&job_id=@{variables('JobId')}&agent_id=@{variables('AgentId')}&system_id=@{variables('SystemId')}",
                            "headers": {
                              "Authorization": "Bearer @{body('Call_Auth_Playbook')?['access_token']}",
                              "accept": "application/json"
                            },
                            "retryPolicy": {
                              "type": "exponential",
                              "count": 2,
                              "interval": "PT5S",
                              "minimumInterval": "PT5S",
                              "maximumInterval": "PT10S"
                            },
                            "timeout": "PT30S"
                          }
                        },
                        "Update_Job_Status": {
                          "runAfter": {
                            "Check_Job_Status": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "JobStatus",
                            "value": "@body('Check_Job_Status')?['status']"
                          }
                        },
                        "Handle_Status_Check_Failure": {
                          "runAfter": {
                            "Check_Job_Status": [
                              "Failed",
                              "TimedOut"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "JobStatus",
                            "value": "failed"
                          }
                        },
                        "Update_Job_Response": {
                          "runAfter": {
                            "Update_Job_Status": [
                              "Succeeded"
                            ],
                            "Handle_Status_Check_Failure": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "JobResponse",
                            "value": "@body('Check_Job_Status')"
                          }
                        },
                        "Wait_If_Needed": {
                          "runAfter": {
                            "Update_Job_Response": [
                              "Succeeded"
                            ]
                          },
                          "type": "If",
                          "expression": {
                            "not": {
                              "or": [
                                {
                                  "equals": [
                                    "@variables('JobStatus')",
                                    "SUCCESS"
                                  ]
                                },
                                {
                                  "equals": [
                                    "@variables('JobStatus')",
                                    "success"
                                  ]
                                }
                              ]
                            }
                          },
                          "actions": {
                            "Wait_Before_Retry": {
                              "type": "Wait",
                              "inputs": {
                                "interval": {
                                  "count": "@variables('PollIntervalSeconds')",
                                  "unit": "Second"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "Check_Final_Status": {
                      "runAfter": {
                        "Polling_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "If",
                      "expression": {
                        "and": [
                          {
                            "or": [
                              {
                                "equals": [
                                  "@variables('JobStatus')",
                                  "SUCCESS"
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('JobStatus')",
                                  "success"
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "actions": {
                        "Success_Response": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "statusCode": 200,
                            "headers": {
                              "Content-Type": "application/json"
                            },
                            "body": {
                              "success": true,
                              "job_id": "@variables('JobId')",
                              "status": "@variables('JobStatus')",
                              "poll_count": "@variables('PollCount')",
                              "data": "@variables('JobResponse')",
                              "caller_info": "@triggerBody()?['caller_info']"
                            }
                          }
                        }
                      },
                      "else": {
                        "actions": {
                          "Error_Response": {
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "statusCode": 408,
                              "headers": {
                                "Content-Type": "application/json"
                              },
                              "body": {
                                "success": false,
                                "error": "Job polling timeout or failed",
                                "job_id": "@variables('JobId')",
                                "status": "@variables('JobStatus')",
                                "poll_count": "@variables('PollCount')",
                                "max_attempts": "@variables('MaxPollAttempts')",
                                "data": "@variables('JobResponse')",
                                "caller_info": "@triggerBody()?['caller_info']"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId3'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId3')]",
                "contentId": "[variables('_playbookContentId3')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "NetAppRPS",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "NetApp",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "NetApp",
                  "email": "support@netapp.com",
                  "tier": "Partner",
                  "link": "https://support.netapp.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "NetApp RPS Async Poll Playbook",
            "description": "This playbook polls NetApp RPS job status asynchronously until completion or timeout using the updated job status API endpoint.",
            "prerequisites": [
              "1. NetApp RPS Auth Playbook must be deployed first",
              "2. Valid NetApp RPS API credentials configured in the Auth Playbook",
              "3. Caller must provide job_id, agent_id, system_id, and source parameters"
            ],
            "postDeployment": [
              "1. Ensure the Auth Playbook is working correctly",
              "2. Test the polling functionality with a valid job ID"
            ],
            "lastUpdateTime": "2025-09-17T00:00:00Z",
            "tags": [
              "NetApp",
              "RPS",
              "Playbook",
              "Async",
              "Polling"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId3')]",
        "contentKind": "Playbook",
        "displayName": "NetAppRPS-Async-Poll-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId3')]",
        "id": "[variables('_playbookcontentProductId3')]",
        "version": "[variables('playbookVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetAppRPS-Volume-Snapshot-Playbook Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion4')]",
          "parameters": {
            "PlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Volume-Snapshot-Playbook",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "NetAppRPSAuthPlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Auth-Playbook",
              "metadata": {
                "description": "Name of the NetApp RPS authentication playbook"
              }
            },
            "NetAppRPSAsyncPollPlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Async-Poll-Playbook",
              "metadata": {
                "description": "Name of the NetApp RPS async poll playbook"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[parameters('location')]",
              "metadata": {
                "description": "Location for all resources"
              }
            }
          },
          "variables": {
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "authPlaybookName": {
                      "defaultValue": "[[parameters('NetAppRPSAuthPlaybookName')]",
                      "type": "String"
                    },
                    "asyncPollPlaybookName": {
                      "defaultValue": "[[parameters('NetAppRPSAsyncPollPlaybookName')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "volume_id": {
                              "type": "string"
                            },
                            "agent_id": {
                              "type": "string"
                            },
                            "system_id": {
                              "type": "string"
                            },
                            "callbackData": {
                              "type": "object"
                            },
                            "poll": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "volume_id",
                            "agent_id",
                            "system_id"
                          ]
                        }
                      }
                    }
                  },
                  "actions": {
                    "Initialize_Variables": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "VolumeId",
                            "type": "string",
                            "value": "@triggerBody()?['volume_id']"
                          },
                          {
                            "name": "AgentId",
                            "type": "string",
                            "value": "@triggerBody()?['agent_id']"
                          },
                          {
                            "name": "SystemId",
                            "type": "string",
                            "value": "@triggerBody()?['system_id']"
                          },
                          {
                            "name": "CallbackData",
                            "type": "object",
                            "value": "@triggerBody()?['callbackData']"
                          },
                          {
                            "name": "AccountId",
                            "type": "string"
                          },
                          {
                            "name": "DoPoll",
                            "type": "boolean",
                            "value": "@coalesce(triggerBody()?['poll'], true)"
                          },
                          {
                            "name": "Token",
                            "type": "string"
                          },
                          {
                            "name": "JobId",
                            "type": "string"
                          },
                          {
                            "name": "JobAgentId",
                            "type": "string"
                          },
                          {
                            "name": "PollResponse",
                            "type": "object",
                            "value": "[variables('TemplateEmptyObject')]"
                          },
                          {
                            "name": "SubmissionStatusCode",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Call_Auth_Playbook": {
                      "runAfter": {
                        "Initialize_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "[[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAuthPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "caller_info": {
                            "playbook_name": "@workflow().name",
                            "correlation_id": "@workflow().run.name",
                            "request_id": "@guid()"
                          }
                        },
                        "retryPolicy": {
                          "type": "exponential",
                          "count": 3,
                          "interval": "PT5S",
                          "minimumInterval": "PT5S",
                          "maximumInterval": "PT30S"
                        }
                      }
                    },
                    "Parse_Auth_Response": {
                      "runAfter": {
                        "Call_Auth_Playbook": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Call_Auth_Playbook')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "access_token": {
                              "type": "string"
                            },
                            "account_id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "access_token",
                            "account_id"
                          ]
                        }
                      }
                    },
                    "Set_Token": {
                      "runAfter": {
                        "Parse_Auth_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Token",
                        "value": "@body('Parse_Auth_Response')?['access_token']"
                      }
                    },
                    "Set_Account_ID": {
                      "runAfter": {
                        "Set_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AccountId",
                        "value": "@body('Parse_Auth_Response')?['account_id']"
                      }
                    },
                    "Submit_Volume_Snapshot": {
                      "runAfter": {
                        "Set_Account_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://snapcenter.cloudmanager.cloud.netapp.com/rps/v1/account/@{variables('AccountId')}/storage/take-snapshot",
                        "headers": {
                          "Authorization": "Bearer @{variables('Token')}",
                          "Content-Type": "application/json",
                          "accept": "application/json"
                        },
                        "body": {
                          "volume_id": "@variables('VolumeId')",
                          "agent_id": "@variables('AgentId')",
                          "system_id": "@variables('SystemId')"
                        },
                        "retryPolicy": {
                          "type": "exponential",
                          "count": 3,
                          "interval": "PT5S",
                          "minimumInterval": "PT5S",
                          "maximumInterval": "PT30S"
                        }
                      }
                    },
                    "Capture_Submission_Status_Code": {
                      "runAfter": {
                        "Submit_Volume_Snapshot": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "SubmissionStatusCode",
                        "value": "@outputs('Submit_Volume_Snapshot')['statusCode']"
                      }
                    },
                    "Parse_Submission_Response": {
                      "runAfter": {
                        "Capture_Submission_Status_Code": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Submit_Volume_Snapshot')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "job_id": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "source": {
                              "type": "string"
                            },
                            "agent_id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "Store_JobId": {
                      "runAfter": {
                        "Parse_Submission_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "JobId",
                        "value": "@body('Parse_Submission_Response')?['job_id']"
                      }
                    },
                    "Store_Job_AgentId": {
                      "runAfter": {
                        "Store_JobId": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "JobAgentId",
                        "value": "@body('Parse_Submission_Response')?['agent_id']"
                      }
                    },
                    "Check_If_Should_Poll": {
                      "runAfter": {
                        "Store_Job_AgentId": [
                          "Succeeded"
                        ]
                      },
                      "type": "If",
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('DoPoll')",
                              true
                            ]
                          },
                          {
                            "or": [
                              {
                                "equals": [
                                  "@variables('SubmissionStatusCode')",
                                  200
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('SubmissionStatusCode')",
                                  201
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('SubmissionStatusCode')",
                                  202
                                ]
                              }
                            ]
                          },
                          {
                            "not": {
                              "equals": [
                                "@variables('JobId')",
                                ""
                              ]
                            }
                          }
                        ]
                      },
                      "actions": {
                        "Call_Async_Poll_Playbook": {
                          "type": "Http",
                          "inputs": {
                            "method": "POST",
                            "uri": "[[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAsyncPollPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                            "headers": {
                              "Content-Type": "application/json"
                            },
                            "body": {
                              "job_id": "@variables('JobId')",
                              "agent_id": "@variables('JobAgentId')",
                              "system_id": "@variables('SystemId')",
                              "source": "ontap",
                              "caller_info": {
                                "playbook_name": "@workflow().name",
                                "correlation_id": "@workflow().run.name",
                                "original_volume_id": "@variables('VolumeId')"
                              }
                            },
                            "retryPolicy": {
                              "type": "exponential",
                              "count": 3,
                              "interval": "PT5S",
                              "minimumInterval": "PT5S",
                              "maximumInterval": "PT30S"
                            }
                          }
                        }
                      }
                    },
                    "Parse_Poll_Response": {
                      "runAfter": {
                        "Check_If_Should_Poll": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Call_Async_Poll_Playbook')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "jobId": {
                              "type": "string"
                            },
                            "success": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "Store_Poll_Response": {
                      "runAfter": {
                        "Parse_Poll_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "PollResponse",
                        "value": "@body('Parse_Poll_Response')"
                      }
                    },
                    "Return_Response": {
                      "runAfter": {
                        "Store_Poll_Response": [
                          "Succeeded",
                          "Skipped"
                        ],
                        "Check_If_Should_Poll": [
                          "Succeeded"
                        ],
                        "Call_Auth_Playbook": [
                          "Failed",
                          "TimedOut"
                        ],
                        "Submit_Volume_Snapshot": [
                          "Failed",
                          "TimedOut"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 401, if(or(equals(actions('Submit_Volume_Snapshot')['status'], 'Failed'), equals(actions('Submit_Volume_Snapshot')['status'], 'TimedOut')), 500, if(or(equals(variables('SubmissionStatusCode'), 200), equals(variables('SubmissionStatusCode'), 201), equals(variables('SubmissionStatusCode'), 202)), 200, if(equals(variables('SubmissionStatusCode'), 0), 500, variables('SubmissionStatusCode')))))",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "success": "@and(not(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut'))), not(or(equals(actions('Submit_Volume_Snapshot')['status'], 'Failed'), equals(actions('Submit_Volume_Snapshot')['status'], 'TimedOut'))), or(equals(variables('SubmissionStatusCode'), 200), equals(variables('SubmissionStatusCode'), 201), equals(variables('SubmissionStatusCode'), 202)))",
                          "error": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'Authentication failed in auth playbook', if(or(equals(actions('Submit_Volume_Snapshot')['status'], 'Failed'), equals(actions('Submit_Volume_Snapshot')['status'], 'TimedOut')), 'Failed submitting volume snapshot request', null))",
                          "stage": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'auth', if(or(equals(actions('Submit_Volume_Snapshot')['status'], 'Failed'), equals(actions('Submit_Volume_Snapshot')['status'], 'TimedOut')), 'submit', 'success'))",
                          "submission": {
                            "statusCode": "@variables('SubmissionStatusCode')",
                            "jobId": "@variables('JobId')",
                            "raw": "@body('Submit_Volume_Snapshot')",
                            "details": "@if(or(equals(actions('Submit_Volume_Snapshot')['status'], 'Failed'), equals(actions('Submit_Volume_Snapshot')['status'], 'TimedOut')), body('Submit_Volume_Snapshot'), null)"
                          },
                          "polling": {
                            "invoked": "@and(variables('DoPoll'), not(empty(variables('JobId'))))",
                            "playbook": "@parameters('asyncPollPlaybookName')",
                            "jobFinalStatus": "@coalesce(variables('PollResponse')?['status'], 'unknown')",
                            "jobResponse": "@variables('PollResponse')"
                          },
                          "callbackData": "@variables('CallbackData')",
                          "timestamp": "@utcnow()"
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId4'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId4')]",
                "contentId": "[variables('_playbookContentId4')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "NetAppRPS",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "NetApp",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "NetApp",
                  "email": "support@netapp.com",
                  "tier": "Partner",
                  "link": "https://support.netapp.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "NetApp RPS Volume Snapshot Playbook",
            "description": "This playbook creates a NetApp volume snapshot using the updated NetApp RPS take-snapshot API endpoint and optionally polls for completion.",
            "prerequisites": [
              "1. NetApp RPS Auth Playbook must be deployed first",
              "2. NetApp RPS Async Poll Playbook must be deployed first",
              "3. Valid NetApp RPS API credentials configured in the Auth Playbook",
              "4. Caller must provide volume_id, agent_id, and system_id parameters"
            ],
            "postDeployment": [
              "1. Ensure the Auth Playbook is working correctly",
              "2. Ensure the Async Poll Playbook is working correctly",
              "3. Test the volume snapshot functionality with valid volume_id, agent_id, and system_id",
              "4. Verify the new take-snapshot API endpoint is accessible"
            ],
            "lastUpdateTime": "2025-09-22T00:00:00Z",
            "tags": [
              "NetApp",
              "RPS",
              "Playbook",
              "Volume",
              "Snapshot"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId4')]",
        "contentKind": "Playbook",
        "displayName": "NetAppRPS-Volume-Snapshot-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId4')]",
        "id": "[variables('_playbookcontentProductId4')]",
        "version": "[variables('playbookVersion4')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetAppRPS-Enrich-StorageVM-Playbook Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion5')]",
          "parameters": {
            "PlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Enrich-StorageVM-Playbook",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "NetAppRPSAuthPlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Auth-Playbook",
              "metadata": {
                "description": "Name of the NetApp RPS authentication playbook"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[parameters('location')]",
              "metadata": {
                "description": "Location for all resources"
              }
            }
          },
          "variables": {
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "authPlaybookName": {
                      "defaultValue": "[[parameters('NetAppRPSAuthPlaybookName')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "agent_id": {
                              "type": "string"
                            },
                            "system_id": {
                              "type": "string"
                            },
                            "callbackData": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "agent_id",
                            "system_id"
                          ]
                        }
                      }
                    }
                  },
                  "actions": {
                    "Initialize_Variables": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "AgentId",
                            "type": "string",
                            "value": "@triggerBody()?['agent_id']"
                          },
                          {
                            "name": "SystemId",
                            "type": "string",
                            "value": "@triggerBody()?['system_id']"
                          },
                          {
                            "name": "CallbackData",
                            "type": "object",
                            "value": "@triggerBody()?['callbackData']"
                          },
                          {
                            "name": "AccountId",
                            "type": "string"
                          },
                          {
                            "name": "Token",
                            "type": "string"
                          },
                          {
                            "name": "StorageVMData",
                            "type": "array"
                          },
                          {
                            "name": "EnrichmentStatusCode",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Call_Auth_Playbook": {
                      "runAfter": {
                        "Initialize_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "[[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAuthPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "caller_info": {
                            "playbook_name": "@workflow().name",
                            "correlation_id": "@workflow().run.name",
                            "request_id": "@guid()"
                          }
                        },
                        "retryPolicy": {
                          "type": "exponential",
                          "count": 3,
                          "interval": "PT5S",
                          "minimumInterval": "PT5S",
                          "maximumInterval": "PT30S"
                        }
                      }
                    },
                    "Parse_Auth_Response": {
                      "runAfter": {
                        "Call_Auth_Playbook": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Call_Auth_Playbook')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "access_token": {
                              "type": "string"
                            },
                            "account_id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "access_token",
                            "account_id"
                          ]
                        }
                      }
                    },
                    "Set_Token": {
                      "runAfter": {
                        "Parse_Auth_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Token",
                        "value": "@body('Parse_Auth_Response')?['access_token']"
                      }
                    },
                    "Set_Account_ID": {
                      "runAfter": {
                        "Set_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AccountId",
                        "value": "@body('Parse_Auth_Response')?['account_id']"
                      }
                    },
                    "Get_StorageVM_Data": {
                      "runAfter": {
                        "Set_Account_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "GET",
                        "uri": "https://snapcenter.cloudmanager.cloud.netapp.com/rps/v1/account/@{variables('AccountId')}/enrich/storage?agent_id=@{variables('AgentId')}&system_id=@{variables('SystemId')}",
                        "headers": {
                          "Authorization": "Bearer @{variables('Token')}",
                          "accept": "application/json"
                        },
                        "retryPolicy": {
                          "type": "exponential",
                          "count": 3,
                          "interval": "PT5S",
                          "minimumInterval": "PT5S",
                          "maximumInterval": "PT30S"
                        }
                      }
                    },
                    "Capture_Enrichment_Status_Code": {
                      "runAfter": {
                        "Get_StorageVM_Data": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "EnrichmentStatusCode",
                        "value": "@outputs('Get_StorageVM_Data')['statusCode']"
                      }
                    },
                    "Parse_StorageVM_Response": {
                      "runAfter": {
                        "Capture_Enrichment_Status_Code": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_StorageVM_Data')",
                        "schema": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "volume_uuid": {
                                "type": "string"
                              },
                              "volume_name": {
                                "type": "string"
                              },
                              "svm_name": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "Store_StorageVM_Data": {
                      "runAfter": {
                        "Parse_StorageVM_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "StorageVMData",
                        "value": "@body('Parse_StorageVM_Response')"
                      }
                    },
                    "Return_Response": {
                      "runAfter": {
                        "Store_StorageVM_Data": [
                          "Succeeded",
                          "Skipped"
                        ],
                        "Call_Auth_Playbook": [
                          "Failed",
                          "TimedOut"
                        ],
                        "Get_StorageVM_Data": [
                          "Failed",
                          "TimedOut"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 401, if(or(equals(actions('Get_StorageVM_Data')['status'], 'Failed'), equals(actions('Get_StorageVM_Data')['status'], 'TimedOut')), 500, if(equals(variables('EnrichmentStatusCode'), 200), 200, if(equals(variables('EnrichmentStatusCode'), 0), 500, variables('EnrichmentStatusCode')))))",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "success": "@and(not(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut'))), not(or(equals(actions('Get_StorageVM_Data')['status'], 'Failed'), equals(actions('Get_StorageVM_Data')['status'], 'TimedOut'))), equals(variables('EnrichmentStatusCode'), 200))",
                          "error": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'Authentication failed in auth playbook', if(or(equals(actions('Get_StorageVM_Data')['status'], 'Failed'), equals(actions('Get_StorageVM_Data')['status'], 'TimedOut')), 'Failed retrieving storage VM data', null))",
                          "stage": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'auth', if(or(equals(actions('Get_StorageVM_Data')['status'], 'Failed'), equals(actions('Get_StorageVM_Data')['status'], 'TimedOut')), 'enrichment', 'success'))",
                          "account_id": "@variables('AccountId')",
                          "enrichment": {
                            "statusCode": "@variables('EnrichmentStatusCode')",
                            "storage_vms": "@variables('StorageVMData')",
                            "count": "@length(variables('StorageVMData'))",
                            "raw": "@body('Get_StorageVM_Data')"
                          },
                          "callbackData": "@variables('CallbackData')",
                          "timestamp": "@utcnow()"
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId5'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId5')]",
                "contentId": "[variables('_playbookContentId5')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "NetAppRPS",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "NetApp",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "NetApp",
                  "email": "support@netapp.com",
                  "tier": "Partner",
                  "link": "https://support.netapp.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "NetApp RPS Enrich StorageVM Playbook",
            "description": "This playbook enriches storage data by calling the updated NetApp RPS enrich storage API endpoint.",
            "prerequisites": [
              "1. NetApp RPS Auth Playbook must be deployed first",
              "2. Valid NetApp RPS API credentials configured in the Auth Playbook",
              "3. Caller must provide agent_id and system_id parameters"
            ],
            "postDeployment": [
              "1. Ensure the Auth Playbook is working correctly",
              "2. Test the storage enrichment functionality with valid agent_id and system_id"
            ],
            "lastUpdateTime": "2025-09-23T00:00:00Z",
            "tags": [
              "NetApp",
              "RPS",
              "Playbook",
              "StorageVM",
              "Enrich"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId5')]",
        "contentKind": "Playbook",
        "displayName": "NetAppRPS-Enrich-StorageVM-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId5')]",
        "id": "[variables('_playbookcontentProductId5')]",
        "version": "[variables('playbookVersion5')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName6')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetAppRPS-Enrich-IP-Playbook Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion6')]",
          "parameters": {
            "PlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Enrich-IP-Playbook",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "NetAppRPSAuthPlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Auth-Playbook",
              "metadata": {
                "description": "Name of the NetApp RPS authentication playbook"
              }
            },
            "NetAppRPSAsyncPollPlaybookName": {
              "type": "String",
              "defaultValue": "NetAppRPS-Async-Poll-Playbook",
              "metadata": {
                "description": "Name of the NetApp RPS async poll playbook"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[parameters('location')]",
              "metadata": {
                "description": "Location for all resources"
              }
            }
          },
          "variables": {
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "authPlaybookName": {
                      "defaultValue": "[[parameters('NetAppRPSAuthPlaybookName')]",
                      "type": "String"
                    },
                    "asyncPollPlaybookName": {
                      "defaultValue": "[[parameters('NetAppRPSAsyncPollPlaybookName')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "ip_address": {
                              "type": "string"
                            },
                            "callbackData": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "ip_address"
                          ]
                        }
                      }
                    }
                  },
                  "actions": {
                    "Initialize_Variables": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IpAddress",
                            "type": "string",
                            "value": "@triggerBody()?['ip_address']"
                          },
                          {
                            "name": "CallbackData",
                            "type": "object",
                            "value": "@triggerBody()?['callbackData']"
                          },
                          {
                            "name": "AccountId",
                            "type": "string"
                          },
                          {
                            "name": "Token",
                            "type": "string"
                          },
                          {
                            "name": "JobIds",
                            "type": "array"
                          },
                          {
                            "name": "PollingResults",
                            "type": "array"
                          },
                          {
                            "name": "EnrichmentStatusCode",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Call_Auth_Playbook": {
                      "runAfter": {
                        "Initialize_Variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "[[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAuthPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "caller_info": {
                            "playbook_name": "@workflow().name",
                            "correlation_id": "@workflow().run.name",
                            "request_id": "@guid()"
                          }
                        },
                        "retryPolicy": {
                          "type": "exponential",
                          "count": 3,
                          "interval": "PT5S",
                          "minimumInterval": "PT5S",
                          "maximumInterval": "PT30S"
                        },
                        "timeout": "PT30S"
                      }
                    },
                    "Parse_Auth_Response": {
                      "runAfter": {
                        "Call_Auth_Playbook": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Call_Auth_Playbook')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "access_token": {
                              "type": "string"
                            },
                            "account_id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "access_token",
                            "account_id"
                          ]
                        }
                      }
                    },
                    "Set_Token": {
                      "runAfter": {
                        "Parse_Auth_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Token",
                        "value": "@body('Parse_Auth_Response')?['access_token']"
                      }
                    },
                    "Set_Account_ID": {
                      "runAfter": {
                        "Set_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AccountId",
                        "value": "@body('Parse_Auth_Response')?['account_id']"
                      }
                    },
                    "Get_IP_NetworkInterfaces": {
                      "runAfter": {
                        "Set_Account_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "https://snapcenter.cloudmanager.cloud.netapp.com/rps/v1/account/@{variables('AccountId')}/enrich/ip-address",
                        "headers": {
                          "Authorization": "Bearer @{variables('Token')}",
                          "accept": "application/json",
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "ip_address": "@{variables('IpAddress')}"
                        },
                        "retryPolicy": {
                          "type": "exponential",
                          "count": 3,
                          "interval": "PT5S",
                          "minimumInterval": "PT5S",
                          "maximumInterval": "PT30S"
                        },
                        "timeout": "PT45S"
                      }
                    },
                    "Capture_Enrichment_Status_Code": {
                      "runAfter": {
                        "Get_IP_NetworkInterfaces": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "EnrichmentStatusCode",
                        "value": "@outputs('Get_IP_NetworkInterfaces')['statusCode']"
                      }
                    },
                    "Parse_JobIds_Response": {
                      "runAfter": {
                        "Capture_Enrichment_Status_Code": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_IP_NetworkInterfaces')",
                        "schema": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "job_id": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "source": {
                                "type": "string"
                              },
                              "agent_id": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "Extract_Job_IDs": {
                      "runAfter": {
                        "Parse_JobIds_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "JobIds",
                        "value": "@body('Parse_JobIds_Response')"
                      }
                    },
                    "Poll_All_Jobs": {
                      "runAfter": {
                        "Extract_Job_IDs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "foreach": "@variables('JobIds')",
                      "actions": {
                        "Call_Async_Poll_Playbook": {
                          "type": "Http",
                          "inputs": {
                            "method": "POST",
                            "uri": "[[listCallbackURL(resourceId('Microsoft.Logic/workflows', parameters('NetAppRPSAsyncPollPlaybookName'), '/triggers/manual'), '2019-05-01').value]",
                            "headers": {
                              "Content-Type": "application/json"
                            },
                            "body": {
                              "job_id": "@item()?['job_id']",
                              "agent_id": "@item()?['agent_id']",
                              "system_id": "default",
                              "source": "@item()?['source']",
                              "caller_info": {
                                "playbook_name": "@workflow().name",
                                "correlation_id": "@workflow().run.name",
                                "original_ip": "@variables('IpAddress')"
                              }
                            },
                            "retryPolicy": {
                              "type": "exponential",
                              "count": 3,
                              "interval": "PT5S",
                              "minimumInterval": "PT5S",
                              "maximumInterval": "PT30S"
                            },
                            "timeout": "PT90S"
                          }
                        },
                        "Add_Poll_Result": {
                          "runAfter": {
                            "Call_Async_Poll_Playbook": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "PollingResults",
                            "value": {
                              "job_id": "@item()?['job_id']",
                              "poll_response": "@body('Call_Async_Poll_Playbook')",
                              "original_job_info": "@item()"
                            }
                          }
                        },
                        "Add_Failed_Poll_Result": {
                          "runAfter": {
                            "Call_Async_Poll_Playbook": [
                              "Failed",
                              "TimedOut"
                            ]
                          },
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "PollingResults",
                            "value": {
                              "job_id": "@item()?['job_id']",
                              "poll_response": {
                                "success": false,
                                "error": "Failed to poll job or timeout occurred"
                              },
                              "original_job_info": "@item()"
                            }
                          }
                        }
                      },
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Return_Response": {
                      "runAfter": {
                        "Poll_All_Jobs": [
                          "Succeeded",
                          "Skipped"
                        ],
                        "Call_Auth_Playbook": [
                          "Failed",
                          "TimedOut"
                        ],
                        "Get_IP_NetworkInterfaces": [
                          "Failed",
                          "TimedOut"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 401, if(or(equals(actions('Get_IP_NetworkInterfaces')['status'], 'Failed'), equals(actions('Get_IP_NetworkInterfaces')['status'], 'TimedOut')), 500, if(equals(variables('EnrichmentStatusCode'), 200), 200, if(equals(variables('EnrichmentStatusCode'), 0), 500, variables('EnrichmentStatusCode')))))",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "success": "@and(not(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut'))), not(or(equals(actions('Get_IP_NetworkInterfaces')['status'], 'Failed'), equals(actions('Get_IP_NetworkInterfaces')['status'], 'TimedOut'))), equals(variables('EnrichmentStatusCode'), 200))",
                          "error": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'Authentication failed in auth playbook', if(or(equals(actions('Get_IP_NetworkInterfaces')['status'], 'Failed'), equals(actions('Get_IP_NetworkInterfaces')['status'], 'TimedOut')), 'Failed retrieving IP network interfaces data', null))",
                          "stage": "@if(or(equals(actions('Call_Auth_Playbook')['status'], 'Failed'), equals(actions('Call_Auth_Playbook')['status'], 'TimedOut')), 'auth', if(or(equals(actions('Get_IP_NetworkInterfaces')['status'], 'Failed'), equals(actions('Get_IP_NetworkInterfaces')['status'], 'TimedOut')), 'enrichment', 'success'))",
                          "account_id": "@variables('AccountId')",
                          "ip_address": "@variables('IpAddress')",
                          "enrichment": {
                            "statusCode": "@variables('EnrichmentStatusCode')",
                            "job_ids_count": "@length(variables('JobIds'))",
                            "polling_results_count": "@length(variables('PollingResults'))",
                            "original_jobs": "@variables('JobIds')",
                            "polling_results": "@variables('PollingResults')",
                            "raw_initial_response": "@body('Get_IP_NetworkInterfaces')"
                          },
                          "callbackData": "@variables('CallbackData')",
                          "timestamp": "@utcnow()"
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId6'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId6')]",
                "contentId": "[variables('_playbookContentId6')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion6')]",
                "source": {
                  "kind": "Solution",
                  "name": "NetAppRPS",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "NetApp",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "NetApp",
                  "email": "support@netapp.com",
                  "tier": "Partner",
                  "link": "https://support.netapp.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "NetApp RPS Enrich IP Playbook",
            "description": "This playbook enriches IP data by calling the updated NetApp RPS enrich IP address API endpoint and asynchronously polls multiple job results.",
            "prerequisites": [
              "1. NetApp RPS Auth Playbook must be deployed first",
              "2. NetApp RPS Async Poll Playbook must be deployed",
              "3. Valid NetApp RPS API credentials configured in the Auth Playbook",
              "4. Caller must provide ip_address parameter"
            ],
            "postDeployment": [
              "1. Ensure the Auth Playbook is working correctly",
              "2. Ensure the Async Poll Playbook is deployed and functional",
              "3. Test the IP enrichment functionality with valid IP address",
              "4. Verify the new POST API endpoint is accessible and returns job information with agent_id"
            ],
            "lastUpdateTime": "2025-09-26T00:00:00Z",
            "tags": [
              "NetApp",
              "RPS",
              "Playbook",
              "IP",
              "Enrich",
              "NetworkInterface"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId6')]",
        "contentKind": "Playbook",
        "displayName": "NetAppRPS-Enrich-IP-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId6')]",
        "id": "[variables('_playbookcontentProductId6')]",
        "version": "[variables('playbookVersion6')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "NetAppRPS",
        "publisherDisplayName": "NetApp",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/NetAppRPS/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>NetApp RPS (Ransomware Protection Service) - Comprehensive security solution for detecting and responding to ransomware threats across NetApp storage environments.</p>\n<p><strong>Data Connectors:</strong> 1, <strong>Analytic Rules:</strong> 2, <strong>Playbooks:</strong> 6</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<svg width=\"112\" height=\"20\" viewBox=\"0 0 112 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"logo\" style=\"margin-bottom: 60px;\"><g clip-path=\"url(#clip0_574_17087)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M108.136 11.0524V11.0132C108.136 9.14993 106.718 7.91269 105.042 7.91269C103.365 7.91269 101.972 9.14869 101.972 11.0132V11.0542C101.972 12.9175 103.368 14.1597 105.042 14.1597C106.715 14.1597 108.136 12.9387 108.136 11.0524ZM98.4301 5.41586H102.021V7.03073C102.459 6.45657 103.049 5.98961 103.737 5.67176C104.425 5.35391 105.19 5.19512 105.963 5.20965C108.916 5.20965 111.724 7.26302 111.724 11.0132V11.0542C111.724 14.8057 108.962 16.859 105.963 16.859C105.207 16.8741 104.457 16.7304 103.773 16.4394C103.089 16.1484 102.489 15.7179 102.021 15.1821V20.0006H98.4301V5.41586Z\" fill=\"black\"></path><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M27.1606 1.87695H30.517L38.2617 11.0121V1.87695H41.8475V16.6499H38.7548L30.7526 7.32278V16.6499H27.1606V1.87695Z\" fill=\"black\"></path><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M52.5221 10.1524C52.3107 8.72385 51.3656 7.76238 49.8558 7.76238C48.366 7.76238 47.3969 8.70956 47.1145 10.1524H52.5221ZM43.5962 11.0958V11.053C43.5644 10.2945 43.703 9.53815 44.0035 8.82921C44.3041 8.12027 44.7604 7.47342 45.3451 6.92748C45.9298 6.38155 46.6308 5.9478 47.4061 5.65228C48.1814 5.35677 49.0149 5.20557 49.8565 5.20779C54.0822 5.20779 56.0177 8.12013 56.0177 11.3058C56.0177 11.5542 55.9964 11.8511 55.9702 12.1436H47.1613C47.281 12.7921 47.6646 13.3769 48.237 13.784C48.8094 14.191 49.5295 14.391 50.2567 14.3448C50.8287 14.3523 51.3963 14.2538 51.9244 14.0554C52.4525 13.857 52.9297 13.5629 53.3266 13.1914L55.3792 14.8063C54.7561 15.4916 53.9654 16.0374 53.0691 16.401C52.1728 16.7646 51.1954 16.936 50.2133 16.9019C46.4064 16.8994 43.5962 14.5324 43.5962 11.0958V11.0958Z\" fill=\"black\"></path><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M58.2596 8.14001H56.7484V5.41648H58.2596V2.54761H61.8468V5.41648H64.8251V8.14001H61.8468V12.9393C61.8468 13.6728 62.2028 14.0299 63.0046 14.0299C63.6233 14.0328 64.2329 13.8951 64.7769 13.6293V16.187C63.9162 16.6371 62.9336 16.8622 61.939 16.8373C59.7453 16.8373 58.2589 16.0609 58.2589 13.4622L58.2596 8.14001Z\" fill=\"black\"></path><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M93.3768 11.0524V11.0133C93.3768 9.14997 91.9593 7.91273 90.2848 7.91273C88.6104 7.91273 87.2163 9.14873 87.2163 11.0133V11.0543C87.2163 12.9176 88.609 14.1598 90.2848 14.1598C91.9607 14.1598 93.3768 12.9387 93.3768 11.0524ZM83.6739 5.4159H87.2631V7.03077C87.7016 6.45636 88.2915 5.98922 88.9798 5.67135C89.6682 5.35348 90.4333 5.19484 91.2064 5.2097C94.1592 5.2097 96.9674 7.26306 96.9674 11.0133V11.0543C96.9674 14.8057 94.2054 16.8591 91.2064 16.8591C90.45 16.874 89.7001 16.7303 89.0158 16.4392C88.3315 16.1482 87.7315 15.7179 87.2631 15.1821V20.0006H83.6739V5.4159Z\" fill=\"black\"></path><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M76.387 10.5108L74.1912 5.75254L71.9939 10.5133L76.387 10.5108ZM72.6028 1.875H75.8704L82.7775 16.6492H78.9892L77.467 13.3573H70.9133L69.4014 16.6492H65.6957L72.6028 1.875Z\" fill=\"black\"></path><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 16.877H7.5095V7.87695H11.8008V16.877H19.3103V1.87695H0V16.877Z\" fill=\"black\"></path></g><defs><clipPath id=\"clip0_574_17087\"><rect width=\"111.724\" height=\"20\" fill=\"white\"></rect></clipPath></defs></svg>",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "NetAppRPS",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "NetApp",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "NetApp",
          "email": "support@netapp.com",
          "tier": "Partner",
          "link": "https://support.netapp.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_NetApp-RPS-Auth-Playbook')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RPS_Volume_Offline_Playbook')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RPS_Async_Poll_Playbook')]",
              "version": "[variables('playbookVersion3')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RPS_Volume_Snapshot_Playbook')]",
              "version": "[variables('playbookVersion4')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RPS_Enrich_StorageVM_Playbook')]",
              "version": "[variables('playbookVersion5')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RPS_Enrich_IP_Playbook')]",
              "version": "[variables('playbookVersion6')]"
            }
          ]
        },
        "firstPublishDate": "2025-08-28",
        "lastPublishDate": "2025-08-28",
        "providers": [
          "NetApp"
        ],
        "categories": {
          "domains": [
            "Security - Ransomware Protection",
            "Storage"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
