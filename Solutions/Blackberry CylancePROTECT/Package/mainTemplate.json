{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft",
    "comments": "Solution template for Blackberry CylancePROTECT"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "_solutionName": "Blackberry CylancePROTECT",
    "_solutionVersion": "3.0.1",
    "solutionId": "azuresentinel.azure-sentinel-solution-blackberrycylanceprotect",
    "_solutionId": "[variables('solutionId')]",
    "parserObject1": {
      "_parserName1": "[concat(parameters('workspace'),'/','CylancePROTECT')]",
      "_parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CylancePROTECT')]",
      "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('CylancePROTECT-Parser')))]",
      "parserVersion1": "1.0.0",
      "parserContentId1": "CylancePROTECT-Parser"
    },
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject1').parserTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "CylancePROTECT Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject1').parserVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject1')._parserName1]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "CylancePROTECT",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "CylancePROTECT",
                "query": "let LogHeader = Syslog\n| where Computer in (\"sysloghost\") // Replace sysloghost with the name of your syslog server\n| extend EventType = extract(@\"^\\W*([\\w-]+),\",1,SyslogMessage),\n        EventName = extract(@\"Event Name: ([^,]+),\",1,SyslogMessage),\n        DeviceName = extract(@\"Device Name: ([^,]+),\",1,SyslogMessage);\nlet DeviceEvents = LogHeader\n| where SyslogMessage contains \"Device,\"\n| extend AgentVersion = extract(@\"Agent Version: ([^,]+),\",1,SyslogMessage),\n        SrcIpAddr = split(extract(@\"IP Address: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        SrcMacAddr = split(extract(@\"MAC Address: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        LoggedOnUsers = split(extract(@\"Logged On Users: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        OsVersion = extract(@\"OS: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone Names: \\(([^)]+)\\)(,|$)\",1,SyslogMessage),\",\");\nlet ScriptControlEvents = LogHeader\n| where SyslogMessage contains \"ScriptControl\"\n| extend FilePath = extract(@\"File Path: ([^,]+),\",1,SyslogMessage),\n        FileHashSha256 = extract(@\"SHA256: ([^,]+),\",1,SyslogMessage),\n        Interpreter = extract(@\"Interpreter: ([^,]+),\",1,SyslogMessage),\n        InterpreterVersion = extract(@\"Interpreter Version: ([^,]+),\",1,SyslogMessage),\n        UserName = extract(@\"User Name: ([^,]+),\",1,SyslogMessage),\n        DeviceId = extract(@\"Device Id: ([^,]+),\",1,SyslogMessage),\n        PolicyName = extract(@\"Policy Name: ([^,]+)(,|$)\",1,SyslogMessage);\nlet ThreatEvents = LogHeader\n| where SyslogMessage contains \"Threat\"\n| extend SrcIpAddr = split(extract(@\"IP Address: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        FileName = extract(@\"File Name: ([^,]+),\",1,SyslogMessage),\n        Path = extract(@\"Path: ([^,]+)(,|$)\",1,SyslogMessage),\n        DriveType = extract(@\"Drive Type: ([^,]+),\",1,SyslogMessage),\n        FileHashSha256 = extract(@\"SHA256: ([^,]+),\",1,SyslogMessage),\n        FileHashMd5 = extract(@\"MD5: ([^,]+),\",1,SyslogMessage),\n        Status = extract(@\"Status: ([^,]+),\",1,SyslogMessage),\n        CylanceScore = extract(@\"Cylance Score: ([^,]+),\",1,SyslogMessage),\n        FoundDate = extract(@\"Found Date: ([^,]+),\",1,SyslogMessage),\n        FileType = extract(@\"File Type: ([^,]+),\",1,SyslogMessage),\n        IsRunning = extract(@\"Is Running: ([^,]+),\",1,SyslogMessage),\n        AutoRun = extract(@\"Auto Run: ([^,]+),\",1,SyslogMessage),\n        DetectedBy = extract(@\"Detected By: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone Names: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        IsMalware = extract(@\"Is Malware: ([^,]+),\",1,SyslogMessage),\n        IsUniqueToCylance = extract(@\"Is Unique To Cylance: ([^,]+),\",1,SyslogMessage),\n        ThreatClassification = extract(@\"Threat Classification: ([^,]+),\",1,SyslogMessage),\n        DeviceId = extract(@\"Device Id: ([^,]+),\",1,SyslogMessage),\n        PolicyName = extract(@\"Policy Name: ([^,]+)(,|$)\",1,SyslogMessage);\nlet DeviceControlEvents = LogHeader\n| where SyslogMessage contains \"DeviceControl\"\n| extend ExtDeviceType = extract(@\"External Device Type: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceVendorId = extract(@\"External Device Vendor ID: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceName = extract(@\"External Device Name: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceProductId = extract(@\"External Device Product ID: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceSerialNumber = extract(@\"External Device Serial Number: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone Names: \\(([^)]+)\\)(,|$)\",1,SyslogMessage),\",\"),\n        DeviceId = extract(@\"Device Id: ([^,]+),\",1,SyslogMessage),\n        PolicyName = extract(@\"Policy Name: ([^,]+)(,|$)\",1,SyslogMessage);\nlet AuditLog = LogHeader\n| where SyslogMessage contains \"AuditLog\"\n| extend Provider = extract(@\"Provider: ([^,]+),\",1,SyslogMessage),\n        PolicyChanged = extract(@\"Policy Changed: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone: ([^,]+)(,|$)\",1,SyslogMessage),\",\"),\n        UserName = extract(@\"User: ([^,]+)(,|$)\",1,SyslogMessage),\n        DeviceName = extract(@\"Devices?:\\s([\\w\\d\\-\\_]+)\\,\",1,SyslogMessage),\n        SrcIpAddr = split(extract(@\"Source IP: ([\\w\\.\\:]+)\\,\",1,SyslogMessage),\",\");\nlet NoEventType = LogHeader\n| where isempty(SyslogMessage)\n| extend EventType = iif(isempty(EventType),\"Other\",EventType)\n| extend AgentVersion = tostring(parse_json(SyslogMessage).[\"Agent Version\"]),\n        BackgroundDetection = tostring(parse_json(SyslogMessage).[\"Background Detection\"]),\n        EventCreationTime = tostring(parse_json(SyslogMessage).Created),\n        DeviceName = tostring(parse_json(SyslogMessage).[\"Device Name\"]),\n        FilesAnalyzed = toint(parse_json(SyslogMessage).[\"Files Analyzed\"]),\n        SrcIpAddr = split(parse_json(SyslogMessage).[\"IP Addresses\"],\",\"),\n        IsOnline = tostring(parse_json(SyslogMessage).[\"Is Online\"]),\n        LastReportedUser = tostring(parse_json(SyslogMessage).[\"Last Reported User\"]),\n        SrcMacAddr = split(parse_json(SyslogMessage).[\"Mac Addresses\"],\",\"),\n        OsVersion = tostring(parse_json(SyslogMessage).[\"OS Version\"]),\n        OfflineDate = tostring(parse_json(SyslogMessage).[\"Offline Date\"]),\n        OnlineDate = tostring(parse_json(SyslogMessage).[\"Online Date\"]),\n        Policy = tostring(parse_json(SyslogMessage).Policy),\n        SerialNumber = tostring(parse_json(SyslogMessage).[\"Serial Number\"]), \n        Tenant = tostring(parse_json(SyslogMessage).Tenant),\n        ZoneNames = split(parse_json(SyslogMessage).Zones,\",\")\n| extend AvIndustry = tostring(parse_json(SyslogMessage).[\"AV Industry\"]),\n        AccessTime = tostring(parse_json(SyslogMessage).[\"Access Time\"]),\n        AutoRun = tostring(parse_json(SyslogMessage).[\"Auto Run\"]),\n        CertIssuer = tostring(parse_json(SyslogMessage).[\"Cert Issuer\"]),\n        CertPublisher = tostring(parse_json(SyslogMessage).[\"Cert Publisher\"]),\n        CertSubject = tostring(parse_json(SyslogMessage).[\"Cert Subject\"]),\n        CertTimestamp = tostring(parse_json(SyslogMessage).[\"Cert Timestamp\"]),\n        Classification_ = tostring(parse_json(SyslogMessage).Classification),\n        CompanyName = tostring(parse_json(SyslogMessage).[\"Company Name\"]),\n        Copyright = tostring(parse_json(SyslogMessage).Copyright),\n        CreateTime = tostring(parse_json(SyslogMessage).[\"Create Time\"]),\n        CylanceScore = tostring(parse_json(SyslogMessage).[\"Cylance Score\"]),\n        Description = tostring(parse_json(SyslogMessage).Description),\n        DetectedBy = tostring(parse_json(SyslogMessage).[\"Detected By\"]),\n        DriveType = tostring(parse_json(SyslogMessage).[\"Drive Type\"]),\n        EverRun = tostring(parse_json(SyslogMessage).[\"Ever Run\"]),\n        FileName = tostring(parse_json(SyslogMessage).[\"File Name\"]),\n        FileOwner = tostring(parse_json(SyslogMessage).[\"File Owner\"]),\n        FilePath = tostring(parse_json(SyslogMessage).[\"File Path\"]),\n        FileSize = tostring(parse_json(SyslogMessage).[\"File Size (bytes)\"]),\n        FileStatus = tostring(parse_json(SyslogMessage).[\"File Status\"]),\n        FileVersion = tostring(parse_json(SyslogMessage).[\"File Version\"]),\n        FirstFound = tostring(parse_json(SyslogMessage).[\"First Found\"]),\n        GlobalQuarantined = tostring(parse_json(SyslogMessage).[\"Global Quarantined\"]),\n        LastFound = tostring(parse_json(SyslogMessage).[\"Last Found\"]),\n        FileHashMd5 = tostring(parse_json(SyslogMessage).MD5),\n        ModificationTime = tostring(parse_json(SyslogMessage).[\"Modification Time\"]),\n        ProductName = tostring(parse_json(SyslogMessage).[\"Product Name\"]),\n        Running = tostring(parse_json(SyslogMessage).Running),\n        FileHashSha256 = tostring(parse_json(SyslogMessage).SHA256),\n        Safelisted = tostring(parse_json(SyslogMessage).Safelisted),\n        SerialNumber = tostring(parse_json(SyslogMessage).[\"Serial Number\"]),\n        SignatureStatus = tostring(parse_json(SyslogMessage).[\"Signature Status\"]),\n        Signed = tostring(parse_json(SyslogMessage).Signed);\nlet AllOtherEvents = LogHeader\n| where EventType !in (\"Device\", \"ScriptControl\", \"Threat\", \"DeviceControl\", \"AuditLog\", \"Other\");\nunion DeviceEvents, ScriptControlEvents, ThreatEvents, DeviceControlEvents, AuditLog, NoEventType, AllOtherEvents\n| where EventType != \"Other\"\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
              "dependsOn": [
                "[variables('parserObject1')._parserId1]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CylancePROTECT')]",
                "contentId": "[variables('parserObject1').parserContentId1]",
                "kind": "Parser",
                "version": "[variables('parserObject1').parserVersion1]",
                "source": {
                  "name": "Blackberry CylancePROTECT",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "contentKind": "Parser",
        "displayName": "CylancePROTECT",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "version": "[variables('parserObject1').parserVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject1')._parserName1]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "CylancePROTECT",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "CylancePROTECT",
        "query": "let LogHeader = Syslog\n| where Computer in (\"sysloghost\") // Replace sysloghost with the name of your syslog server\n| extend EventType = extract(@\"^\\W*([\\w-]+),\",1,SyslogMessage),\n        EventName = extract(@\"Event Name: ([^,]+),\",1,SyslogMessage),\n        DeviceName = extract(@\"Device Name: ([^,]+),\",1,SyslogMessage);\nlet DeviceEvents = LogHeader\n| where SyslogMessage contains \"Device,\"\n| extend AgentVersion = extract(@\"Agent Version: ([^,]+),\",1,SyslogMessage),\n        SrcIpAddr = split(extract(@\"IP Address: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        SrcMacAddr = split(extract(@\"MAC Address: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        LoggedOnUsers = split(extract(@\"Logged On Users: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        OsVersion = extract(@\"OS: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone Names: \\(([^)]+)\\)(,|$)\",1,SyslogMessage),\",\");\nlet ScriptControlEvents = LogHeader\n| where SyslogMessage contains \"ScriptControl\"\n| extend FilePath = extract(@\"File Path: ([^,]+),\",1,SyslogMessage),\n        FileHashSha256 = extract(@\"SHA256: ([^,]+),\",1,SyslogMessage),\n        Interpreter = extract(@\"Interpreter: ([^,]+),\",1,SyslogMessage),\n        InterpreterVersion = extract(@\"Interpreter Version: ([^,]+),\",1,SyslogMessage),\n        UserName = extract(@\"User Name: ([^,]+),\",1,SyslogMessage),\n        DeviceId = extract(@\"Device Id: ([^,]+),\",1,SyslogMessage),\n        PolicyName = extract(@\"Policy Name: ([^,]+)(,|$)\",1,SyslogMessage);\nlet ThreatEvents = LogHeader\n| where SyslogMessage contains \"Threat\"\n| extend SrcIpAddr = split(extract(@\"IP Address: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        FileName = extract(@\"File Name: ([^,]+),\",1,SyslogMessage),\n        Path = extract(@\"Path: ([^,]+)(,|$)\",1,SyslogMessage),\n        DriveType = extract(@\"Drive Type: ([^,]+),\",1,SyslogMessage),\n        FileHashSha256 = extract(@\"SHA256: ([^,]+),\",1,SyslogMessage),\n        FileHashMd5 = extract(@\"MD5: ([^,]+),\",1,SyslogMessage),\n        Status = extract(@\"Status: ([^,]+),\",1,SyslogMessage),\n        CylanceScore = extract(@\"Cylance Score: ([^,]+),\",1,SyslogMessage),\n        FoundDate = extract(@\"Found Date: ([^,]+),\",1,SyslogMessage),\n        FileType = extract(@\"File Type: ([^,]+),\",1,SyslogMessage),\n        IsRunning = extract(@\"Is Running: ([^,]+),\",1,SyslogMessage),\n        AutoRun = extract(@\"Auto Run: ([^,]+),\",1,SyslogMessage),\n        DetectedBy = extract(@\"Detected By: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone Names: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        IsMalware = extract(@\"Is Malware: ([^,]+),\",1,SyslogMessage),\n        IsUniqueToCylance = extract(@\"Is Unique To Cylance: ([^,]+),\",1,SyslogMessage),\n        ThreatClassification = extract(@\"Threat Classification: ([^,]+),\",1,SyslogMessage),\n        DeviceId = extract(@\"Device Id: ([^,]+),\",1,SyslogMessage),\n        PolicyName = extract(@\"Policy Name: ([^,]+)(,|$)\",1,SyslogMessage);\nlet DeviceControlEvents = LogHeader\n| where SyslogMessage contains \"DeviceControl\"\n| extend ExtDeviceType = extract(@\"External Device Type: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceVendorId = extract(@\"External Device Vendor ID: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceName = extract(@\"External Device Name: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceProductId = extract(@\"External Device Product ID: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceSerialNumber = extract(@\"External Device Serial Number: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone Names: \\(([^)]+)\\)(,|$)\",1,SyslogMessage),\",\"),\n        DeviceId = extract(@\"Device Id: ([^,]+),\",1,SyslogMessage),\n        PolicyName = extract(@\"Policy Name: ([^,]+)(,|$)\",1,SyslogMessage);\nlet AuditLog = LogHeader\n| where SyslogMessage contains \"AuditLog\"\n| extend Provider = extract(@\"Provider: ([^,]+),\",1,SyslogMessage),\n        PolicyChanged = extract(@\"Policy Changed: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone: ([^,]+)(,|$)\",1,SyslogMessage),\",\"),\n        UserName = extract(@\"User: ([^,]+)(,|$)\",1,SyslogMessage),\n        DeviceName = extract(@\"Devices?:\\s([\\w\\d\\-\\_]+)\\,\",1,SyslogMessage),\n        SrcIpAddr = split(extract(@\"Source IP: ([\\w\\.\\:]+)\\,\",1,SyslogMessage),\",\");\nlet NoEventType = LogHeader\n| where isempty(SyslogMessage)\n| extend EventType = iif(isempty(EventType),\"Other\",EventType)\n| extend AgentVersion = tostring(parse_json(SyslogMessage).[\"Agent Version\"]),\n        BackgroundDetection = tostring(parse_json(SyslogMessage).[\"Background Detection\"]),\n        EventCreationTime = tostring(parse_json(SyslogMessage).Created),\n        DeviceName = tostring(parse_json(SyslogMessage).[\"Device Name\"]),\n        FilesAnalyzed = toint(parse_json(SyslogMessage).[\"Files Analyzed\"]),\n        SrcIpAddr = split(parse_json(SyslogMessage).[\"IP Addresses\"],\",\"),\n        IsOnline = tostring(parse_json(SyslogMessage).[\"Is Online\"]),\n        LastReportedUser = tostring(parse_json(SyslogMessage).[\"Last Reported User\"]),\n        SrcMacAddr = split(parse_json(SyslogMessage).[\"Mac Addresses\"],\",\"),\n        OsVersion = tostring(parse_json(SyslogMessage).[\"OS Version\"]),\n        OfflineDate = tostring(parse_json(SyslogMessage).[\"Offline Date\"]),\n        OnlineDate = tostring(parse_json(SyslogMessage).[\"Online Date\"]),\n        Policy = tostring(parse_json(SyslogMessage).Policy),\n        SerialNumber = tostring(parse_json(SyslogMessage).[\"Serial Number\"]), \n        Tenant = tostring(parse_json(SyslogMessage).Tenant),\n        ZoneNames = split(parse_json(SyslogMessage).Zones,\",\")\n| extend AvIndustry = tostring(parse_json(SyslogMessage).[\"AV Industry\"]),\n        AccessTime = tostring(parse_json(SyslogMessage).[\"Access Time\"]),\n        AutoRun = tostring(parse_json(SyslogMessage).[\"Auto Run\"]),\n        CertIssuer = tostring(parse_json(SyslogMessage).[\"Cert Issuer\"]),\n        CertPublisher = tostring(parse_json(SyslogMessage).[\"Cert Publisher\"]),\n        CertSubject = tostring(parse_json(SyslogMessage).[\"Cert Subject\"]),\n        CertTimestamp = tostring(parse_json(SyslogMessage).[\"Cert Timestamp\"]),\n        Classification_ = tostring(parse_json(SyslogMessage).Classification),\n        CompanyName = tostring(parse_json(SyslogMessage).[\"Company Name\"]),\n        Copyright = tostring(parse_json(SyslogMessage).Copyright),\n        CreateTime = tostring(parse_json(SyslogMessage).[\"Create Time\"]),\n        CylanceScore = tostring(parse_json(SyslogMessage).[\"Cylance Score\"]),\n        Description = tostring(parse_json(SyslogMessage).Description),\n        DetectedBy = tostring(parse_json(SyslogMessage).[\"Detected By\"]),\n        DriveType = tostring(parse_json(SyslogMessage).[\"Drive Type\"]),\n        EverRun = tostring(parse_json(SyslogMessage).[\"Ever Run\"]),\n        FileName = tostring(parse_json(SyslogMessage).[\"File Name\"]),\n        FileOwner = tostring(parse_json(SyslogMessage).[\"File Owner\"]),\n        FilePath = tostring(parse_json(SyslogMessage).[\"File Path\"]),\n        FileSize = tostring(parse_json(SyslogMessage).[\"File Size (bytes)\"]),\n        FileStatus = tostring(parse_json(SyslogMessage).[\"File Status\"]),\n        FileVersion = tostring(parse_json(SyslogMessage).[\"File Version\"]),\n        FirstFound = tostring(parse_json(SyslogMessage).[\"First Found\"]),\n        GlobalQuarantined = tostring(parse_json(SyslogMessage).[\"Global Quarantined\"]),\n        LastFound = tostring(parse_json(SyslogMessage).[\"Last Found\"]),\n        FileHashMd5 = tostring(parse_json(SyslogMessage).MD5),\n        ModificationTime = tostring(parse_json(SyslogMessage).[\"Modification Time\"]),\n        ProductName = tostring(parse_json(SyslogMessage).[\"Product Name\"]),\n        Running = tostring(parse_json(SyslogMessage).Running),\n        FileHashSha256 = tostring(parse_json(SyslogMessage).SHA256),\n        Safelisted = tostring(parse_json(SyslogMessage).Safelisted),\n        SerialNumber = tostring(parse_json(SyslogMessage).[\"Serial Number\"]),\n        SignatureStatus = tostring(parse_json(SyslogMessage).[\"Signature Status\"]),\n        Signed = tostring(parse_json(SyslogMessage).Signed);\nlet AllOtherEvents = LogHeader\n| where EventType !in (\"Device\", \"ScriptControl\", \"Threat\", \"DeviceControl\", \"AuditLog\", \"Other\");\nunion DeviceEvents, ScriptControlEvents, ThreatEvents, DeviceControlEvents, AuditLog, NoEventType, AllOtherEvents\n| where EventType != \"Other\"\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
      "dependsOn": [
        "[variables('parserObject1')._parserId1]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CylancePROTECT')]",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "kind": "Parser",
        "version": "[variables('parserObject1').parserVersion1]",
        "source": {
          "kind": "Solution",
          "name": "Blackberry CylancePROTECT",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.1",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Blackberry CylancePROTECT",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Blackberry%20CylancePROTECT/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://www.blackberry.com/us/en/products/cylance-endpoint-security/cylance-protect\">Blackberry CylancePROTECT</a> connector allows you to easily connect your CylancePROTECT logs with Microsoft Sentinel.</p>\n<p>This solution is dependent on the Syslog solution containing the Syslog via AMA connector to collect the logs. The Syslog solution will be installed as part of this solution installation.</p>\n<p><strong>NOTE</strong>: Microsoft recommends installation of Syslog via AMA Connector. Legacy connector uses the Log Analytics agent which were deprecated on <strong>Aug 31, 2024.</strong> Using MMA and AMA on same machine can cause log duplication and extra ingestion cost <a href=\"https://learn.microsoft.com/en-us/azure/sentinel/ama-migrate\">more details</a>.</p>\n<p><strong>Parsers:</strong> 1</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/Azure_Sentinel.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Blackberry CylancePROTECT",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "criteria": [
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject1').parserContentId1]",
              "version": "[variables('parserObject1').parserVersion1]"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-syslog"
            }
          ]
        },
        "firstPublishDate": "2022-05-20",
        "providers": [
          "Blackberry"
        ],
        "categories": {
          "domains": [
            "Security - Threat Protection"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
