{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft-support@microsoft.com",
    "comments": "Solution template for Citrix ADC"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "_solutionName": "Citrix ADC",
    "_solutionVersion": "3.0.3",
    "solutionId": "azuresentinel.azure-sentinel-solution-citrixadc",
    "_solutionId": "[variables('solutionId')]",
    "parserObject1": {
      "_parserName1": "[concat(parameters('workspace'),'/','CitrixADCEvent')]",
      "_parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CitrixADCEvent')]",
      "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('CitrixADCEvent-Parser')))]",
      "parserVersion1": "1.1.0",
      "parserContentId1": "CitrixADCEvent-Parser"
    },
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject1').parserTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "CitrixADCEvent Data Parser with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject1').parserVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject1')._parserName1]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "CitrixADCEvent",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "CitrixADCEvent",
                "query": "let forwarder_host_names = dynamic([\"datasource\"]);\nlet datasource = (_GetWatchlist('ASimSourceType')| where SearchKey == 'CitrixADC' | project Source);\nlet EventData = Syslog\n| where Computer in (datasource) or CollectorHostName in (datasource) or Computer in (forwarder_host_names) or CollectorHostName in (forwarder_host_names);\nlet AllData = EventData\n| parse SyslogMessage with DateTime \" \" TimeZone \" \" HostName \" \" * \" : \" * \" \" Feature \" \" MessageType \" \" RequestId:long \" \" * \" : \" MessageRemaining1\n| parse MessageRemaining1 with \"Context \" Context \" - SessionId: \" SessionId:long \" \" MessageRemaining  \n| extend MessageRemaining = coalesce(MessageRemaining, MessageRemaining1);\nlet BotData = AllData\n| where Feature =~ \"BOT\"\n| parse MessageRemaining with BotType \".\" FieldMapping\n| parse-kv FieldMapping as (URL:string, LogMsg:string, Category:string, [\"User-Agent\"]:string, Type:string, NewlyaddedRules:int, DeletedRules:int) with (pair_delimiter=':', kv_delimiter=' ', quote=\"'\");\nlet ALGData = AllData\n| where Feature =~ \"ALG\"\n| parse-kv MessageRemaining as (Errmsg:string, Group:string, Call_ID:string, Transport:string, Source_IP:string, Source_port:int, Destination_IP:string, Destination_port:int, Natted_IP:string, Natted_port:int, Method:string, Sequence_Number:int, Register:string, Content_Type:string, Error:string, Error_line:string, Caller_user_name:string, Callee_user_name:string, Caller_domain_name:string, Callee_domain_name:string, Error_Code:int, Infomsg:string, Session_ID:string ) with (pair_delimiter='-', kv_delimiter=':', quote=\"'\");\nlet RemainingData = AllData \n| where not(Feature has_any (\"BOT\", \"APPFW_RESP\", \"APPFW\", \"ALG\"))\n| parse MessageRemaining with * \"User \" User \" \" *\n| parse-kv MessageRemaining as (Client_ip:string, Browser:string, Failure_reason:string, Vserver:string, SSLVPN_client_type:string, [\"Group(s)\"]:string, Nat_ip:string, Browser_type:string, Start_time:string, End_time:string, Duration:string, Http_resources_accessed:int, NonHttp_services_accessed:int, Total_TCP_connections:int, Total_UDP_flows:int, Total_policies_allowed:int,  Total_policies_denied:int, Total_bytes_send:int, Total_bytes_recv:int, Total_compressedbytes_send:int, Total_compressedbytes_recv:int, Compression_ratio_send:string, Compression_ratio_recv:string, LogoutMethod:string, Destination:string, customername:string, applicationName:string, connectionId:string, startTime:string, endTime:string, Source:string, Access:string, Last_contact:string, Denied_by_policy:string, ClientIP:string, Client_security_expression:string, Clientsecuritycheck:string, Xdata:string, Vserver_ip:string, Errmsg:string, State:string, Remote_ip:string, Command:string, Status:string, DelinkTime:string, ClosureReason:string, ProtocolICMP:string, Type:string, Code:int, TimeStamp:string, Hitcount:int, HitRule:string, Action:string, Category:string, Domain:string, Session:string, FailureReason:string, Categorygroup:string, Reputation:string, Policyaction:string, ICAPServer:string, [\"Content-Type\"]:string, Mode:string, Service:string, Response:string, ID:int, Protocol:string, URL:string, BytesSent:int, BytesReceived:int, OriginServer:string, RequestBytesSent:int, ResponseBytesSent:int, License_limit:int, Xdatalen:int, BackendSPCBId:int, ServerIP:string,ServerPort:int, ProtocolVersion:string, CipherSuite:string, CertificateKeyPair:string, DaysToExpire:int, IssuerName:string, SubjectName:string, crl_name:string, server_port:int, [\"methodLDAP-ldapscope\"]:string, Client:string, Profile:string, into:string, FailedtoparserequestURL:string, Header:string, Value:string, PCREerrorcode:int, Failedtowrite:string, session_guid:string, device_serial_number:int, [\"flags\"]:long, session_setup_time:string, client_type:int, client_launcher:int, client_version:string, client_hostname:string, domain_name:string, server_name:string, connection_priority:int, access_type:int, status:int, username:string, client_cookie:string, channel_update_begin:string, channel_update_end:string, channel_id_1:int, channel_id_1_val:int, channel_id_2:int, channel_id_2_val:int, channel_id_3:int, channel_id_3_val:int, channel_id_4:int, channel_id_4_val:int, channel_id_5:int, channel_id_5_val:int, nsica_session_status:int, nsica_session_client_ip:string, nsica_session_client_port:int, nsica_session_server_ip:string, nsica_session_server_port:int, nsica_session_reconnect_count:int, nsica_session_acr_count:int, timestamp:string,  nsica_status:int, L7LatencyThresholdFactor:int, L7LatencyWaittime:int, L7LatencyNotifyInterval:int, L7LatencyMaxNotifyCount:int, L7ThresholdBreachAvgClientsideLatency:int, L7ThresholdBreachMaxClientsideLatency:int, L7ThresholdBreachAvgServersideLatency:int, L7ThresholdBreachMaxServersideLatency:int, MinL7Latency:int, session_end_time:int, ica_rtt:int, clientside_rxbytes:int, clientside_txbytes:int, clientside_packet_retransmits:int, serverside_packet_retransmits:int, clientside_rtt:int, serverside_rtt:int, clientside_jitter:int, serverside_jitter:int, startup_duration:int, launch_mechanism:int, app_launch_time:string, app_process_id:int, app_name:string, module_path:string, app_termination_type:int, app_termination_time:string,Total_bytes_wire_send:long, Total_bytes_wire_recv:long) with (pair_delimiter='-', kv_delimiter=' ', quote='\"')\n| project-rename Groups_1 = [\"Group(s)\"], User_1 = User, Command_1 = Command, Vserver_1 = Vserver, Source_1 = Source\n| parse-kv MessageRemaining as (Extracted_groups:string, Command:string, [\"Group(s)\"]:string, Vserver:string, [\"SSO is\"]:string, SAVECONFIG:string, User:string, Device:string, Source:string, domainname:string) with (pair_delimiter=':', kv_delimiter=' ', quote=\"'\", quote='\"')\n| extend Groups = coalesce([\"Group(s)\"], Groups_1), User = coalesce(User_1, User), Command = coalesce(Command_1, Command), Vserver = coalesce(Vserver, Vserver_1), Source = coalesce(Source_1, Source)\n| parse-kv MessageRemaining as (client_cookie:string, UserName:string ) with (pair_delimiter='-', kv_delimiter=':', quote=\"'\")\n| project-away *_1, MessageRemaining1, MessageRemaining;\nunion BotData,ALGData,RemainingData\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
              "dependsOn": [
                "[variables('parserObject1')._parserId1]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CitrixADCEvent')]",
                "contentId": "[variables('parserObject1').parserContentId1]",
                "kind": "Parser",
                "version": "[variables('parserObject1').parserVersion1]",
                "source": {
                  "name": "Citrix ADC",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft-support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "contentKind": "Parser",
        "displayName": "CitrixADCEvent",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.1.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.1.0')))]",
        "version": "[variables('parserObject1').parserVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject1')._parserName1]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "CitrixADCEvent",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "CitrixADCEvent",
        "query": "let forwarder_host_names = dynamic([\"datasource\"]);\nlet datasource = (_GetWatchlist('ASimSourceType')| where SearchKey == 'CitrixADC' | project Source);\nlet EventData = Syslog\n| where Computer in (datasource) or CollectorHostName in (datasource) or Computer in (forwarder_host_names) or CollectorHostName in (forwarder_host_names);\nlet AllData = EventData\n| parse SyslogMessage with DateTime \" \" TimeZone \" \" HostName \" \" * \" : \" * \" \" Feature \" \" MessageType \" \" RequestId:long \" \" * \" : \" MessageRemaining1\n| parse MessageRemaining1 with \"Context \" Context \" - SessionId: \" SessionId:long \" \" MessageRemaining  \n| extend MessageRemaining = coalesce(MessageRemaining, MessageRemaining1);\nlet BotData = AllData\n| where Feature =~ \"BOT\"\n| parse MessageRemaining with BotType \".\" FieldMapping\n| parse-kv FieldMapping as (URL:string, LogMsg:string, Category:string, [\"User-Agent\"]:string, Type:string, NewlyaddedRules:int, DeletedRules:int) with (pair_delimiter=':', kv_delimiter=' ', quote=\"'\");\nlet ALGData = AllData\n| where Feature =~ \"ALG\"\n| parse-kv MessageRemaining as (Errmsg:string, Group:string, Call_ID:string, Transport:string, Source_IP:string, Source_port:int, Destination_IP:string, Destination_port:int, Natted_IP:string, Natted_port:int, Method:string, Sequence_Number:int, Register:string, Content_Type:string, Error:string, Error_line:string, Caller_user_name:string, Callee_user_name:string, Caller_domain_name:string, Callee_domain_name:string, Error_Code:int, Infomsg:string, Session_ID:string ) with (pair_delimiter='-', kv_delimiter=':', quote=\"'\");\nlet RemainingData = AllData \n| where not(Feature has_any (\"BOT\", \"APPFW_RESP\", \"APPFW\", \"ALG\"))\n| parse MessageRemaining with * \"User \" User \" \" *\n| parse-kv MessageRemaining as (Client_ip:string, Browser:string, Failure_reason:string, Vserver:string, SSLVPN_client_type:string, [\"Group(s)\"]:string, Nat_ip:string, Browser_type:string, Start_time:string, End_time:string, Duration:string, Http_resources_accessed:int, NonHttp_services_accessed:int, Total_TCP_connections:int, Total_UDP_flows:int, Total_policies_allowed:int,  Total_policies_denied:int, Total_bytes_send:int, Total_bytes_recv:int, Total_compressedbytes_send:int, Total_compressedbytes_recv:int, Compression_ratio_send:string, Compression_ratio_recv:string, LogoutMethod:string, Destination:string, customername:string, applicationName:string, connectionId:string, startTime:string, endTime:string, Source:string, Access:string, Last_contact:string, Denied_by_policy:string, ClientIP:string, Client_security_expression:string, Clientsecuritycheck:string, Xdata:string, Vserver_ip:string, Errmsg:string, State:string, Remote_ip:string, Command:string, Status:string, DelinkTime:string, ClosureReason:string, ProtocolICMP:string, Type:string, Code:int, TimeStamp:string, Hitcount:int, HitRule:string, Action:string, Category:string, Domain:string, Session:string, FailureReason:string, Categorygroup:string, Reputation:string, Policyaction:string, ICAPServer:string, [\"Content-Type\"]:string, Mode:string, Service:string, Response:string, ID:int, Protocol:string, URL:string, BytesSent:int, BytesReceived:int, OriginServer:string, RequestBytesSent:int, ResponseBytesSent:int, License_limit:int, Xdatalen:int, BackendSPCBId:int, ServerIP:string,ServerPort:int, ProtocolVersion:string, CipherSuite:string, CertificateKeyPair:string, DaysToExpire:int, IssuerName:string, SubjectName:string, crl_name:string, server_port:int, [\"methodLDAP-ldapscope\"]:string, Client:string, Profile:string, into:string, FailedtoparserequestURL:string, Header:string, Value:string, PCREerrorcode:int, Failedtowrite:string, session_guid:string, device_serial_number:int, [\"flags\"]:long, session_setup_time:string, client_type:int, client_launcher:int, client_version:string, client_hostname:string, domain_name:string, server_name:string, connection_priority:int, access_type:int, status:int, username:string, client_cookie:string, channel_update_begin:string, channel_update_end:string, channel_id_1:int, channel_id_1_val:int, channel_id_2:int, channel_id_2_val:int, channel_id_3:int, channel_id_3_val:int, channel_id_4:int, channel_id_4_val:int, channel_id_5:int, channel_id_5_val:int, nsica_session_status:int, nsica_session_client_ip:string, nsica_session_client_port:int, nsica_session_server_ip:string, nsica_session_server_port:int, nsica_session_reconnect_count:int, nsica_session_acr_count:int, timestamp:string,  nsica_status:int, L7LatencyThresholdFactor:int, L7LatencyWaittime:int, L7LatencyNotifyInterval:int, L7LatencyMaxNotifyCount:int, L7ThresholdBreachAvgClientsideLatency:int, L7ThresholdBreachMaxClientsideLatency:int, L7ThresholdBreachAvgServersideLatency:int, L7ThresholdBreachMaxServersideLatency:int, MinL7Latency:int, session_end_time:int, ica_rtt:int, clientside_rxbytes:int, clientside_txbytes:int, clientside_packet_retransmits:int, serverside_packet_retransmits:int, clientside_rtt:int, serverside_rtt:int, clientside_jitter:int, serverside_jitter:int, startup_duration:int, launch_mechanism:int, app_launch_time:string, app_process_id:int, app_name:string, module_path:string, app_termination_type:int, app_termination_time:string,Total_bytes_wire_send:long, Total_bytes_wire_recv:long) with (pair_delimiter='-', kv_delimiter=' ', quote='\"')\n| project-rename Groups_1 = [\"Group(s)\"], User_1 = User, Command_1 = Command, Vserver_1 = Vserver, Source_1 = Source\n| parse-kv MessageRemaining as (Extracted_groups:string, Command:string, [\"Group(s)\"]:string, Vserver:string, [\"SSO is\"]:string, SAVECONFIG:string, User:string, Device:string, Source:string, domainname:string) with (pair_delimiter=':', kv_delimiter=' ', quote=\"'\", quote='\"')\n| extend Groups = coalesce([\"Group(s)\"], Groups_1), User = coalesce(User_1, User), Command = coalesce(Command_1, Command), Vserver = coalesce(Vserver, Vserver_1), Source = coalesce(Source_1, Source)\n| parse-kv MessageRemaining as (client_cookie:string, UserName:string ) with (pair_delimiter='-', kv_delimiter=':', quote=\"'\")\n| project-away *_1, MessageRemaining1, MessageRemaining;\nunion BotData,ALGData,RemainingData\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
      "dependsOn": [
        "[variables('parserObject1')._parserId1]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CitrixADCEvent')]",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "kind": "Parser",
        "version": "[variables('parserObject1').parserVersion1]",
        "source": {
          "kind": "Solution",
          "name": "Citrix ADC",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft-support@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.3",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Citrix ADC",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Citrix%20ADC/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://www.citrix.com/products/citrix-adc/\">Citrix ADC</a> (formerly NetScaler) enables you to ingest Citrix ADC logs into Microsoft Sentinel. Refer the <a href=\"https://support.citrix.com/article/CTX227560\">Citrix ADC log collection guide</a> for more details.</p>\n<p>This solution is dependent on the Syslog solution containing the Syslog via AMA connector to collect the logs. The Syslog solution will be installed as part of this solution installation.</p>\n<p><strong>NOTE</strong>: Microsoft recommends installation of Syslog via AMA Connector. Legacy connector uses the Log Analytics agent which were deprecated on <strong>Aug 31, 2024.</strong> Using MMA and AMA on same machine can cause log duplication and extra ingestion cost <a href=\"https://learn.microsoft.com/en-us/azure/sentinel/ama-migrate\">more details</a>.</p>\n<p><strong>Parsers:</strong> 1</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/citrix-logo-circle-black.svg\"width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Citrix ADC",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft-support@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "criteria": [
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject1').parserContentId1]",
              "version": "[variables('parserObject1').parserVersion1]"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-syslog"
            }
          ]
        },
        "firstPublishDate": "2022-06-02",
        "providers": [
          "Citrix "
        ],
        "categories": {
          "domains": [
            "Networking"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
