id: 42894dea-1da9-4e98-b934-3fd97924dc8a
Function:
  Title: Parser for CitrixADCEvent
  Version: '1.1.0'
  LastUpdated: '2024-07-30'
Category: Microsoft Sentinel Parser
FunctionName: CitrixADCEvent
FunctionAlias: CitrixADCEvent
FunctionQuery: |
    let forwarder_host_names = dynamic(["datasource"]);
    let datasource = (_GetWatchlist('ASimSourceType')| where SearchKey == 'CitrixADC' | project Source);
    let EventData = Syslog
    | where Computer in (datasource) or CollectorHostName in (datasource) or Computer in (forwarder_host_names) or CollectorHostName in (forwarder_host_names);
    let AllData = EventData
    | parse SyslogMessage with DateTime " " TimeZone " " HostName " " * " : " * " " Feature " " MessageType " " RequestId:long " " * " : " MessageRemaining1
    | parse MessageRemaining1 with "Context " Context " - SessionId: " SessionId:long " " MessageRemaining  
    | extend MessageRemaining = coalesce(MessageRemaining, MessageRemaining1);
    let BotData = AllData
    | where Feature =~ "BOT"
    | parse MessageRemaining with BotType "." FieldMapping
    | parse-kv FieldMapping as (URL:string, LogMsg:string, Category:string, ["User-Agent"]:string, Type:string, NewlyaddedRules:int, DeletedRules:int) with (pair_delimiter=':', kv_delimiter=' ', quote="'");
    let ALGData = AllData
    | where Feature =~ "ALG"
    | parse-kv MessageRemaining as (Errmsg:string, Group:string, Call_ID:string, Transport:string, Source_IP:string, Source_port:int, Destination_IP:string, Destination_port:int, Natted_IP:string, Natted_port:int, Method:string, Sequence_Number:int, Register:string, Content_Type:string, Error:string, Error_line:string, Caller_user_name:string, Callee_user_name:string, Caller_domain_name:string, Callee_domain_name:string, Error_Code:int, Infomsg:string, Session_ID:string ) with (pair_delimiter='-', kv_delimiter=':', quote="'");
    let RemainingData = AllData 
    | where not(Feature has_any ("BOT", "APPFW_RESP", "APPFW", "ALG"))
    | parse MessageRemaining with * "User " User " " *
    | parse-kv MessageRemaining as (Client_ip:string, Browser:string, Failure_reason:string, Vserver:string, SSLVPN_client_type:string, ["Group(s)"]:string, Nat_ip:string, Browser_type:string, Start_time:string, End_time:string, Duration:string, Http_resources_accessed:int, NonHttp_services_accessed:int, Total_TCP_connections:int, Total_UDP_flows:int, Total_policies_allowed:int,  Total_policies_denied:int, Total_bytes_send:int, Total_bytes_recv:int, Total_compressedbytes_send:int, Total_compressedbytes_recv:int, Compression_ratio_send:string, Compression_ratio_recv:string, LogoutMethod:string, Destination:string, customername:string, applicationName:string, connectionId:string, startTime:string, endTime:string, Source:string, Access:string, Last_contact:string, Denied_by_policy:string, ClientIP:string, Client_security_expression:string, Clientsecuritycheck:string, Xdata:string, Vserver_ip:string, Errmsg:string, State:string, Remote_ip:string, Command:string, Status:string, DelinkTime:string, ClosureReason:string, ProtocolICMP:string, Type:string, Code:int, TimeStamp:string, Hitcount:int, HitRule:string, Action:string, Category:string, Domain:string, Session:string, FailureReason:string, Categorygroup:string, Reputation:string, Policyaction:string, ICAPServer:string, ["Content-Type"]:string, Mode:string, Service:string, Response:string, ID:int, Protocol:string, URL:string, BytesSent:int, BytesReceived:int, OriginServer:string, RequestBytesSent:int, ResponseBytesSent:int, License_limit:int, Xdatalen:int, BackendSPCBId:int, ServerIP:string,ServerPort:int, ProtocolVersion:string, CipherSuite:string, CertificateKeyPair:string, DaysToExpire:int, IssuerName:string, SubjectName:string, crl_name:string, server_port:int, ["methodLDAP-ldapscope"]:string, Client:string, Profile:string, into:string, FailedtoparserequestURL:string, Header:string, Value:string, PCREerrorcode:int, Failedtowrite:string, session_guid:string, device_serial_number:int, ["flags"]:long, session_setup_time:string, client_type:int, client_launcher:int, client_version:string, client_hostname:string, domain_name:string, server_name:string, connection_priority:int, access_type:int, status:int, username:string, client_cookie:string, channel_update_begin:string, channel_update_end:string, channel_id_1:int, channel_id_1_val:int, channel_id_2:int, channel_id_2_val:int, channel_id_3:int, channel_id_3_val:int, channel_id_4:int, channel_id_4_val:int, channel_id_5:int, channel_id_5_val:int, nsica_session_status:int, nsica_session_client_ip:string, nsica_session_client_port:int, nsica_session_server_ip:string, nsica_session_server_port:int, nsica_session_reconnect_count:int, nsica_session_acr_count:int, timestamp:string,  nsica_status:int, L7LatencyThresholdFactor:int, L7LatencyWaittime:int, L7LatencyNotifyInterval:int, L7LatencyMaxNotifyCount:int, L7ThresholdBreachAvgClientsideLatency:int, L7ThresholdBreachMaxClientsideLatency:int, L7ThresholdBreachAvgServersideLatency:int, L7ThresholdBreachMaxServersideLatency:int, MinL7Latency:int, session_end_time:int, ica_rtt:int, clientside_rxbytes:int, clientside_txbytes:int, clientside_packet_retransmits:int, serverside_packet_retransmits:int, clientside_rtt:int, serverside_rtt:int, clientside_jitter:int, serverside_jitter:int, startup_duration:int, launch_mechanism:int, app_launch_time:string, app_process_id:int, app_name:string, module_path:string, app_termination_type:int, app_termination_time:string,Total_bytes_wire_send:long, Total_bytes_wire_recv:long) with (pair_delimiter='-', kv_delimiter=' ', quote='"')
    | project-rename Groups_1 = ["Group(s)"], User_1 = User, Command_1 = Command, Vserver_1 = Vserver, Source_1 = Source
    | parse-kv MessageRemaining as (Extracted_groups:string, Command:string, ["Group(s)"]:string, Vserver:string, ["SSO is"]:string, SAVECONFIG:string, User:string, Device:string, Source:string, domainname:string) with (pair_delimiter=':', kv_delimiter=' ', quote="'", quote='"')
    | extend Groups = coalesce(["Group(s)"], Groups_1), User = coalesce(User_1, User), Command = coalesce(Command_1, Command), Vserver = coalesce(Vserver, Vserver_1), Source = coalesce(Source_1, Source)
    | parse-kv MessageRemaining as (client_cookie:string, UserName:string ) with (pair_delimiter='-', kv_delimiter=':', quote="'")
    | project-away *_1, MessageRemaining1, MessageRemaining;
    union BotData,ALGData,RemainingData