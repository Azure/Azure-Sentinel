id: d75e8289-d1cb-44d4-bd59-2f44a9172478
name: GSA Enriched Office 365 - Multiple Users Email Forwarded to Same Destination
description: |
  Identifies when multiple (more than one) users' mailboxes are configured to forward to the same destination. 
  This could be an attacker-controlled destination mailbox configured to collect mail from multiple compromised user accounts.
severity: Medium
status: Available 
requiredDataConnectors:
  - connectorId: AzureActiveDirectory
    dataTypes:
      - EnrichedMicrosoft365AuditLogs
  - connectorId: Office365
    dataTypes:
      - OfficeActivity (Exchange)
queryFrequency: 1d
queryPeriod: 7d
triggerOperator: gt
triggerThreshold: 0
tactics:
  - Collection
  - Exfiltration
relevantTechniques:
  - T1114
  - T1020
query: |
  // Set query parameters
  let queryfrequency = 1d;
  let queryperiod = 7d;
  // EnrichedMicrosoft365AuditLogs Query
  let EnrichedEvents = EnrichedMicrosoft365AuditLogs
      | where TimeGenerated > ago(queryperiod)
      | where Workload =~ "Exchange"
      // Uncomment or adjust the following line based on actual field usage
      // | where Operation in ("Set-Mailbox", "New-InboxRule", "Set-InboxRule")
      | where tostring(AdditionalProperties.Parameters) has_any ("ForwardTo", "RedirectTo", "ForwardingSmtpAddress")
      | mv-apply DynamicParameters = todynamic(tostring(AdditionalProperties.Parameters)) on (
          summarize ParsedParameters = make_bag(pack(tostring(DynamicParameters.Name), DynamicParameters.Value))
        )
      | evaluate bag_unpack(ParsedParameters, columnsConflict='replace_source')
      | extend DestinationMailAddress = tolower(case(
          isnotempty(column_ifexists("ForwardTo", "")), column_ifexists("ForwardTo", ""),
          isnotempty(column_ifexists("RedirectTo", "")), column_ifexists("RedirectTo", ""),
          isnotempty(column_ifexists("ForwardingSmtpAddress", "")), trim_start(@"smtp:", column_ifexists("ForwardingSmtpAddress", "")),
          ""))
      | where isnotempty(DestinationMailAddress)
      | mv-expand split(DestinationMailAddress, ";")
      | extend ClientIPValues = extract_all(@'\[?(::ffff:)?(?P<IPAddress>(\d+\.\d+\.\d+\.\d+)|[^\]]+)\]?([-:](?P<Port>\d+))?', dynamic(["IPAddress", "Port"]), ClientIp)[0]
      | extend ClientIP = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1])
      | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId, 250), Ports = make_set(Port, 250), EventCount = count() by tostring(DestinationMailAddress), ClientIP
      | where DistinctUserCount > 1 and EndTime > ago(queryfrequency)
      | mv-expand UserId to typeof(string)
      | extend AccountName = tostring(split(UserId, "@")[0]), AccountUPNSuffix = tostring(split(UserId, "@")[1]);
  // OfficeActivity Query
  let OfficeEvents = OfficeActivity
      | where TimeGenerated > ago(queryperiod)
      | where OfficeWorkload =~ "Exchange"
      // Uncomment or adjust the following line based on actual field usage
      // | where Operation in ("Set-Mailbox", "New-InboxRule", "Set-InboxRule")
      | where Parameters has_any ("ForwardTo", "RedirectTo", "ForwardingSmtpAddress")
      | mv-apply DynamicParameters = todynamic(Parameters) on (
          summarize ParsedParameters = make_bag(pack(tostring(DynamicParameters.Name), DynamicParameters.Value))
        )
      | evaluate bag_unpack(ParsedParameters, columnsConflict='replace_source')
      | extend DestinationMailAddress = tolower(case(
          isnotempty(column_ifexists("ForwardTo", "")), column_ifexists("ForwardTo", ""),
          isnotempty(column_ifexists("RedirectTo", "")), column_ifexists("RedirectTo", ""),
          isnotempty(column_ifexists("ForwardingSmtpAddress", "")), trim_start(@"smtp:", column_ifexists("ForwardingSmtpAddress", "")),
          ""))
      | where isnotempty(DestinationMailAddress)
      | mv-expand split(DestinationMailAddress, ";")
      | extend ClientIPValues = extract_all(@'\[?(::ffff:)?(?P<IPAddress>(\d+\.\d+\.\d+\.\d+)|[^\]]+)\]?([-:](?P<Port>\d+))?', dynamic(["IPAddress", "Port"]), ClientIP)[0]
      | extend ClientIP = tostring(ClientIPValues[0]), Port = tostring(ClientIPValues[1])
      | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId, 250), Ports = make_set(Port, 250), EventCount = count() by tostring(DestinationMailAddress), ClientIP
      | where DistinctUserCount > 1 and EndTime > ago(queryfrequency)
      | mv-expand UserId to typeof(string)
      | extend AccountName = tostring(split(UserId, "@")[0]), AccountUPNSuffix = tostring(split(UserId, "@")[1]);
  // Combine and Deduplicate Office and Enriched Logs
  let CombinedEvents = OfficeEvents
      | union EnrichedEvents
      | summarize arg_min(StartTime, *) by tostring(DestinationMailAddress), ClientIP;
  // Final Output
  CombinedEvents
      | project StartTime, EndTime, DestinationMailAddress, ClientIP, DistinctUserCount, UserId, Ports, EventCount, AccountName, AccountUPNSuffix
entityMappings:
  - entityType: Account
    fieldMappings:
      - identifier: FullName
        columnName: UserId
      - identifier: Name
        columnName: AccountName
      - identifier: UPNSuffix
        columnName: AccountUPNSuffix
  - entityType: IP
    fieldMappings:
      - identifier: Address
        columnName: ClientIP
version: 2.0.5
kind: Scheduled
