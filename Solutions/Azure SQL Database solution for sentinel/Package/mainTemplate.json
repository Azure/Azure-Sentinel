{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for Azure SQL Database solution for sentinel"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "Azure SQL Database Workbook",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    }
  },
  "variables": {
    "email": "support@microsoft.com",
    "_email": "[variables('email')]",
    "_solutionName": "Azure SQL Database solution for sentinel",
    "_solutionVersion": "3.0.0",
    "solutionId": "sentinel4sql.sentinel4sql",
    "_solutionId": "[variables('solutionId')]",
    "workbookVersion1": "1.0.0",
    "workbookContentId1": "AzureSQLSecurityWorkbook",
    "workbookId1": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId1'))]",
    "workbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId1'))))]",
    "_workbookContentId1": "[variables('workbookContentId1')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_workbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','wb','-', uniqueString(concat(variables('_solutionId'),'-','Workbook','-',variables('_workbookContentId1'),'-', variables('workbookVersion1'))))]",
    "analyticRuleObject1": {
      "analyticRuleVersion1": "1.1.1",
      "_analyticRulecontentId1": "daa32afa-b5b6-427d-93e9-e32f3f359dd7",
      "analyticRuleId1": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'daa32afa-b5b6-427d-93e9-e32f3f359dd7')]",
      "analyticRuleTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('daa32afa-b5b6-427d-93e9-e32f3f359dd7')))]",
      "_analyticRulecontentProductId1": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','daa32afa-b5b6-427d-93e9-e32f3f359dd7','-', '1.1.1')))]"
    },
    "analyticRuleObject2": {
      "analyticRuleVersion2": "1.1.1",
      "_analyticRulecontentId2": "20f87813-3de0-4a9f-a8c0-6aaa3187be08",
      "analyticRuleId2": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '20f87813-3de0-4a9f-a8c0-6aaa3187be08')]",
      "analyticRuleTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('20f87813-3de0-4a9f-a8c0-6aaa3187be08')))]",
      "_analyticRulecontentProductId2": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','20f87813-3de0-4a9f-a8c0-6aaa3187be08','-', '1.1.1')))]"
    },
    "analyticRuleObject3": {
      "analyticRuleVersion3": "1.1.1",
      "_analyticRulecontentId3": "c815008d-f4d1-4645-b13b-8b4bc188d5de",
      "analyticRuleId3": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'c815008d-f4d1-4645-b13b-8b4bc188d5de')]",
      "analyticRuleTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('c815008d-f4d1-4645-b13b-8b4bc188d5de')))]",
      "_analyticRulecontentProductId3": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','c815008d-f4d1-4645-b13b-8b4bc188d5de','-', '1.1.1')))]"
    },
    "analyticRuleObject4": {
      "analyticRuleVersion4": "1.1.1",
      "_analyticRulecontentId4": "237c3855-138c-4588-a68f-b870abd3bfc9",
      "analyticRuleId4": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '237c3855-138c-4588-a68f-b870abd3bfc9')]",
      "analyticRuleTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('237c3855-138c-4588-a68f-b870abd3bfc9')))]",
      "_analyticRulecontentProductId4": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','237c3855-138c-4588-a68f-b870abd3bfc9','-', '1.1.1')))]"
    },
    "analyticRuleObject5": {
      "analyticRuleVersion5": "1.1.1",
      "_analyticRulecontentId5": "3367fd5e-44b3-4746-a9a5-dc15c8202490",
      "analyticRuleId5": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '3367fd5e-44b3-4746-a9a5-dc15c8202490')]",
      "analyticRuleTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('3367fd5e-44b3-4746-a9a5-dc15c8202490')))]",
      "_analyticRulecontentProductId5": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','3367fd5e-44b3-4746-a9a5-dc15c8202490','-', '1.1.1')))]"
    },
    "analyticRuleObject6": {
      "analyticRuleVersion6": "1.1.1",
      "_analyticRulecontentId6": "05030ca6-ef66-42ca-b672-2e84d4aaf5d7",
      "analyticRuleId6": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '05030ca6-ef66-42ca-b672-2e84d4aaf5d7')]",
      "analyticRuleTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('05030ca6-ef66-42ca-b672-2e84d4aaf5d7')))]",
      "_analyticRulecontentProductId6": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','05030ca6-ef66-42ca-b672-2e84d4aaf5d7','-', '1.1.1')))]"
    },
    "analyticRuleObject7": {
      "analyticRuleVersion7": "1.1.1",
      "_analyticRulecontentId7": "dabd7284-004b-4237-b5ee-a22acab19eb2",
      "analyticRuleId7": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'dabd7284-004b-4237-b5ee-a22acab19eb2')]",
      "analyticRuleTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('dabd7284-004b-4237-b5ee-a22acab19eb2')))]",
      "_analyticRulecontentProductId7": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','dabd7284-004b-4237-b5ee-a22acab19eb2','-', '1.1.1')))]"
    },
    "analyticRuleObject8": {
      "analyticRuleVersion8": "1.1.1",
      "_analyticRulecontentId8": "c105513d-e398-4a02-bd91-54b9b2d6fa7d",
      "analyticRuleId8": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'c105513d-e398-4a02-bd91-54b9b2d6fa7d')]",
      "analyticRuleTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('c105513d-e398-4a02-bd91-54b9b2d6fa7d')))]",
      "_analyticRulecontentProductId8": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','c105513d-e398-4a02-bd91-54b9b2d6fa7d','-', '1.1.1')))]"
    },
    "analyticRuleObject9": {
      "analyticRuleVersion9": "1.1.2",
      "_analyticRulecontentId9": "2a632013-379d-4993-956f-615063d31e10",
      "analyticRuleId9": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '2a632013-379d-4993-956f-615063d31e10')]",
      "analyticRuleTemplateSpecName9": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('2a632013-379d-4993-956f-615063d31e10')))]",
      "_analyticRulecontentProductId9": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','2a632013-379d-4993-956f-615063d31e10','-', '1.1.2')))]"
    },
    "analyticRuleObject10": {
      "analyticRuleVersion10": "1.1.2",
      "_analyticRulecontentId10": "9851c360-5fd5-4bae-a117-b66d8476bf5e",
      "analyticRuleId10": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '9851c360-5fd5-4bae-a117-b66d8476bf5e')]",
      "analyticRuleTemplateSpecName10": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('9851c360-5fd5-4bae-a117-b66d8476bf5e')))]",
      "_analyticRulecontentProductId10": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','9851c360-5fd5-4bae-a117-b66d8476bf5e','-', '1.1.2')))]"
    },
    "huntingQueryObject1": {
      "huntingQueryVersion1": "1.0.1",
      "_huntingQuerycontentId1": "724c7010-0afe-4d46-95ab-32f6737e658b",
      "huntingQueryTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('724c7010-0afe-4d46-95ab-32f6737e658b')))]"
    },
    "huntingQueryObject2": {
      "huntingQueryVersion2": "1.0.1",
      "_huntingQuerycontentId2": "4cda0673-37f9-4765-af1f-556de2295cd7",
      "huntingQueryTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('4cda0673-37f9-4765-af1f-556de2295cd7')))]"
    },
    "huntingQueryObject3": {
      "huntingQueryVersion3": "1.0.0",
      "_huntingQuerycontentId3": "af55d5b0-6b4a-4874-8299-9d845bf7c1fd",
      "huntingQueryTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('af55d5b0-6b4a-4874-8299-9d845bf7c1fd')))]"
    },
    "huntingQueryObject4": {
      "huntingQueryVersion4": "1.0.1",
      "_huntingQuerycontentId4": "2a21303e-be48-404f-a6f6-883a6acfe5ad",
      "huntingQueryTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('2a21303e-be48-404f-a6f6-883a6acfe5ad')))]"
    },
    "huntingQueryObject5": {
      "huntingQueryVersion5": "1.0.1",
      "_huntingQuerycontentId5": "db5b0a77-1b1d-4a31-8ebb-c508ebc3bb38",
      "huntingQueryTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('db5b0a77-1b1d-4a31-8ebb-c508ebc3bb38')))]"
    },
    "huntingQueryObject6": {
      "huntingQueryVersion6": "1.0.1",
      "_huntingQuerycontentId6": "e0944dec-3c92-4b2d-8e81-a950afeaba69",
      "huntingQueryTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('e0944dec-3c92-4b2d-8e81-a950afeaba69')))]"
    },
    "huntingQueryObject7": {
      "huntingQueryVersion7": "1.0.1",
      "_huntingQuerycontentId7": "9670ac84-e035-47f5-8eb5-9d863a8a7893",
      "huntingQueryTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('9670ac84-e035-47f5-8eb5-9d863a8a7893')))]"
    },
    "huntingQueryObject8": {
      "huntingQueryVersion8": "1.0.1",
      "_huntingQuerycontentId8": "137tyi7c-7225-434b-8bfc-fea28v95ebd8",
      "huntingQueryTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('137tyi7c-7225-434b-8bfc-fea28v95ebd8')))]"
    },
    "uiConfigId1": "AzureSql",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "AzureSql",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "_dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('workbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Workbook-AzureSQLSecurity Workbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId1')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "Sets the time window in days to search around the alert"
              },
              "properties": {
                "displayName": "[parameters('workbook1-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"# Azure SQL Databases\\r\\n\"},\"name\":\"text - 2\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"value::selected\"],\"parameters\":[{\"id\":\"3807ff63-b851-47dd-87cc-db8e484e8afb\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DefaultSubscription_Internal\",\"type\":1,\"isRequired\":true,\"query\":\"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| take 1\\r\\n| project subscriptionId\",\"isHiddenWhenLocked\":true,\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"e282bcfd-676d-4ebe-9a0a-9d047904de22\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time range\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":7776000000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true}},{\"id\":\"c517802a-74f7-469d-9158-41c5023905da\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscriptions\",\"type\":6,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"summarize by subscriptionId\\r\\n| project value = strcat(\\\"/subscriptions/\\\", subscriptionId), label = subscriptionId, selected = iff(subscriptionId =~ '{DefaultSubscription_Internal}', true, false)\\r\\n\",\"crossComponentResources\":[\"value::selected\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"\",\"showDefault\":false},\"timeContext\":{\"durationMs\":5184000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"1f35dc4e-9186-4a36-96a5-2259dec75434\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Workspaces\",\"type\":5,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| where strcat('/subscriptions/',subscriptionId) in ({Subscriptions})\\r\\n| project id\",\"crossComponentResources\":[\"value::selected\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"332be9fd-33ad-407e-843e-5f2c49a50b6a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Servers\",\"type\":5,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"\\\"\",\"delimiter\":\",\",\"query\":\"where type == \\\"microsoft.sql/servers\\\"\\r\\n| where strcat('/subscriptions/',subscriptionId) in ({Subscriptions})\\r\\n| project id=tolower(id)\",\"crossComponentResources\":[\"value::selected\"],\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"b4cc825f-166b-4929-916a-21b8073748c2\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Databases\",\"type\":5,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"where type == \\\"microsoft.sql/servers/databases\\\"\\r\\n| where strcat('/subscriptions/',subscriptionId) in ({Subscriptions})\\r\\n| project id=tolower(id)\\r\\n| extend serverName = split(id,'/databases/')[0]\\r\\n| where serverName in ({Servers})\\r\\n| project id\",\"crossComponentResources\":[\"value::selected\"],\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 1\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"88959d45-3a98-4f57-a16a-55ed5af242b2\",\"cellValue\":\"mainTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Incident Troubleshooting Guide\",\"subTarget\":\"TSG\",\"style\":\"link\"},{\"id\":\"254ba4b0-6ee2-41cc-a683-646a13b06ff5\",\"cellValue\":\"mainTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Analytics over SQL Server audit events\",\"subTarget\":\"diagnostics\",\"style\":\"link\"},{\"id\":\"9fc1cd24-6d9e-4df7-acc4-549daf2f721c\",\"cellValue\":\"mainTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Sensitive Data Classification\",\"subTarget\":\"classification\",\"style\":\"link\"},{\"id\":\"1a5f9a87-9eed-4133-bf77-c5ddf5a06fce\",\"cellValue\":\"mainTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Azure Defender for SQL Coverage\",\"subTarget\":\"alerts\",\"style\":\"link\"}]},\"name\":\"links - 17\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Azure Defender for SQL coverage\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"//resources\\r\\n//| where type == \\\"microsoft.sql/servers/databases\\\"\\r\\n//| summarize Databases = count() by subscriptionId, DefenderForSQL = 0\\r\\n//| union\\r\\n//(securityresources\\r\\n//| where type =~ \\\"microsoft.security/pricings\\\"\\r\\n//| where name == \\\"SqlServers\\\"\\r\\n//| project DefenderForSQL = iif(properties.pricingTier == 'Standard', 1, 0), Databases = 0, subscriptionId)\\r\\n//| summarize Databases = sum(Databases), DefenderForSQL = sum(DefenderForSQL) by subscriptionId\\r\\n//| project Subscription = strcat('/subscriptions/', subscriptionId), Databases, ['Defender for SQL'] = iif(DefenderForSQL > 0,'yes',iff(Databases > 0, 'no', 'nodefender_nosql')), ['Onboard Azure Defender'] = iif(DefenderForSQL > 0, '', 'https://ms.portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/26')\\r\\n//| order by ['Defender for SQL'] asc | order by Databases desc\\r\\n\\r\\n\\r\\ndatatable (Event:string)\\r\\n    [\\\"SQL Workbook\\\"]\\r\\n| extend database = (strcat(\\\"[\\\", \\\"{Databases}\\\", \\\"]\\\"))\\r\\n| extend database = todynamic(replace(\\\"'\\\", '\\\"', database))\\r\\n| mvexpand database\\r\\n| extend subscriptionId = extract(@\\\"/subscriptions/([^/]+)\\\", 1, tostring(database))\\r\\n| summarize SQLs = count() by subscriptionId, DefenderForSQL = 0\\r\\n| union\\r\\n(\\r\\nsecurityresources\\r\\n| where type =~ \\\"microsoft.security/pricings\\\"\\r\\n| where name == \\\"SqlServers\\\"\\r\\n| project DefenderForSQL = iif(properties.pricingTier == 'Standard', 1, 0), SQLs = 0, subscriptionId\\r\\n)\\r\\n| summarize SQLs = sum(SQLs), DefenderForSQL = sum(DefenderForSQL) by subscriptionId\\r\\n| project Subscription = strcat('/subscriptions/', subscriptionId), [\\\"Databases\\\"] = SQLs, ['Defender for SQL'] = iif(DefenderForSQL > 0,'yes','no'), ['Onboard Azure Defender'] = iif(DefenderForSQL > 0, '', 'https://ms.portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/26')\\r\\n| order by ['Defender for SQL'] asc\",\"size\":0,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Defender for SQL\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"4\",\"text\":\"{0}\"},{\"operator\":\"==\",\"thresholdValue\":\"nodefender_nosql\",\"representation\":\"2\",\"text\":\"no\"},{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{1}\"}]}},{\"columnMatch\":\"Onboard Azure Defender\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}}],\"sortBy\":[{\"itemKey\":\"$gen_thresholds_Defender for SQL_2\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"$gen_thresholds_Defender for SQL_2\",\"sortOrder\":1}]},\"customWidth\":\"50\",\"name\":\"query - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"//resources\\r\\n//| where type == \\\"microsoft.sql/servers/databases\\\"\\r\\n//| summarize Databases = count() by subscriptionId, DefenderForSQL = 0\\r\\n//| union\\r\\n//(securityresources\\r\\n//| where type =~ \\\"microsoft.security/pricings\\\"\\r\\n//| where name == \\\"SqlServers\\\"\\r\\n//| project DefenderForSQL = iif(properties.pricingTier == 'Standard', 1, 0), Databases = 0, subscriptionId)\\r\\n//| summarize Databases = sum(Databases), DefenderForSQL = sum(DefenderForSQL) by subscriptionId\\r\\n//| project Subscription = 1, ['Defender for SQL'] = iif(DefenderForSQL > 0,'Protected by Azure Defender','Not protected by Azure Defender')\\r\\n\\r\\n\\r\\ndatatable (Event:string)\\r\\n    [\\\"SQL Workbook\\\"]\\r\\n| extend databases = (strcat(\\\"[\\\", \\\"{Databases}\\\", \\\"]\\\"))\\r\\n| extend databases = todynamic(replace(\\\"'\\\", '\\\"', databases))\\r\\n| mvexpand databases\\r\\n| extend subscriptionId = extract(@\\\"/subscriptions/([^/]+)\\\", 1, tostring(databases))\\r\\n| summarize SQLs = count() by subscriptionId, DefenderForSQL = 0\\r\\n| union\\r\\n(\\r\\nsecurityresources\\r\\n| where type =~ \\\"microsoft.security/pricings\\\"\\r\\n| where name == \\\"SqlServers\\\"\\r\\n| project DefenderForSQL = iif(properties.pricingTier == 'Standard', 1, 0), SQLs = 0, subscriptionId\\r\\n)\\r\\n| summarize SQLs = sum(SQLs), DefenderForSQL = sum(DefenderForSQL) by subscriptionId\\r\\n| project Subscription = 1, ['Defender for SQL'] = iif(DefenderForSQL > 0,'Protected by Azure Defender','Not protected by Azure Defender')\",\"size\":0,\"title\":\"Defender coverage, by subscription\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"piechart\"},\"customWidth\":\"50\",\"name\":\"query - 2\"}]},\"name\":\"DefenderforSQLCoverage\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Azure Defender for SQL alerts\"},\"name\":\"text - 0\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspaces}\"],\"parameters\":[{\"id\":\"e4d004c4-5870-4d69-954c-423beb2cdb3b\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"AlertSeverity\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"SecurityAlert\\r\\n| where AlertType startswith \\\"SQL.\\\"\\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| summarize Count = count() by AlertSeverity\\r\\n| order by Count desc, AlertSeverity asc\\r\\n| project Value = AlertSeverity, Label = strcat(AlertSeverity, ' - ', Count)\\r\\n\",\"crossComponentResources\":[\"{Workspaces}\"],\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let data = SecurityAlert\\r\\n| where \\\"{AlertSeverity:lable}\\\" == \\\"All\\\" or AlertSeverity in ({AlertSeverity})\\r\\n| where AlertType startswith \\\"SQL.\\\"\\r\\n| where tolower(ResourceId) in ({Databases});\\r\\ndata\\r\\n| summarize Count = count() by AlertSeverity\\r\\n| join kind = inner (data\\r\\n | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by AlertSeverity)\\r\\n on AlertSeverity\\r\\n | project-away TimeGenerated\\r\\n| extend AlertSeveritys = AlertSeverity\\r\\n| union (\\r\\n data \\r\\n | summarize Count = count() \\r\\n | extend jkey = 1\\r\\n | join kind=inner (data\\r\\n | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain}\\r\\n | extend jkey = 1) on jkey\\r\\n | extend AlertSeverity = 'All', AlertSeveritys = '*' \\r\\n)\\r\\n| extend Severity = iif(AlertSeverity == \\\"All\\\", 0,iif(AlertSeverity == \\\"High\\\", 1, iif(AlertSeverity == \\\"Medium\\\", 2, iif(AlertSeverity == \\\"Low\\\", 3, 4))))\\r\\n| order by Severity asc\\r\\n\",\"size\":0,\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"AlertSeverity\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"secondaryContent\":{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"blue\"}},\"showBorder\":false}},\"name\":\"query - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"SecurityAlert\\r\\n| where AlertType startswith \\\"SQL.\\\"\\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where ResourceId != \\\"\\\"\\r\\n| where AlertSeverity in ({AlertSeverity})\\r\\n| summarize AlertCount = count() by ResourceId\\r\\n| project Resource = tolower(ResourceId), AlertCount\\r\\n| order by AlertCount desc\\r\\n\",\"size\":0,\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"AlertCount\",\"formatter\":3,\"formatOptions\":{\"palette\":\"blue\"}}]}},\"customWidth\":\"30\",\"name\":\"query - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"SecurityAlert\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where \\\"{AlertSeverity}\\\" has AlertSeverity or isempty(\\\"{AlertSeverity}\\\")\\r\\n| where AlertType startswith \\\"SQl.\\\"\\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where ResourceId != \\\"\\\"\\r\\n//| summarize Count=count() by ResourceId, bin(TimeGenerated,{TimeRange:grain})\\r\\n| make-series Count = count() on TimeGenerated from ago(30d) to now() step {TimeRange:grain} by ResourceId\",\"size\":0,\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"timechart\"},\"customWidth\":\"70\",\"name\":\"query - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"//let Incidents = SecurityIncident\\r\\n//| project AlertIds, IncidentUrl\\r\\n//|mv-expand AlertId = AlertIds\\r\\n//| extend AlertId = tostring(AlertId);\\r\\nSecurityAlert\\r\\n| where AlertType startswith \\\"SQL.\\\"\\r\\n| where tolower(ResourceId) in ({Databases})// or tolower(ResourceId) in ({Servers})\\r\\n| where ResourceId != \\\"\\\"\\r\\n| where AlertSeverity in ({AlertSeverity})\\r\\n| project TimeGenerated, ResourceId, AlertSeverity, DisplayName, AlertLink, AlertId=tostring(SystemAlertId)\\r\\n| order by TimeGenerated desc\\r\\n//| join kind=leftouter Incidents on AlertId\\r\\n//| project-away AlertIds, AlertId1\\r\\n| project TimeGenerated, ResourceId, AlertSeverity, DisplayName, ['Azure Defender Alert'] = AlertLink, AlertId //Incident = IncidentUrl, AlertId\\r\\n\",\"size\":0,\"title\":\"SQL Server alerts\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"AlertId\",\"exportParameterName\":\"SelectedAlertId\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Azure Defender Alert\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Go to alert\"}},{\"columnMatch\":\"Incident\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"AlertId\",\"formatter\":5}],\"filter\":true}},\"name\":\"query - 16\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let data = SecurityAlert\\r\\n| where AlertType startswith \\\"SQL.\\\"\\r\\n| where SystemAlertId == '{SelectedAlertId}';\\r\\nlet nodes = data\\r\\n| project Id = SystemAlertId, Name = DisplayName, Size = 1, Kind = 'alert'\\r\\n| union (\\r\\ndata \\r\\n| project parse_json(Entities), SystemAlertId\\r\\n| mv-expand Entities\\r\\n| evaluate bag_unpack(Entities)\\r\\n| project Id = strcat(SystemAlertId, '-',$id), Name = strcat(ResourceId,Address), Size = 1, Kind = Type\\r\\n);\\r\\nlet links = data\\r\\n| project parse_json(Entities), SystemAlertId\\r\\n| mv-expand Entities\\r\\n| evaluate bag_unpack(Entities)\\r\\n| project SourceId = SystemAlertId, TargetId = strcat(SystemAlertId, '-', $id), Size = 1, Kind = Type\\r\\n;\\r\\nnodes\\r\\n| union (links)\\r\\n| where Kind != \\\"\\\"\",\"size\":0,\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"graph\",\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Name\",\"formatter\":13,\"formatOptions\":{\"showIcon\":true}},\"centerContent\":{\"columnMatch\":\"Kind\",\"formatter\":16,\"formatOptions\":{\"showIcon\":true},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"nodeIdField\":\"Id\",\"sourceIdField\":\"SourceId\",\"targetIdField\":\"TargetId\",\"graphOrientation\":3,\"showOrientationToggles\":false,\"edgeSize\":\"Size\",\"edgeLabel\":\"Kind\",\"staticNodeSize\":100,\"colorSettings\":{\"nodeColorField\":\"Kind\",\"type\":1,\"colorPalette\":\"default\"},\"hivesMargin\":5}},\"name\":\"query - 6\"}]},\"name\":\"DefenderforSQLAlerts\"}]},\"conditionalVisibility\":{\"parameterName\":\"mainTab\",\"comparison\":\"isEqualTo\",\"value\":\"alerts\"},\"name\":\"DefenderforSQL\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Sensitive Data Analytics\"},\"name\":\"text - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where data_sensitivity_information_s != \\\"\\\" \\r\\n| extend parsed=parse_xml(data_sensitivity_information_s).sensitivity_attributes.sensitivity_attribute  \\r\\n| mvexpand parsed \\r\\n| extend label = tostring(parsed[\\\"@label\\\"]) \\r\\n| where label != \\\"\\\" \\r\\n| summarize dcount = dcount(sequence_group_id_g) by label \",\"size\":0,\"title\":\"Number of queries, by sensitivity label\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"exportMultipleValues\":true,\"exportedParameters\":[{\"fieldName\":\"label\",\"parameterName\":\"SelectedLabel\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"label\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"dcount\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false}},\"customWidth\":\"33\",\"name\":\"query - 3 - Copy\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where data_sensitivity_information_s != \\\"\\\" \\r\\n| extend parsed=parse_xml(data_sensitivity_information_s).sensitivity_attributes.sensitivity_attribute  \\r\\n| mvexpand parsed \\r\\n| extend info_type = tostring(parsed[\\\"@information_type\\\"]) \\r\\n| where info_type != \\\"\\\" \\r\\n| summarize dcount = dcount(sequence_group_id_g) by info_type\",\"size\":0,\"title\":\"Number of queries, by information type\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"exportMultipleValues\":true,\"exportedParameters\":[{\"fieldName\":\"info_type\",\"parameterName\":\"SelectedInformationType\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"info_type\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"dcount\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"createOtherGroup\":10}},\"customWidth\":\"33\",\"name\":\"query - 3 - Copy - Copy\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where data_sensitivity_information_s != \\\"\\\" \\r\\n| extend parsed=parse_xml(data_sensitivity_information_s).sensitivity_attributes.sensitivity_attribute  \\r\\n| mvexpand parsed \\r\\n| extend Principal = server_principal_name_s\\r\\n| summarize dcount = dcount(sequence_group_id_g) by Principal\",\"size\":0,\"title\":\"Number of queries, by principal\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"exportMultipleValues\":true,\"exportedParameters\":[{\"fieldName\":\"Principal\",\"parameterName\":\"SelectedPrincipal\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Principal\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"dcount\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}},\"showBorder\":false},\"chartSettings\":{\"createOtherGroup\":10}},\"customWidth\":\"33\",\"name\":\"query - 3 - Copy - Copy - Copy\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics\\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where isempty(data_sensitivity_information_s) == false\\r\\n| extend parsed=parse_xml(data_sensitivity_information_s).sensitivity_attributes.sensitivity_attribute  \\r\\n//| evaluate bag_unpack(parsed, columnsConflict='keep_source')\\r\\n| mvexpand parsed \\r\\n| project TimeGenerated, ResourceId, Label = tostring(parsed.['@label']), InformationType = tostring(parsed.['@information_type'])\\r\\n    , Succeeded = succeeded_s, Principal = server_principal_name_s, ClientIP = client_ip_s, Application = application_name_s, Statement = statement_s, Rows = response_rows_d, Action = action_name_s\\r\\n| where Label != \\\"\\\" or InformationType != \\\"\\\"\\r\\n| where isempty('{SelectedLabel}') or (strcat('\\\"',Label,'\\\"') in (split('{SelectedLabel}',',')))\\r\\n| where isempty('{SelectedInformationType}') or (strcat('\\\"',InformationType,'\\\"') in (split('{SelectedInformationType}',',')))\\r\\n| where isempty('{SelectedPrincipal}') or (strcat('\\\"',Principal,'\\\"') in (split('{SelectedPrincipal}',',')))\",\"size\":0,\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"]},\"name\":\"query - 15\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where data_sensitivity_information_s != \\\"\\\" \\r\\n| extend parsed=parse_xml(data_sensitivity_information_s).sensitivity_attributes.sensitivity_attribute  \\r\\n| mvexpand parsed \\r\\n| extend label = tostring(parsed[\\\"@label\\\"]) \\r\\n| where label != \\\"\\\" \\r\\n| summarize dcount = dcount(sequence_group_id_g) by label_and_app = strcat(label, \\\" | \\\", application_name_s)\\r\\n| order by label_and_app asc, dcount desc\",\"size\":0,\"title\":\"Application access to classified data (by sensitivity label)\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"piechart\"},\"customWidth\":\"40\",\"name\":\"query - 3 - Copy - Copy\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where data_sensitivity_information_s != \\\"\\\" \\r\\n| extend parsed=parse_xml(data_sensitivity_information_s).sensitivity_attributes.sensitivity_attribute  \\r\\n| mvexpand parsed \\r\\n| extend label = tostring(parsed[\\\"@label\\\"]) \\r\\n| where label != \\\"\\\" \\r\\n| summarize dcount = dcount(sequence_group_id_g) by label_and_ip = strcat(label, \\\" | \\\", client_ip_s) \\r\\n| order by label_and_ip asc, dcount desc\",\"size\":0,\"title\":\"IP access to classified data (by sensitivity label)\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"piechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"action_name_s\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"action_name_s\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"count_\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"customWidth\":\"40\",\"name\":\"query - 3\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where data_sensitivity_information_s != \\\"\\\" \\r\\n| extend parsed=parse_xml(data_sensitivity_information_s).sensitivity_attributes.sensitivity_attribute  \\r\\n| mvexpand parsed \\r\\n| extend info_type = tostring(parsed[\\\"@information_type\\\"]) \\r\\n| where info_type != \\\"\\\" \\r\\n| summarize dcount = dcount(sequence_group_id_g) by info_type_and_app = strcat(info_type, \\\" | \\\", application_name_s) \\r\\n| order by info_type_and_app asc, dcount desc\",\"size\":0,\"title\":\"Application access to classified data (by information type)\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"createOtherGroup\":10}},\"customWidth\":\"40\",\"name\":\"query - 3 - Copy - Copy - Copy\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where data_sensitivity_information_s != \\\"\\\" \\r\\n| extend parsed=parse_xml(data_sensitivity_information_s).sensitivity_attributes.sensitivity_attribute  \\r\\n| mvexpand parsed \\r\\n| extend info_type = tostring(parsed[\\\"@information_type\\\"]) \\r\\n| where info_type != \\\"\\\" \\r\\n| summarize dcount = dcount(sequence_group_id_g) by info_type_and_ip = strcat(info_type, \\\" | \\\", client_ip_s) \\r\\n| order by info_type_and_ip asc, dcount desc\",\"size\":0,\"title\":\"IP access to classified data (by information type)\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"createOtherGroup\":10}},\"customWidth\":\"40\",\"name\":\"query - 3 - Copy - Copy - Copy - Copy\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\"}}]},\"conditionalVisibility\":{\"parameterName\":\"mainTab\",\"comparison\":\"isEqualTo\",\"value\":\"classification\"},\"name\":\"DataClassification\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 24\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"3c23fea3-c94f-4d80-9ab0-dc7506b65c25\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"BaselineTimeRange\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":1209600000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000}}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics\\r\\n| where TimeGenerated > {BaselineTimeRange:start}\\r\\n| where ResourceType == \\\"SERVERS/DATABASES\\\"\\r\\n| where Category == \\\"SQLSecurityAuditEvents\\\"\\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| extend Database = strcat(LogicalServerName_s, '/', database_name_s)\\r\\n| summarize DailyCount = count() by ResourceId, Database, bin_at(TimeGenerated, 1d, now())\\r\\n| make-series metric = sum(DailyCount) on TimeGenerated in range({BaselineTimeRange:start}, now()-1d, 1d) by ResourceId, Database\\r\\n| extend series_decompose_anomalies(metric) // Anomaly detection\\r\\n| project ResourceId, Database, day = (TimeGenerated), DailyCounts = metric, AnomalyScore = series_decompose_anomalies_metric_ad_score\\r\\n| extend MaxAnomalyScore = AnomalyScore, MinAnomalyScore = AnomalyScore, AnomlyScoreTrend = AnomalyScore\\r\\n| mv-apply MaxAnomalyScore to typeof(real) on (top 1 by MaxAnomalyScore desc)\\r\\n| mv-apply MinAnomalyScore to typeof(real) on (top 1 by MinAnomalyScore asc)\\r\\n| mv-expand with_itemindex=Index AnomalyScore\\r\\n| where Index == array_length(DailyCounts)-1\\r\\n| project-away day, Index\\r\\n| extend AnomalyScoreAbs = abs(toreal(AnomalyScore))\\r\\n| extend WasAnomalous = iif(MaxAnomalyScore > 3 or MinAnomalyScore < -3, true, false)\\r\\n| extend Anomalous = iif(AnomalyScoreAbs > 3, true, false)\\r\\n| order by AnomalyScoreAbs desc\\r\\n\\r\\n\",\"size\":0,\"title\":\"Daily anomaly scores, by database\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"ResourceId\",\"exportParameterName\":\"SelectedResource\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"DailyCounts\",\"formatter\":9,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"AnomalyScore\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"startsWith\",\"thresholdValue\":\"-\",\"representation\":\"trenddown\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"0\",\"representation\":\"right\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"trendup\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"MaxAnomalyScore\",\"formatter\":5},{\"columnMatch\":\"MinAnomalyScore\",\"formatter\":5},{\"columnMatch\":\"AnomlyScoreTrend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"orange\"}},{\"columnMatch\":\"AnomalyScoreAbs\",\"formatter\":5},{\"columnMatch\":\"WasAnomalous\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"true\",\"representation\":\"2\",\"text\":\"\"},{\"operator\":\"==\",\"thresholdValue\":\"false\",\"representation\":\"Blank\",\"text\":\"\"},{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Anomalous\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"true\",\"representation\":\"Important\",\"text\":\"\"},{\"operator\":\"==\",\"thresholdValue\":\"false\",\"representation\":\"Blank\",\"text\":\"\"},{\"operator\":\"Default\",\"representation\":\"success\",\"text\":\"{0}{1}\"}]}}]}},\"name\":\"query - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics\\r\\n| where TimeGenerated > {BaselineTimeRange:start}\\r\\n| where ResourceType == \\\"SERVERS/DATABASES\\\"\\r\\n| where Category == \\\"SQLSecurityAuditEvents\\\"\\r\\n| where tolower(ResourceId) == tolower('{SelectedResource}')\\r\\n| summarize DailyCount = count() by ResourceId, bin_at(TimeGenerated, 1d, now())\\r\\n| make-series metric = sum(DailyCount) on TimeGenerated in range({BaselineTimeRange:start}, now()-1d, 1d) by ResourceId\\r\\n| extend series_decompose_anomalies(metric) // Anomaly detection\\r\\n| project ResourceId, day = (TimeGenerated), DailyCounts = metric, AnomalyScore = series_decompose_anomalies_metric_ad_score\\r\\n\",\"size\":0,\"title\":\"Anomaly score over time for the selected database (from the list above)\",\"color\":\"orange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"timechart\",\"chartSettings\":{\"yAxis\":[\"AnomalyScore\"],\"ySettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"customWidth\":\"50\",\"name\":\"query - 2 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics\\r\\n| where TimeGenerated > {BaselineTimeRange:start}\\r\\n| where ResourceType == \\\"SERVERS/DATABASES\\\"\\r\\n| where Category == \\\"SQLSecurityAuditEvents\\\"\\r\\n| where tolower(ResourceId) == tolower('{SelectedResource}')\\r\\n| summarize DailyCount = count() by ResourceId, bin_at(TimeGenerated, 1d, now())\\r\\n| make-series metric = sum(DailyCount) on TimeGenerated in range({BaselineTimeRange:start}, now()-1d, 1d) by ResourceId\\r\\n| extend series_decompose_anomalies(metric) // Anomaly detection\\r\\n| project ResourceId, day = (TimeGenerated), DailyCounts = metric, AnomalyScore = series_decompose_anomalies_metric_ad_score\\r\\n\",\"size\":0,\"title\":\"Daily activity over time for the selected database (from the list above)\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"timechart\",\"chartSettings\":{\"yAxis\":[\"DailyCounts\"],\"ySettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"customWidth\":\"50\",\"name\":\"query - 2\"}]},\"name\":\"baselines\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"mainTab\",\"comparison\":\"isEqualTo\",\"value\":\"diagnostics\"},\"name\":\"DiagnosticsGroup\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"32eb9f07-9b66-402c-b87a-e9306ae67aec\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Aggregate\",\"type\":2,\"isRequired\":true,\"typeSettings\":{\"showDefault\":false},\"jsonData\":\"[     {\\\"value\\\": \\\"Database\\\", \\\"label\\\": \\\"Database\\\" }\\r\\n    , { \\\"value\\\": \\\"PrincipalName\\\", \\\"label\\\": \\\"PrincipalName\\\", \\\"selected\\\":true }\\r\\n    , { \\\"value\\\": \\\"ClientIp\\\", \\\"label\\\": \\\"ClientIp\\\" }\\r\\n    , { \\\"value\\\": \\\"HostName\\\", \\\"label\\\": \\\"HostName\\\" }\\r\\n    , { \\\"value\\\": \\\"ApplicationName\\\", \\\"label\\\": \\\"ApplicationName\\\" }\\r\\n    , { \\\"value\\\": \\\"ActionName\\\", \\\"label\\\": \\\"ActionName\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000}},{\"version\":\"KqlParameterItem/1.0\",\"name\":\"Quantify\",\"type\":2,\"isRequired\":true,\"typeSettings\":{\"showDefault\":false},\"jsonData\":\"[     { \\\"value\\\": \\\"'Events'\\\", \\\"label\\\": \\\"Events\\\", \\\"selected\\\":true }\\r\\n    , { \\\"value\\\": \\\"'Successes'\\\", \\\"label\\\": \\\"Successes\\\" }\\r\\n    , { \\\"value\\\": \\\"'Failures'\\\", \\\"label\\\": \\\"Failures\\\" }\\r\\n    , { \\\"value\\\": \\\"'Egress'\\\", \\\"label\\\": \\\"Egress\\\" }\\r\\n    , { \\\"value\\\": \\\"'Ingress'\\\", \\\"label\\\": \\\"Ingress\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000},\"id\":\"01d632f2-c540-489f-89a4-f388b3369554\"},{\"id\":\"348c2b77-db4c-4893-83fe-86cc0e9b8a2b\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Filter\",\"type\":2,\"isRequired\":true,\"typeSettings\":{\"showDefault\":false},\"jsonData\":\"[     { \\\"value\\\": \\\"'All'\\\", \\\"label\\\": \\\"All\\\", \\\"selected\\\":true }\\r\\n    , { \\\"value\\\": \\\"'Execution'\\\", \\\"label\\\": \\\"Execution\\\" }\\r\\n    , { \\\"value\\\": \\\"'Statement'\\\", \\\"label\\\": \\\"Statement\\\" }\\r\\n    , { \\\"value\\\": \\\"'Drop'\\\", \\\"label\\\": \\\"Drop\\\" }\\r\\n    , { \\\"value\\\": \\\"'Outward'\\\", \\\"label\\\": \\\"Outward\\\" }\\r\\n    , { \\\"value\\\": \\\"'OS'\\\", \\\"label\\\": \\\"OS\\\" }\\r\\n]\",\"timeContext\":{\"durationMs\":86400000}}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"Parameters for general query\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where Category == 'SQLSecurityAuditEvents'\\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| extend PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ApplicationName = application_name_s, ActionName = action_name_s\\r\\n    , Database = strcat(LogicalServerName_s, '/', database_name_s), isSuccess = succeeded_s, affectedRows = affected_rows_d, responseRows = response_rows_d\\r\\n    , Statement = statement_s\\r\\n    , q = {Quantify:value}, f = {Filter:value}\\r\\n| extend indicator = case (\\r\\n    f == 'All', 1,\\r\\n    f == 'Statement', iff(isempty(Statement) == 'false', 1, 0),\\r\\n    f == 'Execution', iff(Statement contains 'xp_' or Statement contains 'ps.exe' or Statement contains 'powershell' or Statement contains 'msdb exec', 1, 0),\\r\\n    f == 'Drop', iff(Statement contains \\\"drop table\\\" or Statement contains \\\"drop database\\\", 1, 0),\\r\\n    f == 'Outward', iff(Statement contains 'http:' or Statement contains 'https:' or Statement contains 'ftp:' or Statement contains 'curl ', 1, 0),\\r\\n    f == 'OS', iff(Statement contains 'sys.dm_os', 1, 0),\\r\\n    0)\\r\\n| where indicator == 1\\r\\n| extend quantity = case(\\r\\n        q == 'Events', tolong(1),\\r\\n        q == 'Successes', tolong(iff(isSuccess == 'true', 1, 0)),\\r\\n        q == 'Failures', tolong(iff(isSuccess == 'false', 1, 0)),\\r\\n        q == 'Egress', tolong(responseRows),\\r\\n        q == 'Ingress', tolong(affectedRows),\\r\\n        tolong(1))\\r\\n| make-series sum(quantity) on TimeGenerated from ago(30d) to now() step 1d by {Aggregate:escapejson}\\r\\n//| summarize Count = sum(quantity) by {Aggregate:escapejson}, bin_at(TimeGenerated, 1h, now())\\r\\n| render timechart\",\"size\":0,\"showAnnotations\":true,\"title\":\"Distribution by parameter\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"timeBrushParameterName\":\"TimeWindow\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"]},\"customWidth\":\"70\",\"name\":\"query: Piechart by parameter\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where Category == 'SQLSecurityAuditEvents'\\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where TimeGenerated {TimeWindow}\\r\\n| extend PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ApplicationName = application_name_s, ActionName = action_name_s\\r\\n    , Database = strcat(LogicalServerName_s, '/', database_name_s), isSuccess = succeeded_s, affectedRows = affected_rows_d, responseRows = response_rows_d\\r\\n    , Statement = statement_s, q = {Quantify:value}, f = {Filter:value}\\r\\n| extend indicator = case (\\r\\n    f == 'All', 1,\\r\\n    f == 'Statement', iff(isempty(Statement) == 'false', 1, 0),\\r\\n    f == 'Execution', iff(Statement contains 'xp_' or Statement contains 'ps.exe' or Statement contains 'powershell' or Statement contains 'msdb exec', 1, 0),\\r\\n    f == 'Drop', iff(Statement contains \\\"drop table\\\" or Statement contains \\\"drop database\\\", 1, 0),\\r\\n    f == 'Outward', iff(Statement contains 'http:' or Statement contains 'https:' or Statement contains 'ftp:' or Statement contains 'curl ', 1, 0),\\r\\n    f == 'OS', iff(Statement contains 'sys.dm_os', 1, 0),\\r\\n    0)\\r\\n| where indicator == 1\\r\\n| extend quantity = case(\\r\\n        q == 'Events', tolong(1),\\r\\n        q == 'Successes', tolong(iff(isSuccess == 'true', 1, 0)),\\r\\n        q == 'Failures', tolong(iff(isSuccess == 'false', 1, 0)),\\r\\n        q == 'Egress', tolong(responseRows),\\r\\n        q == 'Ingress', tolong(affectedRows),\\r\\n        tolong(1))\\r\\n| summarize Count = sum(quantity) by {Aggregate:escapejson}\\r\\n| sort by Count desc\\r\\n\",\"size\":0,\"title\":\"Distribution by parameter\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"piechart\"},\"customWidth\":\"30\",\"name\":\"query: Piechart by parameter\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureDiagnostics \\r\\n| where Category == 'SQLSecurityAuditEvents'\\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| where TimeGenerated {TimeWindow}\\r\\n| project TimeGenerated, ResourceId, ClientIP = client_ip_s, Principal = server_principal_name_s\\r\\n, HostName = host_name_s, ApplicationName = application_name_s, ActionName = action_name_s\\r\\n, Database = strcat(LogicalServerName_s, '/', database_name_s), AdditionalInfo = parse_xml(additional_information_s), Statement = statement_s, isSuccessful = succeeded_s, f = {Filter:value}\\r\\n| extend indicator = case (\\r\\n    f == 'All', 1,\\r\\n    f == 'Statement', iff(isempty(Statement) == 'false', 1, 0),\\r\\n    f == 'Execution', iff(Statement contains 'xp_' or Statement contains 'ps.exe' or Statement contains 'powershell' or Statement contains 'msdb exec', 1, 0),\\r\\n    f == 'Drop', iff(Statement contains \\\"drop table\\\" or Statement contains \\\"drop database\\\", 1, 0),\\r\\n    f == 'Outward', iff(Statement contains 'http:' or Statement contains 'https:' or Statement contains 'ftp:' or Statement contains 'curl ', 1, 0),\\r\\n    f == 'OS', iff(Statement contains 'sys.dm_os', 1, 0),\\r\\n    0)\\r\\n| where indicator == 1\\r\\n| evaluate bag_unpack(AdditionalInfo)\\r\\n//| evaluate bag_unpack(batch_information)\\r\\n//| extend split(failure_reason, ',')\\r\\n//| extend Error = tostring(failure_reason[(0)]), Level = trim(@\\\"[^\\\\w]+\\\", tostring(failure_reason[(1)])), Reason = trim(@\\\"[^\\\\w]+\\\", tostring(failure_reason[(2)]))\\r\\n//| project-away failure_reason\\r\\n| project TimeGenerated, ResourceId, Database, ClientIP, Principal, ApplicationName, HostName, ActionName, Statement, isSuccessful//, Error, Level, Reason\\r\\n| sort by isSuccessful desc, TimeGenerated desc\",\"size\":0,\"title\":\"Events Log\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"Statement\",\"exportParameterName\":\"SelectedSpecialStatement\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"]},\"customWidth\":\"100\",\"name\":\"query: Piechart by parameter - Copy - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"b71c1023-54dd-457a-a05d-77a06c3b25fa\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Statement\",\"type\":1,\"query\":\"let statement = '{SelectedSpecialStatement:base64}';\\r\\nprint Statement = base64_decode_tostring(statement)\",\"typeSettings\":{\"multiLineText\":true,\"editorLanguage\":\"text\",\"multiLineHeight\":10},\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"formHorizontal\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 10 - Copy - Copy - Copy\"}]},\"conditionalVisibility\":{\"parameterName\":\"mainTab\",\"comparison\":\"isEqualTo\",\"value\":\"diagnostics\"},\"name\":\"AuditLogInvestigate\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"dce50414-fa42-49b9-9c83-54acce4d7211\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SentinelWSs\",\"label\":\"Sentinel Workspaces\",\"type\":5,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"where type =~ 'microsoft.operationsmanagement/solutions'\\r\\n| where strcat('/subscriptions/',subscriptionId) in ({Subscriptions})\\r\\n| where name startswith 'SecurityInsights'\\r\\n| project tostring(properties.workspaceResourceId)\",\"crossComponentResources\":[\"{Subscriptions}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"bf75c90c-0362-4276-b5dc-7b5140ead81d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ASCAndSentWSs\",\"type\":5,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"datatable (Workspace:string) [{Workspaces}]\\r\\n| union (datatable (Workspace:string) [{SentinelWSs}])\\r\\n| distinct Workspace\\r\\n\",\"isHiddenWhenLocked\":true,\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 11\"},{\"type\":1,\"content\":{\"json\":\"<H1>Troubleshooting guide</H1>\\r\\n<H3>Select one of the following SQL Alerts to investigate:</H3>\\r\\n\"},\"name\":\"text - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"SecurityAlert\\r\\n| where Entities has \\\"MICROSOFT.SQL\\\"\\r\\n| extend ['Azure Defender Alert'] = iff(isnotempty(AlertLink),\\\"Open in Azure Defender\\\",\\\"\\\")\\r\\n| extend Entities=tostring(Entities), ['Principal Name']=tostring(todynamic(ExtendedProperties)[\\\"Principal name\\\"])\\r\\n| distinct StartTime, ResourceId, DisplayName, AlertSeverity, ['Azure Defender Alert'], AlertLink, SystemAlertId, Entities, ['Principal Name'], RemediationSteps\\r\\n| extend Entities=todynamic(Entities), RemediationSteps=todynamic(RemediationSteps)\\r\\n| mv-apply element=Entities to typeof(dynamic) on \\r\\n(\\r\\n    where element.Type == \\\"azure-resource\\\"\\r\\n    | project ResourceId=tostring(element.ResourceId)\\r\\n)\\r\\n| where tolower(ResourceId) in ({Databases})\\r\\n| mv-apply element=Entities to typeof(dynamic) on \\r\\n(\\r\\n    where element.Type == \\\"ip\\\"\\r\\n    | project ['Related IP']=element.Address\\r\\n)\\r\\n| join kind=leftouter (\\r\\nSecurityIncident\\r\\n| mv-expand AlertIds to typeof(string)\\r\\n| project AlertIds, IncidentUrl\\r\\n) on $left.SystemAlertId == $right.AlertIds\\r\\n| project-away AlertIds\\r\\n| extend ['Sentinel Incident']=iff(isempty(IncidentUrl), \\\"This alert is not onboarded to Sentinel\\\", \\\"Open incident in Sentinel\\\")\\r\\n| extend SubscriptionId=tostring(split(ResourceId, '/')[2]), ResourceGroup=tostring(split(ResourceId, '/')[4]), SqlName=tostring(split(ResourceId, '/')[-1])\\r\\n| order by StartTime desc\\r\\n| project-rename ['Start Time']=StartTime, ['Alert Name']=DisplayName, ['Alert Severity']=AlertSeverity\\r\\n\\r\\n\",\"size\":0,\"timeContextFromParameter\":\"TimeRange\",\"exportedParameters\":[{\"fieldName\":\"Related IP\",\"parameterName\":\"ip\",\"parameterType\":1},{\"fieldName\":\"SqlName\",\"parameterName\":\"SqlName\",\"parameterType\":1},{\"fieldName\":\"Start Time\",\"parameterName\":\"StartTime\",\"parameterType\":1},{\"fieldName\":\"SubscriptionId\",\"parameterName\":\"SubscriptionId\",\"parameterType\":1},{\"fieldName\":\"ResourceGroup\",\"parameterName\":\"ResourceGroup\",\"parameterType\":1},{\"fieldName\":\"ResourceId\",\"parameterName\":\"ResourceId\",\"parameterType\":1},{\"fieldName\":\"SystemAlertId\",\"parameterName\":\"VendorOriginalId\",\"parameterType\":1},{\"fieldName\":\"Entities\",\"parameterName\":\"Entities\",\"parameterType\":1},{\"fieldName\":\"AlertLink\",\"parameterName\":\"ASCLink\",\"parameterType\":1},{\"fieldName\":\"Principal Name\",\"parameterName\":\"PrincipalName\",\"parameterType\":1},{\"fieldName\":\"RemediationSteps\",\"parameterName\":\"RemediationSteps\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{ASCAndSentWSs}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Alert Severity\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"High\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Medium\",\"representation\":\"orange\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Low\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"blue\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Azure Defender Alert\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"AlertLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"AlertLink\",\"formatter\":5},{\"columnMatch\":\"SystemAlertId\",\"formatter\":5},{\"columnMatch\":\"Entities\",\"formatter\":5},{\"columnMatch\":\"RemediationSteps\",\"formatter\":5},{\"columnMatch\":\"IncidentUrl\",\"formatter\":5,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Open the Sentinel Incident\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false},\"emptyValCustomText\":\"Alert not onboarded to Sentinel\"}},{\"columnMatch\":\"Sentinel Incident\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"IncidentUrl\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"SubscriptionId\",\"formatter\":5},{\"columnMatch\":\"ResourceGroup\",\"formatter\":5},{\"columnMatch\":\"SqlName\",\"formatter\":5},{\"columnMatch\":\"Message\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"IncidentUrl\",\"linkTarget\":\"Url\"}}]}},\"name\":\"query - 0\"},{\"type\":1,\"content\":{\"json\":\"<H2><b>Step 1:</b> Validate the activity in the logs:</H2>\\r\\nThis section presents the activity related to the entities in the alert: the IP, the database and the principal user within the selected time window around the alert. \\r\\n<ul>\\r\\n<li>Can you identify suspicious or unexpected activity? </li>\\r\\n</ul>\\r\\n\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"ip\",\"comparison\":\"isNotEqualTo\",\"value\":\"\"},\"name\":\"text - 3\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"0c4d4daa-5109-4e4c-90c8-e6acaf6b76ae\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeWin\",\"label\":\"Time window\",\"type\":2,\"description\":\"Time window in days to search around the alert\",\"query\":\"print TimeWin=range(1d, 7d, 1d)\\r\\n| mv-expand TimeWin \\r\\n| extend TimeWin=totimespan(TimeWin)\\r\\n| extend TimeWinText=strcat(toint(TimeWin/1d), iff(TimeWin == 1d, ' day ',' days '))//, toint(TimeWin/1d-toint(TimeWin/1d))*24, ' hours')\",\"value\":\"1.00:00:00\",\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"e78776f9-43d6-407d-8be9-0d22514c2935\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EmailContent\",\"type\":1,\"query\":\"print Subject=\\\"SOC inquiry\\\",\\r\\nBody=\\\"Dear User,\\\\n\\\\nA suspicious activity was observed on your {SqlName} SQL server.\\\\nPlease confirm you are aware of this activity, or contact us for assistance.\\\\n\\\\nThanks,\\\\nThe SOC\\\"\\r\\n| project EmailContent=strcat('?subject=', Subject, '&body=', replace('\\\\n','%0d%0a',Body))\\r\\n\\r\\n\",\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"ip\",\"comparison\":\"isNotEqualTo\",\"value\":\"\"},\"name\":\"parameters - 2\"},{\"type\":1,\"content\":{\"json\":\"<H3>Search for all the activity of IP {ip}:</H3>\\r\\n\\r\\n\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"ip\",\"comparison\":\"isNotEqualTo\",\"value\":\"\"},\"name\":\"text - 3 - Copy\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let t = datetime({StartTime});\\r\\nlet timeWin = timespan({TimeWin});\\r\\nlet AzureDiagnosticsTable = view () { (AzureDiagnostics  | extend CategoryValue=Category, OperationName=strcat(OperationName,'/',action_name_s), ActivityStatus=iff(succeeded_s==\\\"true\\\", \\\"Succeeded\\\", \\\"Failed\\\")) };\\r\\nunion withsource=SourceTable isfuzzy=true \\r\\nAzureActivity, \\r\\nAzureDiagnosticsTable\\r\\n| where TimeGenerated between ((t-timeWin) .. (t+timeWin))\\r\\n| search \\\"{ip}\\\"\\r\\n| summarize min(TimeGenerated), count() by SourceTable, CategoryValue, Operation=iff(isempty(OperationName),tolower(OperationNameValue),OperationName), ApplicationName=column_ifexists('application_name_s', \\\"\\\"), Caller, ActivityStatus\\r\\n| summarize ['Earliest Call']=min(min_TimeGenerated), ActivityStatus=make_list(pack('Status',ActivityStatus,'Count',count_)) by SourceTable, Category=CategoryValue, Operation, ApplicationName, Caller\\r\\n| extend Chat = iff(isnotempty(Caller),\\\"💬\\\",\\\"\\\")\\r\\n| extend ChatLink=strcat(\\\"https://teams.microsoft.com/l/chat/0/0?users=\\\", Caller)\\r\\n| extend Email= iff(isnotempty(Caller),\\\"📧\\\",\\\"\\\")\\r\\n| extend EmailLink=strcat(\\\"mailto:\\\",Caller,\\\"{EmailContent}\\\")\\r\\n| project ['Source Table']=iff(SourceTable == \\\"AzureDiagnosticsTable\\\", \\\"AzureDiagnostics\\\", SourceTable), Category, Operation, ApplicationName, ['Earliest Call'], Caller, Chat, ChatLink, Email, EmailLink, ActivityStatus\\r\\n| mv-expand ActivityStatus \\r\\n| evaluate bag_unpack(ActivityStatus)\\r\\n| union (print Status='dummy', Count=1 | take 0) // force the columns existance\\r\\n| evaluate pivot(Status, sum(Count))\\r\\n| project-rename ['Application Name']=ApplicationName\\r\\n| extend ['Activity Status'] = column_ifexists('Accepted', 0)+column_ifexists('Failed', 0)+column_ifexists('Succeeded', 0)+column_ifexists('Active', 0)+column_ifexists('Started', 0)+column_ifexists('_Empty', 0)\\r\\n\",\"size\":1,\"showAnalytics\":true,\"title\":\"Choose a record to present full details:\",\"exportedParameters\":[{\"fieldName\":\"Source Table\",\"parameterName\":\"SourceTable\",\"parameterType\":1},{\"fieldName\":\"Operation\",\"parameterName\":\"Operation\",\"parameterType\":1},{\"fieldName\":\"Caller\",\"parameterName\":\"Caller\",\"parameterType\":1,\"defaultValue\":\"\"},{\"fieldName\":\"Application Name\",\"parameterName\":\"ApplicationName\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{ASCAndSentWSs}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Chat\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"ChatLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"ChatLink\",\"formatter\":5},{\"columnMatch\":\"Email\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"EmailLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"EmailLink\",\"formatter\":5},{\"columnMatch\":\"Accepted\",\"formatter\":5},{\"columnMatch\":\"Active\",\"formatter\":5},{\"columnMatch\":\"Failed\",\"formatter\":5},{\"columnMatch\":\"Started\",\"formatter\":5},{\"columnMatch\":\"Succeeded\",\"formatter\":5},{\"columnMatch\":\"_Empty\",\"formatter\":5},{\"columnMatch\":\"Activity Status\",\"formatter\":22,\"formatOptions\":{\"compositeBarSettings\":{\"labelText\":\" Total: [\\\"Activity Status\\\"]\",\"columnSettings\":[{\"columnName\":\"_Empty\",\"color\":\"gray\"},{\"columnName\":\"Accepted\",\"color\":\"blue\"},{\"columnName\":\"Active\",\"color\":\"orange\"},{\"columnName\":\"Failed\",\"color\":\"redBright\"},{\"columnName\":\"Started\",\"color\":\"green\"},{\"columnName\":\"Succeeded\",\"color\":\"turquoise\"}]}}}]}},\"conditionalVisibility\":{\"parameterName\":\"ip\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 15 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let t = datetime({StartTime});\\r\\nlet timeWin = timespan({TimeWin});\\r\\nlet AzureDiagnosticsTable = view () { (AzureDiagnostics  | extend CategoryValue=Category, OperationName=strcat(OperationName,'/',action_name_s), ActivityStatus=iff(succeeded_s==\\\"true\\\", \\\"Succeeded\\\", \\\"Failed\\\")) };\\r\\nunion withsource=SourceTable isfuzzy=true \\r\\nAzureActivity, \\r\\nAzureDiagnosticsTable\\r\\n| where TimeGenerated between ((t-timeWin) .. (t+timeWin))\\r\\n| search \\\"{ip}\\\"\\r\\n| extend Operation=iff(isempty(OperationName),tolower(OperationNameValue),OperationName), ApplicationName=column_ifexists('application_name_s', \\\"\\\"), SourceTable=iff(SourceTable == \\\"AzureDiagnosticsTable\\\", \\\"AzureDiagnostics\\\", SourceTable)\\r\\n| where SourceTable == \\\"{SourceTable}\\\"\\r\\n| where Operation == \\\"{Operation}\\\"\\r\\n| where (\\\"{Caller}\\\" == \\\"\\\" and isempty(Caller)) or \\\"{Caller}\\\" == Caller \\r\\n| where (\\\"{ApplicationName}\\\" == \\\"\\\" and isempty(ApplicationName)) or \\\"{ApplicationName}\\\" == ApplicationName \\r\\n| project-away ['$table']\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Full details\",\"noDataMessage\":\"Click a record on the left to see full details\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{ASCAndSentWSs}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Chat\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"ChatLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"ChatLink\",\"formatter\":5},{\"columnMatch\":\"Email\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"EmailLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"EmailLink\",\"formatter\":5},{\"columnMatch\":\"Accepted\",\"formatter\":5},{\"columnMatch\":\"Active\",\"formatter\":5},{\"columnMatch\":\"Failed\",\"formatter\":5},{\"columnMatch\":\"Started\",\"formatter\":5},{\"columnMatch\":\"Succeeded\",\"formatter\":5},{\"columnMatch\":\"_Empty\",\"formatter\":5},{\"columnMatch\":\"Activity Status\",\"formatter\":22,\"formatOptions\":{\"compositeBarSettings\":{\"labelText\":\" Total: [\\\"Activity Status\\\"]\",\"columnSettings\":[{\"columnName\":\"_Empty\",\"color\":\"gray\"},{\"columnName\":\"Accepted\",\"color\":\"blue\"},{\"columnName\":\"Active\",\"color\":\"orange\"},{\"columnName\":\"Failed\",\"color\":\"redBright\"},{\"columnName\":\"Started\",\"color\":\"green\"},{\"columnName\":\"Succeeded\",\"color\":\"turquoise\"}]}}}]}},\"conditionalVisibilities\":[{\"parameterName\":\"ip\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"SourceTable\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 15 - Copy - Copy\",\"styleSettings\":{\"margin\":\"10\"}}]},\"name\":\"group - 18\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"<H3>Search for all the activity on the {SqlName} database:</H3>\\r\\n\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"SqlName\",\"comparison\":\"isNotEqualTo\"},\"name\":\"text - 5\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let t = datetime({StartTime});\\r\\nlet timeWin = timespan({TimeWin});\\r\\nlet AzureDiagnosticsTable = view () { (AzureDiagnostics  | extend CategoryValue=Category, OperationName=strcat(OperationName,'/',action_name_s), ActivityStatus=iff(succeeded_s==\\\"true\\\", \\\"Succeeded\\\", \\\"Failed\\\")) };\\r\\nunion withsource=SourceTable isfuzzy=true \\r\\nAzureActivity, \\r\\nAzureDiagnosticsTable\\r\\n| where TimeGenerated between ((t-timeWin) .. (t+timeWin))\\r\\n| search \\\"{SqlName}\\\"\\r\\n| summarize min(TimeGenerated), count() by SourceTable, CategoryValue, Operation=iff(isempty(OperationName),tolower(OperationNameValue),OperationName), ApplicationName=column_ifexists('application_name_s', \\\"\\\"), Caller, ActivityStatus\\r\\n| summarize ['Earliest Call']=min(min_TimeGenerated), ActivityStatus=make_list(pack('Status',ActivityStatus,'Count',count_)) by SourceTable, Category=CategoryValue, Operation, ApplicationName, Caller\\r\\n| extend Chat = iff(isnotempty(Caller),\\\"💬\\\",\\\"\\\")\\r\\n| extend ChatLink=strcat(\\\"https://teams.microsoft.com/l/chat/0/0?users=\\\", Caller)\\r\\n| extend Email= iff(isnotempty(Caller),\\\"📧\\\",\\\"\\\")\\r\\n| extend EmailLink=strcat(\\\"mailto:\\\",Caller,\\\"{EmailContent}\\\")\\r\\n| project ['Source Table']=iff(SourceTable == \\\"AzureDiagnosticsTable\\\", \\\"AzureDiagnostics\\\", SourceTable), Category, Operation, ApplicationName, ['Earliest Call'], Caller, Chat, ChatLink, Email, EmailLink, ActivityStatus\\r\\n| mv-expand ActivityStatus \\r\\n| evaluate bag_unpack(ActivityStatus)\\r\\n| union (print Status='dummy', Count=1 | take 0) // force the columns existance\\r\\n| evaluate pivot(Status, sum(Count))\\r\\n| project-rename ['Application Name']=ApplicationName\\r\\n| extend ['Activity Status'] = column_ifexists('Accepted', 0)+column_ifexists('Failed', 0)+column_ifexists('Succeeded', 0)+column_ifexists('Active', 0)+column_ifexists('Started', 0)+column_ifexists('_Empty', 0)\\r\\n\",\"size\":1,\"showAnalytics\":true,\"title\":\"Choose a record to present full details:\",\"exportedParameters\":[{\"fieldName\":\"Source Table\",\"parameterName\":\"SQL_SourceTable\",\"parameterType\":1},{\"fieldName\":\"Operation\",\"parameterName\":\"SQL_Operation\",\"parameterType\":1},{\"fieldName\":\"Caller\",\"parameterName\":\"SQL_Caller\",\"parameterType\":1,\"defaultValue\":\"\"},{\"fieldName\":\"Application Name\",\"parameterName\":\"SQL_ApplicationName\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{ASCAndSentWSs}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Chat\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"ChatLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"ChatLink\",\"formatter\":5},{\"columnMatch\":\"Email\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"EmailLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"EmailLink\",\"formatter\":5},{\"columnMatch\":\"Accepted\",\"formatter\":5},{\"columnMatch\":\"Active\",\"formatter\":5},{\"columnMatch\":\"Failed\",\"formatter\":5},{\"columnMatch\":\"Started\",\"formatter\":5},{\"columnMatch\":\"Succeeded\",\"formatter\":5},{\"columnMatch\":\"_Empty\",\"formatter\":5},{\"columnMatch\":\"Activity Status\",\"formatter\":22,\"formatOptions\":{\"compositeBarSettings\":{\"labelText\":\" Total: [\\\"Activity Status\\\"]\",\"columnSettings\":[{\"columnName\":\"_Empty\",\"color\":\"gray\"},{\"columnName\":\"Accepted\",\"color\":\"blue\"},{\"columnName\":\"Active\",\"color\":\"orange\"},{\"columnName\":\"Failed\",\"color\":\"redBright\"},{\"columnName\":\"Started\",\"color\":\"green\"},{\"columnName\":\"Succeeded\",\"color\":\"turquoise\"}]}}}]}},\"conditionalVisibility\":{\"parameterName\":\"ip\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 15 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let t = datetime({StartTime});\\r\\nlet timeWin = timespan({TimeWin});\\r\\nlet AzureDiagnosticsTable = view () { (AzureDiagnostics  | extend CategoryValue=Category, OperationName=strcat(OperationName,'/',action_name_s), ActivityStatus=iff(succeeded_s==\\\"true\\\", \\\"Succeeded\\\", \\\"Failed\\\")) };\\r\\nunion withsource=SourceTable isfuzzy=true \\r\\nAzureActivity, \\r\\nAzureDiagnosticsTable\\r\\n| where TimeGenerated between ((t-timeWin) .. (t+timeWin))\\r\\n| search \\\"{SqlName}\\\"\\r\\n| extend Operation=iff(isempty(OperationName),tolower(OperationNameValue),OperationName), ApplicationName=column_ifexists('application_name_s', \\\"\\\"), SourceTable=iff(SourceTable == \\\"AzureDiagnosticsTable\\\", \\\"AzureDiagnostics\\\", SourceTable)\\r\\n| where SourceTable == \\\"{SQL_SourceTable}\\\"\\r\\n| where Operation == \\\"{SQL_Operation}\\\"\\r\\n| where (\\\"{SQL_Caller}\\\" == \\\"\\\" and isempty(Caller)) or \\\"{SQL_Caller}\\\" == Caller \\r\\n| where (\\\"{SQL_ApplicationName}\\\" == \\\"\\\" and isempty(ApplicationName)) or \\\"{SQL_ApplicationName}\\\" == ApplicationName \\r\\n| project-away ['$table']\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Full details\",\"noDataMessage\":\"Click a record on the left to see full details\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{ASCAndSentWSs}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Chat\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"ChatLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"ChatLink\",\"formatter\":5},{\"columnMatch\":\"Email\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"EmailLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"EmailLink\",\"formatter\":5},{\"columnMatch\":\"Accepted\",\"formatter\":5},{\"columnMatch\":\"Active\",\"formatter\":5},{\"columnMatch\":\"Failed\",\"formatter\":5},{\"columnMatch\":\"Started\",\"formatter\":5},{\"columnMatch\":\"Succeeded\",\"formatter\":5},{\"columnMatch\":\"_Empty\",\"formatter\":5},{\"columnMatch\":\"Activity Status\",\"formatter\":22,\"formatOptions\":{\"compositeBarSettings\":{\"labelText\":\" Total: [\\\"Activity Status\\\"]\",\"columnSettings\":[{\"columnName\":\"_Empty\",\"color\":\"gray\"},{\"columnName\":\"Accepted\",\"color\":\"blue\"},{\"columnName\":\"Active\",\"color\":\"orange\"},{\"columnName\":\"Failed\",\"color\":\"redBright\"},{\"columnName\":\"Started\",\"color\":\"green\"},{\"columnName\":\"Succeeded\",\"color\":\"turquoise\"}]}}}]}},\"conditionalVisibilities\":[{\"parameterName\":\"SqlName\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"SQL_SourceTable\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 15 - Copy - Copy\",\"styleSettings\":{\"margin\":\"10\"}}]},\"name\":\"group - 18 - Copy\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"<H3>Search for all the activity of principal {PrincipalName}:</H3>\\r\\n\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"PrincipalName\",\"comparison\":\"isNotEqualTo\"},\"name\":\"text - 5 - Copy\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let t = datetime({StartTime});\\r\\nlet timeWin = timespan({TimeWin});\\r\\nlet AzureDiagnosticsTable = view () { (AzureDiagnostics  | extend CategoryValue=Category, OperationName=strcat(OperationName,'/',action_name_s), ActivityStatus=iff(succeeded_s==\\\"true\\\", \\\"Succeeded\\\", \\\"Failed\\\")) };\\r\\nunion withsource=SourceTable isfuzzy=true \\r\\nAzureActivity, \\r\\nAzureDiagnosticsTable\\r\\n| where TimeGenerated between ((t-timeWin) .. (t+timeWin))\\r\\n| search \\\"{PrincipalName}\\\"\\r\\n| summarize min(TimeGenerated), count() by SourceTable, CategoryValue, Operation=iff(isempty(OperationName),tolower(OperationNameValue),OperationName), ApplicationName=column_ifexists('application_name_s', \\\"\\\"), Caller, ActivityStatus\\r\\n| summarize ['Earliest Call']=min(min_TimeGenerated), ActivityStatus=make_list(pack('Status',ActivityStatus,'Count',count_)) by SourceTable, Category=CategoryValue, Operation, ApplicationName, Caller\\r\\n| extend Chat = iff(isnotempty(Caller),\\\"💬\\\",\\\"\\\")\\r\\n| extend ChatLink=strcat(\\\"https://teams.microsoft.com/l/chat/0/0?users=\\\", Caller)\\r\\n| extend Email= iff(isnotempty(Caller),\\\"📧\\\",\\\"\\\")\\r\\n| extend EmailLink=strcat(\\\"mailto:\\\",Caller,\\\"{EmailContent}\\\")\\r\\n| project ['Source Table']=iff(SourceTable == \\\"AzureDiagnosticsTable\\\", \\\"AzureDiagnostics\\\", SourceTable), Category, Operation, ApplicationName, ['Earliest Call'], Caller, Chat, ChatLink, Email, EmailLink, ActivityStatus\\r\\n| mv-expand ActivityStatus \\r\\n| evaluate bag_unpack(ActivityStatus)\\r\\n| union (print Status='dummy', Count=1 | take 0) // force the columns existance\\r\\n| evaluate pivot(Status, sum(Count))\\r\\n| project-rename ['Application Name']=ApplicationName\\r\\n| extend ['Activity Status'] = column_ifexists('Accepted', 0)+column_ifexists('Failed', 0)+column_ifexists('Succeeded', 0)+column_ifexists('Active', 0)+column_ifexists('Started', 0)+column_ifexists('_Empty', 0)\\r\\n\",\"size\":1,\"showAnalytics\":true,\"title\":\"Choose a record to present full details:\",\"exportedParameters\":[{\"fieldName\":\"Source Table\",\"parameterName\":\"PN_SourceTable\",\"parameterType\":1},{\"fieldName\":\"Operation\",\"parameterName\":\"PN_Operation\",\"parameterType\":1},{\"fieldName\":\"Caller\",\"parameterName\":\"PN_Caller\",\"parameterType\":1,\"defaultValue\":\"\"},{\"fieldName\":\"Application Name\",\"parameterName\":\"PN_ApplicationName\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{ASCAndSentWSs}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Chat\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"ChatLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"ChatLink\",\"formatter\":5},{\"columnMatch\":\"Email\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"EmailLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"EmailLink\",\"formatter\":5},{\"columnMatch\":\"Accepted\",\"formatter\":5},{\"columnMatch\":\"Active\",\"formatter\":5},{\"columnMatch\":\"Failed\",\"formatter\":5},{\"columnMatch\":\"Started\",\"formatter\":5},{\"columnMatch\":\"Succeeded\",\"formatter\":5},{\"columnMatch\":\"_Empty\",\"formatter\":5},{\"columnMatch\":\"Activity Status\",\"formatter\":22,\"formatOptions\":{\"compositeBarSettings\":{\"labelText\":\" Total: [\\\"Activity Status\\\"]\",\"columnSettings\":[{\"columnName\":\"_Empty\",\"color\":\"gray\"},{\"columnName\":\"Accepted\",\"color\":\"blue\"},{\"columnName\":\"Active\",\"color\":\"orange\"},{\"columnName\":\"Failed\",\"color\":\"redBright\"},{\"columnName\":\"Started\",\"color\":\"green\"},{\"columnName\":\"Succeeded\",\"color\":\"turquoise\"}]}}}]}},\"conditionalVisibility\":{\"parameterName\":\"PrincipalName\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 15 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let t = datetime({StartTime});\\r\\nlet timeWin = timespan({TimeWin});\\r\\nlet AzureDiagnosticsTable = view () { (AzureDiagnostics  | extend CategoryValue=Category, OperationName=strcat(OperationName,'/',action_name_s), ActivityStatus=iff(succeeded_s==\\\"true\\\", \\\"Succeeded\\\", \\\"Failed\\\")) };\\r\\nunion withsource=SourceTable isfuzzy=true \\r\\nAzureActivity, \\r\\nAzureDiagnosticsTable\\r\\n| where TimeGenerated between ((t-timeWin) .. (t+timeWin))\\r\\n| search \\\"{PrincipalName}\\\"\\r\\n| extend Operation=iff(isempty(OperationName),tolower(OperationNameValue),OperationName), ApplicationName=column_ifexists('application_name_s', \\\"\\\"), SourceTable=iff(SourceTable == \\\"AzureDiagnosticsTable\\\", \\\"AzureDiagnostics\\\", SourceTable)\\r\\n| where SourceTable == \\\"{PN_SourceTable}\\\"\\r\\n| where Operation == \\\"{PN_Operation}\\\"\\r\\n| where (\\\"{PN_Caller}\\\" == \\\"\\\" and isempty(Caller)) or \\\"{PN_Caller}\\\" == Caller \\r\\n| where (\\\"{PN_ApplicationName}\\\" == \\\"\\\" and isempty(ApplicationName)) or \\\"{PN_ApplicationName}\\\" == ApplicationName \\r\\n| project-away ['$table']\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Full details\",\"noDataMessage\":\"Click a record on the left to see full details\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{ASCAndSentWSs}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Chat\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"ChatLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"ChatLink\",\"formatter\":5},{\"columnMatch\":\"Email\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"EmailLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"EmailLink\",\"formatter\":5},{\"columnMatch\":\"Accepted\",\"formatter\":5},{\"columnMatch\":\"Active\",\"formatter\":5},{\"columnMatch\":\"Failed\",\"formatter\":5},{\"columnMatch\":\"Started\",\"formatter\":5},{\"columnMatch\":\"Succeeded\",\"formatter\":5},{\"columnMatch\":\"_Empty\",\"formatter\":5},{\"columnMatch\":\"Activity Status\",\"formatter\":22,\"formatOptions\":{\"compositeBarSettings\":{\"labelText\":\" Total: [\\\"Activity Status\\\"]\",\"columnSettings\":[{\"columnName\":\"_Empty\",\"color\":\"gray\"},{\"columnName\":\"Accepted\",\"color\":\"blue\"},{\"columnName\":\"Active\",\"color\":\"orange\"},{\"columnName\":\"Failed\",\"color\":\"redBright\"},{\"columnName\":\"Started\",\"color\":\"green\"},{\"columnName\":\"Succeeded\",\"color\":\"turquoise\"}]}}}]}},\"conditionalVisibilities\":[{\"parameterName\":\"PrincipalName\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"PN_SourceTable\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"query - 15 - Copy - Copy\",\"styleSettings\":{\"margin\":\"10\"}}]},\"name\":\"group - 18 - Copy - Copy\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"<H2><b>Step 2:</b> Validate the activity with the relevant users</H2>\\r\\n<br>\\r\\nThis section presents users with control plane activity (ARM) around the alert time.\\r\\n<ul>\\r\\n<li>Contact one of the users - can they explain the activity?</li>\\r\\n</ul>\\r\\n<br>\\r\\n<H3>Select a user to contact regarding the activity:</H3>\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"SubscriptionId\",\"comparison\":\"isNotEqualTo\"},\"name\":\"text - 7\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let t = datetime({StartTime});\\r\\nlet timeWin = timespan({TimeWin});\\r\\nAzureActivity\\r\\n| where TimeGenerated between ((t-timeWin) .. (t+timeWin))\\r\\n| where ActivityStatusValue == \\\"Succeeded\\\"\\r\\n| where SubscriptionId == \\\"{SubscriptionId}\\\"\\r\\n| where Caller has '@'\\r\\n| summarize latestActivity=max(TimeGenerated) by Caller, hasAccessedResourceGroup=(ResourceGroup == \\\"{ResourceGroup}\\\"), hasAccessedResource=(ResourceId == \\\"{ResourceId}\\\")\\r\\n| extend Chat = iff(isnotempty(Caller),\\\"💬\\\",\\\"\\\")\\r\\n| extend ChatLink=strcat(\\\"https://teams.microsoft.com/l/chat/0/0?users=\\\", Caller)\\r\\n| extend Email= iff(isnotempty(Caller),\\\"📧\\\",\\\"\\\")\\r\\n| extend EmailLink=strcat(\\\"mailto:\\\",Caller,\\\"{EmailContent}\\\")\\r\\n| order by hasAccessedResource desc, hasAccessedResourceGroup desc, latestActivity desc\\r\\n| project-rename ['Accessed Resource']=hasAccessedResource, ['Accessed Resource Group']=hasAccessedResourceGroup\\r\\n| take 10\\r\\n\",\"size\":1,\"noDataMessage\":\"No control-plane activity found \",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{ASCAndSentWSs}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Chat\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"ChatLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"ChatLink\",\"formatter\":5},{\"columnMatch\":\"Email\",\"formatter\":1,\"formatOptions\":{\"linkColumn\":\"EmailLink\",\"linkTarget\":\"Url\"}},{\"columnMatch\":\"EmailLink\",\"formatter\":5}]}},\"conditionalVisibility\":{\"parameterName\":\"SubscriptionId\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 8\"},{\"type\":1,\"content\":{\"json\":\"<H2><b>Step 3:</b> Remediation steps</H2>\\r\\n<br>\\r\\nThis section links to common remeditaion steps that can be applied.\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"Entities\",\"comparison\":\"isNotEqualTo\"},\"name\":\"text - 9\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let server = print ent=dynamic({Entities})\\r\\n| mvexpand ent\\r\\n| where ent.Type == 'azure-resource'\\r\\n| project AzureID=tostring(ent.ResourceId)\\r\\n;\\r\\nserver\\r\\n| project AzureID, ['Turn on auditing for the server']=strcat('https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource',tostring(trim_end(\\\"/databases/.*$\\\",AzureID)),\\\"/serverAuditing\\\"), \\r\\n['Configure server firewall']=strcat('https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource',trim_end(\\\"/databases/.*$\\\",AzureID),\\\"/firewall\\\"),\\r\\nASCLink = \\\"{ASCLink}\\\"\\r\\n| project AzureID, Actions=pack_array(\\\"View the alert in Azure Defender:\\\", 'Turn on auditing for the server:', \\\"Configure server firewall:\\\"), Links=pack_array(ASCLink, ['Turn on auditing for the server'], ['Configure server firewall'])\\r\\n| mvexpand Actions, Links\\r\\n| where isnotempty( Links)\\r\\n\\r\\n\",\"size\":1,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Links\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Click to apply\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"Entities\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 10\"},{\"type\":1,\"content\":{\"json\":\"<H3>Azure Defender recommended steps:</H3>\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"RemediationSteps\",\"comparison\":\"isNotEqualTo\"},\"name\":\"text - 7 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"print RemediationSteps=dynamic({RemediationSteps})\\r\\n| mv-expand RemediationSteps to typeof(string)\\r\\n| extend RemediationSteps=todynamic(RemediationSteps)\\r\\n| extend RemediationSteps.kind\\r\\n| project Recommendation=iff(isempty(RemediationSteps.kind), RemediationSteps,tostring(RemediationSteps.displayValue)),\\r\\n        Action=iff(tostring(RemediationSteps.kind) == \\\"Link\\\", tostring(RemediationSteps.value),\\\"\\\"),\\r\\n        Resource=iff(tostring(RemediationSteps.kind) == \\\"openBlade\\\", replace(\\\"resourceId=\\\",\\\"\\\",tostring(RemediationSteps.detailBladeInputs)),\\\"\\\")\\r\\n\",\"size\":1,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Action\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Link\"}},{\"columnMatch\":\"Resource\",\"formatter\":13,\"formatOptions\":{\"showIcon\":true}}]}},\"conditionalVisibility\":{\"parameterName\":\"RemediationSteps\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 15\"}]},\"conditionalVisibility\":{\"parameterName\":\"mainTab\",\"comparison\":\"isEqualTo\",\"value\":\"TSG\"},\"name\":\"group - 6\"}],\"fromTemplateId\":\"sentinel-AzureSQLSecurityWorkbook\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId1'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=AzureSQLSecurityWorkbook; logoFileName=AzureSQL.svg; description=Sets the time window in days to search around the alert; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=1.0.0; title=Azure SQL Database Workbook; templateRelativePath=Workbook-AzureSQLSecurity.json; subtitle=; provider=Microsoft}.description",
                "parentId": "[variables('workbookId1')]",
                "contentId": "[variables('_workbookContentId1')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "operator": "AND",
                  "criteria": [
                    {
                      "contentId": "AzureDiagnostics",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "SecurityAlert",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "SecurityIncident",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "AzureSql",
                      "kind": "DataConnector"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_workbookContentId1')]",
        "contentKind": "Workbook",
        "displayName": "[parameters('workbook1-name')]",
        "contentProductId": "[variables('_workbookcontentProductId1')]",
        "id": "[variables('_workbookcontentProductId1')]",
        "version": "[variables('workbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject1').analyticRuleTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-ErrorsCredentialStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject1').analyticRuleVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This query batches of distinct SQL queries that failed with error codes that might indicate malicious attempts to gain illegitimate access to the data. When Brute Force attacks are attempted, majority of logins will use wrong credentials, thus will fail with error code 18456. Thus, if we see a large number of logins with such error codes, this could indicate Brute Force attack.",
                "displayName": "Credential errors stateful anomaly on database",
                "enabled": false,
                "query": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet monitoredErrors = pack_array(18456);        // List of sql error codes relevant for this detection.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | summarize countEvents = count(), countStatements = dcount(Statement), countStatementsWithError = dcountif(Statement, Error in (monitoredErrors))\n        , anyMonitoredStatement = anyif(Statement, Error in (monitoredErrors)), anyInfo = anyif(AdditionalInfo, Error in (monitoredErrors))\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId\n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithErrors = dcountif(timeSlice, countStatementsWithError >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsErrorAnomalyOnStatement = iff(((countStatementsWithError >= monitoredStatementsThreshold) and (countSlicesWithErrors <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithError/monitoredStatementsThreshold, 0)\n| where IsErrorAnomalyOnStatement == 'true'\n| sort by anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "InitialAccess"
                ],
                "techniques": [
                  "T1190"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject1').analyticRuleId1,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 1",
                "parentId": "[variables('analyticRuleObject1').analyticRuleId1]",
                "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject1').analyticRuleVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
        "contentKind": "AnalyticsRule",
        "displayName": "Credential errors stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "id": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject2').analyticRuleTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-ErrorsFirewallStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject2').analyticRuleVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This query batches of distinct SQL queries that failed with error codes that might indicate malicious attempts to gain illegitimate access to the data. When attacker attempts to scan or gain access to server protected by firewall, he will be blocked by firewall and fail with error code 40615. Thus, if we see a large number of logins with such error codes, this could indicate attempts to gain access.",
                "displayName": "Firewall errors stateful anomaly on database",
                "enabled": false,
                "query": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet monitoredErrors = pack_array(40615);        // List of sql error codes relevant for this detection.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | summarize countEvents = count(), countStatements = dcount(Statement), countStatementsWithError = dcountif(Statement, Error in (monitoredErrors))\n        , anyMonitoredStatement = anyif(Statement, Error in (monitoredErrors)), anyInfo = anyif(AdditionalInfo, Error in (monitoredErrors))\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId\n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithErrors = dcountif(timeSlice, countStatementsWithError >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsErrorAnomalyOnStatement = iff(((countStatementsWithError >= monitoredStatementsThreshold) and (countSlicesWithErrors <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithError/monitoredStatementsThreshold, 0)\n| where IsErrorAnomalyOnStatement == 'true'\n| sort by anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "InitialAccess"
                ],
                "techniques": [
                  "T1190"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject2').analyticRuleId2,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 2",
                "parentId": "[variables('analyticRuleObject2').analyticRuleId2]",
                "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject2').analyticRuleVersion2]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
        "contentKind": "AnalyticsRule",
        "displayName": "Firewall errors stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "id": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject3').analyticRuleTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-ErrorsSyntaxStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject3').analyticRuleVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This query batches of distinct SQL queries that failed with error codes that might indicate malicious attempts to gain illegitimate access to the data. When blind type of attacks are performed (such as SQL injection of fuzzying), the attempted queries are often malformed and fail on wrong syntax (error 102) or wrong escaping (error 105). Thus, if a large number of different queries fail on such errors in a short amount of time, this might indicate attempted attack.",
                "displayName": "Syntax errors stateful anomaly on database",
                "enabled": false,
                "query": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet monitoredErrors = pack_array(102, 105);     // List of sql error codes relevant for this detection.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | summarize countEvents = count(), countStatements = dcount(Statement), countStatementsWithError = dcountif(Statement, Error in (monitoredErrors))\n        , anyMonitoredStatement = anyif(Statement, Error in (monitoredErrors)), anyInfo = anyif(AdditionalInfo, Error in (monitoredErrors))\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId\n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithErrors = dcountif(timeSlice, countStatementsWithError >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsErrorAnomalyOnStatement = iff(((countStatementsWithError >= monitoredStatementsThreshold) and (countSlicesWithErrors <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithError/monitoredStatementsThreshold, 0)\n| where IsErrorAnomalyOnStatement == 'true'\n| sort by anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "InitialAccess"
                ],
                "techniques": [
                  "T1190"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject3').analyticRuleId3,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 3",
                "parentId": "[variables('analyticRuleObject3').analyticRuleId3]",
                "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject3').analyticRuleVersion3]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
        "contentKind": "AnalyticsRule",
        "displayName": "Syntax errors stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject3')._analyticRulecontentProductId3]",
        "id": "[variables('analyticRuleObject3')._analyticRulecontentProductId3]",
        "version": "[variables('analyticRuleObject3').analyticRuleVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject4').analyticRuleTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-HotwordsDropStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject4').analyticRuleVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to drop tables or databases (e.g. for data vandalism).",
                "displayName": "Drop attempts stateful anomaly on database",
                "enabled": false,
                "query": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('drop table', 'drop database'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId   \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "InitialAccess"
                ],
                "techniques": [
                  "T1190"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject4').analyticRuleId4,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 4",
                "parentId": "[variables('analyticRuleObject4').analyticRuleId4]",
                "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject4').analyticRuleVersion4]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
        "contentKind": "AnalyticsRule",
        "displayName": "Drop attempts stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject4')._analyticRulecontentProductId4]",
        "id": "[variables('analyticRuleObject4')._analyticRulecontentProductId4]",
        "version": "[variables('analyticRuleObject4').analyticRuleVersion4]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject5').analyticRuleTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-HotwordsExecutionStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject5').analyticRuleVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to execute shell commands (e.g. for running illegitimate code).",
                "displayName": "Execution attempts stateful anomaly on database",
                "enabled": false,
                "query": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('xp_cmdshell', 'ps.exe', 'powershell', 'cmd.exe', 'msiexec', '<script>'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId    \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "InitialAccess"
                ],
                "techniques": [
                  "T1190"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject5').analyticRuleId5,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 5",
                "parentId": "[variables('analyticRuleObject5').analyticRuleId5]",
                "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject5').analyticRuleVersion5]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
        "contentKind": "AnalyticsRule",
        "displayName": "Execution attempts stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject5')._analyticRulecontentProductId5]",
        "id": "[variables('analyticRuleObject5')._analyticRulecontentProductId5]",
        "version": "[variables('analyticRuleObject5').analyticRuleVersion5]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject6').analyticRuleTemplateSpecName6]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-HotwordsFirewallRuleStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject6').analyticRuleVersion6]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to manipulate firewall rules (e.g. for allowing malicious access to the database).",
                "displayName": "Firewall rule manipulation attempts stateful anomaly on database",
                "enabled": false,
                "query": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('sp_set_firewall_rule', 'sp_set_database_firewall_rule', 'sp_delete_database_firewall_rule', 'sp_delete_firewall_rule', 'sys.firewall_rules', 'sys.database_firewall_rules'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId    \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "InitialAccess"
                ],
                "techniques": [
                  "T1190"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject6').analyticRuleId6,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 6",
                "parentId": "[variables('analyticRuleObject6').analyticRuleId6]",
                "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject6').analyticRuleVersion6]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
        "contentKind": "AnalyticsRule",
        "displayName": "Firewall rule manipulation attempts stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject6')._analyticRulecontentProductId6]",
        "id": "[variables('analyticRuleObject6')._analyticRulecontentProductId6]",
        "version": "[variables('analyticRuleObject6').analyticRuleVersion6]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject7').analyticRuleTemplateSpecName7]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-HotwordsOLEObjectStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject7').analyticRuleVersion7]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to manipulate OLE objects (e.g. for running malicious commands).",
                "displayName": "OLE object manipulation attempts stateful anomaly on database",
                "enabled": false,
                "query": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('sp_oamethod', 'sp_oacreate', 'sp_oasetproperty'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId   \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "InitialAccess"
                ],
                "techniques": [
                  "T1190"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject7').analyticRuleId7,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 7",
                "parentId": "[variables('analyticRuleObject7').analyticRuleId7]",
                "contentId": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject7').analyticRuleVersion7]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
        "contentKind": "AnalyticsRule",
        "displayName": "OLE object manipulation attempts stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject7')._analyticRulecontentProductId7]",
        "id": "[variables('analyticRuleObject7')._analyticRulecontentProductId7]",
        "version": "[variables('analyticRuleObject7').analyticRuleVersion7]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject8').analyticRuleTemplateSpecName8]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-HotwordsOutgoingStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject8').analyticRuleVersion8]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This query detects batches of distinct SQL queries that execute (or attempt to) commands that could indicate potential security issues - such as attempts to access external sites or resources (e.g. for downloading malicious content).",
                "displayName": "Outgoing connection attempts stateful anomaly on database",
                "enabled": false,
                "query": "let monitoredStatementsThreshold = 1;           // Minimal number of monitored statements in the slice to trigger an anomaly.\nlet trainingSlicesThreshold = 5;                // The maximal amount of slices with monitored statements in the training window before anomaly detection is throttled.\nlet timeSliceSize = 1h;                         // The size of the single timeSlice for individual aggregation.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet hotwords = pack_array('http:', 'https:', 'ftp:', 'onion.pet'); // List of monitored hot words.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s,\n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0),\n              AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize)\n    | extend hasHotword = iff(Statement has_any (hotwords), 1, 0)\n    | summarize countEvents = count(), countStatements = dcount(Statement)\n        , countStatementsWithHotwords = dcountif(Statement, hasHotword == 1)\n        , countFailedStatementsWithHotwords = dcountif(Statement, (hasHotword == 1) and (Error > 0))\n        , countSuccessfulStatementsWithHotwords = dcountif(Statement, ((hasHotword == 1)) and (Error == 0))\n        , anyMonitoredStatement = anyif(Statement, (hasHotword == 1))\n        , anySuccessfulMonitoredStatement = anyif(Statement, (hasHotword == 1) and (Error == 0))\n        , anyInfo = anyif(AdditionalInfo, hasHotword == 1)\n        , hotWord = anyif(extract(strcat_array(hotwords, '|'), 0, tolower(Statement)), hasHotword == 1)\n        by Database, ClientIp, ApplicationName, PrincipalName, timeSlice,HostName,ResourceId   \n    | extend WindowType = case( timeSlice >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= timeSlice and timeSlice < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize countSlicesWithHotwords = dcountif(timeSlice, countStatementsWithHotwords >= monitoredStatementsThreshold)\n        by Database;\nprocessedData\n| where WindowType == 'detection' \n| join kind = inner (trainingSet) on Database\n| extend IsHotwordAnomalyOnStatement = iff(((countStatementsWithHotwords >= monitoredStatementsThreshold) and (countSlicesWithHotwords <= trainingSlicesThreshold)), true, false)\n    , anomalyScore = round(countStatementsWithHotwords/monitoredStatementsThreshold, 0)\n| where IsHotwordAnomalyOnStatement == 'true'\n| sort by countSuccessfulStatementsWithHotwords desc,  anomalyScore desc, timeSlice desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])    \n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "InitialAccess"
                ],
                "techniques": [
                  "T1190"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject8').analyticRuleId8,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 8",
                "parentId": "[variables('analyticRuleObject8').analyticRuleId8]",
                "contentId": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject8').analyticRuleVersion8]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
        "contentKind": "AnalyticsRule",
        "displayName": "Outgoing connection attempts stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject8')._analyticRulecontentProductId8]",
        "id": "[variables('analyticRuleObject8')._analyticRulecontentProductId8]",
        "version": "[variables('analyticRuleObject8').analyticRuleVersion8]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject9').analyticRuleTemplateSpecName9]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-VolumeAffectedRowsStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject9').analyticRuleVersion9]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Goal: To detect anomalous data change/deletion. This query detects SQL queries that changed/deleted a large number of rows, which is significantly higher than normal for this database.\nThe detection is calculated inside recent time window (defined by 'detectionWindow' parameter), and the anomaly is calculated based on previous training window (defined by 'trainingWindow' parameter). The user can set the minimal threshold for anomaly by changing the threshold parameters volThresholdZ and volThresholdQ (higher threshold will detect only more severe anomalies).",
                "displayName": "Affected rows stateful anomaly on database",
                "enabled": false,
                "query": "let volumeThresholdZ = 3.0;                     // Minimal threshold for the Zscore to trigger anomaly (number of standard deviations above mean). If set higher, only very significant alerts will fire.\nlet volumeThresholdQ = volumeThresholdZ;        // Minimal threshold for the Qscore to trigger anomaly (number of Inter-Percentile Ranges above high percentile). If set higher, only very significant alerts will fire.\nlet volumeThresholdHardcoded = 500;             // Minimal value for the volume metric to trigger anomaly.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet monitoredColumn = 'AffectedRows';           // The name of the column for volumetric anomalies.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s\n    | extend QuantityColumn = column_ifexists(monitoredColumn, 0)\n    | extend WindowType = case( TimeGenerated >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= TimeGenerated and TimeGenerated < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize AvgVal = round(avg(QuantityColumn), 2), StdVal = round(stdev(QuantityColumn), 2), N = count(),\n                P99Val = round(percentile(QuantityColumn, 99), 2), P50Val = round(percentile(QuantityColumn, 50), 2)\n      by Database;\nprocessedData\n| where WindowType == 'detection'\n| join kind = inner (trainingSet) on Database\n| extend ZScoreVal = iff(N >= 20, round(todouble(QuantityColumn - AvgVal) / todouble(StdVal + 1), 2), 0.00),\n         QScoreVal = iff(N >= 20, round(todouble(QuantityColumn - P99Val) / todouble(P99Val - P50Val + 1), 2), 0.00)\n| extend IsVolumeAnomalyOnVal = iff((ZScoreVal > volumeThresholdZ and QScoreVal > volumeThresholdQ and QuantityColumn > volumeThresholdHardcoded), true, false), AnomalyScore = round((ZScoreVal + QScoreVal)/2, 0)\n| project TimeGenerated, Database, PrincipalName, ClientIp, HostName, ApplicationName, ActionName, Statement,\n          IsSuccess, ResponseRows, AffectedRows, IsVolumeAnomalyOnVal, AnomalyScore,ResourceId\n| where IsVolumeAnomalyOnVal == 'true'\n| sort by AnomalyScore desc, TimeGenerated desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "Impact"
                ],
                "techniques": [
                  "T1485",
                  "T1565",
                  "T1491"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject9').analyticRuleId9,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 9",
                "parentId": "[variables('analyticRuleObject9').analyticRuleId9]",
                "contentId": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject9').analyticRuleVersion9]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
        "contentKind": "AnalyticsRule",
        "displayName": "Affected rows stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject9')._analyticRulecontentProductId9]",
        "id": "[variables('analyticRuleObject9')._analyticRulecontentProductId9]",
        "version": "[variables('analyticRuleObject9').analyticRuleVersion9]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject10').analyticRuleTemplateSpecName10]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection-VolumeResponseRowsStatefulAnomalyOnDatabase_AnalyticalRules Analytics Rule with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject10').analyticRuleVersion10]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject10')._analyticRulecontentId10]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Goal: To detect anomalous data exfiltration. This query detects SQL queries that accessed a large number of rows, which is significantly higher than normal for this database.\n The calculation is made inside recent time window (defined by 'detectionWindow' parameter), and the anomaly is calculated based on previous training window (defined by 'trainingWindow' parameter). The user can set the minimal threshold for anomaly by changing the threshold parameters volThresholdZ and volThresholdQ (higher thresholds will detect only more severe anomalies).",
                "displayName": "Response rows stateful anomaly on database",
                "enabled": false,
                "query": "let volumeThresholdZ = 3.0;                     // Minimal threshold for the Zscore to trigger anomaly (number of standard deviations above mean). If set higher, only very significant alerts will fire.\nlet volumeThresholdQ = volumeThresholdZ;        // Minimal threshold for the Qscore to trigger anomaly (number of Inter-Percentile Ranges above high percentile). If set higher, only very significant alerts will fire.\nlet volumeThresholdHardcoded = 500;             // Minimal value for the volume metric to trigger anomaly.\nlet detectionWindow = 1h;                       // The size of the recent detection window for detecting anomalies.  \nlet trainingWindow = detectionWindow + 14d;     // The size of the training window before the detection window for learning the normal state.\nlet monitoredColumn = 'ResponseRows';           // The name of the column for volumetric anomalies.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated >= ago(trainingWindow)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s\n    | extend QuantityColumn = column_ifexists(monitoredColumn, 0)\n    | extend WindowType = case( TimeGenerated >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= TimeGenerated and TimeGenerated < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize AvgVal = round(avg(QuantityColumn), 2), StdVal = round(stdev(QuantityColumn), 2), N = count(),\n                P99Val = round(percentile(QuantityColumn, 99), 2), P50Val = round(percentile(QuantityColumn, 50), 2)\n      by Database;\nprocessedData\n| where WindowType == 'detection'\n| join kind = inner (trainingSet) on Database\n| extend ZScoreVal = iff(N >= 20, round(todouble(QuantityColumn - AvgVal) / todouble(StdVal + 1), 2), 0.00),\n         QScoreVal = iff(N >= 20, round(todouble(QuantityColumn - P99Val) / todouble(P99Val - P50Val + 1), 2), 0.00)\n| extend IsVolumeAnomalyOnVal = iff((ZScoreVal > volumeThresholdZ and QScoreVal > volumeThresholdQ and QuantityColumn > volumeThresholdHardcoded), true, false), AnomalyScore = round((ZScoreVal + QScoreVal)/2, 0)\n| project TimeGenerated, Database, PrincipalName, ClientIp, HostName, ApplicationName, ActionName, Statement,\n          IsSuccess, ResponseRows, AffectedRows, IsVolumeAnomalyOnVal, AnomalyScore, ResourceId\n| where IsVolumeAnomalyOnVal == 'true'\n| sort by AnomalyScore desc, TimeGenerated desc\n| extend Name = tostring(split(PrincipalName,'@',0)[0]), UPNSuffix = tostring(split(PrincipalName,'@',1)[0])\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureSql"
                  }
                ],
                "tactics": [
                  "Exfiltration"
                ],
                "techniques": [
                  "T1537",
                  "T1567"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "Name"
                      },
                      {
                        "identifier": "UPNSuffix",
                        "columnName": "UPNSuffix"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "ClientIp"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "ApplicationName"
                      }
                    ],
                    "entityType": "CloudApplication"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ],
                    "entityType": "AzureResource"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject10').analyticRuleId10,'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Analytics Rule 10",
                "parentId": "[variables('analyticRuleObject10').analyticRuleId10]",
                "contentId": "[variables('analyticRuleObject10')._analyticRulecontentId10]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject10').analyticRuleVersion10]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject10')._analyticRulecontentId10]",
        "contentKind": "AnalyticsRule",
        "displayName": "Response rows stateful anomaly on database",
        "contentProductId": "[variables('analyticRuleObject10')._analyticRulecontentProductId10]",
        "id": "[variables('analyticRuleObject10')._analyticRulecontentProductId10]",
        "version": "[variables('analyticRuleObject10').analyticRuleVersion10]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject1').huntingQueryTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "HuntingQuery-AffectedRowAnomaly_HuntingQueries Hunting Query with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject1').huntingQueryVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Azure_SQL_Database_solution_for_sentinel_Hunting_Query_1",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Anomalous Query Execution Time",
                "category": "Hunting Queries",
                "query": "let timeRange = 14d;\nlet threshold = 1; //Less than this % will be displayed\n//Count the total number of queries a user+client has accesses\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nlet totals = processedData\n| summarize count() by PrincipalName, ApplicationName\n| extend joinKey = strcat(PrincipalName, ApplicationName)\n| project joinKey, count_;\nprocessedData\n//Count the total number of times each number of rows was accessed\n| summarize count() by AffectedRows, PrincipalName, ApplicationName\n| extend joinKey = strcat(PrincipalName, ApplicationName)\n| join kind=leftouter (\n  totals\n) on joinKey\n| extend prevalence = round(toreal(count_) / toreal(count_1) * 100, 2)\n| where prevalence <= threshold\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend CloudApplication_0_Name = ApplicationName\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This hunting query will detect SQL queries that have affected an unusual number of rows for the given user and application combination.\nIt will calculate the prevalence for each row count impacted to find instances where a large number of rows is anomalously affected.\nThis hunting query is designed to detect SQL mass-deletion and mass-read events."
                  },
                  {
                    "name": "tactics",
                    "value": "InitialAccess"
                  },
                  {
                    "name": "techniques",
                    "value": "T1190"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject1')._huntingQuerycontentId1),'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Hunting Query 1",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject1')._huntingQuerycontentId1)]",
                "contentId": "[variables('huntingQueryObject1')._huntingQuerycontentId1]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject1').huntingQueryVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject1')._huntingQuerycontentId1]",
        "contentKind": "HuntingQuery",
        "displayName": "Anomalous Query Execution Time",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject1')._huntingQuerycontentId1,'-', '1.0.1')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject1')._huntingQuerycontentId1,'-', '1.0.1')))]",
        "version": "1.0.1"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject2').huntingQueryTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "HuntingQuery-BooleanBlindSQLi_HuntingQueries Hunting Query with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject2').huntingQueryVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Azure_SQL_Database_solution_for_sentinel_Hunting_Query_2",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Boolean Blind SQL Injection",
                "category": "Hunting Queries",
                "query": "let timeRange = 7d;\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\n//Anomaly decompose threshold, 2 by default\nlet scoreThreshold = 2;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nlet queryData = processedData\n| where Statement contains \"=\"\n| extend extract_equals = extract_all(@\"([a-zA-Z0-9\\-\\']+\\s?=\\s?[a-zA-Z0-9\\-\\']+)\", Statement)\n| where extract_equals != \"\"\n| mv-expand extract_equals\n| extend left = tostring(split(extract_equals, \"=\", 0)[0])\n| extend right = tostring(split(extract_equals, \"=\", 1)[0]);\nlet cleanData = queryData\n| where left !has \"'\" and right !has \"'\";\n//Data has a quote in both sides, we need to parse this properly\n//We only care when the query is balanced e.g. '1'='1', so both sides will have a quote\n//This allows us to drop some results early\nlet quoteData = queryData\n| where left has \"'\" and right has \"'\"\n| extend extract_equals = extract_all(@\"(\\'.+\\'\\s?=\\s?\\'.+\\')\", Statement)\n| extend left = tostring(split(extract_equals, \"=\", 0)[0])\n| extend right = tostring(split(extract_equals, \"=\", 1)[0]);\ncleanData\n| union quoteData\n| where left == right\n| extend alertText = strcat(left, \"=\", right)\n| summarize AlertText=make_list(alertText, 10000) by TimeGenerated, Database, ClientIp, PrincipalName, Statement, ApplicationName, ResourceId, HostName\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n| extend AzureResource_0_ResourceId = ResourceId\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This hunting query will detect instances where a balanced boolean query, e.g. \"true=true\", is observed in an SQL query sent to the server. Balanced boolean queries are commonly used by attackers to test of SQL injections vulnerabilities"
                  },
                  {
                    "name": "tactics",
                    "value": "InitialAccess"
                  },
                  {
                    "name": "techniques",
                    "value": "T1190"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject2')._huntingQuerycontentId2),'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Hunting Query 2",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject2')._huntingQuerycontentId2)]",
                "contentId": "[variables('huntingQueryObject2')._huntingQuerycontentId2]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject2').huntingQueryVersion2]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject2')._huntingQuerycontentId2]",
        "contentKind": "HuntingQuery",
        "displayName": "Boolean Blind SQL Injection",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject2')._huntingQuerycontentId2,'-', '1.0.1')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject2')._huntingQuerycontentId2,'-', '1.0.1')))]",
        "version": "1.0.1"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject3').huntingQueryTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "HuntingQuery-ExecutionTimeAnomaly_HuntingQueries Hunting Query with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject3').huntingQueryVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Azure_SQL_Database_solution_for_sentinel_Hunting_Query_3",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Anomalous Query Execution Time",
                "category": "Hunting Queries",
                "query": "let timeRange = 14d;\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\n//Anomaly decompose threshold, 2 by default\nlet scoreThreshold = 2;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nprocessedData\n//Bin the data into 1h windows, taking the average of exeuction time\n| summarize round(avg(DurationMs), 2), min(TimeGenerated), max(TimeGenerated) by PrincipalName, ApplicationName, bin(TimeGenerated, timeSliceSize), ResourceId\n//Summarise by user and application and create list ready for anomaly detection\n| summarize make_list(avg_DurationMs, 10000), make_list(min_TimeGenerated, 10000), make_list(max_TimeGenerated, 10000) by PrincipalName, ApplicationName, ResourceId\n| extend series_decompose_anomalies(list_avg_DurationMs, scoreThreshold, -1, 'linefit')\n| mv-expand TimeAnomaly=series_decompose_anomalies_list_avg_DurationMs_ad_flag, WindowStart=list_min_TimeGenerated, WindowEnd=list_max_TimeGenerated\n| project WindowStart, WindowEnd, PrincipalName, ApplicationName, TimeAnomaly, ResourceId\n| where TimeAnomaly == 1 \n//Split the query here to see raw anomaly results\n//The next section will re-join back to the SQL diagnostics data to \n//display the queries executed within the anomalous windows identified\n| extend joinKey = strcat(PrincipalName, ApplicationName)\n| join kind=leftouter (\n    processedData\n    | project ApplicationName, PrincipalName, Statement, TimeGenerated, DurationMs, ResourceId, ClientIp, HostName\n    | extend joinKey = strcat(PrincipalName, ApplicationName)\n) on joinKey\n| where TimeGenerated between (todatetime(WindowStart) .. todatetime(WindowEnd))\n| project TimeGenerated, TimeAnomaly, WindowStart, WindowEnd, PrincipalName, ApplicationName, Statement, DurationMs, ResourceId, ClientIp, HostName\n| order by DurationMs desc\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n| extend AzureResource_0_ResourceId = ResourceId\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This hunting query will detect SQL queries that took an unusually long period of time to execute based on a calculated average execution time. The query groups based on the application and the username, making this query suitable for detecting exploitation of web applications, or other SQL backed applications with predictable behaviour."
                  },
                  {
                    "name": "tactics",
                    "value": "InitialAccess"
                  },
                  {
                    "name": "techniques",
                    "value": "T1190"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject3')._huntingQuerycontentId3),'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Hunting Query 3",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject3')._huntingQuerycontentId3)]",
                "contentId": "[variables('huntingQueryObject3')._huntingQuerycontentId3]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject3').huntingQueryVersion3]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject3')._huntingQuerycontentId3]",
        "contentKind": "HuntingQuery",
        "displayName": "Anomalous Query Execution Time",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject3')._huntingQuerycontentId3,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject3')._huntingQuerycontentId3,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject4').huntingQueryTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "HuntingQuery-PrevalenceBasedQuerySizeAnomaly_HuntingQueries Hunting Query with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject4').huntingQueryVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Azure_SQL_Database_solution_for_sentinel_Hunting_Query_4",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Prevalence Based SQL Query Size Anomaly",
                "category": "Hunting Queries",
                "query": "let timeRange = 14d;\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\n//Anomaly decompose threshold, 2 by default\nlet parameterJitter = 3; //The number of different parameters seen with the anomalous query\nlet prevalenceThreshold = 10; // %\nlet dayThreshold = 1;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nlet total =\nprocessedData\n| summarize count() by PrincipalName, ApplicationName\n| extend key = strcat(PrincipalName, ApplicationName);\nlet anomalyData = processedData\n//Splitting on \"=\" provides a good estimate to the parameters\n| extend parameters = countof(Statement, \"=\")\n//Splitting on space provides a good estimate to the tokens in the query\n| extend tokens = array_length(split(Statement, \" \"))\n| summarize count(), make_set(parameters, 10000), make_list(TimeGenerated, 10000), make_list(ClientIp, 10000), dcount(ClientIp), min(TimeGenerated), max(TimeGenerated), make_list(Statement, 10000) by tokens, PrincipalName, ApplicationName\n| extend key = strcat(PrincipalName, ApplicationName)\n| join kind=leftouter (total) on key\n| extend prevalence = toreal(count_) / toreal(count_1) * 100\n| where prevalence <= prevalenceThreshold\n//Optional; Filter to instances where multiple parameters were seen\n//| where array_length(set_parameters) >= parameterJitter\n| extend dayKey = hash_md5(strcat(tokens, set_parameters));\n//Calculate the period anomalous queries were active\nanomalyData\n| join kind=leftouter  (\n    anomalyData\n    | mv-expand list_TimeGenerated\n    | summarize by bin(todatetime(list_TimeGenerated), 1d), dayKey\n    | summarize Days=count() by dayKey\n) on dayKey\n//Optional; The maximum number of days the anomaly activity spanned\n//| where Days <= dayThreshold\n| project min_TimeGenerated, max_TimeGenerated, Days, prevalence, count_, set_parameters, tokens, dcount_ClientIp, ApplicationName, PrincipalName, list_Statement\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend CloudApplication_0_Name = ApplicationName\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Applications using SQL will generally make repeated similar requests for data as users interact with the application, this hunting query will find instances where an unusual number of tokens have been seen grouped on the client application and username. The query will calculate the prevalence for the token sizes based on historical activity from grouped application and user and show instances where an unusual number of tokens were observed. This query is designed to be run against application and username combinations that are used by SQL applications, such as content management systems (Wordpress, Joomla, TYPO3, etc.)."
                  },
                  {
                    "name": "tactics",
                    "value": "InitialAccess"
                  },
                  {
                    "name": "techniques",
                    "value": "T1190"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject4')._huntingQuerycontentId4),'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Hunting Query 4",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject4')._huntingQuerycontentId4)]",
                "contentId": "[variables('huntingQueryObject4')._huntingQuerycontentId4]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject4').huntingQueryVersion4]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject4')._huntingQuerycontentId4]",
        "contentKind": "HuntingQuery",
        "displayName": "Prevalence Based SQL Query Size Anomaly",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject4')._huntingQuerycontentId4,'-', '1.0.1')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject4')._huntingQuerycontentId4,'-', '1.0.1')))]",
        "version": "1.0.1"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject5').huntingQueryTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "HuntingQuery-SuspiciousStoredProcedures_HuntingQueries Hunting Query with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject5').huntingQueryVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Azure_SQL_Database_solution_for_sentinel_Hunting_Query_5",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Suspicious SQL Stored Procedures",
                "category": "Hunting Queries",
                "query": "let abusedProcedures = dynamic([\"xp_cmdshell\", \"xp_regwrite\", \"xp_regdeletekey\", \"xp_regdeletevalue\", \"xp_dirtree\", \"xp_fileexist\", \"xp_msver\", \"xp_makecab\", \"xp_sqlshell\", \"xp_fixeddrivesd\", \"xp_regread\", \"sp_configure\", \"sp_oacreate\", \"sp_password\", \"sp_OACreate\", \"sp_addextendedproc\", \"sp_dropextendedproc\", \"sp_makewebtask\", \"sp_delete\", \"SP_OAcreate\", \"sp_OADestroy\"]);\nAzureDiagnostics\n| where Category =~ \"SQLSecurityAuditEvents\"\n| where statement_s has_any (abusedProcedures)\n| project TimeGenerated, SubscriptionId, ResourceId, ClientIp=client_ip_s, PrincipalName=session_server_principal_name_s, statement_s, action_id_s, HostName=host_name_s, ApplicationName=application_name_s\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n| extend AzureResource_0_ResourceId = ResourceId\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This hunting query will detect SQL queries where suspicious stored procedures are called. Suspicious procedures included in the query are based on data seen by the MSTIC Deception honeypot."
                  },
                  {
                    "name": "tactics",
                    "value": "InitialAccess"
                  },
                  {
                    "name": "techniques",
                    "value": "T1190"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject5')._huntingQuerycontentId5),'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Hunting Query 5",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject5')._huntingQuerycontentId5)]",
                "contentId": "[variables('huntingQueryObject5')._huntingQuerycontentId5]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject5').huntingQueryVersion5]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject5')._huntingQuerycontentId5]",
        "contentKind": "HuntingQuery",
        "displayName": "Suspicious SQL Stored Procedures",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject5')._huntingQuerycontentId5,'-', '1.0.1')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject5')._huntingQuerycontentId5,'-', '1.0.1')))]",
        "version": "1.0.1"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject6').huntingQueryTemplateSpecName6]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "HuntingQuery-TimeBasedQuerySizeAnomaly_HuntingQueries Hunting Query with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject6').huntingQueryVersion6]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Azure_SQL_Database_solution_for_sentinel_Hunting_Query_6",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Time Based SQL Query Size Anomaly",
                "category": "Hunting Queries",
                "query": "let timeRange = 30d;\n//How frequently the query averages data for an average execution time\nlet timeSliceSize = 1h;\n//Anomaly decompose threshold, 10 by default\nlet scoreThreshold = 10;\n//Time range to use for grouping events to detect anomalies\nlet resolution = 1d;\nlet processedData = materialize (\n    AzureDiagnostics\n    | where TimeGenerated > ago(timeRange)\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n    ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n    IsSuccess = succeeded_s, DurationMs = duration_milliseconds_d, AffectedRows = affected_rows_d,\n    ResponseRows = response_rows_d, Statement = statement_s,\n    Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                      , 0),\n    State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                      , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                      , 0),\n    AdditionalInfo = additional_information_s, timeSlice = floor(TimeGenerated, timeSliceSize));\nprocessedData\n//Splitting on \"=\" provides a good estimate to the number of parameters in the query\n| extend parameters = countof(Statement, \"=\")\n//Splitting on space provides a good estimate to the tokens in the query\n| extend tokens = array_length(split(Statement, \" \"))\n//Bin the data into 1 day windows, taking the average of tokens and parameters for that user and application during the period\n| summarize round(avg(tokens), 2), round(avg(parameters),2), min(TimeGenerated), max(TimeGenerated) by PrincipalName, ApplicationName, bin(TimeGenerated, resolution)\n//Summarise by user and application and create lists ready for anomaly detection\n| summarize make_list(avg_tokens, 10000), make_list(avg_parameters, 10000), make_list(min_TimeGenerated, 10000), make_list(max_TimeGenerated, 10000) by PrincipalName, ApplicationName\n| extend series_decompose_anomalies(list_avg_tokens, scoreThreshold, -1, 'linefit'), series_decompose_anomalies(list_avg_parameters, scoreThreshold, -1, 'linefit')\n| mv-expand TokenAnomaly=series_decompose_anomalies_list_avg_tokens_ad_flag, ParameterAnomaly=series_decompose_anomalies_list_avg_parameters_ad_flag, WindowStart=list_min_TimeGenerated, WindowEnd=list_max_TimeGenerated\n| project WindowStart, WindowEnd, PrincipalName, ApplicationName, TokenAnomaly, ParameterAnomaly\n//Enable to detect SQL statement token anomalies\n| where TokenAnomaly == 1 or TokenAnomaly == -1\n//Enable to detect SQL statement parameter anomalies\n//| where ParameterAnomaly == 1 or ParameterAnomaly == -1\n//Split the query here to see raw anomaly results\n//The next section will re-join back to the SQL diagnostics data to\n//display the queries executed within the anomalous windows identified\n| extend joinKey = strcat(PrincipalName, ApplicationName)\n| join kind=leftouter (\n    processedData\n    | project ApplicationName, PrincipalName, Statement, TimeGenerated\n    | extend joinKey = strcat(PrincipalName, ApplicationName)\n) on joinKey\n| where TimeGenerated between (todatetime(WindowStart) .. todatetime(WindowEnd))\n| extend Parameters = countof(Statement, \"=\")\n| extend Tokens = array_length(split(Statement, \" \"))\n| project TimeGenerated, ParameterAnomaly, Parameters, TokenAnomaly, Tokens, WindowStart, WindowEnd, PrincipalName, ApplicationName, Statement\n| order by Tokens desc, Parameters desc\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend CloudApplication_0_Name = ApplicationName\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This hunting query uses series decompose anomaly to identify periods of time where a given user account and application combination is used to send an anomalous number of parameters or SQL query tokens to the server. This query is designed to be run against application and username combinations that are used by SQL applications, such as content management systems (Wordpress, Joomla, TYPO3, etc.)."
                  },
                  {
                    "name": "tactics",
                    "value": "InitialAccess"
                  },
                  {
                    "name": "techniques",
                    "value": "T1190"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject6')._huntingQuerycontentId6),'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Hunting Query 6",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject6')._huntingQuerycontentId6)]",
                "contentId": "[variables('huntingQueryObject6')._huntingQuerycontentId6]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject6').huntingQueryVersion6]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject6')._huntingQuerycontentId6]",
        "contentKind": "HuntingQuery",
        "displayName": "Time Based SQL Query Size Anomaly",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject6')._huntingQuerycontentId6,'-', '1.0.1')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject6')._huntingQuerycontentId6,'-', '1.0.1')))]",
        "version": "1.0.1"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject7').huntingQueryTemplateSpecName7]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "HuntingQuery-VolumeAffectedRowsStatefulAnomalyOnDatabase_HuntingQueries Hunting Query with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject7').huntingQueryVersion7]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Azure_SQL_Database_solution_for_sentinel_Hunting_Query_7",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Affected rows stateful anomaly on database - hunting query",
                "category": "Hunting Queries",
                "query": "let detectionWindow = 15d;\nlet trainingWindow = 15d;\nlet volumeThresholdZ = 3.0;                     // Minimal threshold for the Zscore to trigger anomaly (number of standard deviations above mean). If set higher, only very significant alerts will fire.\nlet volumeThresholdQ = volumeThresholdZ;        // Minimal threshold for the Qscore to trigger anomaly (number of Inter-Percentile Ranges above high percentile). If set higher, only very significant alerts will fire.\nlet volumeThresholdHardcoded = 500;             // Minimal value for the volume metric to trigger anomaly.\nlet monitoredColumn = 'AffectedRows';           // The name of the column for volumetric anomalies.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s, \n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0)\n    | extend QuantityColumn = column_ifexists(monitoredColumn, 0)\n    | sort by TimeGenerated desc\n    | extend RowNumber = row_number(),\n                         WindowType = case( TimeGenerated >= ago(detectionWindow), 'detection',\n                                           (ago(trainingWindow) <= TimeGenerated and TimeGenerated < ago(detectionWindow)), 'training', 'other')\n    | where WindowType in ('detection', 'training'));\nlet trainingSet =\n    processedData\n    | where WindowType == 'training'\n    | summarize AvgVal = round(avg(QuantityColumn), 2), StdVal = round(stdev(QuantityColumn), 2), N = max(RowNumber),\n                P99Val = round(percentile(QuantityColumn, 99), 2), P50Val = round(percentile(QuantityColumn, 50), 2)\n      by Database;\nprocessedData\n| where WindowType == 'detection'\n| join kind = inner (trainingSet) on Database\n| extend ZScoreVal = iff(N >= 20, round(todouble(QuantityColumn - AvgVal) / todouble(StdVal + 1), 2), 0.00),\n         QScoreVal = iff(N >= 20, round(todouble(QuantityColumn - P99Val) / todouble(P99Val - P50Val + 1), 2), 0.00)\n| extend IsVolumeAnomalyOnVal = iff((ZScoreVal > volumeThresholdZ and QScoreVal > volumeThresholdQ and QuantityColumn > volumeThresholdHardcoded), true, false), AnomalyScore = round((ZScoreVal + QScoreVal)/2, 0)\n| project TimeGenerated, Database, PrincipalName, ClientIp, HostName, ApplicationName, ActionName, Statement,\n          IsSuccess, ResponseRows, AffectedRows, IsVolumeAnomalyOnVal, AnomalyScore\n| where IsVolumeAnomalyOnVal == 'true'\n| sort by AnomalyScore desc, TimeGenerated desc\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Goal: To detect anomalous data change/deletion. This query detects SQL queries that changed/deleted a large number of rows, which is significantly higher than normal for this database. This is a hunting query, so the training and the detection occur on the whole time window (controlled by 'queryPeriod' parameter). The user can set the minimal threshold for anomaly by changing the threshold parameters volThresholdZ and volThresholdQ (higher threshold will detect only more severe anomalies)."
                  },
                  {
                    "name": "tactics",
                    "value": "Impact"
                  },
                  {
                    "name": "techniques",
                    "value": "T1485,T1565,T1491"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject7')._huntingQuerycontentId7),'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Hunting Query 7",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject7')._huntingQuerycontentId7)]",
                "contentId": "[variables('huntingQueryObject7')._huntingQuerycontentId7]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject7').huntingQueryVersion7]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject7')._huntingQuerycontentId7]",
        "contentKind": "HuntingQuery",
        "displayName": "Affected rows stateful anomaly on database - hunting query",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject7')._huntingQuerycontentId7,'-', '1.0.1')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject7')._huntingQuerycontentId7,'-', '1.0.1')))]",
        "version": "1.0.1"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject8').huntingQueryTemplateSpecName8]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "HuntingQuery-VolumeResponseRowsStatefulAnomalyOnDatabase_HuntingQueries Hunting Query with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject8').huntingQueryVersion8]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Azure_SQL_Database_solution_for_sentinel_Hunting_Query_8",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Response rows stateful anomaly on database - hunting query",
                "category": "Hunting Queries",
                "query": "let volumeThresholdZ = 3.0;                     // Minimal threshold for the Zscore to trigger anomaly (number of standard deviations above mean). If set higher, only very significant alerts will fire.\nlet volumeThresholdQ = volumeThresholdZ;        // Minimal threshold for the Qscore to trigger anomaly (number of Inter-Percentile Ranges above high percentile). If set higher, only very significant alerts will fire.\nlet volumeThresholdHardcoded = 500;             // Minimal value for the volume metric to trigger anomaly.\nlet monitoredColumn = 'ResponseRows';           // The name of the column for volumetric anomalies.\nlet processedData = materialize (\n    AzureDiagnostics\n    | where Category == 'SQLSecurityAuditEvents' and action_id_s has_any (\"RCM\", \"BCM\") // Keep only SQL affected rows\n    | project TimeGenerated, PrincipalName = server_principal_name_s, ClientIp = client_ip_s, HostName = host_name_s, ResourceId,\n              ApplicationName = application_name_s, ActionName = action_name_s, Database = strcat(LogicalServerName_s, '/', database_name_s),\n              IsSuccess = succeeded_s, AffectedRows = affected_rows_d,\n              ResponseRows = response_rows_d, Statement = statement_s, \n              Error = case( additional_information_s has 'error_code', toint(extract(\"<error_code>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+)\", 1, additional_information_s))\n                    , 0),\n              State = case( additional_information_s has 'error_state', toint(extract(\"<error_state>([0-9.]+)\", 1, additional_information_s))\n                    , additional_information_s has 'failure_reason', toint(extract(\"<failure_reason>Err ([0-9.]+), Level ([0-9.]+)\", 2, additional_information_s))\n                    , 0)\n    | extend QuantityColumn = column_ifexists(monitoredColumn, 0)\n    | sort by TimeGenerated desc\n    | extend RowNumber = row_number()\n    );\nlet trainingSet =\n    processedData\n    | summarize AvgVal = round(avg(QuantityColumn), 2), StdVal = round(stdev(QuantityColumn), 2), N = max(RowNumber),\n                P99Val = round(percentile(QuantityColumn, 99), 2), P50Val = round(percentile(QuantityColumn, 50), 2)\n      by Database;\nprocessedData\n| join kind = inner (trainingSet) on Database\n| extend ZScoreVal = iff(N >= 20, round(todouble(QuantityColumn - AvgVal) / todouble(StdVal + 1), 2), 0.00),\n         QScoreVal = iff(N >= 20, round(todouble(QuantityColumn - P99Val) / todouble(P99Val - P50Val + 1), 2), 0.00)\n| extend IsVolumeAnomalyOnVal = iff((ZScoreVal > volumeThresholdZ and QScoreVal > volumeThresholdQ and QuantityColumn > volumeThresholdHardcoded), true, false), AnomalyScore = round((ZScoreVal + QScoreVal)/2, 0)\n| project TimeGenerated, Database, PrincipalName, ClientIp, HostName, ApplicationName, ActionName, Statement,\n          IsSuccess, ResponseRows, AffectedRows, IsVolumeAnomalyOnVal, AnomalyScore\n| where IsVolumeAnomalyOnVal == 'true'\n| sort by AnomalyScore desc, TimeGenerated desc\n| extend Name = tostring(split(PrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(PrincipalName, '@', 1)[0])\n| extend Account_0_Name = Name\n| extend Account_0_UPNSuffix = UPNSuffix\n| extend IP_0_Address = ClientIp\n| extend Host_0_Hostname = HostName\n| extend CloudApplication_0_Name = ApplicationName\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Goal: To detect anomalous data exfiltration. This query detects SQL queries that accessed a large number of rows, which is significantly higher than normal for this database. This is a hunting query, so the training and the detection occur on the whole time window (controlled by 'queryPeriod' parameter). The user can set the minimal threshold for anomaly by changing the threshold parameters volThresholdZ and volThresholdQ (higher thresholds will detect only more severe anomalies)."
                  },
                  {
                    "name": "tactics",
                    "value": "Exfiltration"
                  },
                  {
                    "name": "techniques",
                    "value": "T1537,T1567"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject8')._huntingQuerycontentId8),'/'))))]",
              "properties": {
                "description": "Azure SQL Database solution for sentinel Hunting Query 8",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject8')._huntingQuerycontentId8)]",
                "contentId": "[variables('huntingQueryObject8')._huntingQuerycontentId8]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject8').huntingQueryVersion8]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject8')._huntingQuerycontentId8]",
        "contentKind": "HuntingQuery",
        "displayName": "Response rows stateful anomaly on database - hunting query",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject8')._huntingQuerycontentId8,'-', '1.0.1')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject8')._huntingQuerycontentId8,'-', '1.0.1')))]",
        "version": "1.0.1"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Azure SQL Database solution for sentinel data connector with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "StaticUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "Azure SQL Databases",
                  "publisher": "Microsoft",
                  "descriptionMarkdown": "Azure SQL is a fully managed, Platform-as-a-Service (PaaS) database engine that handles most database management functions, such as upgrading, patching, backups, and monitoring, without necessitating user involvement. This connector lets you stream your Azure SQL databases audit and diagnostic logs into Microsoft Sentinel, allowing you to continuously monitor activity in all your instances.",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "SQLSecurityAuditEvents",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLSecurityAuditEvents\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "SQLInsights",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLInsights\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "AutomaticTuning",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"AutomaticTuning\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "QueryStoreWaitStatistics",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"QueryStoreWaitStatistics\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "Errors",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Errors\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "DatabaseWaitStatistics",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DatabaseWaitStatistics\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "Timeouts",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Timeouts\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "Blocks",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Blocks\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "Deadlocks",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Deadlocks\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "Basic",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Basic\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "InstanceAndAppAdvanced",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"InstanceAndAppAdvanced\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "WorkloadManagement",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"WorkloadManagement\""
                    },
                    {
                      "metricName": "Total data received",
                      "legend": "DevOpsOperationsAudit",
                      "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DevOpsOperationsAudit\""
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLSecurityAuditEvents\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLInsights\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"AutomaticTuning\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"QueryStoreWaitStatistics\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Errors\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DatabaseWaitStatistics\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Timeouts\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Blocks\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Deadlocks\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Basic\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"InstanceAndAppAdvanced\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"WorkloadManagement\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                        "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DevOpsOperationsAudit\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)"
                      ]
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "SQLSecurityAuditEvents",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLSecurityAuditEvents\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "SQLInsights",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLInsights\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "AutomaticTuning",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"AutomaticTuning\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "QueryStoreWaitStatistics",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"QueryStoreWaitStatistics\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Errors",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Errors\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "DatabaseWaitStatistics",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DatabaseWaitStatistics\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Timeouts",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Timeouts\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Blocks",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Blocks\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Deadlocks",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Deadlocks\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Basic",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Basic\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "InstanceAndAppAdvanced",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"InstanceAndAppAdvanced\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "WorkloadManagement",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"WorkloadManagement\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "DevOpsOperationsAudit",
                      "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DevOpsOperationsAudit\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Azure SQL Database solution for sentinel",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "Azure SQL Databases",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "Azure SQL Database solution for sentinel",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "tier": "Microsoft",
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "link": "https://support.microsoft.com/"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "StaticUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Azure SQL Databases",
          "publisher": "Microsoft",
          "descriptionMarkdown": "Azure SQL is a fully managed, Platform-as-a-Service (PaaS) database engine that handles most database management functions, such as upgrading, patching, backups, and monitoring, without necessitating user involvement. This connector lets you stream your Azure SQL databases audit and diagnostic logs into Microsoft Sentinel, allowing you to continuously monitor activity in all your instances.",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "SQLSecurityAuditEvents",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLSecurityAuditEvents\""
            },
            {
              "metricName": "Total data received",
              "legend": "SQLInsights",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLInsights\""
            },
            {
              "metricName": "Total data received",
              "legend": "AutomaticTuning",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"AutomaticTuning\""
            },
            {
              "metricName": "Total data received",
              "legend": "QueryStoreWaitStatistics",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"QueryStoreWaitStatistics\""
            },
            {
              "metricName": "Total data received",
              "legend": "Errors",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Errors\""
            },
            {
              "metricName": "Total data received",
              "legend": "DatabaseWaitStatistics",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DatabaseWaitStatistics\""
            },
            {
              "metricName": "Total data received",
              "legend": "Timeouts",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Timeouts\""
            },
            {
              "metricName": "Total data received",
              "legend": "Blocks",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Blocks\""
            },
            {
              "metricName": "Total data received",
              "legend": "Deadlocks",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Deadlocks\""
            },
            {
              "metricName": "Total data received",
              "legend": "Basic",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Basic\""
            },
            {
              "metricName": "Total data received",
              "legend": "InstanceAndAppAdvanced",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"InstanceAndAppAdvanced\""
            },
            {
              "metricName": "Total data received",
              "legend": "WorkloadManagement",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"WorkloadManagement\""
            },
            {
              "metricName": "Total data received",
              "legend": "DevOpsOperationsAudit",
              "baseQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DevOpsOperationsAudit\""
            }
          ],
          "dataTypes": [
            {
              "name": "SQLSecurityAuditEvents",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLSecurityAuditEvents\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "SQLInsights",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLInsights\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "AutomaticTuning",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"AutomaticTuning\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "QueryStoreWaitStatistics",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"QueryStoreWaitStatistics\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Errors",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Errors\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "DatabaseWaitStatistics",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DatabaseWaitStatistics\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Timeouts",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Timeouts\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Blocks",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Blocks\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Deadlocks",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Deadlocks\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Basic",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Basic\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "InstanceAndAppAdvanced",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"InstanceAndAppAdvanced\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "WorkloadManagement",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"WorkloadManagement\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "DevOpsOperationsAudit",
              "lastDataReceivedQuery": "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DevOpsOperationsAudit\"\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLSecurityAuditEvents\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"SQLInsights\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"AutomaticTuning\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"QueryStoreWaitStatistics\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Errors\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DatabaseWaitStatistics\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Timeouts\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Blocks\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Deadlocks\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"Basic\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"InstanceAndAppAdvanced\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"WorkloadManagement\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)",
                "AzureDiagnostics | where ResourceType == \"SERVERS/DATABASES\" | where ResourceProvider == \"MICROSOFT.SQL\" | where Category == \"DevOpsOperationsAudit\"\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)"
              ]
            }
          ],
          "id": "[variables('_uiConfigId1')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Azure SQL Database solution for sentinel",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Azure%20SQL%20Database%20solution%20for%20sentinel/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://azure.microsoft.com/products/azure-sql/\">Azure SQL Database</a> solution for Microsoft Sentinel enables you to stream Azure SQL database audit and diagnostic logs into Microsoft Sentinel, allowing you to continuously monitor activity in all your instances.</p>\n<p><strong>Underlying Microsoft Technologies used:</strong></p>\n<p>This solution takes a dependency on the following technologies, and some of these dependencies either may be in <a href=\"https://azure.microsoft.com/support/legal/preview-supplemental-terms/\">Preview</a> state or might result in additional ingestion or operational costs:</p>\n<ol type=\"a\">\n<li><a href=\"https://docs.microsoft.com/azure/azure-monitor/essentials/diagnostic-settings?tabs=portal\">Azure Monitor Resource Diagnostics </a></li>\n</ol>\n<p><strong>Data Connectors:</strong> 1, <strong>Workbooks:</strong> 1, <strong>Analytic Rules:</strong> 10, <strong>Hunting Queries:</strong> 8</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/AzureSQL.svg\"width=\"75px\"height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Azure SQL Database solution for sentinel",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com/"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId1')]",
              "version": "[variables('workbookVersion1')]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
              "version": "[variables('analyticRuleObject3').analyticRuleVersion3]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
              "version": "[variables('analyticRuleObject4').analyticRuleVersion4]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
              "version": "[variables('analyticRuleObject5').analyticRuleVersion5]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
              "version": "[variables('analyticRuleObject6').analyticRuleVersion6]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
              "version": "[variables('analyticRuleObject7').analyticRuleVersion7]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
              "version": "[variables('analyticRuleObject8').analyticRuleVersion8]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
              "version": "[variables('analyticRuleObject9').analyticRuleVersion9]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject10')._analyticRulecontentId10]",
              "version": "[variables('analyticRuleObject10').analyticRuleVersion10]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject1')._huntingQuerycontentId1]",
              "version": "[variables('huntingQueryObject1').huntingQueryVersion1]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject2')._huntingQuerycontentId2]",
              "version": "[variables('huntingQueryObject2').huntingQueryVersion2]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject3')._huntingQuerycontentId3]",
              "version": "[variables('huntingQueryObject3').huntingQueryVersion3]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject4')._huntingQuerycontentId4]",
              "version": "[variables('huntingQueryObject4').huntingQueryVersion4]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject5')._huntingQuerycontentId5]",
              "version": "[variables('huntingQueryObject5').huntingQueryVersion5]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject6')._huntingQuerycontentId6]",
              "version": "[variables('huntingQueryObject6').huntingQueryVersion6]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject7')._huntingQuerycontentId7]",
              "version": "[variables('huntingQueryObject7').huntingQueryVersion7]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject8')._huntingQuerycontentId8]",
              "version": "[variables('huntingQueryObject8').huntingQueryVersion8]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            }
          ]
        },
        "firstPublishDate": "2022-08-19",
        "providers": [
          "Microsoft"
        ],
        "categories": {
          "domains": [
            "Cloud Provider",
            "IT Operations"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
