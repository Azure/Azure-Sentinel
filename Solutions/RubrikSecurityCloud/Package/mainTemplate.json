{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Ben Meadowcroft - ben.meadowcroft@rubrik.com",
    "comments": "Solution template for RubrikSecurityCloud"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "ben.meadowcroft@rubrik.com",
    "_email": "[variables('email')]",
    "_solutionName": "RubrikSecurityCloud",
    "_solutionVersion": "3.2.1",
    "solutionId": "rubrik_inc.rubrik_sentinel",
    "_solutionId": "[variables('solutionId')]",
    "RubrikCustomConnector": "RubrikCustomConnector",
    "_RubrikCustomConnector": "[variables('RubrikCustomConnector')]",
    "TemplateEmptyArray": "[json('[]')]",
    "blanks": "[replace('b', 'b', '')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "RubrikCustomConnector",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-lc-',uniquestring(variables('_playbookContentId1'))))]",
    "playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','lc','-', uniqueString(concat(variables('_solutionId'),'-','LogicAppsCustomConnector','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "_playbookcontentProductId1": "[variables('playbookcontentProductId1')]",
    "RubrikAnomalyAnalysis": "RubrikAnomalyAnalysis",
    "_RubrikAnomalyAnalysis": "[variables('RubrikAnomalyAnalysis')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "RubrikAnomalyAnalysis",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "_playbookId2": "[variables('playbookId2')]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "_playbookcontentProductId2": "[variables('playbookcontentProductId2')]",
    "RubrikAnomalyIncidentResponse": "RubrikAnomalyIncidentResponse",
    "_RubrikAnomalyIncidentResponse": "[variables('RubrikAnomalyIncidentResponse')]",
    "playbookVersion3": "1.0",
    "playbookContentId3": "RubrikAnomalyIncidentResponse",
    "_playbookContentId3": "[variables('playbookContentId3')]",
    "playbookId3": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId3'))]",
    "_playbookId3": "[variables('playbookId3')]",
    "playbookTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId3'))))]",
    "playbookcontentProductId3": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId3'),'-', variables('playbookVersion3'))))]",
    "_playbookcontentProductId3": "[variables('playbookcontentProductId3')]",
    "RubrikDataObjectDiscovery": "RubrikDataObjectDiscovery",
    "_RubrikDataObjectDiscovery": "[variables('RubrikDataObjectDiscovery')]",
    "playbookVersion4": "1.0",
    "playbookContentId4": "RubrikDataObjectDiscovery",
    "_playbookContentId4": "[variables('playbookContentId4')]",
    "playbookId4": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId4'))]",
    "_playbookId4": "[variables('playbookId4')]",
    "playbookTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId4'))))]",
    "playbookcontentProductId4": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId4'),'-', variables('playbookVersion4'))))]",
    "_playbookcontentProductId4": "[variables('playbookcontentProductId4')]",
    "RubrikFilesetRansomwareDiscovery": "RubrikFilesetRansomwareDiscovery",
    "_RubrikFilesetRansomwareDiscovery": "[variables('RubrikFilesetRansomwareDiscovery')]",
    "playbookVersion5": "1.0",
    "playbookContentId5": "RubrikFilesetRansomwareDiscovery",
    "_playbookContentId5": "[variables('playbookContentId5')]",
    "playbookId5": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId5'))]",
    "_playbookId5": "[variables('playbookId5')]",
    "playbookTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId5'))))]",
    "playbookcontentProductId5": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId5'),'-', variables('playbookVersion5'))))]",
    "_playbookcontentProductId5": "[variables('playbookcontentProductId5')]",
    "RubrikIOCScan": "RubrikIOCScan",
    "_RubrikIOCScan": "[variables('RubrikIOCScan')]",
    "TemplateEmptyObject": "[json('{}')]",
    "playbookVersion6": "1.0",
    "playbookContentId6": "RubrikIOCScan",
    "_playbookContentId6": "[variables('playbookContentId6')]",
    "playbookId6": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId6'))]",
    "_playbookId6": "[variables('playbookId6')]",
    "playbookTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId6'))))]",
    "playbookcontentProductId6": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId6'),'-', variables('playbookVersion6'))))]",
    "_playbookcontentProductId6": "[variables('playbookcontentProductId6')]",
    "RubrikPollAsyncResult": "RubrikPollAsyncResult",
    "_RubrikPollAsyncResult": "[variables('RubrikPollAsyncResult')]",
    "playbookVersion7": "1.0",
    "playbookContentId7": "RubrikPollAsyncResult",
    "_playbookContentId7": "[variables('playbookContentId7')]",
    "playbookId7": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId7'))]",
    "_playbookId7": "[variables('playbookId7')]",
    "playbookTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId7'))))]",
    "playbookcontentProductId7": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId7'),'-', variables('playbookVersion7'))))]",
    "_playbookcontentProductId7": "[variables('playbookcontentProductId7')]",
    "RubrikRansomwareDiscoveryAndFileRecovery": "RubrikRansomwareDiscoveryAndFileRecovery",
    "_RubrikRansomwareDiscoveryAndFileRecovery": "[variables('RubrikRansomwareDiscoveryAndFileRecovery')]",
    "playbookVersion8": "1.0",
    "playbookContentId8": "RubrikRansomwareDiscoveryAndFileRecovery",
    "_playbookContentId8": "[variables('playbookContentId8')]",
    "playbookId8": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId8'))]",
    "_playbookId8": "[variables('playbookId8')]",
    "playbookTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId8'))))]",
    "playbookcontentProductId8": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId8'),'-', variables('playbookVersion8'))))]",
    "_playbookcontentProductId8": "[variables('playbookcontentProductId8')]",
    "RubrikRansomwareDiscoveryAndVMRecovery": "RubrikRansomwareDiscoveryAndVMRecovery",
    "_RubrikRansomwareDiscoveryAndVMRecovery": "[variables('RubrikRansomwareDiscoveryAndVMRecovery')]",
    "playbookVersion9": "1.0",
    "playbookContentId9": "RubrikRansomwareDiscoveryAndVMRecovery",
    "_playbookContentId9": "[variables('playbookContentId9')]",
    "playbookId9": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId9'))]",
    "_playbookId9": "[variables('playbookId9')]",
    "playbookTemplateSpecName9": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId9'))))]",
    "playbookcontentProductId9": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId9'),'-', variables('playbookVersion9'))))]",
    "_playbookcontentProductId9": "[variables('playbookcontentProductId9')]",
    "RubrikFileObjectContextAnalysis": "RubrikFileObjectContextAnalysis",
    "_RubrikFileObjectContextAnalysis": "[variables('RubrikFileObjectContextAnalysis')]",
    "playbookVersion10": "1.0",
    "playbookContentId10": "RubrikFileObjectContextAnalysis",
    "_playbookContentId10": "[variables('playbookContentId10')]",
    "playbookId10": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId10'))]",
    "_playbookId10": "[variables('playbookId10')]",
    "playbookTemplateSpecName10": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId10'))))]",
    "playbookcontentProductId10": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId10'),'-', variables('playbookVersion10'))))]",
    "_playbookcontentProductId10": "[variables('playbookcontentProductId10')]",
    "RubrikUserIntelligenceAnalysis": "RubrikUserIntelligenceAnalysis",
    "_RubrikUserIntelligenceAnalysis": "[variables('RubrikUserIntelligenceAnalysis')]",
    "playbookVersion11": "1.0",
    "playbookContentId11": "RubrikUserIntelligenceAnalysis",
    "_playbookContentId11": "[variables('playbookContentId11')]",
    "playbookId11": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId11'))]",
    "_playbookId11": "[variables('playbookId11')]",
    "playbookTemplateSpecName11": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId11'))))]",
    "playbookcontentProductId11": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId11'),'-', variables('playbookVersion11'))))]",
    "_playbookcontentProductId11": "[variables('playbookcontentProductId11')]",
    "RubrikRetrieveUserIntelligenceInformation": "RubrikRetrieveUserIntelligenceInformation",
    "_RubrikRetrieveUserIntelligenceInformation": "[variables('RubrikRetrieveUserIntelligenceInformation')]",
    "playbookVersion12": "1.0",
    "playbookContentId12": "RubrikRetrieveUserIntelligenceInformation",
    "_playbookContentId12": "[variables('playbookContentId12')]",
    "playbookId12": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId12'))]",
    "_playbookId12": "[variables('playbookId12')]",
    "playbookTemplateSpecName12": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId12'))))]",
    "playbookcontentProductId12": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId12'),'-', variables('playbookVersion12'))))]",
    "_playbookcontentProductId12": "[variables('playbookcontentProductId12')]",
    "RubrikAnomalyGenerateDownloadableLink": "RubrikAnomalyGenerateDownloadableLink",
    "_RubrikAnomalyGenerateDownloadableLink": "[variables('RubrikAnomalyGenerateDownloadableLink')]",
    "playbookVersion13": "1.0",
    "playbookContentId13": "RubrikAnomalyGenerateDownloadableLink",
    "_playbookContentId13": "[variables('playbookContentId13')]",
    "playbookId13": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId13'))]",
    "_playbookId13": "[variables('playbookId13')]",
    "playbookTemplateSpecName13": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId13'))))]",
    "playbookcontentProductId13": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId13'),'-', variables('playbookVersion13'))))]",
    "_playbookcontentProductId13": "[variables('playbookcontentProductId13')]",
    "uiConfigId1": "RubrikSecurityCloudAzureFunctions",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "RubrikSecurityCloudAzureFunctions",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "_dataConnectorcontentProductId1": "[variables('dataConnectorcontentProductId1')]",
    "solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]",
    "_solutioncontentProductId": "[variables('solutioncontentProductId')]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikCustomConnector Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "API Hostname": {
              "type": "String",
              "defaultValue": "rubrik-rcf-2512.my.rubrik.com",
              "metadata": {
                "description": "Hostname of the RubrikApi instance."
              }
            },
            "Rubrik Connector name": {
              "defaultValue": "RubrikCustomConnector",
              "type": "String"
            }
          },
          "variables": {
            "Endpoint": "[[concat('https://', parameters('API Hostname'))]",
            "operationId-Authentication": "Authentication",
            "_operationId-Authentication": "[[variables('operationId-Authentication')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "playbookContentId1": "RubrikCustomConnector",
            "playbookId1": "[[resourceId('Microsoft.Web/customApis', parameters('Rubrik Connector name'))]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/customApis",
              "apiVersion": "2018-07-01-preview",
              "name": "[[parameters('Rubrik Connector name')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "runtimeUrls": [
                  "https://logic-apis-eastus.azure-apim.net/apim/d91aaf06af23412da43cf0b057079b4c",
                  "http://logic-apis-eastus.azure-apim.net/apim/d91aaf06af23412da43cf0b057079b4c"
                ],
                "capabilities": "[variables('TemplateEmptyArray')]",
                "description": "RubrikApis",
                "displayName": "[[parameters('Rubrik Connector name')]",
                "iconUri": "/Content/retail/assets/default-connection-icon.e6bb72160664a5e37b9923c3d9f50ca5.2.svg",
                "swagger": {
                  "swagger": "2.0",
                  "info": {
                    "version": "1.0.0",
                    "title": "RubrikApis",
                    "description": "RubrikApis"
                  },
                  "host": "[[parameters('API Hostname')]",
                  "basePath": "/",
                  "schemes": [
                    "https"
                  ],
                  "consumes": "[variables('TemplateEmptyArray')]",
                  "produces": [
                    "application/json"
                  ],
                  "paths": {
                    "/api/client_token": {
                      "post": {
                        "responses": {
                          "default": {
                            "description": "default"
                          }
                        },
                        "summary": "Authentication",
                        "description": "Getting access token using service account",
                        "operationId": "[[variables('_operationId-Authentication')]",
                        "x-ms-visibility": "important",
                        "parameters": [
                          {
                            "name": "Content-Type",
                            "in": "header",
                            "required": true,
                            "type": "string",
                            "default": "application/json",
                            "x-ms-visibility": "important"
                          },
                          {
                            "name": "body",
                            "in": "body",
                            "required": true,
                            "schema": {
                              "type": "object",
                              "properties": {
                                "client_id": {
                                  "type": "string",
                                  "description": "client_id",
                                  "title": "[variables('blanks')]"
                                },
                                "client_secret": {
                                  "type": "string",
                                  "description": "client_secret",
                                  "title": "[variables('blanks')]"
                                }
                              },
                              "required": [
                                "client_id",
                                "client_secret"
                              ]
                            }
                          }
                        ]
                      }
                    }
                  },
                  "security": "[variables('TemplateEmptyArray')]",
                  "tags": "[variables('TemplateEmptyArray')]"
                },
                "apiType": "Rest",
                "backendService": {
                  "serviceUrl": "[[variables('Endpoint')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[[concat(variables('workspace-name'),'/Microsoft.SecurityInsights/',concat('LogicAppsCustomConnector-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "LogicAppsCustomConnector",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "LogicAppsCustomConnector",
        "displayName": "RubrikCustomConnector",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikAnomalyAnalysis Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikAnomalyAnalysis",
              "type": "string"
            },
            "Rubrik Connector name": {
              "defaultValue": "RubrikCustomConnector",
              "type": "String",
              "metadata": {
                "description": "Rubrik Custom Connector name"
              }
            },
            "keyvaultName": {
              "defaultValue": "RubrikSentinelKeyVault",
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            },
            "DownloadableLinkGeneratePlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook RubrikAnomalyGenerateDownloadableLink(e.g.RubrikAnomalyGenerateDownloadableLink)"
              }
            }
          },
          "variables": {
            "RubrikcustomconnectorConnectionName": "[[concat('Rubrikcustomconnector-', parameters('PlaybookName'))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "BaseUrl": {
                              "type": "string"
                            },
                            "ClusterId": {
                              "type": "string"
                            },
                            "IncidentARMId": {
                              "type": "string"
                            },
                            "IncidentStartTime": {
                              "type": "string"
                            },
                            "ObjectId": {
                              "type": "string"
                            },
                            "ObjectName": {
                              "type": "string"
                            },
                            "ObjectType": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Authentication": {
                      "runAfter": {
                        "Get_secret": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "client_id": "@body('Get_Client_Id_')?['value']",
                          "client_secret": "@body('Get_secret')?['value']"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/api/client_token"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Determine_the_status_of_the_Rubrik_Radar_analysis_process": {
                      "runAfter": {
                        "Initialize_access_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "query EventSeriesListQuery($after: String, $filters: ActivitySeriesFilter, $first: Int, $sortBy: ActivitySeriesSortField, $sortOrder: SortOrder) {\r\n  activitySeriesConnection(\r\n    after: $after\r\n    first: $first\r\n    filters: $filters\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n  ) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        ...EventSeriesFragment\r\n        cluster {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        activityConnection(first: 1) {\r\n          nodes {\r\n            id\r\n            message\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment EventSeriesFragment on ActivitySeries {\r\n  id\r\n  fid\r\n  activitySeriesId\r\n  lastUpdated\r\n  lastActivityType\r\n  lastActivityStatus\r\n  objectId\r\n  objectName\r\n  objectType\r\n  severity\r\n  progress\r\n  isCancelable\r\n  isPolarisEventSeries\r\n  location\r\n  __typename\r\n}\r\n",
                          "variables": {
                            "filters": {
                              "clusterId": "@variables('ClusterId')",
                              "lastActivityStatus": "[variables('TemplateEmptyArray')]",
                              "lastActivityType": [
                                "ANOMALY"
                              ],
                              "lastUpdatedTimeGt": "@{variables('StartDate')}",
                              "objectName": "@{variables('ObjectName')}",
                              "objectType": "[variables('TemplateEmptyArray')]",
                              "severity": "[variables('TemplateEmptyArray')]"
                            },
                            "first": 40,
                            "sortBy": "OBJECT_NAME",
                            "sortOrder": "ASC"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}",
                          "Content-Type": "application/json"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    },
                    "Does_Object_List_get_status_code_200": {
                      "actions": {
                        "Does_Object_List_API_response_contains_errors": {
                          "actions": {
                            "Set_API_response_error_as_status": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "Status",
                                "value": "Error:@{body('rubrik-sonar-sensitive-hits(Object_List)')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Does_Object_Id_found": {
                                "actions": {
                                  "Does_sonar_sensitive_hits(Object_Details)_get_status_code_200": {
                                    "actions": {
                                      "Does_Object_Details_API_response_contain_errors": {
                                        "actions": {
                                          "Set_API_error_response_as_status_": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "Status",
                                              "value": "Error:@{body('sonar_sensitive_hits(Object_Details)')?['errors'][0]?['message']}"
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "contains": [
                                                "@body('sonar_sensitive_hits(Object_Details)')",
                                                "errors"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "runAfter": {
                                      "sonar_sensitive_hits(Object_Details)": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Error_message_with_status_code_for_Object_Details": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "Status",
                                            "value": "StatusCode: @{outputs('sonar_sensitive_hits(Object_Details)')['statusCode']}Error:@{body('sonar_sensitive_hits(Object_Details)')?['message']}"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('sonar_sensitive_hits(Object_Details)')['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "sonar_sensitive_hits(Object_Details)": {
                                    "type": "Http",
                                    "inputs": {
                                      "body": {
                                        "query": "query ObjectDetailQuery($snappableFid: String!, $snapshotFid: String!) {\r\n                policyObj(snappableFid: $snappableFid, snapshotFid: $snapshotFid) {\r\n                    id\r\n                    rootFileResult {\r\n                        hits {\r\n                            totalHits\r\n                    }\r\n                    analyzerGroupResults {\r\n                        analyzerGroup {\r\n                            name\r\n                        }\r\n                        analyzerResults {\r\n                            hits {\r\n                                totalHits\r\n                            }\r\n                            analyzer {\r\n                                name\r\n                            }\r\n                        }\r\n                            hits {\r\n                            totalHits\r\n                        }\r\n                    }\r\n                    filesWithHits {\r\n                        totalHits\r\n                    }\r\n                    openAccessFiles {\r\n                        totalHits\r\n                    }\r\n                    openAccessFolders {\r\n                        totalHits\r\n                    }\r\n                    openAccessFilesWithHits {\r\n                        totalHits\r\n                    }\r\n                    staleFiles {\r\n                        totalHits\r\n                    }\r\n                    staleFilesWithHits {\r\n                        totalHits\r\n                    }\r\n                    openAccessStaleFiles {\r\n                        totalHits\r\n                    }\r\n                    }\r\n                }\r\n            }\r\n",
                                        "variables": {
                                          "snappableFid": "@{variables('ObjectId')}",
                                          "snapshotFid": "@{variables('SnapshotId')}"
                                        }
                                      },
                                      "headers": {
                                        "Authorization": "Bearer @{variables('access_token')}",
                                        "Content-Type": "application/json"
                                      },
                                      "method": "POST",
                                      "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "For_each": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "not": {
                                        "equals": [
                                          "@empty(variables('ObjectId'))",
                                          true
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "For_each": {
                                "foreach": "@body('Parse_JSON_of_Object_List')?['data']?['policyObjs']?['edges']",
                                "actions": {
                                  "Does_snappable_name_equals_to_Object_name_fetched_from_incidnet_": {
                                    "actions": {
                                      "Set_Object_Id": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "ObjectId",
                                          "value": "@items('For_each')?['node']?['snappable']?['id']"
                                        }
                                      },
                                      "Set_Snapshot_Id": {
                                        "runAfter": {
                                          "Set_Object_Id": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "SnapshotId",
                                          "value": "@items('For_each')?['node']?['snapshotFid']"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@items('For_each')?['node']?['snappable']?['name']",
                                            "@variables('ObjectName')"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Parse_JSON_of_Object_List": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Foreach",
                                "runtimeConfiguration": {
                                  "concurrency": {
                                    "repetitions": 1
                                  }
                                }
                              },
                              "Parse_JSON_of_Object_List": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('rubrik-sonar-sensitive-hits(Object_List)')",
                                  "schema": {
                                    "properties": {
                                      "data": {
                                        "properties": {
                                          "policyObjs": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "edges": {
                                                "items": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "cursor": {
                                                      "type": "string"
                                                    },
                                                    "node": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "objectStatus": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "latestSnapshotResult": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "snapshotFid": {
                                                                  "type": "string"
                                                                },
                                                                "snapshotTime": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "policyStatuses": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "status": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "__typename",
                                                                  "status"
                                                                ],
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        },
                                                        "osType": {
                                                          "type": "string"
                                                        },
                                                        "rootFileResult": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "analyzerGroupResults": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "analyzerGroup": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "groupType": {
                                                                        "type": "string"
                                                                      },
                                                                      "id": {
                                                                        "type": "string"
                                                                      },
                                                                      "name": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "analyzerResults": {
                                                                    "type": "array"
                                                                  },
                                                                  "hits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "permittedHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHitsDelta": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violations": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violationsDelta": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "required": [
                                                                  "__typename",
                                                                  "analyzerGroup",
                                                                  "analyzerResults",
                                                                  "hits"
                                                                ],
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "type": "array"
                                                            },
                                                            "filesWithHits": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "permittedHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHitsDelta": {
                                                                  "type": "integer"
                                                                },
                                                                "violations": {
                                                                  "type": "integer"
                                                                },
                                                                "violationsDelta": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "hits": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "permittedHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHitsDelta": {
                                                                  "type": "integer"
                                                                },
                                                                "violations": {
                                                                  "type": "integer"
                                                                },
                                                                "violationsDelta": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "numActivities": {
                                                              "type": "integer"
                                                            },
                                                            "numActivitiesDelta": {
                                                              "type": "integer"
                                                            },
                                                            "openAccessFiles": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "permittedHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHitsDelta": {
                                                                  "type": "integer"
                                                                },
                                                                "violations": {
                                                                  "type": "integer"
                                                                },
                                                                "violationsDelta": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "openAccessFilesWithHits": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "permittedHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHitsDelta": {
                                                                  "type": "integer"
                                                                },
                                                                "violations": {
                                                                  "type": "integer"
                                                                },
                                                                "violationsDelta": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "openAccessFolders": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "permittedHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHitsDelta": {
                                                                  "type": "integer"
                                                                },
                                                                "violations": {
                                                                  "type": "integer"
                                                                },
                                                                "violationsDelta": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "openAccessStaleFiles": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "permittedHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHitsDelta": {
                                                                  "type": "integer"
                                                                },
                                                                "violations": {
                                                                  "type": "integer"
                                                                },
                                                                "violationsDelta": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "staleFiles": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "permittedHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHitsDelta": {
                                                                  "type": "integer"
                                                                },
                                                                "violations": {
                                                                  "type": "integer"
                                                                },
                                                                "violationsDelta": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "staleFilesWithHits": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "permittedHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "totalHitsDelta": {
                                                                  "type": "integer"
                                                                },
                                                                "violations": {
                                                                  "type": "integer"
                                                                },
                                                                "violationsDelta": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        },
                                                        "shareType": {
                                                          "type": "string"
                                                        },
                                                        "snappable": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "cluster": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "id": {
                                                                  "type": "string"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "effectiveSlaDomain": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "id": {
                                                                  "type": "string"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "logicalPath": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "name": {
                                                                    "type": "string"
                                                                  },
                                                                  "objectType": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "__typename",
                                                                  "name",
                                                                  "objectType"
                                                                ],
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "type": "array"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "objectType": {
                                                              "type": "string"
                                                            },
                                                            "physicalPath": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "name": {
                                                                    "type": "string"
                                                                  },
                                                                  "objectType": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "__typename",
                                                                  "name",
                                                                  "objectType"
                                                                ],
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "type": "array"
                                                            },
                                                            "slaAssignment": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        },
                                                        "snapshotFid": {
                                                          "type": "string"
                                                        },
                                                        "snapshotTimestamp": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": [
                                                        "object",
                                                        "null"
                                                      ]
                                                    }
                                                  },
                                                  "required": [
                                                    "__typename",
                                                    "cursor",
                                                    "node"
                                                  ],
                                                  "type": [
                                                    "object",
                                                    "null"
                                                  ]
                                                },
                                                "type": "array"
                                              },
                                              "pageInfo": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "endCursor": {
                                                    "type": "string"
                                                  },
                                                  "hasNextPage": {
                                                    "type": "boolean"
                                                  },
                                                  "hasPreviousPage": {
                                                    "type": "boolean"
                                                  },
                                                  "startCursor": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": [
                                                  "object",
                                                  "null"
                                                ]
                                              }
                                            },
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          }
                                        },
                                        "type": [
                                          "object",
                                          "null"
                                        ]
                                      }
                                    },
                                    "type": [
                                      "object",
                                      "null"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('rubrik-sonar-sensitive-hits(Object_List)')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "rubrik-sonar-sensitive-hits(Object_List)": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_error_message_with_status_code_for_Object_List": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Status",
                              "value": "StatusCode:@{outputs('rubrik-sonar-sensitive-hits(Object_List)')['statusCode']} Error:@{body('rubrik-sonar-sensitive-hits(Object_List)')?['message']}"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('rubrik-sonar-sensitive-hits(Object_List)')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_cdm-cluster-connection_get_status_code_200": {
                      "actions": {
                        "Does_cdm-cluster-connection_API_response_contain_errors": {
                          "actions": {
                            "Set_error_response_as_cluster_connection_status": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ClusterConnectionStatus",
                                "value": "Error:@{body('rubrik-cdm-cluster-connection-state')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('rubrik-cdm-cluster-connection-state')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "rubrik-cdm-cluster-connection-state": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_error_message_with_status_code_for_cluster_connection": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ClusterConnectionStatus",
                              "value": "StatusCode:@{outputs('rubrik-cdm-cluster-connection-state')['statusCode']} Error:@{body('rubrik-cdm-cluster-connection-state')?['message']}"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('rubrik-cdm-cluster-connection-state')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_cdm-cluster-location_get_status_code_200": {
                      "actions": {
                        "Does_cdm-cluster-location_API_response_contains_error": {
                          "actions": {
                            "Set_error_response_as_cluster_location_status": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ClusterLocationStatus",
                                "value": "Error:@{body('rubrik-cdm-cluster-location')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('rubrik-cdm-cluster-location')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "rubrik-cdm-cluster-location": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_Error_message_with_status_code_for_Cluster_location": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ClusterLocationStatus",
                              "value": "StatusCode: @{outputs('rubrik-cdm-cluster-location')['statusCode']}Error:@{body('rubrik-cdm-cluster-location')?['message']}"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('rubrik-cdm-cluster-location')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_radar_analysis_get_status_code_200_": {
                      "actions": {
                        "Does_radar_analysis_response_contains_error": {
                          "actions": {
                            "Set_Event__List_API_error_response": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "EventListAPIStatus",
                                "value": "Error:@{body('Determine_the_status_of_the_Rubrik_Radar_analysis_process')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Does_get_cdmId_request_status_code_equal_to_200": {
                                "actions": {
                                  "Does_get_cdmId_response_contain_errors": {
                                    "actions": {
                                      "Set_error_message_with_status_code_200": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "anomalousFilesStatus",
                                          "value": "Error:@{body('Get_cdm_snapshotid_for_latest_snapshotfid')?['errors'][0]?['message']}"
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Parse_JSON": {
                                          "type": "ParseJson",
                                          "inputs": {
                                            "content": "@body('Get_cdm_snapshotid_for_latest_snapshotfid')",
                                            "schema": {
                                              "properties": {
                                                "data": {
                                                  "properties": {
                                                    "snapshot": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "cdmId": {
                                                          "type": "string"
                                                        },
                                                        "cluster": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "status": {
                                                              "type": "string"
                                                            },
                                                            "version": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "date": {
                                                          "type": "string"
                                                        },
                                                        "snappableNew": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "authorizedOperations": {
                                                              "items": {
                                                                "type": "string"
                                                              },
                                                              "type": "array"
                                                            },
                                                            "cdmId": {
                                                              "type": "string"
                                                            },
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "objectType": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          }
                                        },
                                        "Set_cdmId": {
                                          "runAfter": {
                                            "Parse_JSON": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "cdmId",
                                            "value": "@body('Parse_JSON')?['data']?['snapshot']?['cdmId']"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "contains": [
                                            "@body('Get_cdm_snapshotid_for_latest_snapshotfid')",
                                            "errors"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Get_cdm_snapshotid_for_latest_snapshotfid": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_error_message_in_get_cdmId": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "anomalousFilesStatus",
                                        "value": "Error:@{body('Get_cdm_snapshotid_for_latest_snapshotfid')?['message']}"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('Get_cdm_snapshotid_for_latest_snapshotfid')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Does_get_suspicious_files_status_code_equal_to_200": {
                                "actions": {
                                  "Does_get_suspicious_files_response_contain_errors": {
                                    "actions": {
                                      "Set_errormessage_with_status_code_200_from_get_suspicious_files": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "anomalousFilesStatus",
                                          "value": "Error:@{body('Get_Suspicious_files_for_a_latest_snpshot_of_given_object')?['errors'][0]?['message']}"
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Does_snapshot_contain_anomaly": {
                                          "actions": {
                                            "Compose": {
                                              "runAfter": {
                                                "For_each_anomaly_result": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Compose",
                                              "inputs": "@variables('SuspiciousFiles')"
                                            },
                                            "For_each_anomaly_result": {
                                              "foreach": "@body('Parse_JSON_2')?['data']?['anomalyResultOpt']?['anomalyInfo']?['strainAnalysisInfo']",
                                              "actions": {
                                                "For_each_AfffectedFiles": {
                                                  "foreach": "@items('For_each_anomaly_result')['sampleAffectedFilesInfo']",
                                                  "actions": {
                                                    "Append_filePath_of_affected_files_to_array": {
                                                      "runAfter": {
                                                        "Append_to_SuspiciousFiles": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "AppendToArrayVariable",
                                                      "inputs": {
                                                        "name": "filePaths",
                                                        "value": {
                                                          "title": "@items('For_each_AfffectedFiles')?['filePath']",
                                                          "value": "@items('For_each_AfffectedFiles')?['filePath']"
                                                        }
                                                      }
                                                    },
                                                    "Append_to_SuspiciousFiles": {
                                                      "type": "AppendToArrayVariable",
                                                      "inputs": {
                                                        "name": "SuspiciousFiles",
                                                        "value": {
                                                          "filePath": "@items('For_each_AfffectedFiles')?['filePath']",
                                                          "lastModified": "@items('For_each_AfffectedFiles')?['lastModified']",
                                                          "suspiciousActivity": "Ransomware encryption"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "runAfter": {
                                                    "For_each_sampleRansomwareNotefiles": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "Foreach"
                                                },
                                                "For_each_sampleRansomwareNotefiles": {
                                                  "foreach": "@items('For_each_anomaly_result')?['sampleRansomwareNoteFilesInfo']",
                                                  "actions": {
                                                    "Append_to_SuspiciousFiles_Array": {
                                                      "type": "AppendToArrayVariable",
                                                      "inputs": {
                                                        "name": "SuspiciousFiles",
                                                        "value": {
                                                          "filePath": "@items('For_each_sampleRansomwareNotefiles')?['filePath']",
                                                          "lastModified": "@items('For_each_sampleRansomwareNotefiles')?['lastModified']",
                                                          "suspiciousActivity": "Ransomware note"
                                                        }
                                                      }
                                                    },
                                                    "Append_to_filepath_array": {
                                                      "runAfter": {
                                                        "Append_to_SuspiciousFiles_Array": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "AppendToArrayVariable",
                                                      "inputs": {
                                                        "name": "filePaths",
                                                        "value": {
                                                          "title": "@items('For_each_sampleRansomwareNotefiles')?['filePath']",
                                                          "value": "@items('For_each_sampleRansomwareNotefiles')?['filePath']"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "type": "Foreach"
                                                }
                                              },
                                              "type": "Foreach",
                                              "runtimeConfiguration": {
                                                "concurrency": {
                                                  "repetitions": 1
                                                }
                                              }
                                            },
                                            "RubrikGenerateDownloadableLink": {
                                              "runAfter": {
                                                "Compose": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Workflow",
                                              "inputs": {
                                                "body": {
                                                  "AccessToken": "@variables('access_token')",
                                                  "ActivitySeriesId": "@variables('snapshotFid')",
                                                  "BaseUrl": "@triggerBody()?['BaseUrl']",
                                                  "ClusterId": "@variables('ClusterId')",
                                                  "FilePaths": "@variables('filePaths')",
                                                  "IncidentARMId": "@triggerBody()?['IncidentARMId']",
                                                  "IncidentStartTime": "@triggerBody()?['IncidentStartTime']",
                                                  "LastUpdatedTime": "@variables('lastUpdatedTime')",
                                                  "ObjectId": "@triggerBody()?['ObjectId']",
                                                  "ObjectName": "@variables('ObjectName')",
                                                  "ObjectType": "@triggerBody()?['ObjectType']",
                                                  "SuspiciousFiles": "@variables('SuspiciousFiles')"
                                                },
                                                "host": {
                                                  "triggerName": "manual",
                                                  "workflow": {
                                                    "id": "[[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('DownloadableLinkGeneratePlaybookName'))]"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Parse_JSON_2": [
                                              "Succeeded"
                                            ]
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@body('Parse_JSON_2')?['data']?['anomalyResultOpt']?['isAnomaly']",
                                                  "@true"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Parse_JSON_2": {
                                          "type": "ParseJson",
                                          "inputs": {
                                            "content": "@body('Get_Suspicious_files_for_a_latest_snpshot_of_given_object')",
                                            "schema": {
                                              "properties": {
                                                "data": {
                                                  "properties": {
                                                    "anomalyResultOpt": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "anomalyInfo": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "strainAnalysisInfo": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "sampleAffectedFilesInfo": {
                                                                    "items": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "filePath": {
                                                                          "type": "string"
                                                                        },
                                                                        "fileSizeBytes": {
                                                                          "type": "integer"
                                                                        },
                                                                        "lastModified": {
                                                                          "type": "string"
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "filePath",
                                                                        "lastModified",
                                                                        "fileSizeBytes",
                                                                        "__typename"
                                                                      ],
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "sampleRansomwareNoteFilesInfo": {
                                                                    "items": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "filePath": {
                                                                          "type": "string"
                                                                        },
                                                                        "fileSizeBytes": {
                                                                          "type": "integer"
                                                                        },
                                                                        "lastModified": {
                                                                          "type": "string"
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "filePath",
                                                                        "lastModified",
                                                                        "fileSizeBytes",
                                                                        "__typename"
                                                                      ],
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "strainId": {
                                                                    "type": "string"
                                                                  },
                                                                  "totalAffectedFiles": {
                                                                    "type": "integer"
                                                                  },
                                                                  "totalRansomwareNotes": {
                                                                    "type": "integer"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "strainId",
                                                                  "__typename"
                                                                ],
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        },
                                                        "anomalyProbability": {
                                                          "type": "number"
                                                        },
                                                        "detectionTime": {
                                                          "type": "string"
                                                        },
                                                        "encryption": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "isAnomaly": {
                                                          "type": "boolean"
                                                        },
                                                        "location": {
                                                          "type": "string"
                                                        },
                                                        "managedId": {
                                                          "type": "string"
                                                        },
                                                        "severity": {
                                                          "type": "string"
                                                        },
                                                        "snapshotDate": {
                                                          "type": "string"
                                                        },
                                                        "snapshotFid": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "contains": [
                                            "@body('Get_Suspicious_files_for_a_latest_snpshot_of_given_object')",
                                            "errors"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Get_Suspicious_files_for_a_latest_snpshot_of_given_object": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_errormessage_from_get_suspicious_files": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "anomalousFilesStatus",
                                        "value": "Error:@{body('Get_Suspicious_files_for_a_latest_snpshot_of_given_object')?['message']}"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('Get_Suspicious_files_for_a_latest_snpshot_of_given_object')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "For_each_2": {
                                "foreach": "@body('Parse_JSON_of_Radar_Analysis_Process')?['data']?['activitySeriesConnection']?['edges']",
                                "actions": {
                                  "Does_this_edge_object_name_equal_to_object_name_fetched_from_incident": {
                                    "actions": {
                                      "Set_ransomware_analysis_status": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "RansomwareAnalysisStatus",
                                          "value": "@items('For_each_2')?['node']?['lastActivityStatus']"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@items('For_each_2')?['node']?['objectName']",
                                            "@variables('ObjectName')"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Parse_JSON_of_Radar_Analysis_Process": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Foreach",
                                "runtimeConfiguration": {
                                  "concurrency": {
                                    "repetitions": 1
                                  }
                                }
                              },
                              "Get_Suspicious_files_for_a_latest_snpshot_of_given_object": {
                                "runAfter": {
                                  "Does_get_cdmId_request_status_code_equal_to_200": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "body": {
                                    "query": "query AnomalyResultQuery($clusterUuid: UUID!, $snapshotId: String!) {\r\n  anomalyResultOpt(clusterUuid: $clusterUuid, snapshotId: $snapshotId) {\r\n    id\r\n    snapshotFid\r\n    managedId\r\n    anomalyProbability\r\n    location\r\n    isAnomaly\r\n    objectType\r\n    severity\r\n    detectionTime\r\n    snapshotDate\r\n    encryption\r\n    anomalyInfo {\r\n      strainAnalysisInfo {\r\n        strainId\r\n        totalAffectedFiles\r\n        totalRansomwareNotes\r\n        sampleAffectedFilesInfo {\r\n          filePath\r\n          lastModified\r\n          fileSizeBytes\r\n          __typename\r\n        }\r\n        sampleRansomwareNoteFilesInfo {\r\n          filePath\r\n          lastModified\r\n          fileSizeBytes\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n",
                                    "variables": {
                                      "clusterUuid": "@{triggerBody()?['ClusterId']}",
                                      "snapshotId": "@{variables('cdmId')}"
                                    }
                                  },
                                  "headers": {
                                    "Authorization": "Bearer @{variables('access_token')}"
                                  },
                                  "method": "POST",
                                  "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                }
                              },
                              "Get_cdm_snapshotid_for_latest_snapshotfid": {
                                "runAfter": {
                                  "Is_ransomware_analysis_running": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "body": {
                                    "query": "query SnappableInvestigationsQuery($id: UUID!) {\r\n  snapshot(snapshotFid: $id) {\r\n    date\r\n    cluster {\r\n      id\r\n      name\r\n      version\r\n      status\r\n      __typename\r\n    }\r\n    cdmId\r\n    snappableNew {\r\n      name\r\n      id\r\n      cdmId\r\n      objectType\r\n      ... on VsphereVm {\r\n        authorizedOperations\r\n        __typename\r\n      }\r\n      ... on VolumeGroup {\r\n        logicalPath {\r\n          fid\r\n          name\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      ... on NutanixVm {\r\n        authorizedOperations\r\n        __typename\r\n      }\r\n      ... on HyperVVirtualMachine {\r\n        authorizedOperations\r\n        __typename\r\n      }\r\n      ... on LinuxFileset {\r\n        host {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        failoverClusterApp {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      ... on WindowsFileset {\r\n        host {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        failoverClusterApp {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      ... on ShareFileset {\r\n        host {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        share {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        shareType\r\n        __typename\r\n      }\r\n      ... on NasFileset {\r\n        nasShare {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}",
                                    "variables": {
                                      "id": "@{variables('snapshotFid')}"
                                    }
                                  },
                                  "headers": {
                                    "Authorization": "Bearer @{variables('access_token')}"
                                  },
                                  "method": "POST",
                                  "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                }
                              },
                              "Is_ransomware_analysis_running": {
                                "actions": {
                                  "Does_Radar_Analysis_status_get_status_code_200": {
                                    "actions": {
                                      "Does_Radar_analysis_status_response_contain_errors": {
                                        "actions": {
                                          "Set_Radar_Analysis_status": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "EventListAPIStatus",
                                              "value": "Error:@{body('Gather_the_final_Radar_Analysis_results')?['errors'][0]?['message']}"
                                            }
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Parse_JSON_of_Gather_final_Radar_analysis_status": {
                                              "type": "ParseJson",
                                              "inputs": {
                                                "content": "@body('Gather_the_final_Radar_Analysis_results')",
                                                "schema": {
                                                  "properties": {
                                                    "data": {
                                                      "properties": {
                                                        "activitySeriesConnection": {
                                                          "properties": {
                                                            "edges": {
                                                              "items": {
                                                                "properties": {
                                                                  "node": {
                                                                    "properties": {
                                                                      "activityConnection": {
                                                                        "properties": {
                                                                          "nodes": {
                                                                            "items": {
                                                                              "properties": {
                                                                                "id": {
                                                                                  "type": "string"
                                                                                },
                                                                                "message": {
                                                                                  "type": "string"
                                                                                },
                                                                                "severity": {
                                                                                  "type": "string"
                                                                                },
                                                                                "time": {
                                                                                  "type": "string"
                                                                                }
                                                                              },
                                                                              "required": [
                                                                                "id",
                                                                                "message",
                                                                                "severity",
                                                                                "time"
                                                                              ],
                                                                              "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "activitySeriesId": {
                                                                        "type": "string"
                                                                      },
                                                                      "cluster": {
                                                                        "properties": {
                                                                          "id": {
                                                                            "type": "string"
                                                                          },
                                                                          "name": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "fid": {
                                                                        "type": "string"
                                                                      },
                                                                      "id": {
                                                                        "type": "integer"
                                                                      },
                                                                      "lastActivityStatus": {
                                                                        "type": "string"
                                                                      },
                                                                      "lastActivityType": {
                                                                        "type": "string"
                                                                      },
                                                                      "lastUpdated": {
                                                                        "type": "string"
                                                                      },
                                                                      "objectId": {
                                                                        "type": "string"
                                                                      },
                                                                      "objectName": {
                                                                        "type": "string"
                                                                      },
                                                                      "objectType": {
                                                                        "type": "string"
                                                                      },
                                                                      "progress": {
                                                                        "type": "string"
                                                                      },
                                                                      "severity": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "node"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            },
                                                            "pageInfo": {
                                                              "properties": {
                                                                "endCursor": {
                                                                  "type": "string"
                                                                },
                                                                "hasNextPage": {
                                                                  "type": "boolean"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "featureFlag": {
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "variant": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "contains": [
                                                "@body('Gather_the_final_Radar_Analysis_results')",
                                                "errors"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "runAfter": {
                                      "Gather_the_final_Radar_Analysis_results": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Error_message_for_Radar_Analysis_status": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "EventListAPIStatus",
                                            "value": "StatusCode:@{outputs('Gather_the_final_Radar_Analysis_results')['statusCode']} Error:@{body('Gather_the_final_Radar_Analysis_results')}"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('Gather_the_final_Radar_Analysis_results')['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Gather_the_final_Radar_Analysis_results": {
                                    "runAfter": {
                                      "Until": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                      "body": {
                                        "query": "query EventSeriesListQuery($after: String, $filters: ActivitySeriesFilterInput, $first: Int, $sortBy: ActivitySeriesSortByEnum, $sortOrder: SortOrderEnum) {\r\n  activitySeriesConnection(\r\n    after: $after\r\n    first: $first\r\n    filters: $filters\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n  ) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        ...EventSeriesFragment\r\n        cluster {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        activityConnection(first: 1) {\r\n          nodes {\r\n            id\r\n            message\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment EventSeriesFragment on ActivitySeries {\r\n  id\r\n  fid\r\n  activitySeriesId\r\n  lastUpdated\r\n  lastActivityType\r\n  lastActivityStatus\r\n  objectId\r\n  objectName\r\n  objectType\r\n  severity\r\n  progress\r\n  isCancelable\r\n  isPolarisEventSeries\r\n  location\r\n  __typename\r\n}\r\n",
                                        "variables": {
                                          "filters": {
                                            "cluster": {
                                              "id": "@{variables('ClusterId')}"
                                            },
                                            "lastActivityStatus": "[variables('TemplateEmptyArray')]",
                                            "lastActivityType": [
                                              "Anomaly"
                                            ],
                                            "lastUpdatedGt": "@{variables('StartDate')}",
                                            "objectName": "@{variables('ObjectName')}",
                                            "objectType": "[variables('TemplateEmptyArray')]",
                                            "severity": "[variables('TemplateEmptyArray')]"
                                          },
                                          "first": 40,
                                          "sortBy": "StartTime",
                                          "sortOrder": "Asc"
                                        }
                                      },
                                      "headers": {
                                        "Authorization": "Beare @{variables('access_token')}",
                                        "Content-Type": "application/json"
                                      },
                                      "method": "POST",
                                      "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                    }
                                  },
                                  "Until": {
                                    "actions": {
                                      "Delay": {
                                        "runAfter": {
                                          "Does_Event_List_get_status_code_200_in_Generic_Polling": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Wait",
                                        "inputs": {
                                          "interval": {
                                            "count": 1,
                                            "unit": "Minute"
                                          }
                                        }
                                      },
                                      "Does_Event_List_get_status_code_200_in_Generic_Polling": {
                                        "actions": {
                                          "Does_Event_List_response_contains_errors": {
                                            "actions": {
                                              "Set_Event_List_error_response_": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "EventListAPIStatus",
                                                  "value": "Error:@{body('GenericPolling')?['errors'][0]?['message']}"
                                                }
                                              }
                                            },
                                            "else": {
                                              "actions": {
                                                "For_each_edge_in_activitySeriesConnection": {
                                                  "foreach": "@body('Parse_JSON_of_Generic_Polling')?['data']?['activitySeriesConnection']?['edges']",
                                                  "actions": {
                                                    "Does_object_name_equal_to_object_name_fetched_from_incident": {
                                                      "actions": {
                                                        "Update_Ransomware_Analysis_status": {
                                                          "type": "SetVariable",
                                                          "inputs": {
                                                            "name": "RansomwareAnalysisStatus",
                                                            "value": "@items('For_each_edge_in_activitySeriesConnection')?['node']?['lastActivityStatus']"
                                                          }
                                                        }
                                                      },
                                                      "expression": {
                                                        "and": [
                                                          {
                                                            "equals": [
                                                              "@items('For_each_edge_in_activitySeriesConnection')?['node']?['objectName']",
                                                              "@variables('ObjectName')"
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      "type": "If"
                                                    }
                                                  },
                                                  "runAfter": {
                                                    "Parse_JSON_of_Generic_Polling": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "Foreach"
                                                },
                                                "Parse_JSON_of_Generic_Polling": {
                                                  "type": "ParseJson",
                                                  "inputs": {
                                                    "content": "@body('GenericPolling')",
                                                    "schema": {
                                                      "properties": {
                                                        "data": {
                                                          "properties": {
                                                            "activitySeriesConnection": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "edges": {
                                                                  "items": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "cursor": {
                                                                        "type": "string"
                                                                      },
                                                                      "node": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "activityConnection": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "nodes": {
                                                                                "items": {
                                                                                  "properties": {
                                                                                    "__typename": {
                                                                                      "type": "string"
                                                                                    },
                                                                                    "id": {
                                                                                      "type": "string"
                                                                                    },
                                                                                    "message": {
                                                                                      "type": "string"
                                                                                    }
                                                                                  },
                                                                                  "required": [
                                                                                    "id",
                                                                                    "message",
                                                                                    "__typename"
                                                                                  ],
                                                                                  "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                              }
                                                                            },
                                                                            "type": "object"
                                                                          },
                                                                          "activitySeriesId": {
                                                                            "type": "string"
                                                                          },
                                                                          "cluster": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "id": {
                                                                                "type": "string"
                                                                              },
                                                                              "name": {
                                                                                "type": "string"
                                                                              }
                                                                            },
                                                                            "type": "object"
                                                                          },
                                                                          "fid": {
                                                                            "type": "string"
                                                                          },
                                                                          "id": {
                                                                            "type": "integer"
                                                                          },
                                                                          "isCancelable": {
                                                                            "type": "boolean"
                                                                          },
                                                                          "isPolarisEventSeries": {
                                                                            "type": "boolean"
                                                                          },
                                                                          "lastActivityStatus": {
                                                                            "type": "string"
                                                                          },
                                                                          "lastActivityType": {
                                                                            "type": "string"
                                                                          },
                                                                          "lastUpdated": {
                                                                            "type": "string"
                                                                          },
                                                                          "location": {
                                                                            "type": "string"
                                                                          },
                                                                          "objectId": {
                                                                            "type": "string"
                                                                          },
                                                                          "objectName": {
                                                                            "type": "string"
                                                                          },
                                                                          "objectType": {
                                                                            "type": "string"
                                                                          },
                                                                          "progress": {
                                                                            "type": "string"
                                                                          },
                                                                          "severity": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      }
                                                                    },
                                                                    "required": [
                                                                      "cursor",
                                                                      "node",
                                                                      "__typename"
                                                                    ],
                                                                    "type": "object"
                                                                  },
                                                                  "type": "array"
                                                                },
                                                                "pageInfo": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "endCursor": {
                                                                      "type": "string"
                                                                    },
                                                                    "hasNextPage": {
                                                                      "type": "boolean"
                                                                    },
                                                                    "hasPreviousPage": {
                                                                      "type": "boolean"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "contains": [
                                                    "@body('GenericPolling')",
                                                    "errors"
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        },
                                        "runAfter": {
                                          "GenericPolling": [
                                            "Succeeded",
                                            "Failed"
                                          ]
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@outputs('GenericPolling')['statusCode']",
                                                200
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenericPolling": {
                                        "type": "Http",
                                        "inputs": {
                                          "body": {
                                            "query": "query EventSeriesListQuery($after: String, $filters: ActivitySeriesFilterInput, $first: Int, $sortBy: ActivitySeriesSortByEnum, $sortOrder: SortOrderEnum) {\r\n  activitySeriesConnection(\r\n    after: $after\r\n    first: $first\r\n    filters: $filters\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n  ) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        ...EventSeriesFragment\r\n        cluster {\r\n          id\r\n          name\r\n          __typename\r\n        }\r\n        activityConnection(first: 1) {\r\n          nodes {\r\n            id\r\n            message\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment EventSeriesFragment on ActivitySeries {\r\n  id\r\n  fid\r\n  activitySeriesId\r\n  lastUpdated\r\n  lastActivityType\r\n  lastActivityStatus\r\n  objectId\r\n  objectName\r\n  objectType\r\n  severity\r\n  progress\r\n  isCancelable\r\n  isPolarisEventSeries\r\n  location\r\n  __typename\r\n}\r\n",
                                            "variables": {
                                              "filters": {
                                                "cluster": {
                                                  "id": "@{variables('ClusterId')}"
                                                },
                                                "lastActivityStatus": "[variables('TemplateEmptyArray')]",
                                                "lastActivityType": [
                                                  "Anomaly"
                                                ],
                                                "lastUpdatedGt": "@{variables('StartDate')}",
                                                "objectName": "@{variables('ObjectName')}",
                                                "objectType": "[variables('TemplateEmptyArray')]",
                                                "severity": "[variables('TemplateEmptyArray')]"
                                              },
                                              "first": 40,
                                              "sortBy": "StartTime",
                                              "sortOrder": "Asc"
                                            }
                                          },
                                          "headers": {
                                            "Authorization": "Bearer @{variables('access_token')}",
                                            "Content-Type": "application/json"
                                          },
                                          "method": "POST",
                                          "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                        }
                                      }
                                    },
                                    "expression": "@not(equals(variables('RansomwareAnalysisStatus'), 'Running'))",
                                    "limit": {
                                      "timeout": "PT1440M"
                                    },
                                    "type": "Until"
                                  }
                                },
                                "runAfter": {
                                  "Set_last_updated_time_for_snapshot": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@variables('RansomwareAnalysisStatus')",
                                        "Running\n"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Parse_JSON_of_Radar_Analysis_Process": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('Determine_the_status_of_the_Rubrik_Radar_analysis_process')",
                                  "schema": {
                                    "properties": {
                                      "data": {
                                        "properties": {
                                          "activitySeriesConnection": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "edges": {
                                                "items": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "cursor": {
                                                      "type": "string"
                                                    },
                                                    "node": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "activityConnection": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "nodes": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "id": {
                                                                    "type": "string"
                                                                  },
                                                                  "message": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "id",
                                                                  "message",
                                                                  "__typename"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "activitySeriesId": {
                                                          "type": "string"
                                                        },
                                                        "cluster": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "fid": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "integer"
                                                        },
                                                        "isCancelable": {
                                                          "type": "boolean"
                                                        },
                                                        "isPolarisEventSeries": {
                                                          "type": "boolean"
                                                        },
                                                        "lastActivityStatus": {
                                                          "type": "string"
                                                        },
                                                        "lastActivityType": {
                                                          "type": "string"
                                                        },
                                                        "lastUpdated": {
                                                          "type": "string"
                                                        },
                                                        "location": {
                                                          "type": "string"
                                                        },
                                                        "objectId": {
                                                          "type": "string"
                                                        },
                                                        "objectName": {
                                                          "type": "string"
                                                        },
                                                        "objectType": {
                                                          "type": "string"
                                                        },
                                                        "progress": {
                                                          "type": "string"
                                                        },
                                                        "severity": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "cursor",
                                                    "node",
                                                    "__typename"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "pageInfo": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "endCursor": {
                                                    "type": "string"
                                                  },
                                                  "hasNextPage": {
                                                    "type": "boolean"
                                                  },
                                                  "hasPreviousPage": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              },
                              "Set_cdmId_same_as_snapshotfid": {
                                "runAfter": {
                                  "Set_snapshotfid": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "cdmId",
                                  "value": "@variables('snapshotFid')"
                                }
                              },
                              "Set_last_updated_time_for_snapshot": {
                                "runAfter": {
                                  "Set_cdmId_same_as_snapshotfid": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "lastUpdatedTime",
                                  "value": "@{body('Parse_JSON_of_Radar_Analysis_Process')?['data']?['activitySeriesConnection']?['edges'][0]?['node']?['lastUpdated']}"
                                }
                              },
                              "Set_snapshotfid": {
                                "runAfter": {
                                  "For_each_2": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "snapshotFid",
                                  "value": "@{body('Parse_JSON_of_Radar_Analysis_Process')?['data']?['activitySeriesConnection']?['edges'][0]?['node']?['activitySeriesId']}"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('Determine_the_status_of_the_Rubrik_Radar_analysis_process')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Determine_the_status_of_the_Rubrik_Radar_analysis_process": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_Error_message_with_status_code_for_radar_analysis": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "EventListAPIStatus",
                              "value": "Status Code:@{outputs('Determine_the_status_of_the_Rubrik_Radar_analysis_process')['statusCode']}Error:@{body('Determine_the_status_of_the_Rubrik_Radar_analysis_process')?['message']}"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Determine_the_status_of_the_Rubrik_Radar_analysis_process')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Get_Client_Id_": {
                      "runAfter": {
                        "Initialize_Start_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_secret": {
                      "runAfter": {
                        "Get_Client_Id_": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Initialize_AnomolousFileStatus": {
                      "runAfter": {
                        "Initialize_filepaths": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "anomalousFilesStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Cluster_Id": {
                      "runAfter": {
                        "Initialize_Snapshot_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClusterId",
                            "type": "string",
                            "value": "@triggerBody()?['ClusterId']"
                          }
                        ]
                      },
                      "description": "from playbook input"
                    },
                    "Initialize_Event_List_API_status": {
                      "runAfter": {
                        "Initialize_cluster_connection_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "EventListAPIStatus",
                            "type": "string",
                            "value": "@{null}"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Id": {
                      "runAfter": {
                        "Initialize_Object_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Name": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectName",
                            "type": "string",
                            "value": "@triggerBody()?['ObjectName']"
                          }
                        ]
                      },
                      "description": "from playbook input"
                    },
                    "Initialize_Snapshot_Id": {
                      "runAfter": {
                        "Initialize_Object_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "SnapshotId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Start_Date": {
                      "runAfter": {
                        "Subtract_from_time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "StartDate",
                            "type": "string",
                            "value": "@body('Subtract_from_time')"
                          }
                        ]
                      },
                      "description": "start time of incident"
                    },
                    "Initialize_access_token": {
                      "runAfter": {
                        "Is_Authentication_failed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token",
                            "type": "string",
                            "value": "@{body('Authentication')?['access_token']}"
                          }
                        ]
                      }
                    },
                    "Initialize_cdmId": {
                      "runAfter": {
                        "Initialize_snapshotFid": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cdmId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_cluster_connection_status": {
                      "runAfter": {
                        "Initialize_cluster_location_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClusterConnectionStatus",
                            "type": "string",
                            "value": "@{null}"
                          }
                        ]
                      }
                    },
                    "Initialize_cluster_location_status": {
                      "runAfter": {
                        "Initialize_sonar_sensitive_hits_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClusterLocationStatus",
                            "type": "string",
                            "value": "@{null}"
                          }
                        ]
                      }
                    },
                    "Initialize_clusterlocation": {
                      "runAfter": {
                        "Initialize_filpaths_to_download": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "clusterLocation",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_filepaths": {
                      "runAfter": {
                        "Initialize_suspicious_files": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "filePaths",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_filpaths_to_download": {
                      "runAfter": {
                        "Initialize_cdmId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "downloadPaths",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_lastUpdatedTime": {
                      "runAfter": {
                        "Initialize_AnomolousFileStatus": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "lastUpdatedTime",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_ransomware_analysis_status": {
                      "runAfter": {
                        "Initialize_Cluster_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "RansomwareAnalysisStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_snapshotFid": {
                      "runAfter": {
                        "Initialize_lastUpdatedTime": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "snapshotFid",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_sonar_sensitive_hits_status": {
                      "runAfter": {
                        "Initialize_ransomware_analysis_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Status",
                            "type": "string",
                            "value": "@{null}"
                          }
                        ]
                      }
                    },
                    "Initialize_suspicious_files": {
                      "runAfter": {
                        "Initialize_Event_List_API_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "SuspiciousFiles",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Is_Authentication_failed": {
                      "actions": {
                        "Failed_Response_": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "Error:@{body('Authentication')?['message']}",
                            "statusCode": "@outputs('Authentication')['statusCode']"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Failed_Response_": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('Authentication')['statusCode']}",
                              "message": "Error:@{body('Authentication')?['message']}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Authentication": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@outputs('Authentication')['statusCode']",
                                200
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Response": {
                      "runAfter": {
                        "Does_cdm-cluster-connection_get_status_code_200": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Does_radar_analysis_get_status_code_200_": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": "@if(or(contains(variables('EventListAPIStatus'),'Error'),or(contains(variables('ClusterConnectionStatus'),'Error'),or(contains(variables('ClusterLocationStatus'),'Error'),contains(variables('Status'),'Error')))),400,200)"
                      }
                    },
                    "Subtract_from_time": {
                      "runAfter": {
                        "Initialize_clusterlocation": [
                          "Succeeded"
                        ]
                      },
                      "type": "Expression",
                      "kind": "SubtractFromTime",
                      "inputs": {
                        "baseTime": "@triggerBody()?['IncidentStartTime']",
                        "interval": 1,
                        "timeUnit": "Day"
                      }
                    },
                    "rubrik-cdm-cluster-connection-state": {
                      "runAfter": {
                        "Does_cdm-cluster-location_get_status_code_200": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "query ClusterDetailQuery($id: UUID!) {\r\n  clusterConnection(filter: {id: [$id]}) {\r\n    nodes {\r\n      status\r\n      }\r\n    }\r\n}",
                          "variables": {
                            "id": "@{variables('ClusterId')}"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}",
                          "Content-Type": "application/json"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    },
                    "rubrik-cdm-cluster-location": {
                      "runAfter": {
                        "Does_Object_List_get_status_code_200": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "query ClusterDetailQuery($id: UUID!) {\r\n  clusterConnection(filter: {id: [$id]}) {\r\n    nodes {\r\n      geoLocation {\r\n        address\r\n      }\r\n    }\r\n  }\r\n}",
                          "variables": {
                            "id": "@{variables('ClusterId')}"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}",
                          "Content-Type": "application/json"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    },
                    "rubrik-sonar-sensitive-hits(Object_List)": {
                      "runAfter": {
                        "Initialize_access_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "query ObjectsListQuery($day: String!, $timezone: String!) {\r\n  policyObjs(day: $day, timezone: $timezone,workloadTypes:[]) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        ...PolicyObjFragment\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\nfragment PolicyObjFragment on PolicyObj {\r\n  id\r\n  snapshotFid\r\n  snapshotTimestamp\r\n  osType\r\n  shareType\r\n  objectStatus {\r\n    policyStatuses {\r\n      status\r\n      __typename\r\n    }\r\n    latestSnapshotResult {\r\n      snapshotTime\r\n      snapshotFid\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  rootFileResult {\r\n    hits {\r\n      totalHits\r\n      violations\r\n      permittedHits\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    analyzerGroupResults {\r\n      ...AnalyzerGroupResultFragment\r\n      __typename\r\n    }\r\n    filesWithHits {\r\n      totalHits\r\n      violations\r\n      permittedHits\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    openAccessFiles {\r\n      totalHits\r\n      violations\r\n      permittedHits\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    openAccessFolders {\r\n      totalHits\r\n      violations\r\n      permittedHits\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    openAccessFilesWithHits {\r\n      totalHits\r\n      violations\r\n      permittedHits\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    staleFiles {\r\n      totalHits\r\n      violations\r\n      permittedHits\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    staleFilesWithHits {\r\n      totalHits\r\n      violations\r\n      permittedHits\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    openAccessStaleFiles {\r\n      totalHits\r\n      violations\r\n      permittedHits\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    numActivities\r\n    numActivitiesDelta\r\n    __typename\r\n  }\r\n  snappable {\r\n    ...SnappableFragment\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\nfragment AnalyzerGroupResultFragment on AnalyzerGroupResult {\r\n  analyzerGroup {\r\n    groupType\r\n    id\r\n    name\r\n    __typename\r\n  }\r\n  analyzerResults {\r\n    hits {\r\n      totalHits\r\n      violations\r\n      permittedHits\r\n      __typename\r\n    }\r\n    analyzer {\r\n      id\r\n      name\r\n      analyzerType\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  hits {\r\n    totalHits\r\n    violations\r\n    permittedHits\r\n    violationsDelta\r\n    totalHitsDelta\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\nfragment SnappableFragment on HierarchyObject {\r\n  id\r\n  name\r\n  objectType\r\n  slaAssignment\r\n  logicalPath {\r\n    name\r\n    objectType\r\n    __typename\r\n  }\r\n  physicalPath {\r\n    name\r\n    objectType\r\n    __typename\r\n  }\r\n  effectiveSlaDomain {\r\n    id\r\n    name\r\n    __typename\r\n  }\r\n  ... on VsphereVm {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on LinuxFileset {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on ShareFileset {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on WindowsFileset {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on NutanixVm {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on HyperVVirtualMachine {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on VolumeGroup {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}",
                          "variables": {
                            "day": "@{formatDateTime(utcNow(),'yyyy-MM-dd')}",
                            "timezone": "Asia/Calcutta"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}",
                          "Content-Type": "application/json"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "RubrikCustomConnector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                        "connectionName": "[[variables('RubrikcustomconnectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
                      },
                      "keyvault_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikAnomalyAnalysis",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('RubrikcustomconnectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('RubrikcustomconnectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[parameters('tenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[[parameters('keyvaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "LogicAppsCustomConnector",
                      "contentId": "[variables('_RubrikCustomConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Anomaly Analysis",
            "description": "This playbook queries Rubrik Security Cloud to enrich the Anomaly event with additional information regarding the Ransomware analysis, results from sensitive data scans, (to aid in incident prioritization), and additional information about the Rubrik cluster. Also it retrieves suspiciousFiles information associated with anomalous snapshot and internally calls RubrikAnomalyGenerateDownloadableLink playbook to get downloadable links and enrich the anomaly incident.",
            "prerequisites": [
              "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
              "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "3. Rubrik custom connector needs to be deployed prior to the deployment of this playbook, in the same resource group and region. Relevant instructions can be found in the connector doc page.",
              "4. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with unique name",
              "b. Go to KeyVault -> secrets -> Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively",
              "5. Make sure that RubrikAnomalyGenerateDownloadableLink playbook is deployed before deploying RubrikAnomalyAnalysis playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Click the Custom Connector connection resource",
              "2. Click edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections"
            ],
            "lastUpdateTime": "2024-02-21T00:00:00Z",
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "Anomaly",
              "Enrichment",
              "Rubrik"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "RubrikAnomalyAnalysis",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikAnomalyIncidentResponse Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion3')]",
          "parameters": {
            "API Hostname": {
              "type": "String",
              "defaultValue": "rubrik-rcf-2512.my.rubrik.com",
              "metadata": {
                "description": "Hostname of the RubrikApi instance."
              }
            },
            "PlaybookName": {
              "defaultValue": "RubrikAnomalyIncidentResponse",
              "type": "string"
            },
            "TeamsGroupId": {
              "defaultValue": "TeamsGroupIds",
              "type": "String",
              "metadata": {
                "description": "Id of the Teams Group where the adaptive card will be posted."
              }
            },
            "TeamsChannelId": {
              "defaultValue": "TeamsChannelId",
              "type": "String",
              "metadata": {
                "description": "Id of the Teams Channel where the adaptive card will be posted."
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "TeamsConnectionName": "[[concat('Teams-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "For_each_2": {
                      "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
                      "actions": {
                        "Parse_JSON": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_2')?['properties']?['additionalData']?['Custom Details']",
                            "schema": {
                              "properties": {
                                "ClusterId": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "ObjectId": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "ObjectName": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "ObjectType": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Set_ClusterId": {
                          "runAfter": {
                            "Set_ObjectId": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ClusterId",
                            "value": "@{body('Parse_JSON')?['ClusterId'][0]}"
                          }
                        },
                        "Set_ObjectId": {
                          "runAfter": {
                            "Parse_JSON": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ObjectId",
                            "value": "@{body('Parse_JSON')?['ObjectId'][0]}"
                          }
                        },
                        "Set_ObjectName": {
                          "runAfter": {
                            "Set_ClusterId": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ObjectName",
                            "value": "@{body('Parse_JSON')?['ObjectName'][0]}"
                          }
                        },
                        "Set_ObjectType": {
                          "runAfter": {
                            "Set_ObjectName": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ObjectType",
                            "value": "@{body('Parse_JSON')?['ObjectType'][0]}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Initialize_BaseURL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "BaseUrl",
                            "type": "string",
                            "value": "[[concat('https://', parameters('API Hostname'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Cluster_Id": {
                      "runAfter": {
                        "Initialize_Object_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClusterId",
                            "type": "string",
                            "value": "[variables('blanks')]"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Id": {
                      "runAfter": {
                        "Initialize_Cluster_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectId",
                            "type": "string",
                            "value": "[variables('blanks')]"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Name": {
                      "runAfter": {
                        "Initialize_Object_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectName",
                            "type": "string",
                            "value": "[variables('blanks')]"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Type": {
                      "runAfter": {
                        "Initialize_BaseURL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectType",
                            "type": "string",
                            "value": "[variables('blanks')]"
                          }
                        ]
                      }
                    },
                    "Initialize_Start_Time_of_Incident": {
                      "runAfter": {
                        "Initialize_Object_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentStartTime",
                            "type": "string",
                            "value": "@{formatDateTime(triggerBody()?['object']?['properties']?['createdTimeUtc'],'yy-MM-dd [hh:mm:ss tt]')}"
                          }
                        ]
                      }
                    },
                    "Initialize_status": {
                      "runAfter": {
                        "Initialize_Start_Time_of_Incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Status",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Is_object_type_Fileset": {
                      "actions": {
                        "RubrikFilesetRansomwareDiscovery": {
                          "type": "Workflow",
                          "inputs": {
                            "body": {
                              "BaseUrl": "@variables('BaseUrl')",
                              "ClusterId": "@variables('ClusterId')",
                              "IncidentTime": "@variables('IncidentStartTime')",
                              "ObjectId": "@variables('ObjectId')",
                              "ObjectName": "@variables('ObjectName')",
                              "ObjectType": "@variables('ObjectType')"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikFilesetRansomwareDiscovery')]"
                              }
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_2": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Is_object_type_Vm": {
                            "actions": {
                              "Collect_Ransomware_Discovery_and_Recovery_Data": {
                                "type": "ApiConnectionWebhook",
                                "inputs": {
                                  "body": {
                                    "body": {
                                      "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Ransomware Discovery and Recovery Data\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Please provide input values to initiate ransomware discovery and recovery.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nCluster ID =  @{variables('ClusterId')}\\n\\nIncident Start Time = @{variables('IncidentStartTime')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Which playbook to use for ransomware discovery and recovery?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"Rubrik Ransomware Discovery and VM Recovery\",\n                    \"value\": \"Rubrik Ransomware Discovery and VM Recovery\"\n                },\n                {\n                    \"title\": \"Rubrik Ransomware Discovery and File Recovery\",\n                    \"value\": \"Rubrik Ransomware Discovery and File Recovery\"\n                },\n                {\n                    \"title\": \"No Recovery\",\n                    \"value\": \"No Recovery\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"value\": \"Rubrik Ransomware Discovery and VM Recovery\",\n            \"style\": \"expanded\",\n            \"id\": \"File VM or No recovery\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                                      "recipient": {
                                        "channelId": "[[concat('', parameters('TeamsChannelId'))]",
                                        "groupId": "[[concat('', parameters('TeamsGroupId'))]"
                                      },
                                      "updateMessage": "Response saved for further actions!"
                                    },
                                    "notificationUrl": "@{listCallbackUrl()}"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['teams_1']['connectionId']"
                                    }
                                  },
                                  "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                }
                              },
                              "Shall_recovery_be_performed": {
                                "actions": {
                                  "Is_file_recovery_selected": {
                                    "actions": {
                                      "RubrikRansomwareDiscoveryAndFileRecovery": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "body": {
                                            "BaseUrl": "@variables('BaseUrl')",
                                            "ClusterId": "@variables('ClusterId')",
                                            "IncidentTime": "@variables('IncidentStartTime')",
                                            "ObjectId": "@variables('ObjectId')",
                                            "ObjectName": "@variables('ObjectType')",
                                            "ObjectType": "@variables('ObjectType')"
                                          },
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikRansomwareDiscoveryAndFileRecovery')]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "RubrikRansomwareDiscoveryAndVMRecovery": {
                                          "type": "Workflow",
                                          "inputs": {
                                            "body": {
                                              "BaseUrl": "@variables('BaseUrl')",
                                              "ClusterId": "@variables('ClusterId')",
                                              "IncidentTime": "@variables('IncidentStartTime')",
                                              "ObjectId": "@variables('ObjectId')",
                                              "ObjectName": "@variables('ObjectName')",
                                              "ObjectType": "@variables('ObjectType')"
                                            },
                                            "host": {
                                              "triggerName": "manual",
                                              "workflow": {
                                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikRansomwareDiscoveryAndVMRecovery')]"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "contains": [
                                            "@body('Collect_Ransomware_Discovery_and_Recovery_Data')?['data']?['file VM or No recovery']",
                                            "File Recovery"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Collect_Ransomware_Discovery_and_Recovery_Data": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_status_as_No_Recovery": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "Status",
                                        "value": "Error: No recovery selected"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "not": {
                                        "contains": [
                                          "@body('Collect_Ransomware_Discovery_and_Recovery_Data')?['data']?['file VM or No recovery']",
                                          "No Recovery"
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "else": {
                              "actions": {
                                "Set_status_for_not_a_valid_object": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Status",
                                    "value": "Not a valid object"
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "contains": [
                                    "@variables('ObjectType')",
                                    "Vm"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@variables('ObjectType')",
                              "Fileset"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "RubrikAnomalyAnalysis": {
                      "runAfter": {
                        "For_each_2": [
                          "Succeeded"
                        ]
                      },
                      "type": "Workflow",
                      "inputs": {
                        "body": {
                          "BaseUrl": "@variables('BaseUrl')",
                          "ClusterId": "@variables('ClusterId')",
                          "IncidentARMId": "@triggerBody()?['object']?['id']",
                          "IncidentStartTime": "@triggerBody()?['object']?['properties']?['createdTimeUtc']",
                          "ObjectId": "@variables('ObjectId')",
                          "ObjectName": "@variables('ObjectName')",
                          "ObjectType": "@variables('ObjectType')"
                        },
                        "host": {
                          "triggerName": "manual",
                          "workflow": {
                            "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikAnomalyAnalysis')]"
                          }
                        }
                      }
                    },
                    "RubrikDataObjectDiscovery": {
                      "runAfter": {
                        "For_each_2": [
                          "Succeeded"
                        ]
                      },
                      "type": "Workflow",
                      "inputs": {
                        "body": {
                          "BaseUrl": "@variables('BaseUrl')",
                          "ObjectId": "@variables('ObjectId')",
                          "ObjectName": "@variables('ObjectName')"
                        },
                        "host": {
                          "triggerName": "manual",
                          "workflow": {
                            "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikDataObjectDiscovery')]"
                          }
                        }
                      }
                    },
                    "RubrikFileObjectContextAnalysis": {
                      "runAfter": {
                        "For_each_2": [
                          "Succeeded"
                        ]
                      },
                      "type": "Workflow",
                      "inputs": {
                        "body": {
                          "Baseurl": "@variables('BaseUrl')",
                          "ObjectId": "@variables('ObjectId')",
                          "ObjectName": "@variables('ObjectName')",
                          "ObjectType": "@variables('ObjectType')",
                          "incidentStartTime": "@variables('IncidentStartTime')"
                        },
                        "host": {
                          "triggerName": "manual",
                          "workflow": {
                            "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikFileObjectContextAnalysis')]"
                          }
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "teams_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikAnomalyIncidentResponse",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId3'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId3')]",
                "contentId": "[variables('_playbookContentId3')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Anomaly Incident Response",
            "description": "This playbook provides an end to end example of the collection of Ransomware Anomaly information from Rubrik, its enrichment with Data Classification insights (to aid in incident prioritization), and the options to optionally perform various recovery operations. It uses several other playbooks defined in this solution to perform these tasks.",
            "prerequisites": [
              "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
              "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "3. Obtain Teams group id and channel id.",
              "4. Make sure that below mentioned playbooks are deployed before deploying RubrikAnomalyIncidentResponse playbook:",
              "- RubrikDataObjectDiscovery",
              "- RubrikAnomalyAnalysis",
              "- RubrikFilesetRansomwareDiscovery",
              "- RubrikRansomwareDiscoveryAndFileRecovery",
              "- RubrikRansomwareDiscoveryAndVMRecovery",
              "- RubrikFileObjectContextAnalysis"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Click the Microsoft Sentinel connection resource",
              "2. Click edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Configurations in Microsoft Sentinel**",
              "1. In Microsoft Sentinel, analytical rules should be configured to trigger an incident. An incident should have the *ClusterId* - custom entity that contains clusterId of an event generated in rubrik, *ObjectId* - custom entity that contains objectId of an event generated in rubrik, *ObjectType* - custom entity that contains objectType of an event generated in rubrik, *ObjectName* -custom entity that contains objectName of an event generated in rubrik . It can be obtained from the corresponding field in Rubrik Anomaly Event logs. Check the [documentation](https://docs.microsoft.com/azure/sentinel/surface-custom-details-in-alerts) to learn more about adding custom entities to incidents.",
              "2. Configure the automation rules to trigger the playbook."
            ],
            "lastUpdateTime": "2024-02-21T10:23:09.173Z",
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "Anomaly",
              "Incident",
              "Rubrik"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId3')]",
        "contentKind": "Playbook",
        "displayName": "RubrikAnomalyIncidentResponse",
        "contentProductId": "[variables('_playbookcontentProductId3')]",
        "id": "[variables('_playbookcontentProductId3')]",
        "version": "[variables('playbookVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikDataObjectDiscovery Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion4')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikDataObjectDiscovery",
              "type": "string"
            },
            "Rubrik Connector name": {
              "defaultValue": "RubrikCustomConnector",
              "type": "String",
              "metadata": {
                "description": "Rubrik Custom Connector name"
              }
            },
            "keyvaultName": {
              "defaultValue": "RubrikSentinelKeyVault",
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            }
          },
          "variables": {
            "RubrikcustomconnectorConnectionName": "[[concat('Rubrikcustomconnector-', parameters('PlaybookName'))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "BaseUrl": {
                              "type": "string"
                            },
                            "ObjectId": {
                              "type": "string"
                            },
                            "ObjectName": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Authentication_2": {
                      "runAfter": {
                        "ClientSecret": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "client_id": "@body('ClientId')?['value']",
                          "client_secret": "@body('ClientSecret')?['value']"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/api/client_token"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "ClientId": {
                      "runAfter": {
                        "Initialize_error_message_variable_for_vm": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "ClientSecret": {
                      "runAfter": {
                        "ClientId": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Initialize_Object_Name": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectName",
                            "type": "string",
                            "value": "@{triggerBody()?['ObjectName']}"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_1_File": {
                      "runAfter": {
                        "access_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckConditionFile1",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_1_Snapshot": {
                      "runAfter": {
                        "Initialize_check_condition_-_4_VM": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckCondition9",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_1_VM": {
                      "runAfter": {
                        "Initialize_check_condition_-_4_File": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckCondition5",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_2_File": {
                      "runAfter": {
                        "Initialize_check_condition_-_1_File": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckConditionFile2",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_2_Snapshot": {
                      "runAfter": {
                        "Initialize_check_condition_-_1_Snapshot": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckCondition10",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_2_VM": {
                      "runAfter": {
                        "Initialize_check_condition_-_1_VM": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckCondition6",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_3_File": {
                      "runAfter": {
                        "Initialize_check_condition_-_2_File": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckConditionFile3",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_3_Snapshot": {
                      "runAfter": {
                        "Initialize_check_condition_-_2_Snapshot": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckCondition11",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_3_VM": {
                      "runAfter": {
                        "Initialize_check_condition_-_2_VM": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckCondition7",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_4_File": {
                      "runAfter": {
                        "Initialize_check_condition_-_3_File": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckConditionFile4",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_check_condition_-_4_VM": {
                      "runAfter": {
                        "Initialize_check_condition_-_3_VM": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CheckCondition8",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_error_message_variable_for_file": {
                      "runAfter": {
                        "Initialize_variable_for_general_error_message": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ErrorMessageFile",
                            "type": "string",
                            "value": "No Errors"
                          }
                        ]
                      }
                    },
                    "Initialize_error_message_variable_for_vm": {
                      "runAfter": {
                        "Initialize_error_message_variable_for_file": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ErrorMessageVm",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_terminate_variable_for_File": {
                      "runAfter": {
                        "Initialize_check_condition_-_3_Snapshot": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "terminate",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_terminate_variable_for_Snapshot": {
                      "runAfter": {
                        "Initialize_terminate_variable_for_VM": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "terminateFileset",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_terminate_variable_for_VM": {
                      "runAfter": {
                        "Initialize_terminate_variable_for_File": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "terminateVM",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_Object_Id": {
                      "runAfter": {
                        "Initialize_Object_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectId",
                            "type": "string",
                            "value": "@{triggerBody()?['ObjectId']}"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_for_general_error_message": {
                      "runAfter": {
                        "Initialize_variable_Object_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ErrorMessage",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Is_Authentication_Failed": {
                      "actions": {
                        "Response_if_status_code_is_NOT_200": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "@body('Authentication_2')?['message']",
                            "statusCode": "@outputs('Authentication_2')['statusCode']"
                          }
                        },
                        "auth_failed": {
                          "runAfter": {
                            "Response_if_status_code_is_NOT_200": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('Authentication_2')['statusCode']}",
                              "message": "@{body('Authentication_2')?['message']}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Authentication_2": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@outputs('Authentication_2')['statusCode']",
                                200
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Is_there_an_Object_Name": {
                      "actions": {
                        "Check_for_effective_Sla_domain_Id_is_empty_or_not": {
                          "actions": {
                            "Check_for_effective_Sla_domain_Id": {
                              "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                              "actions": {
                                "Condition_7": {
                                  "actions": {
                                    "Set_variable_16": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CheckConditionFile4",
                                        "value": "@true"
                                      }
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_variable_17": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "CheckConditionFile4",
                                          "value": "@{false}"
                                        }
                                      },
                                      "Set_variable_18": {
                                        "runAfter": {
                                          "Set_variable_17": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "terminate",
                                          "value": "@false"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@items('check_for_effective_Sla_domain_Id')?['effectiveSlaDomain']?['id']",
                                            "@null"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Check_for_physical_Path_name_": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('terminate'), true)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        },
                        "Check_for_effective_Sla_domain_Id_is_empty_or_not_VM": {
                          "actions": {
                            "For_each_7": {
                              "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                              "actions": {
                                "Condition_13": {
                                  "actions": {
                                    "Set_variable_28": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CheckCondition8",
                                        "value": "@true"
                                      }
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_variable_29": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "CheckCondition8",
                                          "value": "@false"
                                        }
                                      },
                                      "Set_variable_30": {
                                        "runAfter": {
                                          "Set_variable_29": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "terminateVM",
                                          "value": "@false"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@items('For_each_7')?['effectiveSlaDomain']?['id']",
                                            "@null"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Check_for_physical_Path_name_VM": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('terminateVM'), true)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        },
                        "Check_for_id_and_name_which_has_File_data": {
                          "actions": {
                            "Check_for_id_and_name": {
                              "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['edges']",
                              "actions": {
                                "Condition_3": {
                                  "actions": {
                                    "Condition_4": {
                                      "actions": {
                                        "Set_variable_10": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "CheckConditionFile2",
                                            "value": "@true"
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_variable_11": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "CheckConditionFile2",
                                              "value": "@false"
                                            }
                                          },
                                          "Set_variable_12": {
                                            "runAfter": {
                                              "Set_variable_11": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "terminate",
                                              "value": "@false"
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "not": {
                                              "equals": [
                                                "@items('Check_for_id_and_name')?['node']?['id']",
                                                "@null"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "equals": [
                                                "@items('Check_for_id_and_name')?['node']?['name']",
                                                "@null"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_variable_44": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "CheckConditionFile2",
                                          "value": "@false"
                                        }
                                      },
                                      "Set_variable_45": {
                                        "runAfter": {
                                          "Set_variable_44": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "terminate",
                                          "value": "@false"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@items('Check_for_id_and_name')?['node']?['objectType']",
                                          "File"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Check_snapshotId_is_empty_or_not": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('terminate'), true)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        },
                        "Check_for_id_and_name_which_has_VM_data": {
                          "actions": {
                            "For_each_4": {
                              "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['edges']",
                              "actions": {
                                "Condition_9": {
                                  "actions": {
                                    "Condition_10": {
                                      "actions": {
                                        "Set_variable_22": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "CheckCondition6",
                                            "value": "@true"
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_variable_23": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "CheckCondition6",
                                              "value": "@false"
                                            }
                                          },
                                          "Set_variable_24": {
                                            "runAfter": {
                                              "Set_variable_23": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "terminateVM",
                                              "value": "@false"
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "not": {
                                              "equals": [
                                                "@items('For_each_4')?['node']?['id']",
                                                "@null"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "equals": [
                                                "@items('For_each_4')?['node']?['name']",
                                                "@null"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@items('For_each_4')?['node']?['objectType']",
                                          "VM"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Check_snapshotId_is_empty_or_not_in_VM": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('terminateVM'), true)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        },
                        "Check_for_physical_Path_name_": {
                          "actions": {
                            "For_each": {
                              "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                              "actions": {
                                "For_each_2": {
                                  "foreach": "@items('For_each')?['physicalPath']",
                                  "actions": {
                                    "Condition_5": {
                                      "actions": {
                                        "Condition_6": {
                                          "actions": {
                                            "Set_variable_13": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "CheckConditionFile3",
                                                "value": "@true"
                                              }
                                            }
                                          },
                                          "else": {
                                            "actions": {
                                              "Set_variable_14": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "CheckConditionFile3",
                                                  "value": "@false"
                                                }
                                              },
                                              "Set_variable_15": {
                                                "runAfter": {
                                                  "Set_variable_14": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "terminate",
                                                  "value": "@true"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "not": {
                                                  "equals": [
                                                    "@items('For_each_2')?['name']",
                                                    "@null"
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@items('For_each_2')?['objectType']",
                                              "VSphereHost"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Check_for_id_and_name_which_has_File_data": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('terminate'), false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        },
                        "Check_for_physical_Path_name_VM": {
                          "actions": {
                            "For_each_5": {
                              "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                              "actions": {
                                "For_each_6": {
                                  "foreach": "@items('For_each_5')?['physicalPath']",
                                  "actions": {
                                    "Condition_11": {
                                      "actions": {
                                        "Condition_12": {
                                          "actions": {
                                            "Set_variable_25": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "CheckCondition7",
                                                "value": "@true"
                                              }
                                            }
                                          },
                                          "else": {
                                            "actions": {
                                              "Set_variable_26": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "CheckCondition7",
                                                  "value": "@false"
                                                }
                                              },
                                              "Set_variable_27": {
                                                "runAfter": {
                                                  "Set_variable_26": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "terminateVM",
                                                  "value": "@true"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "not": {
                                                  "equals": [
                                                    "@items('For_each_6')?['name']",
                                                    "@null"
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@items('For_each_6')?['objectType']",
                                              "VSphereVCenter"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Check_for_id_and_name_which_has_VM_data": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('terminateVM'), false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        },
                        "Check_snapshotId_is_empty_or_not": {
                          "actions": {
                            "check_snapshotId": {
                              "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                              "actions": {
                                "Condition": {
                                  "actions": {
                                    "Set_variable_5": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CheckConditionFile1",
                                        "value": "@true"
                                      }
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_variable_8": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "CheckConditionFile1",
                                          "value": "@false"
                                        }
                                      },
                                      "Set_variable_9": {
                                        "runAfter": {
                                          "Set_variable_8": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "terminate",
                                          "value": "@true"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@items('check_snapshotId')?['snapshotDistribution']?['id']",
                                            "@null"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "List_the_snapshots_for_all_objects_gets_status_code_200_or_not": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('terminate'), false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        },
                        "Check_snapshotId_is_empty_or_not_in_VM": {
                          "actions": {
                            "For_each_3": {
                              "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                              "actions": {
                                "Condition_8": {
                                  "actions": {
                                    "Set_variable_19": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CheckCondition5",
                                        "value": "@true"
                                      }
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_variable_20": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "CheckCondition5",
                                          "value": "@false"
                                        }
                                      },
                                      "Set_variable_21": {
                                        "runAfter": {
                                          "Set_variable_20": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "terminateVM",
                                          "value": "@true"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@items('For_each_3')?['snapshotDistribution']?['id']",
                                            "@null"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "List_the_snapshots_for_all_objects_gets_status_code_200_or_not": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('terminateVM'), false)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        },
                        "Is_Fileset_data_returned": {
                          "runAfter": {
                            "Check_for_effective_Sla_domain_Id_is_empty_or_not": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_variable_40": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessageFile",
                                  "value": "No data for this type was obtained"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@variables('CheckConditionFile1')",
                                    "@false"
                                  ]
                                }
                              },
                              {
                                "not": {
                                  "equals": [
                                    "@variables('CheckConditionFile2')",
                                    "@false"
                                  ]
                                }
                              },
                              {
                                "not": {
                                  "equals": [
                                    "@variables('CheckConditionFile3')",
                                    "@false"
                                  ]
                                }
                              },
                              {
                                "not": {
                                  "equals": [
                                    "@variables('CheckConditionFile4')",
                                    "@false"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Is_VM_data_returned": {
                          "runAfter": {
                            "Check_for_effective_Sla_domain_Id_is_empty_or_not_VM": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_variable_41": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessageVm",
                                  "value": "No data for this type was obtained"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@variables('CheckCondition5')",
                                  "@true"
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('CheckCondition6')",
                                  "@true"
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('CheckCondition7')",
                                  "@true"
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('CheckCondition8')",
                                  "@true"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "List_the_snapshots_for_all_objects_2": {
                          "runAfter": {
                            "Search_the_global_objects_gets_status_code_200_or_not": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query SnapshotsListSingleQuery($workloadId: String!, $first: Int, $after: String, $snapshotFilter: [SnapshotQueryFilterInput!], $sortBy: SnapshotQuerySortByField, $sortOrder: SortOrder, $timeRange: TimeRangeInput) {\r\n  snapshotsListConnection: snapshotOfASnappableConnection(\r\n    workloadId: $workloadId\r\n    first: $first\r\n    after: $after\r\n    snapshotFilter: $snapshotFilter\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n    timeRange: $timeRange\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        date\r\n        expirationDate\r\n        isOnDemandSnapshot\r\n        ... on CdmSnapshot {\r\n          cdmVersion\r\n          isDownloadedSnapshot\r\n          cluster {\r\n            id\r\n            name\r\n            version\r\n            status\r\n          }\r\n          pendingSnapshotDeletion {\r\n            id: snapshotFid\r\n            status\r\n          }\r\n          slaDomain {\r\n            name\r\n            ... on ClusterSlaDomain {\r\n              fid\r\n              cluster {\r\n                id\r\n                name\r\n              }\r\n            }\r\n            ... on GlobalSlaReply {\r\n              id\r\n            }\r\n          }\r\n          pendingSla {\r\n            id\r\n            name\r\n          }\r\n          snapshotRetentionInfo {\r\n            archivalInfos {\r\n              name\r\n              isExpirationDateCalculated\r\n              expirationTime\r\n            }\r\n            localInfo {\r\n              name\r\n              isExpirationDateCalculated\r\n              expirationTime\r\n            }\r\n            replicationInfos {\r\n              name\r\n              isExpirationDateCalculated\r\n              expirationTime\r\n            }\r\n          }\r\n          sapHanaAppMetadata {\r\n            backupId\r\n            backupPrefix\r\n            snapshotType\r\n            files {\r\n              backupFileSizeInBytes\r\n            }\r\n          }\r\n          legalHoldInfo {\r\n            shouldHoldInPlace\r\n          }\r\n        }\r\n        ... on PolarisSnapshot {\r\n          isDownloadedSnapshot\r\n          isReplica\r\n          isArchivalCopy\r\n          slaDomain {\r\n            name\r\n            ... on ClusterSlaDomain {\r\n              fid\r\n              cluster {\r\n                id\r\n                name\r\n              }\r\n            }\r\n            ... on GlobalSlaReply {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n",
                              "variables": {
                                "snapshotFilter": [
                                  {
                                    "field": "SNAPSHOT_TYPE",
                                    "typeFilters": [
                                      "ON_DEMAND"
                                    ]
                                  }
                                ],
                                "sortBy": "CREATION_TIME",
                                "sortOrder": "DESC",
                                "timeRange": {
                                  "end": "2022-12-05",
                                  "start": "2022-11-21"
                                },
                                "workloadId": "@{triggerBody()?['ObjectId']}"
                              }
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('access_token')}",
                              "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "path": "/api/graphql",
                            "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                          }
                        },
                        "List_the_snapshots_for_all_objects_gets_status_code_200_or_not": {
                          "actions": {
                            "check_for_error_in_response": {
                              "actions": {
                                "Response_if_has_error_in_response_": {
                                  "runAfter": {
                                    "Set_error_message_if_has_error_in_response_2": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": "@variables('ErrorMessage')",
                                    "statusCode": 200
                                  }
                                },
                                "Set_error_message_if_has_error_in_response_2": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "ErrorMessage",
                                    "value": "@{body('List_the_snapshots_for_all_objects_2')?['errors'][0]?['message']}"
                                  }
                                },
                                "Terminate_if_has_error_in_response_": {
                                  "runAfter": {
                                    "Response_if_has_error_in_response_": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "code": "@{outputs('List_the_snapshots_for_all_objects_2')?['statusCode']}",
                                      "message": "@{body('List_the_snapshots_for_all_objects_2')?['errors'][0]?['message']}"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('List_the_snapshots_for_all_objects_2')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "List_the_snapshots_for_all_objects_2": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Response_4_if_status_code_is_NOT_200_": {
                                "runAfter": {
                                  "Set_error_message3_if_status_code_is_NOT_200_": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": "@body('List_the_snapshots_for_all_objects_2')?['message']",
                                  "statusCode": "@outputs('List_the_snapshots_for_all_objects_2')['statusCode']"
                                }
                              },
                              "Set_error_message3_if_status_code_is_NOT_200_": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessage",
                                  "value": "@{body('List_the_snapshots_for_all_objects_2')?['message']}"
                                }
                              },
                              "Terminate_If_status_code_is_NOT_200_": {
                                "runAfter": {
                                  "Response_4_if_status_code_is_NOT_200_": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('List_the_snapshots_for_all_objects_2')?['statusCode']}",
                                    "message": "@{body('List_the_snapshots_for_all_objects_2')?['message']}"
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('List_the_snapshots_for_all_objects_2')?['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Response_if_successed": {
                          "runAfter": {
                            "Is_Fileset_data_returned": [
                              "Succeeded"
                            ],
                            "Is_VM_data_returned": [
                              "Succeeded"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": {
                              "File-data-message": "@{variables('ErrorMessageFile')}",
                              "Status": "Successful",
                              "Vm-data-message": "@{variables('ErrorMessageVm')}",
                              "general-message": "@{variables('ErrorMessage')}"
                            },
                            "statusCode": 200
                          }
                        },
                        "Search_the_global_objects": {
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query GlobalSearchResults($first: Int, $after: String, $last: Int, $before: String, $sortBy: HierarchySortByField, $sortOrder: SortOrder, $filter: [Filter!]) {\r\n  globalSearchResults(first: $first, after: $after, last: $last, before: $before, sortBy: $sortBy, sortOrder: $sortOrder, filter: $filter) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        id\r\n        name\r\n        objectType\r\n        slaAssignment\r\n        slaPauseStatus\r\n        numWorkloadDescendants\r\n      }\r\n    }\r\n    nodes {\r\n      id\r\n      name\r\n      objectType\r\n      slaAssignment\r\n      effectiveSlaDomain {\r\n        id\r\n        name\r\n        version\r\n      }\r\n      slaPauseStatus\r\n      snapshotDistribution {\r\n        totalCount\r\n        scheduledCount\r\n        onDemandCount\r\n        retrievedCount\r\n        id\r\n      }\r\n      effectiveRetentionSlaDomain {\r\n        id\r\n        name\r\n        version\r\n      }\r\n      configuredSlaDomain {\r\n        id\r\n        name\r\n        version\r\n      }\r\n      effectiveSlaSourceObject {\r\n        fid\r\n        name\r\n        objectType\r\n      }\r\n      logicalPath {\r\n        fid\r\n        name\r\n        objectType\r\n      }\r\n      physicalPath {\r\n        fid\r\n        name\r\n        objectType\r\n      }\r\n      numWorkloadDescendants\r\n    }\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasPreviousPage\r\n      hasNextPage\r\n    }\r\n    count\r\n  }\r\n}",
                              "variables": {
                                "filter": [
                                  {
                                    "field": "NAME",
                                    "texts": [
                                      "@{triggerBody()?['ObjectName']}"
                                    ]
                                  }
                                ],
                                "first": 10,
                                "sortBy": "ID",
                                "sortOrder": "ASC"
                              }
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('access_token')}",
                              "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "path": "/api/graphql",
                            "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                          }
                        },
                        "Search_the_global_objects_gets_status_code_200_or_not": {
                          "actions": {
                            "Search_the_global_objects_API_has_error_in_response": {
                              "actions": {
                                "Response_if_has_error_in_response": {
                                  "runAfter": {
                                    "Set_error_message_if_has_error_in_response": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": "@variables('ErrorMessage')",
                                    "statusCode": 200
                                  }
                                },
                                "Set_error_message_if_has_error_in_response": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "ErrorMessage",
                                    "value": "@{body('Search_the_global_objects')?['errors'][0]?['message']}"
                                  }
                                },
                                "Terminate_if_has_error_in_response": {
                                  "runAfter": {
                                    "Response_if_has_error_in_response": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "code": "@{outputs('Search_the_global_objects')?['statusCode']}",
                                      "message": "@{body('Search_the_global_objects')?['errors'][0]?['message']}"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Parse_Search_the_global_objects": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('Search_the_global_objects')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "globalSearchResults": {
                                                "properties": {
                                                  "count": {
                                                    "type": "integer"
                                                  },
                                                  "edges": {
                                                    "items": {
                                                      "properties": {
                                                        "cursor": {
                                                          "type": "string"
                                                        },
                                                        "node": {
                                                          "properties": {
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "numWorkloadDescendants": {
                                                              "type": "integer"
                                                            },
                                                            "objectType": {
                                                              "type": "string"
                                                            },
                                                            "slaAssignment": {
                                                              "type": "string"
                                                            },
                                                            "slaPauseStatus": {
                                                              "type": "boolean"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "required": [
                                                        "cursor",
                                                        "node"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "nodes": {
                                                    "items": {
                                                      "properties": {
                                                        "configuredSlaDomain": {
                                                          "properties": {
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        },
                                                        "effectiveSlaDomain": {
                                                          "properties": {
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        },
                                                        "effectiveSlaSourceObject": {
                                                          "properties": {
                                                            "fid": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "objectType": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "logicalPath": {
                                                          "items": {
                                                            "properties": {
                                                              "fid": {
                                                                "type": "string"
                                                              },
                                                              "name": {
                                                                "type": "string"
                                                              },
                                                              "objectType": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "required": [
                                                              "fid",
                                                              "name",
                                                              "objectType"
                                                            ],
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          },
                                                          "type": "array"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "numWorkloadDescendants": {
                                                          "type": "integer"
                                                        },
                                                        "objectType": {
                                                          "type": "string"
                                                        },
                                                        "physicalPath": {
                                                          "items": {
                                                            "properties": {
                                                              "fid": {
                                                                "type": "string"
                                                              },
                                                              "name": {
                                                                "type": "string"
                                                              },
                                                              "objectType": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "required": [
                                                              "fid",
                                                              "name",
                                                              "objectType"
                                                            ],
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          },
                                                          "type": "array"
                                                        },
                                                        "slaAssignment": {
                                                          "type": "string"
                                                        },
                                                        "slaPauseStatus": {
                                                          "type": "boolean"
                                                        },
                                                        "snapshotDistribution": {
                                                          "properties": {
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "onDemandCount": {
                                                              "type": "integer"
                                                            },
                                                            "retrievedCount": {
                                                              "type": "integer"
                                                            },
                                                            "scheduledCount": {
                                                              "type": "integer"
                                                            },
                                                            "totalCount": {
                                                              "type": "integer"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        }
                                                      },
                                                      "required": [
                                                        "id",
                                                        "name",
                                                        "objectType",
                                                        "slaAssignment",
                                                        "effectiveSlaDomain",
                                                        "slaPauseStatus",
                                                        "snapshotDistribution",
                                                        "effectiveRetentionSlaDomain",
                                                        "configuredSlaDomain",
                                                        "effectiveSlaSourceObject",
                                                        "logicalPath",
                                                        "physicalPath",
                                                        "numWorkloadDescendants"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pageInfo": {
                                                    "properties": {
                                                      "endCursor": {
                                                        "type": "string"
                                                      },
                                                      "hasNextPage": {
                                                        "type": "boolean"
                                                      },
                                                      "hasPreviousPage": {
                                                        "type": "boolean"
                                                      },
                                                      "startCursor": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('Search_the_global_objects')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Search_the_global_objects": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Response_if_status_code_is_NOT_200_2": {
                                "runAfter": {
                                  "Set_error_message_if_status_code_is_NOT_200_2": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": "@body('Search_the_global_objects')?['message']",
                                  "statusCode": "@outputs('Search_the_global_objects')['statusCode']"
                                }
                              },
                              "Set_error_message_if_status_code_is_NOT_200_2": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessage",
                                  "value": "@{body('Search_the_global_objects')?['message']}"
                                }
                              },
                              "Terminate_if_status_code_is_NOT_200_2": {
                                "runAfter": {
                                  "Response_if_status_code_is_NOT_200_2": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('Search_the_global_objects')?['statusCode']}",
                                    "message": "@{body('Search_the_global_objects')?['message']}"
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Search_the_global_objects')?['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Initialize_terminate_variable_for_Snapshot": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Is_object_ID_provided": {
                            "actions": {
                              "Check_Date_is_empty_or_not_in_Snapshotdata": {
                                "actions": {
                                  "For_each_10": {
                                    "foreach": "@body('Response_of_List_the_snapshots_for_all_objects')?['data']?['snapshotsListConnection']?['edges']",
                                    "actions": {
                                      "Condition_16": {
                                        "actions": {
                                          "Set_variable_37": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "CheckCondition11",
                                              "value": "@true"
                                            }
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Set_variable_38": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "CheckCondition11",
                                                "value": "@false"
                                              }
                                            },
                                            "Set_variable_39": {
                                              "runAfter": {
                                                "Set_variable_38": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "terminateFileset",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "not": {
                                                "equals": [
                                                  "@items('For_each_10')?['node']?['date']",
                                                  "@null"
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "type": "Foreach"
                                  }
                                },
                                "runAfter": {
                                  "Check_SnapshotId_Id_is_empty_or_not_in_Snapshotdata": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": "@equals(variables('terminateFileset'), false)",
                                "limit": {
                                  "count": 60,
                                  "timeout": "PT1H"
                                },
                                "type": "Until"
                              },
                              "Check_SnapshotId_Id_is_empty_or_not_in_Snapshotdata": {
                                "actions": {
                                  "For_each_9": {
                                    "foreach": "@body('Response_of_List_the_snapshots_for_all_objects')?['data']?['snapshotsListConnection']?['edges']",
                                    "actions": {
                                      "Condition_15": {
                                        "actions": {
                                          "Set_variable_34": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "CheckCondition10",
                                              "value": "@true"
                                            }
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Set_variable_35": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "CheckCondition10",
                                                "value": "@false"
                                              }
                                            },
                                            "Set_variable_36": {
                                              "runAfter": {
                                                "Set_variable_35": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "terminateFileset",
                                                "value": "@false"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "not": {
                                                "equals": [
                                                  "@items('For_each_9')?['node']?['pendingSnapshotDeletion']",
                                                  "@null"
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "type": "Foreach"
                                  }
                                },
                                "runAfter": {
                                  "Check_object_Id_is_empty_or_not_in_Snapshotdata": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": "@equals(variables('terminateFileset'), true)",
                                "limit": {
                                  "count": 60,
                                  "timeout": "PT1H"
                                },
                                "type": "Until"
                              },
                              "Check_object_Id_is_empty_or_not_in_Snapshotdata": {
                                "actions": {
                                  "For_each_8": {
                                    "foreach": "@body('Response_of_List_the_snapshots_for_all_objects')?['data']?['snapshotsListConnection']?['edges']",
                                    "actions": {
                                      "Condition_14": {
                                        "actions": {
                                          "Set_variable_31": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "CheckCondition9",
                                              "value": "@true"
                                            }
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Set_variable_32": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "CheckCondition9",
                                                "value": "@false"
                                              }
                                            },
                                            "Set_variable_33": {
                                              "runAfter": {
                                                "Set_variable_32": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "terminateFileset",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "not": {
                                                "equals": [
                                                  "@items('For_each_8')?['node']?['id']",
                                                  "@null"
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "type": "Foreach"
                                  }
                                },
                                "runAfter": {
                                  "Response_of_List_the_snapshots_for_all_objects": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": "@equals(variables('terminateFileset'), false)",
                                "limit": {
                                  "count": 60,
                                  "timeout": "PT1H"
                                },
                                "type": "Until"
                              },
                              "Is_Snapshot_data_returned": {
                                "runAfter": {
                                  "Check_Date_is_empty_or_not_in_Snapshotdata": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_variable_43": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "ErrorMessage",
                                        "value": "No data for this type was obtained"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "or": [
                                    {
                                      "equals": [
                                        "@variables('CheckCondition9')",
                                        "@true"
                                      ]
                                    },
                                    {
                                      "equals": [
                                        "@variables('CheckCondition10')",
                                        "@true"
                                      ]
                                    },
                                    {
                                      "equals": [
                                        "@variables('CheckCondition11')",
                                        "@true"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "List_the_snapshots_for_all_objects": {
                                "type": "Http",
                                "inputs": {
                                  "body": {
                                    "query": "query SnapshotsListSingleQuery($workloadId: String!, $first: Int, $after: String, $snapshotFilter: [SnapshotQueryFilterInput!], $sortBy: SnapshotQuerySortByField, $sortOrder: SortOrder, $timeRange: TimeRangeInput) {\r\n  snapshotsListConnection: snapshotOfASnappableConnection(\r\n    workloadId: $workloadId\r\n    first: $first\r\n    after: $after\r\n    snapshotFilter: $snapshotFilter\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n    timeRange: $timeRange\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        date\r\n        expirationDate\r\n        isOnDemandSnapshot\r\n        ... on CdmSnapshot {\r\n          cdmVersion\r\n          isDownloadedSnapshot\r\n          cluster {\r\n            id\r\n            name\r\n            version\r\n            status\r\n          }\r\n          pendingSnapshotDeletion {\r\n            id: snapshotFid\r\n            status\r\n          }\r\n          slaDomain {\r\n            name\r\n            ... on ClusterSlaDomain {\r\n              fid\r\n              cluster {\r\n                id\r\n                name\r\n              }\r\n            }\r\n            ... on GlobalSla {\r\n              id\r\n            }\r\n          }\r\n          pendingSla {\r\n            id\r\n            name\r\n          }\r\n          snapshotRetentionInfo {\r\n            archivalInfos {\r\n              name\r\n              isExpirationDateCalculated\r\n              expirationTime\r\n            }\r\n            localInfo {\r\n              name\r\n              isExpirationDateCalculated\r\n              expirationTime\r\n            }\r\n            replicationInfos {\r\n              name\r\n              isExpirationDateCalculated\r\n              expirationTime\r\n            }\r\n          }\r\n          sapHanaAppMetadata {\r\n            backupId\r\n            backupPrefix\r\n            snapshotType\r\n            files {\r\n              backupFileSizeInBytes\r\n            }\r\n          }\r\n          legalHoldInfo {\r\n            shouldHoldInPlace\r\n          }\r\n        }\r\n        ... on PolarisSnapshot {\r\n          isDownloadedSnapshot\r\n          isReplica\r\n          isArchivalCopy\r\n          slaDomain {\r\n            name\r\n            ... on ClusterSlaDomain {\r\n              fid\r\n              cluster {\r\n                id\r\n                name\r\n              }\r\n            }\r\n            ... on GlobalSla {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n",
                                    "variables": {
                                      "snapshotFilter": [
                                        {
                                          "field": "SNAPSHOT_TYPE",
                                          "typeFilters": [
                                            "ON_DEMAND"
                                          ]
                                        }
                                      ],
                                      "sortBy": "CREATION_TIME",
                                      "sortOrder": "DESC",
                                      "timeRange": {
                                        "end": "2022-12-05",
                                        "start": "2022-11-21"
                                      },
                                      "workloadId": "@{triggerBody()?['ObjectId']}"
                                    }
                                  },
                                  "headers": {
                                    "Authorization": "Bearer @{variables('access_token')}",
                                    "Content-Type": "application/json"
                                  },
                                  "method": "POST",
                                  "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                }
                              },
                              "Response_2": {
                                "runAfter": {
                                  "Is_Snapshot_data_returned": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": {
                                    "error": "@variables('ErrorMessage')",
                                    "status": "Successed"
                                  },
                                  "statusCode": 200
                                }
                              },
                              "Response_of_List_the_snapshots_for_all_objects": {
                                "runAfter": {
                                  "check_List_the_snapshots_for_all_objects_gets_200_or_not": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('List_the_snapshots_for_all_objects')",
                                  "schema": {
                                    "properties": {
                                      "data": {
                                        "properties": {
                                          "snapshotsListConnection": {
                                            "properties": {
                                              "edges": {
                                                "items": {
                                                  "properties": {
                                                    "node": {
                                                      "properties": {
                                                        "cdmVersion": {
                                                          "type": "string"
                                                        },
                                                        "cluster": {
                                                          "properties": {
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "status": {
                                                              "type": "string"
                                                            },
                                                            "version": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "date": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "isDownloadedSnapshot": {
                                                          "type": "boolean"
                                                        },
                                                        "isOnDemandSnapshot": {
                                                          "type": "boolean"
                                                        },
                                                        "slaDomain": {
                                                          "properties": {
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "node"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "pageInfo": {
                                                "properties": {
                                                  "endCursor": {
                                                    "type": "string"
                                                  },
                                                  "hasNextPage": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              },
                              "check_List_the_snapshots_for_all_objects_gets_200_or_not": {
                                "actions": {
                                  "Check_if_response_contains_error_or_not": {
                                    "actions": {
                                      "Response_8": {
                                        "runAfter": {
                                          "Set_error_message_if_has_error_in_response_3": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Response",
                                        "kind": "Http",
                                        "inputs": {
                                          "body": "@body('List_the_snapshots_for_all_objects')?['errors'][0]?['message']",
                                          "statusCode": 200
                                        }
                                      },
                                      "Set_error_message_if_has_error_in_response_3": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "ErrorMessage",
                                          "value": "@{body('List_the_snapshots_for_all_objects')?['errors'][0]?['message']}"
                                        }
                                      },
                                      "Terminate_6": {
                                        "runAfter": {
                                          "Response_8": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Terminate",
                                        "inputs": {
                                          "runError": {
                                            "code": "@{outputs('List_the_snapshots_for_all_objects')?['statusCode']}",
                                            "message": "@{body('List_the_snapshots_for_all_objects')?['errors'][0]?['message']}"
                                          },
                                          "runStatus": "Failed"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "contains": [
                                            "@body('List_the_snapshots_for_all_objects')",
                                            "errors"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "List_the_snapshots_for_all_objects": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Response_7": {
                                      "runAfter": {
                                        "Set_error_message_if_status_code_is_NOT_200_5": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Response",
                                      "kind": "Http",
                                      "inputs": {
                                        "body": "@body('List_the_snapshots_for_all_objects')?['message']",
                                        "statusCode": "@outputs('List_the_snapshots_for_all_objects')['statusCode']"
                                      }
                                    },
                                    "Set_error_message_if_status_code_is_NOT_200_5": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "ErrorMessage",
                                        "value": "@{body('List_the_snapshots_for_all_objects')?['message']}"
                                      }
                                    },
                                    "Terminate": {
                                      "runAfter": {
                                        "Response_7": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Terminate",
                                      "inputs": {
                                        "runError": {
                                          "code": "@{outputs('List_the_snapshots_for_all_objects')?['statusCode']}",
                                          "message": "@{body('List_the_snapshots_for_all_objects')?['message']}"
                                        },
                                        "runStatus": "Failed"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('List_the_snapshots_for_all_objects')?['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "else": {
                              "actions": {
                                "Response": {
                                  "runAfter": {
                                    "Set_error_message_if_status_code_is_NOT_200_4": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": {
                                      "error": "@variables('ErrorMessage')",
                                      "status": "Successed"
                                    },
                                    "statusCode": 200
                                  }
                                },
                                "Set_error_message_if_status_code_is_NOT_200_4": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "ErrorMessage",
                                    "value": "Either object_name or object_id input must be provided."
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "not": {
                                    "equals": [
                                      "@empty(triggerBody()?['ObjectId'])",
                                      "@true"
                                    ]
                                  }
                                }
                              ]
                            },
                            "type": "If"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@empty(triggerBody()?['ObjectName'])",
                                "@true"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "access_token": {
                      "runAfter": {
                        "Is_Authentication_Failed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token",
                            "type": "string",
                            "value": "@{body('Authentication_2')?['access_token']}"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "RubrikCustomConnector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                        "connectionName": "[[variables('RubrikcustomconnectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
                      },
                      "keyvault_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikDataObjectDiscovery",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('RubrikcustomconnectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('RubrikcustomconnectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[parameters('tenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[[parameters('keyvaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId4'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId4')]",
                "contentId": "[variables('_playbookContentId4')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "LogicAppsCustomConnector",
                      "contentId": "[variables('_RubrikCustomConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Data Object Discovery",
            "description": "This playbook queries Rubrik Security Cloud to enrich the incoming event with additional information from Rubrik about the object and it's snapshots that the event refers to.",
            "prerequisites": [
              "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
              "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "3. Rubrik custom connector needs to be deployed prior to the deployment of this playbook, in the same resource group and region. Relevant instructions can be found in the connector doc page.",
              "4. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with unique name",
              "b. Go to KeyVault -> secrets -> Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Click the Custom Connector connection resource",
              "2. Click edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections"
            ],
            "lastUpdateTime": "2022-01-20T00:00:00Z",
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "Object",
              "Discovery",
              "Security",
              "Rubrik"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId4')]",
        "contentKind": "Playbook",
        "displayName": "RubrikDataObjectDiscovery",
        "contentProductId": "[variables('_playbookcontentProductId4')]",
        "id": "[variables('_playbookcontentProductId4')]",
        "version": "[variables('playbookVersion4')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikFilesetRansomwareDiscovery Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion5')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikFilesetRansomwareDiscovery",
              "type": "string"
            },
            "TeamsGroupId": {
              "defaultValue": "TeamsGroupIds",
              "type": "String",
              "metadata": {
                "description": "Id of the Teams Group where the adaptive card will be posted."
              }
            },
            "TeamsChannelId": {
              "defaultValue": "TeamsChannelId",
              "type": "String",
              "metadata": {
                "description": "Id of the Teams Channel where the adaptive card will be posted."
              }
            }
          },
          "variables": {
            "TeamsConnectionName": "[[concat('Teams-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "BaseUrl": {
                              "type": "string"
                            },
                            "ClusterId": {
                              "type": "string"
                            },
                            "IncidentTime": {
                              "type": "string"
                            },
                            "ObjectId": {
                              "type": "string"
                            },
                            "ObjectName": {
                              "type": "string"
                            },
                            "ObjectType": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Check_that_IOC_scan_has_no_error": {
                      "runAfter": {
                        "RubrikIOCScan": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Error_Response": {
                            "runAfter": {
                              "Set_IOC_Scan_Error_Status": [
                                "Succeeded"
                              ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": {
                                "error": "@{variables('Status')}"
                              },
                              "statusCode": 400
                            }
                          },
                          "Set_IOC_Scan_Error_Status": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Status",
                              "value": "Error in IOC Scan: @{body('RubrikIOCScan')?['error']}"
                            }
                          },
                          "Terminate": {
                            "runAfter": {
                              "Error_Response": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "message": "Error: @{variables('Status')}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(body('RubrikIOCScan')?['error'])",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Check_that_Polling_Timeout_is_less_than_or_equal_to_0_": {
                      "actions": {
                        "Set_default_value_for_polling_timeout": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "PollingTimeout",
                            "value": 720
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_polling_timeout": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "lessOrEquals": [
                              "@variables('PollingTimeout')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Collect_IOC_Data": {
                      "runAfter": {
                        "Is_object_type_not_a_Fileset": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"IOC Scan Data for Fileset Ransomware Discovery\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate IOC Scan.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\n\n{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nIncident Start Time = @{variables('IncidentTime')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC hash to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC hash to scan for\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC path to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC path to scan for\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule to scan for\",\n            \"isMultiline\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Start date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"Start date to initiate the IOC scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"End date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"End date to initiate the IOC scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling interval for IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip7\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"id\": \"Polling interval for IOC Scan\",\n            \"placeholder\": \"5\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling timeout for IOC Scan\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip8\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"label\": \"In minutes\",\n            \"id\": \"Polling timeout for IOC Scan\",\n            \"placeholder\": \"720\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule file URL to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip10\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule file URL to scan for\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to include in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip11\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to include in the IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exclude in the IOC Scan\",\n            \"wrap\": true,\n            \"separator\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip12\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exclude in the IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exempt in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exempt in the IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Scan Name\",\n            \"wrap\": true,\n            \"separator\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip15\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Scan Name\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                            "recipient": {
                              "channelId": "[[concat('', parameters('TeamsChannelId'))]",
                              "groupId": "[[concat('', parameters('TeamsGroupId'))]"
                            },
                            "updateMessage": "Response saved for IOC Scan-Fileset Discovery!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Initialize_Cluster_Id": {
                      "runAfter": {
                        "Initialize_Object_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClusterId",
                            "type": "string",
                            "value": "@triggerBody()?['ClusterId']"
                          }
                        ]
                      },
                      "description": "playbook input from incident"
                    },
                    "Initialize_IOCYaraRule": {
                      "runAfter": {
                        "Initialize_Cluster_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IOCYaraRule",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Incident_Time": {
                      "runAfter": {
                        "Initialize_Object_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentTime",
                            "type": "string",
                            "value": "@{triggerBody()?['IncidentTime']}"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Id": {
                      "runAfter": {
                        "Initialize_Object_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectId",
                            "type": "string",
                            "value": "@triggerBody()?['ObjectId']"
                          }
                        ]
                      },
                      "description": "playbook input from incident"
                    },
                    "Initialize_Object_Name": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectName",
                            "type": "string",
                            "value": "@{triggerBody()?['ObjectName']}"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Type": {
                      "runAfter": {
                        "Initialize_Incident_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectType",
                            "type": "string",
                            "value": "@triggerBody()?['ObjectType']"
                          }
                        ]
                      },
                      "description": "fetch from incident"
                    },
                    "Initialize_Status_for_IOC_scan": {
                      "runAfter": {
                        "Initialize_IOCYaraRule": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Status",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_polling_timeout": {
                      "runAfter": {
                        "Collect_IOC_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PollingTimeout",
                            "type": "integer",
                            "value": "@if(empty(body('Collect_IOC_Data')?['data']?['polling timeout ']),0,int(body('Collect_IOC_Data')?['data']?['polling timeout ']))"
                          }
                        ]
                      }
                    },
                    "Is_object_type_not_a_Fileset": {
                      "actions": {
                        "Error_for_not_a_Fileset_object": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Not a Fileset object"
                            },
                            "runStatus": "Failed"
                          }
                        },
                        "Error_response_for_not_a_Fileset_object": {
                          "runAfter": {
                            "Error_for_not_a_Fileset_object": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "Not a Fileset object",
                            "statusCode": 400
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Status_for_IOC_scan": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "contains": [
                                "@variables('ObjectType')",
                                "Fileset"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_JSON": {
                      "runAfter": {
                        "Check_that_IOC_scan_has_no_error": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('RubrikIOCScan')",
                        "schema": {
                          "properties": {
                            "RadarIOCScan": {
                              "type": "object"
                            },
                            "RadarIOCScanStatus": {
                              "type": "string"
                            },
                            "RecoverableSnapshotid": {
                              "type": "string"
                            },
                            "error": {
                              "type": "string"
                            },
                            "isLatestInfected": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "Set_scan_status": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": "@if(equals(outputs('RubrikIOCScan')['statusCode'],200),variables('Status'),'Error: IOC Scan is not successful')",
                        "statusCode": "@if(equals(outputs('RubrikIOCScan')['statusCode'],200),200,400)"
                      }
                    },
                    "RubrikIOCScan": {
                      "runAfter": {
                        "Whether_to_fetch_Yara_rule(s)_from_a_URLs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Workflow",
                      "inputs": {
                        "body": {
                          "BaseUrl": "@triggerBody()?['BaseUrl']",
                          "ClusterId": "@variables('ClusterId')",
                          "EndDate": "@body('Collect_IOC_Data')?['data']?['end date to initiate the IOC scan']",
                          "IOCHash": "@body('Collect_IOC_Data')?['data']?['ioc hash to scan for']",
                          "IOCPath": "@body('Collect_IOC_Data')?['data']?['ioc path to scan for']",
                          "IOCYaraRule": "@body('Collect_IOC_Data')?['data']?['ioc Yara rule to scan for']",
                          "Limit": 1,
                          "ObjectId": "@variables('ObjectId')",
                          "PathsToExclude": "@body('Collect_IOC_Data')?['data']?['paths to exclude in the IOC Scan']",
                          "PathsToExempt": "@body('Collect_IOC_Data')?['data']?['paths to exempt in the IOC Scan']",
                          "PathsToInclude": "@body('Collect_IOC_Data')?['data']?['paths to include in the IOC Scan']",
                          "PollingInterval": "@body('Collect_IOC_Data')?['data']?['polling interval for IOC Scan']",
                          "PollingTimeout": "@body('Collect_IOC_Data')?['data']?['polling timeout for IOC Scan']",
                          "ScanName": "@body('Collect_IOC_Data')?['data']?['scan Name']",
                          "StartDate": "@body('Collect_IOC_Data')?['data']?['start date to initiate the IOC scan']"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "host": {
                          "triggerName": "manual",
                          "workflow": {
                            "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikIOCScan')]"
                          }
                        }
                      }
                    },
                    "Set_scan_status": {
                      "runAfter": {
                        "Parse_JSON": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Status",
                        "value": "@body('Parse_JSON')?['RadarIOCScanStatus']"
                      }
                    },
                    "Whether_to_fetch_Yara_rule(s)_from_a_URLs": {
                      "actions": {
                        "Fetch_Yara_rule(s)_from_file_URLs": {
                          "type": "Http",
                          "inputs": {
                            "method": "GET",
                            "uri": "@body('Collect_IOC_Data')?['data']?['ioc Yara rule file URL to scan for']"
                          }
                        },
                        "Set_IOCYaraRule_fetched_from_URLs": {
                          "runAfter": {
                            "Fetch_Yara_rule(s)_from_file_URLs": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "IOCYaraRule",
                            "value": "@{body('Fetch_Yara_rule(s)_from_file_URLs')}"
                          }
                        }
                      },
                      "runAfter": {
                        "Check_that_Polling_Timeout_is_less_than_or_equal_to_0_": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_default_value_for_IOC_YaraRule": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "IOCYaraRule",
                              "value": "@body('Collect_IOC_Data')?['data']?['ioc Yara rule to scan for']"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@body('Collect_IOC_Data')?['data']?['ioc Yara rule file URL to scan for']",
                                null
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikFilesetRansomwareDiscovery",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId5'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId5')]",
                "contentId": "[variables('_playbookContentId5')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Fileset Ransomware Discovery",
            "description": "This playbook queries Rubrik Security Cloud to enrich the incoming event with additional information from Rubrik about the fileset object and perform an IOC scan against the fileset.",
            "prerequisites": [
              "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
              "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "3. To perform an IOC scan the IOC YARA rule should be available as a URL.",
              "4. Obtain Teams group id and channel id.",
              "5. Make sure that RubrikIOCScan playbook is deployed before deploying RubrikFilesetRansomwareDiscovery playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Click the Microsoft Teams connection resource",
              "2. Click edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections"
            ],
            "lastUpdateTime": "2022-01-20T00:00:00Z",
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "Recovery",
              "Ransomware Discovery",
              "Security",
              "Rubrik"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId5')]",
        "contentKind": "Playbook",
        "displayName": "RubrikFilesetRansomwareDiscovery",
        "contentProductId": "[variables('_playbookcontentProductId5')]",
        "id": "[variables('_playbookcontentProductId5')]",
        "version": "[variables('playbookVersion5')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName6')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikIOCScan Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion6')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikIOCScan",
              "type": "string"
            },
            "Rubrik Connector name": {
              "defaultValue": "RubrikCustomConnector",
              "type": "String",
              "metadata": {
                "description": "Rubrik Custom Connector name"
              }
            },
            "keyvaultName": {
              "defaultValue": "RubrikSentinelKeyVault",
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            }
          },
          "variables": {
            "RubrikcustomconnectorConnectionName": "[[concat('Rubrikcustomconnector-', parameters('PlaybookName'))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "BaseUrl": {
                              "type": "string"
                            },
                            "ClusterId": {
                              "type": "string"
                            },
                            "EndDate": {
                              "type": "string"
                            },
                            "IOCHash": {
                              "type": "string"
                            },
                            "IOCPath": {
                              "type": "string"
                            },
                            "IOCYaraRule": {
                              "type": "string"
                            },
                            "IncidentTime": {
                              "type": "string"
                            },
                            "Limit": {
                              "type": "integer"
                            },
                            "ObjectId": {
                              "type": "string"
                            },
                            "ObjectName": {
                              "type": "string"
                            },
                            "PathsToExclude": {
                              "type": "string"
                            },
                            "PathsToExempt": {
                              "type": "string"
                            },
                            "PathsToInclude": {
                              "type": "string"
                            },
                            "PollingInterval": {
                              "type": "integer"
                            },
                            "PollingTimeout": {
                              "type": "integer"
                            },
                            "RequestedHashType": {
                              "type": "string"
                            },
                            "ScanName": {
                              "type": "string"
                            },
                            "StartDate": {
                              "type": "string"
                            },
                            "TimeDelta": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Authentication": {
                      "runAfter": {
                        "ClientSecret": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "client_id": "@body('ClientId')?['value']",
                          "client_secret": "@body('ClientSecret')?['value']"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/api/client_token"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Check_if_limit_is_null_or_not_": {
                      "runAfter": {
                        "Initialize_Input_Limit": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_Input_Limit_variable": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "InputLimit",
                              "value": "@int(triggerBody()?['Limit'])"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@triggerBody()?['Limit']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Check_if_limit_is_zero_or_not": {
                      "actions": {
                        "If_limit_is_less_then_or_equal_to_0_then_set_1": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "InputLimit",
                            "value": 1
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_error_message_of_API": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "lessOrEquals": [
                              "@variables('InputLimit')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "ClientId": {
                      "runAfter": {
                        "Initialize_ObjectId_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "ClientSecret": {
                      "runAfter": {
                        "ClientId": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Compose_ObjectId": {
                      "runAfter": {
                        "Initialize_status_variable_to_send_it_at_the_end_in_response": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": [
                        "@{triggerBody()?['ObjectId']}"
                      ]
                    },
                    "Final_Response": {
                      "runAfter": {
                        "Perform_IOC_Scan_until_limit_reach": [
                          "Succeeded",
                          "Failed",
                          "TimedOut",
                          "Skipped"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": {
                          "NumOfFile": "@if(equals(variables('NumOfFile'),null),null,variables('NumOfFile'))",
                          "RadarIOCScan": "@if(equals(variables('IOCScanResult'),null),null,variables('IOCScanResult'))",
                          "RadarIOCScanStatus": "@if(equals(variables('RadarIOCScanStatus'),null),null,variables('RadarIOCScanStatus'))",
                          "RecoverableSnapshotid": "@if(equals(variables('RecoverableSnapshotId'),null),null, variables('RecoverableSnapshotId'))",
                          "error": "@if(equals(variables('ErrorMessage'),null),null,variables('ErrorMessage'))",
                          "isLatestInfected": "@if(equals(variables('isLatestInfected'),null),null,variables('isLatestInfected'))"
                        },
                        "statusCode": "@variables('StatusCode')"
                      }
                    },
                    "Initialization_for_recoverable_snapshots": {
                      "runAfter": {
                        "initialization_RadarIOCScanStatus": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "RecoverableSnapshots",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Count": {
                      "runAfter": {
                        "save_ioc_scan_result_body_here": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Count",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_CurrentFieldDate_to_compare_snapshot_Id": {
                      "runAfter": {
                        "Initialize_Recoverable_Snapshot_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CurrentFieldDate",
                            "type": "string",
                            "value": "1980-07-11"
                          }
                        ]
                      }
                    },
                    "Initialize_End_Date_for_IOC_Scan": {
                      "runAfter": {
                        "Initialize_Start_Date_for_IOC_Scan": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "EndDate",
                            "type": "string",
                            "value": "@triggerBody()?['EndDate']"
                          }
                        ]
                      }
                    },
                    "Initialize_Incident_Time_for_IOC_Scan": {
                      "runAfter": {
                        "Initialize_Object_Name_for_IOC_Scan": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentTime",
                            "type": "string",
                            "value": "@{triggerBody()?['IncidentTime']}"
                          }
                        ]
                      }
                    },
                    "Initialize_Input_Limit": {
                      "runAfter": {
                        "Initialize_indicatorsOfCompromise": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "InputLimit",
                            "type": "integer",
                            "value": "@null"
                          }
                        ]
                      }
                    },
                    "Initialize_LastFieldDate_to_compare_snapshot_Id": {
                      "runAfter": {
                        "Initialize_CurrentFieldDate_to_compare_snapshot_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "LastFieldDate",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_ObjectId_array": {
                      "runAfter": {
                        "Compose_ObjectId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectId",
                            "type": "array",
                            "value": "@outputs('Compose_ObjectId')"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Name_for_IOC_Scan": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectName",
                            "type": "string",
                            "value": "@{triggerBody()?['ObjectName']}"
                          }
                        ]
                      }
                    },
                    "Initialize_Pending_count_for_IOC_scan": {
                      "runAfter": {
                        "Check_if_limit_is_null_or_not_": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PendingCount",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Initialize_Polling_Timeout": {
                      "runAfter": {
                        "Initialize_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PollingTimeout",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_Recoverable_Snapshot_Id": {
                      "runAfter": {
                        "Limit_(used_inside_loop)": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "RecoverableSnapshotId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Start_Date_for_IOC_Scan": {
                      "runAfter": {
                        "Initialize_number_of_file_that_will_be_change_after_IOC_Scan": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "StartDate",
                            "type": "string",
                            "value": "@triggerBody()?['StartDate']"
                          }
                        ]
                      }
                    },
                    "Initialize_access_token": {
                      "runAfter": {
                        "Is_Authentication_Failed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token",
                            "type": "string",
                            "value": "@{body('Authentication')?['access_token']}"
                          }
                        ]
                      }
                    },
                    "Initialize_error_message_of_API": {
                      "runAfter": {
                        "Initialize_isLatestInfected_": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ErrorMessage",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_indicatorsOfCompromise": {
                      "runAfter": {
                        "Initialize_End_Date_for_IOC_Scan": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IOCAdvance",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_isLatestInfected_": {
                      "runAfter": {
                        "Initialization_for_recoverable_snapshots": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "isLatestInfected",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_number_of_file_that_will_be_change_after_IOC_Scan": {
                      "runAfter": {
                        "Initialize_Incident_Time_for_IOC_Scan": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "NumOfFile",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Initialize_status_variable_to_send_it_at_the_end_in_response": {
                      "runAfter": {
                        "initialize_epoch_value_of_end_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "StatusCode",
                            "type": "integer",
                            "value": 200
                          }
                        ]
                      }
                    },
                    "Is_Authentication_Failed": {
                      "actions": {
                        "Response": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "@body('Authentication')?['message']",
                            "statusCode": "@outputs('Authentication')['statusCode']"
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Response": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('Authentication')?['statusCode']}",
                              "message": "@{body('Authentication')?['message']}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Authentication": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@outputs('Authentication')?['statusCode']",
                                200
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Limit_(used_inside_loop)": {
                      "runAfter": {
                        "Check_if_limit_is_zero_or_not": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Limit",
                            "type": "integer",
                            "value": "@variables('InputLimit')"
                          }
                        ]
                      }
                    },
                    "Perform_IOC_Scan_until_limit_reach": {
                      "actions": {
                        "Does_Start_IOC_scan_get_status_code_200": {
                          "actions": {
                            "Does_Start_IOC_scan_API_response_contains_errors": {
                              "actions": {
                                "Set_Limit_to_0_-_will_exit_the_until_loop2": {
                                  "runAfter": {
                                    "Set_error_message_if_Start_IOC_scan_response_contains_error": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Limit",
                                    "value": 0
                                  }
                                },
                                "Set_error_message_if_Start_IOC_scan_response_contains_error": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "ErrorMessage",
                                    "value": "@{body('Start_IOC_scan')?['errors'][0]?['message']}"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Parse_Start_IOC_scan_Response": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('Start_IOC_scan')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "startThreatHunt": {
                                                "properties": {
                                                  "huntId": {
                                                    "type": "string"
                                                  },
                                                  "isSyncSuccessful": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('Start_IOC_scan')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Start_IOC_scan": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_Limit_to_0_-_will_exit_the_until_loop": {
                                "runAfter": {
                                  "Set_Status_code_for_response": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "Limit",
                                  "value": 0
                                }
                              },
                              "Set_Start_IOC_scan_error_status_with_status_code_not_equal_to_200_": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessage",
                                  "value": "StstusCode: @{outputs('Start_IOC_scan')['statusCode']}, Message: @{body('Start_IOC_scan')?['message']}"
                                }
                              },
                              "Set_Status_code_for_response": {
                                "runAfter": {
                                  "Set_Start_IOC_scan_error_status_with_status_code_not_equal_to_200_": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "StatusCode",
                                  "value": "@outputs('Start_IOC_scan')['statusCode']"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Start_IOC_scan')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Does_rubrik-radar-ioc-scan-status_get_status_code_200": {
                          "actions": {
                            "Does_rubrik-radar-ioc-scan-status_API_response_contains_errors": {
                              "actions": {
                                "Set_error_message_if_IOC_scan_status_response_has_error": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "ErrorMessage",
                                    "value": "message: @{body('rubrik-radar-ioc-scan-status')?['errors'][0]?['message']}"
                                  }
                                },
                                "Set_limit_to_0_to_exit_the_loop": {
                                  "runAfter": {
                                    "Set_error_message_if_IOC_scan_status_response_has_error": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Limit",
                                    "value": 0
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Get_scan_results": {
                                    "runAfter": {
                                      "Run_IOC_scan_until_the_operation_completes": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                      "body": {
                                        "query": "query ThreatHuntMalwareResultQuery($huntId: String!) {\r\n  threatHuntResult(huntId: $huntId) {\r\n    huntId\r\n    config {\r\n      name\r\n      indicatorsOfCompromise {\r\n        iocValue\r\n        iocKind\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    results {\r\n      object {\r\n        id\r\n        name\r\n        objectType\r\n        __typename\r\n      }\r\n      snapshotResults {\r\n        snapshotId\r\n        snapshotDate\r\n        status\r\n        lastJobId\r\n        matches {\r\n          indicatorIndex\r\n          paths {\r\n            requestedHashDetails {\r\n              hashValue\r\n              hashType\r\n              __typename\r\n            }\r\n            yaraMatchDetails {\r\n              name\r\n              tags\r\n              __typename\r\n            }\r\n            aclDetails\r\n            creationTime\r\n            modificationTime\r\n            path\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        quarantineDetails {\r\n          filesDetails {\r\n            fileName\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        scanStats {\r\n          numFiles\r\n          numFilesScanned\r\n          totalFilesScannedSizeBytes\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}",
                                        "variables": {
                                          "huntId": "@{body('Parse_Start_IOC_scan_Response')?['data']?['startThreatHunt']?['huntId']}"
                                        }
                                      },
                                      "headers": {
                                        "Authorization": "Bearer @{variables('access_token')}",
                                        "Content-Type": "application/json"
                                      },
                                      "method": "POST",
                                      "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                    }
                                  },
                                  "Parse_rubrik-radar-ioc-scan-status": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('rubrik-radar-ioc-scan-status')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "threatHuntResult": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "config": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "indicatorsOfCompromise": {
                                                        "items": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "iocKind": {
                                                              "type": "string"
                                                            },
                                                            "iocValue": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "required": [
                                                            "iocValue",
                                                            "iocKind",
                                                            "__typename"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        "type": "array"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "huntId": {
                                                    "type": "string"
                                                  },
                                                  "results": {
                                                    "items": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "object": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "objectType": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "snapshotResults": {
                                                          "items": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "lastJobId": {
                                                                "type": "string"
                                                              },
                                                              "matches": {
                                                                "type": "array"
                                                              },
                                                              "scanStats": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "numFiles": {
                                                                    "type": "integer"
                                                                  },
                                                                  "numFilesScanned": {
                                                                    "type": "integer"
                                                                  },
                                                                  "totalFilesScannedSizeBytes": {
                                                                    "type": "integer"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              },
                                                              "snapshotDate": {
                                                                "type": "string"
                                                              },
                                                              "snapshotId": {
                                                                "type": "string"
                                                              },
                                                              "status": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "required": [
                                                              "snapshotId",
                                                              "snapshotDate",
                                                              "status",
                                                              "lastJobId",
                                                              "matches",
                                                              "quarantineDetails",
                                                              "scanStats",
                                                              "__typename"
                                                            ],
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "required": [
                                                        "object",
                                                        "snapshotResults",
                                                        "__typename"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Run_IOC_scan_until_the_operation_completes": {
                                    "actions": {
                                      "Check_how_many_pending_IOC_scan": {
                                        "foreach": "@body('Response_of_rubrik-radar-ioc-scan-results')?['data']?['threatHuntResult']?['results']",
                                        "actions": {
                                          "For_each_4": {
                                            "foreach": "@items('Check_how_many_pending_IOC_scan')['snapshotResults']",
                                            "actions": {
                                              "Check_status_of_every_snapshot_Id": {
                                                "actions": {
                                                  "Increment_pending_count": {
                                                    "type": "IncrementVariable",
                                                    "inputs": {
                                                      "name": "PendingCount",
                                                      "value": 1
                                                    }
                                                  }
                                                },
                                                "expression": {
                                                  "and": [
                                                    {
                                                      "contains": [
                                                        "@items('For_each_4')?['status']",
                                                        "PENDING"
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "type": "If"
                                              }
                                            },
                                            "type": "Foreach"
                                          }
                                        },
                                        "runAfter": {
                                          "Set_pending_count": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Foreach"
                                      },
                                      "Check_pending_count_and_if_0_then_set_status_equals_finished": {
                                        "actions": {
                                          "Set_finished_if_pending_count_is_0": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "RadarIOCScanStatus",
                                              "value": "FINISHED"
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "Check_how_many_pending_IOC_scan": [
                                            "Succeeded"
                                          ]
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@variables('PendingCount')",
                                                0
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "Does_rubrik-radar-ioc-scan-results_get_status_code_200": {
                                        "actions": {
                                          "Does_rubrik-radar-ioc-scan-results_API_response_contains_errors": {
                                            "actions": {
                                              "Set_Limit_to_0_to_exit_the_until_loop3": {
                                                "runAfter": {
                                                  "Set_error_message_if_IOC_scan_result_response_contains_error": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "Limit",
                                                  "value": 0
                                                }
                                              },
                                              "Set_error_message_if_IOC_scan_result_response_contains_error": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "ErrorMessage",
                                                  "value": "@{body('rubrik-radar-ioc-scan-results')?['errors'][0]?['message']}"
                                                }
                                              }
                                            },
                                            "else": {
                                              "actions": {
                                                "Response_of_rubrik-radar-ioc-scan-results": {
                                                  "type": "ParseJson",
                                                  "inputs": {
                                                    "content": "@body('rubrik-radar-ioc-scan-results')",
                                                    "schema": {
                                                      "properties": {
                                                        "data": {
                                                          "properties": {
                                                            "threatHuntResult": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "config": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "indicatorsOfCompromise": {
                                                                      "items": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "iocKind": {
                                                                            "type": "string"
                                                                          },
                                                                          "iocValue": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "required": [
                                                                          "iocValue",
                                                                          "iocKind",
                                                                          "__typename"
                                                                        ],
                                                                        "type": "object"
                                                                      },
                                                                      "type": "array"
                                                                    },
                                                                    "name": {
                                                                      "type": "string"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                },
                                                                "huntId": {
                                                                  "type": "string"
                                                                },
                                                                "results": {
                                                                  "items": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "object": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "id": {
                                                                            "type": "string"
                                                                          },
                                                                          "name": {
                                                                            "type": "string"
                                                                          },
                                                                          "objectType": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "snapshotResults": {
                                                                        "items": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "lastJobId": {
                                                                              "type": "string"
                                                                            },
                                                                            "matches": {
                                                                              "type": "array"
                                                                            },
                                                                            "scanStats": {
                                                                              "properties": {
                                                                                "__typename": {
                                                                                  "type": "string"
                                                                                },
                                                                                "numFiles": {
                                                                                  "type": "integer"
                                                                                },
                                                                                "numFilesScanned": {
                                                                                  "type": "integer"
                                                                                },
                                                                                "totalFilesScannedSizeBytes": {
                                                                                  "type": "integer"
                                                                                }
                                                                              },
                                                                              "type": "object"
                                                                            },
                                                                            "snapshotDate": {
                                                                              "type": "string"
                                                                            },
                                                                            "snapshotId": {
                                                                              "type": "string"
                                                                            },
                                                                            "status": {
                                                                              "type": "string"
                                                                            }
                                                                          },
                                                                          "required": [
                                                                            "snapshotId",
                                                                            "snapshotDate",
                                                                            "status",
                                                                            "lastJobId",
                                                                            "matches",
                                                                            "quarantineDetails",
                                                                            "scanStats",
                                                                            "__typename"
                                                                          ],
                                                                          "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                      }
                                                                    },
                                                                    "required": [
                                                                      "object",
                                                                      "snapshotResults",
                                                                      "__typename"
                                                                    ],
                                                                    "type": "object"
                                                                  },
                                                                  "type": "array"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "contains": [
                                                    "@body('rubrik-radar-ioc-scan-results')",
                                                    "errors"
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        },
                                        "runAfter": {
                                          "rubrik-radar-ioc-scan-results": [
                                            "Succeeded"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Set_Limit_to_0_and_exit_the_until_loop_": {
                                              "runAfter": {
                                                "Set_variable_status_Code_to_pass_it_in_response": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "Limit",
                                                "value": 0
                                              }
                                            },
                                            "Set_error_on_failed_status_of_IOC_scan_result": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "ErrorMessage",
                                                "value": "Status:  @{outputs('rubrik-radar-ioc-scan-results')['statusCode']}, Message:  @{body('rubrik-radar-ioc-scan-results')?['message']}"
                                              }
                                            },
                                            "Set_variable_status_Code_to_pass_it_in_response": {
                                              "runAfter": {
                                                "Set_error_on_failed_status_of_IOC_scan_result": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "StatusCode",
                                                "value": "@outputs('rubrik-radar-ioc-scan-results')['statusCode']"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@outputs('rubrik-radar-ioc-scan-results')?['statusCode']",
                                                200
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "Polling_interval": {
                                        "runAfter": {
                                          "Check_pending_count_and_if_0_then_set_status_equals_finished": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Wait",
                                        "inputs": {
                                          "interval": {
                                            "count": "@if(or(empty(string(triggerBody()?['PollingInterval'])),lessOrEquals(int(triggerBody()?['PollingInterval']),0)), 5, int(triggerBody()?['PollingInterval']))",
                                            "unit": "Minute"
                                          }
                                        }
                                      },
                                      "Set_pending_count": {
                                        "runAfter": {
                                          "Does_rubrik-radar-ioc-scan-results_get_status_code_200": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "PendingCount",
                                          "value": 0
                                        }
                                      },
                                      "rubrik-radar-ioc-scan-results": {
                                        "type": "Http",
                                        "inputs": {
                                          "body": {
                                            "query": "query ThreatHuntMalwareResultQuery($huntId: String!) {\r\n  threatHuntResult(huntId: $huntId) {\r\n    huntId\r\n    config {\r\n      name\r\n      indicatorsOfCompromise {\r\n        iocValue\r\n        iocKind\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    results {\r\n      object {\r\n        id\r\n        name\r\n        objectType\r\n        __typename\r\n      }\r\n      snapshotResults {\r\n        snapshotId\r\n        snapshotDate\r\n        status\r\n        lastJobId\r\n        matches {\r\n          indicatorIndex\r\n          paths {\r\n            requestedHashDetails {\r\n              hashValue\r\n              hashType\r\n              __typename\r\n            }\r\n            yaraMatchDetails {\r\n              name\r\n              tags\r\n              __typename\r\n            }\r\n            aclDetails\r\n            creationTime\r\n            modificationTime\r\n            path\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        quarantineDetails {\r\n          filesDetails {\r\n            fileName\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        scanStats {\r\n          numFiles\r\n          numFilesScanned\r\n          totalFilesScannedSizeBytes\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}",
                                            "variables": {
                                              "huntId": "@{body('Parse_Start_IOC_scan_Response')?['data']?['startThreatHunt']?['huntId']}"
                                            }
                                          },
                                          "headers": {
                                            "Authorization": "Bearer @{variables('access_token')}",
                                            "Content-Type": "application/json"
                                          },
                                          "method": "POST",
                                          "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Set_IOC_scan_status_": [
                                        "Succeeded"
                                      ]
                                    },
                                    "expression": "@contains(variables('RadarIOCScanStatus'), 'FINISHED')",
                                    "limit": {
                                      "timeout": "@{if(empty(string(triggerBody()?['PollingTimeout'])), 'PT720M', concat('PT',string(triggerBody()?['PollingTimeout']),'M'))}"
                                    },
                                    "type": "Until"
                                  },
                                  "Set_IOC_scan_status_": {
                                    "runAfter": {
                                      "Parse_rubrik-radar-ioc-scan-status": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "RadarIOCScanStatus",
                                      "value": "@{body('Parse_rubrik-radar-ioc-scan-status')?['data']?['threatHuntResult']?['results'][0]?['snapshotResults'][0]?['status']}"
                                    }
                                  },
                                  "rubrik-radar-ioc-scan-result_get_status_code_200": {
                                    "actions": {
                                      "Does_rubrik-radar-ioc-scan-result_API_response_contains_errors": {
                                        "actions": {
                                          "Set_error_message_if_IOC_scan_result_response_has_error": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "ErrorMessage",
                                              "value": "@{body('Get_scan_results')?['errors'][0]?['message']}"
                                            }
                                          },
                                          "Set_limit_variable_to_0": {
                                            "runAfter": {
                                              "Set_error_message_if_IOC_scan_result_response_has_error": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "Limit",
                                              "value": 0
                                            }
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Get_status_of_scan_result_-_Last_Array_Element": {
                                              "foreach": "@body('Parse_Get_scan_results_response')?['data']?['threatHuntResult']?['results']",
                                              "actions": {
                                                "For_each_2": {
                                                  "foreach": "@items('Get_status_of_scan_result_-_Last_Array_Element')?['snapshotResults']",
                                                  "actions": {
                                                    "Set_status": {
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                        "name": "RadarIOCScanStatus",
                                                        "value": "@items('For_each_2')?['status']"
                                                      }
                                                    }
                                                  },
                                                  "type": "Foreach"
                                                }
                                              },
                                              "runAfter": {
                                                "Parse_Get_scan_results_response": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Foreach"
                                            },
                                            "Parse_Get_scan_results_response": {
                                              "runAfter": {
                                                "Set_IOC_scan_result": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "ParseJson",
                                              "inputs": {
                                                "content": "@body('Get_scan_results')",
                                                "schema": {
                                                  "properties": {
                                                    "data": {
                                                      "properties": {
                                                        "threatHuntResult": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "config": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "indicatorsOfCompromise": {
                                                                  "items": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "iocKind": {
                                                                        "type": "string"
                                                                      },
                                                                      "iocValue": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "required": [
                                                                      "iocValue",
                                                                      "iocKind",
                                                                      "__typename"
                                                                    ],
                                                                    "type": "object"
                                                                  },
                                                                  "type": "array"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "huntId": {
                                                              "type": "string"
                                                            },
                                                            "results": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "object": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "id": {
                                                                        "type": "string"
                                                                      },
                                                                      "name": {
                                                                        "type": "string"
                                                                      },
                                                                      "objectType": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "snapshotResults": {
                                                                    "items": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "lastJobId": {
                                                                          "type": "string"
                                                                        },
                                                                        "matches": {
                                                                          "type": "array"
                                                                        },
                                                                        "scanStats": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "numFiles": {
                                                                              "type": "integer"
                                                                            },
                                                                            "numFilesScanned": {
                                                                              "type": "integer"
                                                                            },
                                                                            "totalFilesScannedSizeBytes": {
                                                                              "type": "integer"
                                                                            }
                                                                          },
                                                                          "type": "object"
                                                                        },
                                                                        "snapshotDate": {
                                                                          "type": "string"
                                                                        },
                                                                        "snapshotId": {
                                                                          "type": "string"
                                                                        },
                                                                        "status": {
                                                                          "type": "string"
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "snapshotId",
                                                                        "snapshotDate",
                                                                        "status",
                                                                        "lastJobId",
                                                                        "matches",
                                                                        "quarantineDetails",
                                                                        "scanStats",
                                                                        "__typename"
                                                                      ],
                                                                      "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "object",
                                                                  "snapshotResults",
                                                                  "__typename"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            "Set_IOC_scan_result": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "IOCScanResult",
                                                "value": "@body('Get_scan_results')"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "contains": [
                                                "@body('Get_scan_results')",
                                                "errors"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "runAfter": {
                                      "Get_scan_results": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Status_Code_to_pass_in_the_response_at_the_end": {
                                          "runAfter": {
                                            "Set_error_message_on_failed_status_of_IOC_scan_result_": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "StatusCode",
                                            "value": "@outputs('Get_scan_results')['statusCode']"
                                          }
                                        },
                                        "Set_error_message_on_failed_status_of_IOC_scan_result_": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "ErrorMessage",
                                            "value": "StatusCode:  @{outputs('Get_scan_results')['statusCode']}, message: @{body('Get_scan_results')?['message']}"
                                          }
                                        },
                                        "Set_limit_to_0_": {
                                          "runAfter": {
                                            "Set_Status_Code_to_pass_in_the_response_at_the_end": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "Limit",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('Get_scan_results')?['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('rubrik-radar-ioc-scan-status')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "rubrik-radar-ioc-scan-status": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_Error_Message_on_failed_status_of_IOC_scan_status": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessage",
                                  "value": "Status Code: @{outputs('rubrik-radar-ioc-scan-status')?['statusCode']},  Message: \"@{body('rubrik-radar-ioc-scan-status')?['message']}\""
                                }
                              },
                              "Set_Limit_to_0": {
                                "runAfter": {
                                  "Set_variable_status_code_for_response_at_the_end": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "Limit",
                                  "value": 0
                                }
                              },
                              "Set_variable_status_code_for_response_at_the_end": {
                                "runAfter": {
                                  "Set_Error_Message_on_failed_status_of_IOC_scan_status": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "StatusCode",
                                  "value": "@outputs('rubrik-radar-ioc-scan-status')['statusCode']"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('rubrik-radar-ioc-scan-status')?['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Is_scan_successfull": {
                          "actions": {
                            "Are_recoverable_snapshot_ID(s)_obtained_-_if_yes_set_the_recoverable_snapshot": {
                              "foreach": "@body('Parse_Get_scan_results_response')?['data']?['threatHuntResult']?['results']",
                              "actions": {
                                "For_each_5": {
                                  "foreach": "@items('Are_recoverable_snapshot_ID(s)_obtained_-_if_yes_set_the_recoverable_snapshot')?['snapshotResults']",
                                  "actions": {
                                    "Set_Last_field_date": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "LastFieldDate",
                                        "value": "@{div(sub(ticks(variables('CurrentFieldDate')),ticks('1970-01-01Z00:00:00')),10000000)\r\n}"
                                      }
                                    },
                                    "check_matches_is_empty_or_not": {
                                      "actions": {
                                        "Append_snapshot_Id": {
                                          "type": "AppendToArrayVariable",
                                          "inputs": {
                                            "name": "RecoverableSnapshots",
                                            "value": "@items('For_each_5')?['snapshotId']"
                                          }
                                        },
                                        "Increment_the_scanned_file_number": {
                                          "runAfter": {
                                            "Append_snapshot_Id": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "NumOfFile",
                                            "value": "@items('For_each_5')?['scanStas']?['numFilesScanned']"
                                          }
                                        },
                                        "Set_current_field_date": {
                                          "runAfter": {
                                            "Increment_the_scanned_file_number": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "CurrentFieldDate",
                                            "value": "    @{items('For_each_5')?['snapshotDate']}"
                                          }
                                        },
                                        "check_for_latest_snapshot_ID": {
                                          "actions": {
                                            "Set_isLastInfected_to_True": {
                                              "runAfter": {
                                                "set_recoverable_snapshot_ID": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "isLatestInfected",
                                                "value": "@true"
                                              }
                                            },
                                            "set_recoverable_snapshot_ID": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "RecoverableSnapshotId",
                                                "value": "@items('For_each_5')?['snapshotId']"
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Set_current_field_date": [
                                              "Succeeded"
                                            ]
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "greater": [
                                                  "@div(sub(ticks(items('For_each_5')?['snapshotDate']),ticks('1970-01-01Z00:00:00')),10000000)",
                                                  "@int(variables('LastFieldDate'))"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      },
                                      "runAfter": {
                                        "Set_Last_field_date": [
                                          "Succeeded"
                                        ]
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@length(items('For_each_5')?['matches'])",
                                              0
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "type": "Foreach"
                            },
                            "Are_there_any_recoverable_snapshots": {
                              "actions": {
                                "Set_variable": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Limit",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "Are_recoverable_snapshot_ID(s)_obtained_-_if_yes_set_the_recoverable_snapshot": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Convert_end_date_to_epochs": {
                                    "runAfter": {
                                      "Convert_start_date_to_epochs": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "EpochEndDate",
                                      "value": "@{div(sub(ticks(variables('EndDate')),ticks('1970-01-01Z00:00:00')),10000000)}"
                                    }
                                  },
                                  "Convert_start_date_to_epochs": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "EpochStartDate",
                                      "value": "@{div(sub(ticks(variables('StartDate')),ticks('1970-01-01Z00:00:00')),10000000)}"
                                    }
                                  },
                                  "Decrement_variable": {
                                    "runAfter": {
                                      "Is_time_delta_available": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "DecrementVariable",
                                    "inputs": {
                                      "name": "Limit",
                                      "value": 1
                                    }
                                  },
                                  "Is_time_delta_available": {
                                    "actions": {
                                      "Set_variable_2": {
                                        "runAfter": {
                                          "Update_the_start_date_using_time_delta": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "StartDate",
                                          "value": "@body('Update_the_start_date_using_time_delta')"
                                        }
                                      },
                                      "Update_the_start_date_using_time_delta": {
                                        "type": "Expression",
                                        "kind": "SubtractFromTime",
                                        "inputs": {
                                          "baseTime": "@variables('StartDate')",
                                          "interval": "@triggerBody()?['TimeDelta']",
                                          "timeUnit": "Day"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Update_the_end_date": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Update_the_start_date": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "StartDate",
                                            "value": " @{addToTime('1970-01-01T00:00:00Z', sub(mul(int(variables('EpochStartDate')), 2), int(variables('EpochEndDate'))), 'second')}"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "not": {
                                            "equals": [
                                              "@empty(triggerBody()?['TimeDelta'])",
                                              "@true"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Update_the_end_date": {
                                    "runAfter": {
                                      "Convert_end_date_to_epochs": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "EndDate",
                                      "value": "@variables('StartDate')"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@length(variables('RecoverableSnapshots'))",
                                        0
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Does_rubrik-radar-ioc-scan-status_get_status_code_200": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_limit_to_zero": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "Limit",
                                  "value": 0
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@variables('RadarIOCScanStatus')",
                                  "FINISHED"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Start_IOC_scan": {
                          "runAfter": {
                            "prepared_advance_IOC_": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "mutation StartThreatHuntMutation($input: StartThreatHuntInput!) {\r\n    startThreatHunt(input: $input) {\r\n      huntId\r\n      isSyncSuccessful\r\n    }\r\n  }",
                              "variables": {
                                "input": {
                                  "clusterUuid": "@{triggerBody()?['ClusterId']}",
                                  "fileScanCriteria": {
                                    "fileSizeLimits": {
                                      "maximumSizeInBytes": 10000000
                                    },
                                    "pathFilter": {
                                      "includes": [
                                        "**"
                                      ]
                                    }
                                  },
                                  "indicatorsOfCompromise": "@variables('IOCAdvance')",
                                  "maxMatchesPerSnapshot": 100,
                                  "name": "@{triggerBody()?['ScanName']}",
                                  "objectFids": "@variables('ObjectId')",
                                  "snapshotScanLimit": {
                                    "endTime": "@{variables('EndDate')}",
                                    "maxSnapshotsPerObject": 10,
                                    "startTime": "@{variables('StartDate')}"
                                  }
                                }
                              }
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('access_token')}",
                              "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "path": "/api/graphql",
                            "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                          }
                        },
                        "prepared_advance_IOC_": {
                          "actions": {
                            "Set_IOC_Hash_PATH_and_YARA_rule_to_IOC_advance": {
                              "type": "Compose",
                              "inputs": [
                                {
                                  "iocKind": "IOC_FILE_PATTERN",
                                  "iocValue": "@{triggerBody()?['IOCPath']}"
                                },
                                {
                                  "iocKind": "IOC_YARA",
                                  "iocValue": "@{triggerBody()?['IOCYaraRule']}"
                                },
                                {
                                  "iocKind": "IOC_HASH",
                                  "iocValue": "@{triggerBody()?['IOCHash']}"
                                }
                              ]
                            },
                            "Set_variable_IOC_Advance": {
                              "runAfter": {
                                "Set_IOC_Hash_PATH_and_YARA_rule_to_IOC_advance": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "IOCAdvance",
                                "value": "@outputs('Set_IOC_Hash_PATH_and_YARA_rule_to_IOC_advance')"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_IOC_Advance": {
                                "runAfter": {
                                  "Set_IOC_PATH_and_YARA_rule_to_IOC_advance": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "IOCAdvance",
                                  "value": "@outputs('Set_IOC_PATH_and_YARA_rule_to_IOC_advance')"
                                }
                              },
                              "Set_IOC_PATH_and_YARA_rule_to_IOC_advance": {
                                "type": "Compose",
                                "inputs": [
                                  {
                                    "iocKind": "IOC_FILE_PATTERN",
                                    "iocValue": "@{triggerBody()?['IOCPath']}"
                                  },
                                  {
                                    "iocKind": "IOC_YARA",
                                    "iocValue": "@{triggerBody()?['IOCYaraRule']}"
                                  }
                                ]
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@empty(triggerBody()?['IOCHash'])",
                                  "@false"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "rubrik-radar-ioc-scan-status": {
                          "runAfter": {
                            "Does_Start_IOC_scan_get_status_code_200": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query ThreatHuntMalwareResultQuery($huntId: String!) {\r\n  threatHuntResult(huntId: $huntId) {\r\n    huntId\r\n    config {\r\n      name\r\n      indicatorsOfCompromise {\r\n        iocValue\r\n        iocKind\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    results {\r\n      object {\r\n        id\r\n        name\r\n        objectType\r\n        __typename\r\n      }\r\n      snapshotResults {\r\n        snapshotId\r\n        snapshotDate\r\n        status\r\n        lastJobId\r\n        matches {\r\n          indicatorIndex\r\n          paths {\r\n            requestedHashDetails {\r\n              hashValue\r\n              hashType\r\n              __typename\r\n            }\r\n            yaraMatchDetails {\r\n              name\r\n              tags\r\n              __typename\r\n            }\r\n            aclDetails\r\n            creationTime\r\n            modificationTime\r\n            path\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        quarantineDetails {\r\n          filesDetails {\r\n            fileName\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        scanStats {\r\n          numFiles\r\n          numFilesScanned\r\n          totalFilesScannedSizeBytes\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}",
                              "variables": {
                                "huntId": "@{body('Parse_Start_IOC_scan_Response')?['data']?['startThreatHunt']?['huntId']}"
                              }
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('access_token')}",
                              "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "path": "/api/graphql",
                            "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Polling_Timeout": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('Limit'), 0)",
                      "limit": {
                        "timeout": "PT900M"
                      },
                      "type": "Until"
                    },
                    "Set_end_date_if_not_provided": {
                      "actions": {
                        "set_default_value_of__end_date": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "EndDate",
                            "value": "@{utcNow()}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Pending_count_for_IOC_scan": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@triggerBody()?['EndDate']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Set_limit_if_not_provided": {
                      "actions": {
                        "set_default_value_of__limit_date": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "InputLimit",
                            "value": 1
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Pending_count_for_IOC_scan": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('InputLimit')",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Set_start_date_if_not_provided": {
                      "actions": {
                        "Get_7_days_ago_time": {
                          "type": "Expression",
                          "kind": "GetPastTime",
                          "inputs": {
                            "interval": 7,
                            "timeUnit": "Day"
                          }
                        },
                        "set_default_value_of__start_date": {
                          "runAfter": {
                            "Get_7_days_ago_time": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "StartDate",
                            "value": "@body('Get_7_days_ago_time')"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Pending_count_for_IOC_scan": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@triggerBody()?['StartDate']",
                              "@null"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "initialization_RadarIOCScanStatus": {
                      "runAfter": {
                        "Set_end_date_if_not_provided": [
                          "Succeeded"
                        ],
                        "Set_limit_if_not_provided": [
                          "Succeeded"
                        ],
                        "Set_start_date_if_not_provided": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "RadarIOCScanStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "initialize_epoch_value_of_end_date": {
                      "runAfter": {
                        "initialize_epoch_value_of_start_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "EpochEndDate",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "initialize_epoch_value_of_start_date": {
                      "runAfter": {
                        "Initialize_LastFieldDate_to_compare_snapshot_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "EpochStartDate",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "save_ioc_scan_result_body_here": {
                      "runAfter": {
                        "Initialize_access_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IOCScanResult",
                            "type": "object",
                            "value": "[variables('TemplateEmptyObject')]"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "RubrikCustomConnector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                        "connectionName": "[[variables('RubrikcustomconnectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
                      },
                      "keyvault_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikIOCScan",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('RubrikcustomconnectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('RubrikcustomconnectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[parameters('tenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[[parameters('keyvaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId6'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId6')]",
                "contentId": "[variables('_playbookContentId6')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion6')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "LogicAppsCustomConnector",
                      "contentId": "[variables('_RubrikCustomConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik IOC Scan",
            "description": "This playbook interacts with Rubrik Security Cloud to scan backups for specified IOCs. This playbook is used by other playbooks that leverage this capability.",
            "prerequisites": [
              "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
              "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "3. Rubrik custom connector needs to be deployed prior to the deployment of this playbook, in the same resource group and region. Relevant instructions can be found in the connector doc page.",
              "4. To perform an IOC scan the IOC YARA rule should be available as a URL.",
              "5. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with unique name",
              "b. Go to KeyVault -> secrets -> Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Click the Custom Connector connection resource",
              "2. Click edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections"
            ],
            "lastUpdateTime": "2022-01-20T00:00:00Z",
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "Scan",
              "Security",
              "Rubrik"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId6')]",
        "contentKind": "Playbook",
        "displayName": "RubrikIOCScan",
        "contentProductId": "[variables('_playbookcontentProductId6')]",
        "id": "[variables('_playbookcontentProductId6')]",
        "version": "[variables('playbookVersion6')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName7')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikPollAsyncResult Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion7')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikPollAsyncResult",
              "type": "string"
            },
            "Rubrik Connector name": {
              "defaultValue": "RubrikCustomConnector",
              "type": "String",
              "metadata": {
                "description": "Rubrik Custom Connector name"
              }
            },
            "keyvaultName": {
              "defaultValue": "RubrikSentinelKeyVault",
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            }
          },
          "variables": {
            "RubrikcustomconnectorConnectionName": "[[concat('Rubrikcustomconnector-', parameters('PlaybookName'))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "BaseUrl": {
                              "type": "string"
                            },
                            "ClusterId": {
                              "type": "string"
                            },
                            "PollingInterval": {
                              "type": "integer"
                            },
                            "PollingTimeout": {
                              "type": "integer"
                            },
                            "RequestId": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Are_the_required_inputs_not_provided": {
                      "actions": {
                        "Invalid_input_response": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": {
                              "error": "Error: Required inputs are not provided"
                            },
                            "statusCode": 400
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Invalid_input_response": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error: Required inputs are not provided"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(triggerBody()?['ClusterId'])",
                              "@true"
                            ]
                          },
                          {
                            "equals": [
                              "@empty(triggerBody()?['RequestId'])",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Authentication": {
                      "runAfter": {
                        "Get_ClientSecret": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "client_id": "@body('Get_ClientId')?['value']",
                          "client_secret": "@body('Get_ClientSecret')?['value']"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/api/client_token"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Does_Get_async_results_get_status_code_200": {
                      "actions": {
                        "Does_Get_async_result_API_response_contain_errors_": {
                          "actions": {
                            "Error_Response_": {
                              "runAfter": {
                                "Set_Get_async_result_API_error_response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Response",
                              "kind": "Http",
                              "inputs": {
                                "body": {
                                  "error": "@{variables('APIStatus')}"
                                },
                                "statusCode": 400
                              }
                            },
                            "Set_Get_async_result_API_error_response": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "APIStatus",
                                "value": "Error:@{body('Get_Async_Results')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Parse_JSON_of_Get_async_results": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('Get_Async_Results')",
                                  "schema": {
                                    "properties": {
                                      "data": {
                                        "properties": {
                                          "vSphereVMAsyncRequestStatus": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "links": {
                                                "items": {
                                                  "properties": {
                                                    "href": {
                                                      "type": "string"
                                                    },
                                                    "rel": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "href",
                                                    "rel"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "status": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              },
                              "Success_Response": {
                                "runAfter": {
                                  "Parse_JSON_of_Get_async_results": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": "@body('Parse_JSON_of_Get_async_results')?['data']?['vSphereVMAsyncRequestStatus']",
                                  "statusCode": 200
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('Get_Async_Results')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Get_Async_Results": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Response": {
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": {
                                "error": "Error:@{body('Get_Async_Results')?['message']}"
                              },
                              "statusCode": "@outputs('Get_Async_Results')['statusCode']"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Get_Async_Results')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Generic_Polling": {
                      "actions": {
                        "Does_GPS_Async_Result_get_status_code_200": {
                          "actions": {
                            "Does_GPS_Async_Result_response_contains_errors": {
                              "actions": {
                                "Set_ERROR_status_for_async_result": {
                                  "runAfter": {
                                    "Set_GPS_Async_Result_API_error_status": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "AsyncResultStatus",
                                    "value": "ERROR"
                                  }
                                },
                                "Set_GPS_Async_Result_API_error_status": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "APIStatus",
                                    "value": "@{body('GPS_Async_Result')?['errors'][0]?['message']}"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Parse_JSON_of_GPS_Async_Result": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('GPS_Async_Result')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "vSphereVMAsyncRequestStatus": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "id": {
                                                    "type": "string"
                                                  },
                                                  "links": {
                                                    "items": {
                                                      "properties": {
                                                        "href": {
                                                          "type": "string"
                                                        },
                                                        "rel": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "href",
                                                        "rel"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "status": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Polling_Interval": {
                                    "runAfter": {
                                      "Update_Async_Result_Status": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Wait",
                                    "inputs": {
                                      "interval": {
                                        "count": "@if(or(empty(string(triggerBody()?['PollingInterval'])),lessOrEquals(triggerBody()?['PollingInterval'],0)), 5, triggerBody()?['PollingInterval']) ",
                                        "unit": "Minute"
                                      }
                                    }
                                  },
                                  "Update_Async_Result_Status": {
                                    "runAfter": {
                                      "Parse_JSON_of_GPS_Async_Result": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "AsyncResultStatus",
                                      "value": "@body('Parse_JSON_of_GPS_Async_Result')?['data']?['vSphereVMAsyncRequestStatus']?['status']"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('GPS_Async_Result')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "GPS_Async_Result": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_Async_result_status_as_ERROR": {
                                "runAfter": {
                                  "Set_Error_message_with_status_code": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "AsyncResultStatus",
                                  "value": "ERROR"
                                }
                              },
                              "Set_Error_message_with_status_code": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "APIStatus",
                                  "value": "StatusCode:@{outputs('GPS_Async_Result')['statusCode']} Error:@{body('GPS_Async_Result')?['message']}"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('GPS_Async_Result')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "GPS_Async_Result": {
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query VSphereVMAsyncRequestStatus($clusterUuid: UUID!, $vSphereVmAsyncRequestStatusId: String!) {\r\n  vSphereVMAsyncRequestStatus(clusterUuid: $clusterUuid, id: $vSphereVmAsyncRequestStatusId) {\r\n    id\r\n    status\r\n    links {\r\n      href\r\n      rel\r\n    }\r\n    error {\r\n      message\r\n    }\r\n  }\r\n}\r\n",
                              "variables": {
                                "clusterUuid": "@{triggerBody()?['ClusterId']}",
                                "vSphereVmAsyncRequestStatusId": "@{triggerBody()?['RequestId']}"
                              }
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('access_token')}",
                              "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_access_token": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@not(equals(or(equals(variables('AsyncResultStatus'), 'QUEUED'), or(equals(variables('AsyncResultStatus'), 'RUNNING'), equals(variables('AsyncResultStatus'), 'ACQUIRING'))), true))",
                      "limit": {
                        "timeout": "@{if(contains(triggerBody(),'PollingTimeout'),concat('PT',triggerBody()['PollingTimeout'],'M'),'PT720M')}"
                      },
                      "type": "Until"
                    },
                    "Get_Async_Results": {
                      "runAfter": {
                        "Generic_Polling": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "query VSphereVMAsyncRequestStatus($clusterUuid: UUID!, $vSphereVmAsyncRequestStatusId: String!) {\r\n  vSphereVMAsyncRequestStatus(clusterUuid: $clusterUuid, id: $vSphereVmAsyncRequestStatusId) {\r\n    id\r\n    status\r\n    links {\r\n      href\r\n      rel\r\n    }\r\n    error {\r\n      message\r\n    }\r\n  }\r\n}\r\n",
                          "variables": {
                            "clusterUuid": "@{triggerBody()?['ClusterId']}",
                            "vSphereVmAsyncRequestStatusId": "@{triggerBody()?['RequestId']}"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}",
                          "Content-Type": "application/json"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    },
                    "Get_ClientId": {
                      "runAfter": {
                        "Are_the_required_inputs_not_provided": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_ClientSecret": {
                      "runAfter": {
                        "Get_ClientId": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Initialize_API_response_status": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "APIStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_AsyncResultStatus": {
                      "runAfter": {
                        "Initialize_API_response_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "AsyncResultStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Polling_Interval": {
                      "runAfter": {
                        "Initialize_AsyncResultStatus": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PollingInterval",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_access_token": {
                      "runAfter": {
                        "Is_Authentication_Failed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token",
                            "type": "string",
                            "value": "@{body('Authentication')?['access_token']}"
                          }
                        ]
                      }
                    },
                    "Initialize_variable": {
                      "runAfter": {
                        "Initialize_Polling_Interval": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "limit",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Is_Authentication_Failed": {
                      "actions": {
                        "Response_2": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": {
                              "error": "@{body('Authentication')?['message']}"
                            },
                            "statusCode": "@outputs('Authentication')['statusCode']"
                          }
                        },
                        "Terminate_2": {
                          "runAfter": {
                            "Response_2": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('Authentication')['statusCode']}",
                              "message": "@{body('Authentication')?['message']}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Authentication": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@outputs('Authentication')['statusCode']",
                                200
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Response_3": {
                      "runAfter": {
                        "Does_Get_async_results_get_status_code_200": [
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": {
                          "error": "@variables('APIStatus')"
                        },
                        "statusCode": 400
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "RubrikCustomConnector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                        "connectionName": "[[variables('RubrikcustomconnectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
                      },
                      "keyvault_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikPollAsyncResult",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('RubrikcustomconnectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('RubrikcustomconnectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[parameters('tenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[[parameters('keyvaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId7'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId7')]",
                "contentId": "[variables('_playbookContentId7')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion7')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "LogicAppsCustomConnector",
                      "contentId": "[variables('_RubrikCustomConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Poll Async Result",
            "description": "This playbook is used by other playbooks to poll for results from some of the asynchronous API calls that are invoked by other playbooks.",
            "prerequisites": [
              "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
              "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "3. Rubrik custom connector needs to be deployed prior to the deployment of this playbook, in the same resource group and region. Relevant instructions can be found in the connector doc page.",
              "4. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with unique name",
              "b. Go to KeyVault -> secrets -> Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Click the Custom Connector connection resource",
              "2. Click edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections"
            ],
            "lastUpdateTime": "2022-01-20T00:00:00Z",
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "Async",
              "Security",
              "Rubrik"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId7')]",
        "contentKind": "Playbook",
        "displayName": "RubrikPollAsyncResult",
        "contentProductId": "[variables('_playbookcontentProductId7')]",
        "id": "[variables('_playbookcontentProductId7')]",
        "version": "[variables('playbookVersion7')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName8')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikRansomwareDiscoveryAndFileRecovery Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion8')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikRansomwareDiscoveryAndFileRecovery",
              "type": "string"
            },
            "Rubrik Connector name": {
              "defaultValue": "RubrikCustomConnector",
              "type": "String",
              "metadata": {
                "description": "Rubrik Custom Connector name"
              }
            },
            "TeamsGroupId": {
              "defaultValue": "TeamsGroupIds",
              "type": "String",
              "metadata": {
                "description": "Id of the Teams Group where the adaptive card will be posted."
              }
            },
            "TeamsChannelId": {
              "defaultValue": "TeamsChannelId",
              "type": "String",
              "metadata": {
                "description": "Id of the Teams Channel where the adaptive card will be posted."
              }
            },
            "keyvaultName": {
              "defaultValue": "RubrikSentinelKeyVault",
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            }
          },
          "variables": {
            "RubrikcustomconnectorConnectionName": "[[concat('Rubrikcustomconnector-', parameters('PlaybookName'))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', parameters('PlaybookName'))]",
            "TeamsConnectionName": "[[concat('Teams-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "BaseUrl": {
                              "type": "string"
                            },
                            "ClusterId": {
                              "type": "string"
                            },
                            "IncidentTime": {
                              "type": "string"
                            },
                            "ObjectId": {
                              "type": "string"
                            },
                            "ObjectName": {
                              "type": "string"
                            },
                            "ObjectType": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Authentication": {
                      "runAfter": {
                        "Get_ClientSecret": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "client_id": "@body('Get_ClientId')?['value']",
                          "client_secret": "@body('Get_ClientSecret')?['value']"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/api/client_token"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Check_if_Polling_Timeout_is_less_than_or_equals_to_0": {
                      "actions": {
                        "Set_default_value_for_polling_timeout": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "PollingTimeout",
                            "value": 720
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Polling_Timeout_for_IOC_Scan": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "lessOrEquals": [
                              "@variables('PollingTimeout')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Check_that_IOC_scan_has_no_error": {
                      "runAfter": {
                        "RubrikIOCScan": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "IOC_Scan_Error_Response_": {
                            "runAfter": {
                              "Set_Error_message_from_IOC_scan_response": [
                                "Succeeded"
                              ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": "@variables('IOCScanResultStatus')",
                              "statusCode": 400
                            }
                          },
                          "Set_Error_message_from_IOC_scan_response": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "IOCScanResultStatus",
                              "value": "Status Error  in IOC scan: @{body('RubrikIOCScan')?['error']}"
                            }
                          },
                          "Terminate": {
                            "runAfter": {
                              "IOC_Scan_Error_Response_": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "message": "Error: @{variables('IOCScanResultStatus')}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(body('RubrikIOCScan')?['error'])",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Collect_IOC_Scan_Data": {
                      "runAfter": {
                        "Initialize_access_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"IOC Scan Data to Perform File Recovery\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate IOC Scan(s) and option to recover file(s) of recoverable snapshot.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nIncident Start Time = @{variables('IncidentTime')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC hash to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC hash \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC path to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC path \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule\",\n            \"isMultiline\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Start date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"Start date \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"End date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"End date \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Time Delta to update the date range of IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"id\": \"Time Delta \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling interval for IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip7\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"id\": \"Polling interval \",\n            \"placeholder\": \"5\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling timeout for IOC Scan\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip8\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"label\": \"In minutes\",\n            \"id\": \"Polling timeout \",\n            \"placeholder\": \"720\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Limit to loop the IOC scan sub-playbook\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip9\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"id\": \"Limit to loop the IOC scan sub-playbook\",\n            \"placeholder\": \"1\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule file URL to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip10\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule file URL \",\n            \"isMultiline\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to include in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip11\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to include \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exclude in the IOC Scan\",\n            \"wrap\": true,\n            \"separator\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip12\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exclude\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exempt in the IOC Scan\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip13\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exempt\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Perform recovery\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip14\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"Yes\",\n                    \"value\": \"Yes\"\n                },\n                {\n                    \"title\": \"No\",\n                    \"value\": \"No\"\n                }\n            ],\n            \"id\": \"Perform recovery\",\n            \"isRequired\": true,\n            \"errorMessage\": \"Please select Performance recovery\",\n            \"value\": \"Yes\",\n            \"style\": \"expanded\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Requested Hash Type\",\n            \"wrap\": true,\n            \"separator\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip15\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"HASH_TYPE_M_D5\",\n                    \"value\": \"HASH_TYPE_M_D5\"\n                },\n                {\n                    \"title\": \"HASH_TYPE_SH_A256\",\n                    \"value\": \"HASH_TYPE_SH_A256\"\n                }\n            ],\n            \"value\": \"HASH_TYPE_M_D5\",\n            \"id\": \"Requested Hash Type\",\n            \"style\": \"expanded\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Scan Name\",\n            \"wrap\": true,\n            \"separator\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip16\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Scan Name\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                            "recipient": {
                              "channelId": "[[concat('', parameters('TeamsChannelId'))]",
                              "groupId": "[[concat('', parameters('TeamsGroupId'))]"
                            },
                            "updateMessage": "Response Saved for IOC Sacn-File Recovery!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Create_Snapshot_for_evidence": {
                      "runAfter": {
                        "Initialize_access_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "mutation TakeVSphereSnapshotMutation($snappableId: String!, $slaID: String) {\r\n    vsphereOnDemandSnapshot(input: { id: $snappableId, config: {slaId: $slaID} }) {\r\n      id\r\n      status\r\n    }\r\n  }",
                          "variables": {
                            "snappableId": "@{variables('ObjectId')}"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}",
                          "Content-Type": "application/json"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    },
                    "Does_Create_Snapshot_get_status_code_200": {
                      "actions": {
                        "Does_Create_Snapshot_API_response_contains_errors": {
                          "actions": {
                            "Set_response_error_message_as_Create_Snapshot_status": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "CreateSnapshotStatus",
                                "value": "Error: @{body('Create_Snapshot_for_evidence')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Is_Snapshot_creation_started": {
                                "actions": {
                                  "Is_the_snapshot_created_successfully": {
                                    "runAfter": {
                                      "Parse_JSON_of_PollAsyncResult": [
                                        "Succeeded"
                                      ]
                                    },
                                    "cases": {
                                      "Case_RUNNING": {
                                        "case": "RUNNING",
                                        "actions": {
                                          "Set_timeout_message_in_status": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "CreateSnapshotStatus",
                                              "value": "Wait for evidence snapshot creation results timed out. Please see incident context for further details."
                                            }
                                          }
                                        }
                                      },
                                      "Case_SUCCESS": {
                                        "case": "SUCCEEDED",
                                        "actions": {
                                          "Set_success_message_in_status": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "CreateSnapshotStatus",
                                              "value": "Evidence snapshot has been created for the VM object."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": {
                                      "actions": {
                                        "Set_error_message": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "CreateSnapshotStatus",
                                            "value": "Evidence snapshot was not created. "
                                          }
                                        }
                                      }
                                    },
                                    "expression": "@if(or(or(equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'QUEUED'),equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'RUNNING')),equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'ACQUIRING')),'RUNNING',if(equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'SUCCEEDED'),'SUCCEEDED','Default'))",
                                    "type": "Switch"
                                  },
                                  "Parse_JSON_of_PollAsyncResult": {
                                    "runAfter": {
                                      "RubrikPollAsyncResult": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('RubrikPollAsyncResult')",
                                      "schema": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "links": {
                                            "items": {
                                              "properties": {
                                                "href": {
                                                  "type": "string"
                                                },
                                                "rel": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "href",
                                                "rel"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "status": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "RubrikPollAsyncResult": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "body": {
                                        "BaseUrl": "@triggerBody()?['BaseUrl']",
                                        "ClusterId": "@variables('ClusterId')",
                                        "PollingInterval": 5,
                                        "PollingTimeout": 720,
                                        "RequestId": "@body('Parse_JSON_of_create_snapshot_')?['data']?['vsphereOnDemandSnapshot']?['id']"
                                      },
                                      "headers": {
                                        "Content-Type": "application/json"
                                      },
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult')]"
                                        }
                                      }
                                    }
                                  },
                                  "Set_Error_for_Poll_Async_Result_in_create_snapshot": {
                                    "runAfter": {
                                      "RubrikPollAsyncResult": [
                                        "Failed"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CreateSnapshotStatus",
                                      "value": "Error Occurred in Poll Async Result"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "Parse_JSON_of_create_snapshot_": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set__error_message_for_snapshot_creation": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CreateSnapshotStatus",
                                        "value": "Evidence snapshot was not created. Please see context for more details."
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "not": {
                                        "equals": [
                                          "@body('Parse_JSON_of_create_snapshot_')?['data']?['vsphereOnDemandSnapshot']?['id']",
                                          "@null"
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Parse_JSON_of_create_snapshot_": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('Create_Snapshot_for_evidence')",
                                  "schema": {
                                    "properties": {
                                      "data": {
                                        "properties": {
                                          "vsphereOnDemandSnapshot": {
                                            "properties": {
                                              "id": {
                                                "type": "string"
                                              },
                                              "status": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('Create_Snapshot_for_evidence')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Create_Snapshot_for_evidence": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_create_snapshot_error_status_with_status_code_not_equal_to_200_": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Status",
                              "value": "Status code:@{outputs('Create_Snapshot_for_evidence')['statusCode']}  Error: @{body('Create_Snapshot_for_evidence')?['message']}"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Create_Snapshot_for_evidence')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_List_all_Snapshots_get_status_code_200": {
                      "actions": {
                        "Does_List_all_Snapshots_response_contain_errors": {
                          "actions": {
                            "Set_response_error_message_as_List_Snapshot_status": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ListSnapshotsStatus",
                                "value": "Error: @{body('List_all_Snapshots')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_success_for_list_all_snapshots": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ListSnapshotsStatus",
                                  "value": "Obtained all snapshots for given objectId."
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@{body('List_all_Snapshots')}",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "List_all_Snapshots": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_error_message_with_status_code_as_List_snapshots_status": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ListSnapshotsStatus",
                              "value": "Status code:@{outputs('List_all_Snapshots')['statusCode']}  Error:@{body('List_all_Snapshots')?['message']} "
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('List_all_Snapshots')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Get_7_days_ago_date": {
                      "runAfter": {
                        "Initialize_access_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "Expression",
                      "kind": "GetPastTime",
                      "inputs": {
                        "interval": 7,
                        "timeUnit": "Day"
                      }
                    },
                    "Get_ClientId": {
                      "runAfter": {
                        "Is_object_type_not_a_VM": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-clientId')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_ClientSecret": {
                      "runAfter": {
                        "Get_ClientId": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Initialize_Cluster_Id": {
                      "runAfter": {
                        "Initialize_Object_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClusterId",
                            "type": "string",
                            "value": "@triggerBody()?['ClusterId']"
                          }
                        ]
                      },
                      "description": "from input of playbook"
                    },
                    "Initialize_Count": {
                      "runAfter": {
                        "Initialize_restoreConfig": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Count",
                            "type": "integer",
                            "value": -1
                          }
                        ]
                      }
                    },
                    "Initialize_IOC_Scan_Result_Status": {
                      "runAfter": {
                        "Initialize_Status_for_IOC_scan_and_Recovery": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IOCScanResultStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_IOC_Yara_rule_to_scan_for": {
                      "runAfter": {
                        "Initialize_Cluster_Id": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IOCYaraRule",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Incident_Time": {
                      "runAfter": {
                        "Initialize_Object_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentTime",
                            "type": "string",
                            "value": "@{triggerBody()?['IncidentTime']}"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Id": {
                      "runAfter": {
                        "Initialize_Object_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectId",
                            "type": "string",
                            "value": "@triggerBody()?['ObjectId']"
                          }
                        ]
                      },
                      "description": "from input of playbook"
                    },
                    "Initialize_Object_Name": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectName",
                            "type": "string",
                            "value": "@{triggerBody()?['ObjectName']}"
                          }
                        ]
                      }
                    },
                    "Initialize_Object_Type": {
                      "runAfter": {
                        "Initialize_Incident_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectType",
                            "type": "string",
                            "value": "@triggerBody()?['ObjectType']"
                          }
                        ]
                      },
                      "description": "Fetch from incident"
                    },
                    "Initialize_Polling_Timeout_for_IOC_Scan": {
                      "runAfter": {
                        "Collect_IOC_Scan_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PollingTimeout",
                            "type": "integer",
                            "value": "@if(empty(body('Collect_IOC_Scan_Data')?['data']?['polling timeout ']),0,int(body('Collect_IOC_Scan_Data')?['data']?['polling timeout ']))"
                          }
                        ]
                      }
                    },
                    "Initialize_Status_for_IOC_scan_and_Recovery": {
                      "runAfter": {
                        "Initialize_IOC_Yara_rule_to_scan_for": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Status",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Status_for_List_all_Snapshot": {
                      "runAfter": {
                        "Initialize_Status_for_Snapshot_Creation": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ListSnapshotsStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Status_for_Snapshot_Creation": {
                      "runAfter": {
                        "Initialize_IOC_Scan_Result_Status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "CreateSnapshotStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_access_token": {
                      "runAfter": {
                        "Is_Authentication_Failed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token",
                            "type": "string",
                            "value": "@{body('Authentication')?['access_token']}"
                          }
                        ]
                      }
                    },
                    "Initialize_config": {
                      "runAfter": {
                        "Initialize_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "config",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_path_for_recovery": {
                      "runAfter": {
                        "Initialize_polling_timeout_for_recovery": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Path",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_polling_timeout_for_recovery": {
                      "runAfter": {
                        "Initialize_Status_for_List_all_Snapshot": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PollingTimeoutRecovery",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_restoreConfig": {
                      "runAfter": {
                        "Initialize_restorePath_for_recovery": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "RestoreConfig",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_restorePath_for_recovery": {
                      "runAfter": {
                        "Initialize_path_for_recovery": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "RestorePath",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Is_Authentication_Failed": {
                      "actions": {
                        "Failed_authentication_Response_": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "Error:@{body('Authentication')?['message']}",
                            "statusCode": "@outputs('Authentication')['statusCode']"
                          }
                        },
                        "Terminate_for_failed_authentication_": {
                          "runAfter": {
                            "Failed_authentication_Response_": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('Authentication')['statusCode']}",
                              "message": "Error:@{body('Authentication')?['message']}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Authentication": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@outputs('Authentication')['statusCode']",
                                200
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Is_IOC_scan_successful": {
                      "runAfter": {
                        "Parse_JSON_of_RubrikIOCScan": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_ERROR": {
                          "case": "ERROR",
                          "actions": {
                            "Set_error_message_for_IOC_scan": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "Status",
                                "value": "There was an error while running the IOC scan."
                              }
                            }
                          }
                        },
                        "Case_FINISHED": {
                          "case": "FINISHED",
                          "actions": {
                            "Are_there_any_recoverable_snapshots": {
                              "actions": {
                                "Is_the_latest_snapshot_infected": {
                                  "actions": {
                                    "Is_recovery_enabled": {
                                      "actions": {
                                        "Collect_Recovery_Data": {
                                          "type": "ApiConnectionWebhook",
                                          "inputs": {
                                            "body": {
                                              "body": {
                                                "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Recovery Data\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate recovery of file(s) of recoverable snapshot.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nNumber of file to be change = @{body('RubrikIOCScan')?['NumOfFile']}\\n\\nIncident Start Time = @{variables('IncidentTime')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to recover from the recoverable snapshot\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to recover\",\n            \"isMultiline\": true,\n            \"isRequired\": true,\n            \"label\": \"required\",\n            \"errorMessage\": \"\\\"Paths to recover\\\" Is required field\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Restore path for the file(s)\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Restore path for the file(s)\",\n            \"isRequired\": true,\n            \"label\": \"required\",\n            \"errorMessage\": \"\\\"Restore path for the file(s)\\\" is required field\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Destination object ID to restore file(s) into\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Destination object ID to restore file\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling interval for recovery asynchronous results\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"5\",\n            \"id\": \"Polling interval for recovery \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling timeout for recovery asynchronous results\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"720\",\n            \"label\": \"In minutes\",\n            \"id\": \"Polling timeout for recovery\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to Block file or not?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"Whether to Block file or not?\",\n            \"value\": \"No\",\n            \"style\": \"expanded\",\n            \"choices\": [\n                {\n                    \"title\": \"No\",\n                    \"value\": \"No\"\n                },\n                {\n                    \"title\": \"Yes\",\n                    \"value\": \"Yes\"\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                                                "recipient": {
                                                  "channelId": "[[concat('', parameters('TeamsChannelId'))]",
                                                  "groupId": "[[concat('', parameters('TeamsGroupId'))]"
                                                },
                                                "updateMessage": "Response saved for File-Recovery data!"
                                              },
                                              "notificationUrl": "@{listCallbackUrl()}"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['teams']['connectionId']"
                                              }
                                            },
                                            "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                          }
                                        },
                                        "Does_Recover_snapshot_files_get_status_code_200": {
                                          "actions": {
                                            "Does_Recover_snapshot_files_contains_errors": {
                                              "actions": {
                                                "Set_response_error_message_as_Recover_files_status": {
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "Status",
                                                    "value": "Error: @{body('Recover_snapshot_files')?['errors'][0]?['message']}"
                                                  }
                                                }
                                              },
                                              "else": {
                                                "actions": {
                                                  "Has_recovery_started": {
                                                    "actions": {
                                                      "Is_recovery_completed": {
                                                        "actions": {
                                                          "Set_success_message_for_file_recovery": {
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                              "name": "Status",
                                                              "value": "@{concat('The files have been successfully recovered from the Snapshot with ID ',body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshot']?['id'])}"
                                                            }
                                                          }
                                                        },
                                                        "runAfter": {
                                                          "Parse_JSON_for_PollAsyncResult2": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "else": {
                                                          "actions": {
                                                            "Set_error_message_for_file_recovery": {
                                                              "type": "SetVariable",
                                                              "inputs": {
                                                                "name": "Status",
                                                                "value": "Recovery of snapshot files for given snapshot ID did not complete."
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "expression": {
                                                          "and": [
                                                            {
                                                              "equals": [
                                                                "@body('Parse_JSON_for_PollAsyncResult2')?['status']",
                                                                "SUCCEEDED"
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        "type": "If"
                                                      },
                                                      "Parse_JSON_for_PollAsyncResult2": {
                                                        "runAfter": {
                                                          "RubrikPollAsyncResult_2": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "type": "ParseJson",
                                                        "inputs": {
                                                          "content": "@body('RubrikPollAsyncResult_2')",
                                                          "schema": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "id": {
                                                                "type": "string"
                                                              },
                                                              "links": {
                                                                "items": {
                                                                  "properties": {
                                                                    "href": {
                                                                      "type": "string"
                                                                    },
                                                                    "rel": {
                                                                      "type": "string"
                                                                    }
                                                                  },
                                                                  "required": [
                                                                    "href",
                                                                    "rel"
                                                                  ],
                                                                  "type": "object"
                                                                },
                                                                "type": "array"
                                                              },
                                                              "status": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        }
                                                      },
                                                      "RubrikPollAsyncResult_2": {
                                                        "type": "Workflow",
                                                        "inputs": {
                                                          "body": {
                                                            "BaseUrl": "@triggerBody()?['BaseUrl']",
                                                            "ClusterId": "@variables('ClusterId')",
                                                            "PollingInterval": "@if(or(empty(string(body('Collect_Recovery_Data')?['data']?['polling interval for recovery '])),lessOrEquals(int(body('Collect_Recovery_Data')?['data']?['polling interval for recovery ']),0)),5,int(body('Collect_Recovery_Data')?['data']?['polling interval for recovery ']))",
                                                            "PollingTimeout": "@variables('PollingTimeoutRecovery')",
                                                            "RequestId": "@body('Parse_JSON_for_recover_snapshot_files')?['data']?['vsphereVMRecoverFilesNew']?['id']"
                                                          },
                                                          "headers": {
                                                            "Content-Type": "application/json"
                                                          },
                                                          "host": {
                                                            "triggerName": "manual",
                                                            "workflow": {
                                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult')]"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "Set_error_message_for_poll_async_result_in_file_recovery": {
                                                        "runAfter": {
                                                          "RubrikPollAsyncResult_2": [
                                                            "Failed"
                                                          ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                          "name": "Status",
                                                          "value": "Error in Poll Async Result"
                                                        }
                                                      }
                                                    },
                                                    "runAfter": {
                                                      "Parse_JSON_for_recover_snapshot_files": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "else": {
                                                      "actions": {
                                                        "Set_error_message_for_recovery_not_started": {
                                                          "type": "SetVariable",
                                                          "inputs": {
                                                            "name": "Status",
                                                            "value": "@{concat('Recovery of snapshot using recoverable snapshot id ',body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshot']?['id'],' did not start.')}"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "expression": {
                                                      "and": [
                                                        {
                                                          "not": {
                                                            "equals": [
                                                              "@empty(body('Parse_JSON_for_recover_snapshot_files')?['data']?['vsphereVmRecoverFilesNew']?['id'])",
                                                              true
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "type": "If"
                                                  },
                                                  "Parse_JSON_for_recover_snapshot_files": {
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                      "content": "@body('Recover_snapshot_files')",
                                                      "schema": {
                                                        "properties": {
                                                          "data": {
                                                            "properties": {
                                                              "vsphereVmRecoverFilesNew": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "id": {
                                                                    "type": "string"
                                                                  },
                                                                  "status": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "contains": [
                                                      "@body('Recover_snapshot_files')",
                                                      "errors"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            }
                                          },
                                          "runAfter": {
                                            "Recover_snapshot_files": [
                                              "Succeeded",
                                              "Failed"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Set_error_message_with_status_code_as_File_Recovery_status_": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "Status",
                                                  "value": "Status code:@{outputs('Recover_snapshot_files')['statusCode']} Error:@{body('Recover_snapshot_files')?['message']}"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@outputs('Recover_snapshot_files')['statusCode']",
                                                  200
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "For_each": {
                                          "foreach": "@variables('RestorePath')",
                                          "actions": {
                                            "Append_to_array_variable": {
                                              "runAfter": {
                                                "Increment_variable": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "AppendToArrayVariable",
                                              "inputs": {
                                                "name": "RestoreConfig",
                                                "value": {
                                                  "restorePathPair": {
                                                    "path": "@{variables('Path')[variables('Count')]}",
                                                    "restorePath": "@{variables('RestorePath')[variables('Count')]}"
                                                  }
                                                }
                                              }
                                            },
                                            "Increment_variable": {
                                              "type": "IncrementVariable",
                                              "inputs": {
                                                "name": "Count",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Set_restore_path": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Foreach",
                                          "runtimeConfiguration": {
                                            "concurrency": {
                                              "repetitions": 1
                                            }
                                          }
                                        },
                                        "Recover_snapshot_files": {
                                          "runAfter": {
                                            "Set_config": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Http",
                                          "inputs": {
                                            "body": {
                                              "query": "mutation RecoverVSphereVMFilesMutation($input: VsphereVmRecoverFilesNewInput!) {\r\n  vsphereVmRecoverFilesNew(input: $input) {\r\n    id\r\n    status\r\n    __typename\r\n  }\r\n}",
                                              "variables": {
                                                "input": {
                                                  "clusterUuid": "@{variables('ClusterId')}",
                                                  "config": "@variables('config')",
                                                  "id": "@{body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshotid']}"
                                                }
                                              }
                                            },
                                            "headers": {
                                              "Authorization": "Bearer @{variables('access_token')}",
                                              "Content-Type": "application/json"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                              }
                                            },
                                            "method": "POST",
                                            "path": "/api/graphql",
                                            "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                          }
                                        },
                                        "Set_config": {
                                          "runAfter": {
                                            "For_each": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "config",
                                            "value": {
                                              "destObjectId": "@body('Collect_Recovery_Data')?['data']?['destination object ID to restore file']",
                                              "domainName": "[variables('blanks')]",
                                              "password": "[variables('blanks')]",
                                              "restoreConfig": "@variables('RestoreConfig')",
                                              "shouldSaveCredentials": false,
                                              "shouldUseAgent": true,
                                              "username": "[variables('blanks')]"
                                            }
                                          }
                                        },
                                        "Set_path": {
                                          "runAfter": {
                                            "check_if_polling_timeout_for_recovery_is_empty_or_less_than_or_equal_to_0__": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "Path",
                                            "value": "@array(split(body('Collect_Recovery_Data')?['data']?['paths to recover'],','))"
                                          }
                                        },
                                        "Set_restore_path": {
                                          "runAfter": {
                                            "Set_path": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "RestorePath",
                                            "value": "@array(split(body('Collect_Recovery_Data')?['data']?['restore path for the file(s)'],','))"
                                          }
                                        },
                                        "check_if_polling_timeout_for_recovery_is_empty_or_less_than_or_equal_to_0__": {
                                          "actions": {
                                            "Set_default_value_for_polling_timeout_for_recovery": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "PollingTimeoutRecovery",
                                                "value": 720
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Collect_Recovery_Data": [
                                              "Succeeded"
                                            ]
                                          },
                                          "expression": {
                                            "or": [
                                              {
                                                "equals": [
                                                  "@empty(body('Collect_Recovery_Data')?['data']?['polling timeout for recovery'])",
                                                  true
                                                ]
                                              },
                                              {
                                                "lessOrEquals": [
                                                  "@int(body('Collect_Recovery_Data')?['data']?['polling timeout for recovery'])",
                                                  0
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_message_for_recovery_is_not_enabled": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "Status",
                                              "value": "Recovery is not enabled. so recovery won't be performed."
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@body('Collect_IOC_Scan_Data')?['data']?['perform recovery']",
                                              "Yes"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_no_recovery_message_for_IOC_scan_and_recovery": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "Status",
                                          "value": "The latest snapshot for the given time period is not infected so no recovery is required."
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@body('Parse_JSON_of_RubrikIOCScan')?['isLatestInfected']",
                                          true
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Set_records_not_found_message": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "Status",
                                      "value": "No recoverable snapshots were found with the given IOC scan arguments."
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@empty(body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshotid'])",
                                        true
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          }
                        },
                        "Case_RUNNING": {
                          "case": "RUNNING",
                          "actions": {
                            "Set_timeout_message_for_IOC_scan": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "Status",
                                "value": "Wait for IOC scan results timed out."
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "Set_unknown_status_message_for_IOC_scan": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Status",
                              "value": "Unknown status was received for the IOC scan."
                            }
                          }
                        }
                      },
                      "expression": "@if(contains(body('Parse_JSON_of_RubrikIOCScan')?['RadarIOCScanStatus'],'FINISHED'),'FINISHED',if(contains(body('Parse_JSON_of_RubrikIOCScan')?['RadarIOCScanStatus'],'RUNNING'),'RUNNING',if(contains(body('Parse_JSON_of_RubrikIOCScan')?['RadarIOCScanStatus'],'ERROR'),'ERROR','Default')))",
                      "type": "Switch"
                    },
                    "Is_object_type_not_a_VM": {
                      "actions": {
                        "Error_Response_for_not_a_VM_object": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exiting?",
                            "statusCode": 400
                          }
                        },
                        "error_for_not_a_VM_object": {
                          "runAfter": {
                            "Error_Response_for_not_a_VM_object": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exiting?"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_config": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "contains": [
                                "@variables('ObjectType')",
                                "Vm"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "List_all_Snapshots": {
                      "runAfter": {
                        "Get_7_days_ago_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "query GetVSphereVmSnapshotInfoQuery($id: UUID!, $snapshotGroupBy: CdmSnapshotGroupByEnum!, $missedSnapshotGroupBy: MissedSnapshotGroupByTime!, $timeRange: TimeRangeInput!, $timezoneOffset: Float!, $clusterConnected: Boolean!) {\r\n  snappable: vSphereVmNew(fid: $id) {\r\n    id\r\n    missedSnapshotGroupByConnection(\r\n      groupBy: $missedSnapshotGroupBy\r\n      filter: {timeRange: $timeRange}\r\n      timezoneOffset: $timezoneOffset\r\n    ) @include(if: $clusterConnected) {\r\n      nodes {\r\n        groupByInfo {\r\n          ... on TimeRangeWithUnit {\r\n            unit\r\n            start\r\n            end\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        missedSnapshotConnection {\r\n          count\r\n          nodes {\r\n            date\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    snapshotGroupByConnection(\r\n      groupBy: $snapshotGroupBy\r\n      filter: {timeRange: $timeRange}\r\n      timezoneOffset: $timezoneOffset\r\n    ) {\r\n      nodes {\r\n        groupByInfo {\r\n          ... on TimeRangeWithUnit {\r\n            unit\r\n            start\r\n            end\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        snapshotConnection {\r\n          count\r\n          nodes {\r\n            id\r\n            isIndexed\r\n            isUnindexable\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}",
                          "variables": {
                            "clusterConnected": true,
                            "id": "@{variables('ObjectId')}",
                            "missedSnapshotGroupBy": "DAY",
                            "snapshotGroupBy": "Day",
                            "timeRange": {
                              "end": "@{utcNow()}",
                              "start": "@{body('Get_7_days_ago_date')}"
                            },
                            "timezoneOffset": 5.5
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    },
                    "Parse_JSON_of_RubrikIOCScan": {
                      "runAfter": {
                        "Check_that_IOC_scan_has_no_error": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('RubrikIOCScan')",
                        "schema": {
                          "properties": {
                            "NumOfFile": {
                              "type": "integer"
                            },
                            "RadarIOCScan": {
                              "type": [
                                "object",
                                "null"
                              ]
                            },
                            "RadarIOCScanStatus": {
                              "type": "string"
                            },
                            "RecoverableSnapshotid": {
                              "type": "string"
                            },
                            "error": {
                              "type": "string"
                            },
                            "isLatestInfected": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "Does_Create_Snapshot_get_status_code_200": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Does_List_all_Snapshots_get_status_code_200": [
                          "Succeeded",
                          "TimedOut",
                          "Failed",
                          "Skipped"
                        ],
                        "Is_IOC_scan_successful": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": {
                          "Creat Snapshot Status": "@variables('CreateSnapshotStatus')",
                          "IOCScan ResultStatus": "@variables('IOCScanResultStatus')",
                          "IOCScan and Recovery Status": "@variables('Status')",
                          "List Snapshot Status": "@variables('ListSnapshotsStatus')"
                        },
                        "statusCode": "@if(or(contains(variables('Status'),'Error'),or(contains(variables('ListSnapshotsStatus'),'Error'),or(contains(variables('IOCScanResultStatus'),'Error'),contains(variables('CreateSnapshotStatus'),'Error')))),400,200)"
                      }
                    },
                    "RubrikIOCScan": {
                      "runAfter": {
                        "Whether_to_fetch_Yara_rule(s)_from_a_URLs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Workflow",
                      "inputs": {
                        "body": {
                          "BaseUrl": "@triggerBody()?['BaseUrl']",
                          "ClusterId": "@variables('ClusterId')",
                          "EndDate": "@body('Collect_IOC_Scan_Data')?['data']?['end date ']",
                          "IOCHash": "@body('Collect_IOC_Scan_Data')?['data']?['ioc hash ']",
                          "IOCPath": "@body('Collect_IOC_Scan_Data')?['data']?['ioc path ']",
                          "IOCYaraRule": "@variables('IOCYaraRule')",
                          "IncidentTime": "@variables('IncidentTime')",
                          "Limit": "@body('Collect_IOC_Scan_Data')?['data']?['limit to loop the IOC scan sub-playbook']",
                          "ObjectId": "@variables('ObjectId')",
                          "ObjectName": "@variables('ObjectName')",
                          "PathsToExclude": "@body('Collect_IOC_Scan_Data')?['data']?['paths to exclude']",
                          "PathsToExempt": "@body('Collect_IOC_Scan_Data')?['data']?['paths to exempt']",
                          "PathsToInclude": "@body('Collect_IOC_Scan_Data')?['data']?['paths to include ']",
                          "PollingInterval": "@body('Collect_IOC_Scan_Data')?['data']?['polling interval ']",
                          "PollingTimeout": "@variables('PollingTimeout')",
                          "RequestedHashType": "@body('Collect_IOC_Scan_Data')?['data']?['requested Hash Type']",
                          "ScanName": "@body('Collect_IOC_Scan_Data')?['data']?['scan Name']",
                          "StartDate": "@body('Collect_IOC_Scan_Data')?['data']?['start date ']",
                          "TimeDelta": "@{body('Collect_IOC_Scan_Data')?['data']?['time Delta ']}"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "host": {
                          "triggerName": "manual",
                          "workflow": {
                            "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikIOCScan')]"
                          }
                        }
                      }
                    },
                    "Whether_to_fetch_Yara_rule(s)_from_a_URLs": {
                      "actions": {
                        "Fetch_Yara_rule(s)_from_file_URLs": {
                          "type": "Http",
                          "inputs": {
                            "method": "GET",
                            "uri": "@body('Collect_IOC_Scan_Data')?['data']?['ioc Yara rule file URL ']"
                          }
                        },
                        "Set_IOC_YaraRule": {
                          "runAfter": {
                            "Fetch_Yara_rule(s)_from_file_URLs": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "IOCYaraRule",
                            "value": "@{body('Fetch_Yara_rule(s)_from_file_URLs')}"
                          }
                        }
                      },
                      "runAfter": {
                        "Check_if_Polling_Timeout_is_less_than_or_equals_to_0": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_default_value_of_IOC_Yara_Rule": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "IOCYaraRule",
                              "value": "@body('Collect_IOC_Scan_Data')?['data']?['ioc Yara rule']"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@body('Collect_IOC_Scan_Data')?['data']?['ioc Yara rule file URL ']",
                                "@null"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "RubrikCustomConnector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                        "connectionName": "[[variables('RubrikcustomconnectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
                      },
                      "keyvault_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikRansomwareDiscoveryAndFileRecovery",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('RubrikcustomconnectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('RubrikcustomconnectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[parameters('tenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[[parameters('keyvaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId8'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId8')]",
                "contentId": "[variables('_playbookContentId8')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion8')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "LogicAppsCustomConnector",
                      "contentId": "[variables('_RubrikCustomConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Ransomware Discovery and File Recovery",
            "description": "This playbook interacts with Rubrik Security Cloud to (1) optionally preserve evidence by creating an on-demand snapshot of the object, (2) identify a potential recovery point by scanning backups for specified IOCs, and (3) supporting file level recovery.",
            "prerequisites": [
              "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
              "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "3. Rubrik custom connector needs to be deployed prior to the deployment of this playbook, in the same resource group and region. Relevant instructions can be found in the connector doc page.",
              "4. To perform an IOC scan the IOC YARA rule should be available.",
              "5. Obtain Teams GroupId and ChannelId",
              "6. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with unique name",
              "b. Go to KeyVault -> secrets -> Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively",
              "7. Make sure that RubrikIOCScan and RubrikPollAsyncResult playbook is deployed before deploying RubrikRansomwareDiscoveryAndFileRecovery playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Click the Custom Connector connection resource",
              "2. Click edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections"
            ],
            "lastUpdateTime": "2022-01-20T00:00:00Z",
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "Recovery",
              "Ransomware Discovery",
              "Security",
              "Rubrik"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId8')]",
        "contentKind": "Playbook",
        "displayName": "RubrikRansomwareDiscoveryAndFileRecovery",
        "contentProductId": "[variables('_playbookcontentProductId8')]",
        "id": "[variables('_playbookcontentProductId8')]",
        "version": "[variables('playbookVersion8')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName9')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikRansomwareDiscoveryAndVMRecovery Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion9')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikRansomwareDiscoveryAndVMRecovery",
              "type": "string"
            },
            "Rubrik Connector name": {
              "defaultValue": "RubrikCustomConnector",
              "type": "String",
              "metadata": {
                "description": "Rubrik Custom Connector name"
              }
            },
            "keyvaultName": {
              "defaultValue": "RubrikSentinelKeyVault",
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            },
            "TeamsGroupId": {
              "defaultValue": "TeamsGroupIds",
              "type": "String",
              "metadata": {
                "description": "Id of the Teams Group where the adaptive card will be posted."
              }
            },
            "TeamsChannelId": {
              "defaultValue": "TeamsChannelId",
              "type": "String",
              "metadata": {
                "description": "Id of the Teams Channel where the adaptive card will be posted."
              }
            }
          },
          "variables": {
            "RubrikcustomconnectorConnectionName": "[[concat('Rubrikcustomconnector-', parameters('PlaybookName'))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', parameters('PlaybookName'))]",
            "TeamsConnectionName": "[[concat('Teams-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "BaseUrl": {
                              "type": "string"
                            },
                            "ClusterId": {
                              "type": "string"
                            },
                            "IncidentTime": {
                              "type": "string"
                            },
                            "ObjectId": {
                              "type": "string"
                            },
                            "ObjectName": {
                              "type": "string"
                            },
                            "ObjectType": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Authentication": {
                      "runAfter": {
                        "ClientSecret": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "client_id": "@body('ClientId')?['value']",
                          "client_secret": "@body('ClientSecret')?['value']"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/api/client_token"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Check_if_URLs_is_provided_to_fetch_yara_rule": {
                      "actions": {
                        "Fetch_yara_rule_from_URLs": {
                          "type": "Http",
                          "inputs": {
                            "method": "GET",
                            "uri": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc Yara rule file URL']"
                          }
                        },
                        "Set_variable_8": {
                          "runAfter": {
                            "Fetch_yara_rule_from_URLs": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Yara Rule",
                            "value": "@{body('Fetch_yara_rule_from_URLs')}"
                          }
                        }
                      },
                      "runAfter": {
                        "check_if_polling_time_out_is_less_then_or_equal_to_0_or_not": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@empty(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc Yara rule file URL'])",
                                "@true"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Check_response_has_error_or_not": {
                      "runAfter": {
                        "RubrikIOCScan": [
                          "Succeeded",
                          "Failed",
                          "TimedOut"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Response_2": {
                            "runAfter": {
                              "Until_2": [
                                "Succeeded"
                              ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": "IOC Scan has error: @{body('RubrikIOCScan')?['error']}",
                              "statusCode": 400
                            }
                          },
                          "Set_IOC_Scan_ErrorMessage": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ErrorMessage",
                              "value": "IOC Scan has error: @{body('RubrikIOCScan')?['error']}"
                            }
                          },
                          "Terminate_6": {
                            "runAfter": {
                              "Response_2": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "message": "IOC Scan not completed: @{body('RubrikIOCScan')?['error']}"
                              },
                              "runStatus": "Failed"
                            }
                          },
                          "Until_2": {
                            "actions": {
                              "Delay_until_2": {
                                "type": "Wait",
                                "inputs": {
                                  "until": {
                                    "timestamp": "@addToTime('1970-01-01T00:00:00Z', int(add(int(div(sub(ticks(utcNow()),ticks('1970-01-01Z00:00:00')),10000000)), 10)), 'second')"
                                  }
                                }
                              }
                            },
                            "runAfter": {
                              "Set_IOC_Scan_ErrorMessage": [
                                "Succeeded"
                              ]
                            },
                            "expression": "@equals(variables('Flow1SkipStatus'), true)",
                            "limit": {
                              "count": 60,
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(body('RubrikIOCScan')?['error'])",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Check_status_code_in_response_of_Get_VM_metadata": {
                      "actions": {
                        "Check_if__Get_VM_metadata_contains_any_error_in_replay": {
                          "actions": {
                            "Set_variable_23": {
                              "runAfter": {
                                "Set_variable_3": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "Flow2SkipStatus",
                                "value": "@true"
                              }
                            },
                            "Set_variable_3": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ErrorMessage",
                                "value": "@{body('Get_VM_metadata')?['errors'][0]?['message']}"
                              }
                            },
                            "Terminate_4": {
                              "runAfter": {
                                "Until": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Terminate",
                              "inputs": {
                                "runError": {
                                  "message": "@variables('ErrorMessage')"
                                },
                                "runStatus": "Failed"
                              }
                            },
                            "Until": {
                              "actions": {
                                "Delay_until": {
                                  "type": "Wait",
                                  "inputs": {
                                    "until": {
                                      "timestamp": "@addToTime('1970-01-01T00:00:00Z', int(add(int(div(sub(ticks(utcNow()),ticks('1970-01-01Z00:00:00')),10000000)), 10)), 'second')"
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "Set_variable_23": [
                                  "Succeeded"
                                ]
                              },
                              "expression": "@equals(variables('Flow1SkipStatus'), true)",
                              "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                              },
                              "type": "Until"
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('Get_VM_metadata')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Get_VM_metadata": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_Error_message": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ErrorMessage",
                              "value": "Status Code:  @{outputs('Get_VM_metadata')['statusCode']}, Error message: @{body('Get_VM_metadata')?['message']}"
                            }
                          },
                          "Set_Flow2skip_status": {
                            "runAfter": {
                              "Set_Error_message": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Flow2SkipStatus",
                              "value": "@true"
                            }
                          },
                          "Terminate_7": {
                            "runAfter": {
                              "Until_3": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "@{outputs('Get_VM_metadata')['statusCode']}",
                                "message": "@{body('Get_VM_metadata')?['message']}"
                              },
                              "runStatus": "Failed"
                            }
                          },
                          "Until_3": {
                            "actions": {
                              "Delay_until_3": {
                                "type": "Wait",
                                "inputs": {
                                  "until": {
                                    "timestamp": "@addToTime('1970-01-01T00:00:00Z', int(add(int(div(sub(ticks(utcNow()),ticks('1970-01-01Z00:00:00')),10000000)), 10)), 'second')"
                                  }
                                }
                              }
                            },
                            "runAfter": {
                              "Set_Flow2skip_status": [
                                "Succeeded"
                              ]
                            },
                            "expression": "@equals(variables('Flow1SkipStatus'), true)",
                            "limit": {
                              "count": 60,
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Get_VM_metadata')?['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "ClientId": {
                      "runAfter": {
                        "Is_Object_Type_VM": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "ClientSecret": {
                      "runAfter": {
                        "ClientId": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "ClusterId": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClusterId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Cluster_Name": {
                      "runAfter": {
                        "Incident_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClusterName",
                            "type": "string",
                            "value": "-"
                          }
                        ]
                      }
                    },
                    "Collect_IOC_scan_and_general_recovery_data": {
                      "runAfter": {
                        "Set_Cluster_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"IOC Scan to Perform VM Recovery\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate IOC Scan(s) and recovery.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nIncident Start Time = @{variables('IncidentTime')}\\n\\nCluster Name = @{variables('ClusterName')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC hash to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC hash to scan for\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC path to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC path to scan for\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule to scan for\",\n            \"isMultiline\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule file URL to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule file URL\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Start date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"Start date to initiate\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"End date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"End date to initiate\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Time Delta to update the date range of IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip7\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"id\": \"Time Delta\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling interval for IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip8\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"5\",\n            \"id\": \"Polling interval for IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling timeout for IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip9\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"720\",\n            \"label\": \"In minutes\",\n            \"id\": \"Polling timeout for IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling interval for recovery asynchronous results\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip10\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"5\",\n            \"id\": \"Polling interval for recovery\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling timeout for recovery asynchronous results\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip11\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"720\",\n            \"id\": \"Polling timeout for recovery\",\n            \"label\": \"In minutes\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Limit to loop the IOC scan sub-playbook\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip12\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"0\",\n            \"id\": \"Limit to loop the IOC scan sub-playbook\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to include in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip13\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to include in the IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exclude in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip14\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exclude in the IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exempt in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip15\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exempt in the IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to live-mount or export a recoverable snapshot?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip16\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"live-mount or export\",\n            \"value\": \"Live-Mount\",\n            \"style\": \"expanded\",\n            \"choices\": [\n                {\n                    \"title\": \"Live-Mount\",\n                    \"value\": \"Live-Mount\"\n                },\n                {\n                    \"title\": \"Export\",\n                    \"value\": \"Export\"\n                },\n                {\n                    \"title\": \"No Recovery\",\n                    \"value\": \"No Recovery\"\n                }\n            ],\n            \"isRequired\": true,\n            \"errorMessage\": \"This field id required\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Scan Name\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip17\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Scan Name\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                            "recipient": {
                              "channelId": "[[concat('', parameters('TeamsChannelId'))]",
                              "groupId": "[[concat('', parameters('TeamsGroupId'))]"
                            },
                            "updateMessage": "Response Saved for IOC Scan-VM Recovery!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Create_Snapshot_for_evidence": {
                      "runAfter": {
                        "Flow_2_Skip_Status": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "mutation TakeVSphereSnapshotMutation($snappableId: String!, $slaID: String) {\r\n    vsphereOnDemandSnapshot(input: { id: $snappableId, config: {slaId: $slaID} }) {\r\n      id\r\n      status\r\n    }\r\n  }",
                          "variables": {
                            "snappableId": "@{triggerBody()?['ObjectId']}"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}",
                          "Content-Type": "application/json"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    },
                    "Does_Create_Snapshot_for_evidence_get_status_code_200": {
                      "actions": {
                        "Does_Create_Snapshot_for_evidence_API_response_contains_errors": {
                          "actions": {
                            "Set_1_skip_status_for_this_flow_": {
                              "runAfter": {
                                "Set_error_message_of_API": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "Flow1SkipStatus",
                                "value": "@true"
                              }
                            },
                            "Set_error_message_of_API": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ErrorMessage1",
                                "value": "@{body('Create_Snapshot_for_evidence')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Has_snapshot_creation_started": {
                                "actions": {
                                  "Is_the_snapshot_created_successfully": {
                                    "actions": {
                                      "Set_variable_2_error_message_": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "ErrorMessage1",
                                          "value": "Snapshot Crested successfully"
                                        }
                                      },
                                      "Set_variable_skip_flow": {
                                        "runAfter": {
                                          "Set_variable_2_error_message_": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "Flow1SkipStatus",
                                          "value": "@true"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_response_of_RubrikPollAsyncResult": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "set_error_message_if_RUNNING_or_else_condition": {
                                          "actions": {
                                            "Set_error_message_for_RUNNING_condition": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "ErrorMessage1",
                                                "value": "Wait for evidence snapshot creation results timed out. Please see incident context for further details."
                                              }
                                            },
                                            "Set_variable_30": {
                                              "runAfter": {
                                                "Set_error_message_for_RUNNING_condition": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "Flow1SkipStatus",
                                                "value": "@true"
                                              }
                                            }
                                          },
                                          "else": {
                                            "actions": {
                                              "Set_error_message_for_else_condition": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "ErrorMessage1",
                                                  "value": "Evidence snapshot was not created. Please see context for more details."
                                                }
                                              },
                                              "Set_variable_31": {
                                                "runAfter": {
                                                  "Set_error_message_for_else_condition": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "Flow1SkipStatus",
                                                  "value": "@true"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@body('Parse_response_of_RubrikPollAsyncResult')?['data']?['vSphereVMAsyncRequestStatus']?['status']",
                                                  "RUNNING"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_response_of_RubrikPollAsyncResult')?['status']",
                                            "SUCCEEDED"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_response_of_RubrikPollAsyncResult": {
                                    "runAfter": {
                                      "RubrikPollAsyncResult_3": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('RubrikPollAsyncResult_3')",
                                      "schema": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "links": {
                                            "items": {
                                              "properties": {
                                                "href": {
                                                  "type": "string"
                                                },
                                                "rel": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "href",
                                                "rel"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "status": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "RubrikPollAsyncResult_3": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "body": {
                                        "BaseUrl": "@triggerBody()?['BaseUrl']",
                                        "ClusterId": "@triggerBody()?['ClusterId']",
                                        "PollingInterval": 4,
                                        "PollingTimeout": 720,
                                        "RequestId": "@body('Parse_Response_of_Create_Snapshot_for_evidence')?['data']?['vsphereOnDemandSnapshot']?['id']"
                                      },
                                      "headers": {
                                        "Content-Type": "application/json"
                                      },
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult')]"
                                        }
                                      }
                                    }
                                  },
                                  "Set_Error_message_if_poll_async_gets_failed": {
                                    "runAfter": {
                                      "RubrikPollAsyncResult_3": [
                                        "Skipped",
                                        "Failed",
                                        "TimedOut"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "ErrorMessage1",
                                      "value": "Error in Rubrik Poll Async Result Playbook"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "Parse_Response_of_Create_Snapshot_for_evidence": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_Errormessage": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "ErrorMessage1",
                                        "value": "Evidence snapshot was not created. Please see context for more details."
                                      }
                                    },
                                    "Set_variable_28": {
                                      "runAfter": {
                                        "Set_Errormessage": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "Flow1SkipStatus",
                                        "value": "@true"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "not": {
                                        "equals": [
                                          "@body('Parse_Response_of_Create_Snapshot_for_evidence')?['data']?['vsphereOnDemandSnapshot']?['id']",
                                          "@null"
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Parse_Response_of_Create_Snapshot_for_evidence": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('Create_Snapshot_for_evidence')",
                                  "schema": {
                                    "properties": {
                                      "data": {
                                        "properties": {
                                          "vsphereOnDemandSnapshot": {
                                            "properties": {
                                              "id": {
                                                "type": "string"
                                              },
                                              "status": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('Create_Snapshot_for_evidence')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Create_Snapshot_for_evidence": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_error_message_on_failed_status_of_create_snapshot_for_evidence": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ErrorMessage1",
                              "value": "No snapshots created for evidence."
                            }
                          },
                          "Set_skip_status_for_this_flow": {
                            "runAfter": {
                              "Set_error_message_on_failed_status_of_create_snapshot_for_evidence": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Flow1SkipStatus",
                              "value": "@true"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Create_Snapshot_for_evidence')?['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Flow_1_Skip_Status": {
                      "runAfter": {
                        "access_token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Flow1SkipStatus",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Flow_2_Skip_Status": {
                      "runAfter": {
                        "Flow_1_Skip_Status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Flow2SkipStatus",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Get_VM_metadata": {
                      "runAfter": {
                        "Flow_2_Skip_Status": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "query VSphereDetailQuery($id: UUID!) {\r\n  vSphereDetailData: vSphereVmNew(fid: $id) {\r\n    id\r\n    authorizedOperations\r\n    name\r\n    isRelic\r\n    effectiveSlaDomain {\r\n      ...EffectiveSLADomainFragment\r\n      __typename\r\n    }\r\n    effectiveSlaSourceObject {\r\n      fid\r\n      name\r\n      objectType\r\n      __typename\r\n    }\r\n    pendingSla {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    protectionDate\r\n    reportWorkload {\r\n      id\r\n      logicalBytes\r\n      physicalBytes\r\n      archiveStorage\r\n      __typename\r\n    }\r\n    cluster {\r\n      id\r\n      name\r\n      status\r\n      version\r\n      lastConnectionTime\r\n      defaultAddress\r\n      ...ClusterNodeConnectionFragment\r\n      ...ClusterStateFragment\r\n      ...ClusterGlobalManagerFragment\r\n      __typename\r\n    }\r\n    primaryClusterLocation {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    arrayIntegrationEnabled\r\n    snapshotConsistencyMandate\r\n    agentStatus {\r\n      agentStatus\r\n      __typename\r\n    }\r\n    preBackupScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    postBackupScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    postSnapScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    logicalPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    physicalPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    vsphereTagPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    oldestSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      __typename\r\n    }\r\n    totalSnapshots: snapshotConnection {\r\n      count\r\n      __typename\r\n    }\r\n    replicatedObjects {\r\n      id\r\n      primaryClusterLocation {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      cluster {\r\n        name\r\n        id\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestArchivedSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      archivalLocations {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestReplicatedSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      replicationLocations {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      __typename\r\n    }\r\n    onDemandSnapshotCount\r\n    vmwareToolsInstalled\r\n    cdmLink\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment EffectiveSLADomainFragment on SlaDomain {\r\n  id\r\n  name\r\n  ... on ClusterSlaDomain {\r\n    fid\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterNodeConnectionFragment on Cluster {\r\n  clusterNodeConnection {\r\n    nodes {\r\n      id\r\n      status\r\n      ipAddress\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterStateFragment on Cluster {\r\n  state {\r\n    connectedState\r\n    clusterRemovalState\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterGlobalManagerFragment on Cluster {\r\n  passesConnectivityCheck\r\n  globalManagerConnectivityStatus {\r\n    urls {\r\n      url\r\n      isReachable\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  connectivityLastUpdated\r\n  __typename\r\n}",
                          "variables": {
                            "id": "@{triggerBody()?['ObjectId']}"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}",
                          "Content-Type": "application/json"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    },
                    "Incident_Time": {
                      "runAfter": {
                        "ObjectName": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentTime",
                            "type": "string",
                            "value": "@{triggerBody()?['IncidentTime']}"
                          }
                        ]
                      }
                    },
                    "Initialize_DatastoreId": {
                      "runAfter": {
                        "Initialize_HostId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "DatastoreId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_Message_for_flow_Start_IOC_Scan": {
                      "runAfter": {
                        "Initialize_Error_Message_for_flow_of_creating_snapshot": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ErrorMessage",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_Message_for_flow_of_creating_snapshot": {
                      "runAfter": {
                        "Cluster_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ErrorMessage1",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Esxi_ClusterId": {
                      "runAfter": {
                        "Initialize_DatastoreId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "EsxiClusterId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_HostId": {
                      "runAfter": {
                        "Parse_Response_of_Get_VM_metadata": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "HostId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_polling_timeout_for_ioc_scan": {
                      "runAfter": {
                        "Collect_IOC_scan_and_general_recovery_data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Polling Timeout",
                            "type": "integer",
                            "value": "@if(empty(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling timeout for IOC Scan']),0,int(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling timeout for IOC Scan']))"
                          }
                        ]
                      }
                    },
                    "Initialize_yara_Rule": {
                      "runAfter": {
                        "Initialize_polling_timeout_for_ioc_scan": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Yara Rule",
                            "type": "string",
                            "value": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc Yara rule to scan for']"
                          }
                        ]
                      }
                    },
                    "Is_Authentication_Failed": {
                      "actions": {
                        "Response_3": {
                          "runAfter": {
                            "Set_Error_Message_2": [
                              "Succeeded"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "@body('Authentication')?['message']",
                            "statusCode": "@body('Authentication')?['code']"
                          }
                        },
                        "Set_Error_Message_2": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ErrorMessage",
                            "value": "Status Code:  @{body('Authentication')?['code']} , Error message:  @{body('Authentication')?['message']}"
                          }
                        },
                        "Terminate_2": {
                          "runAfter": {
                            "Response_3": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{body('Authentication')?['code']}",
                              "message": "@{body('Authentication')?['message']}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Authentication": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@outputs('Authentication')['statusCode']",
                                200
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Is_IOC_Scan_successful_(check_for_ERROR)": {
                      "actions": {
                        "Set_variable_5": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ErrorMessage",
                            "value": "There was an error while running the IOC scan. Please see incident context for further details."
                          }
                        }
                      },
                      "runAfter": {
                        "Response_RubrikIOCScan": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@body('Response_RubrikIOCScan')?['RadarIOCScanStatus']",
                              "ERROR"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Is_IOC_Scan_successful_(check_for_FINISHED)": {
                      "actions": {
                        "Whether_to_perform_recovery": {
                          "actions": {
                            "Is_the_latest_snapshot_infected": {
                              "actions": {
                                "Are_there_any_recoverable_snapshots": {
                                  "actions": {
                                    "Default_value_of_HostId_and_Esxi_ClusterId": {
                                      "foreach": "@body('Parse_response_of_Get_HostID')?['data']?['vSphereDetailData']?['physicalPath']",
                                      "actions": {
                                        "Check_for_Cluster_ObjectType": {
                                          "actions": {
                                            "Set_Default_value_of_Esxi_ClusterId": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "EsxiClusterId",
                                                "value": "@items('Default_value_of_HostId_and_Esxi_ClusterId')?['fid']"
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Check_for_Host_ObjectType": [
                                              "Succeeded"
                                            ]
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@items('Default_value_of_HostId_and_Esxi_ClusterId')?['objectType']",
                                                  "VSphereComputeCluster"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Check_for_Host_ObjectType": {
                                          "actions": {
                                            "Set_Default_value_of_HostId": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "HostId",
                                                "value": "@items('Default_value_of_HostId_and_Esxi_ClusterId')?['fid']"
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@items('Default_value_of_HostId_and_Esxi_ClusterId')?['objectType']",
                                                  "VSphereHost"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      },
                                      "runAfter": {
                                        "Parse_response_of_Get_HostID": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Foreach"
                                    },
                                    "Get_HostID": {
                                      "type": "Http",
                                      "inputs": {
                                        "body": {
                                          "query": "query VSphereDetailQuery($id: UUID!) {\r\n  vSphereDetailData: vSphereVmNew(fid: $id) {\r\n    id\r\n    authorizedOperations\r\n    name\r\n    isRelic\r\n    effectiveSlaDomain {\r\n      ...EffectiveSLADomainFragment\r\n      __typename\r\n    }\r\n    effectiveSlaSourceObject {\r\n      fid\r\n      name\r\n      objectType\r\n      __typename\r\n    }\r\n    pendingSla {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    protectionDate\r\n    reportWorkload {\r\n      id\r\n      logicalBytes\r\n      physicalBytes\r\n      archiveStorage\r\n      __typename\r\n    }\r\n    cluster {\r\n      id\r\n      name\r\n      status\r\n      version\r\n      lastConnectionTime\r\n      defaultAddress\r\n      ...ClusterNodeConnectionFragment\r\n      ...ClusterStateFragment\r\n      ...ClusterGlobalManagerFragment\r\n      __typename\r\n    }\r\n    primaryClusterLocation {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    arrayIntegrationEnabled\r\n    snapshotConsistencyMandate\r\n    agentStatus {\r\n      agentStatus\r\n      __typename\r\n    }\r\n    preBackupScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    postBackupScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    postSnapScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    logicalPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    physicalPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    vsphereTagPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    oldestSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      __typename\r\n    }\r\n    totalSnapshots: snapshotConnection {\r\n      count\r\n      __typename\r\n    }\r\n    replicatedObjects {\r\n      id\r\n      primaryClusterLocation {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      cluster {\r\n        name\r\n        id\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestArchivedSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      archivalLocations {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestReplicatedSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      replicationLocations {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      __typename\r\n    }\r\n    onDemandSnapshotCount\r\n    vmwareToolsInstalled\r\n    cdmLink\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment EffectiveSLADomainFragment on SlaDomain {\r\n  id\r\n  name\r\n  ... on ClusterSlaDomain {\r\n    fid\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterNodeConnectionFragment on Cluster {\r\n  clusterNodeConnection {\r\n    nodes {\r\n      id\r\n      status\r\n      ipAddress\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterStateFragment on Cluster {\r\n  state {\r\n    connectedState\r\n    clusterRemovalState\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterGlobalManagerFragment on Cluster {\r\n  passesConnectivityCheck\r\n  globalManagerConnectivityStatus {\r\n    urls {\r\n      url\r\n      isReachable\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  connectivityLastUpdated\r\n  __typename\r\n}",
                                          "variables": {
                                            "id": "@{triggerBody()?['ObjectId']}"
                                          }
                                        },
                                        "headers": {
                                          "Authorization": "Bearer @{variables('access_token')}",
                                          "Content-Type": "application/json"
                                        },
                                        "method": "POST",
                                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                      }
                                    },
                                    "Get_HostID_contains_200_statuscode": {
                                      "runAfter": {
                                        "Get_HostID": [
                                          "Succeeded",
                                          "Failed"
                                        ]
                                      },
                                      "else": {
                                        "actions": {
                                          "Response_4": {
                                            "runAfter": {
                                              "Set_Error_from_GetHostID": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Response",
                                            "kind": "Http",
                                            "inputs": {
                                              "body": "@body('Get_HostID')?['message']",
                                              "statusCode": "@outputs('Get_HostID')['statusCode']"
                                            }
                                          },
                                          "Set_Error_from_GetHostID": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "ErrorMessage",
                                              "value": "Status Code : @{outputs('Get_HostID')['statusCode']}, message: @{body('Get_HostID')?['message']}"
                                            }
                                          },
                                          "Terminate_8": {
                                            "runAfter": {
                                              "Response_4": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Terminate",
                                            "inputs": {
                                              "runError": {
                                                "code": "@{outputs('Get_HostID')['statusCode']}",
                                                "message": "@{body('Get_HostID')?['message']}"
                                              },
                                              "runStatus": "Failed"
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@outputs('Get_HostID')['statusCode']",
                                              200
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    },
                                    "Has_recovery_started": {
                                      "actions": {
                                        "Is_recovery_successfully_completed": {
                                          "actions": {
                                            "Response_13": {
                                              "type": "Response",
                                              "kind": "Http",
                                              "inputs": {
                                                "body": "Recovery successfully completed.",
                                                "statusCode": 200
                                              }
                                            },
                                            "Terminate_3": {
                                              "runAfter": {
                                                "Response_13": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Terminate",
                                              "inputs": {
                                                "runStatus": "Succeeded"
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "RubrikPollAsyncResult_2": [
                                              "Succeeded",
                                              "Failed"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Response_14": {
                                                "runAfter": {
                                                  "Set_Error_in_Recovery_Poll_Async": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "Response",
                                                "kind": "Http",
                                                "inputs": {
                                                  "body": "@body('RubrikPollAsyncResult_2')?['error']?['message']",
                                                  "statusCode": 200
                                                }
                                              },
                                              "Set_Error_in_Recovery_Poll_Async": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "ErrorMessage",
                                                  "value": "@{body('RubrikPollAsyncResult_2')?['error']?['message']}"
                                                }
                                              },
                                              "Terminate_17": {
                                                "runAfter": {
                                                  "Response_14": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "Terminate",
                                                "inputs": {
                                                  "runError": {
                                                    "code": "400",
                                                    "message": "@variables('ErrorMessage')"
                                                  },
                                                  "runStatus": "Failed"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@body('RubrikPollAsyncResult_2')?['status']",
                                                  "SUCCEEDED"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "RubrikPollAsyncResult_2": {
                                          "type": "Workflow",
                                          "inputs": {
                                            "body": {
                                              "BaseUrl": "@triggerBody()?['BaseUrl']",
                                              "ClusterId": "@triggerBody()?['ClusterId']",
                                              "PollingInterval": "@if(or(empty(string(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for recovery'])),lessOrEquals(int(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for recovery']),0)),5,int(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for recovery']))",
                                              "PollingTimeout": "@variables('Polling Timeout')",
                                              "RequestId": "@{if(empty(body('Parse_Response_of_Live-Mount_recovered_snapshot')?['data']?['vSphereVMInitiateLiveMountV2']?['id']),body('Parse_JSON')?['data']?['vSphereVMExportSnapshotV2']?['id'],body('Parse_Response_of_Live-Mount_recovered_snapshot')?['data']?['vSphereVMInitiateLiveMountV2']?['id'])}"
                                            },
                                            "host": {
                                              "triggerName": "manual",
                                              "workflow": {
                                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult')]"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "runAfter": {
                                        "Which_recovery_to_perform": [
                                          "Succeeded"
                                        ]
                                      },
                                      "else": {
                                        "actions": {
                                          "Response_11": {
                                            "type": "Response",
                                            "kind": "Http",
                                            "inputs": {
                                              "body": "Recovery Not Started.",
                                              "statusCode": 400
                                            }
                                          },
                                          "Terminate_5": {
                                            "runAfter": {
                                              "Response_11": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Terminate",
                                            "inputs": {
                                              "runError": {
                                                "message": "Recovery Not Started."
                                              },
                                              "runStatus": "Failed"
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "or": [
                                          {
                                            "not": {
                                              "equals": [
                                                "@body('Live-Mount_recovered_snapshot')?['data']",
                                                "@null"
                                              ]
                                            }
                                          },
                                          {
                                            "not": {
                                              "equals": [
                                                "@body('Export_recovered_snapshot')?['data']",
                                                "@null"
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    },
                                    "Parse_response_of_Get_HostID": {
                                      "runAfter": {
                                        "Get_HostID_contains_200_statuscode": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ParseJson",
                                      "inputs": {
                                        "content": "@body('Get_HostID')",
                                        "schema": {
                                          "properties": {
                                            "data": {
                                              "properties": {
                                                "vSphereDetailData": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "agentStatus": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "agentStatus": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "arrayIntegrationEnabled": {
                                                      "type": "boolean"
                                                    },
                                                    "authorizedOperations": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "cdmLink": {
                                                      "type": "string"
                                                    },
                                                    "cluster": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "clusterNodeConnection": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "nodes": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "id": {
                                                                    "type": "string"
                                                                  },
                                                                  "ipAddress": {
                                                                    "type": "string"
                                                                  },
                                                                  "status": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "id",
                                                                  "status",
                                                                  "ipAddress",
                                                                  "__typename"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "connectivityLastUpdated": {
                                                          "type": "string"
                                                        },
                                                        "globalManagerConnectivityStatus": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "urls": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "isReachable": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "url": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "url",
                                                                  "isReachable",
                                                                  "__typename"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "lastConnectionTime": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "passesConnectivityCheck": {
                                                          "type": "boolean"
                                                        },
                                                        "state": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "clusterRemovalState": {
                                                              "type": "string"
                                                            },
                                                            "connectedState": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "status": {
                                                          "type": "string"
                                                        },
                                                        "version": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "effectiveSlaDomain": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "cluster": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "fid": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "effectiveSlaSourceObject": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "fid": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "objectType": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "isRelic": {
                                                      "type": "boolean"
                                                    },
                                                    "logicalPath": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "fid": {
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "objectType": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "fid",
                                                          "objectType",
                                                          "name",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "newestSnapshot": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "date": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "isIndexed": {
                                                          "type": "boolean"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "oldestSnapshot": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "date": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "isIndexed": {
                                                          "type": "boolean"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "onDemandSnapshotCount": {
                                                      "type": "integer"
                                                    },
                                                    "physicalPath": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "fid": {
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "objectType": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "fid",
                                                          "objectType",
                                                          "name",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "primaryClusterLocation": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "protectionDate": {
                                                      "type": "string"
                                                    },
                                                    "replicatedObjects": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "cluster": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "id": {
                                                                "type": "string"
                                                              },
                                                              "name": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "id": {
                                                            "type": "string"
                                                          },
                                                          "primaryClusterLocation": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "id": {
                                                                "type": "string"
                                                              },
                                                              "name": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "required": [
                                                          "id",
                                                          "primaryClusterLocation",
                                                          "cluster",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "reportSnappable": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "archiveStorage": {
                                                          "type": "integer"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "logicalBytes": {
                                                          "type": "integer"
                                                        },
                                                        "physicalBytes": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "snapshotConsistencyMandate": {
                                                      "type": "string"
                                                    },
                                                    "totalSnapshots": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "count": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "vmwareToolsInstalled": {
                                                      "type": "boolean"
                                                    },
                                                    "vsphereTagPath": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "fid": {
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "objectType": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "fid",
                                                          "objectType",
                                                          "name",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      }
                                    },
                                    "Which_recovery_to_perform": {
                                      "actions": {
                                        "Collect_recovery_data_for_live-mounting_VM": {
                                          "type": "ApiConnectionWebhook",
                                          "inputs": {
                                            "body": {
                                              "body": {
                                                "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Live-Mount VM data\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate live mounting of a recoverable snapshot.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nIncident Start Time = @{variables('IncidentTime')}\\n\\nCluster Name = @{variables('ClusterName')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Name to search for a Vsphere host that will be used for live mounting\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Name to search for a Vsphere host that will be used for live mounting\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Vsphere datastore name to use for live mounting\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Vsphere datastore name to use for live mounting\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to power on the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"power on the live-mounted VM?\",\n            \"value\": \"False\",\n            \"style\": \"expanded\",\n            \"choices\": [\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                },\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                }\n            ],\n            \"isRequired\": true,\n            \"errorMessage\": \"This field id required\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether mac addresses of network devices be kept on the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"value\": \"True\",\n            \"style\": \"expanded\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\",\n            \"label\": \"required\",\n            \"id\": \"mac addresses of network devices be kept on the live-mounted VM?\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to recover vSphere tags in the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"recover vSphere tags in the live-mounted VM?\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This filed is required\",\n            \"label\": \"required\",\n            \"value\": \"True\",\n            \"style\": \"expanded\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to remove the network devices of the original VM in the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                },\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"remove the network devices of the original VM in the live-mounted VM?\",\n            \"isRequired\": true,\n            \"value\": \"False\",\n            \"errorMessage\": \"This field is required\",\n            \"style\": \"expanded\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to disable networking in the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip7\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"disable networking in the live-mounted VM?\",\n            \"label\": \"required\",\n            \"value\": \"True\",\n            \"style\": \"expanded\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Live-mounted VM name\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip8\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Live-mounted VM name\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                                                "recipient": {
                                                  "channelId": "[[concat('', parameters('TeamsChannelId'))]",
                                                  "groupId": "[[concat('', parameters('TeamsGroupId'))]"
                                                },
                                                "updateMessage": "Response saved for Live-mount!"
                                              },
                                              "notificationUrl": "@{listCallbackUrl()}"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['teams']['connectionId']"
                                              }
                                            },
                                            "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                          }
                                        },
                                        "Does_Live-Mount_recovered_snapshot_get_status_code_200": {
                                          "actions": {
                                            "Does_Live-Mount_recovered_snapshot_API_response_contains_errors": {
                                              "actions": {
                                                "Response_8": {
                                                  "runAfter": {
                                                    "Set_Error_in_LiveMount_Recovery_API": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "Response",
                                                  "kind": "Http",
                                                  "inputs": {
                                                    "body": "@body('Live-Mount_recovered_snapshot')?['errors'][0]?['message']",
                                                    "statusCode": 200
                                                  }
                                                },
                                                "Set_Error_in_LiveMount_Recovery_API": {
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "ErrorMessage",
                                                    "value": "@{body('Live-Mount_recovered_snapshot')?['errors'][0]?['message']}"
                                                  }
                                                },
                                                "Terminate_10": {
                                                  "runAfter": {
                                                    "Response_8": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "Terminate",
                                                  "inputs": {
                                                    "runError": {
                                                      "message": "@{body('Live-Mount_recovered_snapshot')?['errors'][0]?['message']}"
                                                    },
                                                    "runStatus": "Failed"
                                                  }
                                                }
                                              },
                                              "else": {
                                                "actions": {
                                                  "Parse_Response_of_Live-Mount_recovered_snapshot": {
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                      "content": "@body('Live-Mount_recovered_snapshot')",
                                                      "schema": {
                                                        "properties": {
                                                          "data": {
                                                            "properties": {
                                                              "vsphereVmInitiateLiveMountV2": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "id": {
                                                                    "type": "string"
                                                                  },
                                                                  "status": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "errors": {
                                                            "items": {
                                                              "properties": {
                                                                "message": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "required": [
                                                                "message"
                                                              ],
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          }
                                                        },
                                                        "type": "object"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "contains": [
                                                      "@body('Live-Mount_recovered_snapshot')",
                                                      "errors"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            }
                                          },
                                          "runAfter": {
                                            "Live-Mount_recovered_snapshot": [
                                              "Succeeded",
                                              "Failed"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Response_5": {
                                                "runAfter": {
                                                  "Set_Error_in_LiveMount_Recovery": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "Response",
                                                "kind": "Http",
                                                "inputs": {
                                                  "body": "@body('Live-Mount_recovered_snapshot')?['message']",
                                                  "statusCode": "@outputs('Live-Mount_recovered_snapshot')['statusCode']"
                                                }
                                              },
                                              "Set_Error_in_LiveMount_Recovery": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "ErrorMessage",
                                                  "value": "Status Code: @{outputs('Live-Mount_recovered_snapshot')['statusCode']}, Error Message: @{body('Live-Mount_recovered_snapshot')?['message']}"
                                                }
                                              },
                                              "Terminate_9": {
                                                "runAfter": {
                                                  "Response_5": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "Terminate",
                                                "inputs": {
                                                  "runError": {
                                                    "code": "@{outputs('Live-Mount_recovered_snapshot')?['statusCode']}",
                                                    "message": "@{body('Live-Mount_recovered_snapshot')?['message']}"
                                                  },
                                                  "runStatus": "Failed"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@outputs('Live-Mount_recovered_snapshot')?['statusCode']",
                                                  200
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Is_Vsphere_host_name_provided": {
                                          "actions": {
                                            "Does_Get_Vsphere_Host_ID_get_status_code_200": {
                                              "actions": {
                                                "Check_that_API_response_does_not_contain_any_errors": {
                                                  "actions": {
                                                    "Set_API_error_Get_hostId_LiveMount": {
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                        "name": "ErrorMessage",
                                                        "value": "@{body('Get_Vsphere_Host_ID')?['errors'][0]?['message']}"
                                                      }
                                                    }
                                                  },
                                                  "else": {
                                                    "actions": {
                                                      "Response_of_Get_Vsphere_Host_ID": {
                                                        "type": "ParseJson",
                                                        "inputs": {
                                                          "content": "@body('Get_Vsphere_Host_ID')",
                                                          "schema": {
                                                            "properties": {
                                                              "data": {
                                                                "properties": {
                                                                  "vSphereHostConnection": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "edges": {
                                                                        "items": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "node": {
                                                                              "properties": {
                                                                                "__typename": {
                                                                                  "type": "string"
                                                                                },
                                                                                "id": {
                                                                                  "type": "string"
                                                                                },
                                                                                "name": {
                                                                                  "type": "string"
                                                                                },
                                                                                "physicalPath": {
                                                                                  "items": {
                                                                                    "properties": {
                                                                                      "__typename": {
                                                                                        "type": "string"
                                                                                      },
                                                                                      "fid": {
                                                                                        "type": "string"
                                                                                      },
                                                                                      "name": {
                                                                                        "type": "string"
                                                                                      },
                                                                                      "objectType": {
                                                                                        "type": "string"
                                                                                      }
                                                                                    },
                                                                                    "required": [
                                                                                      "fid",
                                                                                      "name",
                                                                                      "objectType",
                                                                                      "__typename"
                                                                                    ],
                                                                                    "type": "object"
                                                                                  },
                                                                                  "type": "array"
                                                                                }
                                                                              },
                                                                              "type": "object"
                                                                            }
                                                                          },
                                                                          "required": [
                                                                            "node",
                                                                            "__typename"
                                                                          ],
                                                                          "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                      },
                                                                      "pageInfo": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "endCursor": {
                                                                            "type": "string"
                                                                          },
                                                                          "hasNextPage": {
                                                                            "type": "boolean"
                                                                          },
                                                                          "hasPreviousPage": {
                                                                            "type": "boolean"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        }
                                                      },
                                                      "Set_HostId_LiveMount": {
                                                        "runAfter": {
                                                          "Response_of_Get_Vsphere_Host_ID": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                          "name": "HostId",
                                                          "value": "@{body('Response_of_Get_Vsphere_Host_ID')?['data']?['vSphereHostConnection']?['edges'][0]?['node']?['id']}"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "expression": {
                                                    "and": [
                                                      {
                                                        "contains": [
                                                          "@body('Get_Vsphere_Host_ID')",
                                                          "errors"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "type": "If"
                                                }
                                              },
                                              "runAfter": {
                                                "Get_Vsphere_Host_ID": [
                                                  "Succeeded",
                                                  "Failed"
                                                ]
                                              },
                                              "else": {
                                                "actions": {
                                                  "Set_Error_from_Get_Vsphere_HostID_LiveMount": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "ErrorMessage",
                                                      "value": "Status Code:  @{outputs('Get_Vsphere_Host_ID')?['statusCode']}, Error Message:  @{body('Get_Vsphere_Host_ID')?['message']}"
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@outputs('Get_Vsphere_Host_ID')?['statusCode']",
                                                      200
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "Get_Vsphere_Host_ID": {
                                              "type": "Http",
                                              "inputs": {
                                                "body": {
                                                  "query": "query vSphereHostsQuery($first: Int!, $after: String, $filter: [Filter!], $sortBy: HierarchySortByField, $sortOrder: SortOrder) {\r\n  vSphereHostConnection(\r\n    first: $first\r\n    after: $after\r\n    filter: $filter\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        ...VSphereHostNameFragment\r\n        ...VSphereHostPhysicalPathFragment\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n \r\nfragment VSphereHostNameFragment on VsphereHost {\r\n  name\r\n  __typename\r\n}\r\n \r\nfragment VSphereHostPhysicalPathFragment on VsphereHost {\r\n  physicalPath {\r\n    fid\r\n    name\r\n    objectType\r\n    __typename\r\n  }\r\n  __typename\r\n}",
                                                  "variables": {
                                                    "filter": [
                                                      {
                                                        "field": "CLUSTER_ID",
                                                        "texts": [
                                                          "@{triggerBody()?['ClusterId']}"
                                                        ]
                                                      },
                                                      {
                                                        "field": "NAME",
                                                        "texts": [
                                                          "@{body('Collect_recovery_data_for_live-mounting_VM')?['data']?['name to search for a Vsphere host that will be used for live mounting']}"
                                                        ]
                                                      }
                                                    ],
                                                    "first": 1000,
                                                    "sortBy": "NAME",
                                                    "sortOrder": "DESC"
                                                  }
                                                },
                                                "headers": {
                                                  "Authorization": "Bearer @{variables('access_token')}",
                                                  "Content-Type": "application/json"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                                  }
                                                },
                                                "method": "POST",
                                                "path": "/api/graphql",
                                                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Collect_recovery_data_for_live-mounting_VM": [
                                              "Succeeded"
                                            ]
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "not": {
                                                  "equals": [
                                                    "@body('Collect_recovery_data_for_live-mounting_VM')?['data']?['name to search for a Vsphere host that will be used for live mounting']",
                                                    "@null"
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "Live-Mount_recovered_snapshot": {
                                          "runAfter": {
                                            "Is_Vsphere_host_name_provided": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Http",
                                          "inputs": {
                                            "body": {
                                              "query": "\r\n  mutation vSphereLiveMountMutation($snappableId: String!, $hostId: String, $clusterId: String, $resourcePoolId: String, $snapshotFid: String, $shouldRecoverTags: Boolean!, $keepMacAddresses: Boolean!, $powerOn: Boolean!, $removeNetworkDevices: Boolean!, $vmName: String, $vNicBindings: [VmwareVnicBindingInfoV2Input!], $recoveryPoint: DateTime, $shouldMigrateImmediately: Boolean!, $migrationConfig: RelocateMountConfigV2Input) {\r\n    vsphereVmInitiateLiveMountV2(\r\n      input: {\r\n        id: $snappableId, config: { hostId: $hostId, resourcePoolId: $resourcePoolId, clusterId: $clusterId, shouldRecoverTags: $shouldRecoverTags, vNicBindings: $vNicBindings, requiredRecoveryParameters: { snapshotId: $snapshotFid, recoveryPoint: $recoveryPoint}mountExportSnapshotJobCommonOptionsV2: { keepMacAddresses: $keepMacAddresses, powerOn: $powerOn, removeNetworkDevices: $removeNetworkDevices, vmName: $vmName}, shouldMigrateImmediately: $shouldMigrateImmediately, migrationConfig: $migrationConfig}}\r\n    ) {\r\n        id\r\n      status\r\n      __typename\r\n    }\r\n  }\r\n",
                                              "variables": {
                                                "hostId": "@variables('HostId')",
                                                "keepMacAddresses": false,
                                                "powerOn": false,
                                                "removeNetworkDevices": false,
                                                "shouldMigrateImmediately": false,
                                                "shouldRecoverTags": true,
                                                "snappableId": "@{triggerBody()?['ObjectId']}",
                                                "snapshotFid": "@{body('Response_RubrikIOCScan')?['RecoverableSnapshotid']}",
                                                "vmName": "@body('Collect_recovery_data_for_live-mounting_VM')?['data']?['live-mounted VM name']"
                                              }
                                            },
                                            "headers": {
                                              "Authorization": "Bearer @{variables('access_token')}",
                                              "Content-Type": "application/json"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                              }
                                            },
                                            "method": "POST",
                                            "path": "/api/graphql",
                                            "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                          }
                                        }
                                      },
                                      "runAfter": {
                                        "Default_value_of_HostId_and_Esxi_ClusterId": [
                                          "Succeeded"
                                        ]
                                      },
                                      "else": {
                                        "actions": {
                                          "Check_Export_recovered_snapshot_response_code": {
                                            "actions": {
                                              "Check_that_Export_Recovery_API_contains_errors": {
                                                "actions": {
                                                  "Response_10": {
                                                    "runAfter": {
                                                      "Set_Error_for_Export_Recovery_API": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "Response",
                                                    "kind": "Http",
                                                    "inputs": {
                                                      "body": "@body('Export_recovered_snapshot')?['errors'][0]?['message']",
                                                      "statusCode": 200
                                                    }
                                                  },
                                                  "Set_Error_for_Export_Recovery_API": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "ErrorMessage",
                                                      "value": "@{body('Export_recovered_snapshot')?['errors'][0]?['message']}"
                                                    }
                                                  },
                                                  "Terminate_15": {
                                                    "runAfter": {
                                                      "Response_10": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "Terminate",
                                                    "inputs": {
                                                      "runError": {
                                                        "message": "@{body('Export_recovered_snapshot')?['errors'][0]?['message']}"
                                                      },
                                                      "runStatus": "Failed"
                                                    }
                                                  }
                                                },
                                                "else": {
                                                  "actions": {
                                                    "Parse_JSON": {
                                                      "type": "ParseJson",
                                                      "inputs": {
                                                        "content": "@body('Export_recovered_snapshot')",
                                                        "schema": {
                                                          "properties": {
                                                            "data": {
                                                              "properties": {
                                                                "vSphereVMExportSnapshotV2": {
                                                                  "properties": {
                                                                    "id": {
                                                                      "type": "string"
                                                                    },
                                                                    "status": {
                                                                      "type": "string"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "expression": {
                                                  "and": [
                                                    {
                                                      "contains": [
                                                        "@body('Export_recovered_snapshot')",
                                                        "errors"
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "type": "If"
                                              }
                                            },
                                            "runAfter": {
                                              "Export_recovered_snapshot": [
                                                "Succeeded"
                                              ]
                                            },
                                            "else": {
                                              "actions": {
                                                "Response_7": {
                                                  "runAfter": {
                                                    "Set_Error_for_Export_Recovery": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "Response",
                                                  "kind": "Http",
                                                  "inputs": {
                                                    "body": "@variables('ErrorMessage')",
                                                    "statusCode": "@outputs('Export_recovered_snapshot')['statusCode']"
                                                  }
                                                },
                                                "Set_Error_for_Export_Recovery": {
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "ErrorMessage",
                                                    "value": "Status Code: @{outputs('Export_recovered_snapshot')['statusCode']}, message: @{body('Export_recovered_snapshot')?['errors'][0]?['message']}"
                                                  }
                                                },
                                                "Terminate_16": {
                                                  "runAfter": {
                                                    "Response_7": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "Terminate",
                                                  "inputs": {
                                                    "runError": {
                                                      "code": "@{outputs('Export_recovered_snapshot')['statusCode']}"
                                                    },
                                                    "runStatus": "Failed"
                                                  }
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@outputs('Export_recovered_snapshot')['statusCode']",
                                                    200
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Collect_recovery_data_for_exporting_VM": {
                                            "type": "ApiConnectionWebhook",
                                            "inputs": {
                                              "body": {
                                                "body": {
                                                  "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Export VM data\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate exporting of a recoverable snapshot.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nIncident Start Time = @{variables('IncidentTime')}\\n\\nCluster Name = @{variables('ClusterName')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Name to search for a Vsphere host that will be used while exporting\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Name to search for a Vsphere host in exporting\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Name to search for a Vsphere datastore that will be used for exporting\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Name to search for a Vsphere datastore in exporting\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to power on the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"power on the exported VM?\",\n            \"value\": \"False\",\n            \"style\": \"expanded\",\n            \"choices\": [\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                },\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                }\n            ],\n            \"isRequired\": true,\n            \"errorMessage\": \"This field id required\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether mac addresses of network devices be kept on the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"value\": \"True\",\n            \"style\": \"expanded\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\",\n            \"label\": \"required\",\n            \"id\": \"mac addresses of network devices be kept on the exported VM\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to recover vSphere tags in the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"recover vSphere tags in the exported VM?\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This filed is required\",\n            \"label\": \"required\",\n            \"value\": \"True\",\n            \"style\": \"expanded\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to remove the network devices of the original VM in the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                },\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"remove the network devices of the original VM in the exported VM?\",\n            \"isRequired\": true,\n            \"value\": \"False\",\n            \"errorMessage\": \"This field is required\",\n            \"style\": \"expanded\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to disable networking in the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip7\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"disable networking in the exported VM?\",\n            \"label\": \"required\",\n            \"value\": \"True\",\n            \"style\": \"expanded\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Exported VM name\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip8\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Exported VM name\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                                                  "recipient": {
                                                    "channelId": "[[concat('', parameters('TeamsChannelId'))]",
                                                    "groupId": "[[concat('', parameters('TeamsGroupId'))]"
                                                  },
                                                  "updateMessage": "Response saved for Export-VM!"
                                                },
                                                "notificationUrl": "@{listCallbackUrl()}"
                                              },
                                              "host": {
                                                "connection": {
                                                  "name": "@parameters('$connections')['teams']['connectionId']"
                                                }
                                              },
                                              "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                            }
                                          },
                                          "Does_Get_Vsphere_Datastore_ID_get_status_code_200": {
                                            "actions": {
                                              "Does_Get_Vsphere_Datastore_ID_API_response_contains_errors": {
                                                "actions": {
                                                  "Response_9": {
                                                    "runAfter": {
                                                      "Set_Error_for_Get_DataStoreId_Export_API": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "Response",
                                                    "kind": "Http",
                                                    "inputs": {
                                                      "body": "@body('Get_Vsphere_Datastore_ID')?['errors'][0]?['message']",
                                                      "statusCode": 200
                                                    }
                                                  },
                                                  "Set_Error_for_Get_DataStoreId_Export_API": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "ErrorMessage",
                                                      "value": "@{body('Get_Vsphere_Datastore_ID')?['errors'][0]?['message']}"
                                                    }
                                                  },
                                                  "Terminate_13": {
                                                    "runAfter": {
                                                      "Response_9": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "Terminate",
                                                    "inputs": {
                                                      "runError": {
                                                        "message": "@{body('Get_Vsphere_Datastore_ID')?['errors'][0]?['message']}"
                                                      },
                                                      "runStatus": "Failed"
                                                    }
                                                  }
                                                },
                                                "else": {
                                                  "actions": {
                                                    "Response_of_Get_Vsphere_Datastore_ID": {
                                                      "type": "ParseJson",
                                                      "inputs": {
                                                        "content": "@body('Get_Vsphere_Datastore_ID')",
                                                        "schema": {
                                                          "properties": {
                                                            "data": {
                                                              "properties": {
                                                                "vSphereHost": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "descendantConnection": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "edges": {
                                                                          "items": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "node": {
                                                                                "properties": {
                                                                                  "__typename": {
                                                                                    "type": "string"
                                                                                  },
                                                                                  "capacity": {
                                                                                    "type": "integer"
                                                                                  },
                                                                                  "datastoreType": {
                                                                                    "type": "string"
                                                                                  },
                                                                                  "freeSpace": {
                                                                                    "type": "integer"
                                                                                  },
                                                                                  "id": {
                                                                                    "type": "string"
                                                                                  },
                                                                                  "isLocal": {
                                                                                    "type": "boolean"
                                                                                  },
                                                                                  "name": {
                                                                                    "type": "string"
                                                                                  }
                                                                                },
                                                                                "type": "object"
                                                                              }
                                                                            },
                                                                            "required": [
                                                                              "node",
                                                                              "__typename"
                                                                            ],
                                                                            "type": "object"
                                                                          },
                                                                          "type": "array"
                                                                        },
                                                                        "pageInfo": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "endCursor": {
                                                                              "type": "string"
                                                                            },
                                                                            "hasNextPage": {
                                                                              "type": "boolean"
                                                                            },
                                                                            "hasPreviousPage": {
                                                                              "type": "boolean"
                                                                            }
                                                                          },
                                                                          "type": "object"
                                                                        }
                                                                      },
                                                                      "type": "object"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "expression": {
                                                  "and": [
                                                    {
                                                      "contains": [
                                                        "@body('Get_Vsphere_Datastore_ID')",
                                                        "errors"
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "type": "If"
                                              }
                                            },
                                            "runAfter": {
                                              "Get_Vsphere_Datastore_ID": [
                                                "Succeeded",
                                                "Failed"
                                              ]
                                            },
                                            "else": {
                                              "actions": {
                                                "Response_6": {
                                                  "runAfter": {
                                                    "Set_Error_Get_DataStoreId_Export": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "Response",
                                                  "kind": "Http",
                                                  "inputs": {
                                                    "body": "@body('Get_Vsphere_Datastore_ID')['message']",
                                                    "statusCode": "@output('Get_Vsphere_Datastore_ID')['statusCode']"
                                                  }
                                                },
                                                "Set_Error_Get_DataStoreId_Export": {
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "ErrorMessage",
                                                    "value": "Status Code: @{outputs('Get_Vsphere_Datastore_ID')['statusCode']}, Error message:  @{body('Get_Vsphere_Datastore_ID')['message']}"
                                                  }
                                                },
                                                "Terminate_14": {
                                                  "runAfter": {
                                                    "Response_6": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "Terminate",
                                                  "inputs": {
                                                    "runError": {
                                                      "code": "@{output('Get_Vsphere_Datastore_ID')['statusCode']}",
                                                      "message": "@{body('Get_Vsphere_Datastore_ID')['message']}"
                                                    },
                                                    "runStatus": "Failed"
                                                  }
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@outputs('Get_Vsphere_Datastore_ID')['statusCode']",
                                                    200
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Export_recovered_snapshot": {
                                            "runAfter": {
                                              "For_each_2": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                              "body": {
                                                "query": "mutation vSphereExportSnapshotV2Mutation(\r\n    $input: VsphereVmExportSnapshotV2Input!\r\n  ) {\r\n    vsphereVmExportSnapshotV2(input: $input) {\r\n      id\r\n    }\r\n  }\r\n",
                                                "variables": {
                                                  "input": {
                                                    "config": {
                                                      "clusterId": "@{variables('EsxiClusterId')}",
                                                      "datastoreId": "@{variables('DatastoreId')}",
                                                      "mountExportSnapshotJobCommonOptionsV2": {
                                                        "keepMacAddresses": false,
                                                        "powerOn": false,
                                                        "removeNetworkDevices": false
                                                      },
                                                      "requiredRecoveryParameters": {
                                                        "snapshotId": "@{body('Response_RubrikIOCScan')?['RecoverableSnapshotid']}"
                                                      },
                                                      "shouldRecoverTags": true,
                                                      "shouldUseHotAddProxy": false,
                                                      "vNicBindings": "[variables('TemplateEmptyArray')]"
                                                    },
                                                    "id": "@{triggerBody()?['ObjectId']}"
                                                  }
                                                }
                                              },
                                              "headers": {
                                                "Authorization": "Bearer @{variables('access_token')}",
                                                "Content-Type": "application/json"
                                              },
                                              "method": "POST",
                                              "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                            }
                                          },
                                          "For_each": {
                                            "foreach": "@body('Response_of_Get_Vsphere_Host_ID_-_2')?['data']?['vSphereHostConnection']?['edges']",
                                            "actions": {
                                              "For_each_3": {
                                                "foreach": "@items('For_each')?['node']?['physicalPath']",
                                                "actions": {
                                                  "Check_for_ObjectType_equals_to_Cluster": {
                                                    "actions": {
                                                      "Set_Esxi_ClusterId": {
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                          "name": "EsxiClusterId",
                                                          "value": "@items('For_each_3')?['fid']"
                                                        }
                                                      }
                                                    },
                                                    "expression": {
                                                      "and": [
                                                        {
                                                          "equals": [
                                                            "@items('For_each_3')?['objectType']",
                                                            "VSphereComputeCluster"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "type": "If"
                                                  }
                                                },
                                                "runAfter": {
                                                  "Set_HostId": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "Foreach"
                                              },
                                              "Set_HostId": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "HostId",
                                                  "value": "@items('For_each')?['node']?['id']"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Is_Vsphere_host_name_provided_for_exporting_vm": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Foreach"
                                          },
                                          "For_each_2": {
                                            "foreach": "@body('Response_of_Get_Vsphere_Datastore_ID')?['data']?['vSphereHost']?['descendantConnection']?['edges']",
                                            "actions": {
                                              "Set_DatastoreId": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "DatastoreId",
                                                  "value": "@items('For_each_2')?['node']?['id']"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Does_Get_Vsphere_Datastore_ID_get_status_code_200": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Foreach"
                                          },
                                          "Get_Vsphere_Datastore_ID": {
                                            "runAfter": {
                                              "For_each": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                              "body": {
                                                "query": "query VSphereHostDatastoresQuery($hostId: UUID!, $first: Int, $after: String, $filter: [Filter!], $sortBy: HierarchySortByField, $sortOrder: SortOrder) {\r\n  vSphereHost(fid: $hostId) {\r\n    descendantConnection(\r\n      first: $first\r\n      after: $after\r\n      filter: $filter\r\n      sortBy: $sortBy\r\n      sortOrder: $sortOrder\r\n      typeFilter: [VSphereDatastore]\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          ...HierarchyObjectNameColumnFragment\r\n          ... on VsphereDatastore {\r\n            capacity\r\n            isLocal\r\n            freeSpace\r\n            datastoreType\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n        hasPreviousPage\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n \r\nfragment HierarchyObjectNameColumnFragment on HierarchyObject {\r\n  name\r\n  __typename\r\n}",
                                                "variables": {
                                                  "filter": [
                                                    {
                                                      "field": "NAME",
                                                      "texts": [
                                                        "@{body('Collect_recovery_data_for_exporting_VM')?['data']?['name to search for a Vsphere datastore in exporting']}"
                                                      ]
                                                    }
                                                  ],
                                                  "first": 20,
                                                  "hostId": "@{variables('HostId')}",
                                                  "sortBy": "NAME",
                                                  "sortOrder": "ASC"
                                                }
                                              },
                                              "headers": {
                                                "Authorization": "Bearer @{variables('access_token')}",
                                                "Content-Type": "application/json"
                                              },
                                              "host": {
                                                "connection": {
                                                  "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                                }
                                              },
                                              "method": "POST",
                                              "path": "/api/graphql",
                                              "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                            }
                                          },
                                          "Is_Vsphere_host_name_provided_for_exporting_vm": {
                                            "actions": {
                                              "Does_Get_Vsphere_Host_ID_-_2_get_status_code_200": {
                                                "actions": {
                                                  "Does_Get_Vsphere_Host_ID_-_2_API_response_contains_errors": {
                                                    "actions": {
                                                      "Response_15": {
                                                        "runAfter": {
                                                          "Set_Error_for_Get_HostId_Export_API": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "type": "Response",
                                                        "kind": "Http",
                                                        "inputs": {
                                                          "body": "While Getting HostID for Live-Mount : @{body('Get_Vsphere_Host_ID_-_2')?['errors'][0]?['message']}",
                                                          "statusCode": 200
                                                        }
                                                      },
                                                      "Set_Error_for_Get_HostId_Export_API": {
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                          "name": "ErrorMessage",
                                                          "value": "@{body('Get_Vsphere_Host_ID_-_2')?['errors'][0]?['message']}"
                                                        }
                                                      },
                                                      "Terminate_12": {
                                                        "runAfter": {
                                                          "Response_15": [
                                                            "Succeeded"
                                                          ]
                                                        },
                                                        "type": "Terminate",
                                                        "inputs": {
                                                          "runError": {
                                                            "message": "@{body('Get_Vsphere_Host_ID_-_2')?['errors'][0]?['message']}"
                                                          },
                                                          "runStatus": "Failed"
                                                        }
                                                      }
                                                    },
                                                    "expression": {
                                                      "and": [
                                                        {
                                                          "contains": [
                                                            "@body('Get_Vsphere_Host_ID_-_2')",
                                                            "errors"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "type": "If"
                                                  },
                                                  "Response_of_Get_Vsphere_Host_ID_-_2": {
                                                    "runAfter": {
                                                      "Does_Get_Vsphere_Host_ID_-_2_API_response_contains_errors": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                      "content": "@body('Get_Vsphere_Host_ID_-_2')",
                                                      "schema": {
                                                        "properties": {
                                                          "data": {
                                                            "properties": {
                                                              "vSphereHostConnection": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "edges": {
                                                                    "items": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "node": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "id": {
                                                                              "type": "string"
                                                                            },
                                                                            "name": {
                                                                              "type": "string"
                                                                            },
                                                                            "physicalPath": {
                                                                              "items": {
                                                                                "properties": {
                                                                                  "__typename": {
                                                                                    "type": "string"
                                                                                  },
                                                                                  "fid": {
                                                                                    "type": "string"
                                                                                  },
                                                                                  "name": {
                                                                                    "type": "string"
                                                                                  },
                                                                                  "objectType": {
                                                                                    "type": "string"
                                                                                  }
                                                                                },
                                                                                "required": [
                                                                                  "fid",
                                                                                  "name",
                                                                                  "objectType",
                                                                                  "__typename"
                                                                                ],
                                                                                "type": "object"
                                                                              },
                                                                              "type": "array"
                                                                            }
                                                                          },
                                                                          "type": "object"
                                                                        }
                                                                      },
                                                                      "required": [
                                                                        "node",
                                                                        "__typename"
                                                                      ],
                                                                      "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "pageInfo": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "endCursor": {
                                                                        "type": "string"
                                                                      },
                                                                      "hasNextPage": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "hasPreviousPage": {
                                                                        "type": "boolean"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      }
                                                    }
                                                  }
                                                },
                                                "runAfter": {
                                                  "Get_Vsphere_Host_ID_-_2": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "else": {
                                                  "actions": {
                                                    "Response_16": {
                                                      "runAfter": {
                                                        "Set_Error_Get_Vsphere_HostID_Export": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "Response",
                                                      "kind": "Http",
                                                      "inputs": {
                                                        "body": "@variables('ErrorMessage')",
                                                        "statusCode": 400
                                                      }
                                                    },
                                                    "Set_Error_Get_Vsphere_HostID_Export": {
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                        "name": "ErrorMessage",
                                                        "value": "Status Code: @{outputs('Get_Vsphere_Host_ID_-_2')['statusCode']}, Error Message: @{body('Get_Vsphere_Host_ID_-_2')?['message']}"
                                                      }
                                                    },
                                                    "Terminate_11": {
                                                      "runAfter": {
                                                        "Response_16": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "Terminate",
                                                      "inputs": {
                                                        "runError": {
                                                          "message": "@variables('ErrorMessage')"
                                                        },
                                                        "runStatus": "Failed"
                                                      }
                                                    }
                                                  }
                                                },
                                                "expression": {
                                                  "and": [
                                                    {
                                                      "equals": [
                                                        "@outputs('Get_Vsphere_Host_ID_-_2')['statusCode']",
                                                        200
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "type": "If"
                                              },
                                              "Get_Vsphere_Host_ID_-_2": {
                                                "type": "Http",
                                                "inputs": {
                                                  "body": {
                                                    "query": "query vSphereHostsQuery($first: Int!, $after: String, $filter: [Filter!], $sortBy: HierarchySortByField, $sortOrder: SortOrder) {\r\n  vSphereHostConnection(\r\n    first: $first\r\n    after: $after\r\n    filter: $filter\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        ...VSphereHostNameFragment\r\n        ...VSphereHostPhysicalPathFragment\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n \r\nfragment VSphereHostNameFragment on VsphereHost {\r\n  name\r\n  __typename\r\n}\r\n \r\nfragment VSphereHostPhysicalPathFragment on VsphereHost {\r\n  physicalPath {\r\n    fid\r\n    name\r\n    objectType\r\n    __typename\r\n  }\r\n  __typename\r\n}",
                                                    "variables": {
                                                      "filter": [
                                                        {
                                                          "field": "CLUSTER_ID",
                                                          "texts": [
                                                            "@{triggerBody()?['ClusterId']}"
                                                          ]
                                                        },
                                                        {
                                                          "field": "NAME",
                                                          "texts": [
                                                            "@{body('Collect_recovery_data_for_exporting_VM')?['data']?['name to search for a Vsphere host in exporting']}"
                                                          ]
                                                        }
                                                      ],
                                                      "first": 1000,
                                                      "sortBy": "NAME",
                                                      "sortOrder": "DESC"
                                                    }
                                                  },
                                                  "headers": {
                                                    "Authorization": "Bearer @{variables('access_token')}",
                                                    "Content-Type": "application/json"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                                    }
                                                  },
                                                  "method": "POST",
                                                  "path": "/api/graphql",
                                                  "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Collect_recovery_data_for_exporting_VM": [
                                                "Succeeded"
                                              ]
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "not": {
                                                    "equals": [
                                                      "@body('Collect_recovery_data_for_exporting_VM')?['data']?['name to search for a Vsphere host in exporting']",
                                                      "@null"
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['live-mount or export']",
                                              "Live-Mount"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_No_recoverable_snapshot_found_status": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "ErrorMessage",
                                          "value": "No recoverable snapshots were found with the given IOC scan arguments."
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@body('Response_RubrikIOCScan')?['RecoverableSnapshotid']",
                                            "@null"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Set_variable_4": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "ErrorMessage",
                                      "value": "The latest snapshot for the given time period is not infected so no recovery is required."
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Response_RubrikIOCScan')?['isLatestInfected']",
                                      "@true"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_variable_21": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessage",
                                  "value": "No recovery selected"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['live-mount or export']",
                                    "No Recovery"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Response_RubrikIOCScan": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_variable_6": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ErrorMessage",
                              "value": "There was an error while running the IOC scan. "
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@body('Response_RubrikIOCScan')?['RadarIOCScanStatus']",
                              "FINISHED"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Is_IOC_Scan_successful_(check_for_RUNNING)": {
                      "actions": {
                        "Set_variable_7": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ErrorMessage",
                            "value": "Wait for IOC scan results timed out. Please see incident context for further details."
                          }
                        }
                      },
                      "runAfter": {
                        "Response_RubrikIOCScan": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@body('Response_RubrikIOCScan')?['RadarIOCScanStatus']",
                              "RUNNING"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Is_Object_Type_VM": {
                      "runAfter": {
                        "Initialize_Error_Message_for_flow_Start_IOC_Scan": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Response_12": {
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exiting?",
                              "statusCode": 400
                            }
                          },
                          "Terminate": {
                            "runAfter": {
                              "Response_12": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "message": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exiting?"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@variables('ObjectType')",
                              "Vm"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "ObjectId": {
                      "runAfter": {
                        "ClusterId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "ObjectName": {
                      "runAfter": {
                        "ObjectType": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectName",
                            "type": "string",
                            "value": "@{triggerBody()?['ObjectName']}"
                          }
                        ]
                      }
                    },
                    "ObjectType": {
                      "runAfter": {
                        "ObjectId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ObjectType",
                            "type": "string",
                            "value": "@triggerBody()?['ObjectType']"
                          }
                        ]
                      }
                    },
                    "Parse_Response_of_Get_VM_metadata": {
                      "runAfter": {
                        "Check_status_code_in_response_of_Get_VM_metadata": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_VM_metadata')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "vSphereDetailData": {
                                  "properties": {
                                    "__typename": {
                                      "type": "string"
                                    },
                                    "agentStatus": {
                                      "properties": {
                                        "__typename": {
                                          "type": "string"
                                        },
                                        "agentStatus": {
                                          "type": "string"
                                        }
                                      },
                                      "type": [
                                        "object",
                                        "null"
                                      ]
                                    },
                                    "arrayIntegrationEnabled": {
                                      "type": "boolean"
                                    },
                                    "authorizedOperations": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "cdmLink": {
                                      "type": "string"
                                    },
                                    "cluster": {
                                      "properties": {
                                        "__typename": {
                                          "type": "string"
                                        },
                                        "clusterNodeConnection": {
                                          "properties": {
                                            "__typename": {
                                              "type": "string"
                                            },
                                            "nodes": {
                                              "items": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "id": {
                                                    "type": "string"
                                                  },
                                                  "ipAddress": {
                                                    "type": "string"
                                                  },
                                                  "status": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "id",
                                                  "status",
                                                  "ipAddress",
                                                  "__typename"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "connectivityLastUpdated": {
                                          "type": "string"
                                        },
                                        "globalManagerConnectivityStatus": {
                                          "properties": {
                                            "__typename": {
                                              "type": "string"
                                            },
                                            "urls": {
                                              "items": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "isReachable": {
                                                    "type": "boolean"
                                                  },
                                                  "url": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "url",
                                                  "isReachable",
                                                  "__typename"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "lastConnectionTime": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "passesConnectivityCheck": {
                                          "type": "boolean"
                                        },
                                        "state": {
                                          "properties": {
                                            "__typename": {
                                              "type": "string"
                                            },
                                            "clusterRemovalState": {
                                              "type": "string"
                                            },
                                            "connectedState": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "status": {
                                          "type": "string"
                                        },
                                        "version": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "effectiveSlaDomain": {
                                      "properties": {
                                        "__typename": {
                                          "type": "string"
                                        },
                                        "cluster": {
                                          "properties": {
                                            "__typename": {
                                              "type": "string"
                                            },
                                            "id": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fid": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "effectiveSlaSourceObject": {
                                      "properties": {
                                        "__typename": {
                                          "type": "string"
                                        },
                                        "fid": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "objectType": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "id": {
                                      "type": "string"
                                    },
                                    "isRelic": {
                                      "type": "boolean"
                                    },
                                    "logicalPath": {
                                      "items": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "fid": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "objectType": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "fid",
                                          "objectType",
                                          "name",
                                          "__typename"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "newestSnapshot": {
                                      "properties": {
                                        "__typename": {
                                          "type": "string"
                                        },
                                        "date": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "isIndexed": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "oldestSnapshot": {
                                      "properties": {
                                        "__typename": {
                                          "type": "string"
                                        },
                                        "date": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "isIndexed": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "onDemandSnapshotCount": {
                                      "type": "integer"
                                    },
                                    "physicalPath": {
                                      "items": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "fid": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "objectType": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "fid",
                                          "objectType",
                                          "name",
                                          "__typename"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "primaryClusterLocation": {
                                      "properties": {
                                        "__typename": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "protectionDate": {
                                      "type": "string"
                                    },
                                    "replicatedObjects": {
                                      "items": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "cluster": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "primaryClusterLocation": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "primaryClusterLocation",
                                          "cluster",
                                          "__typename"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "reportWorkload": {
                                      "properties": {
                                        "__typename": {
                                          "type": "string"
                                        },
                                        "archiveStorage": {
                                          "type": "integer"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "logicalBytes": {
                                          "type": "integer"
                                        },
                                        "physicalBytes": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "snapshotConsistencyMandate": {
                                      "type": "string"
                                    },
                                    "totalSnapshots": {
                                      "properties": {
                                        "__typename": {
                                          "type": "string"
                                        },
                                        "count": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "vmwareToolsInstalled": {
                                      "type": "boolean"
                                    },
                                    "vsphereTagPath": {
                                      "items": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "fid": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "objectType": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "fid",
                                          "objectType",
                                          "name",
                                          "__typename"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "Does_Create_Snapshot_for_evidence_get_status_code_200": [
                          "Failed",
                          "TimedOut",
                          "Skipped",
                          "Succeeded"
                        ],
                        "Is_IOC_Scan_successful_(check_for_ERROR)": [
                          "TimedOut",
                          "Skipped",
                          "Failed",
                          "Succeeded"
                        ],
                        "Is_IOC_Scan_successful_(check_for_FINISHED)": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Is_IOC_Scan_successful_(check_for_RUNNING)": [
                          "Failed",
                          "Skipped",
                          "TimedOut",
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": {
                          "message after start IOC Scan": "@{variables('ErrorMessage')}",
                          "message from snapshot creation": "@{variables('ErrorMessage1')}",
                          "status": "SUCCESSED"
                        },
                        "statusCode": "@if(or(contains(variables('ErrorMessage'),'Statuc Code'),contains(variables('ErrorMessage1'),'Status Code')),400,200)"
                      }
                    },
                    "Response_RubrikIOCScan": {
                      "runAfter": {
                        "Check_response_has_error_or_not": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('RubrikIOCScan')",
                        "schema": {
                          "properties": {
                            "RadarIOCScan": {
                              "type": [
                                "object",
                                "null"
                              ]
                            },
                            "RadarIOCScanStatus": {
                              "type": "string"
                            },
                            "RecoverableSnapshotid": {
                              "type": "string"
                            },
                            "error": {
                              "type": "string"
                            },
                            "isLatestInfected": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "RubrikIOCScan": {
                      "runAfter": {
                        "Check_if_URLs_is_provided_to_fetch_yara_rule": [
                          "Succeeded"
                        ]
                      },
                      "type": "Workflow",
                      "inputs": {
                        "body": {
                          "BaseUrl": "@triggerBody()?['BaseUrl']",
                          "ClusterId": "@triggerBody()?['ClusterId']",
                          "EndDate": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['end date to initiate']",
                          "IOCHash": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc hash to scan for']",
                          "IOCPath": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc path to scan for']",
                          "IOCYaraRule": "@variables('Yara Rule')",
                          "Limit": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['limit to loop the IOC scan sub-playbook']",
                          "ObjectId": "@triggerBody()?['ObjectId']",
                          "PathsToExclude": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['paths to exclude in the IOC Scan']",
                          "PathsToExempt": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['paths to exempt in the IOC Scan']",
                          "PathsToInclude": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['paths to include in the IOC Scan']",
                          "PollingInterval": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for IOC Scan']",
                          "PollingTimeout": "@variables('Polling Timeout')",
                          "ScanName": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['scan Name']",
                          "StartDate": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['start date to initiate']",
                          "TimeDelta": "@{body('Collect_IOC_scan_and_general_recovery_data')?['data']?['time Delta']}"
                        },
                        "host": {
                          "triggerName": "manual",
                          "workflow": {
                            "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikIOCScan')]"
                          }
                        }
                      }
                    },
                    "Set_Cluster_Name": {
                      "runAfter": {
                        "Initialize_Esxi_ClusterId": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ClusterName",
                        "value": "@body('Parse_Response_of_Get_VM_metadata')?['data']?['vSphereDetailData']?['cluster']?['name']"
                      }
                    },
                    "access_token": {
                      "runAfter": {
                        "Is_Authentication_Failed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token",
                            "type": "string",
                            "value": "@{body('Authentication')?['access_token']}"
                          }
                        ]
                      }
                    },
                    "check_if_polling_time_out_is_less_then_or_equal_to_0_or_not": {
                      "actions": {
                        "Set_default_value_of_polling_timeout": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Polling Timeout",
                            "value": 720
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_yara_Rule": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "lessOrEquals": [
                              "@variables('Polling Timeout')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "RubrikCustomConnector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                        "connectionName": "[[variables('RubrikcustomconnectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
                      },
                      "keyvault_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikRansomwareDiscoveryAndVMRecovery",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('RubrikcustomconnectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('RubrikcustomconnectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[parameters('tenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[[parameters('keyvaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId9'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId9')]",
                "contentId": "[variables('_playbookContentId9')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion9')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "LogicAppsCustomConnector",
                      "contentId": "[variables('_RubrikCustomConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Ransomware Discovery and VM Recovery",
            "description": "This playbook interacts with Rubrik Security Cloud to (1) optionally preserve evidence by creating an on-demand snapshot of the object, (2) identify a potential recovery point by scanning backups for specified IOCs, and (3) supporting VM image level recovery.",
            "prerequisites": [
              "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
              "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "3. Rubrik custom connector needs to be deployed prior to the deployment of this playbook, in the same resource group and region. Relevant instructions can be found in the connector doc page.",
              "4. To perform an IOC scan the IOC YARA rule should be available.",
              "5. Obtain Teams GroupId and ChannelId",
              "6. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with unique name",
              "b. Go to KeyVault -> secrets -> Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively",
              "7. Make sure that RubrikIOCScan and RubrikPollAsyncResult playbook is deployed before deploying RubrikRansomwareDiscoveryAndVMRecovery playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Click the Custom Connector connection resource",
              "2. Click edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections"
            ],
            "lastUpdateTime": "2024-02-21T10:23:09.173Z",
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "Recovery",
              "Ransomware Discovery",
              "Security",
              "Rubrik"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId9')]",
        "contentKind": "Playbook",
        "displayName": "RubrikRansomwareDiscoveryAndVMRecovery",
        "contentProductId": "[variables('_playbookcontentProductId9')]",
        "id": "[variables('_playbookcontentProductId9')]",
        "version": "[variables('playbookVersion9')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName10')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikFileObjectContextAnalysis Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion10')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikFileObjectContextAnalysis",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "KeyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Enter name of keyvault where service account credentials are stored.(e.g. RubrikSentinelKeyVault)"
              }
            },
            "TenantId": {
              "type": "string",
              "metadata": {
                "description": "Enter Tenant Id of your Microsoft EntraID where keyvault is available"
              }
            },
            "BaseUrl": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Base Url of the RubrikApi instance(e.g. https://rubrik-rcf-32348.my.rubrik.com)"
              }
            },
            "LogAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Id of log analytics workspace where you want to ingest data in Microsoft Sentinel"
              }
            },
            "LogAnalyticsWorkspaceKey": {
              "type": "securestring",
              "metadata": {
                "description": "PrimaryKey of log analytics workspace where you want to ingest data in Microsoft Sentinel"
              }
            },
            "PolicyHitsTableName": {
              "type": "string",
              "metadata": {
                "description": "Table name in which you want to store policy hits data in log analytics workspace(e.g. Rubrik_File_Object_Policy_Hits)"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', parameters('PlaybookName'))]",
            "TeamsConnectionName": "[[concat('Teams-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "Baseurl": {
                      "type": "string",
                      "defaultValue": "[[parameters('Baseurl')]"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "Baseurl": {
                              "type": "string"
                            },
                            "ObjectId": {
                              "type": "string"
                            },
                            "ObjectName": {
                              "type": "string"
                            },
                            "ObjectType": {
                              "type": "string"
                            },
                            "incidentStartTime": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Check_if_nextPage_available": {
                      "actions": {
                        "Until_all_policy_hits_data_retrieved": {
                          "actions": {
                            "Does_status_code_to_get_policy_hits_get_status_code_equal_to_200": {
                              "actions": {
                                "Does_get_policy_hits_response_contain_error": {
                                  "actions": {
                                    "Set_errorMessage_as_response_contain_error": {
                                      "runAfter": {
                                        "Set_hasNextPage_to_false_as_response_contain_error": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "errorMessage",
                                        "value": "@{body('Get_policy_hits_for_file_based_object')?['errors'][0]?['message']}"
                                      }
                                    },
                                    "Set_hasNextPage_to_false_as_response_contain_error": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "hasNextPage",
                                        "value": false
                                      }
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Check_if_nextPage_exist": {
                                        "actions": {
                                          "Set_hasNextPage_to_true": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "hasNextPage",
                                              "value": "@body('Parse_policy_hits_json_response')?['data']?['policyObj']?['fileResultConnection']?['pageInfo']?['hasNextPage']"
                                            }
                                          },
                                          "Set_variables_for_pagination": {
                                            "runAfter": {
                                              "Set_hasNextPage_to_true": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "variables",
                                              "value": {
                                                "after": "@{body('Parse_policy_hits_json_response')?['data']?['policyObj']?['fileResultConnection']?['pageInfo']?['endCursor']}",
                                                "filters": {
                                                  "analyzerGroupIds": "[variables('TemplateEmptyArray')]",
                                                  "fileType": "HITS",
                                                  "searchText": "@{body('Get_file_folder_or_fileshare_from_user_for_given_Object')?['data']?['searchText']}",
                                                  "snappablePaths": [
                                                    {
                                                      "snappableFid": "@{variables('objectId')}",
                                                      "stdPath": "@{body('Get_file_folder_or_fileshare_from_user_for_given_Object')?['data']?['filePath']}"
                                                    }
                                                  ],
                                                  "whitelistEnabled": true
                                                },
                                                "first": 100,
                                                "snappableFid": "@{variables('objectId')}",
                                                "snapshotFid": "@{variables('snapshotId')}",
                                                "sort": {
                                                  "sortBy": "HITS",
                                                  "sortOrder": "DESC"
                                                },
                                                "timezone": "America/Los_Angeles"
                                              }
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "Set_policy_hits_data_to_null": [
                                            "Succeeded"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Set_hasNextPage_to_false": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "hasNextPage",
                                                "value": "@body('Parse_policy_hits_json_response')?['data']?['policyObj']?['fileResultConnection']?['pageInfo']?['hasNextPage']"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('Parse_policy_hits_json_response')?['data']?['policyObj']?['fileResultConnection']?['pageInfo']?['hasNextPage']",
                                                "@true"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "Compose": {
                                        "runAfter": {
                                          "For_each": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Compose",
                                        "inputs": "@variables('policyhits')"
                                      },
                                      "For_each": {
                                        "foreach": "@body('Parse_policy_hits_json_response')?['data']?['policyObj']?['fileResultConnection']?['edges']",
                                        "actions": {
                                          "Append_objectId_to_policy_hits_data": {
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                              "name": "policyhits",
                                              "value": "@setProperty(items('For_each')?['node'], 'ObjectId', variables('objectId'))"
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "Parse_policy_hits_json_response": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Foreach",
                                        "runtimeConfiguration": {
                                          "concurrency": {
                                            "repetitions": 1
                                          }
                                        }
                                      },
                                      "Parse_policy_hits_json_response": {
                                        "type": "ParseJson",
                                        "inputs": {
                                          "content": "@body('Get_policy_hits_for_file_based_object')",
                                          "schema": {
                                            "properties": {
                                              "data": {
                                                "properties": {
                                                  "policyObj": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "fileResultConnection": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "edges": {
                                                            "items": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "cursor": {
                                                                  "type": "string"
                                                                },
                                                                "node": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "analyzerGroupResults": {
                                                                      "items": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "analyzerGroup": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "groupType": {
                                                                                "type": "string"
                                                                              },
                                                                              "id": {
                                                                                "type": "string"
                                                                              },
                                                                              "name": {
                                                                                "type": "string"
                                                                              }
                                                                            },
                                                                            "type": [
                                                                              "object",
                                                                              "null"
                                                                            ]
                                                                          },
                                                                          "analyzerResults": {
                                                                            "items": {
                                                                              "properties": {
                                                                                "__typename": {
                                                                                  "type": "string"
                                                                                },
                                                                                "analyzer": {
                                                                                  "properties": {
                                                                                    "__typename": {
                                                                                      "type": "string"
                                                                                    },
                                                                                    "analyzerType": {
                                                                                      "type": "string"
                                                                                    },
                                                                                    "id": {
                                                                                      "type": "string"
                                                                                    },
                                                                                    "name": {
                                                                                      "type": "string"
                                                                                    }
                                                                                  },
                                                                                  "type": [
                                                                                    "object",
                                                                                    "null"
                                                                                  ]
                                                                                },
                                                                                "hits": {
                                                                                  "properties": {
                                                                                    "__typename": {
                                                                                      "type": "string"
                                                                                    },
                                                                                    "totalHits": {
                                                                                      "type": "integer"
                                                                                    },
                                                                                    "violations": {
                                                                                      "type": "integer"
                                                                                    }
                                                                                  },
                                                                                  "type": [
                                                                                    "object",
                                                                                    "null"
                                                                                  ]
                                                                                }
                                                                              },
                                                                              "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                          },
                                                                          "hits": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "totalHits": {
                                                                                "type": "integer"
                                                                              },
                                                                              "totalHitsDelta": {
                                                                                "type": "integer"
                                                                              },
                                                                              "violations": {
                                                                                "type": "integer"
                                                                              },
                                                                              "violationsDelta": {
                                                                                "type": "integer"
                                                                              }
                                                                            },
                                                                            "type": [
                                                                              "object",
                                                                              "null"
                                                                            ]
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "type": "array"
                                                                    },
                                                                    "directory": {
                                                                      "type": "string"
                                                                    },
                                                                    "errorCode": {
                                                                      "type": "string"
                                                                    },
                                                                    "filename": {
                                                                      "type": "string"
                                                                    },
                                                                    "filesWithHits": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "totalHits": {
                                                                          "type": "integer"
                                                                        },
                                                                        "violations": {
                                                                          "type": "integer"
                                                                        }
                                                                      },
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "hits": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "totalHits": {
                                                                          "type": "integer"
                                                                        },
                                                                        "totalHitsDelta": {
                                                                          "type": "integer"
                                                                        },
                                                                        "violations": {
                                                                          "type": "integer"
                                                                        },
                                                                        "violationsDelta": {
                                                                          "type": "integer"
                                                                        }
                                                                      },
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "lastAccessTime": {
                                                                      "type": "integer"
                                                                    },
                                                                    "lastModifiedTime": {
                                                                      "type": "integer"
                                                                    },
                                                                    "mode": {
                                                                      "type": "string"
                                                                    },
                                                                    "nativePath": {
                                                                      "type": "string"
                                                                    },
                                                                    "numActivities": {
                                                                      "type": "integer"
                                                                    },
                                                                    "numActivitiesDelta": {
                                                                      "type": "integer"
                                                                    },
                                                                    "numDescendantErrorFiles": {
                                                                      "type": "integer"
                                                                    },
                                                                    "numDescendantFiles": {
                                                                      "type": "integer"
                                                                    },
                                                                    "numDescendantSkippedExtFiles": {
                                                                      "type": "integer"
                                                                    },
                                                                    "numDescendantSkippedSizeFiles": {
                                                                      "type": "integer"
                                                                    },
                                                                    "openAccessFilesWithHits": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "totalHits": {
                                                                          "type": "integer"
                                                                        },
                                                                        "violations": {
                                                                          "type": "integer"
                                                                        }
                                                                      },
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "openAccessType": {
                                                                      "type": "string"
                                                                    },
                                                                    "sensitiveFiles": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "highRiskFileCount": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "totalCount": {
                                                                              "type": "integer"
                                                                            },
                                                                            "violatedCount": {
                                                                              "type": "integer"
                                                                            }
                                                                          },
                                                                          "type": "object"
                                                                        },
                                                                        "lowRiskFileCount": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "totalCount": {
                                                                              "type": "integer"
                                                                            },
                                                                            "violatedCount": {
                                                                              "type": "integer"
                                                                            }
                                                                          },
                                                                          "type": "object"
                                                                        },
                                                                        "mediumRiskFileCount": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "totalCount": {
                                                                              "type": "integer"
                                                                            },
                                                                            "violatedCount": {
                                                                              "type": "integer"
                                                                            }
                                                                          },
                                                                          "type": "object"
                                                                        }
                                                                      },
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "size": {
                                                                      "type": "integer"
                                                                    },
                                                                    "staleFilesWithHits": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "totalHits": {
                                                                          "type": "integer"
                                                                        },
                                                                        "violations": {
                                                                          "type": "integer"
                                                                        }
                                                                      },
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "stalenessType": {
                                                                      "type": "string"
                                                                    },
                                                                    "stdPath": {
                                                                      "type": "string"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                }
                                                              },
                                                              "required": [
                                                                "cursor",
                                                                "node",
                                                                "__typename"
                                                              ],
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "pageInfo": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "endCursor": {
                                                                "type": "string"
                                                              },
                                                              "hasNextPage": {
                                                                "type": "boolean"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "id": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        }
                                      },
                                      "Send_Policy_Hits_data_to_log_analytics": {
                                        "runAfter": {
                                          "Compose": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": "@{outputs('Compose')}",
                                          "headers": {
                                            "Log-Type": "Rubrik_File_Object_Policy_Hits_Test1601"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/api/logs"
                                        }
                                      },
                                      "Set_dataFound_to_true": {
                                        "runAfter": {
                                          "Send_Policy_Hits_data_to_log_analytics": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "dataFound",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_policy_hits_data_to_null": {
                                        "runAfter": {
                                          "Set_dataFound_to_true": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "policyhits",
                                          "value": "@null"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "contains": [
                                          "@body('Get_policy_hits_for_file_based_object')",
                                          "errors"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "runAfter": {
                                "Get_policy_hits_for_file_based_object": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Set_errorMessage_as_status_code_is_not_equal_to_200": {
                                    "runAfter": {
                                      "Set_hasNextPage": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "errorMessage",
                                      "value": "@{body('Get_policy_hits_for_file_based_object')?['message']}"
                                    }
                                  },
                                  "Set_hasNextPage": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "hasNextPage",
                                      "value": "@false"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('Get_policy_hits_for_file_based_object')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_policy_hits_for_file_based_object": {
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "query CrawlsFileListQuery($snappableFid: String!, $snapshotFid: String!, $first: Int!, $after: String, $filters: ListFileResultFiltersInput, $sort: FileResultSortInput, $timezone: String!) {\r\n  policyObj(snappableFid: $snappableFid, snapshotFid: $snapshotFid) {\r\n    id: snapshotFid\r\n    fileResultConnection(first: $first, after: $after, filter: $filters, sort: $sort, timezone: $timezone) {\r\n      edges {\r\n        cursor\r\n        node {\r\n          ...DiscoveryFileFragment\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment DiscoveryFileFragment on FileResult {\r\n  nativePath\r\n  stdPath\r\n  filename\r\n  mode\r\n  size\r\n  lastAccessTime\r\n  lastModifiedTime\r\n  directory\r\n  numDescendantFiles\r\n  numDescendantErrorFiles\r\n  numDescendantSkippedExtFiles\r\n  numDescendantSkippedSizeFiles\r\n  errorCode\r\n  hits {\r\n    totalHits\r\n    violations\r\n    violationsDelta\r\n    totalHitsDelta\r\n    __typename\r\n  }\r\n  filesWithHits {\r\n    totalHits\r\n    violations\r\n    __typename\r\n  }\r\n  openAccessFilesWithHits {\r\n    totalHits\r\n    violations\r\n    __typename\r\n  }\r\n  staleFilesWithHits {\r\n    totalHits\r\n    violations\r\n    __typename\r\n  }\r\n  analyzerGroupResults {\r\n    ...AnalyzerGroupResultFragment\r\n    __typename\r\n  }\r\n  sensitiveFiles {\r\n    highRiskFileCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    mediumRiskFileCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    lowRiskFileCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  openAccessType\r\n  stalenessType\r\n  numActivities\r\n  numActivitiesDelta\r\n  __typename\r\n}\r\n\r\nfragment AnalyzerGroupResultFragment on AnalyzerGroupResult {\r\n  analyzerGroup {\r\n    groupType\r\n    id\r\n    name\r\n    __typename\r\n  }\r\n  analyzerResults {\r\n    hits {\r\n      totalHits\r\n      violations\r\n      __typename\r\n    }\r\n    analyzer {\r\n      id\r\n      name\r\n      analyzerType\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  hits {\r\n    totalHits\r\n    violations\r\n    violationsDelta\r\n    totalHitsDelta\r\n    __typename\r\n  }\r\n  __typename\r\n}",
                                  "variables": "@variables('variables')"
                                },
                                "headers": {
                                  "Authorization": "Bearer @{variables('accessToken')}"
                                },
                                "method": "POST",
                                "uri": "@{variables('BaseUrl')}/api/graphql"
                              }
                            }
                          },
                          "expression": "@equals(variables('hasNextPage'), false)",
                          "limit": {
                            "timeout": "PT12H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Until_snapshotFound_with_policy_hits": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('hasNextPage')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_ObjectId_available_in_request": {
                      "runAfter": {
                        "Initialize_access_token": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Does_object_list_request_get_status_code_equal_to_200_": {
                            "actions": {
                              "Does_object_list_response_contain_error": {
                                "actions": {
                                  "Terminate_as_object_list_api_response_contain_errors": {
                                    "runAfter": {
                                      "failure_as_object_list_api_response_contain_errors": [
                                        "Succeeded",
                                        "Skipped",
                                        "Failed"
                                      ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                      "runError": {
                                        "message": "@{body('Get_Object_List')?['errors'][0]?['message']}"
                                      },
                                      "runStatus": "Failed"
                                    }
                                  },
                                  "failure_as_object_list_api_response_contain_errors": {
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                      "body": "@body('Get_Object_List')?['errors'][0]?['message']",
                                      "statusCode": 200
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Does_response_contain_object_data": {
                                      "runAfter": {
                                        "Parse_JSON_object_list": [
                                          "Succeeded"
                                        ]
                                      },
                                      "else": {
                                        "actions": {
                                          "Respond_as_no_object_detail_found": {
                                            "type": "Response",
                                            "kind": "Http",
                                            "inputs": {
                                              "body": "No such object details are availble for @{body('Get_objectName_from_user')?['data']?['objectName']} in rubrik",
                                              "statusCode": 200
                                            }
                                          },
                                          "Terminate_as_no_object_detail_found": {
                                            "runAfter": {
                                              "Respond_as_no_object_detail_found": [
                                                "Succeeded",
                                                "Skipped",
                                                "Failed"
                                              ]
                                            },
                                            "type": "Terminate",
                                            "inputs": {
                                              "runError": {
                                                "message": "No such object details are availble for @{body('Get_objectName_from_user')?['data']?['objectName']} in rubrik"
                                              },
                                              "runStatus": "Failed"
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@empty(body('Parse_JSON_object_list')?['data']?['policyObjs']?['edges'])",
                                              "@false"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    },
                                    "For_each_object": {
                                      "foreach": "@body('Parse_JSON_object_list')?['data']?['policyObjs']?['edges']",
                                      "actions": {
                                        "Set_objectId": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "objectId",
                                            "value": "@items('For_each_object')?['node']?['snappable']?['id']"
                                          }
                                        }
                                      },
                                      "runAfter": {
                                        "Does_response_contain_object_data": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Foreach",
                                      "runtimeConfiguration": {
                                        "concurrency": {
                                          "repetitions": 1
                                        }
                                      }
                                    },
                                    "Parse_JSON_object_list": {
                                      "type": "ParseJson",
                                      "inputs": {
                                        "content": "@body('Get_Object_List')",
                                        "schema": {
                                          "properties": {
                                            "data": {
                                              "properties": {
                                                "policyObjs": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "edges": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "cursor": {
                                                            "type": "string"
                                                          },
                                                          "node": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "accessRiskReasons": {
                                                                "items": {
                                                                  "type": "string"
                                                                },
                                                                "type": "array"
                                                              },
                                                              "analysisStatus": {
                                                                "type": "string"
                                                              },
                                                              "hasInsights": {
                                                                "type": "boolean"
                                                              },
                                                              "id": {
                                                                "type": "string"
                                                              },
                                                              "isUserAccessEnabledObject": {
                                                                "type": "boolean"
                                                              },
                                                              "riskLevel": {
                                                                "type": "string"
                                                              },
                                                              "rootFileResult": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "analyzerGroupResults": {
                                                                    "items": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "analyzerGroup": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "groupType": {
                                                                              "type": "string"
                                                                            },
                                                                            "id": {
                                                                              "type": "string"
                                                                            },
                                                                            "name": {
                                                                              "type": "string"
                                                                            }
                                                                          },
                                                                          "type": [
                                                                            "object",
                                                                            "null"
                                                                          ]
                                                                        },
                                                                        "analyzerResults": {
                                                                          "type": "array"
                                                                        },
                                                                        "hits": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "totalHits": {
                                                                              "type": "integer"
                                                                            },
                                                                            "totalHitsDelta": {
                                                                              "type": "integer"
                                                                            },
                                                                            "violations": {
                                                                              "type": "integer"
                                                                            },
                                                                            "violationsDelta": {
                                                                              "type": "integer"
                                                                            }
                                                                          },
                                                                          "type": [
                                                                            "object",
                                                                            "null"
                                                                          ]
                                                                        }
                                                                      },
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "filesWithHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHitsDelta": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violations": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violationsDelta": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "hits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHitsDelta": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violations": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violationsDelta": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "numActivities": {
                                                                    "type": "integer"
                                                                  },
                                                                  "numActivitiesDelta": {
                                                                    "type": "integer"
                                                                  },
                                                                  "openAccessFiles": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHitsDelta": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violations": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violationsDelta": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "openAccessFilesWithHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHitsDelta": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violations": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violationsDelta": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "openAccessFolders": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHitsDelta": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violations": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violationsDelta": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "openAccessStaleFiles": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHitsDelta": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violations": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violationsDelta": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "staleFiles": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHitsDelta": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violations": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violationsDelta": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "staleFilesWithHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "totalHitsDelta": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violations": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violationsDelta": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "sensitiveFiles": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskFileCount": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalCount": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedCount": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskFileCount": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalCount": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedCount": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskFileCount": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalCount": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedCount": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "shareType": {
                                                                "type": "string"
                                                              },
                                                              "snappable": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "cluster": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "id": {
                                                                        "type": "string"
                                                                      },
                                                                      "name": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "effectiveSlaDomain": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "id": {
                                                                        "type": "string"
                                                                      },
                                                                      "name": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "id": {
                                                                    "type": "string"
                                                                  },
                                                                  "logicalPath": {
                                                                    "items": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "fid": {
                                                                          "type": "string"
                                                                        },
                                                                        "name": {
                                                                          "type": "string"
                                                                        },
                                                                        "objectType": {
                                                                          "type": "string"
                                                                        }
                                                                      },
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "name": {
                                                                    "type": "string"
                                                                  },
                                                                  "objectType": {
                                                                    "type": "string"
                                                                  },
                                                                  "physicalPath": {
                                                                    "items": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "fid": {
                                                                          "type": "string"
                                                                        },
                                                                        "name": {
                                                                          "type": "string"
                                                                        },
                                                                        "objectType": {
                                                                          "type": "string"
                                                                        }
                                                                      },
                                                                      "type": [
                                                                        "object",
                                                                        "null"
                                                                      ]
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "slaAssignment": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              },
                                                              "snapshotFid": {
                                                                "type": "string"
                                                              },
                                                              "snapshotTimestamp": {
                                                                "type": "integer"
                                                              },
                                                              "userCounts": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskCount": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalCount": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedCount": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskCount": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalCount": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedCount": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskCount": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalCount": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedCount": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "required": [
                                                          "cursor",
                                                          "node",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pageInfo": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "endCursor": {
                                                          "type": "string"
                                                        },
                                                        "hasNextPage": {
                                                          "type": "boolean"
                                                        },
                                                        "hasPreviousPage": {
                                                          "type": "boolean"
                                                        },
                                                        "startCursor": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "contains": [
                                        "@body('Get_Object_List')",
                                        "errors"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "runAfter": {
                              "Get_Object_List": [
                                "Succeeded",
                                "Failed"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Failure_respone_as_object_list_request_failed": {
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": "@body('Get_Object_List')?['message']",
                                    "statusCode": "@outputs('Get_Object_List')['statusCode']"
                                  }
                                },
                                "Terminate_as_object_list_api_request_failed": {
                                  "runAfter": {
                                    "Failure_respone_as_object_list_request_failed": [
                                      "Succeeded",
                                      "Skipped",
                                      "Failed"
                                    ]
                                  },
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "code": "@{outputs('Get_Object_List')['statusCode']}",
                                      "message": "@{body('Get_Object_List')?['message']}"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@outputs('Get_Object_List')['statusCode']",
                                    200
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "Get_Object_List": {
                            "runAfter": {
                              "Set_objectName": [
                                "Succeeded"
                              ]
                            },
                            "type": "Http",
                            "inputs": {
                              "body": {
                                "query": "query ObjectsListTableQuery($day: String!, $timezone: String!, $objectTypes: [DataGovObjectType!]!, $searchObjectName: String, $sortBy: String, $sortOrder: SortOrder, $analysisStatusesFilter: [AnalysisStatus!], $policyIdsFilter: [String!], $riskLevelsFilter: [RiskLevelType!], $clusterIdsFilter: [String!], $subscriptionIdsFilter: [String!], $includeWhitelistedResults: Boolean, $first: Int!, $after: String, $includeInsightsMarker: Boolean) {\r\n  policyObjs(\r\n    day: $day\r\n    timezone: $timezone\r\n    workloadTypes: $objectTypes\r\n    searchObjectName: $searchObjectName\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n    analysisStatusesFilter: $analysisStatusesFilter\r\n    policyIdsFilter: $policyIdsFilter\r\n    riskLevelsFilter: $riskLevelsFilter\r\n    clusterIdsFilter: $clusterIdsFilter\r\n    subscriptionIdsFilter: $subscriptionIdsFilter\r\n    includeWhitelistedResults: $includeWhitelistedResults\r\n    first: $first\r\n    after: $after\r\n    includeInsightsMarker: $includeInsightsMarker\r\n  ) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        ...PolicyObjOptimizedFragment\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment PolicyObjOptimizedFragment on PolicyObj {\r\n  id\r\n  snapshotFid\r\n  snapshotTimestamp\r\n  shareType\r\n  analysisStatus\r\n  riskLevel\r\n  accessRiskReasons\r\n  isUserAccessEnabledObject\r\n  sensitiveFiles {\r\n    highRiskFileCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    mediumRiskFileCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    lowRiskFileCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  rootFileResult {\r\n    hits {\r\n      totalHits\r\n      violations\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    analyzerGroupResults {\r\n      ...AnalyzerGroupResultFragment\r\n      __typename\r\n    }\r\n    filesWithHits {\r\n      totalHits\r\n      violations\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    openAccessFiles {\r\n      totalHits\r\n      violations\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    openAccessFolders {\r\n      totalHits\r\n      violations\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    openAccessFilesWithHits {\r\n      totalHits\r\n      violations\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    staleFiles {\r\n      totalHits\r\n      violations\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    staleFilesWithHits {\r\n      totalHits\r\n      violations\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    openAccessStaleFiles {\r\n      totalHits\r\n      violations\r\n      violationsDelta\r\n      totalHitsDelta\r\n      __typename\r\n    }\r\n    numActivities\r\n    numActivitiesDelta\r\n    __typename\r\n  }\r\n  userCounts {\r\n    highRiskCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    mediumRiskCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    lowRiskCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  snappable {\r\n    ...SnappableFragment\r\n    __typename\r\n  }\r\n  hasInsights\r\n  __typename\r\n}\r\n\r\nfragment AnalyzerGroupResultFragment on AnalyzerGroupResult {\r\n  analyzerGroup {\r\n    groupType\r\n    id\r\n    name\r\n    __typename\r\n  }\r\n  analyzerResults {\r\n    hits {\r\n      totalHits\r\n      violations\r\n      __typename\r\n    }\r\n    analyzer {\r\n      id\r\n      name\r\n      analyzerType\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  hits {\r\n    totalHits\r\n    violations\r\n    violationsDelta\r\n    totalHitsDelta\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment SnappableFragment on HierarchyObject {\r\n  id\r\n  name\r\n  objectType\r\n  slaAssignment\r\n  logicalPath {\r\n    fid\r\n    name\r\n    objectType\r\n    __typename\r\n  }\r\n  physicalPath {\r\n    fid\r\n    name\r\n    objectType\r\n    __typename\r\n  }\r\n  effectiveSlaDomain {\r\n    id\r\n    name\r\n    __typename\r\n  }\r\n  ... on VsphereVm {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on LinuxFileset {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on ShareFileset {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on WindowsFileset {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on NutanixVm {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on HyperVVirtualMachine {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on VolumeGroup {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on O365Onedrive {\r\n    userPrincipalName\r\n    __typename\r\n  }\r\n  ... on O365SharepointDrive {\r\n    url\r\n    __typename\r\n  }\r\n  ... on AzureNativeVirtualMachine {\r\n    region\r\n    resourceGroup {\r\n      subscription {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on AzureNativeManagedDisk {\r\n    region\r\n    resourceGroup {\r\n      subscription {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  ... on CloudDirectNasExport {\r\n    exportPath\r\n    __typename\r\n  }\r\n  ... on CloudDirectHierarchyObject {\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}",
                                "variables": {
                                  "analysisStatusesFilter": "[variables('TemplateEmptyArray')]",
                                  "clusterIdsFilter": "[variables('TemplateEmptyArray')]",
                                  "day": "@{formatDateTime(utcNow(), 'yyyy-MM-dd')}",
                                  "first": 50,
                                  "includeInsightsMarker": false,
                                  "includeWhitelistedResults": false,
                                  "objectTypes": "[variables('TemplateEmptyArray')]",
                                  "policyIdsFilter": "[variables('TemplateEmptyArray')]",
                                  "riskLevelsFilter": "[variables('TemplateEmptyArray')]",
                                  "searchObjectName": "@{variables('objectName')}",
                                  "subscriptionIdsFilter": "[variables('TemplateEmptyArray')]",
                                  "timezone": "[variables('blanks')]"
                                }
                              },
                              "headers": {
                                "Authorization": "Bearer @{variables('accessToken')}"
                              },
                              "method": "POST",
                              "uri": "@{variables('BaseUrl')}/api/graphql"
                            }
                          },
                          "Get_objectName_from_user": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                              "body": {
                                "body": {
                                  "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"File Based Object\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Please provide objectName to get policy hits.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"info\",\n            \"size\": \"Medium\",\n            \"spacing\": \"Large\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"objectName\",\n            \"isRequired\": true,\n            \"label\": \"Object Name(required)\",\n            \"errorMessage\": \"objectName is a required field.\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"NOTE: If you don't have an objectName, please click the link below to find the list of available objects and provide name of object found from the list in above text box.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"info2\",\n            \"spacing\": \"Medium\",\n            \"size\": \"Default\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.OpenUrl\",\n            \"title\": \"CLICK HERE TO VIEW AVAILABLE OBJECTS ON RUBRIK INSTANCE\",\n            \"url\": \"@{variables('baseUrl')}/sonar/objects/data_center/overview\",\n            \"role\": \"Button\"\n        },\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}",
                                  "recipient": {
                                    "channelId": "[[parameters('TeamsChannelId')]",
                                    "groupId": "[[parameters('TeamsGroupId')]"
                                  },
                                  "updateMessage": "Thanks for your response!"
                                },
                                "notificationUrl": "@{listCallbackUrl()}"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['teams']['connectionId']"
                                }
                              },
                              "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                            }
                          },
                          "Set_objectName": {
                            "runAfter": {
                              "Get_objectName_from_user": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "objectName",
                              "value": "@{body('Get_objectName_from_user')?['data']?['objectName']}"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(triggerBody()?['ObjectId'])",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_error_occurred_while_retrieving_data": {
                      "actions": {
                        "Failure_Response": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "@variables('errorMessage')",
                            "statusCode": 400
                          }
                        },
                        "Terminate": {
                          "runAfter": {
                            "Failure_Response": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "@variables('errorMessage')"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Check_if_nextPage_available": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Does_policy_hits_data_found": {
                            "actions": {
                              "Success_Response": {
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": "Policy Hits for object @{variables('objectId')} ingested in log analytics workspace successfully.",
                                  "statusCode": 200
                                }
                              }
                            },
                            "else": {
                              "actions": {
                                "Success_Response_with_no_data": {
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": "No policy hits data found for object @{variables('objectId')}.",
                                    "statusCode": 200
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@variables('dataFound')",
                                    "@true"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('errorMessage'))",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_get_access_token_get_status_code_equal_to_200_": {
                      "runAfter": {
                        "Get_Access_Token": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Authentication_Failure_Response": {
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": "@body('Get_Access_Token')?['message']",
                              "statusCode": "@outputs('Get_Access_Token')['statusCode']"
                            }
                          },
                          "Terminate_due_to_authentication_failure": {
                            "runAfter": {
                              "Authentication_Failure_Response": [
                                "Succeeded",
                                "Skipped",
                                "Failed"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "@{outputs('Get_Access_Token')['statusCode']}",
                                "message": "@{body('Get_Access_Token')?['message']}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Get_Access_Token')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_status_code_for_getting_latest_snapshotId_equal_to_200": {
                      "actions": {
                        "Does_get_snapshotId_response_conatin_error": {
                          "actions": {
                            "Failure_as_snapshot_list_api_response_contain_errors": {
                              "type": "Response",
                              "kind": "Http",
                              "inputs": {
                                "body": "@body('Get_Latest_SnapshotId_for_given_ObjectId')?['errors'][0]?['message']",
                                "statusCode": 400
                              }
                            },
                            "Terminate_as_snapshot_list_api_response_contain_erros": {
                              "runAfter": {
                                "Failure_as_snapshot_list_api_response_contain_errors": [
                                  "Succeeded",
                                  "Skipped",
                                  "Failed"
                                ]
                              },
                              "type": "Terminate",
                              "inputs": {
                                "runError": {
                                  "message": "@{body('Get_Latest_SnapshotId_for_given_ObjectId')?['errors'][0]?['message']}"
                                },
                                "runStatus": "Failed"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Increment_snapshotcount": {
                                "runAfter": {
                                  "Set_SnapshotId": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "IncrementVariable",
                                "inputs": {
                                  "name": "count",
                                  "value": 1
                                }
                              },
                              "Parse_JSON": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('Get_Latest_SnapshotId_for_given_ObjectId')",
                                  "schema": {
                                    "properties": {
                                      "data": {
                                        "properties": {
                                          "snapshotsListConnection": {
                                            "properties": {
                                              "edges": {
                                                "items": {
                                                  "properties": {
                                                    "node": {
                                                      "properties": {
                                                        "cdmVersion": {
                                                          "type": "string"
                                                        },
                                                        "cluster": {
                                                          "properties": {
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "status": {
                                                              "type": "string"
                                                            },
                                                            "version": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        },
                                                        "date": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "isDownloadedSnapshot": {
                                                          "type": "boolean"
                                                        },
                                                        "isOnDemandSnapshot": {
                                                          "type": "boolean"
                                                        },
                                                        "slaDomain": {
                                                          "properties": {
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        },
                                                        "snapshotRetentionInfo": {
                                                          "properties": {
                                                            "archivalInfos": {
                                                              "type": "array"
                                                            },
                                                            "localInfo": {
                                                              "properties": {
                                                                "isExpirationDateCalculated": {
                                                                  "type": "boolean"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "replicationInfos": {
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": [
                                                            "object",
                                                            "null"
                                                          ]
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "node"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "pageInfo": {
                                                "properties": {
                                                  "endCursor": {
                                                    "type": "string"
                                                  },
                                                  "hasNextPage": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              },
                              "Set_SnapshotId": {
                                "runAfter": {
                                  "Set_totalSnapshotCount": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "snapshotId",
                                  "value": "@{body('Parse_JSON')?['data']?['snapshotsListConnection']?['edges'][variables('count')]?['node']?['id']}"
                                }
                              },
                              "Set_totalSnapshotCount": {
                                "runAfter": {
                                  "Parse_JSON": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "TotalSnapshotCount",
                                  "value": "@length(body('Parse_JSON')?['data']?['snapshotsListConnection']?['edges'])"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('Get_Latest_SnapshotId_for_given_ObjectId')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Get_Latest_SnapshotId_for_given_ObjectId": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Failure_response_as_snapshot_list_api_request_failed": {
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": "@body('Get_Latest_SnapshotId_for_given_ObjectId')?['message']",
                              "statusCode": "@outputs('Get_Latest_SnapshotId_for_given_ObjectId')['statusCode']"
                            }
                          },
                          "Terminate_as_snapshot_list_api_request_failed": {
                            "runAfter": {
                              "Failure_response_as_snapshot_list_api_request_failed": [
                                "Succeeded",
                                "Skipped",
                                "Failed"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "@{outputs('Get_Latest_SnapshotId_for_given_ObjectId')['statusCode']}",
                                "message": "@{body('Get_Latest_SnapshotId_for_given_ObjectId')?['message']}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Get_Latest_SnapshotId_for_given_ObjectId')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Get_Access_Token": {
                      "runAfter": {
                        "Get_Rubrik_ClientSecret": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "client_id": "@{body('Get_Rubrik_ClientId')?['value']}",
                          "client_secret": "@{body('Get_Rubrik_ClientSecret')?['value']}"
                        },
                        "method": "POST",
                        "uri": "@{variables('BaseUrl')}/api/client_token"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_Latest_SnapshotId_for_given_ObjectId": {
                      "runAfter": {
                        "Get_file_folder_or_fileshare_from_user_for_given_Object": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "query SnapshotsListSingleQuery($workloadId: String!, $first: Int, $after: String, $snapshotFilter: [SnapshotQueryFilterInput!], $sortBy: SnapshotQuerySortByField, $sortOrder: SortOrder, $timeRange: TimeRangeInput) {\r\n  snapshotsListConnection: snapshotOfASnappableConnection(\r\n    workloadId: $workloadId\r\n    first: $first\r\n    after: $after\r\n    snapshotFilter: $snapshotFilter\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n    timeRange: $timeRange\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        date\r\n        expirationDate\r\n        isOnDemandSnapshot\r\n        ... on CdmSnapshot {\r\n          cdmVersion\r\n          isDownloadedSnapshot\r\n          cluster {\r\n            id\r\n            name\r\n            version\r\n            status\r\n          }\r\n          pendingSnapshotDeletion {\r\n            id: snapshotFid\r\n            status\r\n          }\r\n          slaDomain {\r\n            name\r\n            ... on ClusterSlaDomain {\r\n              fid\r\n              cluster {\r\n                id\r\n                name\r\n              }\r\n            }\r\n            ... on GlobalSlaReply {\r\n              id\r\n            }\r\n          }\r\n          pendingSla {\r\n            id\r\n            name\r\n          }\r\n          snapshotRetentionInfo {\r\n            archivalInfos {\r\n              name\r\n              isExpirationDateCalculated\r\n              expirationTime\r\n            }\r\n            localInfo {\r\n              name\r\n              isExpirationDateCalculated\r\n              expirationTime\r\n            }\r\n            replicationInfos {\r\n              name\r\n              isExpirationDateCalculated\r\n              expirationTime\r\n            }\r\n          }\r\n          sapHanaAppMetadata {\r\n            backupId\r\n            backupPrefix\r\n            snapshotType\r\n            files {\r\n              backupFileSizeInBytes\r\n            }\r\n          }\r\n          legalHoldInfo {\r\n            shouldHoldInPlace\r\n          }\r\n        }\r\n        ... on PolarisSnapshot {\r\n          isDownloadedSnapshot\r\n          isReplica\r\n          isArchivalCopy\r\n          slaDomain {\r\n            name\r\n            ... on ClusterSlaDomain {\r\n              fid\r\n              cluster {\r\n                id\r\n                name\r\n              }\r\n            }\r\n            ... on GlobalSlaReply {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n    }\r\n  }\r\n}",
                          "variables": {
                            "sortBy": "CREATION_TIME",
                            "sortOrder": "DESC",
                            "workloadId": "@{variables('objectId')}"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('accessToken')}"
                        },
                        "method": "POST",
                        "uri": "@{variables('BaseUrl')}/api/graphql"
                      }
                    },
                    "Get_Rubrik_ClientId": {
                      "runAfter": {
                        "Initialize_dataFound": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_Rubrik_ClientSecret": {
                      "runAfter": {
                        "Get_Rubrik_ClientId": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_file_folder_or_fileshare_from_user_for_given_Object": {
                      "runAfter": {
                        "Does_ObjectId_available_in_request": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"File Based Object\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name=@{variables('objectName')} \\n\\nObject Id = @{variables('objectId')} \\n\\n@{if(empty(triggerBody()?['incidentStartTime']), '', concat('Incident Start Time = ', triggerBody()?['incidentStartTime']))} \",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n         {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments to fetch policy hits for a particular file or specified path\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"title\",\n            \"size\": \"Medium\",\n            \"spacing\": \"Large\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Enter file/folder/fileshare name for given object (case-insensitive)\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"searchText\",\n            \"isMultiline\": false,\n            \"isRequired\": false\n        },\n{\n            \"type\": \"TextBlock\",\n            \"text\": \"Standard FilePath to get policy hits within\\n e.g. /C: or /var/www\\n(CASE-SENSITIVE)\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"filePath\",\n            \"isMultiline\": false,\n            \"isRequired\": false\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                            "recipient": {
                              "channelId": "[[parameters('TeamsChannelId')]",
                              "groupId": "[[parameters('TeamsGroupId')]"
                            },
                            "updateMessage": "Thanks for your response!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Initialize_BaseUrl": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "BaseUrl",
                            "type": "string",
                            "value": "@{if(empty(triggerBody()?['Baseurl']),parameters('Baseurl'),triggerBody()?['Baseurl'])}"
                          }
                        ]
                      }
                    },
                    "Initialize_access_token": {
                      "runAfter": {
                        "Does_get_access_token_get_status_code_equal_to_200_": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "accessToken",
                            "type": "string",
                            "value": "@{body('Get_Access_Token')?['access_token']}"
                          }
                        ]
                      }
                    },
                    "Initialize_dataFound": {
                      "runAfter": {
                        "Initialize_totalSnapshotCount": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "dataFound",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_errormessage": {
                      "runAfter": {
                        "Initialize_hasNextPage": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "errorMessage",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_hasNextPage": {
                      "runAfter": {
                        "Initialize_policy_hits_data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "hasNextPage",
                            "type": "boolean",
                            "value": "@true"
                          }
                        ]
                      }
                    },
                    "Initialize_objectId": {
                      "runAfter": {
                        "Initialize_snapshotId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "objectId",
                            "type": "string",
                            "value": "@triggerBody()?['ObjectId']"
                          }
                        ]
                      }
                    },
                    "Initialize_objectName": {
                      "runAfter": {
                        "Initialize_objectId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "objectName",
                            "type": "string",
                            "value": "@triggerBody()?['ObjectName']"
                          }
                        ]
                      }
                    },
                    "Initialize_policy_hits_data": {
                      "runAfter": {
                        "Initialize_objectName": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "policyhits",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_snapshotCount": {
                      "runAfter": {
                        "Initialize_snpahotfound": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "count",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Initialize_snapshotId": {
                      "runAfter": {
                        "Initialize_BaseUrl": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "snapshotId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_snpahotfound": {
                      "runAfter": {
                        "Initialize_errormessage": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "snapshotFound",
                            "type": "boolean"
                          }
                        ]
                      }
                    },
                    "Initialize_totalSnapshotCount": {
                      "runAfter": {
                        "Initialize_snapshotCount": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalSnapshotCount",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_variable": {
                      "runAfter": {
                        "Does_status_code_for_getting_latest_snapshotId_equal_to_200": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "variables",
                            "type": "object",
                            "value": {
                              "filters": {
                                "analyzerGroupIds": "[variables('TemplateEmptyArray')]",
                                "fileType": "HITS",
                                "searchText": "@{body('Get_file_folder_or_fileshare_from_user_for_given_Object')?['data']?['searchText']}",
                                "snappablePaths": [
                                  {
                                    "snappableFid": "@{variables('objectId')}",
                                    "stdPath": "@{body('Get_file_folder_or_fileshare_from_user_for_given_Object')?['data']?['filePath']}"
                                  }
                                ],
                                "whitelistEnabled": true
                              },
                              "first": 100,
                              "snappableFid": "@{variables('objectId')}",
                              "snapshotFid": "@{variables('snapshotId')}",
                              "sort": {
                                "sortBy": "HITS",
                                "sortOrder": "DESC"
                              },
                              "timezone": "America/Los_Angeles"
                            }
                          }
                        ]
                      }
                    },
                    "Until_snapshotFound_with_policy_hits": {
                      "actions": {
                        "Does_status_code_to_get_policy_hits_for_a_snapshot_get_status_code_200": {
                          "actions": {
                            "Does_data_not_available_in_response_for_current_snapshot": {
                              "actions": {
                                "Check_for_iteration_of_all_Snapshot_is_completed_or_not": {
                                  "actions": {
                                    "Set_error_message_that_no_snapshot_found_with_sensitive_hits_data": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "errorMessage",
                                        "value": "No snapshot found with sensitive policy hits data information for @{variables('objectName')}"
                                      }
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Increment_count_of_snapshot": {
                                        "runAfter": {
                                          "Set_snapshotId_after_current": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "IncrementVariable",
                                        "inputs": {
                                          "name": "count",
                                          "value": 1
                                        }
                                      },
                                      "Set_errorMessage_empty": {
                                        "runAfter": {
                                          "Set_variable_for_next_snapshot_policyhits": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "errorMessage",
                                          "value": "@{null}"
                                        }
                                      },
                                      "Set_snapshotId_after_current": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "snapshotId",
                                          "value": "@{body('Parse_JSON')?['data']?['snapshotsListConnection']?['edges'][variables('count')]?['node']?['id']}"
                                        }
                                      },
                                      "Set_variable_for_next_snapshot_policyhits": {
                                        "runAfter": {
                                          "Increment_count_of_snapshot": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "variables",
                                          "value": {
                                            "filters": {
                                              "analyzerGroupIds": "[variables('TemplateEmptyArray')]",
                                              "fileType": "HITS",
                                              "searchText": "@{body('Get_file_folder_or_fileshare_from_user_for_given_Object')?['data']?['searchText']}",
                                              "snappablePaths": [
                                                {
                                                  "snappableFid": "@{variables('objectId')}",
                                                  "stdPath": "@{body('Get_file_folder_or_fileshare_from_user_for_given_Object')?['data']?['filePath']}"
                                                }
                                              ],
                                              "whitelistEnabled": true
                                            },
                                            "first": 100,
                                            "snappableFid": "@{variables('objectId')}",
                                            "snapshotFid": "@{variables('snapshotId')}",
                                            "sort": {
                                              "sortBy": "HITS",
                                              "sortOrder": "DESC"
                                            },
                                            "timezone": "America/Los_Angeles"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@variables('count')",
                                          "@variables('TotalSnapshotCount')"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "runAfter": {
                                "Does_response_to_get_policy_hits_for_a_snapshot_contain_errors": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Check_if_next_page_available": {
                                    "actions": {
                                      "Set_has_Next_Page_to_true": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "hasNextPage",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_variables_for_next_page_API_call": {
                                        "runAfter": {
                                          "Set_has_Next_Page_to_true": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "variables",
                                          "value": {
                                            "after": "@body('Parse_JSON_2')?['data']?['policyObj']?['fileResultConnection']?['pageInfo']?['endCursor']",
                                            "filters": {
                                              "analyzerGroupIds": "[variables('TemplateEmptyArray')]",
                                              "fileType": "HITS",
                                              "searchText": "@{body('Get_file_folder_or_fileshare_from_user_for_given_Object')?['data']?['searchText']}",
                                              "snappablePaths": [
                                                {
                                                  "snappableFid": "@{variables('objectId')}",
                                                  "stdPath": "@{body('Get_file_folder_or_fileshare_from_user_for_given_Object')?['data']?['filePath']}"
                                                }
                                              ],
                                              "whitelistEnabled": true
                                            },
                                            "first": 100,
                                            "snappableFid": "@{variables('objectId')}",
                                            "snapshotFid": "@{variables('snapshotId')}",
                                            "sort": {
                                              "sortBy": "HITS",
                                              "sortOrder": "DESC"
                                            },
                                            "timezone": "America/Los_Angeles"
                                          }
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Set_policyhits_to_null": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_hasNextPage_to_false_as_next_is_not_available": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "hasNextPage",
                                            "value": "@false"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_2')?['data']?['policyObj']?['fileResultConnection']?['pageInfo']?['hasNextPage']",
                                            true
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Compose_2": {
                                    "runAfter": {
                                      "For_each_2": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@variables('policyhits')"
                                  },
                                  "For_each_2": {
                                    "foreach": "@body('Parse_JSON_2')?['data']?['policyObj']?['fileResultConnection']?['edges']",
                                    "actions": {
                                      "Add_Objectname_property_for_each_policyHits_data": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "policyhits",
                                          "value": "@setProperty(items('For_each_2')?['node'],'ObjectId',variables('objectId'))"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Set_snapshotFound_to_true": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Foreach"
                                  },
                                  "Parse_JSON_2": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('HTTP')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "policyObj": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "fileResultConnection": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "edges": {
                                                        "items": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "cursor": {
                                                              "type": "string"
                                                            },
                                                            "node": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "analyzerGroupResults": {
                                                                  "items": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "analyzerGroup": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "groupType": {
                                                                            "type": "string"
                                                                          },
                                                                          "id": {
                                                                            "type": "string"
                                                                          },
                                                                          "name": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": [
                                                                          "object",
                                                                          "null"
                                                                        ]
                                                                      },
                                                                      "analyzerResults": {
                                                                        "items": {
                                                                          "properties": {
                                                                            "__typename": {
                                                                              "type": "string"
                                                                            },
                                                                            "analyzer": {
                                                                              "properties": {
                                                                                "__typename": {
                                                                                  "type": "string"
                                                                                },
                                                                                "analyzerType": {
                                                                                  "type": "string"
                                                                                },
                                                                                "id": {
                                                                                  "type": "string"
                                                                                },
                                                                                "name": {
                                                                                  "type": "string"
                                                                                }
                                                                              },
                                                                              "type": [
                                                                                "object",
                                                                                "null"
                                                                              ]
                                                                            },
                                                                            "hits": {
                                                                              "properties": {
                                                                                "__typename": {
                                                                                  "type": "string"
                                                                                },
                                                                                "totalHits": {
                                                                                  "type": "integer"
                                                                                },
                                                                                "violations": {
                                                                                  "type": "integer"
                                                                                }
                                                                              },
                                                                              "type": [
                                                                                "object",
                                                                                "null"
                                                                              ]
                                                                            }
                                                                          },
                                                                          "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                      },
                                                                      "hits": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "totalHits": {
                                                                            "type": "integer"
                                                                          },
                                                                          "totalHitsDelta": {
                                                                            "type": "integer"
                                                                          },
                                                                          "violations": {
                                                                            "type": "integer"
                                                                          },
                                                                          "violationsDelta": {
                                                                            "type": "integer"
                                                                          }
                                                                        },
                                                                        "type": [
                                                                          "object",
                                                                          "null"
                                                                        ]
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "type": "array"
                                                                },
                                                                "directory": {
                                                                  "type": "string"
                                                                },
                                                                "errorCode": {
                                                                  "type": "string"
                                                                },
                                                                "filename": {
                                                                  "type": "string"
                                                                },
                                                                "filesWithHits": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalHits": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violations": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                },
                                                                "hits": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalHits": {
                                                                      "type": "integer"
                                                                    },
                                                                    "totalHitsDelta": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violations": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violationsDelta": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                },
                                                                "lastAccessTime": {
                                                                  "type": "integer"
                                                                },
                                                                "lastModifiedTime": {
                                                                  "type": "integer"
                                                                },
                                                                "mode": {
                                                                  "type": "string"
                                                                },
                                                                "nativePath": {
                                                                  "type": "string"
                                                                },
                                                                "numActivities": {
                                                                  "type": "integer"
                                                                },
                                                                "numActivitiesDelta": {
                                                                  "type": "integer"
                                                                },
                                                                "numDescendantErrorFiles": {
                                                                  "type": "integer"
                                                                },
                                                                "numDescendantFiles": {
                                                                  "type": "integer"
                                                                },
                                                                "numDescendantSkippedExtFiles": {
                                                                  "type": "integer"
                                                                },
                                                                "numDescendantSkippedSizeFiles": {
                                                                  "type": "integer"
                                                                },
                                                                "openAccessFilesWithHits": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalHits": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violations": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                },
                                                                "openAccessType": {
                                                                  "type": "string"
                                                                },
                                                                "sensitiveFiles": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "highRiskFileCount": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "totalCount": {
                                                                          "type": "integer"
                                                                        },
                                                                        "violatedCount": {
                                                                          "type": "integer"
                                                                        }
                                                                      },
                                                                      "type": "object"
                                                                    },
                                                                    "lowRiskFileCount": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "totalCount": {
                                                                          "type": "integer"
                                                                        },
                                                                        "violatedCount": {
                                                                          "type": "integer"
                                                                        }
                                                                      },
                                                                      "type": "object"
                                                                    },
                                                                    "mediumRiskFileCount": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "totalCount": {
                                                                          "type": "integer"
                                                                        },
                                                                        "violatedCount": {
                                                                          "type": "integer"
                                                                        }
                                                                      },
                                                                      "type": "object"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                },
                                                                "size": {
                                                                  "type": "integer"
                                                                },
                                                                "staleFilesWithHits": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalHits": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violations": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                },
                                                                "stalenessType": {
                                                                  "type": "string"
                                                                },
                                                                "stdPath": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "required": [
                                                            "cursor",
                                                            "node",
                                                            "__typename"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        "type": "array"
                                                      },
                                                      "pageInfo": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "endCursor": {
                                                            "type": "string"
                                                          },
                                                          "hasNextPage": {
                                                            "type": "boolean"
                                                          }
                                                        },
                                                        "type": "object"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "id": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Send_Data": {
                                    "runAfter": {
                                      "Compose_2": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "body": "@{outputs('Compose_2')}",
                                      "headers": {
                                        "Log-Type": "[[parameters('PolicyHitsTableName')]"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                        }
                                      },
                                      "method": "post",
                                      "path": "/api/logs"
                                    }
                                  },
                                  "Set_data_Found": {
                                    "runAfter": {
                                      "Send_Data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "dataFound",
                                      "value": "@true"
                                    }
                                  },
                                  "Set_policyhits_to_null": {
                                    "runAfter": {
                                      "Set_data_Found": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "policyhits",
                                      "value": "@null"
                                    }
                                  },
                                  "Set_snapshotFound_to_true": {
                                    "runAfter": {
                                      "Parse_JSON_2": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "snapshotFound",
                                      "value": "@true"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('HTTP')?['data']",
                                      "@null"
                                    ]
                                  },
                                  {
                                    "contains": [
                                      "@variables('errorMessage')",
                                      "No result rows returned"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Does_response_to_get_policy_hits_for_a_snapshot_contain_errors": {
                              "actions": {
                                "Set_errorMessage": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "errorMessage",
                                    "value": "@{body('HTTP')?['errors'][0]?['message']}"
                                  }
                                },
                                "Set_has_Next_Page_to_false": {
                                  "runAfter": {
                                    "Set_errorMessage": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "hasNextPage",
                                    "value": "@false"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('HTTP')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "HTTP": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_errorMessage_": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "errorMessage",
                                  "value": "@{body('HTTP')?['message']}"
                                }
                              },
                              "Set_variable": {
                                "runAfter": {
                                  "Set_errorMessage_": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "hasNextPage",
                                  "value": "@false"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP": {
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query CrawlsFileListQuery($snappableFid: String!, $snapshotFid: String!, $first: Int!, $after: String, $filters: ListFileResultFiltersInput, $sort: FileResultSortInput, $timezone: String!) {\r\n  policyObj(snappableFid: $snappableFid, snapshotFid: $snapshotFid) {\r\n    id: snapshotFid\r\n    fileResultConnection(first: $first, after: $after, filter: $filters, sort: $sort, timezone: $timezone) {\r\n      edges {\r\n        cursor\r\n        node {\r\n          ...DiscoveryFileFragment\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment DiscoveryFileFragment on FileResult {\r\n  nativePath\r\n  stdPath\r\n  filename\r\n  mode\r\n  size\r\n  lastAccessTime\r\n  lastModifiedTime\r\n  directory\r\n  numDescendantFiles\r\n  numDescendantErrorFiles\r\n  numDescendantSkippedExtFiles\r\n  numDescendantSkippedSizeFiles\r\n  errorCode\r\n  hits {\r\n    totalHits\r\n    violations\r\n    violationsDelta\r\n    totalHitsDelta\r\n    __typename\r\n  }\r\n  filesWithHits {\r\n    totalHits\r\n    violations\r\n    __typename\r\n  }\r\n  openAccessFilesWithHits {\r\n    totalHits\r\n    violations\r\n    __typename\r\n  }\r\n  staleFilesWithHits {\r\n    totalHits\r\n    violations\r\n    __typename\r\n  }\r\n  analyzerGroupResults {\r\n    ...AnalyzerGroupResultFragment\r\n    __typename\r\n  }\r\n  sensitiveFiles {\r\n    highRiskFileCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    mediumRiskFileCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    lowRiskFileCount {\r\n      totalCount\r\n      violatedCount\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  openAccessType\r\n  stalenessType\r\n  numActivities\r\n  numActivitiesDelta\r\n  __typename\r\n}\r\n\r\nfragment AnalyzerGroupResultFragment on AnalyzerGroupResult {\r\n  analyzerGroup {\r\n    groupType\r\n    id\r\n    name\r\n    __typename\r\n  }\r\n  analyzerResults {\r\n    hits {\r\n      totalHits\r\n      violations\r\n      __typename\r\n    }\r\n    analyzer {\r\n      id\r\n      name\r\n      analyzerType\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  hits {\r\n    totalHits\r\n    violations\r\n    violationsDelta\r\n    totalHitsDelta\r\n    __typename\r\n  }\r\n  __typename\r\n}",
                              "variables": "@variables('variables')"
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('accessToken')}"
                            },
                            "method": "POST",
                            "uri": "@{variables('BaseUrl')}/api/graphql"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(or(equals(variables('snapshotFound'), true), not(empty(variables('errorMessage')))), true)",
                      "limit": {
                        "timeout": "PT12H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "Rubrik": "Rubrik",
                "feature": "ObjectPolicyHits",
                "hidden-SentinelTemplateName": "RubrikFileObjectContextAnalysis",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                },
                "parameterValues": {
                  "username": "[[parameters('LogAnalyticsWorkspaceId')]",
                  "password": "[[parameters('LogAnalyticsWorkspaceKey')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[parameters('TenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[[parameters('KeyvaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId10'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId10')]",
                "contentId": "[variables('_playbookContentId10')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion10')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik File Object Context Analysis",
            "description": "This playbook will retrieve policy hits from Rubrik Security Cloud for a given object, for a particular file, folder, or file share.",
            "prerequisites": [
              "1. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "2. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId. ",
              "3. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with unique name",
              "b. Go to KeyVault -> secrets, click on Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively",
              "NOTE: Make sure Permission model in Access Configuration of Keyvault is selected to Vault access policy. If not then change it to 'Vault access policy'"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select keyvault connection resource",
              "2. Go to General -> edit API connection",
              "3. Click the Keyvault connection resource",
              "4. Click edit API connection",
              "5. Click Authorize",
              "6. Sign in",
              "7. Click Save",
              "8. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for playbook's managed identity to read, write secrets of keyvault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In principal section, search by copied object ID. Click next.",
              "5. Click review + create."
            ],
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "File Object",
              "Policy Hits",
              "Security",
              "Rubrik"
            ],
            "lastUpdateTime": "2024-04-22T00:14:08.736Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId10')]",
        "contentKind": "Playbook",
        "displayName": "RubrikFileObjectContextAnalysis",
        "contentProductId": "[variables('_playbookcontentProductId10')]",
        "id": "[variables('_playbookcontentProductId10')]",
        "version": "[variables('playbookVersion10')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName11')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikUserIntelligenceAnalysis Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion11')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikUserIntelligenceAnalysis",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Enter name of keyvault where service account credentials are stored(e.g. RubrikSentinelKeyVault)"
              }
            },
            "TenantId": {
              "type": "string",
              "metadata": {
                "description": "Enter Tenant Id of your Microsoft EntraID where keyvault is available"
              }
            },
            "BaseUrl": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Base Url of the RubrikApi instance(e.g. https://rubrik-rcf-32348.my.rubrik.com)"
              }
            },
            "RiskPolicyHitsPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook RubrikRetrieveUserIntelligenceInformation(e.g.RubrikRetrieveUserIntelligenceInformation)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Does_status_code_of_get_access_token_equal_to_200": {
                      "runAfter": {
                        "Get_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Terminate_due_to_authentication_failure": {
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "@{outputs('Get_Access_Token')['statusCode']}",
                                "message": "@{body('Get_Access_Token')?['message']}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Get_Access_Token')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Does_username_available_in_incident": {
                      "actions": {
                        "Does_HTTP_request_get_status_code_equal_to_200": {
                          "actions": {
                            "Does_response_contain_error": {
                              "actions": {
                                "Terminate_due_to_error_in_response": {
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "message": "Error: @{body('Get_User_risk_information_for_username')?['errors'][0]?['message']}"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Does_response_contain_user_data": {
                                    "actions": {
                                      "For_user": {
                                        "foreach": "@body('Parse_User_risk_information_response')?['data']?['principalSummaries']?['edges']",
                                        "actions": {
                                          "Does_incidentCommentCount_reached_the_limit": {
                                            "actions": {
                                              "Add_comment_to_incident_that_more_users_details_can_be_found_in_table": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>Incident reached maximum number of comments. You can still find information about more users related to user risk detail and policy hits details in log analytics workspace tables. &nbsp;</p>"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "path": "/Incidents/Comment"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Set_userData_to_null": [
                                                "Succeeded"
                                              ]
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "greaterOrEquals": [
                                                    "@variables('incidentCommentCount')",
                                                    98
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Increment_variable": {
                                            "runAfter": {
                                              "RubrikUserRiskPolicyDetails_3": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "IncrementVariable",
                                            "inputs": {
                                              "name": "incidentCommentCount",
                                              "value": 2
                                            }
                                          },
                                          "Is_riskLevel_of_User_High": {
                                            "actions": {
                                              "Update_incident_Severity_to_High_based_on_user_risk": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "severity": "High"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "put",
                                                  "path": "/Incidents"
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@items('For_user')?['node']?['riskLevel']",
                                                    "HIGH_RISK"
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Is_riskLevel_of_user_Low_and_incident_severity_not_Medium_or_High": {
                                            "actions": {
                                              "Update_incident_severity_to_low": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "severity": "Low"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "put",
                                                  "path": "/Incidents"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Is_riskLevel_of_user_Medium_and_incident_severity_not_High": [
                                                "Succeeded"
                                              ]
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@items('For_user')?['node']?['riskLevel']",
                                                    "LOW_RISK"
                                                  ]
                                                },
                                                {
                                                  "not": {
                                                    "equals": [
                                                      "@or(equals(triggerBody()?['object']?['properties']?['severity'],'Medium'),equals(triggerBody()?['object']?['properties']?['severity'],'High'))",
                                                      "@true"
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Is_riskLevel_of_user_Medium_and_incident_severity_not_High": {
                                            "actions": {
                                              "Update_incident_severity_to_medium": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "severity": "Medium"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "put",
                                                  "path": "/Incidents"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Is_riskLevel_of_User_High": [
                                                "Succeeded"
                                              ]
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "equals": [
                                                    "@items('For_user')?['node']?['riskLevel']",
                                                    "MEDIUM_RISK"
                                                  ]
                                                },
                                                {
                                                  "not": {
                                                    "equals": [
                                                      "@triggerBody()?['object']?['properties']?['severity']",
                                                      "High"
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "RubrikUserRiskPolicyDetails_3": {
                                            "runAfter": {
                                              "Set_userData_for_username": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Workflow",
                                            "inputs": {
                                              "body": {
                                                "accessToken": "@variables('AccessToken')",
                                                "baseUrl": "@variables('BaseUrl')",
                                                "incidentARMId": "@triggerBody()?['object']?['id']",
                                                "userData": "@variables('userData')",
                                                "userId": "@variables('userId')",
                                                "userEmail": "[variables('blanks')]",
                                                "userName": "@variables('Username')"
                                              },
                                              "host": {
                                                "triggerName": "manual",
                                                "workflow": {
                                                  "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('RiskPolicyHitsPlaybookName'))]"
                                                }
                                              }
                                            }
                                          },
                                          "Set_userData_for_username": {
                                            "runAfter": {
                                              "Set_userId": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                              "name": "userData",
                                              "value": {
                                                "RiskDetails": {
                                                  "riskLevel": "@items('For_user')?['node']?['riskLevel']"
                                                },
                                                "sensitiveData": {
                                                  "highRiskFiles": "@items('For_user')?['node']?['sensitiveFiles']?['highRiskFileCount']?['totalCount']",
                                                  "lowRiskFiles": "@items('For_user')?['node']?['sensitiveFiles']?['lowRiskFileCount']?['totalCount']",
                                                  "mediumRiskFiles": "@items('For_user')?['node']?['sensitiveFiles']?['mediumRiskFileCount']?['totalCount']",
                                                  "sensitiveHits": "@items('For_user')?['node']?['totalSensitiveHits']?['totalHits']",
                                                  "sensitiveObjects": "@items('For_user')?['node']?['sensitiveObjectCount']?['totalCount']"
                                                },
                                                "userDetails": {
                                                  "userEmail": "@items('For_user')?['node']?['upn']",
                                                  "userFullName": "@items('For_user')?['node']?['fullName']",
                                                  "userId": "@items('For_user')?['node']?['principalId']"
                                                }
                                              }
                                            }
                                          },
                                          "Set_userData_to_null": {
                                            "runAfter": {
                                              "Increment_variable": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "userData",
                                              "value": "@null"
                                            }
                                          },
                                          "Set_userId": {
                                            "runAfter": {
                                              "Is_riskLevel_of_user_Low_and_incident_severity_not_Medium_or_High": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "userId",
                                              "value": "@items('For_user')?['node']?['principalId']"
                                            }
                                          }
                                        },
                                        "type": "Foreach",
                                        "runtimeConfiguration": {
                                          "concurrency": {
                                            "repetitions": 1
                                          }
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_User_risk_information_response": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Add_comment_that_no_information_is_available_related_to_username": {
                                          "type": "ApiConnection",
                                          "inputs": {
                                            "body": {
                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                              "message": "<p>Sensitive Data Access information is not available related to user @{outputs('Username_or_Email')}</p>"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                              }
                                            },
                                            "method": "post",
                                            "path": "/Incidents/Comment"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@empty(body('Parse_User_risk_information_response')?['data']?['principalSummaries']?['edges'])",
                                            "@false"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_User_risk_information_response": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('Get_User_risk_information_for_username')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "principalSummaries": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "edges": {
                                                    "items": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "cursor": {
                                                          "type": "string"
                                                        },
                                                        "node": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "fullName": {
                                                              "type": "string"
                                                            },
                                                            "principalId": {
                                                              "type": "string"
                                                            },
                                                            "riskLevel": {
                                                              "type": "string"
                                                            },
                                                            "sensitiveFiles": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "highRiskFileCount": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalCount": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violatedCount": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                },
                                                                "lowRiskFileCount": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalCount": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violatedCount": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                },
                                                                "mediumRiskFileCount": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "totalCount": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violatedCount": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": [
                                                                    "object",
                                                                    "null"
                                                                  ]
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "sensitiveObjectCount": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "totalCount": {
                                                                  "type": "integer"
                                                                },
                                                                "violatedCount": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "totalSensitiveHits": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "totalHits": {
                                                                  "type": "integer"
                                                                },
                                                                "violatedHits": {
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "type": [
                                                                "object",
                                                                "null"
                                                              ]
                                                            },
                                                            "upn": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "required": [
                                                        "cursor",
                                                        "node",
                                                        "__typename"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pageInfo": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "endCursor": {
                                                        "type": "string"
                                                      },
                                                      "hasNextPage": {
                                                        "type": "boolean"
                                                      },
                                                      "hasPreviousPage": {
                                                        "type": "boolean"
                                                      },
                                                      "startCursor": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('Get_User_risk_information_for_username')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Get_User_risk_information_for_username": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Terminate_due_to_api_failure": {
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('Get_User_risk_information_for_username')['statusCode']}",
                                    "message": "@{body('Get_User_risk_information_for_username')?['message']}"
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Get_User_risk_information_for_username')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_User_risk_information_for_username": {
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query UserAccessPrincipalListQuery($filter: PrincipalSummariesFilterInput, $timelineDate: String!, $sort: ListPrincipalsSummarySortInput, $first: Int, $after: String, $includeWhitelistedResults: Boolean, $isGroupPrincipalType: Boolean!) {\r\n  principalSummaries(\r\n    filter: $filter\r\n    timelineDate: $timelineDate\r\n    sort: $sort\r\n    first: $first\r\n    after: $after\r\n    includeWhitelistedResults: $includeWhitelistedResults\r\n  ) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        principalId\r\n        fullName\r\n        upn @skip(if: $isGroupPrincipalType)\r\n        riskLevel\r\n        sensitiveFiles {\r\n          ...SensitiveFilesTableCellFragment\r\n          __typename\r\n        }\r\n        totalSensitiveHits {\r\n          ...SummaryHitsFragment\r\n          __typename\r\n        }\r\n        sensitiveObjectCount {\r\n          ...SummaryCountFragment\r\n          __typename\r\n        }\r\n        numDescendants @include(if: $isGroupPrincipalType)\r\n        domainName @include(if: $isGroupPrincipalType)\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment SensitiveFilesTableCellFragment on SensitiveFiles {\r\n  highRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  mediumRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  lowRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment SummaryCountFragment on SummaryCount {\r\n  totalCount\r\n  violatedCount\r\n  __typename\r\n}\r\n\r\nfragment SummaryHitsFragment on SummaryHits {\r\n  totalHits\r\n  violatedHits\r\n  __typename\r\n}\r\n",
                              "variables": {
                                "filter": {
                                  "groupId": "[variables('blanks')]",
                                  "policyIds": "[variables('TemplateEmptyArray')]",
                                  "principalName": "@{variables('Username')}",
                                  "principalSummaryCategory": "USERS_WITH_SENSITIVE_ACCESS",
                                  "principalType": "USER"
                                },
                                "first": 50,
                                "includeWhitelistedResults": true,
                                "isGroupPrincipalType": false,
                                "sort": {
                                  "sortBy": "RISK_LEVEL",
                                  "sortOrder": "DESC"
                                },
                                "timelineDate": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}"
                              }
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('AccessToken')}"
                            },
                            "method": "POST",
                            "uri": "@{variables('BaseUrl')}/api/graphql"
                          }
                        }
                      },
                      "runAfter": {
                        "Username_or_Email": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Does_UserId_available": {
                            "actions": {
                              "Terminate": {
                                "type": "Terminate",
                                "inputs": {
                                  "runStatus": "Succeeded"
                                }
                              }
                            },
                            "runAfter": {
                              "Until": [
                                "Succeeded"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Add_comment_to_incident_(V3)": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p>No user with email @{outputs('Username_or_Email')} is available in Rubrik.</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "not": {
                                    "equals": [
                                      "@empty(variables('userId'))",
                                      "@true"
                                    ]
                                  }
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "Does_user_email_available_in_incident": {
                            "else": {
                              "actions": {
                                "Terminate_flow_as_user_information_is_not_available": {
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "code": "400",
                                      "message": "No username or email found in incident data hence exiting the flow"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@empty(variables('UserEmail'))",
                                    "@false"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "Until": {
                            "actions": {
                              "Does_Get_user_risk_information_get_status_code_equal_to_200": {
                                "actions": {
                                  "Does_user_risk_info_api_response_contain_errors": {
                                    "actions": {
                                      "Set_error_message_of_user_list_response_contain_error": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "errorMessage",
                                          "value": "@{body('Get_user_risk_information')?['errors'][0]?['message']}"
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Does_API_response_contain_data": {
                                          "actions": {
                                            "Check_if_next_page_exist": {
                                              "actions": {
                                                "Set_hasNextPage": {
                                                  "runAfter": {
                                                    "Set_variable_for_pagination": [
                                                      "Succeeded"
                                                    ]
                                                  },
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "hasNextPage",
                                                    "value": "@true"
                                                  }
                                                },
                                                "Set_variable_for_pagination": {
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "uservariable",
                                                    "value": {
                                                      "after": "@body('Parse_User_risk_Information')?['data']?['principalSummaries']?['pageInfo']?['endCursor']",
                                                      "filter": {
                                                        "groupId": "[variables('blanks')]",
                                                        "policyIds": "[variables('TemplateEmptyArray')]",
                                                        "principalSummaryCategory": "USERS_WITH_SENSITIVE_ACCESS",
                                                        "principalType": "USER"
                                                      },
                                                      "first": 1000,
                                                      "includeWhitelistedResults": true,
                                                      "isGroupPrincipalType": false,
                                                      "sort": {
                                                        "sortBy": "RISK_LEVEL",
                                                        "sortOrder": "DESC"
                                                      },
                                                      "timelineDate": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}"
                                                    }
                                                  }
                                                }
                                              },
                                              "runAfter": {
                                                "Does_response_contain_data_related_to_email_fetch_from_incident": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "else": {
                                                "actions": {
                                                  "Set_hasNextPage_to_false": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "hasNextPage",
                                                      "value": "@false"
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@body('Parse_User_risk_Information')?['data']?['principalSummaries']?['pageInfo']?['hasNextPage']",
                                                      "@true"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "Does_response_contain_data_related_to_email_fetch_from_incident": {
                                              "actions": {
                                                "For_each": {
                                                  "foreach": "@body('Filter_array')",
                                                  "actions": {
                                                    "Is_risk_of_user_high": {
                                                      "actions": {
                                                        "Update_incident_Severity_to_High": {
                                                          "type": "ApiConnection",
                                                          "inputs": {
                                                            "body": {
                                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                                              "severity": "High"
                                                            },
                                                            "host": {
                                                              "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                              }
                                                            },
                                                            "method": "put",
                                                            "path": "/Incidents"
                                                          }
                                                        }
                                                      },
                                                      "expression": {
                                                        "and": [
                                                          {
                                                            "equals": [
                                                              "@items('For_each')?['node']?['riskLevel']",
                                                              "HIGH_RISK"
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      "type": "If"
                                                    },
                                                    "Is_risk_of_user_low_and_severity_not_Medium_or_High": {
                                                      "actions": {
                                                        "Update_incident_severity_to_low_based_on_user_email": {
                                                          "type": "ApiConnection",
                                                          "inputs": {
                                                            "body": {
                                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                                              "severity": "Low"
                                                            },
                                                            "host": {
                                                              "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                              }
                                                            },
                                                            "method": "put",
                                                            "path": "/Incidents"
                                                          }
                                                        }
                                                      },
                                                      "runAfter": {
                                                        "Is_risk_of_user_medium_and_severity_not_High": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "expression": {
                                                        "and": [
                                                          {
                                                            "equals": [
                                                              "@items('For_each')?['node']?['riskLevel']",
                                                              "LOW_RISK"
                                                            ]
                                                          },
                                                          {
                                                            "equals": [
                                                              "@or(equals(triggerBody()?['object']?['properties']?['severity'],'Medium'),equals(triggerBody()?['object']?['properties']?['severity'],'High'))",
                                                              "@true"
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      "type": "If"
                                                    },
                                                    "Is_risk_of_user_medium_and_severity_not_High": {
                                                      "actions": {
                                                        "Update_incident_severity_to_medium_based_risk_of_email_user": {
                                                          "type": "ApiConnection",
                                                          "inputs": {
                                                            "body": {
                                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                                              "severity": "Medium"
                                                            },
                                                            "host": {
                                                              "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                              }
                                                            },
                                                            "method": "put",
                                                            "path": "/Incidents"
                                                          }
                                                        }
                                                      },
                                                      "runAfter": {
                                                        "Is_risk_of_user_high": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "expression": {
                                                        "and": [
                                                          {
                                                            "equals": [
                                                              "@items('For_each')?['node']?['riskLevel']",
                                                              "MEDIUM_RISK"
                                                            ]
                                                          },
                                                          {
                                                            "not": {
                                                              "equals": [
                                                                "@triggerBody()?['object']?['properties']?['severity']",
                                                                "High"
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": "If"
                                                    },
                                                    "RubrikUserRiskPolicyDetails": {
                                                      "runAfter": {
                                                        "Set_useremailFound_status": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "Workflow",
                                                      "inputs": {
                                                        "body": {
                                                          "accessToken": "@variables('AccessToken')",
                                                          "baseUrl": "@variables('BaseUrl')",
                                                          "incidentARMId": "@body('Update_incident_Severity_to_High')?['id']",
                                                          "userData": "@variables('userData')",
                                                          "userId": "@variables('userId')",
                                                          "userEmail": "@variables('UserEmail')",
                                                          "userName": "[variables('blanks')]"
                                                        },
                                                        "host": {
                                                          "triggerName": "manual",
                                                          "workflow": {
                                                            "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('RiskPolicyHitsPlaybookName'))]"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "Set_userId_based_on_email": {
                                                      "runAfter": {
                                                        "set_userData": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                        "name": "userId",
                                                        "value": "@items('For_each')?['node']?['principalId']"
                                                      }
                                                    },
                                                    "Set_useremailFound_status": {
                                                      "runAfter": {
                                                        "Set_userId_based_on_email": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                        "name": "useremailFound",
                                                        "value": "@true"
                                                      }
                                                    },
                                                    "set_userData": {
                                                      "runAfter": {
                                                        "Is_risk_of_user_low_and_severity_not_Medium_or_High": [
                                                          "Succeeded"
                                                        ]
                                                      },
                                                      "type": "AppendToArrayVariable",
                                                      "inputs": {
                                                        "name": "userData",
                                                        "value": {
                                                          "RiskDetails": {
                                                            "riskLevel": "@items('For_each')?['node']?['riskLevel']"
                                                          },
                                                          "sensitiveData": {
                                                            "highRiskFiles": "@items('For_each')?['node']?['sensitiveFiles']?['highRiskFileCount']?['totalCount']",
                                                            "lowRiskFiles": "@items('For_each')?['node']?['sensitiveFiles']?['lowRiskFileCount']?['totalCount']",
                                                            "mediumRiskFiles": "@items('For_each')?['node']?['sensitiveFiles']?['mediumRiskFileCount']?['totalCount']",
                                                            "sensitiveHits": "@items('For_each')?['node']?['totalSensitiveHits']?['totalHits']",
                                                            "sensitiveObjects": "@items('For_each')?['node']?['sensitiveObjectCount']?['totalCount']"
                                                          },
                                                          "userDetails": {
                                                            "userEmail": "@items('For_each')?['node']?['upn']",
                                                            "userFullName": "@items('For_each')?['node']?['fullName']",
                                                            "userId": "@items('For_each')?['node']?['principalId']"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "type": "Foreach"
                                                }
                                              },
                                              "runAfter": {
                                                "Filter_array": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@empty(body('Filter_array'))",
                                                      "@false"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "Filter_array": {
                                              "runAfter": {
                                                "Parse_User_risk_Information": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Query",
                                              "inputs": {
                                                "from": "@body('Parse_User_risk_Information')?['data']?['principalSummaries']?['edges']",
                                                "where": "@equals(item()?['node']?['upn'], variables('UserEmail'))"
                                              }
                                            },
                                            "Parse_User_risk_Information": {
                                              "type": "ParseJson",
                                              "inputs": {
                                                "content": "@body('Get_user_risk_information')",
                                                "schema": {
                                                  "properties": {
                                                    "data": {
                                                      "properties": {
                                                        "principalSummaries": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "edges": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "cursor": {
                                                                    "type": "string"
                                                                  },
                                                                  "node": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "fullName": {
                                                                        "type": "string"
                                                                      },
                                                                      "principalId": {
                                                                        "type": "string"
                                                                      },
                                                                      "riskLevel": {
                                                                        "type": "string"
                                                                      },
                                                                      "sensitiveFiles": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "highRiskFileCount": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "totalCount": {
                                                                                "type": "integer"
                                                                              },
                                                                              "violatedCount": {
                                                                                "type": "integer"
                                                                              }
                                                                            },
                                                                            "type": [
                                                                              "object",
                                                                              "null"
                                                                            ]
                                                                          },
                                                                          "lowRiskFileCount": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "totalCount": {
                                                                                "type": "integer"
                                                                              },
                                                                              "violatedCount": {
                                                                                "type": "integer"
                                                                              }
                                                                            },
                                                                            "type": [
                                                                              "object",
                                                                              "null"
                                                                            ]
                                                                          },
                                                                          "mediumRiskFileCount": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "totalCount": {
                                                                                "type": "integer"
                                                                              },
                                                                              "violatedCount": {
                                                                                "type": "integer"
                                                                              }
                                                                            },
                                                                            "type": [
                                                                              "object",
                                                                              "null"
                                                                            ]
                                                                          }
                                                                        },
                                                                        "type": [
                                                                          "object",
                                                                          "null"
                                                                        ]
                                                                      },
                                                                      "sensitiveObjectCount": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "totalCount": {
                                                                            "type": "integer"
                                                                          },
                                                                          "violatedCount": {
                                                                            "type": "integer"
                                                                          }
                                                                        },
                                                                        "type": [
                                                                          "object",
                                                                          "null"
                                                                        ]
                                                                      },
                                                                      "totalSensitiveHits": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "totalHits": {
                                                                            "type": "integer"
                                                                          },
                                                                          "violatedHits": {
                                                                            "type": "integer"
                                                                          }
                                                                        },
                                                                        "type": [
                                                                          "object",
                                                                          "null"
                                                                        ]
                                                                      },
                                                                      "upn": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "cursor",
                                                                  "node",
                                                                  "__typename"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            },
                                                            "pageInfo": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "endCursor": {
                                                                  "type": "string"
                                                                },
                                                                "hasNextPage": {
                                                                  "type": "boolean"
                                                                },
                                                                "hasPreviousPage": {
                                                                  "type": "boolean"
                                                                },
                                                                "startCursor": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          },
                                          "else": {
                                            "actions": {
                                              "Add_comment_to_incident_that_no_users_are_available": {
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p>Sensitive Data Access information is not available related to user @{outputs('Username_or_Email')}</p>"
                                                  },
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "path": "/Incidents/Comment"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@empty(body('Get_user_risk_information'))",
                                                  "@false"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "contains": [
                                            "@body('Get_user_risk_information')",
                                            "errors"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Get_user_risk_information": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_error_message_due_to_failure_of_user_list_api": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "errorMessage",
                                        "value": "@{body('Get_user_risk_information')?['message']}"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('Get_user_risk_information')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Get_user_risk_information": {
                                "type": "Http",
                                "inputs": {
                                  "body": {
                                    "query": "query UserAccessPrincipalListQuery($filter: PrincipalSummariesFilterInput, $timelineDate: String!, $sort: ListPrincipalsSummarySortInput, $first: Int, $after: String, $includeWhitelistedResults: Boolean, $isGroupPrincipalType: Boolean!) {\r\n  principalSummaries(\r\n    filter: $filter\r\n    timelineDate: $timelineDate\r\n    sort: $sort\r\n    first: $first\r\n    after: $after\r\n    includeWhitelistedResults: $includeWhitelistedResults\r\n  ) {\r\n    edges {\r\n      cursor\r\n      node {\r\n        principalId\r\n        fullName\r\n        upn @skip(if: $isGroupPrincipalType)\r\n        riskLevel\r\n        sensitiveFiles {\r\n          ...SensitiveFilesTableCellFragment\r\n          __typename\r\n        }\r\n        totalSensitiveHits {\r\n          ...SummaryHitsFragment\r\n          __typename\r\n        }\r\n        sensitiveObjectCount {\r\n          ...SummaryCountFragment\r\n          __typename\r\n        }\r\n        numDescendants @include(if: $isGroupPrincipalType)\r\n        domainName @include(if: $isGroupPrincipalType)\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment SensitiveFilesTableCellFragment on SensitiveFiles {\r\n  highRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  mediumRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  lowRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment SummaryCountFragment on SummaryCount {\r\n  totalCount\r\n  violatedCount\r\n  __typename\r\n}\r\n\r\nfragment SummaryHitsFragment on SummaryHits {\r\n  totalHits\r\n  violatedHits\r\n  __typename\r\n}\r\n",
                                    "variables": "@variables('uservariable')"
                                  },
                                  "headers": {
                                    "Authorization": "Bearer @{variables('AccessToken')}"
                                  },
                                  "method": "POST",
                                  "uri": "@{variables('BaseUrl')}/api/graphql"
                                }
                              }
                            },
                            "runAfter": {
                              "Does_user_email_available_in_incident": [
                                "Succeeded"
                              ]
                            },
                            "expression": "@equals(or(equals(variables('useremailFound'), true), equals(variables('hasNextPage'), false)), true)",
                            "limit": {
                              "count": 60,
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('Username'))",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_each_alert_details": {
                      "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
                      "actions": {
                        "Parse_JSON": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@items('For_each_alert_details')?['properties']?['additionalData']?['Custom Details']",
                            "schema": {
                              "properties": {
                                "Email": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "Username": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Set_Email": {
                          "runAfter": {
                            "Set_Username": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "UserEmail",
                            "value": "@{if(not(empty(body('Parse_JSON')?['Email'])), body('Parse_JSON')?['Email'][0], '')}"
                          }
                        },
                        "Set_Username": {
                          "runAfter": {
                            "Parse_JSON": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Username",
                            "value": "@{if(not(empty(body('Parse_JSON')?['Username'])), body('Parse_JSON')?['Username'][0], '')}"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Email": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Get_Access_Token": {
                      "runAfter": {
                        "Get_Rubrik_ClientSecret": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "client_id": "@{body('Get_Rubrik_ClientId')?['value']}",
                          "client_secret": "@{body('Get_Rubrik_ClientSecret')?['value']}"
                        },
                        "method": "POST",
                        "uri": "@{variables('BaseUrl')}/api/client_token"
                      }
                    },
                    "Get_Rubrik_ClientId": {
                      "runAfter": {
                        "Initialize_user_policy_hits_data_logType": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_Rubrik_ClientSecret": {
                      "runAfter": {
                        "Get_Rubrik_ClientId": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Initialize_AccessToken": {
                      "runAfter": {
                        "Does_status_code_of_get_access_token_equal_to_200": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "AccessToken",
                            "type": "string",
                            "value": "@{body('Get_Access_Token')?['access_token']}"
                          }
                        ]
                      }
                    },
                    "Initialize_BaseUrl": {
                      "runAfter": {
                        "For_each_alert_details": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "BaseUrl",
                            "type": "string",
                            "value": "[[parameters('BaseUrl')]"
                          }
                        ]
                      }
                    },
                    "Initialize_Email": {
                      "runAfter": {
                        "Initialize_Username": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "UserEmail",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Username": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Username",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_errormessage": {
                      "runAfter": {
                        "Initialize_users_data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "errorMessage",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_hasNextPage": {
                      "runAfter": {
                        "Initialize_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "hasNextPage",
                            "type": "boolean",
                            "value": "@true"
                          }
                        ]
                      }
                    },
                    "Initialize_incidentCommentCount": {
                      "runAfter": {
                        "Initialize_hasNextPage": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incidentCommentCount",
                            "type": "integer",
                            "value": 0
                          }
                        ]
                      }
                    },
                    "Initialize_status": {
                      "runAfter": {
                        "Initialize_userGroups": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "useremailFound",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_userGroups": {
                      "runAfter": {
                        "Initialize_userId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userGroups",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_userId": {
                      "runAfter": {
                        "Initialize_BaseUrl": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_userPolicy": {
                      "runAfter": {
                        "Initialize_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userPolicyData",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_user_policy_hits_data_logType": {
                      "runAfter": {
                        "Initialize_userdetails_logType": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userPolicyHitsDataLogType",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_userdetails_logType": {
                      "runAfter": {
                        "Initialize_incidentCommentCount": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userDetailsLogType",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_users_data": {
                      "runAfter": {
                        "Initialize_userPolicy": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userData",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable": {
                      "runAfter": {
                        "Initialize_errormessage": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "uservariable",
                            "type": "object",
                            "value": {
                              "filter": {
                                "groupId": "[variables('blanks')]",
                                "policyIds": "[variables('TemplateEmptyArray')]",
                                "principalSummaryCategory": "USERS_WITH_SENSITIVE_ACCESS",
                                "principalType": "USER"
                              },
                              "first": 1000,
                              "includeWhitelistedResults": true,
                              "isGroupPrincipalType": false,
                              "sort": {
                                "sortBy": "RISK_LEVEL",
                                "sortOrder": "DESC"
                              },
                              "timelineDate": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}"
                            }
                          }
                        ]
                      }
                    },
                    "Username_or_Email": {
                      "inputs": "@if(empty(variables('Username')),variables('UserEmail'),variables('Username'))",
                      "runAfter": {
                        "Initialize_AccessToken": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "Feature": "UserContext&Access",
                "Rubrik": "Rubrik",
                "hidden-SentinelTemplateName": "RubrikUserIntelligenceAnalysis",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[parameters('TenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[[parameters('KeyvaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId11'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId11')]",
                "contentId": "[variables('_playbookContentId11')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion11')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik User Intelligence Analysis",
            "description": "This playbook queries Rubrik Security Cloud to get user sensitive data and update severity of incident accordingly. This playbook calls the RubrikRetrieveUserIntelligenceInformation playbook internally to get user risk details and policy hits details to enrich the incident.",
            "prerequisites": [
              "1. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "2. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with a unique name",
              "b. Go to KeyVault -> secrets, click on Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Make sure that RubrikRetrieveUserIntelligenceInformation playbook is deployed before deploying RubrikUserIntelligenceAnalysis playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select keyvault connection resource",
              "2. Go to General -> edit API connection",
              "5. Click Authorize",
              "6. Sign in",
              "7. Click Save",
              "8. Repeat steps for other connections",
              "**b. Assign Role to add comment in incident**",
              "After authorizing each connection, assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles",
              "4. Role: Microsoft Sentinel Contributor",
              "5. Members: select managed identity for assigned access to and add your logic app as member as shown in screenshot below",
              "6. Click on review+assign",
              "**c. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add accee policy for the user account using which connection is authorized.",
              "**d. Configurations in Microsoft Sentinel**",
              "1. In Microsoft Sentinel, Configure the analytic rules to trigger an incident.",
              "a. Analytic Rule must contain at least one of the below fields mapped in Custom Details to successfully run this playbook.",
              "Username",
              "Email",
              "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
              "a. Go to Microsoft Sentinel -> <your workspace> -> Automation",
              "b. Click on Create -> Automation rule",
              "c. Provide name for your rule",
              "d. In Analytic rule name condition, select analytic rule which you have created.",
              "e. In Actions dropdown select Run playbook",
              "f. In second dropdown select your deployed playbook",
              "g. Click on Apply",
              "h. Save the Automation rule.",
              "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel -> <your workspace> -> Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "account"
            ],
            "tags": [
              "User",
              "Context",
              "Rubrik",
              "Access"
            ],
            "lastUpdateTime": "2024-07-23T10:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId11')]",
        "contentKind": "Playbook",
        "displayName": "RubrikUserIntelligenceAnalysis",
        "contentProductId": "[variables('_playbookcontentProductId11')]",
        "id": "[variables('_playbookcontentProductId11')]",
        "version": "[variables('playbookVersion11')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName12')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikRetrieveUserIntelligenceInformation Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion12')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikRetrieveUserIntelligenceInformation",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty. Else you will receive validation failure"
              }
            },
            "LogAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Id of log analytics workspace where you want to ingest data in Microsoft Sentinel"
              }
            },
            "LogAnalyticsWorkspaceKey": {
              "type": "string",
              "metadata": {
                "description": "PrimaryKey of log analytics workspace where you want to ingest data in Microsoft Sentinel"
              }
            },
            "UserDetailsTableName": {
              "type": "string",
              "metadata": {
                "description": "Table name in which you want to store user details data in Log Analytics Workspace(e.g. Rubrik_User_Access_Details)"
              }
            },
            "UserPolicyHitsTableName": {
              "type": "string",
              "metadata": {
                "description": "Table name in which you want to store policy hits data in Log Analytics Workspace(e.g. Rubrik_User_Policy_Hits_Details)"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "accessToken": {
                              "type": "string"
                            },
                            "baseUrl": {
                              "type": "string"
                            },
                            "incidentARMId": {
                              "type": "string"
                            },
                            "userData": {
                              "type": "array"
                            },
                            "userId": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Does_UserId_available": {
                      "actions": {
                        "Does_User_Details_request_get_status_code_equal_to_200": {
                          "actions": {
                            "Does_get_user_details_response_contain_errors": {
                              "actions": {
                                "Add_comment_to_incident_with_userDetails": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['incidentARMId']",
                                      "message": "<p><strong>USER DETAILS:</strong><br>\n<strong>User Fullname</strong>: @{variables('userData')[0]?['userDetails']?['userFullName']}<br>\n<strong>User Email:</strong> @{variables('userData')[0]?['userDetails']?['userEmail']}<br>\n<strong>User Id:</strong> @{variables('userData')[0]?['userDetails']?['userId']}<br>\n<br>\n<strong>SENSITIVE DATA ACCESS:</strong><br>\n<strong>HighRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}<br>\n<strong>MediumRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}<br>\n<strong>LowRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}<br>\n<strong>SensitiveObject:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}<br>\n<strong>SensitiveHits:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}<br>\n<br>\n<strong>RISK DETAILS:</strong><br>\n<strong>RiskLevel:</strong> @{variables('userData')[0]?['RiskDetails']?['riskLevel']}<br>\n<br>\n<strong>Click here to view user on rubrik:</strong> @{variables('userHyperLink')}</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Failure_Response_": {
                                  "runAfter": {
                                    "Add_comment_to_incident_with_userDetails": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": "Unable to get user details due to error: @{body('Get_User_Details')?['errors'][0]?['message']}",
                                    "statusCode": 200
                                  }
                                },
                                "Terminate__due_to_error_in_response_of_get_user_riskdetails": {
                                  "runAfter": {
                                    "Failure_Response_": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "message": "Unable to get user details due to error: @{body('Get_User_Details')?['errors'][0]?['message']}"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Compose_userdetails": {
                                    "runAfter": {
                                      "Prepapre_risk_reasons_data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@body('Parse_JSON_2')?['data']?['principalDetails']?['principalSummary']"
                                  },
                                  "For_each_usergroup": {
                                    "foreach": "@body('Parse_JSON_2')?['data']?['principalDetails']?['directGroups']",
                                    "actions": {
                                      "Append_to_array_variable": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "userGroups",
                                          "value": "@items('For_each_usergroup')?['name']"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_JSON_2": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  },
                                  "Parse_JSON_2": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('Get_User_Details')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "principalDetails": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "directGroups": {
                                                    "items": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "sid": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": [
                                                        "object",
                                                        "null"
                                                      ]
                                                    },
                                                    "type": "array"
                                                  },
                                                  "principalSummary": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "domainName": {
                                                        "type": "string"
                                                      },
                                                      "fullName": {
                                                        "type": "string"
                                                      },
                                                      "numDescendants": {
                                                        "type": "integer"
                                                      },
                                                      "principalId": {
                                                        "type": "string"
                                                      },
                                                      "riskLevel": {
                                                        "type": "string"
                                                      },
                                                      "riskReasons": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "accessRiskReasons": {
                                                            "items": {
                                                              "type": "string"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "insecureReasons": {
                                                            "items": {
                                                              "type": "string"
                                                            },
                                                            "type": "array"
                                                          }
                                                        },
                                                        "type": [
                                                          "object",
                                                          "null"
                                                        ]
                                                      },
                                                      "sensitiveFiles": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "highRiskFileCount": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "totalCount": {
                                                                "type": "integer"
                                                              },
                                                              "violatedCount": {
                                                                "type": "integer"
                                                              }
                                                            },
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          },
                                                          "lowRiskFileCount": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "totalCount": {
                                                                "type": "integer"
                                                              },
                                                              "violatedCount": {
                                                                "type": "integer"
                                                              }
                                                            },
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          },
                                                          "mediumRiskFileCount": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "totalCount": {
                                                                "type": "integer"
                                                              },
                                                              "violatedCount": {
                                                                "type": "integer"
                                                              }
                                                            },
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          }
                                                        },
                                                        "type": [
                                                          "object",
                                                          "null"
                                                        ]
                                                      },
                                                      "sensitiveObjectCount": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "totalCount": {
                                                            "type": "integer"
                                                          },
                                                          "violatedCount": {
                                                            "type": "integer"
                                                          }
                                                        },
                                                        "type": [
                                                          "object",
                                                          "null"
                                                        ]
                                                      },
                                                      "totalSensitiveHits": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "totalHits": {
                                                            "type": "integer"
                                                          },
                                                          "violatedHits": {
                                                            "type": "integer"
                                                          }
                                                        },
                                                        "type": [
                                                          "object",
                                                          "null"
                                                        ]
                                                      },
                                                      "upn": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Prepapre_risk_reasons_data": {
                                    "runAfter": {
                                      "For_each_usergroup": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Compose",
                                    "inputs": {
                                      "accessRiskReasons": "@body('Parse_JSON_2')?['data']?['principalDetails']?['principalSummary']?['riskReasons']?['accessRiskReasons']",
                                      "groups": "@variables('userGroups')",
                                      "insecureReasons": "@body('Parse_JSON_2')?['data']?['principalDetails']?['principalSummary']?['riskReasons']?['insecureReasons']"
                                    }
                                  },
                                  "Send_User_Details_to_Workspace": {
                                    "runAfter": {
                                      "Compose_userdetails": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "body": "@{outputs('Compose_userdetails')}",
                                      "headers": {
                                        "Log-Type": "@variables('userDetailsLogType')"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                        }
                                      },
                                      "method": "post",
                                      "path": "/api/logs"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('Get_User_Details')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Get_User_Details": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_comment_to_incident_with_user_access_details_only": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['incidentARMId']",
                                    "message": "<p><strong>USER DETAILS:<br>\nUser Fullname: </strong><strong>@{variables('userData')[0]?['userDetails']?['userFullName']}</strong><strong><br>\nUser Email: </strong><strong>@{variables('userData')[0]?['userDetails']?['userEmail']}</strong><strong><br>\nUser Id: </strong><strong>@{variables('userData')[0]?['userDetails']?['userId']}</strong><strong><br>\n<br>\nSENSITIVE DATA ACCESS:<br>\nHighRiskFiles: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}</strong><strong><br>\nMediumRiskFiles: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}</strong><strong><br>\nLowRiskFiles: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}</strong><strong><br>\nSensitiveObject: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}</strong><strong><br>\nSensitiveHits: </strong><strong>@{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}</strong><strong><br>\n<br>\nRISK DETAILS:<br>\nRiskLevel: </strong><strong>@{variables('userData')[0]?['RiskDetails']?['riskLevel']}</strong><strong><br>\n<br>\nClick here to view user on rubrik: </strong>@{variables('userHyperLink')}</p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              },
                              "Failure_response_with_userData_added": {
                                "runAfter": {
                                  "Add_comment_to_incident_with_user_access_details_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": "User Access Details are added as incident comment. Error Occurred while retrieving user risk details: @{body('Get_User_Details')?['message']}",
                                  "statusCode": 400
                                }
                              },
                              "Terminate": {
                                "runAfter": {
                                  "Failure_response_with_userData_added": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('Get_User_Details')['statusCode']}",
                                    "message": "Unable to get user risk details due to error: @{body('Get_User_Details')?['message']}"
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Get_User_Details')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Does_policy_hits_for_user_request_get_status_code_equal_to_200": {
                          "actions": {
                            "Does_response_of_policy_hits_of_user_contain_errors": {
                              "actions": {
                                "Add_comment_to_incident_with_user_and_risk_details": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['incidentARMId']",
                                      "message": "<p><span style=\"font-size: 14px\"><strong>USER DETAILS:</strong></span><br>\n<strong>User Fullname:</strong> @{variables('userData')[0]?['userDetails']?['userFullName']}<br>\n<strong>User Email:</strong> @{variables('userData')[0]?['userDetails']?['userEmail']}<br>\n<strong>User Id:</strong> @{variables('userData')[0]?['userDetails']?['userId']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>SENSITIVE DATA ACCESS:</strong></span><br>\n<strong>HighRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}<br>\n<strong>MediumRiskFiles: </strong>@{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}<br>\n<strong>LowRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}<br>\n<strong>SensitiveObject:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}<br>\n<strong>SensitiveHits:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>RISK DETAILS:</strong></span><br>\n<strong>RiskLevel:</strong> @{variables('userData')[0]?['RiskDetails']?['riskLevel']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>RISK REASONS:</strong></span><br>\n<strong>AccessRiskReasons:</strong> @{variables('userData')[0]?['riskReasons']?['accessRiskReasons']}<br>\n<strong>InsecureReasons:</strong> @{variables('userData')[0]?['riskReasons']?['insecureReasons']}<br>\n<strong>Groups:</strong> @{variables('userData')[0]?['riskReasons']?['groups']}<br>\n<br>\n<strong>Click here to view user on rubrik:</strong> @{variables('userHyperLink')}</p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Failure_Response_2": {
                                  "runAfter": {
                                    "Add_comment_to_incident_with_user_and_risk_details": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": "Unable to get policy hits detail for user. Error: @{body('Get_Policy_hits_details_for_user')?['errors'][0]?['message']}",
                                    "statusCode": 200
                                  }
                                },
                                "Terminate_due_to_error_in_response_of_users_policy_hits": {
                                  "runAfter": {
                                    "Failure_Response_2": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Terminate",
                                  "inputs": {
                                    "runError": {
                                      "message": "Unable to get policy hits detail for user. Error: @{body('Get_Policy_hits_details_for_user')?['errors'][0]?['message']}"
                                    },
                                    "runStatus": "Failed"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Add_comment_to_incident_with_user_data": {
                                    "runAfter": {
                                      "Does_policy_hits_reponse_contain_data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "body": {
                                        "incidentArmId": "@triggerBody()?['incidentARMId']",
                                        "message": "<p><span style=\"font-size: 14px\"><strong>USER DETAILS:</strong></span><br>\n<strong>User Fullname:</strong> @{variables('userData')[0]?['userDetails']?['userFullName']}<br>\n<strong>User Email:</strong> @{variables('userData')[0]?['userDetails']?['userEmail']}<br>\n<strong>User Id:</strong> @{variables('userData')[0]?['userDetails']?['userId']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>SENSITIVE DATA ACCESS:</strong></span><br>\n<strong>HighRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}<br>\n<strong>MediumRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}<br>\n<strong>LowRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}<br>\n<strong>SensitiveObject:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}<br>\n<strong>SensitiveHits:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>RISK DETAILS:</strong></span><br>\n<strong>RiskLevel:</strong> @{variables('userData')[0]?['RiskDetails']?['riskLevel']}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>RISK REASONS:</strong></span><br>\n<strong>AccessRiskReasons: </strong>@{outputs('Prepapre_risk_reasons_data')?['accessRiskReasons']}<br>\n<strong>InsecureReasons: </strong>@{outputs('Prepapre_risk_reasons_data')?['insecureReasons']}<br>\n<strong>Groups:</strong> @{outputs('Prepapre_risk_reasons_data')?['groups']}<br>\n<br>\n<strong>Click here to view user on rubrik:</strong> @{variables('userHyperLink')}</p>"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                        }
                                      },
                                      "method": "post",
                                      "path": "/Incidents/Comment"
                                    }
                                  },
                                  "Does_policy_hits_reponse_contain_data": {
                                    "actions": {
                                      "Add_comment_to_incident_with_user_policy_data": {
                                        "runAfter": {
                                          "Create_HTML_table": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['incidentARMId']",
                                            "message": "<p><strong>User Policy Hits Data(id = </strong><strong>@{variables('userId')}</strong><strong>)</strong><br>\n@{body('Create_HTML_table')}</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      },
                                      "Create_HTML_table": {
                                        "runAfter": {
                                          "Send_Policy_hits_details_to_Workspace": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Table",
                                        "inputs": {
                                          "columns": [
                                            {
                                              "header": "policyName",
                                              "value": "@item()?['policyName']"
                                            },
                                            {
                                              "header": "fileCount",
                                              "value": "@item()?['fileCount']"
                                            },
                                            {
                                              "header": "highRiskHits",
                                              "value": "@item()?['hitsCount']?['HighRiskHits']"
                                            },
                                            {
                                              "header": "mediumRiskHits",
                                              "value": "@item()?['hitsCount']?['MediumRiskHits']"
                                            },
                                            {
                                              "header": "lowRiskHits",
                                              "value": "@item()?['hitsCount']?['LowRiskHits']"
                                            },
                                            {
                                              "header": "totalHits",
                                              "value": "@item()?['hitsCount']?['TotalHits']"
                                            }
                                          ],
                                          "format": "HTML",
                                          "from": "@variables('userPolicyData')"
                                        }
                                      },
                                      "For_each_userId": {
                                        "foreach": "@body('Parse_JSON_3')?['data']?['sidsPolicyHitsSummary']?['sidSummaries']",
                                        "actions": {
                                          "For_each_policy": {
                                            "foreach": "@items('For_each_userId')?['summary']",
                                            "actions": {
                                              "Append_to_userPolicyData": {
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                  "name": "userPolicyData",
                                                  "value": {
                                                    "fileCount": "@items('For_each_policy')?['sidSensitiveFiles']?['totalFileCount']?['totalCount']",
                                                    "hitsCount": {
                                                      "HighRiskHits": "@items('For_each_policy')?['sidAnalyzerHits']?['highRiskHits']?['totalHits']",
                                                      "LowRiskHits": "@items('For_each_policy')?['sidAnalyzerHits']?['lowRiskHits']?['totalHits']",
                                                      "MediumRiskHits": "@items('For_each_policy')?['sidAnalyzerHits']?['mediumRiskHits']?['totalHits']",
                                                      "TotalHits": "@items('For_each_policy')?['sidAnalyzerHits']?['totalHits']?['totalHits']"
                                                    },
                                                    "policyName": "@items('For_each_policy')?['policyName']",
                                                    "userId": "@variables('userId')"
                                                  }
                                                }
                                              }
                                            },
                                            "type": "Foreach"
                                          }
                                        },
                                        "type": "Foreach",
                                        "runtimeConfiguration": {
                                          "concurrency": {
                                            "repetitions": 1
                                          }
                                        }
                                      },
                                      "Send_Policy_hits_details_to_Workspace": {
                                        "runAfter": {
                                          "For_each_userId": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": "@{variables('userPolicyData')}",
                                          "headers": {
                                            "Log-Type": "@variables('userPolicyHitsDataLogType')"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/api/logs"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_JSON_3": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Add_comment_to_incident_for_no_policy_hits_data": {
                                          "type": "ApiConnection",
                                          "inputs": {
                                            "body": {
                                              "incidentArmId": "@triggerBody()?['incidentARMId']",
                                              "message": "<p>No policy hits details available for user @{variables('userId')}</p>"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                              }
                                            },
                                            "method": "post",
                                            "path": "/Incidents/Comment"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@empty(body('Parse_JSON_3')?['data']?['sidsPolicyHitsSummary']?['sidSummaries'])",
                                            "@false"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_JSON_3": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('Get_Policy_hits_details_for_user')",
                                      "schema": {
                                        "properties": {
                                          "data": {
                                            "properties": {
                                              "sidsPolicyHitsSummary": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "sidSummaries": {
                                                    "items": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "principal": {
                                                          "type": "string"
                                                        },
                                                        "summary": {
                                                          "items": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "policyId": {
                                                                "type": "string"
                                                              },
                                                              "policyName": {
                                                                "type": "string"
                                                              },
                                                              "sidAnalyzerHits": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "totalHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "sidDeltaAnalyzerHits": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "totalHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "sidDeltaRiskHits": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "totalHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "sidRiskHits": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "highRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "lowRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "mediumRiskHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  },
                                                                  "totalHits": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalHits": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedHits": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              },
                                                              "sidSensitiveFiles": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "totalFileCount": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "totalCount": {
                                                                        "type": "integer"
                                                                      },
                                                                      "violatedCount": {
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "type": [
                                                                      "object",
                                                                      "null"
                                                                    ]
                                                                  }
                                                                },
                                                                "type": [
                                                                  "object",
                                                                  "null"
                                                                ]
                                                              }
                                                            },
                                                            "type": [
                                                              "object",
                                                              "null"
                                                            ]
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "required": [
                                                        "principal",
                                                        "summary",
                                                        "__typename"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "contains": [
                                      "@body('Get_Policy_hits_details_for_user')",
                                      "errors"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Get_Policy_hits_details_for_user": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_comment_to_incident_with_user_and_risk_details_only": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['incidentARMId']",
                                    "message": "<p><strong>USER DETAILS:</strong><br>\n<strong>User Fullname: </strong>@{variables('userData')[0]?['userDetails']?['userFullName']}<br>\n<strong>User Email:</strong> @{variables('userData')[0]?['userDetails']?['userEmail']}<br>\n<strong>User Id:</strong> @{variables('userData')[0]?['userDetails']?['userId']}<br>\n<br>\n<strong>SENSITIVE DATA ACCESS:</strong><br>\n<strong>HighRiskFiles: </strong>@{variables('userData')[0]?['sensitiveData']?['highRiskFiles']}<br>\n<strong>MediumRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['mediumRiskFiles']}<br>\n<strong>LowRiskFiles:</strong> @{variables('userData')[0]?['sensitiveData']?['lowRiskFiles']}<br>\n<strong>SensitiveObject:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveObjects']}<br>\n<strong>SensitiveHits:</strong> @{variables('userData')[0]?['sensitiveData']?['sensitiveHits']}<br>\n<br>\n<strong>RISK DETAILS:</strong><br>\n<strong>RiskLevel:</strong> @{variables('userData')[0]?['RiskDetails']?['riskLevel']}<br>\n<br>\n<strong>RISK REASONS:<br>\nAccessRiskReasons: </strong><strong>@{variables('userData')[0]?['riskReasons']?['accessRiskReasons']}</strong><strong><br>\nInsecureReasons: </strong><strong>@{variables('userData')[0]?['riskReasons']?['insecureReasons']}</strong><strong><br>\nGroups: </strong><strong>@{variables('userData')[0]?['riskReasons']?['groups']}</strong><strong><br>\n<br>\nClick here to view user on rubrik: </strong>@{variables('userHyperLink')}</p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              },
                              "Failure_Response_with_user_access_and_risk_data_success": {
                                "runAfter": {
                                  "Add_comment_to_incident_with_user_and_risk_details_only": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": "Comments are added to the incident with User Access and Risk Details. Error Occurred while retrieving policy hits data for user: @{body('Get_Policy_hits_details_for_user')?['message']}",
                                  "statusCode": 400
                                }
                              },
                              "Terminate_due_to_api_failure_of_get_policy_hits_of_user": {
                                "runAfter": {
                                  "Failure_Response_with_user_access_and_risk_data_success": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('Get_Policy_hits_details_for_user')['statusCode']}",
                                    "message": "Unable to get policy hits detail for user. Error: @{body('Get_Policy_hits_details_for_user')?['message']}"
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Get_Policy_hits_details_for_user')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Failure_Response": {
                          "runAfter": {
                            "Does_policy_hits_for_user_request_get_status_code_equal_to_200": [
                              "Skipped",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "@if(or(equals(body('Add_comment_to_incident_with_user_policy_data'), 400), equals(body('Add_comment_to_incident_with_user_data'),400)), 'Incident reached maximum number of comments (100)', 'Error occurred: Please check detailed execution in subplaybook RubrikRetrieveUserIntelligenceInformation')",
                            "statusCode": 400
                          }
                        },
                        "Get_Policy_hits_details_for_user": {
                          "runAfter": {
                            "Does_User_Details_request_get_status_code_equal_to_200": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query PrincipalPolicyHitsSummaryChartQuery($sids: [String!]!, $day: String!, $historicalDeltaDays: Int!, $includeWhitelistedResults: Boolean) {\r\n  sidsPolicyHitsSummary(\r\n    sids: $sids\r\n    day: $day\r\n    historicalDeltaDays: $historicalDeltaDays\r\n    includeWhitelistedResults: $includeWhitelistedResults\r\n  ) {\r\n    sidSummaries {\r\n      principal\r\n      summary {\r\n        policyId\r\n        policyName\r\n        sidSensitiveFiles {\r\n          totalFileCount {\r\n            totalCount\r\n            violatedCount\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        sidAnalyzerHits {\r\n          ...PrincipalSensitiveHitsFragment\r\n          __typename\r\n        }\r\n        sidDeltaAnalyzerHits {\r\n          ...PrincipalSensitiveHitsFragment\r\n          __typename\r\n        }\r\n        sidRiskHits {\r\n          ...PrincipalSensitiveHitsFragment\r\n          __typename\r\n        }\r\n        sidDeltaRiskHits {\r\n          ...PrincipalSensitiveHitsFragment\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment PrincipalSensitiveHitsFragment on SensitiveHits {\r\n  highRiskHits {\r\n    ...SummaryHitsFragment\r\n    __typename\r\n  }\r\n  mediumRiskHits {\r\n    ...SummaryHitsFragment\r\n    __typename\r\n  }\r\n  lowRiskHits {\r\n    ...SummaryHitsFragment\r\n    __typename\r\n  }\r\n  totalHits {\r\n    ...SummaryHitsFragment\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment SummaryHitsFragment on SummaryHits {\r\n  totalHits\r\n  violatedHits\r\n  __typename\r\n}",
                              "variables": {
                                "day": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}",
                                "historicalDeltaDays": 7,
                                "includeWhitelistedResults": false,
                                "sids": [
                                  "@{variables('userId')}"
                                ]
                              }
                            },
                            "headers": {
                              "Authorization": "@variables('AccessToken')"
                            },
                            "method": "POST",
                            "uri": "@{variables('BaseUrl')}/api/graphql"
                          }
                        },
                        "Get_User_Details": {
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "query": "query UserAccessUserDetailsQuery($sid: String!, $timelineDate: String!, $includeWhitelistedResults: Boolean) {\r\n    principalDetails(\r\n        sid: $sid\r\n        timelineDate: $timelineDate\r\n        includeWhitelistedResults: $includeWhitelistedResults\r\n    ) {\r\n        ...UserAccessUserSummaryFragment\r\n        __typename\r\n    }\r\n}\r\n\r\n\r\nfragment UserAccessUserSummaryFragment on PrincipalDetails {\r\n    principalSummary {\r\n        principalId\r\n        fullName\r\n        upn\r\n        riskLevel\r\n        riskReasons {\r\n            accessRiskReasons\r\n            insecureReasons\r\n            __typename\r\n        }\r\n        sensitiveFiles {\r\n            ...SensitiveFilesTableCellFragment\r\n            __typename\r\n        }\r\n        totalSensitiveHits {\r\n            ...SummaryHitsFragment\r\n            __typename\r\n        }\r\n        sensitiveObjectCount {\r\n            ...SummaryCountFragment\r\n            __typename\r\n        }\r\n        numDescendants\r\n        domainName\r\n        __typename\r\n    }\r\n    directGroups {\r\n        name\r\n        sid\r\n        __typename\r\n    }\r\n    __typename\r\n}\r\n\r\n\r\nfragment SensitiveFilesTableCellFragment on SensitiveFiles {\r\n  highRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  mediumRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  lowRiskFileCount {\r\n    ...SummaryCountFragment\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\n\r\nfragment SummaryCountFragment on SummaryCount {\r\n  totalCount\r\n  violatedCount\r\n  __typename\r\n}\r\n\r\n\r\nfragment SummaryHitsFragment on SummaryHits {\r\n  totalHits\r\n  violatedHits\r\n  __typename\r\n}\r\n",
                              "variables": {
                                "sid": "@{variables('userId')}",
                                "timelineDate": "@{concat(formatDateTime(utcNow(),'yyyy-MM-dd'),'T00:00:00+00:00')}"
                              }
                            },
                            "headers": {
                              "Authorization": "Bearer @{variables('AccessToken')}"
                            },
                            "method": "POST",
                            "uri": "@{variables('BaseUrl')}/api/graphql"
                          }
                        },
                        "Success_Response": {
                          "runAfter": {
                            "Does_policy_hits_for_user_request_get_status_code_equal_to_200": [
                              "Succeeded"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "Comments are added to incident related to Risk Details and Policy Hits Data for user @{variables('userId')}",
                            "statusCode": 200
                          }
                        }
                      },
                      "runAfter": {
                        "Username_or_Email": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Add_comment_to_incident_(V3)": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": {
                                "incidentArmId": "@triggerBody()?['incidentARMId']",
                                "message": "<p>No user with name @{outputs('Username_or_Email')} is available.</p>"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/Incidents/Comment"
                            }
                          },
                          "Terminate_as_user_does_not_exist": {
                            "runAfter": {
                              "Add_comment_to_incident_(V3)": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runStatus": "Succeeded"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@empty(variables('userId'))",
                                "@true"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_AccessToken": {
                      "runAfter": {
                        "Initialize_userId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "AccessToken",
                            "type": "string",
                            "value": "@triggerBody()?['accessToken']"
                          }
                        ]
                      }
                    },
                    "Initialize_BaseUrl": {
                      "runAfter": {
                        "Initialize_AccessToken": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "BaseUrl",
                            "type": "string",
                            "value": "@triggerBody()?['baseUrl']"
                          }
                        ]
                      }
                    },
                    "Initialize_Email": {
                      "runAfter": {
                        "Initialize_userGroups": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "UserEmail",
                            "type": "string",
                            "value": "@triggerBody()?['userEmail']"
                          }
                        ]
                      }
                    },
                    "Initialize_Username": {
                      "runAfter": {
                        "Initialize_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Username",
                            "type": "string",
                            "value": "@triggerBody()?['userName']"
                          }
                        ]
                      }
                    },
                    "Initialize_errormessage": {
                      "runAfter": {
                        "Initialize_users_data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "errorMessage",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_status": {
                      "runAfter": {
                        "Initialize_errormessage": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "useremailFound",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_userGroups": {
                      "runAfter": {
                        "Initialize_Username": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userGroups",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_userHyperLink": {
                      "runAfter": {
                        "Initialize_user_policy_hits_data_logType": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userHyperLink",
                            "type": "string",
                            "value": "@{concat(variables('BaseUrl'),'/sonar/user_intelligence?redirected_user_id=',variables('userId'))}"
                          }
                        ]
                      }
                    },
                    "Initialize_userId": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userId",
                            "type": "string",
                            "value": "@triggerBody()?['userId']"
                          }
                        ]
                      }
                    },
                    "Initialize_userPolicy": {
                      "runAfter": {
                        "Initialize_BaseUrl": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userPolicyData",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_user_policy_hits_data_logType": {
                      "runAfter": {
                        "Initialize_userdetails_logType": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userPolicyHitsDataLogType",
                            "type": "string",
                            "value": "[[parameters('UserPolicyHitsTableName')]"
                          }
                        ]
                      }
                    },
                    "Initialize_userdetails_logType": {
                      "runAfter": {
                        "Initialize_Email": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userDetailsLogType",
                            "type": "string",
                            "value": "[[parameters('UserDetailsTableName')]"
                          }
                        ]
                      }
                    },
                    "Initialize_users_data": {
                      "runAfter": {
                        "Initialize_userPolicy": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "userData",
                            "type": "array",
                            "value": "@triggerBody()?['userData']"
                          }
                        ]
                      }
                    },
                    "Username_or_Email": {
                      "inputs": "@if(empty(variables('Username')),variables('UserEmail'),variables('Username'))",
                      "runAfter": {
                        "Initialize_userHyperLink": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      },
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikRetrieveUserIntelligenceInformation",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                },
                "parameterValues": {
                  "username": "[[parameters('LogAnalyticsWorkspaceId')]",
                  "password": "[[parameters('LogAnalyticsWorkspaceKey')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId12'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId12')]",
                "contentId": "[variables('_playbookContentId12')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion12')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Retrieve User Intelligence Information",
            "description": "This playbook queries Rubrik Security Cloud to get risk detail and policy hits details for a username or email address, and enriches the incident by adding incident comment",
            "prerequisites": [
              "1. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide)."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select azureloganalyticscollector connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Assign Role to add comment in incident**",
              "After authorizing each connection, assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles",
              "4. Role: Microsoft Sentinel Contributor",
              "5. Members: select managed identity for assigned access to and add your logic app as member",
              "6. Click on review+assign"
            ],
            "entities": [
              "account"
            ],
            "tags": [
              "User",
              "Risk",
              "Rubrik",
              "Policy"
            ],
            "lastUpdateTime": "2024-07-23T10:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId12')]",
        "contentKind": "Playbook",
        "displayName": "RubrikRetrieveUserIntelligenceInformation",
        "contentProductId": "[variables('_playbookcontentProductId12')]",
        "id": "[variables('_playbookcontentProductId12')]",
        "version": "[variables('playbookVersion12')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName13')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikAnomalyGenerateDownloadableLink Playbook with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion13')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "RubrikAnomalyGenerateDownloadableLink",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "PollAsyncResultPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook RubrikPollAsynResult(e.g.RubrikPollAsyncResult)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "TeamsConnectionName": "[[concat('Teams-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "AccessToken": {
                              "type": "string"
                            },
                            "ActivitySeriesId": {
                              "type": "string"
                            },
                            "BaseUrl": {
                              "type": "string"
                            },
                            "ClusterId": {
                              "type": "string"
                            },
                            "FilePaths": {
                              "items": {
                                "properties": {
                                  "title": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "title",
                                  "value"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "IncidentARMId": {
                              "type": "string"
                            },
                            "IncidentStartTime": {
                              "type": "string"
                            },
                            "LastUpdatedTime": {
                              "type": "string"
                            },
                            "ObjectId": {
                              "type": "string"
                            },
                            "ObjectName": {
                              "type": "string"
                            },
                            "ObjectType": {
                              "type": "string"
                            },
                            "SuspiciousFiles": {
                              "items": {
                                "properties": {
                                  "filePath": {
                                    "type": "string"
                                  },
                                  "lastModified": {
                                    "type": "string"
                                  },
                                  "suspiciousActivity": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "filePath",
                                  "lastModified",
                                  "suspiciousActivity"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Compose": {
                      "runAfter": {
                        "Initialize_requestId": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": "@triggerBody()?['FilePaths']"
                    },
                    "Create_HTML_table": {
                      "runAfter": {
                        "Initialize_grpahql_query_and_variables_based_on_objectType": [
                          "Succeeded"
                        ]
                      },
                      "type": "Table",
                      "inputs": {
                        "columns": [
                          {
                            "header": "Path",
                            "value": "@item()?['filePath']"
                          },
                          {
                            "header": "SuspiciousActivity",
                            "value": "@item()?['suspiciousActivity']"
                          },
                          {
                            "header": "LastModified",
                            "value": "@item()?['lastModified']"
                          }
                        ],
                        "format": "HTML",
                        "from": "@triggerBody()?['SuspiciousFiles']"
                      }
                    },
                    "Does_status_code_of_get_downloadable_link_API_equal_to_200": {
                      "actions": {
                        "Does_get_downloadble_links_API_response_contain_errors": {
                          "actions": {
                            "Add_comment_to_incident_(V3)": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "incidentArmId": "@triggerBody()?['IncidentARMId']",
                                  "message": "<p><strong>Suspicious Files</strong><br>\n@{body('Create_HTML_table')}</p>"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                              }
                            },
                            "Set_Downloadlink_API_error_with_status_code_200": {
                              "runAfter": {
                                "Add_comment_to_incident_(V3)": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "DownloadLinkStatus",
                                "value": "Error: @{body('Get_downloadable_link_for_given_object')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Does_Async_request_status_SUCCEEDED": {
                                "actions": {
                                  "Does_status_code_for_get_cluster_information_equal_to_200": {
                                    "actions": {
                                      "Does_response_of_get_cluster_information_contain_errors": {
                                        "actions": {
                                          "Set_cluster_information_error_message_with_status_code_200": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "DownloadLinkStatus",
                                              "value": "Error: @{body('Get_downloadable_link_for_given_object')?['erros'][0]?['message']}"
                                            }
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Enrich_Anomaly_incident_with_anomalous_files_and_downloadable_link_details": {
                                              "runAfter": {
                                                "Prepare_downloadable_link": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "body": {
                                                  "incidentArmId": "@triggerBody()?['IncidentARMId']",
                                                  "message": "<p><span style=\"font-size: 14px\"><strong>Suspicious Files</strong></span><br>\n@{body('Create_HTML_table')}<br>\n<br>\n<span style=\"font-size: 14px\"><strong>Download Links:</strong></span><br>\nDownload Links for @{length(variables('DownloadPaths'))} path(s) from snapshot of @{triggerBody()?['ObjectName']} taken at @{triggerBody()?['LastUpdatedTime']} is ready<br>\n@{outputs('Prepare_downloadable_link')}</p>"
                                                },
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                              }
                                            },
                                            "Parse_JSON_2": {
                                              "type": "ParseJson",
                                              "inputs": {
                                                "content": "@body('Get_Cluster_Information')",
                                                "schema": {
                                                  "properties": {
                                                    "data": {
                                                      "properties": {
                                                        "clusterConnection": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "edges": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "node": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "cdmUpgradeInfo": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "clusterStatus": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "message": {
                                                                                "type": "string"
                                                                              },
                                                                              "status": {
                                                                                "type": "string"
                                                                              }
                                                                            },
                                                                            "type": "object"
                                                                          },
                                                                          "overallProgress": {
                                                                            "type": "integer"
                                                                          },
                                                                          "version": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "clusterNodeConnection": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "nodes": {
                                                                            "items": {
                                                                              "properties": {
                                                                                "__typename": {
                                                                                  "type": "string"
                                                                                },
                                                                                "id": {
                                                                                  "type": "string"
                                                                                },
                                                                                "ipAddress": {
                                                                                  "type": "string"
                                                                                },
                                                                                "status": {
                                                                                  "type": "string"
                                                                                }
                                                                              },
                                                                              "required": [
                                                                                "id",
                                                                                "status",
                                                                                "ipAddress",
                                                                                "__typename"
                                                                              ],
                                                                              "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "connectivityLastUpdated": {
                                                                        "type": "string"
                                                                      },
                                                                      "defaultAddress": {
                                                                        "type": "string"
                                                                      },
                                                                      "estimatedRunway": {
                                                                        "type": "integer"
                                                                      },
                                                                      "geoLocation": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "address": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "globalManagerConnectivityStatus": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "urls": {
                                                                            "items": {
                                                                              "properties": {
                                                                                "__typename": {
                                                                                  "type": "string"
                                                                                },
                                                                                "isReachable": {
                                                                                  "type": "boolean"
                                                                                },
                                                                                "url": {
                                                                                  "type": "string"
                                                                                }
                                                                              },
                                                                              "required": [
                                                                                "url",
                                                                                "isReachable",
                                                                                "__typename"
                                                                              ],
                                                                              "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "id": {
                                                                        "type": "string"
                                                                      },
                                                                      "lambdaFeatureHistory": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "wasSensitiveDataDiscoveryEverEnabled": {
                                                                            "type": "boolean"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "lastConnectionTime": {
                                                                        "type": "string"
                                                                      },
                                                                      "metric": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "availableCapacity": {
                                                                            "type": "integer"
                                                                          },
                                                                          "totalCapacity": {
                                                                            "type": "integer"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "name": {
                                                                        "type": "string"
                                                                      },
                                                                      "passesConnectivityCheck": {
                                                                        "type": "boolean"
                                                                      },
                                                                      "productType": {
                                                                        "type": "string"
                                                                      },
                                                                      "snappableConnection": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "count": {
                                                                            "type": "integer"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "snapshotCount": {
                                                                        "type": "integer"
                                                                      },
                                                                      "state": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "clusterRemovalState": {
                                                                            "type": "string"
                                                                          },
                                                                          "connectedState": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      },
                                                                      "status": {
                                                                        "type": "string"
                                                                      },
                                                                      "type": {
                                                                        "type": "string"
                                                                      },
                                                                      "version": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "node",
                                                                  "__typename"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            },
                                                            "pageInfo": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "endCursor": {
                                                                  "type": "string"
                                                                },
                                                                "hasNextPage": {
                                                                  "type": "boolean"
                                                                },
                                                                "hasPreviousPage": {
                                                                  "type": "boolean"
                                                                },
                                                                "startCursor": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            "Prepare_downloadable_link": {
                                              "runAfter": {
                                                "Set_cluster_location": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Compose",
                                              "inputs": "@concat('https://',variables('ClusterLocation'),'/',variables('DownloadLinks')[1])"
                                            },
                                            "Response_3": {
                                              "inputs": {
                                                "body": "Anomaly incident for object @{triggerBody()?['ObjectName']} is enriched with Suspicious Files Data and downloadable link for those fielPath(s).",
                                                "statusCode": 200
                                              },
                                              "kind": "Http",
                                              "runAfter": {
                                                "Enrich_Anomaly_incident_with_anomalous_files_and_downloadable_link_details": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Response"
                                            },
                                            "Set_cluster_location": {
                                              "runAfter": {
                                                "Parse_JSON_2": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "ClusterLocation",
                                                "value": "@{body('Parse_JSON_2')?['data']?['clusterConnection']?['edges'][0]?['node']?['defaultAddress']}"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "contains": [
                                                "@body('Get_Cluster_Information')",
                                                "errors"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "runAfter": {
                                      "Get_Cluster_Information": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_cluster_information_error_message": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "DownloadLinkStatus",
                                            "value": "Error: @{body('Get_Cluster_Information')?['message']}"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('Get_Cluster_Information')['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "For_each": {
                                    "foreach": "@body('Parse_JSON')?['links']",
                                    "actions": {
                                      "Append_to_array_variable": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "DownloadLinks",
                                          "value": "@items('For_each')?['href']"
                                        }
                                      }
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  },
                                  "Get_Cluster_Information": {
                                    "runAfter": {
                                      "For_each": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                      "body": {
                                        "query": "query ClusterListFilterQuery($first: Int, $after: String, $filter: ClusterFilterInput, $sortBy: ClusterSortByEnum, $sortOrder: SortOrder) {\r\n  clusterConnection(\r\n    filter: $filter\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n    first: $first\r\n    after: $after\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        ...ClusterListFragment\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment ClusterListFragment on Cluster {\r\n  id\r\n  name\r\n  type\r\n  status\r\n  version\r\n  defaultAddress\r\n  cdmUpgradeInfo {\r\n    clusterStatus {\r\n      message\r\n      status\r\n      __typename\r\n    }\r\n    overallProgress\r\n    scheduleUpgradeAt\r\n    downloadedVersion\r\n    version\r\n    __typename\r\n  }\r\n  productType\r\n  estimatedRunway\r\n  snapshotCount\r\n  geoLocation {\r\n    address\r\n    __typename\r\n  }\r\n  lastConnectionTime\r\n  metric {\r\n    totalCapacity\r\n    availableCapacity\r\n    __typename\r\n  }\r\n  snappableConnection(filter: {protectionStatus: Protected}) {\r\n    count\r\n    __typename\r\n  }\r\n  ...ClusterStateFragment\r\n  ...ClusterNodeConnectionFragment\r\n  ...ClusterGlobalManagerFragment\r\n  ...LambdaFeatureHistoryFragment\r\n  __typename\r\n}\r\n\r\nfragment ClusterNodeConnectionFragment on Cluster {\r\n  clusterNodeConnection {\r\n    nodes {\r\n      id\r\n      status\r\n      ipAddress\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterStateFragment on Cluster {\r\n  state {\r\n    connectedState\r\n    clusterRemovalState\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterGlobalManagerFragment on Cluster {\r\n  passesConnectivityCheck\r\n  globalManagerConnectivityStatus {\r\n    urls {\r\n      url\r\n      isReachable\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  connectivityLastUpdated\r\n  __typename\r\n}\r\n\r\nfragment LambdaFeatureHistoryFragment on Cluster {\r\n  lambdaFeatureHistory {\r\n    wasSensitiveDataDiscoveryEverEnabled\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n",
                                        "variables": {
                                          "filter": {
                                            "id": [
                                              "@{triggerBody()?['ClusterId']}"
                                            ]
                                          },
                                          "first": 20,
                                          "sortBy": "ClusterName",
                                          "sortOrder": "ASC"
                                        }
                                      },
                                      "headers": {
                                        "Authorization": "Bearer @{triggerBody()?['AccessToken']}"
                                      },
                                      "method": "POST",
                                      "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "Parse_JSON": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@body('Parse_JSON')?['status']",
                                        "SUCCEEDED"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Parse_JSON": {
                                "runAfter": {
                                  "RubrikPollAsyncResult": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('RubrikPollAsyncResult')",
                                  "schema": {
                                    "properties": {
                                      "__typename": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "links": {
                                        "items": {
                                          "properties": {
                                            "href": {
                                              "type": "string"
                                            },
                                            "rel": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "href",
                                            "rel"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "status": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              },
                              "Parse_JSON_response_of_Downloadable_Links_API": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('Get_downloadable_link_for_given_object')",
                                  "schema": {
                                    "properties": {
                                      "data": {
                                        "properties": {
                                          "downloadVolumeGroupSnapshotFiles": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "links": {
                                                "items": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "href": {
                                                      "type": "string"
                                                    },
                                                    "rel": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "href",
                                                    "rel",
                                                    "__typename"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "status": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "filesetDownloadSnapshotFiles": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "links": {
                                                "items": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "href": {
                                                      "type": "string"
                                                    },
                                                    "rel": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "href",
                                                    "rel",
                                                    "__typename"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "status": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "vsphereVmDownloadSnapshotFiles": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "links": {
                                                "items": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "href": {
                                                      "type": "string"
                                                    },
                                                    "rel": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "href",
                                                    "rel",
                                                    "__typename"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "status": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              },
                              "RubrikPollAsyncResult": {
                                "runAfter": {
                                  "Set_variable_6": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Workflow",
                                "inputs": {
                                  "body": {
                                    "BaseUrl": "@triggerBody()?['BaseUrl']",
                                    "ClusterId": "@triggerBody()?['ClusterId']",
                                    "PollingInterval": 5,
                                    "PollingTimeout": 720,
                                    "RequestId": "@variables('requestId')"
                                  },
                                  "host": {
                                    "triggerName": "manual",
                                    "workflow": {
                                      "id": "[[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('PollAsyncResultPlaybookName'))]"
                                    }
                                  }
                                }
                              },
                              "Set_variable_6": {
                                "runAfter": {
                                  "Parse_JSON_response_of_Downloadable_Links_API": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "requestId",
                                  "value": "@{if(contains(triggerBody()?['ObjectType'],'Fileset'), body('Parse_JSON_response_of_Downloadable_Links_API')?['data']?['filesetDownloadSnapshotFiles']?['id'],if(contains(triggerBody()?['ObjectType'],'VolumeGroup'),body('Parse_JSON_response_of_Downloadable_Links_API')?['data']?['downloadVolumeGroupSnapshotFiles']?['id'],body('Parse_JSON_response_of_Downloadable_Links_API')?['data']?['vsphereVmDownloadSnapshotFiles']?['id']))}"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('Get_downloadable_link_for_given_object')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Get_downloadable_link_for_given_object": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_downloadLink_API_error_message": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "DownloadLinkStatus",
                              "value": "Error: @{body('Get_downloadable_link_for_given_object')?['message']}"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('Get_downloadable_link_for_given_object')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Get_downloadable_link_for_given_object": {
                      "runAfter": {
                        "Create_HTML_table": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "@variables('query')",
                          "variables": "@variables('variables')"
                        },
                        "headers": {
                          "Authorization": "Bearer @{triggerBody()?['AccessToken']}"
                        },
                        "method": "POST",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    },
                    "Get_filepaths_to_download": {
                      "runAfter": {
                        "Compose": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n  \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n  \"type\": \"AdaptiveCard\",\n  \"version\": \"1.3\",\n  \"body\": [\n{\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Download Forensics\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n{\n            \"type\": \"TextBlock\",\n            \"style\": \"default\",\n             \"text\": \"Object Name= @{triggerBody()?['ObjectName']} \\n\\nObject Id = @{triggerBody()?['ObjectId']} \\n\\nSnapshot fid = @{triggerBody()?['ActivitySeriesId']} \\n\\n@{if(empty(triggerBody()?['incidentStartTime']),'',concat('Incident Start Time = ',triggerBody()?['incidentStartTime']))} \",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n         {\n            \"type\": \"TextBlock\",\n            \"text\": \"Select filepath to download for further investigation\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"title\",\n            \"size\": \"Medium\",\n            \"spacing\": \"Large\"\n        },\n    {\n      \"type\": \"Input.ChoiceSet\",\n      \"id\": \"filePath\",\n      \"isMultiSelect\": true,\n       \"isRequired\": true,\n      \"choices\":@{outputs('Compose')} ,\n    \"style\": \"expanded\"\n    }\n  ],\n  \"actions\": [\n    {\n      \"type\": \"Action.Submit\",\n      \"title\": \"Submit\",\n      \"data\": {\n                    \"id\": \"Loginval\"\n                  },\n      \"style\": \"positive\",\n      \"id\": \"submit\"\n    }\n  ]\n}\n",
                            "recipient": {
                              "channelId": "[[parameters('TeamsChannelId')]",
                              "groupId": "[[parameters('TeamsGroupId')]"
                            },
                            "updateMessage": "Thanks for your response!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Initialize_clusterLocation": {
                      "runAfter": {
                        "Initialize_downloadLinks": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClusterLocation",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_downloadLinkStatus": {
                      "runAfter": {
                        "Initialize_graphql_variables": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "DownloadLinkStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_downloadLinks": {
                      "runAfter": {
                        "Initialize_downloadLinkStatus": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "DownloadLinks",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_downloadPaths": {
                      "runAfter": {
                        "Get_filepaths_to_download": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "DownloadPaths",
                            "type": "array",
                            "value": "@split(body('Get_filepaths_to_download')?['data']?['filePath'], ',')"
                          }
                        ]
                      }
                    },
                    "Initialize_graphql_query": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "query",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_graphql_variables": {
                      "runAfter": {
                        "Initialize_graphql_query": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "variables",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_grpahql_query_and_variables_based_on_objectType": {
                      "runAfter": {
                        "Initialize_downloadPaths": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Fileset_type_of_object": {
                          "case": "Fileset",
                          "actions": {
                            "Set_graphql_query_for_Fileset": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "query",
                                "value": "mutation PhysicalHostDownloadSnapshotFilesMutation($config: FilesetDownloadFilesJobConfigInput!, $id: String!, $deltaTypeFilter: [DeltaType!], $nextSnapshotFid: UUID, $userNote: String) {\n  filesetDownloadSnapshotFiles(\n    input: {config: $config, id: $id, deltaTypeFilter: $deltaTypeFilter, nextSnapshotFid: $nextSnapshotFid, userNote: $userNote}\n  ) {\n    id\n    status\n    error {\n      message\n      __typename\n    }\n    links {\n      href\n      rel\n      __typename\n    }\n    __typename\n  }\n}"
                              }
                            },
                            "Set_graphql_variable_for_Fileset": {
                              "runAfter": {
                                "Set_graphql_query_for_Fileset": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "variables",
                                "value": {
                                  "config": {
                                    "sourceDirs": "@variables('DownloadPaths')"
                                  },
                                  "id": "@{triggerBody()?['ActivitySeriesId']}"
                                }
                              }
                            }
                          }
                        },
                        "VmwareVm_type_of_object": {
                          "case": "VmwareVm",
                          "actions": {
                            "Set_graphql_query_for_VmwareVm": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "query",
                                "value": "mutation RadarInvestigationVSphereDownloadFilesMutation($input: VsphereVmDownloadSnapshotFilesInput!) {\n  vsphereVmDownloadSnapshotFiles(input: $input) {\n    id\n    status\n    links {\n      href\n      rel\n      __typename\n    }\n    __typename\n  }\n}"
                              }
                            },
                            "Set_graphql_variable_for_VmwareVm": {
                              "runAfter": {
                                "Set_graphql_query_for_VmwareVm": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "variables",
                                "value": {
                                  "input": {
                                    "paths": "@variables('DownloadPaths')",
                                    "snapshotFid": "@{triggerBody()?['ActivitySeriesId']}"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "VolumeGroup_ObjectType": {
                          "case": "VolumeGroup",
                          "actions": {
                            "Set_graphql_query_for_VolumeGroup": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "query",
                                "value": "mutation RadarInvestigationVGDownloadFilesMutation($input: DownloadVolumeGroupSnapshotFilesInput!) {\n  downloadVolumeGroupSnapshotFiles(input: $input) {\n    id\n    status\n    links {\n      href\n      rel\n      __typename\n    }\n    __typename\n  }\n}"
                              }
                            },
                            "Set_graphql_variable_for_VolumeGroup": {
                              "runAfter": {
                                "Set_graphql_query_for_VolumeGroup": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "variables",
                                "value": {
                                  "input": {
                                    "config": {
                                      "paths": "@variables('DownloadPaths')"
                                    },
                                    "id": "@{triggerBody()?['ActivitySeriesId']}"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "Response_2": {
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": "Error: Not a valid objectType.",
                              "statusCode": 400
                            }
                          },
                          "Terminate": {
                            "runAfter": {
                              "Response_2": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "message": "Error: Not a valid objectType"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": "@if(contains(triggerBody()?['ObjectType'],'VolumeGroup'),'VolumeGroup',if(contains(triggerBody()?['ObjectType'],'Fileset'),'Fileset','VmwareVm'))",
                      "type": "Switch"
                    },
                    "Initialize_requestId": {
                      "runAfter": {
                        "Initialize_clusterLocation": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "requestId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Failure_Response": {
                      "inputs": {
                        "body": "Error while generating downloadable link for selected suspicious filePath(s): @{variables('DownloadLinkStatus')}",
                        "statusCode": 400
                      },
                      "kind": "Http",
                      "runAfter": {
                        "Does_status_code_of_get_downloadable_link_API_equal_to_200": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "type": "Response"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "RubrikRetrieveAnomalyResult",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('_playbookId13'),'/'))))]",
              "properties": {
                "parentId": "[variables('_playbookId13')]",
                "contentId": "[variables('_playbookContentId13')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion13')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Rubrik Anomaly Generate Downloadable Link",
            "description": "This playbook will generate downloadable links according to objectType (VMware, Fileset or VolumeGroup) and add suspiciousFiles and downloadable links as an incident comment to enrich the anomaly.",
            "prerequisites": [
              "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
              "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
              "3. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId. ",
              "4. Make sure that RubrikPollAsyncResult playbook is deployed before deploying RubrikAnomalyGenerateDownloadableLink playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app -> API connections -> Select teams connection resource",
              "2. Go to General -> edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Assign Role to add comment in incident**",
              "After authorizing each connection, assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles",
              "4. Role: Microsoft Sentinel Contributor",
              "5. Members: select managed identity for assigned access to and add your logic app as member",
              "6. Click on review+assign"
            ],
            "entities": [
              "account",
              "url"
            ],
            "tags": [
              "Anomaly",
              "Enrichment",
              "DownloadLink",
              "Rubrik"
            ],
            "lastUpdateTime": "2024-04-21T00:00:00Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId13')]",
        "contentKind": "Playbook",
        "displayName": "RubrikAnomalyGenerateDownloadableLink",
        "contentProductId": "[variables('_playbookcontentProductId13')]",
        "id": "[variables('_playbookcontentProductId13')]",
        "version": "[variables('playbookVersion13')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RubrikSecurityCloud data connector with template version 3.2.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "Rubrik Security Cloud data connector (using Azure Functions)",
                  "publisher": "Rubrik, Inc",
                  "descriptionMarkdown": "The Rubrik Security Cloud data connector enables security operations teams to integrate insights from Rubrik's Data Observability services into Microsoft Sentinel. The insights include identification of anomalous filesystem behavior associated with ransomware and mass deletion, assess the blast radius of a ransomware attack, and sensitive data operators to prioritize and more rapidly investigate potential incidents.",
                  "graphQueries": [
                    {
                      "metricName": "Total Anomaly Event data received",
                      "legend": "Rubrik_Anomaly_Data_CL",
                      "baseQuery": "Rubrik_Anomaly_Data_CL"
                    },
                    {
                      "metricName": "Total Ransomware Event data received",
                      "legend": "Rubrik_Ransomware_Data_CL",
                      "baseQuery": "Rubrik_Ransomware_Data_CL"
                    },
                    {
                      "metricName": "Total ThreatHunt Event data received",
                      "legend": "Rubrik_ThreatHunt_Data_CL",
                      "baseQuery": "Rubrik_ThreatHunt_Data_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Rubrik Anomaly Events - Anomaly Events for all severity types.",
                      "query": "Rubrik_Anomaly_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Rubrik Ransomware Analysis Events - Ransomware Analysis Events for all severity types.",
                      "query": "Rubrik_Ransomware_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Rubrik ThreatHunt Events - Threat Hunt Events for all severity types.",
                      "query": "Rubrik_ThreatHunt_Data_CL\n | sort by TimeGenerated desc"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "Rubrik_Anomaly_Data_CL",
                      "lastDataReceivedQuery": "Rubrik_Anomaly_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Rubrik_Ransomware_Data_CL",
                      "lastDataReceivedQuery": "Rubrik_Ransomware_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Rubrik_ThreatHunt_Data_CL",
                      "lastDataReceivedQuery": "Rubrik_ThreatHunt_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Rubrik_Anomaly_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Rubrik_Ransomware_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Rubrik_ThreatHunt_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions on the workspace are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Microsoft.Web/sites permissions",
                        "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This connector uses Azure Functions to connect to the Rubrik webhook which push its logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
                    },
                    {
                      "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
                    },
                    {
                      "description": "**STEP 1 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Rubrik Microsoft Sentinel data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available..",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Primary Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ]
                    },
                    {
                      "description": "Use this method for automated deployment of the Rubrik connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-RubrikWebhookEvents-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tFunction Name \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tAnomalies_table_name \n\t\tRansomwareAnalysis_table_name \n\t\tThreatHunts_table_name\n\t\tLogLevel \n \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
                      "title": "Option 1 - Azure Resource Manager (ARM) Template"
                    },
                    {
                      "description": "Use the following step-by-step instructions to deploy the Rubrik Microsoft Sentinel data connector manually with Azure Functions (Deployment via Visual Studio Code).",
                      "title": "Option 2 - Manual Deployment of Azure Functions"
                    },
                    {
                      "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-RubrikWebhookEvents-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. RubrikXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8 or above.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
                    },
                    {
                      "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective values (case-sensitive): \n\t\tWorkspaceID\n\t\tWorkspaceKey\n\t\tAnomalies_table_name\n\t\tRansomwareAnalysis_table_name\n\t\tThreatHunts_table_name\n\t\tLogLevel\n\t\tlogAnalyticsUri (optional)\n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: https://<CustomerId>.ods.opinsights.azure.us. \n4. Once all application settings have been entered, click **Save**."
                    },
                    {
                      "description": "**Post Deployment steps**\n\n"
                    },
                    {
                      "description": "1. Go to Azure function Overview page and Click on **\"Functions\"** tab.\n2. Click on the function called **\"RubrikHttpStarter\"**.\n3. Go to **\"GetFunctionurl\"** and copy the function url.",
                      "title": "1) Get the Function app endpoint"
                    },
                    {
                      "description": "Follow the Rubrik User Guide instructions to [Add a Webhook](https://docs.rubrik.com/en-us/saas/saas/common/adding_webhook.html) to begin receiving event information related to Ransomware Anomalies \n 1. Select the Generic as the webhook Provider(This will use CEF formatted event information)\n 2. Enter the URL part from copied Function-url as the webhook URL endpoint and replace **{functionname}**  with **\"RubrikAnomalyOrchestrator\"**, for the Rubrik Microsoft Sentinel Solution \n 3. Select the Advanced or Custom Authentication option \n 4. Enter x-functions-key as the HTTP header \n 5. Enter the Function access key(value of code parameter from copied function-url) as the HTTP value(Note: if you change this function access key in Microsoft Sentinel in the future you will need to update this webhook configuration) \n 6. Select the EventType as Anomaly \n 7. Select the following severity levels: Critical, Warning, Informational \n 8. Repeat the same steps to add webhooks for Ransomware Investigation Analysis and Threat Hunt. \n\n NOTE: while adding webhooks for Ransomware Investigation Analysis and Threat Hunt, replace **{functionname}**  with **\"RubrikRansomwareOrchestrator\"** and **\"RubrikThreatHuntOrchestrator\"** respectively in copied function-url.",
                      "title": "2) Add a webhook in RubrikSecurityCloud to send data to Microsoft Sentinel."
                    },
                    {
                      "description": "*Now we are done with the rubrik Webhook configuration. Once the webhook events triggered , you should be able to see the Anomaly, Ransomware Investigation Analysis, Threat Hunt events from the Rubrik into respective LogAnalytics workspace table called \"Rubrik_Anomaly_Data_CL\", \"Rubrik_Ransomware_Data_CL\", \"Rubrik_ThreatHunt_Data_CL\".*\n\n"
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "RubrikSecurityCloud",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Ben Meadowcroft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Rubrik",
                  "email": "support@rubrik.com",
                  "tier": "Partner",
                  "link": "https://support.rubrik.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "Rubrik Security Cloud data connector (using Azure Functions)",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "RubrikSecurityCloud",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Ben Meadowcroft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Rubrik",
          "email": "support@rubrik.com",
          "tier": "Partner",
          "link": "https://support.rubrik.com"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Rubrik Security Cloud data connector (using Azure Functions)",
          "publisher": "Rubrik, Inc",
          "descriptionMarkdown": "The Rubrik Security Cloud data connector enables security operations teams to integrate insights from Rubrik's Data Observability services into Microsoft Sentinel. The insights include identification of anomalous filesystem behavior associated with ransomware and mass deletion, assess the blast radius of a ransomware attack, and sensitive data operators to prioritize and more rapidly investigate potential incidents.",
          "graphQueries": [
            {
              "metricName": "Total Anomaly Event data received",
              "legend": "Rubrik_Anomaly_Data_CL",
              "baseQuery": "Rubrik_Anomaly_Data_CL"
            },
            {
              "metricName": "Total Ransomware Event data received",
              "legend": "Rubrik_Ransomware_Data_CL",
              "baseQuery": "Rubrik_Ransomware_Data_CL"
            },
            {
              "metricName": "Total ThreatHunt Event data received",
              "legend": "Rubrik_ThreatHunt_Data_CL",
              "baseQuery": "Rubrik_ThreatHunt_Data_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "Rubrik_Anomaly_Data_CL",
              "lastDataReceivedQuery": "Rubrik_Anomaly_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Rubrik_Ransomware_Data_CL",
              "lastDataReceivedQuery": "Rubrik_Ransomware_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Rubrik_ThreatHunt_Data_CL",
              "lastDataReceivedQuery": "Rubrik_ThreatHunt_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "Rubrik_Anomaly_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Rubrik_Ransomware_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Rubrik_ThreatHunt_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Rubrik Anomaly Events - Anomaly Events for all severity types.",
              "query": "Rubrik_Anomaly_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Rubrik Ransomware Analysis Events - Ransomware Analysis Events for all severity types.",
              "query": "Rubrik_Ransomware_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Rubrik ThreatHunt Events - Threat Hunt Events for all severity types.",
              "query": "Rubrik_ThreatHunt_Data_CL\n | sort by TimeGenerated desc"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This connector uses Azure Functions to connect to the Rubrik webhook which push its logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
            },
            {
              "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
            },
            {
              "description": "**STEP 1 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Rubrik Microsoft Sentinel data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available..",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Primary Key"
                  },
                  "type": "CopyableLabel"
                }
              ]
            },
            {
              "description": "Use this method for automated deployment of the Rubrik connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-RubrikWebhookEvents-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tFunction Name \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tAnomalies_table_name \n\t\tRansomwareAnalysis_table_name \n\t\tThreatHunts_table_name\n\t\tLogLevel \n \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
              "title": "Option 1 - Azure Resource Manager (ARM) Template"
            },
            {
              "description": "Use the following step-by-step instructions to deploy the Rubrik Microsoft Sentinel data connector manually with Azure Functions (Deployment via Visual Studio Code).",
              "title": "Option 2 - Manual Deployment of Azure Functions"
            },
            {
              "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-RubrikWebhookEvents-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. RubrikXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8 or above.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
            },
            {
              "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective values (case-sensitive): \n\t\tWorkspaceID\n\t\tWorkspaceKey\n\t\tAnomalies_table_name\n\t\tRansomwareAnalysis_table_name\n\t\tThreatHunts_table_name\n\t\tLogLevel\n\t\tlogAnalyticsUri (optional)\n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: https://<CustomerId>.ods.opinsights.azure.us. \n4. Once all application settings have been entered, click **Save**."
            },
            {
              "description": "**Post Deployment steps**\n\n"
            },
            {
              "description": "1. Go to Azure function Overview page and Click on **\"Functions\"** tab.\n2. Click on the function called **\"RubrikHttpStarter\"**.\n3. Go to **\"GetFunctionurl\"** and copy the function url.",
              "title": "1) Get the Function app endpoint"
            },
            {
              "description": "Follow the Rubrik User Guide instructions to [Add a Webhook](https://docs.rubrik.com/en-us/saas/saas/common/adding_webhook.html) to begin receiving event information related to Ransomware Anomalies \n 1. Select the Generic as the webhook Provider(This will use CEF formatted event information)\n 2. Enter the URL part from copied Function-url as the webhook URL endpoint and replace **{functionname}**  with **\"RubrikAnomalyOrchestrator\"**, for the Rubrik Microsoft Sentinel Solution \n 3. Select the Advanced or Custom Authentication option \n 4. Enter x-functions-key as the HTTP header \n 5. Enter the Function access key(value of code parameter from copied function-url) as the HTTP value(Note: if you change this function access key in Microsoft Sentinel in the future you will need to update this webhook configuration) \n 6. Select the EventType as Anomaly \n 7. Select the following severity levels: Critical, Warning, Informational \n 8. Repeat the same steps to add webhooks for Ransomware Investigation Analysis and Threat Hunt. \n\n NOTE: while adding webhooks for Ransomware Investigation Analysis and Threat Hunt, replace **{functionname}**  with **\"RubrikRansomwareOrchestrator\"** and **\"RubrikThreatHuntOrchestrator\"** respectively in copied function-url.",
              "title": "2) Add a webhook in RubrikSecurityCloud to send data to Microsoft Sentinel."
            },
            {
              "description": "*Now we are done with the rubrik Webhook configuration. Once the webhook events triggered , you should be able to see the Anomaly, Ransomware Investigation Analysis, Threat Hunt events from the Rubrik into respective LogAnalytics workspace table called \"Rubrik_Anomaly_Data_CL\", \"Rubrik_Ransomware_Data_CL\", \"Rubrik_ThreatHunt_Data_CL\".*\n\n"
            }
          ],
          "id": "[variables('_uiConfigId1')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.2.1",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "RubrikSecurityCloud",
        "publisherDisplayName": "Rubrik",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/RubrikSecurityCloud/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://www.rubrik.com/\">Rubrik Security Cloud</a> solution enables security operations teams to integrate insights from Rubrik’s Data Observability services into Microsoft Sentinel.</p>\n<p><strong>Underlying Microsoft Technologies used:</strong></p>\n<p>This solution takes a dependency on the following technologies, and some of these dependencies either may be in <a href=\"https://azure.microsoft.com/support/legal/preview-supplemental-terms/\">Preview</a> state or might result in additional ingestion or operational costs:</p>\n<ol type=\"a\">\n<li><p><a href=\"https://learn.microsoft.com/azure/azure-monitor/logs/data-collector-api\">Azure Monitor HTTP Data Collector API</a></p>\n</li>\n<li><p><a href=\"https://azure.microsoft.com/products/functions/#overview\">Azure Functions</a></p>\n</li>\n</ol>\n<p><strong>Data Connectors:</strong> 1, <strong>Custom Azure Logic Apps Connectors:</strong> 1, <strong>Playbooks:</strong> 12</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/rubrikLogo.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "RubrikSecurityCloud",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Ben Meadowcroft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Rubrik",
          "email": "support@rubrik.com",
          "tier": "Partner",
          "link": "https://support.rubrik.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "LogicAppsCustomConnector",
              "contentId": "[variables('_RubrikCustomConnector')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikAnomalyAnalysis')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikAnomalyIncidentResponse')]",
              "version": "[variables('playbookVersion3')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikDataObjectDiscovery')]",
              "version": "[variables('playbookVersion4')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikFilesetRansomwareDiscovery')]",
              "version": "[variables('playbookVersion5')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikIOCScan')]",
              "version": "[variables('playbookVersion6')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikPollAsyncResult')]",
              "version": "[variables('playbookVersion7')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikRansomwareDiscoveryAndFileRecovery')]",
              "version": "[variables('playbookVersion8')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikRansomwareDiscoveryAndVMRecovery')]",
              "version": "[variables('playbookVersion9')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikFileObjectContextAnalysis')]",
              "version": "[variables('playbookVersion10')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikUserIntelligenceAnalysis')]",
              "version": "[variables('playbookVersion11')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikRetrieveUserIntelligenceInformation')]",
              "version": "[variables('playbookVersion12')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_RubrikAnomalyGenerateDownloadableLink')]",
              "version": "[variables('playbookVersion13')]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            }
          ]
        },
        "firstPublishDate": "2022-07-19",
        "lastPublishDate": "2024-03-17",
        "providers": [
          "Rubrik"
        ],
        "categories": {
          "domains": [
            "Security - Others"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
