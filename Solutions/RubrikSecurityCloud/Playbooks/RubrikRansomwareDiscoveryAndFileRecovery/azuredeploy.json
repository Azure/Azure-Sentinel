{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "Rubrik Ransomware Discovery and File Recovery",
    "description": "This playbook interacts with Rubrik Security Cloud to (1) optionally preserve evidence by creating an on-demand snapshot of the object, (2) identify a potential recovery point by scanning backups for specified IOCs, and (3) supporting file level recovery.",
    "prerequisites": [
      "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
      "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
      "3. Rubrik custom connector needs to be deployed prior to the deployment of this playbook, in the same resource group and region. Relevant instructions can be found in the connector doc page.",
      "4. To perform an IOC scan the IOC YARA rule should be available.",
      "5. Obtain Teams GroupId and ChannelId",
      "6. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
      "a. Create a Key Vault with unique name",
      "b. Go to KeyVault -> secrets -> Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively",
      "7. Make sure that RubrikIOCScan and RubrikPollAsyncResult playbook is deployed before deploying RubrikRansomwareDiscoveryAndFileRecovery playbook."
    ],
    "postDeployment": [
      "**a. Authorize connections**",
      "Once deployment is complete, authorize each connection.",
      "1. Click the Custom Connector connection resource",
      "2. Click edit API connection",
      "3. Click Authorize",
      "4. Sign in",
      "5. Click Save",
      "6. Repeat steps for other connections"
    ],
    "prerequisitesDeployTemplateFile": "Azure-Sentinel/Solutions/RubrikSecurityCloud/Playbooks/RubrikCustomConnector/Rubrik_custom_conn.json",
    "lastUpdateTime": "2022-01-20T00:00:00.000Z",
    "entities": [
      "account",
      "url"
    ],
    "tags": [
      "Recovery",
      "Ransomware Discovery",
      "Security",
      "Rubrik"
    ],
    "support": {
      "tier": "community",
      "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
    },
    "author": {
      "name": "Rubrik"
    }
  },
  "parameters": {
    "PlaybookName": {
      "defaultValue": "RubrikRansomwareDiscoveryAndFileRecovery",
      "type": "string"
    },
    "Rubrik Connector name": {
      "defaultValue": "RubrikCustomConnector",
      "type": "String",
      "metadata": {
        "description": "Rubrik Custom Connector name"
      }
    },
    "TeamsGroupId": {
      "defaultValue": "TeamsGroupIds",
      "type": "String",
      "metadata": {
        "description": "Id of the Teams Group where the adaptive card will be posted."
      }
    },
    "TeamsChannelId": {
      "defaultValue": "TeamsChannelId",
      "type": "String",
      "metadata": {
        "description": "Id of the Teams Channel where the adaptive card will be posted."
      }
    },
    "keyvaultName": {
      "defaultValue": "RubrikSentinelKeyVault",
      "type": "string"
    },
    "tenantId": {
      "type": "string"
    }
  },
  "variables": {
    "RubrikcustomconnectorConnectionName": "[concat('Rubrikcustomconnector-', parameters('PlaybookName'))]",
    "KeyvaultConnectionName": "[concat('Keyvault-', parameters('PlaybookName'))]",
    "TeamsConnectionName": "[concat('Teams-', parameters('PlaybookName'))]"
  },
  "resources": [
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "BaseUrl": {
                      "type": "string"
                    },
                    "ClusterId": {
                      "type": "string"
                    },
                    "IncidentTime": {
                      "type": "string"
                    },
                    "ObjectId": {
                      "type": "string"
                    },
                    "ObjectName": {
                      "type": "string"
                    },
                    "ObjectType": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Authentication": {
              "runAfter": {
                "Get_ClientSecret": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "client_id": "@body('Get_ClientId')?['value']",
                  "client_secret": "@body('Get_ClientSecret')?['value']"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/client_token"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "Check_if_Polling_Timeout_is_less_than_or_equals_to_0": {
              "actions": {
                "Set_default_value_for_polling_timeout": {
                  "runAfter": {},
                  "type": "SetVariable",
                  "inputs": {
                    "name": "PollingTimeout",
                    "value": 720
                  }
                }
              },
              "runAfter": {
                "Initialize_Polling_Timeout_for_IOC_Scan": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "lessOrEquals": [
                      "@variables('PollingTimeout')",
                      0
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Check_that_IOC_scan_has_no_error": {
              "actions": {},
              "runAfter": {
                "RubrikIOCScan": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "IOC_Scan_Error_Response_": {
                    "runAfter": {
                      "Set_Error_message_from_IOC_scan_response": [
                        "Succeeded"
                      ]
                    },
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                      "body": "@variables('IOCScanResultStatus')",
                      "statusCode": 400
                    }
                  },
                  "Set_Error_message_from_IOC_scan_response": {
                    "runAfter": {},
                    "type": "SetVariable",
                    "inputs": {
                      "name": "IOCScanResultStatus",
                      "value": "Status Error  in IOC scan: @{body('RubrikIOCScan')?['error']}"
                    }
                  },
                  "Terminate": {
                    "runAfter": {
                      "IOC_Scan_Error_Response_": [
                        "Succeeded"
                      ]
                    },
                    "type": "Terminate",
                    "inputs": {
                      "runError": {
                        "message": "Error: @{variables('IOCScanResultStatus')}"
                      },
                      "runStatus": "Failed"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@empty(body('RubrikIOCScan')?['error'])",
                      "@true"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Collect_IOC_Scan_Data": {
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "body": {
                    "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"IOC Scan Data to Perform File Recovery\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate IOC Scan(s) and option to recover file(s) of recoverable snapshot.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nIncident Start Time = @{variables('IncidentTime')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC hash to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC hash \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC path to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC path \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule\",\n            \"isMultiline\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Start date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"Start date \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"End date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"End date \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Time Delta to update the date range of IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"id\": \"Time Delta \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling interval for IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip7\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"id\": \"Polling interval \",\n            \"placeholder\": \"5\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling timeout for IOC Scan\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip8\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"label\": \"In minutes\",\n            \"id\": \"Polling timeout \",\n            \"placeholder\": \"720\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Limit to loop the IOC scan sub-playbook\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip9\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"id\": \"Limit to loop the IOC scan sub-playbook\",\n            \"placeholder\": \"1\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule file URL to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip10\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule file URL \",\n            \"isMultiline\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to include in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip11\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to include \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exclude in the IOC Scan\",\n            \"wrap\": true,\n            \"separator\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip12\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exclude\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exempt in the IOC Scan\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip13\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exempt\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Perform recovery\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip14\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"Yes\",\n                    \"value\": \"Yes\"\n                },\n                {\n                    \"title\": \"No\",\n                    \"value\": \"No\"\n                }\n            ],\n            \"id\": \"Perform recovery\",\n            \"isRequired\": true,\n            \"errorMessage\": \"Please select Performance recovery\",\n            \"value\": \"Yes\",\n            \"style\": \"expanded\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Requested Hash Type\",\n            \"wrap\": true,\n            \"separator\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip15\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"HASH_TYPE_M_D5\",\n                    \"value\": \"HASH_TYPE_M_D5\"\n                },\n                {\n                    \"title\": \"HASH_TYPE_SH_A256\",\n                    \"value\": \"HASH_TYPE_SH_A256\"\n                }\n            ],\n            \"value\": \"HASH_TYPE_M_D5\",\n            \"id\": \"Requested Hash Type\",\n            \"style\": \"expanded\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Scan Name\",\n            \"wrap\": true,\n            \"separator\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip16\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Scan Name\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                    "recipient": {
                      "channelId": "[concat('', parameters('TeamsChannelId'))]",
                      "groupId": "[concat('', parameters('TeamsGroupId'))]"
                    },
                    "updateMessage": "Response Saved for IOC Sacn-File Recovery!"
                  },
                  "notificationUrl": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['teams']['connectionId']"
                  }
                },
                "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
              }
            },
            "Create_Snapshot_for_evidence": {
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "mutation TakeVSphereSnapshotMutation($snappableId: String!, $slaID: String) {\r\n    vsphereOnDemandSnapshot(input: { id: $snappableId, config: {slaId: $slaID} }) {\r\n      id\r\n      status\r\n    }\r\n  }",
                  "variables": {
                    "snappableId": "@{variables('ObjectId')}"
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}",
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "Does_Create_Snapshot_get_status_code_200": {
              "actions": {
                "Does_Create_Snapshot_API_response_contains_errors": {
                  "actions": {
                    "Set_response_error_message_as_Create_Snapshot_status": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "CreateSnapshotStatus",
                        "value": "Error: @{body('Create_Snapshot_for_evidence')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "runAfter": {},
                  "else": {
                    "actions": {
                      "Is_Snapshot_creation_started": {
                        "actions": {
                          "Is_the_snapshot_created_successfully": {
                            "runAfter": {
                              "Parse_JSON_of_PollAsyncResult": [
                                "Succeeded"
                              ]
                            },
                            "cases": {
                              "Case_RUNNING": {
                                "case": "RUNNING",
                                "actions": {
                                  "Set_timeout_message_in_status": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CreateSnapshotStatus",
                                      "value": "Wait for evidence snapshot creation results timed out. Please see incident context for further details."
                                    }
                                  }
                                }
                              },
                              "Case_SUCCESS": {
                                "case": "SUCCEEDED",
                                "actions": {
                                  "Set_success_message_in_status": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CreateSnapshotStatus",
                                      "value": "Evidence snapshot has been created for the VM object."
                                    }
                                  }
                                }
                              }
                            },
                            "default": {
                              "actions": {
                                "Set_error_message": {
                                  "runAfter": {},
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "CreateSnapshotStatus",
                                    "value": "Evidence snapshot was not created. "
                                  }
                                }
                              }
                            },
                            "expression": "@if(or(or(equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'QUEUED'),equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'RUNNING')),equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'ACQUIRING')),'RUNNING',if(equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'SUCCEEDED'),'SUCCEEDED','Default'))",
                            "type": "Switch"
                          },
                          "Parse_JSON_of_PollAsyncResult": {
                            "runAfter": {
                              "RubrikPollAsyncResult": [
                                "Succeeded"
                              ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                              "content": "@body('RubrikPollAsyncResult')",
                              "schema": {
                                "properties": {
                                  "__typename": {
                                    "type": "string"
                                  },
                                  "error": {},
                                  "id": {
                                    "type": "string"
                                  },
                                  "links": {
                                    "items": {
                                      "properties": {
                                        "href": {
                                          "type": "string"
                                        },
                                        "rel": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "href",
                                        "rel"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "status": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            }
                          },
                          "RubrikPollAsyncResult": {
                            "runAfter": {},
                            "type": "Workflow",
                            "inputs": {
                              "body": {
                                "BaseUrl": "@triggerBody()?['BaseUrl']",
                                "ClusterId": "@variables('ClusterId')",
                                "PollingInterval": 5,
                                "PollingTimeout": 720,
                                "RequestId": "@body('Parse_JSON_of_create_snapshot_')?['data']?['vsphereOnDemandSnapshot']?['id']"
                              },
                              "headers": {
                                "Content-Type": "application/json"
                              },
                              "host": {
                                "triggerName": "manual",
                                "workflow": {
                                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult')]"
                                }
                              }
                            }
                          },
                          "Set_Error_for_Poll_Async_Result_in_create_snapshot": {
                            "runAfter": {
                              "RubrikPollAsyncResult": [
                                "Failed"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "CreateSnapshotStatus",
                              "value": "Error Occurred in Poll Async Result"
                            }
                          }
                        },
                        "runAfter": {
                          "Parse_JSON_of_create_snapshot_": [
                            "Succeeded"
                          ]
                        },
                        "else": {
                          "actions": {
                            "Set__error_message_for_snapshot_creation": {
                              "runAfter": {},
                              "type": "SetVariable",
                              "inputs": {
                                "name": "CreateSnapshotStatus",
                                "value": "Evidence snapshot was not created. Please see context for more details."
                              }
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "not": {
                                "equals": [
                                  "@body('Parse_JSON_of_create_snapshot_')?['data']?['vsphereOnDemandSnapshot']?['id']",
                                  "@null"
                                ]
                              }
                            }
                          ]
                        },
                        "type": "If"
                      },
                      "Parse_JSON_of_create_snapshot_": {
                        "runAfter": {},
                        "type": "ParseJson",
                        "inputs": {
                          "content": "@body('Create_Snapshot_for_evidence')",
                          "schema": {
                            "properties": {
                              "data": {
                                "properties": {
                                  "vsphereOnDemandSnapshot": {
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      },
                                      "status": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@body('Create_Snapshot_for_evidence')",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Create_Snapshot_for_evidence": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_create_snapshot_error_status_with_status_code_not_equal_to_200_": {
                    "runAfter": {},
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Status",
                      "value": "Status code:@{outputs('Create_Snapshot_for_evidence')['statusCode']}  Error: @{body('Create_Snapshot_for_evidence')?['message']}"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('Create_Snapshot_for_evidence')['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Does_List_all_Snapshots_get_status_code_200": {
              "actions": {
                "Does_List_all_Snapshots_response_contain_errors": {
                  "actions": {
                    "Set_response_error_message_as_List_Snapshot_status": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ListSnapshotsStatus",
                        "value": "Error: @{body('List_all_Snapshots')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "runAfter": {},
                  "else": {
                    "actions": {
                      "Set_success_for_list_all_snapshots": {
                        "runAfter": {},
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ListSnapshotsStatus",
                          "value": "Obtained all snapshots for given objectId."
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@{body('List_all_Snapshots')}",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "List_all_Snapshots": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_error_message_with_status_code_as_List_snapshots_status": {
                    "runAfter": {},
                    "type": "SetVariable",
                    "inputs": {
                      "name": "ListSnapshotsStatus",
                      "value": "Status code:@{outputs('List_all_Snapshots')['statusCode']}  Error:@{body('List_all_Snapshots')?['message']} "
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('List_all_Snapshots')['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Get_7_days_ago_date": {
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "type": "Expression",
              "kind": "GetPastTime",
              "inputs": {
                "interval": 7,
                "timeUnit": "Day"
              }
            },
            "Get_ClientId": {
              "runAfter": {
                "Is_object_type_not_a_VM": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-clientId')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "outputs"
                  ]
                }
              }
            },
            "Get_ClientSecret": {
              "runAfter": {
                "Get_ClientId": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "outputs"
                  ]
                }
              }
            },
            "Initialize_Cluster_Id": {
              "runAfter": {
                "Initialize_Object_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ClusterId",
                    "type": "string",
                    "value": "@triggerBody()?['ClusterId']"
                  }
                ]
              },
              "description": "from input of playbook"
            },
            "Initialize_Count": {
              "runAfter": {
                "Initialize_restoreConfig": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Count",
                    "type": "integer",
                    "value": -1
                  }
                ]
              }
            },
            "Initialize_IOC_Scan_Result_Status": {
              "runAfter": {
                "Initialize_Status_for_IOC_scan_and_Recovery": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IOCScanResultStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_IOC_Yara_rule_to_scan_for": {
              "runAfter": {
                "Initialize_Cluster_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IOCYaraRule",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Incident_Time": {
              "runAfter": {
                "Initialize_Object_Name": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IncidentTime",
                    "type": "string",
                    "value": "@{triggerBody()?['IncidentTime']}"
                  }
                ]
              }
            },
            "Initialize_Object_Id": {
              "runAfter": {
                "Initialize_Object_Type": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectId",
                    "type": "string",
                    "value": "@triggerBody()?['ObjectId']"
                  }
                ]
              },
              "description": "from input of playbook"
            },
            "Initialize_Object_Name": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectName",
                    "type": "string",
                    "value": "@{triggerBody()?['ObjectName']}"
                  }
                ]
              }
            },
            "Initialize_Object_Type": {
              "runAfter": {
                "Initialize_Incident_Time": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectType",
                    "type": "string",
                    "value": "@triggerBody()?['ObjectType']"
                  }
                ]
              },
              "description": "Fetch from incident"
            },
            "Initialize_Polling_Timeout_for_IOC_Scan": {
              "runAfter": {
                "Collect_IOC_Scan_Data": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "PollingTimeout",
                    "type": "integer",
                    "value": "@if(empty(body('Collect_IOC_Scan_Data')?['data']?['polling timeout ']),0,int(body('Collect_IOC_Scan_Data')?['data']?['polling timeout ']))"
                  }
                ]
              }
            },
            "Initialize_Status_for_IOC_scan_and_Recovery": {
              "runAfter": {
                "Initialize_IOC_Yara_rule_to_scan_for": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Status",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Status_for_List_all_Snapshot": {
              "runAfter": {
                "Initialize_Status_for_Snapshot_Creation": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ListSnapshotsStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Status_for_Snapshot_Creation": {
              "runAfter": {
                "Initialize_IOC_Scan_Result_Status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CreateSnapshotStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_access_token": {
              "runAfter": {
                "Is_Authentication_Failed": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "access_token",
                    "type": "string",
                    "value": "@{body('Authentication')?['access_token']}"
                  }
                ]
              }
            },
            "Initialize_config": {
              "runAfter": {
                "Initialize_Count": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "config",
                    "type": "object"
                  }
                ]
              }
            },
            "Initialize_path_for_recovery": {
              "runAfter": {
                "Initialize_polling_timeout_for_recovery": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Path",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_polling_timeout_for_recovery": {
              "runAfter": {
                "Initialize_Status_for_List_all_Snapshot": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "PollingTimeoutRecovery",
                    "type": "integer"
                  }
                ]
              }
            },
            "Initialize_restoreConfig": {
              "runAfter": {
                "Initialize_restorePath_for_recovery": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RestoreConfig",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_restorePath_for_recovery": {
              "runAfter": {
                "Initialize_path_for_recovery": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RestorePath",
                    "type": "array"
                  }
                ]
              }
            },
            "Is_Authentication_Failed": {
              "actions": {
                "Failed_authentication_Response_": {
                  "runAfter": {},
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "Error:@{body('Authentication')?['message']}",
                    "statusCode": "@outputs('Authentication')['statusCode']"
                  }
                },
                "Terminate_for_failed_authentication_": {
                  "runAfter": {
                    "Failed_authentication_Response_": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "@{outputs('Authentication')['statusCode']}",
                      "message": "Error:@{body('Authentication')?['message']}"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Authentication": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('Authentication')['statusCode']",
                        200
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Is_IOC_scan_successful": {
              "runAfter": {
                "Parse_JSON_of_RubrikIOCScan": [
                  "Succeeded"
                ]
              },
              "cases": {
                "Case_ERROR": {
                  "case": "ERROR",
                  "actions": {
                    "Set_error_message_for_IOC_scan": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Status",
                        "value": "There was an error while running the IOC scan."
                      }
                    }
                  }
                },
                "Case_FINISHED": {
                  "case": "FINISHED",
                  "actions": {
                    "Are_there_any_recoverable_snapshots": {
                      "actions": {
                        "Is_the_latest_snapshot_infected": {
                          "actions": {
                            "Is_recovery_enabled": {
                              "actions": {
                                "Collect_Recovery_Data": {
                                  "runAfter": {},
                                  "type": "ApiConnectionWebhook",
                                  "inputs": {
                                    "body": {
                                      "body": {
                                        "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Recovery Data\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate recovery of file(s) of recoverable snapshot.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nNumber of file to be change = @{body('RubrikIOCScan')?['NumOfFile']}\\n\\nIncident Start Time = @{variables('IncidentTime')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to recover from the recoverable snapshot\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to recover\",\n            \"isMultiline\": true,\n            \"isRequired\": true,\n            \"label\": \"required\",\n            \"errorMessage\": \"\\\"Paths to recover\\\" Is required field\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Restore path for the file(s)\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Restore path for the file(s)\",\n            \"isRequired\": true,\n            \"label\": \"required\",\n            \"errorMessage\": \"\\\"Restore path for the file(s)\\\" is required field\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Destination object ID to restore file(s) into\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Destination object ID to restore file\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling interval for recovery asynchronous results\\n\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"5\",\n            \"id\": \"Polling interval for recovery \"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling timeout for recovery asynchronous results\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"720\",\n            \"label\": \"In minutes\",\n            \"id\": \"Polling timeout for recovery\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to Block file or not?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"Whether to Block file or not?\",\n            \"value\": \"No\",\n            \"style\": \"expanded\",\n            \"choices\": [\n                {\n                    \"title\": \"No\",\n                    \"value\": \"No\"\n                },\n                {\n                    \"title\": \"Yes\",\n                    \"value\": \"Yes\"\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                                        "recipient": {
                                          "channelId": "[concat('', parameters('TeamsChannelId'))]",
                                          "groupId": "[concat('', parameters('TeamsGroupId'))]"
                                        },
                                        "updateMessage": "Response saved for File-Recovery data!"
                                      },
                                      "notificationUrl": "@{listCallbackUrl()}"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['teams']['connectionId']"
                                      }
                                    },
                                    "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                  }
                                },
                                "Does_Recover_snapshot_files_get_status_code_200": {
                                  "actions": {
                                    "Does_Recover_snapshot_files_contains_errors": {
                                      "actions": {
                                        "Set_response_error_message_as_Recover_files_status": {
                                          "runAfter": {},
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "Status",
                                            "value": "Error: @{body('Recover_snapshot_files')?['errors'][0]?['message']}"
                                          }
                                        }
                                      },
                                      "runAfter": {},
                                      "else": {
                                        "actions": {
                                          "Has_recovery_started": {
                                            "actions": {
                                              "Is_recovery_completed": {
                                                "actions": {
                                                  "Set_success_message_for_file_recovery": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "Status",
                                                      "value": "@{concat('The files have been successfully recovered from the Snapshot with ID ',body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshot']?['id'])}"
                                                    }
                                                  }
                                                },
                                                "runAfter": {
                                                  "Parse_JSON_for_PollAsyncResult2": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "else": {
                                                  "actions": {
                                                    "Set_error_message_for_file_recovery": {
                                                      "runAfter": {},
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                        "name": "Status",
                                                        "value": "Recovery of snapshot files for given snapshot ID did not complete."
                                                      }
                                                    }
                                                  }
                                                },
                                                "expression": {
                                                  "and": [
                                                    {
                                                      "equals": [
                                                        "@body('Parse_JSON_for_PollAsyncResult2')?['status']",
                                                        "SUCCEEDED"
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "type": "If"
                                              },
                                              "Parse_JSON_for_PollAsyncResult2": {
                                                "runAfter": {
                                                  "RubrikPollAsyncResult_2": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "ParseJson",
                                                "inputs": {
                                                  "content": "@body('RubrikPollAsyncResult_2')",
                                                  "schema": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "error": {},
                                                      "id": {
                                                        "type": "string"
                                                      },
                                                      "links": {
                                                        "items": {
                                                          "properties": {
                                                            "href": {
                                                              "type": "string"
                                                            },
                                                            "rel": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "required": [
                                                            "href",
                                                            "rel"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        "type": "array"
                                                      },
                                                      "status": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                }
                                              },
                                              "RubrikPollAsyncResult_2": {
                                                "runAfter": {},
                                                "type": "Workflow",
                                                "inputs": {
                                                  "body": {
                                                    "BaseUrl": "@triggerBody()?['BaseUrl']",
                                                    "ClusterId": "@variables('ClusterId')",
                                                    "PollingInterval": "@if(or(empty(string(body('Collect_Recovery_Data')?['data']?['polling interval for recovery '])),lessOrEquals(int(body('Collect_Recovery_Data')?['data']?['polling interval for recovery ']),0)),5,int(body('Collect_Recovery_Data')?['data']?['polling interval for recovery ']))",
                                                    "PollingTimeout": "@variables('PollingTimeoutRecovery')",
                                                    "RequestId": "@body('Parse_JSON_for_recover_snapshot_files')?['data']?['vsphereVMRecoverFilesNew']?['id']"
                                                  },
                                                  "headers": {
                                                    "Content-Type": "application/json"
                                                  },
                                                  "host": {
                                                    "triggerName": "manual",
                                                    "workflow": {
                                                      "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult')]"
                                                    }
                                                  }
                                                }
                                              },
                                              "Set_error_message_for_poll_async_result_in_file_recovery": {
                                                "runAfter": {
                                                  "RubrikPollAsyncResult_2": [
                                                    "Failed"
                                                  ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "Status",
                                                  "value": "Error in Poll Async Result"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Parse_JSON_for_recover_snapshot_files": [
                                                "Succeeded"
                                              ]
                                            },
                                            "else": {
                                              "actions": {
                                                "Set_error_message_for_recovery_not_started": {
                                                  "runAfter": {},
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "Status",
                                                    "value": "@{concat('Recovery of snapshot using recoverable snapshot id ',body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshot']?['id'],' did not start.')}"
                                                  }
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "not": {
                                                    "equals": [
                                                      "@empty(body('Parse_JSON_for_recover_snapshot_files')?['data']?['vsphereVmRecoverFilesNew']?['id'])",
                                                      true
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Parse_JSON_for_recover_snapshot_files": {
                                            "runAfter": {},
                                            "type": "ParseJson",
                                            "inputs": {
                                              "content": "@body('Recover_snapshot_files')",
                                              "schema": {
                                                "properties": {
                                                  "data": {
                                                    "properties": {
                                                      "vsphereVmRecoverFilesNew": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "id": {
                                                            "type": "string"
                                                          },
                                                          "status": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "type": "object"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "contains": [
                                              "@body('Recover_snapshot_files')",
                                              "errors"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "runAfter": {
                                    "Recover_snapshot_files": [
                                      "Succeeded",
                                      "Failed"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_error_message_with_status_code_as_File_Recovery_status_": {
                                        "runAfter": {},
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "Status",
                                          "value": "Status code:@{outputs('Recover_snapshot_files')['statusCode']} Error:@{body('Recover_snapshot_files')?['message']}"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@outputs('Recover_snapshot_files')['statusCode']",
                                          200
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "For_each": {
                                  "foreach": "@variables('RestorePath')",
                                  "actions": {
                                    "Append_to_array_variable": {
                                      "runAfter": {
                                        "Increment_variable": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "RestoreConfig",
                                        "value": {
                                          "restorePathPair": {
                                            "path": "@{variables('Path')[variables('Count')]}",
                                            "restorePath": "@{variables('RestorePath')[variables('Count')]}"
                                          }
                                        }
                                      }
                                    },
                                    "Increment_variable": {
                                      "runAfter": {},
                                      "type": "IncrementVariable",
                                      "inputs": {
                                        "name": "Count",
                                        "value": 1
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Set_restore_path": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Foreach",
                                  "runtimeConfiguration": {
                                    "concurrency": {
                                      "repetitions": 1
                                    }
                                  }
                                },
                                "Recover_snapshot_files": {
                                  "runAfter": {
                                    "Set_config": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Http",
                                  "inputs": {
                                    "body": {
                                      "query": "mutation RecoverVSphereVMFilesMutation($input: VsphereVmRecoverFilesNewInput!) {\r\n  vsphereVmRecoverFilesNew(input: $input) {\r\n    id\r\n    status\r\n    __typename\r\n  }\r\n}",
                                      "variables": {
                                        "input": {
                                          "clusterUuid": "@{variables('ClusterId')}",
                                          "config": "@variables('config')",
                                          "id": "@{body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshotid']}"
                                        }
                                      }
                                    },
                                    "headers": {
                                      "Authorization": "Bearer @{variables('access_token')}",
                                      "Content-Type": "application/json"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                      }
                                    },
                                    "method": "POST",
                                    "path": "/api/graphql",
                                    "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                  }
                                },
                                "Set_config": {
                                  "runAfter": {
                                    "For_each": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "config",
                                    "value": {
                                      "destObjectId": "@body('Collect_Recovery_Data')?['data']?['destination object ID to restore file']",
                                      "domainName": "",
                                      "password": "",
                                      "restoreConfig": "@variables('RestoreConfig')",
                                      "shouldSaveCredentials": false,
                                      "shouldUseAgent": true,
                                      "username": ""
                                    }
                                  }
                                },
                                "Set_path": {
                                  "runAfter": {
                                    "check_if_polling_timeout_for_recovery_is_empty_or_less_than_or_equal_to_0__": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Path",
                                    "value": "@array(split(body('Collect_Recovery_Data')?['data']?['paths to recover'],','))"
                                  }
                                },
                                "Set_restore_path": {
                                  "runAfter": {
                                    "Set_path": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "RestorePath",
                                    "value": "@array(split(body('Collect_Recovery_Data')?['data']?['restore path for the file(s)'],','))"
                                  }
                                },
                                "check_if_polling_timeout_for_recovery_is_empty_or_less_than_or_equal_to_0__": {
                                  "actions": {
                                    "Set_default_value_for_polling_timeout_for_recovery": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "PollingTimeoutRecovery",
                                        "value": 720
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Collect_Recovery_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "or": [
                                      {
                                        "equals": [
                                          "@empty(body('Collect_Recovery_Data')?['data']?['polling timeout for recovery'])",
                                          true
                                        ]
                                      },
                                      {
                                        "lessOrEquals": [
                                          "@int(body('Collect_Recovery_Data')?['data']?['polling timeout for recovery'])",
                                          0
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "runAfter": {},
                              "else": {
                                "actions": {
                                  "Set_message_for_recovery_is_not_enabled": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "Status",
                                      "value": "Recovery is not enabled. so recovery won't be performed."
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Collect_IOC_Scan_Data')?['data']?['perform recovery']",
                                      "Yes"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {},
                          "else": {
                            "actions": {
                              "Set_no_recovery_message_for_IOC_scan_and_recovery": {
                                "runAfter": {},
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "Status",
                                  "value": "The latest snapshot for the given time period is not infected so no recovery is required."
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Parse_JSON_of_RubrikIOCScan')?['isLatestInfected']",
                                  true
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {},
                      "else": {
                        "actions": {
                          "Set_records_not_found_message": {
                            "runAfter": {},
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Status",
                              "value": "No recoverable snapshots were found with the given IOC scan arguments."
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@empty(body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshotid'])",
                                true
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "Case_RUNNING": {
                  "case": "RUNNING",
                  "actions": {
                    "Set_timeout_message_for_IOC_scan": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Status",
                        "value": "Wait for IOC scan results timed out."
                      }
                    }
                  }
                }
              },
              "default": {
                "actions": {
                  "Set_unknown_status_message_for_IOC_scan": {
                    "runAfter": {},
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Status",
                      "value": "Unknown status was received for the IOC scan."
                    }
                  }
                }
              },
              "expression": "@if(contains(body('Parse_JSON_of_RubrikIOCScan')?['RadarIOCScanStatus'],'FINISHED'),'FINISHED',if(contains(body('Parse_JSON_of_RubrikIOCScan')?['RadarIOCScanStatus'],'RUNNING'),'RUNNING',if(contains(body('Parse_JSON_of_RubrikIOCScan')?['RadarIOCScanStatus'],'ERROR'),'ERROR','Default')))",
              "type": "Switch"
            },
            "Is_object_type_not_a_VM": {
              "actions": {
                "Error_Response_for_not_a_VM_object": {
                  "runAfter": {},
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exiting?",
                    "statusCode": 400
                  }
                },
                "error_for_not_a_VM_object": {
                  "runAfter": {
                    "Error_Response_for_not_a_VM_object": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "message": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exiting?"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Initialize_config": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "contains": [
                        "@variables('ObjectType')",
                        "Vm"
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "List_all_Snapshots": {
              "runAfter": {
                "Get_7_days_ago_date": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "query GetVSphereVmSnapshotInfoQuery($id: UUID!, $snapshotGroupBy: CdmSnapshotGroupByEnum!, $missedSnapshotGroupBy: MissedSnapshotGroupByTime!, $timeRange: TimeRangeInput!, $timezoneOffset: Float!, $clusterConnected: Boolean!) {\r\n  snappable: vSphereVmNew(fid: $id) {\r\n    id\r\n    missedSnapshotGroupByConnection(\r\n      groupBy: $missedSnapshotGroupBy\r\n      filter: {timeRange: $timeRange}\r\n      timezoneOffset: $timezoneOffset\r\n    ) @include(if: $clusterConnected) {\r\n      nodes {\r\n        groupByInfo {\r\n          ... on TimeRangeWithUnit {\r\n            unit\r\n            start\r\n            end\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        missedSnapshotConnection {\r\n          count\r\n          nodes {\r\n            date\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    snapshotGroupByConnection(\r\n      groupBy: $snapshotGroupBy\r\n      filter: {timeRange: $timeRange}\r\n      timezoneOffset: $timezoneOffset\r\n    ) {\r\n      nodes {\r\n        groupByInfo {\r\n          ... on TimeRangeWithUnit {\r\n            unit\r\n            start\r\n            end\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        snapshotConnection {\r\n          count\r\n          nodes {\r\n            id\r\n            isIndexed\r\n            isUnindexable\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}",
                  "variables": {
                    "clusterConnected": true,
                    "id": "@{variables('ObjectId')}",
                    "missedSnapshotGroupBy": "DAY",
                    "snapshotGroupBy": "Day",
                    "timeRange": {
                      "end": "@{utcNow()}",
                      "start": "@{body('Get_7_days_ago_date')}"
                    },
                    "timezoneOffset": 5.5
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "Parse_JSON_of_RubrikIOCScan": {
              "runAfter": {
                "Check_that_IOC_scan_has_no_error": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('RubrikIOCScan')",
                "schema": {
                  "properties": {
                    "NumOfFile": {
                      "type": "integer"
                    },
                    "RadarIOCScan": {
                      "properties": {},
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "RadarIOCScanStatus": {
                      "type": "string"
                    },
                    "RecoverableSnapshotid": {
                      "type": "string"
                    },
                    "error": {
                      "type": "string"
                    },
                    "isLatestInfected": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "Response": {
              "runAfter": {
                "Does_Create_Snapshot_get_status_code_200": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ],
                "Does_List_all_Snapshots_get_status_code_200": [
                  "Succeeded",
                  "TimedOut",
                  "Failed",
                  "Skipped"
                ],
                "Is_IOC_scan_successful": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "Creat Snapshot Status": "@variables('CreateSnapshotStatus')",
                  "IOCScan ResultStatus": "@variables('IOCScanResultStatus')",
                  "IOCScan and Recovery Status": "@variables('Status')",
                  "List Snapshot Status": "@variables('ListSnapshotsStatus')"
                },
                "statusCode": "@if(or(contains(variables('Status'),'Error'),or(contains(variables('ListSnapshotsStatus'),'Error'),or(contains(variables('IOCScanResultStatus'),'Error'),contains(variables('CreateSnapshotStatus'),'Error')))),400,200)"
              }
            },
            "RubrikIOCScan": {
              "runAfter": {
                "Whether_to_fetch_Yara_rule(s)_from_a_URLs": [
                  "Succeeded"
                ]
              },
              "type": "Workflow",
              "inputs": {
                "body": {
                  "BaseUrl": "@triggerBody()?['BaseUrl']",
                  "ClusterId": "@variables('ClusterId')",
                  "EndDate": "@body('Collect_IOC_Scan_Data')?['data']?['end date ']",
                  "IOCHash": "@body('Collect_IOC_Scan_Data')?['data']?['ioc hash ']",
                  "IOCPath": "@body('Collect_IOC_Scan_Data')?['data']?['ioc path ']",
                  "IOCYaraRule": "@variables('IOCYaraRule')",
                  "IncidentTime": "@variables('IncidentTime')",
                  "Limit": "@body('Collect_IOC_Scan_Data')?['data']?['limit to loop the IOC scan sub-playbook']",
                  "ObjectId": "@variables('ObjectId')",
                  "ObjectName": "@variables('ObjectName')",
                  "PathsToExclude": "@body('Collect_IOC_Scan_Data')?['data']?['paths to exclude']",
                  "PathsToExempt": "@body('Collect_IOC_Scan_Data')?['data']?['paths to exempt']",
                  "PathsToInclude": "@body('Collect_IOC_Scan_Data')?['data']?['paths to include ']",
                  "PollingInterval": "@body('Collect_IOC_Scan_Data')?['data']?['polling interval ']",
                  "PollingTimeout": "@variables('PollingTimeout')",
                  "RequestedHashType": "@body('Collect_IOC_Scan_Data')?['data']?['requested Hash Type']",
                  "ScanName": "@body('Collect_IOC_Scan_Data')?['data']?['scan Name']",
                  "StartDate": "@body('Collect_IOC_Scan_Data')?['data']?['start date ']",
                  "TimeDelta": "@{body('Collect_IOC_Scan_Data')?['data']?['time Delta ']}"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "triggerName": "manual",
                  "workflow": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikIOCScan')]"
                  }
                }
              }
            },
            "Whether_to_fetch_Yara_rule(s)_from_a_URLs": {
              "actions": {
                "Fetch_Yara_rule(s)_from_file_URLs": {
                  "runAfter": {},
                  "type": "Http",
                  "inputs": {
                    "method": "GET",
                    "uri": "@body('Collect_IOC_Scan_Data')?['data']?['ioc Yara rule file URL ']"
                  }
                },
                "Set_IOC_YaraRule": {
                  "runAfter": {
                    "Fetch_Yara_rule(s)_from_file_URLs": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "IOCYaraRule",
                    "value": "@{body('Fetch_Yara_rule(s)_from_file_URLs')}"
                  }
                }
              },
              "runAfter": {
                "Check_if_Polling_Timeout_is_less_than_or_equals_to_0": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Set_default_value_of_IOC_Yara_Rule": {
                    "runAfter": {},
                    "type": "SetVariable",
                    "inputs": {
                      "name": "IOCYaraRule",
                      "value": "@body('Collect_IOC_Scan_Data')?['data']?['ioc Yara rule']"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@body('Collect_IOC_Scan_Data')?['data']?['ioc Yara rule file URL ']",
                        "@null"
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "RubrikCustomConnector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                "connectionName": "[variables('RubrikcustomconnectorConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
              },
              "keyvault_1": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "connectionName": "[variables('KeyvaultConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
              },
              "teams": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                "connectionName": "[variables('TeamsConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
              }
            }
          }
        }
      },
      "name": "[parameters('PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[resourceGroup().location]",
      "tags": {
        "hidden-SentinelTemplateName": "RubrikRansomwareDiscoveryAndFileRecovery",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('RubrikcustomconnectorConnectionName')]",
      "location": "[resourceGroup().location]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('RubrikcustomconnectorConnectionName')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('KeyvaultConnectionName')]",
      "location": "[resourceGroup().location]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('KeyvaultConnectionName')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
        },
        "parameterValues": {
          "token:TenantId": "[parameters('tenantId')]",
          "token:grantType": "code",
          "vaultName": "[parameters('keyvaultName')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('TeamsConnectionName')]",
      "location": "[resourceGroup().location]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('TeamsConnectionName')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
        }
      }
    }
  ]
}