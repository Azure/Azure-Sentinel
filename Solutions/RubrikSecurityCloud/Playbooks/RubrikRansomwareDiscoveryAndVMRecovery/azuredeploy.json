{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
      "title": "Rubrik Ransomware Discovery and VM Recovery",
      "description": "This playbook interacts with Rubrik Security Cloud to (1) optionally preserve evidence by creating an on-demand snapshot of the object, (2) identify a potential recovery point by scanning backups for specified IOCs, and (3) supporting VM image level recovery.",
      "prerequisites": [
          "1. The Rubrik Security Cloud data connector should be configured to send appropriate events to Microsoft Sentinel.",
          "2. The Rubrik Security Cloud solution should be configured to [connect to Rubrik Security Cloud API end points using a Service Account](https://docs.rubrik.com/en-us/saas/saas/polaris_api_access_with_service_accounts.html), the service account should be assigned a role that includes the relevant privileges necessary to perform the desired operations (see [Roles and Permissions](https://docs.rubrik.com/en-us/saas/saas/common/roles_and_permissions.html) in the Rubrik Security Cloud user guide).",
          "3. Rubrik custom connector needs to be deployed prior to the deployment of this playbook, in the same resource group and region. Relevant instructions can be found in the connector doc page.",
          "4. To perform an IOC scan the IOC YARA rule should be available.",
          "5. Obtain Teams GroupId and ChannelId",
          "6. Store Service account credentials in Key Vault and obtain keyvault name and tenantId",
          "a. Create a Key Vault with unique name",
          "b. Go to KeyVault -> secrets -> Generate/import and create 'Rubrik-AS-Int-ClientId' & 'Rubrik-AS-Int-ClientSecret' for storing client_id and client_secret respectively",
          "7. Make sure that RubrikIOCScan and RubrikPollAsyncResult playbook is deployed before deploying RubrikRansomwareDiscoveryAndVMRecovery playbook."
      ],
      "postDeployment": [
          "**a. Authorize connections**",
          "Once deployment is complete, authorize each connection.",
          "1. Click the Custom Connector connection resource",
          "2. Click edit API connection",
          "3. Click Authorize",
          "4. Sign in",
          "5. Click Save",
          "6. Repeat steps for other connections"
      ],
      "prerequisitesDeployTemplateFile": "Azure-Sentinel/Solutions/RubrikSecurityCloud/Playbooks/RubrikCustomConnector/Rubrik_custom_conn.json",
      "lastUpdateTime": "2022-01-20T00:00:00.000Z",
      "entities": [
          "account",
          "url"
      ],
      "tags": [
          "Recovery",
          "Ransomware Discovery",
          "Security",
          "Rubrik"
      ],
      "support": {
          "tier": "community",
          "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
      },
      "author": {
          "name": "Rubrik"
      }
  },
  "parameters": {
      "PlaybookName": {
          "defaultValue": "RubrikRansomwareDiscoveryAndVMRecovery",
          "type": "string"
      },
      "Rubrik Connector name": {
          "defaultValue": "RubrikCustomConnector",
          "type": "String",
          "metadata": {
              "description": "Rubrik Custom Connector name"
          }
      },
      "keyvaultName": {
          "defaultValue": "RubrikSentinelKeyVault",
          "type": "string"
      },
      "tenantId": {
          "type": "string"
      },
      "TeamsGroupId": {
          "defaultValue": "TeamsGroupIds",
          "type": "String",
          "metadata": {
              "description": "Id of the Teams Group where the adaptive card will be posted."
          }
      },
      "TeamsChannelId": {
          "defaultValue": "TeamsChannelId",
          "type": "String",
          "metadata": {
              "description": "Id of the Teams Channel where the adaptive card will be posted."
          }
      }
  },
  "variables": {
      "RubrikcustomconnectorConnectionName": "[concat('Rubrikcustomconnector-', parameters('PlaybookName'))]",
      "KeyvaultConnectionName": "[concat('Keyvault-', parameters('PlaybookName'))]",
      "TeamsConnectionName": "[concat('Teams-', parameters('PlaybookName'))]"
  },
  "resources": [
      {
          "properties": {
              "provisioningState": "Succeeded",
              "state": "Enabled",
              "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                      "$connections": {
                          "defaultValue": {},
                          "type": "Object"
                      }
                  },
                  "triggers": {
                      "manual": {
                          "type": "Request",
                          "kind": "Http",
                          "inputs": {
                              "schema": {
                                  "properties": {
                                      "BaseUrl": {
                                          "type": "string"
                                      },
                                      "ClusterId": {
                                          "type": "string"
                                      },
                                      "IncidentTime": {
                                          "type": "string"
                                      },
                                      "ObjectId": {
                                          "type": "string"
                                      },
                                      "ObjectName": {
                                          "type": "string"
                                      },
                                      "ObjectType": {
                                          "type": "string"
                                      }
                                  },
                                  "type": "object"
                              }
                          }
                      }
                  },
                  "actions": {
                      "Authentication": {
                          "runAfter": {
                              "ClientSecret": [
                                  "Succeeded"
                              ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                              "body": {
                                  "client_id": "@body('ClientId')?['value']",
                                  "client_secret": "@body('ClientSecret')?['value']"
                              },
                              "headers": {
                                  "Content-Type": "application/json"
                              },
                              "host": {
                                  "connection": {
                                      "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                  }
                              },
                              "method": "post",
                              "path": "/api/client_token"
                          },
                          "runtimeConfiguration": {
                              "secureData": {
                                  "properties": [
                                      "inputs",
                                      "outputs"
                                  ]
                              }
                          }
                      },
                      "Check_if_URLs_is_provided_to_fetch_yara_rule": {
                          "actions": {
                              "Fetch_yara_rule_from_URLs": {
                                  "runAfter": {},
                                  "type": "Http",
                                  "inputs": {
                                      "method": "GET",
                                      "uri": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc Yara rule file URL']"
                                  }
                              },
                              "Set_variable_8": {
                                  "runAfter": {
                                      "Fetch_yara_rule_from_URLs": [
                                          "Succeeded"
                                      ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                      "name": "Yara Rule",
                                      "value": "@{body('Fetch_yara_rule_from_URLs')}"
                                  }
                              }
                          },
                          "runAfter": {
                              "check_if_polling_time_out_is_less_then_or_equal_to_0_or_not": [
                                  "Succeeded"
                              ]
                          },
                          "expression": {
                              "and": [
                                  {
                                      "not": {
                                          "equals": [
                                              "@empty(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc Yara rule file URL'])",
                                              "@true"
                                          ]
                                      }
                                  }
                              ]
                          },
                          "type": "If"
                      },
                      "Check_response_has_error_or_not": {
                          "actions": {},
                          "runAfter": {
                              "RubrikIOCScan": [
                                  "Succeeded",
                                  "Failed",
                                  "TimedOut"
                              ]
                          },
                          "else": {
                              "actions": {
                                  "Response_2": {
                                      "runAfter": {
                                          "Until_2": [
                                              "Succeeded"
                                          ]
                                      },
                                      "type": "Response",
                                      "kind": "Http",
                                      "inputs": {
                                          "body": "IOC Scan has error: @{body('RubrikIOCScan')?['error']}",
                                          "statusCode": 400
                                      }
                                  },
                                  "Set_IOC_Scan_ErrorMessage": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                          "name": "ErrorMessage",
                                          "value": "IOC Scan has error: @{body('RubrikIOCScan')?['error']}"
                                      }
                                  },
                                  "Terminate_6": {
                                      "runAfter": {
                                          "Response_2": [
                                              "Succeeded"
                                          ]
                                      },
                                      "type": "Terminate",
                                      "inputs": {
                                          "runError": {
                                              "message": "IOC Scan not completed: @{body('RubrikIOCScan')?['error']}"
                                          },
                                          "runStatus": "Failed"
                                      }
                                  },
                                  "Until_2": {
                                      "actions": {
                                          "Delay_until_2": {
                                              "runAfter": {},
                                              "type": "Wait",
                                              "inputs": {
                                                  "until": {
                                                      "timestamp": "@addToTime('1970-01-01T00:00:00Z', int(add(int(div(sub(ticks(utcNow()),ticks('1970-01-01Z00:00:00')),10000000)), 10)), 'second')"
                                                  }
                                              }
                                          }
                                      },
                                      "runAfter": {
                                          "Set_IOC_Scan_ErrorMessage": [
                                              "Succeeded"
                                          ]
                                      },
                                      "expression": "@equals(variables('Flow1SkipStatus'), true)",
                                      "limit": {
                                          "count": 60,
                                          "timeout": "PT1H"
                                      },
                                      "type": "Until"
                                  }
                              }
                          },
                          "expression": {
                              "and": [
                                  {
                                      "equals": [
                                          "@empty(body('RubrikIOCScan')?['error'])",
                                          "@true"
                                      ]
                                  }
                              ]
                          },
                          "type": "If"
                      },
                      "Check_status_code_in_response_of_Get_VM_metadata": {
                          "actions": {
                              "Check_if__Get_VM_metadata_contains_any_error_in_replay": {
                                  "actions": {
                                      "Set_variable_23": {
                                          "runAfter": {
                                              "Set_variable_3": [
                                                  "Succeeded"
                                              ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                              "name": "Flow2SkipStatus",
                                              "value": "@true"
                                          }
                                      },
                                      "Set_variable_3": {
                                          "runAfter": {},
                                          "type": "SetVariable",
                                          "inputs": {
                                              "name": "ErrorMessage",
                                              "value": "@{body('Get_VM_metadata')?['errors'][0]?['message']}"
                                          }
                                      },
                                      "Terminate_4": {
                                          "runAfter": {
                                              "Until": [
                                                  "Succeeded"
                                              ]
                                          },
                                          "type": "Terminate",
                                          "inputs": {
                                              "runError": {
                                                  "message": "@variables('ErrorMessage')"
                                              },
                                              "runStatus": "Failed"
                                          }
                                      },
                                      "Until": {
                                          "actions": {
                                              "Delay_until": {
                                                  "runAfter": {},
                                                  "type": "Wait",
                                                  "inputs": {
                                                      "until": {
                                                          "timestamp": "@addToTime('1970-01-01T00:00:00Z', int(add(int(div(sub(ticks(utcNow()),ticks('1970-01-01Z00:00:00')),10000000)), 10)), 'second')"
                                                      }
                                                  }
                                              }
                                          },
                                          "runAfter": {
                                              "Set_variable_23": [
                                                  "Succeeded"
                                              ]
                                          },
                                          "expression": "@equals(variables('Flow1SkipStatus'), true)",
                                          "limit": {
                                              "count": 60,
                                              "timeout": "PT1H"
                                          },
                                          "type": "Until"
                                      }
                                  },
                                  "runAfter": {},
                                  "expression": {
                                      "and": [
                                          {
                                              "contains": [
                                                  "@body('Get_VM_metadata')",
                                                  "errors"
                                              ]
                                          }
                                      ]
                                  },
                                  "type": "If"
                              }
                          },
                          "runAfter": {
                              "Get_VM_metadata": [
                                  "Succeeded",
                                  "Failed"
                              ]
                          },
                          "else": {
                              "actions": {
                                  "Set_Error_message": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                          "name": "ErrorMessage",
                                          "value": "Status Code:  @{outputs('Get_VM_metadata')['statusCode']}, Error message: @{body('Get_VM_metadata')?['message']}"
                                      }
                                  },
                                  "Set_Flow2skip_status": {
                                      "runAfter": {
                                          "Set_Error_message": [
                                              "Succeeded"
                                          ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                          "name": "Flow2SkipStatus",
                                          "value": "@true"
                                      }
                                  },
                                  "Terminate_7": {
                                      "runAfter": {
                                          "Until_3": [
                                              "Succeeded"
                                          ]
                                      },
                                      "type": "Terminate",
                                      "inputs": {
                                          "runError": {
                                              "code": "@{outputs('Get_VM_metadata')['statusCode']}",
                                              "message": "@{body('Get_VM_metadata')?['message']}"
                                          },
                                          "runStatus": "Failed"
                                      }
                                  },
                                  "Until_3": {
                                      "actions": {
                                          "Delay_until_3": {
                                              "runAfter": {},
                                              "type": "Wait",
                                              "inputs": {
                                                  "until": {
                                                      "timestamp": "@addToTime('1970-01-01T00:00:00Z', int(add(int(div(sub(ticks(utcNow()),ticks('1970-01-01Z00:00:00')),10000000)), 10)), 'second')"
                                                  }
                                              }
                                          }
                                      },
                                      "runAfter": {
                                          "Set_Flow2skip_status": [
                                              "Succeeded"
                                          ]
                                      },
                                      "expression": "@equals(variables('Flow1SkipStatus'), true)",
                                      "limit": {
                                          "count": 60,
                                          "timeout": "PT1H"
                                      },
                                      "type": "Until"
                                  }
                              }
                          },
                          "expression": {
                              "and": [
                                  {
                                      "equals": [
                                          "@outputs('Get_VM_metadata')?['statusCode']",
                                          200
                                      ]
                                  }
                              ]
                          },
                          "type": "If"
                      },
                      "ClientId": {
                          "runAfter": {
                              "Is_Object_Type_VM": [
                                  "Succeeded"
                              ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                              "host": {
                                  "connection": {
                                      "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                                  }
                              },
                              "method": "get",
                              "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
                          },
                          "runtimeConfiguration": {
                              "secureData": {
                                  "properties": [
                                      "inputs",
                                      "outputs"
                                  ]
                              }
                          }
                      },
                      "ClientSecret": {
                          "runAfter": {
                              "ClientId": [
                                  "Succeeded"
                              ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                              "host": {
                                  "connection": {
                                      "name": "@parameters('$connections')['keyvault_1']['connectionId']"
                                  }
                              },
                              "method": "get",
                              "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
                          },
                          "runtimeConfiguration": {
                              "secureData": {
                                  "properties": [
                                      "inputs",
                                      "outputs"
                                  ]
                              }
                          }
                      },
                      "ClusterId": {
                          "runAfter": {},
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "ClusterId",
                                      "type": "string"
                                  }
                              ]
                          }
                      },
                      "Cluster_Name": {
                          "runAfter": {
                              "Incident_Time": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "ClusterName",
                                      "type": "string",
                                      "value": "-"
                                  }
                              ]
                          }
                      },
                      "Collect_IOC_scan_and_general_recovery_data": {
                          "runAfter": {
                              "Set_Cluster_Name": [
                                  "Succeeded"
                              ]
                          },
                          "type": "ApiConnectionWebhook",
                          "inputs": {
                              "body": {
                                  "body": {
                                      "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"IOC Scan to Perform VM Recovery\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate IOC Scan(s) and recovery.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nIncident Start Time = @{variables('IncidentTime')}\\n\\nCluster Name = @{variables('ClusterName')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC hash to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC hash to scan for\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC path to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC path to scan for\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule to scan for\",\n            \"isMultiline\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"IOC Yara rule file URL to scan for\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"IOC Yara rule file URL\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Start date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"Start date to initiate\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"End date to initiate the IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.Date\",\n            \"id\": \"End date to initiate\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Time Delta to update the date range of IOC scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip7\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"id\": \"Time Delta\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling interval for IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip8\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"5\",\n            \"id\": \"Polling interval for IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling timeout for IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip9\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"720\",\n            \"label\": \"In minutes\",\n            \"id\": \"Polling timeout for IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling interval for recovery asynchronous results\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip10\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"5\",\n            \"id\": \"Polling interval for recovery\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Polling timeout for recovery asynchronous results\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip11\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"720\",\n            \"id\": \"Polling timeout for recovery\",\n            \"label\": \"In minutes\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Limit to loop the IOC scan sub-playbook\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip12\"\n        },\n        {\n            \"type\": \"Input.Number\",\n            \"placeholder\": \"0\",\n            \"id\": \"Limit to loop the IOC scan sub-playbook\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to include in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip13\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to include in the IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exclude in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip14\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exclude in the IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Paths to exempt in the IOC Scan\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip15\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Paths to exempt in the IOC Scan\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to live-mount or export a recoverable snapshot?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip16\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"live-mount or export\",\n            \"value\": \"Live-Mount\",\n            \"style\": \"expanded\",\n            \"choices\": [\n                {\n                    \"title\": \"Live-Mount\",\n                    \"value\": \"Live-Mount\"\n                },\n                {\n                    \"title\": \"Export\",\n                    \"value\": \"Export\"\n                },\n                {\n                    \"title\": \"No Recovery\",\n                    \"value\": \"No Recovery\"\n                }\n            ],\n            \"isRequired\": true,\n            \"errorMessage\": \"This field id required\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Scan Name\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip17\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Scan Name\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                                      "recipient": {
                                          "channelId": "[concat('', parameters('TeamsChannelId'))]",
                                          "groupId": "[concat('', parameters('TeamsGroupId'))]"
                                      },
                                      "updateMessage": "Response Saved for IOC Scan-VM Recovery!"
                                  },
                                  "notificationUrl": "@{listCallbackUrl()}"
                              },
                              "host": {
                                  "connection": {
                                      "name": "@parameters('$connections')['teams']['connectionId']"
                                  }
                              },
                              "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                          }
                      },
                      "Create_Snapshot_for_evidence": {
                          "runAfter": {
                              "Flow_2_Skip_Status": [
                                  "Succeeded"
                              ]
                          },
                          "type": "Http",
                          "inputs": {
                              "body": {
                                  "query": "mutation TakeVSphereSnapshotMutation($snappableId: String!, $slaID: String) {\r\n    vsphereOnDemandSnapshot(input: { id: $snappableId, config: {slaId: $slaID} }) {\r\n      id\r\n      status\r\n    }\r\n  }",
                                  "variables": {
                                      "snappableId": "@{triggerBody()?['ObjectId']}"
                                  }
                              },
                              "headers": {
                                  "Authorization": "Bearer @{variables('access_token')}",
                                  "Content-Type": "application/json"
                              },
                              "method": "POST",
                              "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                          }
                      },
                      "Does_Create_Snapshot_for_evidence_get_status_code_200": {
                          "actions": {
                              "Does_Create_Snapshot_for_evidence_API_response_contains_errors": {
                                  "actions": {
                                      "Set_1_skip_status_for_this_flow_": {
                                          "runAfter": {
                                              "Set_error_message_of_API": [
                                                  "Succeeded"
                                              ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                              "name": "Flow1SkipStatus",
                                              "value": "@true"
                                          }
                                      },
                                      "Set_error_message_of_API": {
                                          "runAfter": {},
                                          "type": "SetVariable",
                                          "inputs": {
                                              "name": "ErrorMessage1",
                                              "value": "@{body('Create_Snapshot_for_evidence')?['errors'][0]?['message']}"
                                          }
                                      }
                                  },
                                  "runAfter": {},
                                  "else": {
                                      "actions": {
                                          "Has_snapshot_creation_started": {
                                              "actions": {
                                                  "Is_the_snapshot_created_successfully": {
                                                      "actions": {
                                                          "Set_variable_2_error_message_": {
                                                              "runAfter": {},
                                                              "type": "SetVariable",
                                                              "inputs": {
                                                                  "name": "ErrorMessage1",
                                                                  "value": "Snapshot Crested successfully"
                                                              }
                                                          },
                                                          "Set_variable_skip_flow": {
                                                              "runAfter": {
                                                                  "Set_variable_2_error_message_": [
                                                                      "Succeeded"
                                                                  ]
                                                              },
                                                              "type": "SetVariable",
                                                              "inputs": {
                                                                  "name": "Flow1SkipStatus",
                                                                  "value": "@true"
                                                              }
                                                          }
                                                      },
                                                      "runAfter": {
                                                          "Parse_response_of_RubrikPollAsyncResult": [
                                                              "Succeeded"
                                                          ]
                                                      },
                                                      "else": {
                                                          "actions": {
                                                              "set_error_message_if_RUNNING_or_else_condition": {
                                                                  "actions": {
                                                                      "Set_error_message_for_RUNNING_condition": {
                                                                          "runAfter": {},
                                                                          "type": "SetVariable",
                                                                          "inputs": {
                                                                              "name": "ErrorMessage1",
                                                                              "value": "Wait for evidence snapshot creation results timed out. Please see incident context for further details."
                                                                          }
                                                                      },
                                                                      "Set_variable_30": {
                                                                          "runAfter": {
                                                                              "Set_error_message_for_RUNNING_condition": [
                                                                                  "Succeeded"
                                                                              ]
                                                                          },
                                                                          "type": "SetVariable",
                                                                          "inputs": {
                                                                              "name": "Flow1SkipStatus",
                                                                              "value": "@true"
                                                                          }
                                                                      }
                                                                  },
                                                                  "runAfter": {},
                                                                  "else": {
                                                                      "actions": {
                                                                          "Set_error_message_for_else_condition": {
                                                                              "runAfter": {},
                                                                              "type": "SetVariable",
                                                                              "inputs": {
                                                                                  "name": "ErrorMessage1",
                                                                                  "value": "Evidence snapshot was not created. Please see context for more details."
                                                                              }
                                                                          },
                                                                          "Set_variable_31": {
                                                                              "runAfter": {
                                                                                  "Set_error_message_for_else_condition": [
                                                                                      "Succeeded"
                                                                                  ]
                                                                              },
                                                                              "type": "SetVariable",
                                                                              "inputs": {
                                                                                  "name": "Flow1SkipStatus",
                                                                                  "value": "@true"
                                                                              }
                                                                          }
                                                                      }
                                                                  },
                                                                  "expression": {
                                                                      "and": [
                                                                          {
                                                                              "equals": [
                                                                                  "@body('Parse_response_of_RubrikPollAsyncResult')?['data']?['vSphereVMAsyncRequestStatus']?['status']",
                                                                                  "RUNNING"
                                                                              ]
                                                                          }
                                                                      ]
                                                                  },
                                                                  "type": "If"
                                                              }
                                                          }
                                                      },
                                                      "expression": {
                                                          "and": [
                                                              {
                                                                  "equals": [
                                                                      "@body('Parse_response_of_RubrikPollAsyncResult')?['status']",
                                                                      "SUCCEEDED"
                                                                  ]
                                                              }
                                                          ]
                                                      },
                                                      "type": "If"
                                                  },
                                                  "Parse_response_of_RubrikPollAsyncResult": {
                                                      "runAfter": {
                                                          "RubrikPollAsyncResult_3": [
                                                              "Succeeded"
                                                          ]
                                                      },
                                                      "type": "ParseJson",
                                                      "inputs": {
                                                          "content": "@body('RubrikPollAsyncResult_3')",
                                                          "schema": {
                                                              "properties": {
                                                                  "__typename": {
                                                                      "type": "string"
                                                                  },
                                                                  "id": {
                                                                      "type": "string"
                                                                  },
                                                                  "links": {
                                                                      "items": {
                                                                          "properties": {
                                                                              "href": {
                                                                                  "type": "string"
                                                                              },
                                                                              "rel": {
                                                                                  "type": "string"
                                                                              }
                                                                          },
                                                                          "required": [
                                                                              "href",
                                                                              "rel"
                                                                          ],
                                                                          "type": "object"
                                                                      },
                                                                      "type": "array"
                                                                  },
                                                                  "status": {
                                                                      "type": "string"
                                                                  }
                                                              },
                                                              "type": "object"
                                                          }
                                                      }
                                                  },
                                                  "RubrikPollAsyncResult_3": {
                                                      "runAfter": {},
                                                      "type": "Workflow",
                                                      "inputs": {
                                                          "body": {
                                                              "BaseUrl": "@triggerBody()?['BaseUrl']",
                                                              "ClusterId": "@triggerBody()?['ClusterId']",
                                                              "PollingInterval": 4,
                                                              "PollingTimeout": 720,
                                                              "RequestId": "@body('Parse_Response_of_Create_Snapshot_for_evidence')?['data']?['vsphereOnDemandSnapshot']?['id']"
                                                          },
                                                          "headers": {
                                                              "Content-Type": "application/json"
                                                          },
                                                          "host": {
                                                              "triggerName": "manual",
                                                              "workflow": {
                                                                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult')]"
                                                              }
                                                          }
                                                      }
                                                  },
                                                  "Set_Error_message_if_poll_async_gets_failed": {
                                                      "runAfter": {
                                                          "RubrikPollAsyncResult_3": [
                                                              "Skipped",
                                                              "Failed",
                                                              "TimedOut"
                                                          ]
                                                      },
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                          "name": "ErrorMessage1",
                                                          "value": "Error in Rubrik Poll Async Result Playbook"
                                                      }
                                                  }
                                              },
                                              "runAfter": {
                                                  "Parse_Response_of_Create_Snapshot_for_evidence": [
                                                      "Succeeded"
                                                  ]
                                              },
                                              "else": {
                                                  "actions": {
                                                      "Set_Errormessage": {
                                                          "runAfter": {},
                                                          "type": "SetVariable",
                                                          "inputs": {
                                                              "name": "ErrorMessage1",
                                                              "value": "Evidence snapshot was not created. Please see context for more details."
                                                          }
                                                      },
                                                      "Set_variable_28": {
                                                          "runAfter": {
                                                              "Set_Errormessage": [
                                                                  "Succeeded"
                                                              ]
                                                          },
                                                          "type": "SetVariable",
                                                          "inputs": {
                                                              "name": "Flow1SkipStatus",
                                                              "value": "@true"
                                                          }
                                                      }
                                                  }
                                              },
                                              "expression": {
                                                  "and": [
                                                      {
                                                          "not": {
                                                              "equals": [
                                                                  "@body('Parse_Response_of_Create_Snapshot_for_evidence')?['data']?['vsphereOnDemandSnapshot']?['id']",
                                                                  "@null"
                                                              ]
                                                          }
                                                      }
                                                  ]
                                              },
                                              "type": "If"
                                          },
                                          "Parse_Response_of_Create_Snapshot_for_evidence": {
                                              "runAfter": {},
                                              "type": "ParseJson",
                                              "inputs": {
                                                  "content": "@body('Create_Snapshot_for_evidence')",
                                                  "schema": {
                                                      "properties": {
                                                          "data": {
                                                              "properties": {
                                                                  "vsphereOnDemandSnapshot": {
                                                                      "properties": {
                                                                          "id": {
                                                                              "type": "string"
                                                                          },
                                                                          "status": {
                                                                              "type": "string"
                                                                          }
                                                                      },
                                                                      "type": "object"
                                                                  }
                                                              },
                                                              "type": "object"
                                                          }
                                                      },
                                                      "type": "object"
                                                  }
                                              }
                                          }
                                      }
                                  },
                                  "expression": {
                                      "and": [
                                          {
                                              "contains": [
                                                  "@body('Create_Snapshot_for_evidence')",
                                                  "errors"
                                              ]
                                          }
                                      ]
                                  },
                                  "type": "If"
                              }
                          },
                          "runAfter": {
                              "Create_Snapshot_for_evidence": [
                                  "Succeeded",
                                  "Failed"
                              ]
                          },
                          "else": {
                              "actions": {
                                  "Set_error_message_on_failed_status_of_create_snapshot_for_evidence": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                          "name": "ErrorMessage1",
                                          "value": "No snapshots created for evidence."
                                      }
                                  },
                                  "Set_skip_status_for_this_flow": {
                                      "runAfter": {
                                          "Set_error_message_on_failed_status_of_create_snapshot_for_evidence": [
                                              "Succeeded"
                                          ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                          "name": "Flow1SkipStatus",
                                          "value": "@true"
                                      }
                                  }
                              }
                          },
                          "expression": {
                              "and": [
                                  {
                                      "equals": [
                                          "@outputs('Create_Snapshot_for_evidence')?['statusCode']",
                                          200
                                      ]
                                  }
                              ]
                          },
                          "type": "If"
                      },
                      "Flow_1_Skip_Status": {
                          "runAfter": {
                              "access_token": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "Flow1SkipStatus",
                                      "type": "boolean",
                                      "value": "@false"
                                  }
                              ]
                          }
                      },
                      "Flow_2_Skip_Status": {
                          "runAfter": {
                              "Flow_1_Skip_Status": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "Flow2SkipStatus",
                                      "type": "boolean",
                                      "value": "@false"
                                  }
                              ]
                          }
                      },
                      "Get_VM_metadata": {
                          "runAfter": {
                              "Flow_2_Skip_Status": [
                                  "Succeeded"
                              ]
                          },
                          "type": "Http",
                          "inputs": {
                              "body": {
                                  "query": "query VSphereDetailQuery($id: UUID!) {\r\n  vSphereDetailData: vSphereVmNew(fid: $id) {\r\n    id\r\n    authorizedOperations\r\n    name\r\n    isRelic\r\n    effectiveSlaDomain {\r\n      ...EffectiveSLADomainFragment\r\n      __typename\r\n    }\r\n    effectiveSlaSourceObject {\r\n      fid\r\n      name\r\n      objectType\r\n      __typename\r\n    }\r\n    pendingSla {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    protectionDate\r\n    reportWorkload {\r\n      id\r\n      logicalBytes\r\n      physicalBytes\r\n      archiveStorage\r\n      __typename\r\n    }\r\n    cluster {\r\n      id\r\n      name\r\n      status\r\n      version\r\n      lastConnectionTime\r\n      defaultAddress\r\n      ...ClusterNodeConnectionFragment\r\n      ...ClusterStateFragment\r\n      ...ClusterGlobalManagerFragment\r\n      __typename\r\n    }\r\n    primaryClusterLocation {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    arrayIntegrationEnabled\r\n    snapshotConsistencyMandate\r\n    agentStatus {\r\n      agentStatus\r\n      __typename\r\n    }\r\n    preBackupScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    postBackupScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    postSnapScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    logicalPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    physicalPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    vsphereTagPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    oldestSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      __typename\r\n    }\r\n    totalSnapshots: snapshotConnection {\r\n      count\r\n      __typename\r\n    }\r\n    replicatedObjects {\r\n      id\r\n      primaryClusterLocation {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      cluster {\r\n        name\r\n        id\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestArchivedSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      archivalLocations {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestReplicatedSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      replicationLocations {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      __typename\r\n    }\r\n    onDemandSnapshotCount\r\n    vmwareToolsInstalled\r\n    cdmLink\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment EffectiveSLADomainFragment on SlaDomain {\r\n  id\r\n  name\r\n  ... on ClusterSlaDomain {\r\n    fid\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterNodeConnectionFragment on Cluster {\r\n  clusterNodeConnection {\r\n    nodes {\r\n      id\r\n      status\r\n      ipAddress\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterStateFragment on Cluster {\r\n  state {\r\n    connectedState\r\n    clusterRemovalState\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterGlobalManagerFragment on Cluster {\r\n  passesConnectivityCheck\r\n  globalManagerConnectivityStatus {\r\n    urls {\r\n      url\r\n      isReachable\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  connectivityLastUpdated\r\n  __typename\r\n}",
                                  "variables": {
                                      "id": "@{triggerBody()?['ObjectId']}"
                                  }
                              },
                              "headers": {
                                  "Authorization": "Bearer @{variables('access_token')}",
                                  "Content-Type": "application/json"
                              },
                              "method": "POST",
                              "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                          }
                      },
                      "Incident_Time": {
                          "runAfter": {
                              "ObjectName": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "IncidentTime",
                                      "type": "string",
                                      "value": "@{triggerBody()?['IncidentTime']}"
                                  }
                              ]
                          }
                      },
                      "Initialize_DatastoreId": {
                          "runAfter": {
                              "Initialize_HostId": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "DatastoreId",
                                      "type": "string"
                                  }
                              ]
                          }
                      },
                      "Initialize_Error_Message_for_flow_Start_IOC_Scan": {
                          "runAfter": {
                              "Initialize_Error_Message_for_flow_of_creating_snapshot": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "ErrorMessage",
                                      "type": "string"
                                  }
                              ]
                          }
                      },
                      "Initialize_Error_Message_for_flow_of_creating_snapshot": {
                          "runAfter": {
                              "Cluster_Name": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "ErrorMessage1",
                                      "type": "string"
                                  }
                              ]
                          }
                      },
                      "Initialize_Esxi_ClusterId": {
                          "runAfter": {
                              "Initialize_DatastoreId": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "EsxiClusterId",
                                      "type": "string"
                                  }
                              ]
                          }
                      },
                      "Initialize_HostId": {
                          "runAfter": {
                              "Parse_Response_of_Get_VM_metadata": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "HostId",
                                      "type": "string"
                                  }
                              ]
                          }
                      },
                      "Initialize_polling_timeout_for_ioc_scan": {
                          "runAfter": {
                              "Collect_IOC_scan_and_general_recovery_data": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "Polling Timeout",
                                      "type": "integer",
                                      "value": "@if(empty(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling timeout for IOC Scan']),0,int(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling timeout for IOC Scan']))"
                                  }
                              ]
                          }
                      },
                      "Initialize_yara_Rule": {
                          "runAfter": {
                              "Initialize_polling_timeout_for_ioc_scan": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "Yara Rule",
                                      "type": "string",
                                      "value": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc Yara rule to scan for']"
                                  }
                              ]
                          }
                      },
                      "Is_Authentication_Failed": {
                          "actions": {
                              "Response_3": {
                                  "runAfter": {
                                      "Set_Error_Message_2": [
                                          "Succeeded"
                                      ]
                                  },
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                      "body": "@body('Authentication')?['message']",
                                      "statusCode": "@body('Authentication')?['code']"
                                  }
                              },
                              "Set_Error_Message_2": {
                                  "runAfter": {},
                                  "type": "SetVariable",
                                  "inputs": {
                                      "name": "ErrorMessage",
                                      "value": "Status Code:  @{body('Authentication')?['code']} , Error message:  @{body('Authentication')?['message']}"
                                  }
                              },
                              "Terminate_2": {
                                  "runAfter": {
                                      "Response_3": [
                                          "Succeeded"
                                      ]
                                  },
                                  "type": "Terminate",
                                  "inputs": {
                                      "runError": {
                                          "code": "@{body('Authentication')?['code']}",
                                          "message": "@{body('Authentication')?['message']}"
                                      },
                                      "runStatus": "Failed"
                                  }
                              }
                          },
                          "runAfter": {
                              "Authentication": [
                                  "Succeeded",
                                  "Failed"
                              ]
                          },
                          "expression": {
                              "and": [
                                  {
                                      "not": {
                                          "equals": [
                                              "@outputs('Authentication')['statusCode']",
                                              200
                                          ]
                                      }
                                  }
                              ]
                          },
                          "type": "If"
                      },
                      "Is_IOC_Scan_successful_(check_for_ERROR)": {
                          "actions": {
                              "Set_variable_5": {
                                  "runAfter": {},
                                  "type": "SetVariable",
                                  "inputs": {
                                      "name": "ErrorMessage",
                                      "value": "There was an error while running the IOC scan. Please see incident context for further details."
                                  }
                              }
                          },
                          "runAfter": {
                              "Response_RubrikIOCScan": [
                                  "Succeeded"
                              ]
                          },
                          "expression": {
                              "and": [
                                  {
                                      "contains": [
                                          "@body('Response_RubrikIOCScan')?['RadarIOCScanStatus']",
                                          "ERROR"
                                      ]
                                  }
                              ]
                          },
                          "type": "If"
                      },
                      "Is_IOC_Scan_successful_(check_for_FINISHED)": {
                          "actions": {
                              "Whether_to_perform_recovery": {
                                  "actions": {
                                      "Is_the_latest_snapshot_infected": {
                                          "actions": {
                                              "Are_there_any_recoverable_snapshots": {
                                                  "actions": {
                                                      "Default_value_of_HostId_and_Esxi_ClusterId": {
                                                          "foreach": "@body('Parse_response_of_Get_HostID')?['data']?['vSphereDetailData']?['physicalPath']",
                                                          "actions": {
                                                              "Check_for_Cluster_ObjectType": {
                                                                  "actions": {
                                                                      "Set_Default_value_of_Esxi_ClusterId": {
                                                                          "runAfter": {},
                                                                          "type": "SetVariable",
                                                                          "inputs": {
                                                                              "name": "EsxiClusterId",
                                                                              "value": "@items('Default_value_of_HostId_and_Esxi_ClusterId')?['fid']"
                                                                          }
                                                                      }
                                                                  },
                                                                  "runAfter": {
                                                                      "Check_for_Host_ObjectType": [
                                                                          "Succeeded"
                                                                      ]
                                                                  },
                                                                  "expression": {
                                                                      "and": [
                                                                          {
                                                                              "equals": [
                                                                                  "@items('Default_value_of_HostId_and_Esxi_ClusterId')?['objectType']",
                                                                                  "VSphereComputeCluster"
                                                                              ]
                                                                          }
                                                                      ]
                                                                  },
                                                                  "type": "If"
                                                              },
                                                              "Check_for_Host_ObjectType": {
                                                                  "actions": {
                                                                      "Set_Default_value_of_HostId": {
                                                                          "runAfter": {},
                                                                          "type": "SetVariable",
                                                                          "inputs": {
                                                                              "name": "HostId",
                                                                              "value": "@items('Default_value_of_HostId_and_Esxi_ClusterId')?['fid']"
                                                                          }
                                                                      }
                                                                  },
                                                                  "runAfter": {},
                                                                  "expression": {
                                                                      "and": [
                                                                          {
                                                                              "equals": [
                                                                                  "@items('Default_value_of_HostId_and_Esxi_ClusterId')?['objectType']",
                                                                                  "VSphereHost"
                                                                              ]
                                                                          }
                                                                      ]
                                                                  },
                                                                  "type": "If"
                                                              }
                                                          },
                                                          "runAfter": {
                                                              "Parse_response_of_Get_HostID": [
                                                                  "Succeeded"
                                                              ]
                                                          },
                                                          "type": "Foreach"
                                                      },
                                                      "Get_HostID": {
                                                          "runAfter": {},
                                                          "type": "Http",
                                                          "inputs": {
                                                              "body": {
                                                                  "query": "query VSphereDetailQuery($id: UUID!) {\r\n  vSphereDetailData: vSphereVmNew(fid: $id) {\r\n    id\r\n    authorizedOperations\r\n    name\r\n    isRelic\r\n    effectiveSlaDomain {\r\n      ...EffectiveSLADomainFragment\r\n      __typename\r\n    }\r\n    effectiveSlaSourceObject {\r\n      fid\r\n      name\r\n      objectType\r\n      __typename\r\n    }\r\n    pendingSla {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    protectionDate\r\n    reportWorkload {\r\n      id\r\n      logicalBytes\r\n      physicalBytes\r\n      archiveStorage\r\n      __typename\r\n    }\r\n    cluster {\r\n      id\r\n      name\r\n      status\r\n      version\r\n      lastConnectionTime\r\n      defaultAddress\r\n      ...ClusterNodeConnectionFragment\r\n      ...ClusterStateFragment\r\n      ...ClusterGlobalManagerFragment\r\n      __typename\r\n    }\r\n    primaryClusterLocation {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    arrayIntegrationEnabled\r\n    snapshotConsistencyMandate\r\n    agentStatus {\r\n      agentStatus\r\n      __typename\r\n    }\r\n    preBackupScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    postBackupScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    postSnapScript {\r\n      scriptPath\r\n      failureHandling\r\n      timeoutMs\r\n      __typename\r\n    }\r\n    logicalPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    physicalPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    vsphereTagPath {\r\n      fid\r\n      objectType\r\n      name\r\n      __typename\r\n    }\r\n    oldestSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      __typename\r\n    }\r\n    totalSnapshots: snapshotConnection {\r\n      count\r\n      __typename\r\n    }\r\n    replicatedObjects {\r\n      id\r\n      primaryClusterLocation {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      cluster {\r\n        name\r\n        id\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestArchivedSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      archivalLocations {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestReplicatedSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      replicationLocations {\r\n        id\r\n        name\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    newestSnapshot {\r\n      id\r\n      date\r\n      isIndexed\r\n      __typename\r\n    }\r\n    onDemandSnapshotCount\r\n    vmwareToolsInstalled\r\n    cdmLink\r\n    __typename\r\n  }\r\n}\r\n\r\nfragment EffectiveSLADomainFragment on SlaDomain {\r\n  id\r\n  name\r\n  ... on ClusterSlaDomain {\r\n    fid\r\n    cluster {\r\n      id\r\n      name\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterNodeConnectionFragment on Cluster {\r\n  clusterNodeConnection {\r\n    nodes {\r\n      id\r\n      status\r\n      ipAddress\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterStateFragment on Cluster {\r\n  state {\r\n    connectedState\r\n    clusterRemovalState\r\n    __typename\r\n  }\r\n  __typename\r\n}\r\n\r\nfragment ClusterGlobalManagerFragment on Cluster {\r\n  passesConnectivityCheck\r\n  globalManagerConnectivityStatus {\r\n    urls {\r\n      url\r\n      isReachable\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n  connectivityLastUpdated\r\n  __typename\r\n}",
                                                                  "variables": {
                                                                      "id": "@{triggerBody()?['ObjectId']}"
                                                                  }
                                                              },
                                                              "headers": {
                                                                  "Authorization": "Bearer @{variables('access_token')}",
                                                                  "Content-Type": "application/json"
                                                              },
                                                              "method": "POST",
                                                              "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                                          }
                                                      },
                                                      "Get_HostID_contains_200_statuscode": {
                                                          "actions": {},
                                                          "runAfter": {
                                                              "Get_HostID": [
                                                                  "Succeeded",
                                                                  "Failed"
                                                              ]
                                                          },
                                                          "else": {
                                                              "actions": {
                                                                  "Response_4": {
                                                                      "runAfter": {
                                                                          "Set_Error_from_GetHostID": [
                                                                              "Succeeded"
                                                                          ]
                                                                      },
                                                                      "type": "Response",
                                                                      "kind": "Http",
                                                                      "inputs": {
                                                                          "body": "@body('Get_HostID')?['message']",
                                                                          "statusCode": "@outputs('Get_HostID')['statusCode']"
                                                                      }
                                                                  },
                                                                  "Set_Error_from_GetHostID": {
                                                                      "runAfter": {},
                                                                      "type": "SetVariable",
                                                                      "inputs": {
                                                                          "name": "ErrorMessage",
                                                                          "value": "Status Code : @{outputs('Get_HostID')['statusCode']}, message: @{body('Get_HostID')?['message']}"
                                                                      }
                                                                  },
                                                                  "Terminate_8": {
                                                                      "runAfter": {
                                                                          "Response_4": [
                                                                              "Succeeded"
                                                                          ]
                                                                      },
                                                                      "type": "Terminate",
                                                                      "inputs": {
                                                                          "runError": {
                                                                              "code": "@{outputs('Get_HostID')['statusCode']}",
                                                                              "message": "@{body('Get_HostID')?['message']}"
                                                                          },
                                                                          "runStatus": "Failed"
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "expression": {
                                                              "and": [
                                                                  {
                                                                      "equals": [
                                                                          "@outputs('Get_HostID')['statusCode']",
                                                                          200
                                                                      ]
                                                                  }
                                                              ]
                                                          },
                                                          "type": "If"
                                                      },
                                                      "Has_recovery_started": {
                                                          "actions": {
                                                              "Is_recovery_successfully_completed": {
                                                                  "actions": {
                                                                      "Response_13": {
                                                                          "runAfter": {},
                                                                          "type": "Response",
                                                                          "kind": "Http",
                                                                          "inputs": {
                                                                              "body": "Recovery successfully completed.",
                                                                              "statusCode": 200
                                                                          }
                                                                      },
                                                                      "Terminate_3": {
                                                                          "runAfter": {
                                                                              "Response_13": [
                                                                                  "Succeeded"
                                                                              ]
                                                                          },
                                                                          "type": "Terminate",
                                                                          "inputs": {
                                                                              "runStatus": "Succeeded"
                                                                          }
                                                                      }
                                                                  },
                                                                  "runAfter": {
                                                                      "RubrikPollAsyncResult_2": [
                                                                          "Succeeded",
                                                                          "Failed"
                                                                      ]
                                                                  },
                                                                  "else": {
                                                                      "actions": {
                                                                          "Response_14": {
                                                                              "runAfter": {
                                                                                  "Set_Error_in_Recovery_Poll_Async": [
                                                                                      "Succeeded"
                                                                                  ]
                                                                              },
                                                                              "type": "Response",
                                                                              "kind": "Http",
                                                                              "inputs": {
                                                                                  "body": "@body('RubrikPollAsyncResult_2')?['error']?['message']",
                                                                                  "statusCode": 200
                                                                              }
                                                                          },
                                                                          "Set_Error_in_Recovery_Poll_Async": {
                                                                              "runAfter": {},
                                                                              "type": "SetVariable",
                                                                              "inputs": {
                                                                                  "name": "ErrorMessage",
                                                                                  "value": "@{body('RubrikPollAsyncResult_2')?['error']?['message']}"
                                                                              }
                                                                          },
                                                                          "Terminate_17": {
                                                                              "runAfter": {
                                                                                  "Response_14": [
                                                                                      "Succeeded"
                                                                                  ]
                                                                              },
                                                                              "type": "Terminate",
                                                                              "inputs": {
                                                                                  "runError": {
                                                                                      "code": "400",
                                                                                      "message": "@variables('ErrorMessage')"
                                                                                  },
                                                                                  "runStatus": "Failed"
                                                                              }
                                                                          }
                                                                      }
                                                                  },
                                                                  "expression": {
                                                                      "and": [
                                                                          {
                                                                              "equals": [
                                                                                  "@body('RubrikPollAsyncResult_2')?['status']",
                                                                                  "SUCCEEDED"
                                                                              ]
                                                                          }
                                                                      ]
                                                                  },
                                                                  "type": "If"
                                                              },
                                                              "RubrikPollAsyncResult_2": {
                                                                  "runAfter": {},
                                                                  "type": "Workflow",
                                                                  "inputs": {
                                                                      "body": {
                                                                          "BaseUrl": "@triggerBody()?['BaseUrl']",
                                                                          "ClusterId": "@triggerBody()?['ClusterId']",
                                                                          "PollingInterval": "@if(or(empty(string(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for recovery'])),lessOrEquals(int(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for recovery']),0)),5,int(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for recovery']))",
                                                                          "PollingTimeout": "@variables('Polling Timeout')",
                                                                          "RequestId": "@{if(empty(body('Parse_Response_of_Live-Mount_recovered_snapshot')?['data']?['vSphereVMInitiateLiveMountV2']?['id']),body('Parse_JSON')?['data']?['vSphereVMExportSnapshotV2']?['id'],body('Parse_Response_of_Live-Mount_recovered_snapshot')?['data']?['vSphereVMInitiateLiveMountV2']?['id'])}"
                                                                      },
                                                                      "host": {
                                                                          "triggerName": "manual",
                                                                          "workflow": {
                                                                               "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult')]"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "runAfter": {
                                                              "Which_recovery_to_perform": [
                                                                  "Succeeded"
                                                              ]
                                                          },
                                                          "else": {
                                                              "actions": {
                                                                  "Response_11": {
                                                                      "runAfter": {},
                                                                      "type": "Response",
                                                                      "kind": "Http",
                                                                      "inputs": {
                                                                          "body": "Recovery Not Started.",
                                                                          "statusCode": 400
                                                                      }
                                                                  },
                                                                  "Terminate_5": {
                                                                      "runAfter": {
                                                                          "Response_11": [
                                                                              "Succeeded"
                                                                          ]
                                                                      },
                                                                      "type": "Terminate",
                                                                      "inputs": {
                                                                          "runError": {
                                                                              "message": "Recovery Not Started."
                                                                          },
                                                                          "runStatus": "Failed"
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "expression": {
                                                              "or": [
                                                                  {
                                                                      "not": {
                                                                          "equals": [
                                                                              "@body('Live-Mount_recovered_snapshot')?['data']",
                                                                              "@null"
                                                                          ]
                                                                      }
                                                                  },
                                                                  {
                                                                      "not": {
                                                                          "equals": [
                                                                              "@body('Export_recovered_snapshot')?['data']",
                                                                              "@null"
                                                                          ]
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          "type": "If"
                                                      },
                                                      "Parse_response_of_Get_HostID": {
                                                          "runAfter": {
                                                              "Get_HostID_contains_200_statuscode": [
                                                                  "Succeeded"
                                                              ]
                                                          },
                                                          "type": "ParseJson",
                                                          "inputs": {
                                                              "content": "@body('Get_HostID')",
                                                              "schema": {
                                                                  "properties": {
                                                                      "data": {
                                                                          "properties": {
                                                                              "vSphereDetailData": {
                                                                                  "properties": {
                                                                                      "__typename": {
                                                                                          "type": "string"
                                                                                      },
                                                                                      "agentStatus": {
                                                                                          "properties": {
                                                                                              "__typename": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "agentStatus": {
                                                                                                  "type": "string"
                                                                                              }
                                                                                          },
                                                                                          "type": "object"
                                                                                      },
                                                                                      "arrayIntegrationEnabled": {
                                                                                          "type": "boolean"
                                                                                      },
                                                                                      "authorizedOperations": {
                                                                                          "items": {
                                                                                              "type": "string"
                                                                                          },
                                                                                          "type": "array"
                                                                                      },
                                                                                      "cdmLink": {
                                                                                          "type": "string"
                                                                                      },
                                                                                      "cluster": {
                                                                                          "properties": {
                                                                                              "__typename": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "clusterNodeConnection": {
                                                                                                  "properties": {
                                                                                                      "__typename": {
                                                                                                          "type": "string"
                                                                                                      },
                                                                                                      "nodes": {
                                                                                                          "items": {
                                                                                                              "properties": {
                                                                                                                  "__typename": {
                                                                                                                      "type": "string"
                                                                                                                  },
                                                                                                                  "id": {
                                                                                                                      "type": "string"
                                                                                                                  },
                                                                                                                  "ipAddress": {
                                                                                                                      "type": "string"
                                                                                                                  },
                                                                                                                  "status": {
                                                                                                                      "type": "string"
                                                                                                                  }
                                                                                                              },
                                                                                                              "required": [
                                                                                                                  "id",
                                                                                                                  "status",
                                                                                                                  "ipAddress",
                                                                                                                  "__typename"
                                                                                                              ],
                                                                                                              "type": "object"
                                                                                                          },
                                                                                                          "type": "array"
                                                                                                      }
                                                                                                  },
                                                                                                  "type": "object"
                                                                                              },
                                                                                              "connectivityLastUpdated": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "globalManagerConnectivityStatus": {
                                                                                                  "properties": {
                                                                                                      "__typename": {
                                                                                                          "type": "string"
                                                                                                      },
                                                                                                      "urls": {
                                                                                                          "items": {
                                                                                                              "properties": {
                                                                                                                  "__typename": {
                                                                                                                      "type": "string"
                                                                                                                  },
                                                                                                                  "isReachable": {
                                                                                                                      "type": "boolean"
                                                                                                                  },
                                                                                                                  "url": {
                                                                                                                      "type": "string"
                                                                                                                  }
                                                                                                              },
                                                                                                              "required": [
                                                                                                                  "url",
                                                                                                                  "isReachable",
                                                                                                                  "__typename"
                                                                                                              ],
                                                                                                              "type": "object"
                                                                                                          },
                                                                                                          "type": "array"
                                                                                                      }
                                                                                                  },
                                                                                                  "type": "object"
                                                                                              },
                                                                                              "id": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "lastConnectionTime": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "name": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "passesConnectivityCheck": {
                                                                                                  "type": "boolean"
                                                                                              },
                                                                                              "state": {
                                                                                                  "properties": {
                                                                                                      "__typename": {
                                                                                                          "type": "string"
                                                                                                      },
                                                                                                      "clusterRemovalState": {
                                                                                                          "type": "string"
                                                                                                      },
                                                                                                      "connectedState": {
                                                                                                          "type": "string"
                                                                                                      }
                                                                                                  },
                                                                                                  "type": "object"
                                                                                              },
                                                                                              "status": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "version": {
                                                                                                  "type": "string"
                                                                                              }
                                                                                          },
                                                                                          "type": "object"
                                                                                      },
                                                                                      "effectiveSlaDomain": {
                                                                                          "properties": {
                                                                                              "__typename": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "cluster": {
                                                                                                  "properties": {
                                                                                                      "__typename": {
                                                                                                          "type": "string"
                                                                                                      },
                                                                                                      "id": {
                                                                                                          "type": "string"
                                                                                                      },
                                                                                                      "name": {
                                                                                                          "type": "string"
                                                                                                      }
                                                                                                  },
                                                                                                  "type": "object"
                                                                                              },
                                                                                              "fid": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "id": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "name": {
                                                                                                  "type": "string"
                                                                                              }
                                                                                          },
                                                                                          "type": "object"
                                                                                      },
                                                                                      "effectiveSlaSourceObject": {
                                                                                          "properties": {
                                                                                              "__typename": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "fid": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "name": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "objectType": {
                                                                                                  "type": "string"
                                                                                              }
                                                                                          },
                                                                                          "type": "object"
                                                                                      },
                                                                                      "id": {
                                                                                          "type": "string"
                                                                                      },
                                                                                      "isRelic": {
                                                                                          "type": "boolean"
                                                                                      },
                                                                                      "logicalPath": {
                                                                                          "items": {
                                                                                              "properties": {
                                                                                                  "__typename": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "fid": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "name": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "objectType": {
                                                                                                      "type": "string"
                                                                                                  }
                                                                                              },
                                                                                              "required": [
                                                                                                  "fid",
                                                                                                  "objectType",
                                                                                                  "name",
                                                                                                  "__typename"
                                                                                              ],
                                                                                              "type": "object"
                                                                                          },
                                                                                          "type": "array"
                                                                                      },
                                                                                      "name": {
                                                                                          "type": "string"
                                                                                      },
                                                                                      "newestSnapshot": {
                                                                                          "properties": {
                                                                                              "__typename": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "date": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "id": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "isIndexed": {
                                                                                                  "type": "boolean"
                                                                                              }
                                                                                          },
                                                                                          "type": "object"
                                                                                      },
                                                                                      "oldestSnapshot": {
                                                                                          "properties": {
                                                                                              "__typename": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "date": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "id": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "isIndexed": {
                                                                                                  "type": "boolean"
                                                                                              }
                                                                                          },
                                                                                          "type": "object"
                                                                                      },
                                                                                      "onDemandSnapshotCount": {
                                                                                          "type": "integer"
                                                                                      },
                                                                                      "physicalPath": {
                                                                                          "items": {
                                                                                              "properties": {
                                                                                                  "__typename": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "fid": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "name": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "objectType": {
                                                                                                      "type": "string"
                                                                                                  }
                                                                                              },
                                                                                              "required": [
                                                                                                  "fid",
                                                                                                  "objectType",
                                                                                                  "name",
                                                                                                  "__typename"
                                                                                              ],
                                                                                              "type": "object"
                                                                                          },
                                                                                          "type": "array"
                                                                                      },
                                                                                      "primaryClusterLocation": {
                                                                                          "properties": {
                                                                                              "__typename": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "id": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "name": {
                                                                                                  "type": "string"
                                                                                              }
                                                                                          },
                                                                                          "type": "object"
                                                                                      },
                                                                                      "protectionDate": {
                                                                                          "type": "string"
                                                                                      },
                                                                                      "replicatedObjects": {
                                                                                          "items": {
                                                                                              "properties": {
                                                                                                  "__typename": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "cluster": {
                                                                                                      "properties": {
                                                                                                          "__typename": {
                                                                                                              "type": "string"
                                                                                                          },
                                                                                                          "id": {
                                                                                                              "type": "string"
                                                                                                          },
                                                                                                          "name": {
                                                                                                              "type": "string"
                                                                                                          }
                                                                                                      },
                                                                                                      "type": "object"
                                                                                                  },
                                                                                                  "id": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "primaryClusterLocation": {
                                                                                                      "properties": {
                                                                                                          "__typename": {
                                                                                                              "type": "string"
                                                                                                          },
                                                                                                          "id": {
                                                                                                              "type": "string"
                                                                                                          },
                                                                                                          "name": {
                                                                                                              "type": "string"
                                                                                                          }
                                                                                                      },
                                                                                                      "type": "object"
                                                                                                  }
                                                                                              },
                                                                                              "required": [
                                                                                                  "id",
                                                                                                  "primaryClusterLocation",
                                                                                                  "cluster",
                                                                                                  "__typename"
                                                                                              ],
                                                                                              "type": "object"
                                                                                          },
                                                                                          "type": "array"
                                                                                      },
                                                                                      "reportSnappable": {
                                                                                          "properties": {
                                                                                              "__typename": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "archiveStorage": {
                                                                                                  "type": "integer"
                                                                                              },
                                                                                              "id": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "logicalBytes": {
                                                                                                  "type": "integer"
                                                                                              },
                                                                                              "physicalBytes": {
                                                                                                  "type": "integer"
                                                                                              }
                                                                                          },
                                                                                          "type": "object"
                                                                                      },
                                                                                      "snapshotConsistencyMandate": {
                                                                                          "type": "string"
                                                                                      },
                                                                                      "totalSnapshots": {
                                                                                          "properties": {
                                                                                              "__typename": {
                                                                                                  "type": "string"
                                                                                              },
                                                                                              "count": {
                                                                                                  "type": "integer"
                                                                                              }
                                                                                          },
                                                                                          "type": "object"
                                                                                      },
                                                                                      "vmwareToolsInstalled": {
                                                                                          "type": "boolean"
                                                                                      },
                                                                                      "vsphereTagPath": {
                                                                                          "items": {
                                                                                              "properties": {
                                                                                                  "__typename": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "fid": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "name": {
                                                                                                      "type": "string"
                                                                                                  },
                                                                                                  "objectType": {
                                                                                                      "type": "string"
                                                                                                  }
                                                                                              },
                                                                                              "required": [
                                                                                                  "fid",
                                                                                                  "objectType",
                                                                                                  "name",
                                                                                                  "__typename"
                                                                                              ],
                                                                                              "type": "object"
                                                                                          },
                                                                                          "type": "array"
                                                                                      }
                                                                                  },
                                                                                  "type": "object"
                                                                              }
                                                                          },
                                                                          "type": "object"
                                                                      }
                                                                  },
                                                                  "type": "object"
                                                              }
                                                          }
                                                      },
                                                      "Which_recovery_to_perform": {
                                                          "actions": {
                                                              "Collect_recovery_data_for_live-mounting_VM": {
                                                                  "runAfter": {},
                                                                  "type": "ApiConnectionWebhook",
                                                                  "inputs": {
                                                                      "body": {
                                                                          "body": {
                                                                              "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Live-Mount VM data\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate live mounting of a recoverable snapshot.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nIncident Start Time = @{variables('IncidentTime')}\\n\\nCluster Name = @{variables('ClusterName')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Name to search for a Vsphere host that will be used for live mounting\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Name to search for a Vsphere host that will be used for live mounting\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Vsphere datastore name to use for live mounting\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Vsphere datastore name to use for live mounting\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to power on the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"power on the live-mounted VM?\",\n            \"value\": \"False\",\n            \"style\": \"expanded\",\n            \"choices\": [\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                },\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                }\n            ],\n            \"isRequired\": true,\n            \"errorMessage\": \"This field id required\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether mac addresses of network devices be kept on the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"value\": \"True\",\n            \"style\": \"expanded\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\",\n            \"label\": \"required\",\n            \"id\": \"mac addresses of network devices be kept on the live-mounted VM?\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to recover vSphere tags in the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"recover vSphere tags in the live-mounted VM?\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This filed is required\",\n            \"label\": \"required\",\n            \"value\": \"True\",\n            \"style\": \"expanded\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to remove the network devices of the original VM in the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                },\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"remove the network devices of the original VM in the live-mounted VM?\",\n            \"isRequired\": true,\n            \"value\": \"False\",\n            \"errorMessage\": \"This field is required\",\n            \"style\": \"expanded\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to disable networking in the live-mounted VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip7\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"disable networking in the live-mounted VM?\",\n            \"label\": \"required\",\n            \"value\": \"True\",\n            \"style\": \"expanded\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Live-mounted VM name\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip8\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Live-mounted VM name\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                                                                              "recipient": {
                                                                                  "channelId": "[concat('', parameters('TeamsChannelId'))]",
                                                                                  "groupId": "[concat('', parameters('TeamsGroupId'))]"
                                                                              },
                                                                              "updateMessage": "Response saved for Live-mount!"
                                                                          },
                                                                          "notificationUrl": "@{listCallbackUrl()}"
                                                                      },
                                                                      "host": {
                                                                          "connection": {
                                                                              "name": "@parameters('$connections')['teams']['connectionId']"
                                                                          }
                                                                      },
                                                                      "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                                                  }
                                                              },
                                                              "Does_Live-Mount_recovered_snapshot_get_status_code_200": {
                                                                  "actions": {
                                                                      "Does_Live-Mount_recovered_snapshot_API_response_contains_errors": {
                                                                          "actions": {
                                                                              "Response_8": {
                                                                                  "runAfter": {
                                                                                      "Set_Error_in_LiveMount_Recovery_API": [
                                                                                          "Succeeded"
                                                                                      ]
                                                                                  },
                                                                                  "type": "Response",
                                                                                  "kind": "Http",
                                                                                  "inputs": {
                                                                                      "body": "@body('Live-Mount_recovered_snapshot')?['errors'][0]?['message']",
                                                                                      "statusCode": 200
                                                                                  }
                                                                              },
                                                                              "Set_Error_in_LiveMount_Recovery_API": {
                                                                                  "runAfter": {},
                                                                                  "type": "SetVariable",
                                                                                  "inputs": {
                                                                                      "name": "ErrorMessage",
                                                                                      "value": "@{body('Live-Mount_recovered_snapshot')?['errors'][0]?['message']}"
                                                                                  }
                                                                              },
                                                                              "Terminate_10": {
                                                                                  "runAfter": {
                                                                                      "Response_8": [
                                                                                          "Succeeded"
                                                                                      ]
                                                                                  },
                                                                                  "type": "Terminate",
                                                                                  "inputs": {
                                                                                      "runError": {
                                                                                          "message": "@{body('Live-Mount_recovered_snapshot')?['errors'][0]?['message']}"
                                                                                      },
                                                                                      "runStatus": "Failed"
                                                                                  }
                                                                              }
                                                                          },
                                                                          "runAfter": {},
                                                                          "else": {
                                                                              "actions": {
                                                                                  "Parse_Response_of_Live-Mount_recovered_snapshot": {
                                                                                      "runAfter": {},
                                                                                      "type": "ParseJson",
                                                                                      "inputs": {
                                                                                          "content": "@body('Live-Mount_recovered_snapshot')",
                                                                                          "schema": {
                                                                                              "properties": {
                                                                                                  "data": {
                                                                                                      "properties": {
                                                                                                          "vsphereVmInitiateLiveMountV2": {
                                                                                                              "properties": {
                                                                                                                  "__typename": {
                                                                                                                      "type": "string"
                                                                                                                  },
                                                                                                                  "id": {
                                                                                                                      "type": "string"
                                                                                                                  },
                                                                                                                  "status": {
                                                                                                                      "type": "string"
                                                                                                                  }
                                                                                                              },
                                                                                                              "type": "object"
                                                                                                          }
                                                                                                      },
                                                                                                      "type": "object"
                                                                                                  },
                                                                                                  "errors": {
                                                                                                      "items": {
                                                                                                          "properties": {
                                                                                                              "message": {
                                                                                                                  "type": "string"
                                                                                                              }
                                                                                                          },
                                                                                                          "required": [
                                                                                                              "message"
                                                                                                          ],
                                                                                                          "type": "object"
                                                                                                      },
                                                                                                      "type": "array"
                                                                                                  }
                                                                                              },
                                                                                              "type": "object"
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "expression": {
                                                                              "and": [
                                                                                  {
                                                                                      "contains": [
                                                                                          "@body('Live-Mount_recovered_snapshot')",
                                                                                          "errors"
                                                                                      ]
                                                                                  }
                                                                              ]
                                                                          },
                                                                          "type": "If"
                                                                      }
                                                                  },
                                                                  "runAfter": {
                                                                      "Live-Mount_recovered_snapshot": [
                                                                          "Succeeded",
                                                                          "Failed"
                                                                      ]
                                                                  },
                                                                  "else": {
                                                                      "actions": {
                                                                          "Response_5": {
                                                                              "runAfter": {
                                                                                  "Set_Error_in_LiveMount_Recovery": [
                                                                                      "Succeeded"
                                                                                  ]
                                                                              },
                                                                              "type": "Response",
                                                                              "kind": "Http",
                                                                              "inputs": {
                                                                                  "body": "@body('Live-Mount_recovered_snapshot')?['message']",
                                                                                  "statusCode": "@outputs('Live-Mount_recovered_snapshot')['statusCode']"
                                                                              }
                                                                          },
                                                                          "Set_Error_in_LiveMount_Recovery": {
                                                                              "runAfter": {},
                                                                              "type": "SetVariable",
                                                                              "inputs": {
                                                                                  "name": "ErrorMessage",
                                                                                  "value": "Status Code: @{outputs('Live-Mount_recovered_snapshot')['statusCode']}, Error Message: @{body('Live-Mount_recovered_snapshot')?['message']}"
                                                                              }
                                                                          },
                                                                          "Terminate_9": {
                                                                              "runAfter": {
                                                                                  "Response_5": [
                                                                                      "Succeeded"
                                                                                  ]
                                                                              },
                                                                              "type": "Terminate",
                                                                              "inputs": {
                                                                                  "runError": {
                                                                                      "code": "@{outputs('Live-Mount_recovered_snapshot')?['statusCode']}",
                                                                                      "message": "@{body('Live-Mount_recovered_snapshot')?['message']}"
                                                                                  },
                                                                                  "runStatus": "Failed"
                                                                              }
                                                                          }
                                                                      }
                                                                  },
                                                                  "expression": {
                                                                      "and": [
                                                                          {
                                                                              "equals": [
                                                                                  "@outputs('Live-Mount_recovered_snapshot')?['statusCode']",
                                                                                  200
                                                                              ]
                                                                          }
                                                                      ]
                                                                  },
                                                                  "type": "If"
                                                              },
                                                              "Is_Vsphere_host_name_provided": {
                                                                  "actions": {
                                                                      "Does_Get_Vsphere_Host_ID_get_status_code_200": {
                                                                          "actions": {
                                                                              "Check_that_API_response_does_not_contain_any_errors": {
                                                                                  "actions": {
                                                                                      "Set_API_error_Get_hostId_LiveMount": {
                                                                                          "runAfter": {},
                                                                                          "type": "SetVariable",
                                                                                          "inputs": {
                                                                                              "name": "ErrorMessage",
                                                                                              "value": "@{body('Get_Vsphere_Host_ID')?['errors'][0]?['message']}"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "runAfter": {},
                                                                                  "else": {
                                                                                      "actions": {
                                                                                          "Response_of_Get_Vsphere_Host_ID": {
                                                                                              "runAfter": {},
                                                                                              "type": "ParseJson",
                                                                                              "inputs": {
                                                                                                  "content": "@body('Get_Vsphere_Host_ID')",
                                                                                                  "schema": {
                                                                                                      "properties": {
                                                                                                          "data": {
                                                                                                              "properties": {
                                                                                                                  "vSphereHostConnection": {
                                                                                                                      "properties": {
                                                                                                                          "__typename": {
                                                                                                                              "type": "string"
                                                                                                                          },
                                                                                                                          "edges": {
                                                                                                                              "items": {
                                                                                                                                  "properties": {
                                                                                                                                      "__typename": {
                                                                                                                                          "type": "string"
                                                                                                                                      },
                                                                                                                                      "node": {
                                                                                                                                          "properties": {
                                                                                                                                              "__typename": {
                                                                                                                                                  "type": "string"
                                                                                                                                              },
                                                                                                                                              "id": {
                                                                                                                                                  "type": "string"
                                                                                                                                              },
                                                                                                                                              "name": {
                                                                                                                                                  "type": "string"
                                                                                                                                              },
                                                                                                                                              "physicalPath": {
                                                                                                                                                  "items": {
                                                                                                                                                      "properties": {
                                                                                                                                                          "__typename": {
                                                                                                                                                              "type": "string"
                                                                                                                                                          },
                                                                                                                                                          "fid": {
                                                                                                                                                              "type": "string"
                                                                                                                                                          },
                                                                                                                                                          "name": {
                                                                                                                                                              "type": "string"
                                                                                                                                                          },
                                                                                                                                                          "objectType": {
                                                                                                                                                              "type": "string"
                                                                                                                                                          }
                                                                                                                                                      },
                                                                                                                                                      "required": [
                                                                                                                                                          "fid",
                                                                                                                                                          "name",
                                                                                                                                                          "objectType",
                                                                                                                                                          "__typename"
                                                                                                                                                      ],
                                                                                                                                                      "type": "object"
                                                                                                                                                  },
                                                                                                                                                  "type": "array"
                                                                                                                                              }
                                                                                                                                          },
                                                                                                                                          "type": "object"
                                                                                                                                      }
                                                                                                                                  },
                                                                                                                                  "required": [
                                                                                                                                      "node",
                                                                                                                                      "__typename"
                                                                                                                                  ],
                                                                                                                                  "type": "object"
                                                                                                                              },
                                                                                                                              "type": "array"
                                                                                                                          },
                                                                                                                          "pageInfo": {
                                                                                                                              "properties": {
                                                                                                                                  "__typename": {
                                                                                                                                      "type": "string"
                                                                                                                                  },
                                                                                                                                  "endCursor": {
                                                                                                                                      "type": "string"
                                                                                                                                  },
                                                                                                                                  "hasNextPage": {
                                                                                                                                      "type": "boolean"
                                                                                                                                  },
                                                                                                                                  "hasPreviousPage": {
                                                                                                                                      "type": "boolean"
                                                                                                                                  }
                                                                                                                              },
                                                                                                                              "type": "object"
                                                                                                                          }
                                                                                                                      },
                                                                                                                      "type": "object"
                                                                                                                  }
                                                                                                              },
                                                                                                              "type": "object"
                                                                                                          }
                                                                                                      },
                                                                                                      "type": "object"
                                                                                                  }
                                                                                              }
                                                                                          },
                                                                                          "Set_HostId_LiveMount": {
                                                                                              "runAfter": {
                                                                                                  "Response_of_Get_Vsphere_Host_ID": [
                                                                                                      "Succeeded"
                                                                                                  ]
                                                                                              },
                                                                                              "type": "SetVariable",
                                                                                              "inputs": {
                                                                                                  "name": "HostId",
                                                                                                  "value": "@{body('Response_of_Get_Vsphere_Host_ID')?['data']?['vSphereHostConnection']?['edges'][0]?['node']?['id']}"
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "expression": {
                                                                                      "and": [
                                                                                          {
                                                                                              "contains": [
                                                                                                  "@body('Get_Vsphere_Host_ID')",
                                                                                                  "errors"
                                                                                              ]
                                                                                          }
                                                                                      ]
                                                                                  },
                                                                                  "type": "If"
                                                                              }
                                                                          },
                                                                          "runAfter": {
                                                                              "Get_Vsphere_Host_ID": [
                                                                                  "Succeeded",
                                                                                  "Failed"
                                                                              ]
                                                                          },
                                                                          "else": {
                                                                              "actions": {
                                                                                  "Set_Error_from_Get_Vsphere_HostID_LiveMount": {
                                                                                      "runAfter": {},
                                                                                      "type": "SetVariable",
                                                                                      "inputs": {
                                                                                          "name": "ErrorMessage",
                                                                                          "value": "Status Code:  @{outputs('Get_Vsphere_Host_ID')?['statusCode']}, Error Message:  @{body('Get_Vsphere_Host_ID')?['message']}"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "expression": {
                                                                              "and": [
                                                                                  {
                                                                                      "equals": [
                                                                                          "@outputs('Get_Vsphere_Host_ID')?['statusCode']",
                                                                                          200
                                                                                      ]
                                                                                  }
                                                                              ]
                                                                          },
                                                                          "type": "If"
                                                                      },
                                                                      "Get_Vsphere_Host_ID": {
                                                                          "runAfter": {},
                                                                          "type": "Http",
                                                                          "inputs": {
                                                                              "body": {
                                                                                  "query": "query vSphereHostsQuery($first: Int!, $after: String, $filter: [Filter!], $sortBy: HierarchySortByField, $sortOrder: SortOrder) {\r\n  vSphereHostConnection(\r\n    first: $first\r\n    after: $after\r\n    filter: $filter\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        ...VSphereHostNameFragment\r\n        ...VSphereHostPhysicalPathFragment\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n \r\nfragment VSphereHostNameFragment on VsphereHost {\r\n  name\r\n  __typename\r\n}\r\n \r\nfragment VSphereHostPhysicalPathFragment on VsphereHost {\r\n  physicalPath {\r\n    fid\r\n    name\r\n    objectType\r\n    __typename\r\n  }\r\n  __typename\r\n}",
                                                                                  "variables": {
                                                                                      "filter": [
                                                                                          {
                                                                                              "field": "CLUSTER_ID",
                                                                                              "texts": [
                                                                                                  "@{triggerBody()?['ClusterId']}"
                                                                                              ]
                                                                                          },
                                                                                          {
                                                                                              "field": "NAME",
                                                                                              "texts": [
                                                                                                  "@{body('Collect_recovery_data_for_live-mounting_VM')?['data']?['name to search for a Vsphere host that will be used for live mounting']}"
                                                                                              ]
                                                                                          }
                                                                                      ],
                                                                                      "first": 1000,
                                                                                      "sortBy": "NAME",
                                                                                      "sortOrder": "DESC"
                                                                                  }
                                                                              },
                                                                              "headers": {
                                                                                  "Authorization": "Bearer @{variables('access_token')}",
                                                                                  "Content-Type": "application/json"
                                                                              },
                                                                              "host": {
                                                                                  "connection": {
                                                                                      "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                                                                  }
                                                                              },
                                                                              "method": "POST",
                                                                              "path": "/api/graphql",
                                                                              "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                                                          }
                                                                      }
                                                                  },
                                                                  "runAfter": {
                                                                      "Collect_recovery_data_for_live-mounting_VM": [
                                                                          "Succeeded"
                                                                      ]
                                                                  },
                                                                  "expression": {
                                                                      "and": [
                                                                          {
                                                                              "not": {
                                                                                  "equals": [
                                                                                      "@body('Collect_recovery_data_for_live-mounting_VM')?['data']?['name to search for a Vsphere host that will be used for live mounting']",
                                                                                      "@null"
                                                                                  ]
                                                                              }
                                                                          }
                                                                      ]
                                                                  },
                                                                  "type": "If"
                                                              },
                                                              "Live-Mount_recovered_snapshot": {
                                                                  "runAfter": {
                                                                      "Is_Vsphere_host_name_provided": [
                                                                          "Succeeded"
                                                                      ]
                                                                  },
                                                                  "type": "Http",
                                                                  "inputs": {
                                                                      "body": {
                                                                          "query": "\r\n  mutation vSphereLiveMountMutation($snappableId: String!, $hostId: String, $clusterId: String, $resourcePoolId: String, $snapshotFid: String, $shouldRecoverTags: Boolean!, $keepMacAddresses: Boolean!, $powerOn: Boolean!, $removeNetworkDevices: Boolean!, $vmName: String, $vNicBindings: [VmwareVnicBindingInfoV2Input!], $recoveryPoint: DateTime, $shouldMigrateImmediately: Boolean!, $migrationConfig: RelocateMountConfigV2Input) {\r\n    vsphereVmInitiateLiveMountV2(\r\n      input: {\r\n        id: $snappableId, config: { hostId: $hostId, resourcePoolId: $resourcePoolId, clusterId: $clusterId, shouldRecoverTags: $shouldRecoverTags, vNicBindings: $vNicBindings, requiredRecoveryParameters: { snapshotId: $snapshotFid, recoveryPoint: $recoveryPoint}mountExportSnapshotJobCommonOptionsV2: { keepMacAddresses: $keepMacAddresses, powerOn: $powerOn, removeNetworkDevices: $removeNetworkDevices, vmName: $vmName}, shouldMigrateImmediately: $shouldMigrateImmediately, migrationConfig: $migrationConfig}}\r\n    ) {\r\n        id\r\n      status\r\n      __typename\r\n    }\r\n  }\r\n",
                                                                          "variables": {
                                                                              "hostId": "@variables('HostId')",
                                                                              "keepMacAddresses": false,
                                                                              "powerOn": false,
                                                                              "removeNetworkDevices": false,
                                                                              "shouldMigrateImmediately": false,
                                                                              "shouldRecoverTags": true,
                                                                              "snappableId": "@{triggerBody()?['ObjectId']}",
                                                                              "snapshotFid": "@{body('Response_RubrikIOCScan')?['RecoverableSnapshotid']}",
                                                                              "vmName": "@body('Collect_recovery_data_for_live-mounting_VM')?['data']?['live-mounted VM name']"
                                                                          }
                                                                      },
                                                                      "headers": {
                                                                          "Authorization": "Bearer @{variables('access_token')}",
                                                                          "Content-Type": "application/json"
                                                                      },
                                                                      "host": {
                                                                          "connection": {
                                                                              "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                                                          }
                                                                      },
                                                                      "method": "POST",
                                                                      "path": "/api/graphql",
                                                                      "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                                                  }
                                                              }
                                                          },
                                                          "runAfter": {
                                                              "Default_value_of_HostId_and_Esxi_ClusterId": [
                                                                  "Succeeded"
                                                              ]
                                                          },
                                                          "else": {
                                                              "actions": {
                                                                  "Check_Export_recovered_snapshot_response_code": {
                                                                      "actions": {
                                                                          "Check_that_Export_Recovery_API_contains_errors": {
                                                                              "actions": {
                                                                                  "Response_10": {
                                                                                      "runAfter": {
                                                                                          "Set_Error_for_Export_Recovery_API": [
                                                                                              "Succeeded"
                                                                                          ]
                                                                                      },
                                                                                      "type": "Response",
                                                                                      "kind": "Http",
                                                                                      "inputs": {
                                                                                          "body": "@body('Export_recovered_snapshot')?['errors'][0]?['message']",
                                                                                          "statusCode": 200
                                                                                      }
                                                                                  },
                                                                                  "Set_Error_for_Export_Recovery_API": {
                                                                                      "runAfter": {},
                                                                                      "type": "SetVariable",
                                                                                      "inputs": {
                                                                                          "name": "ErrorMessage",
                                                                                          "value": "@{body('Export_recovered_snapshot')?['errors'][0]?['message']}"
                                                                                      }
                                                                                  },
                                                                                  "Terminate_15": {
                                                                                      "runAfter": {
                                                                                          "Response_10": [
                                                                                              "Succeeded"
                                                                                          ]
                                                                                      },
                                                                                      "type": "Terminate",
                                                                                      "inputs": {
                                                                                          "runError": {
                                                                                              "message": "@{body('Export_recovered_snapshot')?['errors'][0]?['message']}"
                                                                                          },
                                                                                          "runStatus": "Failed"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "runAfter": {},
                                                                              "else": {
                                                                                  "actions": {
                                                                                      "Parse_JSON": {
                                                                                          "runAfter": {},
                                                                                          "type": "ParseJson",
                                                                                          "inputs": {
                                                                                              "content": "@body('Export_recovered_snapshot')",
                                                                                              "schema": {
                                                                                                  "properties": {
                                                                                                      "data": {
                                                                                                          "properties": {
                                                                                                              "vSphereVMExportSnapshotV2": {
                                                                                                                  "properties": {
                                                                                                                      "id": {
                                                                                                                          "type": "string"
                                                                                                                      },
                                                                                                                      "status": {
                                                                                                                          "type": "string"
                                                                                                                      }
                                                                                                                  },
                                                                                                                  "type": "object"
                                                                                                              }
                                                                                                          },
                                                                                                          "type": "object"
                                                                                                      }
                                                                                                  },
                                                                                                  "type": "object"
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "expression": {
                                                                                  "and": [
                                                                                      {
                                                                                          "contains": [
                                                                                              "@body('Export_recovered_snapshot')",
                                                                                              "errors"
                                                                                          ]
                                                                                      }
                                                                                  ]
                                                                              },
                                                                              "type": "If"
                                                                          }
                                                                      },
                                                                      "runAfter": {
                                                                          "Export_recovered_snapshot": [
                                                                              "Succeeded"
                                                                          ]
                                                                      },
                                                                      "else": {
                                                                          "actions": {
                                                                              "Response_7": {
                                                                                  "runAfter": {
                                                                                      "Set_Error_for_Export_Recovery": [
                                                                                          "Succeeded"
                                                                                      ]
                                                                                  },
                                                                                  "type": "Response",
                                                                                  "kind": "Http",
                                                                                  "inputs": {
                                                                                      "body": "@variables('ErrorMessage')",
                                                                                      "statusCode": "@outputs('Export_recovered_snapshot')['statusCode']"
                                                                                  }
                                                                              },
                                                                              "Set_Error_for_Export_Recovery": {
                                                                                  "runAfter": {},
                                                                                  "type": "SetVariable",
                                                                                  "inputs": {
                                                                                      "name": "ErrorMessage",
                                                                                      "value": "Status Code: @{outputs('Export_recovered_snapshot')['statusCode']}, message: @{body('Export_recovered_snapshot')?['errors'][0]?['message']}"
                                                                                  }
                                                                              },
                                                                              "Terminate_16": {
                                                                                  "runAfter": {
                                                                                      "Response_7": [
                                                                                          "Succeeded"
                                                                                      ]
                                                                                  },
                                                                                  "type": "Terminate",
                                                                                  "inputs": {
                                                                                      "runError": {
                                                                                          "code": "@{outputs('Export_recovered_snapshot')['statusCode']}"
                                                                                      },
                                                                                      "runStatus": "Failed"
                                                                                  }
                                                                              }
                                                                          }
                                                                      },
                                                                      "expression": {
                                                                          "and": [
                                                                              {
                                                                                  "equals": [
                                                                                      "@outputs('Export_recovered_snapshot')['statusCode']",
                                                                                      200
                                                                                  ]
                                                                              }
                                                                          ]
                                                                      },
                                                                      "type": "If"
                                                                  },
                                                                  "Collect_recovery_data_for_exporting_VM": {
                                                                      "runAfter": {},
                                                                      "type": "ApiConnectionWebhook",
                                                                      "inputs": {
                                                                          "body": {
                                                                              "body": {
                                                                                  "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Large\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Export VM data\",\n            \"horizontalAlignment\": \"Center\",\n            \"style\": \"heading\",\n            \"color\": \"Accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Input arguments required to initiate exporting of a recoverable snapshot.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n\t\t{\n            \"type\": \"TextBlock\",\n            \"text\": \"Object Name =  @{variables('ObjectName')}\\n\\nIncident Start Time = @{variables('IncidentTime')}\\n\\nCluster Name = @{variables('ClusterName')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Name to search for a Vsphere host that will be used while exporting\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip1\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Name to search for a Vsphere host in exporting\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Name to search for a Vsphere datastore that will be used for exporting\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip2\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Name to search for a Vsphere datastore in exporting\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to power on the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"separator\": true,\n            \"id\": \"Ip3\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"power on the exported VM?\",\n            \"value\": \"False\",\n            \"style\": \"expanded\",\n            \"choices\": [\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                },\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                }\n            ],\n            \"isRequired\": true,\n            \"errorMessage\": \"This field id required\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether mac addresses of network devices be kept on the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip4\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"value\": \"True\",\n            \"style\": \"expanded\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\",\n            \"label\": \"required\",\n            \"id\": \"mac addresses of network devices be kept on the exported VM\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to recover vSphere tags in the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip5\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"recover vSphere tags in the exported VM?\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This filed is required\",\n            \"label\": \"required\",\n            \"value\": \"True\",\n            \"style\": \"expanded\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to remove the network devices of the original VM in the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip6\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                },\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"remove the network devices of the original VM in the exported VM?\",\n            \"isRequired\": true,\n            \"value\": \"False\",\n            \"errorMessage\": \"This field is required\",\n            \"style\": \"expanded\",\n            \"label\": \"required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Whether to disable networking in the exported VM?\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip7\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": [\n                {\n                    \"title\": \"True\",\n                    \"value\": \"True\"\n                },\n                {\n                    \"title\": \"False\",\n                    \"value\": \"False\"\n                }\n            ],\n            \"placeholder\": \"Placeholder text\",\n            \"id\": \"disable networking in the exported VM?\",\n            \"label\": \"required\",\n            \"value\": \"True\",\n            \"style\": \"expanded\",\n            \"isRequired\": true,\n            \"errorMessage\": \"This field is required\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Exported VM name\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"id\": \"Ip8\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"id\": \"Exported VM name\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"data\": {\n                \"id\": \"LoginVal\"\n            },\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ]\n}\n",
                                                                                  "recipient": {
                                                                                      "channelId": "[concat('', parameters('TeamsChannelId'))]",
                                                                                      "groupId": "[concat('', parameters('TeamsGroupId'))]"
                                                                                  },
                                                                                  "updateMessage": "Response saved for Export-VM!"
                                                                              },
                                                                              "notificationUrl": "@{listCallbackUrl()}"
                                                                          },
                                                                          "host": {
                                                                              "connection": {
                                                                                  "name": "@parameters('$connections')['teams']['connectionId']"
                                                                              }
                                                                          },
                                                                          "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                                                      }
                                                                  },
                                                                  "Does_Get_Vsphere_Datastore_ID_get_status_code_200": {
                                                                      "actions": {
                                                                          "Does_Get_Vsphere_Datastore_ID_API_response_contains_errors": {
                                                                              "actions": {
                                                                                  "Response_9": {
                                                                                      "runAfter": {
                                                                                          "Set_Error_for_Get_DataStoreId_Export_API": [
                                                                                              "Succeeded"
                                                                                          ]
                                                                                      },
                                                                                      "type": "Response",
                                                                                      "kind": "Http",
                                                                                      "inputs": {
                                                                                          "body": "@body('Get_Vsphere_Datastore_ID')?['errors'][0]?['message']",
                                                                                          "statusCode": 200
                                                                                      }
                                                                                  },
                                                                                  "Set_Error_for_Get_DataStoreId_Export_API": {
                                                                                      "runAfter": {},
                                                                                      "type": "SetVariable",
                                                                                      "inputs": {
                                                                                          "name": "ErrorMessage",
                                                                                          "value": "@{body('Get_Vsphere_Datastore_ID')?['errors'][0]?['message']}"
                                                                                      }
                                                                                  },
                                                                                  "Terminate_13": {
                                                                                      "runAfter": {
                                                                                          "Response_9": [
                                                                                              "Succeeded"
                                                                                          ]
                                                                                      },
                                                                                      "type": "Terminate",
                                                                                      "inputs": {
                                                                                          "runError": {
                                                                                              "message": "@{body('Get_Vsphere_Datastore_ID')?['errors'][0]?['message']}"
                                                                                          },
                                                                                          "runStatus": "Failed"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "runAfter": {},
                                                                              "else": {
                                                                                  "actions": {
                                                                                      "Response_of_Get_Vsphere_Datastore_ID": {
                                                                                          "runAfter": {},
                                                                                          "type": "ParseJson",
                                                                                          "inputs": {
                                                                                              "content": "@body('Get_Vsphere_Datastore_ID')",
                                                                                              "schema": {
                                                                                                  "properties": {
                                                                                                      "data": {
                                                                                                          "properties": {
                                                                                                              "vSphereHost": {
                                                                                                                  "properties": {
                                                                                                                      "__typename": {
                                                                                                                          "type": "string"
                                                                                                                      },
                                                                                                                      "descendantConnection": {
                                                                                                                          "properties": {
                                                                                                                              "__typename": {
                                                                                                                                  "type": "string"
                                                                                                                              },
                                                                                                                              "edges": {
                                                                                                                                  "items": {
                                                                                                                                      "properties": {
                                                                                                                                          "__typename": {
                                                                                                                                              "type": "string"
                                                                                                                                          },
                                                                                                                                          "node": {
                                                                                                                                              "properties": {
                                                                                                                                                  "__typename": {
                                                                                                                                                      "type": "string"
                                                                                                                                                  },
                                                                                                                                                  "capacity": {
                                                                                                                                                      "type": "integer"
                                                                                                                                                  },
                                                                                                                                                  "datastoreType": {
                                                                                                                                                      "type": "string"
                                                                                                                                                  },
                                                                                                                                                  "freeSpace": {
                                                                                                                                                      "type": "integer"
                                                                                                                                                  },
                                                                                                                                                  "id": {
                                                                                                                                                      "type": "string"
                                                                                                                                                  },
                                                                                                                                                  "isLocal": {
                                                                                                                                                      "type": "boolean"
                                                                                                                                                  },
                                                                                                                                                  "name": {
                                                                                                                                                      "type": "string"
                                                                                                                                                  }
                                                                                                                                              },
                                                                                                                                              "type": "object"
                                                                                                                                          }
                                                                                                                                      },
                                                                                                                                      "required": [
                                                                                                                                          "node",
                                                                                                                                          "__typename"
                                                                                                                                      ],
                                                                                                                                      "type": "object"
                                                                                                                                  },
                                                                                                                                  "type": "array"
                                                                                                                              },
                                                                                                                              "pageInfo": {
                                                                                                                                  "properties": {
                                                                                                                                      "__typename": {
                                                                                                                                          "type": "string"
                                                                                                                                      },
                                                                                                                                      "endCursor": {
                                                                                                                                          "type": "string"
                                                                                                                                      },
                                                                                                                                      "hasNextPage": {
                                                                                                                                          "type": "boolean"
                                                                                                                                      },
                                                                                                                                      "hasPreviousPage": {
                                                                                                                                          "type": "boolean"
                                                                                                                                      }
                                                                                                                                  },
                                                                                                                                  "type": "object"
                                                                                                                              }
                                                                                                                          },
                                                                                                                          "type": "object"
                                                                                                                      }
                                                                                                                  },
                                                                                                                  "type": "object"
                                                                                                              }
                                                                                                          },
                                                                                                          "type": "object"
                                                                                                      }
                                                                                                  },
                                                                                                  "type": "object"
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "expression": {
                                                                                  "and": [
                                                                                      {
                                                                                          "contains": [
                                                                                              "@body('Get_Vsphere_Datastore_ID')",
                                                                                              "errors"
                                                                                          ]
                                                                                      }
                                                                                  ]
                                                                              },
                                                                              "type": "If"
                                                                          }
                                                                      },
                                                                      "runAfter": {
                                                                          "Get_Vsphere_Datastore_ID": [
                                                                              "Succeeded",
                                                                              "Failed"
                                                                          ]
                                                                      },
                                                                      "else": {
                                                                          "actions": {
                                                                              "Response_6": {
                                                                                  "runAfter": {
                                                                                      "Set_Error_Get_DataStoreId_Export": [
                                                                                          "Succeeded"
                                                                                      ]
                                                                                  },
                                                                                  "type": "Response",
                                                                                  "kind": "Http",
                                                                                  "inputs": {
                                                                                      "body": "@body('Get_Vsphere_Datastore_ID')['message']",
                                                                                      "statusCode": "@output('Get_Vsphere_Datastore_ID')['statusCode']"
                                                                                  }
                                                                              },
                                                                              "Set_Error_Get_DataStoreId_Export": {
                                                                                  "runAfter": {},
                                                                                  "type": "SetVariable",
                                                                                  "inputs": {
                                                                                      "name": "ErrorMessage",
                                                                                      "value": "Status Code: @{outputs('Get_Vsphere_Datastore_ID')['statusCode']}, Error message:  @{body('Get_Vsphere_Datastore_ID')['message']}"
                                                                                  }
                                                                              },
                                                                              "Terminate_14": {
                                                                                  "runAfter": {
                                                                                      "Response_6": [
                                                                                          "Succeeded"
                                                                                      ]
                                                                                  },
                                                                                  "type": "Terminate",
                                                                                  "inputs": {
                                                                                      "runError": {
                                                                                          "code": "@{output('Get_Vsphere_Datastore_ID')['statusCode']}",
                                                                                          "message": "@{body('Get_Vsphere_Datastore_ID')['message']}"
                                                                                      },
                                                                                      "runStatus": "Failed"
                                                                                  }
                                                                              }
                                                                          }
                                                                      },
                                                                      "expression": {
                                                                          "and": [
                                                                              {
                                                                                  "equals": [
                                                                                      "@outputs('Get_Vsphere_Datastore_ID')['statusCode']",
                                                                                      200
                                                                                  ]
                                                                              }
                                                                          ]
                                                                      },
                                                                      "type": "If"
                                                                  },
                                                                  "Export_recovered_snapshot": {
                                                                      "runAfter": {
                                                                          "For_each_2": [
                                                                              "Succeeded"
                                                                          ]
                                                                      },
                                                                      "type": "Http",
                                                                      "inputs": {
                                                                          "body": {
                                                                              "query": "mutation vSphereExportSnapshotV2Mutation(\r\n    $input: VsphereVmExportSnapshotV2Input!\r\n  ) {\r\n    vsphereVmExportSnapshotV2(input: $input) {\r\n      id\r\n    }\r\n  }\r\n",
                                                                              "variables": {
                                                                                  "input": {
                                                                                      "config": {
                                                                                          "clusterId": "@{variables('EsxiClusterId')}",
                                                                                          "datastoreId": "@{variables('DatastoreId')}",
                                                                                          "mountExportSnapshotJobCommonOptionsV2": {
                                                                                              "keepMacAddresses": false,
                                                                                              "powerOn": false,
                                                                                              "removeNetworkDevices": false
                                                                                          },
                                                                                          "requiredRecoveryParameters": {
                                                                                              "snapshotId": "@{body('Response_RubrikIOCScan')?['RecoverableSnapshotid']}"
                                                                                          },
                                                                                          "shouldRecoverTags": true,
                                                                                          "shouldUseHotAddProxy": false,
                                                                                          "vNicBindings": []
                                                                                      },
                                                                                      "id": "@{triggerBody()?['ObjectId']}"
                                                                                  }
                                                                              }
                                                                          },
                                                                          "headers": {
                                                                              "Authorization": "Bearer @{variables('access_token')}",
                                                                              "Content-Type": "application/json"
                                                                          },
                                                                          "method": "POST",
                                                                          "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                                                      }
                                                                  },
                                                                  "For_each": {
                                                                      "foreach": "@body('Response_of_Get_Vsphere_Host_ID_-_2')?['data']?['vSphereHostConnection']?['edges']",
                                                                      "actions": {
                                                                          "For_each_3": {
                                                                              "foreach": "@items('For_each')?['node']?['physicalPath']",
                                                                              "actions": {
                                                                                  "Check_for_ObjectType_equals_to_Cluster": {
                                                                                      "actions": {
                                                                                          "Set_Esxi_ClusterId": {
                                                                                              "runAfter": {},
                                                                                              "type": "SetVariable",
                                                                                              "inputs": {
                                                                                                  "name": "EsxiClusterId",
                                                                                                  "value": "@items('For_each_3')?['fid']"
                                                                                              }
                                                                                          }
                                                                                      },
                                                                                      "runAfter": {},
                                                                                      "expression": {
                                                                                          "and": [
                                                                                              {
                                                                                                  "equals": [
                                                                                                      "@items('For_each_3')?['objectType']",
                                                                                                      "VSphereComputeCluster"
                                                                                                  ]
                                                                                              }
                                                                                          ]
                                                                                      },
                                                                                      "type": "If"
                                                                                  }
                                                                              },
                                                                              "runAfter": {
                                                                                  "Set_HostId": [
                                                                                      "Succeeded"
                                                                                  ]
                                                                              },
                                                                              "type": "Foreach"
                                                                          },
                                                                          "Set_HostId": {
                                                                              "runAfter": {},
                                                                              "type": "SetVariable",
                                                                              "inputs": {
                                                                                  "name": "HostId",
                                                                                  "value": "@items('For_each')?['node']?['id']"
                                                                              }
                                                                          }
                                                                      },
                                                                      "runAfter": {
                                                                          "Is_Vsphere_host_name_provided_for_exporting_vm": [
                                                                              "Succeeded"
                                                                          ]
                                                                      },
                                                                      "type": "Foreach"
                                                                  },
                                                                  "For_each_2": {
                                                                      "foreach": "@body('Response_of_Get_Vsphere_Datastore_ID')?['data']?['vSphereHost']?['descendantConnection']?['edges']",
                                                                      "actions": {
                                                                          "Set_DatastoreId": {
                                                                              "runAfter": {},
                                                                              "type": "SetVariable",
                                                                              "inputs": {
                                                                                  "name": "DatastoreId",
                                                                                  "value": "@items('For_each_2')?['node']?['id']"
                                                                              }
                                                                          }
                                                                      },
                                                                      "runAfter": {
                                                                          "Does_Get_Vsphere_Datastore_ID_get_status_code_200": [
                                                                              "Succeeded"
                                                                          ]
                                                                      },
                                                                      "type": "Foreach"
                                                                  },
                                                                  "Get_Vsphere_Datastore_ID": {
                                                                      "runAfter": {
                                                                          "For_each": [
                                                                              "Succeeded"
                                                                          ]
                                                                      },
                                                                      "type": "Http",
                                                                      "inputs": {
                                                                          "body": {
                                                                              "query": "query VSphereHostDatastoresQuery($hostId: UUID!, $first: Int, $after: String, $filter: [Filter!], $sortBy: HierarchySortByField, $sortOrder: SortOrder) {\r\n  vSphereHost(fid: $hostId) {\r\n    descendantConnection(\r\n      first: $first\r\n      after: $after\r\n      filter: $filter\r\n      sortBy: $sortBy\r\n      sortOrder: $sortOrder\r\n      typeFilter: [VSphereDatastore]\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          ...HierarchyObjectNameColumnFragment\r\n          ... on VsphereDatastore {\r\n            capacity\r\n            isLocal\r\n            freeSpace\r\n            datastoreType\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n        hasPreviousPage\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n \r\nfragment HierarchyObjectNameColumnFragment on HierarchyObject {\r\n  name\r\n  __typename\r\n}",
                                                                              "variables": {
                                                                                  "filter": [
                                                                                      {
                                                                                          "field": "NAME",
                                                                                          "texts": [
                                                                                              "@{body('Collect_recovery_data_for_exporting_VM')?['data']?['name to search for a Vsphere datastore in exporting']}"
                                                                                          ]
                                                                                      }
                                                                                  ],
                                                                                  "first": 20,
                                                                                  "hostId": "@{variables('HostId')}",
                                                                                  "sortBy": "NAME",
                                                                                  "sortOrder": "ASC"
                                                                              }
                                                                          },
                                                                          "headers": {
                                                                              "Authorization": "Bearer @{variables('access_token')}",
                                                                              "Content-Type": "application/json"
                                                                          },
                                                                          "host": {
                                                                              "connection": {
                                                                                  "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                                                              }
                                                                          },
                                                                          "method": "POST",
                                                                          "path": "/api/graphql",
                                                                          "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                                                      }
                                                                  },
                                                                  "Is_Vsphere_host_name_provided_for_exporting_vm": {
                                                                      "actions": {
                                                                          "Does_Get_Vsphere_Host_ID_-_2_get_status_code_200": {
                                                                              "actions": {
                                                                                  "Does_Get_Vsphere_Host_ID_-_2_API_response_contains_errors": {
                                                                                      "actions": {
                                                                                          "Response_15": {
                                                                                              "runAfter": {
                                                                                                  "Set_Error_for_Get_HostId_Export_API": [
                                                                                                      "Succeeded"
                                                                                                  ]
                                                                                              },
                                                                                              "type": "Response",
                                                                                              "kind": "Http",
                                                                                              "inputs": {
                                                                                                  "body": "While Getting HostID for Live-Mount : @{body('Get_Vsphere_Host_ID_-_2')?['errors'][0]?['message']}",
                                                                                                  "statusCode": 200
                                                                                              }
                                                                                          },
                                                                                          "Set_Error_for_Get_HostId_Export_API": {
                                                                                              "runAfter": {},
                                                                                              "type": "SetVariable",
                                                                                              "inputs": {
                                                                                                  "name": "ErrorMessage",
                                                                                                  "value": "@{body('Get_Vsphere_Host_ID_-_2')?['errors'][0]?['message']}"
                                                                                              }
                                                                                          },
                                                                                          "Terminate_12": {
                                                                                              "runAfter": {
                                                                                                  "Response_15": [
                                                                                                      "Succeeded"
                                                                                                  ]
                                                                                              },
                                                                                              "type": "Terminate",
                                                                                              "inputs": {
                                                                                                  "runError": {
                                                                                                      "message": "@{body('Get_Vsphere_Host_ID_-_2')?['errors'][0]?['message']}"
                                                                                                  },
                                                                                                  "runStatus": "Failed"
                                                                                              }
                                                                                          }
                                                                                      },
                                                                                      "runAfter": {},
                                                                                      "expression": {
                                                                                          "and": [
                                                                                              {
                                                                                                  "contains": [
                                                                                                      "@body('Get_Vsphere_Host_ID_-_2')",
                                                                                                      "errors"
                                                                                                  ]
                                                                                              }
                                                                                          ]
                                                                                      },
                                                                                      "type": "If"
                                                                                  },
                                                                                  "Response_of_Get_Vsphere_Host_ID_-_2": {
                                                                                      "runAfter": {
                                                                                          "Does_Get_Vsphere_Host_ID_-_2_API_response_contains_errors": [
                                                                                              "Succeeded"
                                                                                          ]
                                                                                      },
                                                                                      "type": "ParseJson",
                                                                                      "inputs": {
                                                                                          "content": "@body('Get_Vsphere_Host_ID_-_2')",
                                                                                          "schema": {
                                                                                              "properties": {
                                                                                                  "data": {
                                                                                                      "properties": {
                                                                                                          "vSphereHostConnection": {
                                                                                                              "properties": {
                                                                                                                  "__typename": {
                                                                                                                      "type": "string"
                                                                                                                  },
                                                                                                                  "edges": {
                                                                                                                      "items": {
                                                                                                                          "properties": {
                                                                                                                              "__typename": {
                                                                                                                                  "type": "string"
                                                                                                                              },
                                                                                                                              "node": {
                                                                                                                                  "properties": {
                                                                                                                                      "__typename": {
                                                                                                                                          "type": "string"
                                                                                                                                      },
                                                                                                                                      "id": {
                                                                                                                                          "type": "string"
                                                                                                                                      },
                                                                                                                                      "name": {
                                                                                                                                          "type": "string"
                                                                                                                                      },
                                                                                                                                      "physicalPath": {
                                                                                                                                          "items": {
                                                                                                                                              "properties": {
                                                                                                                                                  "__typename": {
                                                                                                                                                      "type": "string"
                                                                                                                                                  },
                                                                                                                                                  "fid": {
                                                                                                                                                      "type": "string"
                                                                                                                                                  },
                                                                                                                                                  "name": {
                                                                                                                                                      "type": "string"
                                                                                                                                                  },
                                                                                                                                                  "objectType": {
                                                                                                                                                      "type": "string"
                                                                                                                                                  }
                                                                                                                                              },
                                                                                                                                              "required": [
                                                                                                                                                  "fid",
                                                                                                                                                  "name",
                                                                                                                                                  "objectType",
                                                                                                                                                  "__typename"
                                                                                                                                              ],
                                                                                                                                              "type": "object"
                                                                                                                                          },
                                                                                                                                          "type": "array"
                                                                                                                                      }
                                                                                                                                  },
                                                                                                                                  "type": "object"
                                                                                                                              }
                                                                                                                          },
                                                                                                                          "required": [
                                                                                                                              "node",
                                                                                                                              "__typename"
                                                                                                                          ],
                                                                                                                          "type": "object"
                                                                                                                      },
                                                                                                                      "type": "array"
                                                                                                                  },
                                                                                                                  "pageInfo": {
                                                                                                                      "properties": {
                                                                                                                          "__typename": {
                                                                                                                              "type": "string"
                                                                                                                          },
                                                                                                                          "endCursor": {
                                                                                                                              "type": "string"
                                                                                                                          },
                                                                                                                          "hasNextPage": {
                                                                                                                              "type": "boolean"
                                                                                                                          },
                                                                                                                          "hasPreviousPage": {
                                                                                                                              "type": "boolean"
                                                                                                                          }
                                                                                                                      },
                                                                                                                      "type": "object"
                                                                                                                  }
                                                                                                              },
                                                                                                              "type": "object"
                                                                                                          }
                                                                                                      },
                                                                                                      "type": "object"
                                                                                                  }
                                                                                              },
                                                                                              "type": "object"
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "runAfter": {
                                                                                  "Get_Vsphere_Host_ID_-_2": [
                                                                                      "Succeeded"
                                                                                  ]
                                                                              },
                                                                              "else": {
                                                                                  "actions": {
                                                                                      "Response_16": {
                                                                                          "runAfter": {
                                                                                              "Set_Error_Get_Vsphere_HostID_Export": [
                                                                                                  "Succeeded"
                                                                                              ]
                                                                                          },
                                                                                          "type": "Response",
                                                                                          "kind": "Http",
                                                                                          "inputs": {
                                                                                              "body": "@variables('ErrorMessage')",
                                                                                              "statusCode": 400
                                                                                          }
                                                                                      },
                                                                                      "Set_Error_Get_Vsphere_HostID_Export": {
                                                                                          "runAfter": {},
                                                                                          "type": "SetVariable",
                                                                                          "inputs": {
                                                                                              "name": "ErrorMessage",
                                                                                              "value": "Status Code: @{outputs('Get_Vsphere_Host_ID_-_2')['statusCode']}, Error Message: @{body('Get_Vsphere_Host_ID_-_2')?['message']}"
                                                                                          }
                                                                                      },
                                                                                      "Terminate_11": {
                                                                                          "runAfter": {
                                                                                              "Response_16": [
                                                                                                  "Succeeded"
                                                                                              ]
                                                                                          },
                                                                                          "type": "Terminate",
                                                                                          "inputs": {
                                                                                              "runError": {
                                                                                                  "message": "@variables('ErrorMessage')"
                                                                                              },
                                                                                              "runStatus": "Failed"
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "expression": {
                                                                                  "and": [
                                                                                      {
                                                                                          "equals": [
                                                                                              "@outputs('Get_Vsphere_Host_ID_-_2')['statusCode']",
                                                                                              200
                                                                                          ]
                                                                                      }
                                                                                  ]
                                                                              },
                                                                              "type": "If"
                                                                          },
                                                                          "Get_Vsphere_Host_ID_-_2": {
                                                                              "runAfter": {},
                                                                              "type": "Http",
                                                                              "inputs": {
                                                                                  "body": {
                                                                                      "query": "query vSphereHostsQuery($first: Int!, $after: String, $filter: [Filter!], $sortBy: HierarchySortByField, $sortOrder: SortOrder) {\r\n  vSphereHostConnection(\r\n    first: $first\r\n    after: $after\r\n    filter: $filter\r\n    sortBy: $sortBy\r\n    sortOrder: $sortOrder\r\n  ) {\r\n    edges {\r\n      node {\r\n        id\r\n        ...VSphereHostNameFragment\r\n        ...VSphereHostPhysicalPathFragment\r\n        __typename\r\n      }\r\n      __typename\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n      __typename\r\n    }\r\n    __typename\r\n  }\r\n}\r\n \r\nfragment VSphereHostNameFragment on VsphereHost {\r\n  name\r\n  __typename\r\n}\r\n \r\nfragment VSphereHostPhysicalPathFragment on VsphereHost {\r\n  physicalPath {\r\n    fid\r\n    name\r\n    objectType\r\n    __typename\r\n  }\r\n  __typename\r\n}",
                                                                                      "variables": {
                                                                                          "filter": [
                                                                                              {
                                                                                                  "field": "CLUSTER_ID",
                                                                                                  "texts": [
                                                                                                      "@{triggerBody()?['ClusterId']}"
                                                                                                  ]
                                                                                              },
                                                                                              {
                                                                                                  "field": "NAME",
                                                                                                  "texts": [
                                                                                                      "@{body('Collect_recovery_data_for_exporting_VM')?['data']?['name to search for a Vsphere host in exporting']}"
                                                                                                  ]
                                                                                              }
                                                                                          ],
                                                                                          "first": 1000,
                                                                                          "sortBy": "NAME",
                                                                                          "sortOrder": "DESC"
                                                                                      }
                                                                                  },
                                                                                  "headers": {
                                                                                      "Authorization": "Bearer @{variables('access_token')}",
                                                                                      "Content-Type": "application/json"
                                                                                  },
                                                                                  "host": {
                                                                                      "connection": {
                                                                                          "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                                                                      }
                                                                                  },
                                                                                  "method": "POST",
                                                                                  "path": "/api/graphql",
                                                                                  "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                                                              }
                                                                          }
                                                                      },
                                                                      "runAfter": {
                                                                          "Collect_recovery_data_for_exporting_VM": [
                                                                              "Succeeded"
                                                                          ]
                                                                      },
                                                                      "expression": {
                                                                          "and": [
                                                                              {
                                                                                  "not": {
                                                                                      "equals": [
                                                                                          "@body('Collect_recovery_data_for_exporting_VM')?['data']?['name to search for a Vsphere host in exporting']",
                                                                                          "@null"
                                                                                      ]
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      "type": "If"
                                                                  }
                                                              }
                                                          },
                                                          "expression": {
                                                              "and": [
                                                                  {
                                                                      "equals": [
                                                                          "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['live-mount or export']",
                                                                          "Live-Mount"
                                                                      ]
                                                                  }
                                                              ]
                                                          },
                                                          "type": "If"
                                                      }
                                                  },
                                                  "runAfter": {},
                                                  "else": {
                                                      "actions": {
                                                          "Set_No_recoverable_snapshot_found_status": {
                                                              "runAfter": {},
                                                              "type": "SetVariable",
                                                              "inputs": {
                                                                  "name": "ErrorMessage",
                                                                  "value": "No recoverable snapshots were found with the given IOC scan arguments."
                                                              }
                                                          }
                                                      }
                                                  },
                                                  "expression": {
                                                      "and": [
                                                          {
                                                              "not": {
                                                                  "equals": [
                                                                      "@body('Response_RubrikIOCScan')?['RecoverableSnapshotid']",
                                                                      "@null"
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  "type": "If"
                                              }
                                          },
                                          "runAfter": {},
                                          "else": {
                                              "actions": {
                                                  "Set_variable_4": {
                                                      "runAfter": {},
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                          "name": "ErrorMessage",
                                                          "value": "The latest snapshot for the given time period is not infected so no recovery is required."
                                                      }
                                                  }
                                              }
                                          },
                                          "expression": {
                                              "and": [
                                                  {
                                                      "equals": [
                                                          "@body('Response_RubrikIOCScan')?['isLatestInfected']",
                                                          "@true"
                                                      ]
                                                  }
                                              ]
                                          },
                                          "type": "If"
                                      }
                                  },
                                  "runAfter": {},
                                  "else": {
                                      "actions": {
                                          "Set_variable_21": {
                                              "runAfter": {},
                                              "type": "SetVariable",
                                              "inputs": {
                                                  "name": "ErrorMessage",
                                                  "value": "No recovery selected"
                                              }
                                          }
                                      }
                                  },
                                  "expression": {
                                      "and": [
                                          {
                                              "not": {
                                                  "equals": [
                                                      "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['live-mount or export']",
                                                      "No Recovery"
                                                  ]
                                              }
                                          }
                                      ]
                                  },
                                  "type": "If"
                              }
                          },
                          "runAfter": {
                              "Response_RubrikIOCScan": [
                                  "Succeeded"
                              ]
                          },
                          "else": {
                              "actions": {
                                  "Set_variable_6": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                          "name": "ErrorMessage",
                                          "value": "There was an error while running the IOC scan. "
                                      }
                                  }
                              }
                          },
                          "expression": {
                              "and": [
                                  {
                                      "contains": [
                                          "@body('Response_RubrikIOCScan')?['RadarIOCScanStatus']",
                                          "FINISHED"
                                      ]
                                  }
                              ]
                          },
                          "type": "If"
                      },
                      "Is_IOC_Scan_successful_(check_for_RUNNING)": {
                          "actions": {
                              "Set_variable_7": {
                                  "runAfter": {},
                                  "type": "SetVariable",
                                  "inputs": {
                                      "name": "ErrorMessage",
                                      "value": "Wait for IOC scan results timed out. Please see incident context for further details."
                                  }
                              }
                          },
                          "runAfter": {
                              "Response_RubrikIOCScan": [
                                  "Succeeded"
                              ]
                          },
                          "expression": {
                              "and": [
                                  {
                                      "contains": [
                                          "@body('Response_RubrikIOCScan')?['RadarIOCScanStatus']",
                                          "RUNNING"
                                      ]
                                  }
                              ]
                          },
                          "type": "If"
                      },
                      "Is_Object_Type_VM": {
                          "actions": {},
                          "runAfter": {
                              "Initialize_Error_Message_for_flow_Start_IOC_Scan": [
                                  "Succeeded"
                              ]
                          },
                          "else": {
                              "actions": {
                                  "Response_12": {
                                      "runAfter": {},
                                      "type": "Response",
                                      "kind": "Http",
                                      "inputs": {
                                          "body": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exiting?",
                                          "statusCode": 400
                                      }
                                  },
                                  "Terminate": {
                                      "runAfter": {
                                          "Response_12": [
                                              "Succeeded"
                                          ]
                                      },
                                      "type": "Terminate",
                                      "inputs": {
                                          "runError": {
                                              "message": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exiting?"
                                          },
                                          "runStatus": "Failed"
                                      }
                                  }
                              }
                          },
                          "expression": {
                              "and": [
                                  {
                                      "contains": [
                                          "@variables('ObjectType')",
                                          "Vm"
                                      ]
                                  }
                              ]
                          },
                          "type": "If"
                      },
                      "ObjectId": {
                          "runAfter": {
                              "ClusterId": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "ObjectId",
                                      "type": "string"
                                  }
                              ]
                          }
                      },
                      "ObjectName": {
                          "runAfter": {
                              "ObjectType": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "ObjectName",
                                      "type": "string",
                                      "value": "@{triggerBody()?['ObjectName']}"
                                  }
                              ]
                          }
                      },
                      "ObjectType": {
                          "runAfter": {
                              "ObjectId": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "ObjectType",
                                      "type": "string",
                                      "value": "@triggerBody()?['ObjectType']"
                                  }
                              ]
                          }
                      },
                      "Parse_Response_of_Get_VM_metadata": {
                          "runAfter": {
                              "Check_status_code_in_response_of_Get_VM_metadata": [
                                  "Succeeded"
                              ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                              "content": "@body('Get_VM_metadata')",
                              "schema": {
                                  "properties": {
                                      "data": {
                                          "properties": {
                                              "vSphereDetailData": {
                                                  "properties": {
                                                      "__typename": {
                                                          "type": "string"
                                                      },
                                                      "agentStatus": {
                                                          "properties": {
                                                              "__typename": {
                                                                  "type": "string"
                                                              },
                                                              "agentStatus": {
                                                                  "type": "string"
                                                              }
                                                          },
                                                          "type": [
                                                              "object",
                                                              "null"
                                                          ]
                                                      },
                                                      "arrayIntegrationEnabled": {
                                                          "type": "boolean"
                                                      },
                                                      "authorizedOperations": {
                                                          "items": {
                                                              "type": "string"
                                                          },
                                                          "type": "array"
                                                      },
                                                      "cdmLink": {
                                                          "type": "string"
                                                      },
                                                      "cluster": {
                                                          "properties": {
                                                              "__typename": {
                                                                  "type": "string"
                                                              },
                                                              "clusterNodeConnection": {
                                                                  "properties": {
                                                                      "__typename": {
                                                                          "type": "string"
                                                                      },
                                                                      "nodes": {
                                                                          "items": {
                                                                              "properties": {
                                                                                  "__typename": {
                                                                                      "type": "string"
                                                                                  },
                                                                                  "id": {
                                                                                      "type": "string"
                                                                                  },
                                                                                  "ipAddress": {
                                                                                      "type": "string"
                                                                                  },
                                                                                  "status": {
                                                                                      "type": "string"
                                                                                  }
                                                                              },
                                                                              "required": [
                                                                                  "id",
                                                                                  "status",
                                                                                  "ipAddress",
                                                                                  "__typename"
                                                                              ],
                                                                              "type": "object"
                                                                          },
                                                                          "type": "array"
                                                                      }
                                                                  },
                                                                  "type": "object"
                                                              },
                                                              "connectivityLastUpdated": {
                                                                  "type": "string"
                                                              },
                                                              "globalManagerConnectivityStatus": {
                                                                  "properties": {
                                                                      "__typename": {
                                                                          "type": "string"
                                                                      },
                                                                      "urls": {
                                                                          "items": {
                                                                              "properties": {
                                                                                  "__typename": {
                                                                                      "type": "string"
                                                                                  },
                                                                                  "isReachable": {
                                                                                      "type": "boolean"
                                                                                  },
                                                                                  "url": {
                                                                                      "type": "string"
                                                                                  }
                                                                              },
                                                                              "required": [
                                                                                  "url",
                                                                                  "isReachable",
                                                                                  "__typename"
                                                                              ],
                                                                              "type": "object"
                                                                          },
                                                                          "type": "array"
                                                                      }
                                                                  },
                                                                  "type": "object"
                                                              },
                                                              "id": {
                                                                  "type": "string"
                                                              },
                                                              "lastConnectionTime": {
                                                                  "type": "string"
                                                              },
                                                              "name": {
                                                                  "type": "string"
                                                              },
                                                              "passesConnectivityCheck": {
                                                                  "type": "boolean"
                                                              },
                                                              "state": {
                                                                  "properties": {
                                                                      "__typename": {
                                                                          "type": "string"
                                                                      },
                                                                      "clusterRemovalState": {
                                                                          "type": "string"
                                                                      },
                                                                      "connectedState": {
                                                                          "type": "string"
                                                                      }
                                                                  },
                                                                  "type": "object"
                                                              },
                                                              "status": {
                                                                  "type": "string"
                                                              },
                                                              "version": {
                                                                  "type": "string"
                                                              }
                                                          },
                                                          "type": "object"
                                                      },
                                                      "effectiveSlaDomain": {
                                                          "properties": {
                                                              "__typename": {
                                                                  "type": "string"
                                                              },
                                                              "cluster": {
                                                                  "properties": {
                                                                      "__typename": {
                                                                          "type": "string"
                                                                      },
                                                                      "id": {
                                                                          "type": "string"
                                                                      },
                                                                      "name": {
                                                                          "type": "string"
                                                                      }
                                                                  },
                                                                  "type": "object"
                                                              },
                                                              "fid": {
                                                                  "type": "string"
                                                              },
                                                              "id": {
                                                                  "type": "string"
                                                              },
                                                              "name": {
                                                                  "type": "string"
                                                              }
                                                          },
                                                          "type": "object"
                                                      },
                                                      "effectiveSlaSourceObject": {
                                                          "properties": {
                                                              "__typename": {
                                                                  "type": "string"
                                                              },
                                                              "fid": {
                                                                  "type": "string"
                                                              },
                                                              "name": {
                                                                  "type": "string"
                                                              },
                                                              "objectType": {
                                                                  "type": "string"
                                                              }
                                                          },
                                                          "type": "object"
                                                      },
                                                      "id": {
                                                          "type": "string"
                                                      },
                                                      "isRelic": {
                                                          "type": "boolean"
                                                      },
                                                      "logicalPath": {
                                                          "items": {
                                                              "properties": {
                                                                  "__typename": {
                                                                      "type": "string"
                                                                  },
                                                                  "fid": {
                                                                      "type": "string"
                                                                  },
                                                                  "name": {
                                                                      "type": "string"
                                                                  },
                                                                  "objectType": {
                                                                      "type": "string"
                                                                  }
                                                              },
                                                              "required": [
                                                                  "fid",
                                                                  "objectType",
                                                                  "name",
                                                                  "__typename"
                                                              ],
                                                              "type": "object"
                                                          },
                                                          "type": "array"
                                                      },
                                                      "name": {
                                                          "type": "string"
                                                      },
                                                      "newestSnapshot": {
                                                          "properties": {
                                                              "__typename": {
                                                                  "type": "string"
                                                              },
                                                              "date": {
                                                                  "type": "string"
                                                              },
                                                              "id": {
                                                                  "type": "string"
                                                              },
                                                              "isIndexed": {
                                                                  "type": "boolean"
                                                              }
                                                          },
                                                          "type": "object"
                                                      },
                                                      "oldestSnapshot": {
                                                          "properties": {
                                                              "__typename": {
                                                                  "type": "string"
                                                              },
                                                              "date": {
                                                                  "type": "string"
                                                              },
                                                              "id": {
                                                                  "type": "string"
                                                              },
                                                              "isIndexed": {
                                                                  "type": "boolean"
                                                              }
                                                          },
                                                          "type": "object"
                                                      },
                                                      "onDemandSnapshotCount": {
                                                          "type": "integer"
                                                      },
                                                      "physicalPath": {
                                                          "items": {
                                                              "properties": {
                                                                  "__typename": {
                                                                      "type": "string"
                                                                  },
                                                                  "fid": {
                                                                      "type": "string"
                                                                  },
                                                                  "name": {
                                                                      "type": "string"
                                                                  },
                                                                  "objectType": {
                                                                      "type": "string"
                                                                  }
                                                              },
                                                              "required": [
                                                                  "fid",
                                                                  "objectType",
                                                                  "name",
                                                                  "__typename"
                                                              ],
                                                              "type": "object"
                                                          },
                                                          "type": "array"
                                                      },
                                                      "primaryClusterLocation": {
                                                          "properties": {
                                                              "__typename": {
                                                                  "type": "string"
                                                              },
                                                              "id": {
                                                                  "type": "string"
                                                              },
                                                              "name": {
                                                                  "type": "string"
                                                              }
                                                          },
                                                          "type": "object"
                                                      },
                                                      "protectionDate": {
                                                          "type": "string"
                                                      },
                                                      "replicatedObjects": {
                                                          "items": {
                                                              "properties": {
                                                                  "__typename": {
                                                                      "type": "string"
                                                                  },
                                                                  "cluster": {
                                                                      "properties": {
                                                                          "__typename": {
                                                                              "type": "string"
                                                                          },
                                                                          "id": {
                                                                              "type": "string"
                                                                          },
                                                                          "name": {
                                                                              "type": "string"
                                                                          }
                                                                      },
                                                                      "type": "object"
                                                                  },
                                                                  "id": {
                                                                      "type": "string"
                                                                  },
                                                                  "primaryClusterLocation": {
                                                                      "properties": {
                                                                          "__typename": {
                                                                              "type": "string"
                                                                          },
                                                                          "id": {
                                                                              "type": "string"
                                                                          },
                                                                          "name": {
                                                                              "type": "string"
                                                                          }
                                                                      },
                                                                      "type": "object"
                                                                  }
                                                              },
                                                              "required": [
                                                                  "id",
                                                                  "primaryClusterLocation",
                                                                  "cluster",
                                                                  "__typename"
                                                              ],
                                                              "type": "object"
                                                          },
                                                          "type": "array"
                                                      },
                                                      "reportWorkload": {
                                                          "properties": {
                                                              "__typename": {
                                                                  "type": "string"
                                                              },
                                                              "archiveStorage": {
                                                                  "type": "integer"
                                                              },
                                                              "id": {
                                                                  "type": "string"
                                                              },
                                                              "logicalBytes": {
                                                                  "type": "integer"
                                                              },
                                                              "physicalBytes": {
                                                                  "type": "integer"
                                                              }
                                                          },
                                                          "type": "object"
                                                      },
                                                      "snapshotConsistencyMandate": {
                                                          "type": "string"
                                                      },
                                                      "totalSnapshots": {
                                                          "properties": {
                                                              "__typename": {
                                                                  "type": "string"
                                                              },
                                                              "count": {
                                                                  "type": "integer"
                                                              }
                                                          },
                                                          "type": "object"
                                                      },
                                                      "vmwareToolsInstalled": {
                                                          "type": "boolean"
                                                      },
                                                      "vsphereTagPath": {
                                                          "items": {
                                                              "properties": {
                                                                  "__typename": {
                                                                      "type": "string"
                                                                  },
                                                                  "fid": {
                                                                      "type": "string"
                                                                  },
                                                                  "name": {
                                                                      "type": "string"
                                                                  },
                                                                  "objectType": {
                                                                      "type": "string"
                                                                  }
                                                              },
                                                              "required": [
                                                                  "fid",
                                                                  "objectType",
                                                                  "name",
                                                                  "__typename"
                                                              ],
                                                              "type": "object"
                                                          },
                                                          "type": "array"
                                                      }
                                                  },
                                                  "type": "object"
                                              }
                                          },
                                          "type": "object"
                                      }
                                  },
                                  "type": "object"
                              }
                          }
                      },
                      "Response": {
                          "runAfter": {
                              "Does_Create_Snapshot_for_evidence_get_status_code_200": [
                                  "Failed",
                                  "TimedOut",
                                  "Skipped",
                                  "Succeeded"
                              ],
                              "Is_IOC_Scan_successful_(check_for_ERROR)": [
                                  "TimedOut",
                                  "Skipped",
                                  "Failed",
                                  "Succeeded"
                              ],
                              "Is_IOC_Scan_successful_(check_for_FINISHED)": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Skipped",
                                  "Failed"
                              ],
                              "Is_IOC_Scan_successful_(check_for_RUNNING)": [
                                  "Failed",
                                  "Skipped",
                                  "TimedOut",
                                  "Succeeded"
                              ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                              "body": {
                                  "message after start IOC Scan": "@{variables('ErrorMessage')}",
                                  "message from snapshot creation": "@{variables('ErrorMessage1')}",
                                  "status": "SUCCESSED"
                              },
                              "statusCode": "@if(or(contains(variables('ErrorMessage'),'Statuc Code'),contains(variables('ErrorMessage1'),'Status Code')),400,200)"
                          }
                      },
                      "Response_RubrikIOCScan": {
                          "runAfter": {
                              "Check_response_has_error_or_not": [
                                  "Succeeded"
                              ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                              "content": "@body('RubrikIOCScan')",
                              "schema": {
                                  "properties": {
                                      "RadarIOCScan": {
                                          "type": [
                                              "object",
                                              "null"
                                          ]
                                      },
                                      "RadarIOCScanStatus": {
                                          "type": "string"
                                      },
                                      "RecoverableSnapshotid": {
                                          "type": "string"
                                      },
                                      "error": {
                                          "type": "string"
                                      },
                                      "isLatestInfected": {
                                          "type": "boolean"
                                      }
                                  },
                                  "type": "object"
                              }
                          }
                      },
                      "RubrikIOCScan": {
                          "runAfter": {
                              "Check_if_URLs_is_provided_to_fetch_yara_rule": [
                                  "Succeeded"
                              ]
                          },
                          "type": "Workflow",
                          "inputs": {
                              "body": {
                                  "BaseUrl": "@triggerBody()?['BaseUrl']",
                                  "ClusterId": "@triggerBody()?['ClusterId']",
                                  "EndDate": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['end date to initiate']",
                                  "IOCHash": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc hash to scan for']",
                                  "IOCPath": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc path to scan for']",
                                  "IOCYaraRule": "@variables('Yara Rule')",
                                  "Limit": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['limit to loop the IOC scan sub-playbook']",
                                  "ObjectId": "@triggerBody()?['ObjectId']",
                                  "PathsToExclude": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['paths to exclude in the IOC Scan']",
                                  "PathsToExempt": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['paths to exempt in the IOC Scan']",
                                  "PathsToInclude": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['paths to include in the IOC Scan']",
                                  "PollingInterval": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for IOC Scan']",
                                  "PollingTimeout": "@variables('Polling Timeout')",
                                  "ScanName": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['scan Name']",
                                  "StartDate": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['start date to initiate']",
                                  "TimeDelta": "@{body('Collect_IOC_scan_and_general_recovery_data')?['data']?['time Delta']}"
                              },
                              "host": {
                                  "triggerName": "manual",
                                  "workflow": {
                                      "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/RubrikIOCScan')]"
                                  }
                              }
                          }
                      },
                      "Set_Cluster_Name": {
                          "runAfter": {
                              "Initialize_Esxi_ClusterId": [
                                  "Succeeded"
                              ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                              "name": "ClusterName",
                              "value": "@body('Parse_Response_of_Get_VM_metadata')?['data']?['vSphereDetailData']?['cluster']?['name']"
                          }
                      },
                      "access_token": {
                          "runAfter": {
                              "Is_Authentication_Failed": [
                                  "Succeeded"
                              ]
                          },
                          "type": "InitializeVariable",
                          "inputs": {
                              "variables": [
                                  {
                                      "name": "access_token",
                                      "type": "string",
                                      "value": "@{body('Authentication')?['access_token']}"
                                  }
                              ]
                          }
                      },
                      "check_if_polling_time_out_is_less_then_or_equal_to_0_or_not": {
                          "actions": {
                              "Set_default_value_of_polling_timeout": {
                                  "runAfter": {},
                                  "type": "SetVariable",
                                  "inputs": {
                                      "name": "Polling Timeout",
                                      "value": 720
                                  }
                              }
                          },
                          "runAfter": {
                              "Initialize_yara_Rule": [
                                  "Succeeded"
                              ]
                          },
                          "expression": {
                              "and": [
                                  {
                                      "lessOrEquals": [
                                          "@variables('Polling Timeout')",
                                          0
                                      ]
                                  }
                              ]
                          },
                          "type": "If"
                      }
                  }
              },
              "parameters": {
                  "$connections": {
                      "value": {
                          "RubrikCustomConnector": {
                              "connectionId": "[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
                              "connectionName": "[variables('RubrikcustomconnectorConnectionName')]",
                              "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
                          },
                          "keyvault_1": {
                              "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                              "connectionName": "[variables('KeyvaultConnectionName')]",
                              "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                          },
                          "teams": {
                              "connectionId": "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                              "connectionName": "[variables('TeamsConnectionName')]",
                              "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
                          }
                      }
                  }
              }
          },
          "name": "[parameters('PlaybookName')]",
          "type": "Microsoft.Logic/workflows",
          "location": "[resourceGroup().location]",
          "tags": {
              "hidden-SentinelTemplateName": "RubrikRansomwareDiscoveryAndVMRecovery",
              "hidden-SentinelTemplateVersion": "1.0"
          },
          "identity": {
              "type": "SystemAssigned"
          },
          "apiVersion": "2017-07-01",
          "dependsOn": [
              "[resourceId('Microsoft.Web/connections', variables('RubrikcustomconnectorConnectionName'))]",
              "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
              "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
          ]
      },
      {
          "type": "Microsoft.Web/connections",
          "apiVersion": "2016-06-01",
          "name": "[variables('RubrikcustomconnectorConnectionName')]",
          "location": "[resourceGroup().location]",
          "kind": "V1",
          "properties": {
              "displayName": "[variables('RubrikcustomconnectorConnectionName')]",
              "customParameterValues": {},
              "api": {
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('Rubrik Connector name'))]"
              }
          }
      },
      {
          "type": "Microsoft.Web/connections",
          "apiVersion": "2016-06-01",
          "name": "[variables('KeyvaultConnectionName')]",
          "location": "[resourceGroup().location]",
          "kind": "V1",
          "properties": {
              "displayName": "[variables('KeyvaultConnectionName')]",
              "customParameterValues": {},
              "api": {
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
              },
              "parameterValues": {
                  "token:TenantId": "[parameters('tenantId')]",
                  "token:grantType": "code",
                  "vaultName": "[parameters('keyvaultName')]"
              }
          }
      },
      {
          "type": "Microsoft.Web/connections",
          "apiVersion": "2016-06-01",
          "name": "[variables('TeamsConnectionName')]",
          "location": "[resourceGroup().location]",
          "kind": "V1",
          "properties": {
              "displayName": "[variables('TeamsConnectionName')]",
              "customParameterValues": {},
              "api": {
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
              }
          }
      }
  ]
}
