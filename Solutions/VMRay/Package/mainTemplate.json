{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "VMRay",
    "comments": "Solution template for VMRay"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "_solutionName": "VMRay",
    "_solutionVersion": "3.0.0",
    "solutionId": "vmray.microsoft-sentinel-solution-vmray",
    "_solutionId": "[variables('solutionId')]",
    "VMRayEnrichment_FunctionAppConnector": "VMRayEnrichment_FunctionAppConnector",
    "_VMRayEnrichment_FunctionAppConnector": "[variables('VMRayEnrichment_FunctionAppConnector')]",
    "TemplateEmptyArray": "[json('[]')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "VMRayEnrichment_FunctionAppConnector",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-fa-',uniquestring(variables('_playbookContentId1'))))]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','fa','-', uniqueString(concat(variables('_solutionId'),'-','AzureFunction','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "Submit-URL-VMRay-Analyzer": "Submit-URL-VMRay-Analyzer",
    "_Submit-URL-VMRay-Analyzer": "[variables('Submit-URL-VMRay-Analyzer')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "Submit-URL-VMRay-Analyzer",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "blanks": "[replace('b', 'b', '')]",
    "VMRay-Sandbox_Outlook_Attachment": "VMRay-Sandbox_Outlook_Attachment",
    "_VMRay-Sandbox_Outlook_Attachment": "[variables('VMRay-Sandbox_Outlook_Attachment')]",
    "playbookVersion3": "1.0",
    "playbookContentId3": "VMRay-Sandbox_Outlook_Attachment",
    "_playbookContentId3": "[variables('playbookContentId3')]",
    "playbookId3": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId3'))]",
    "playbookTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId3'))))]",
    "_playbookcontentProductId3": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId3'),'-', variables('playbookVersion3'))))]",
    "uiConfigId1": "VMRay",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "VMRay",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "_dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VMRayEnrichment_FunctionAppConnector Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "vmrayBaseURL": {
              "type": "string",
              "defaultValue": "https://us.cloud.vmray.com",
              "minLength": 1
            },
            "vmrayAPIKey": {
              "type": "securestring",
              "defaultValue": "<VMRay API Key>",
              "minLength": 1
            },
            "Resubmit": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "If true, the sample will be resubmitted to VMRay analyser, even if the sample hash was found in VMRay."
              }
            },
            "FunctionAppName": {
              "defaultValue": "vmrayenrich",
              "type": "string"
            },
            "AppInsightsWorkspaceResourceID": {
              "type": "string",
              "metadata": {
                "description": "Migrate Classic Application Insights to Log Analytic Workspace which is retiring by 29 Febraury 2024. Use 'Log Analytic Workspace-->Properties' blade having 'Resource ID' property value. This is a fully qualified resourceId which is in format '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}'"
              }
            }
          },
          "variables": {
            "FunctionName": "[[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
            "StorageSuffix": "[[environment().suffixes.storage]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "playbookContentId1": "VMRayEnrichment_FunctionAppConnector",
            "playbookId1": "[[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[[variables('FunctionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "ApplicationId": "[[variables('FunctionName')]",
                "WorkspaceResourceId": "[[parameters('AppInsightsWorkspaceResourceID')]"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[[tolower(variables('FunctionName'))]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": "[variables('TemplateEmptyArray')]",
                  "ipRules": "[variables('TemplateEmptyArray')]",
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('FunctionName')))]"
              ],
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "properties": {
                "cors": {
                  "corsRules": "[variables('TemplateEmptyArray')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": false
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('FunctionName')))]"
              ],
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "properties": {
                "cors": {
                  "corsRules": "[variables('TemplateEmptyArray')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2018-11-01",
              "name": "[[variables('FunctionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('FunctionName')))]",
                "[[resourceId('Microsoft.Insights/components', variables('FunctionName'))]"
              ],
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "name": "[[variables('FunctionName')]",
                "httpsOnly": true,
                "clientAffinityEnabled": true,
                "alwaysOn": true,
                "reserved": true,
                "siteConfig": {
                  "linuxFxVersion": "python|3.11"
                }
              },
              "resources": [
                {
                  "apiVersion": "2018-11-01",
                  "type": "config",
                  "name": "appsettings",
                  "dependsOn": [
                    "[[concat('Microsoft.Web/sites/', variables('FunctionName'))]"
                  ],
                  "properties": {
                    "FUNCTIONS_EXTENSION_VERSION": "~4",
                    "FUNCTIONS_WORKER_RUNTIME": "python",
                    "APPINSIGHTS_INSTRUMENTATIONKEY": "[[reference(resourceId('Microsoft.insights/components', variables('FunctionName')), '2020-02-02').InstrumentationKey]",
                    "APPLICATIONINSIGHTS_CONNECTION_STRING": "[[reference(resourceId('microsoft.insights/components', variables('FunctionName')), '2020-02-02').ConnectionString]",
                    "AzureWebJobsStorage": "[[concat('DefaultEndpointsProtocol=https;AccountName=', toLower(variables('FunctionName')),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(variables('FunctionName'))), '2023-04-01').keys[0].value, ';EndpointSuffix=',toLower(variables('StorageSuffix')))]",
                    "vmrayBaseURL": "[[parameters('vmrayBaseURL')]",
                    "vmrayAPIKey": "[[parameters('vmrayAPIKey')]",
                    "Resubmit": "[[parameters('Resubmit')]",
                    "WEBSITE_RUN_FROM_PACKAGE": "https://github.com/vmray/ms-sentinel/raw/refs/heads/main/VMRayEnrichment/VMRayEnrichemntFuncApp.zip?raw=true"
                  }
                }
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default/azure-webjobs-hosts')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('FunctionName'), 'default')]",
                "[[resourceId('Microsoft.Storage/storageAccounts', variables('FunctionName'))]"
              ],
              "properties": {
                "publicAccess": "None"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default/azure-webjobs-secrets')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('FunctionName'), 'default')]",
                "[[resourceId('Microsoft.Storage/storageAccounts', variables('FunctionName'))]"
              ],
              "properties": {
                "publicAccess": "None"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default/', tolower(variables('FunctionName')))]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('FunctionName'), 'default')]",
                "[[resourceId('Microsoft.Storage/storageAccounts', variables('FunctionName'))]"
              ],
              "properties": {
                "shareQuota": 5120
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[[concat(variables('workspace-name'),'/Microsoft.SecurityInsights/',concat('AzureFunction-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "AzureFunction",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "VMRay",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "VMRay"
                },
                "support": {
                  "name": "VMRay",
                  "email": "support@vmray.com",
                  "tier": "Partner",
                  "link": "https://www.vmray.com/contact/customer-support/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "AzureFunction",
        "displayName": "VMRayEnrichment_FunctionAppConnector",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Submit-URL-VMRay-Analyzer Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Submit-URL-VMRay-Analyzer",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "WorkspaceID": {
              "defaultValue": "",
              "type": "String",
              "metadata": {
                "description": "Log Analytics Workspace ID"
              }
            },
            "FunctionAppName": {
              "defaultValue": "vmrayenrich",
              "type": "string",
              "metadata": {
                "description": "Name of the FunctionApp"
              }
            }
          },
          "variables": {
            "functionappName": "[[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "Indicator_Expiration_In_Days": {
                      "defaultValue": "30",
                      "type": "String"
                    },
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "body": {
                          "callback_url": "@listCallbackUrl()"
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Entities_-_Get_URLs": {
                      "runAfter": {
                        "Sorted_VMRay_VTIS": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "path": "/entities/url"
                      }
                    },
                    "For_each_URL": {
                      "foreach": "@body('Entities_-_Get_URLs')?['URLs']",
                      "actions": {
                        "UplaodURL": {
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "url": "@items('For_each_URL')['url']",
                              "tags": [
                                "url_submission_logic_app"
                              ]
                            },
                            "function": {
                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/UplaodURL')]"
                            }
                          }
                        },
                        "Check_if_the_status_is_200": {
                          "actions": {
                            "For_each_submission": {
                              "foreach": "@body('UplaodURL')?['vmray_submission']",
                              "actions": {
                                "Set_Submission_Status": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "submission_status",
                                    "value": false
                                  }
                                },
                                "Wait_untill_submission_is_completed": {
                                  "actions": {
                                    "Delay_By_2_minutes": {
                                      "type": "Wait",
                                      "inputs": {
                                        "interval": {
                                          "count": 2,
                                          "unit": "Minute"
                                        }
                                      }
                                    },
                                    "GetVMRaySubmission": {
                                      "runAfter": {
                                        "Delay_By_2_minutes": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Function",
                                      "inputs": {
                                        "body": {
                                          "submission_id": "@items('For_each_submission')['SubmissionID']"
                                        },
                                        "function": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/GetVMRaySubmission')]"
                                        }
                                      }
                                    },
                                    "Check_if_submission_is_completed": {
                                      "actions": {
                                        "Set_Submission_Status_to_True": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "submission_status",
                                            "value": true
                                          }
                                        },
                                        "GetVMRaySample": {
                                          "runAfter": {
                                            "Set_Submission_Status_to_True": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Function",
                                          "inputs": {
                                            "body": {
                                              "sample_id": "@body('GetVMRaySubmission')?['submission_sample_id']"
                                            },
                                            "function": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/GetVMRaySample')]"
                                            }
                                          }
                                        },
                                        "Check_If_Sample_Verdict_is_Suspicious_or_Malicious": {
                                          "actions": {
                                            "Set_Submission_Report_Variable": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "submission_report",
                                                "value": [
                                                  {
                                                    "Submission Status": "@body('GetVMRaySubmission')['submission_status']",
                                                    "Sample Verdict": "@body('GetVMRaySample')['sample_verdict']",
                                                    "Classification": "@body('GetVMRaySample')['sample_classifications']",
                                                    "Threat Names": "@body('GetVMRaySample')['sample_threat_names']",
                                                    "Link to the Full Report": "@body('GetVMRaySample')['sample_webif_url']",
                                                    "Submission ID": "@body('GetVMRaySubmission')['submission_id']",
                                                    "Sample ID": "@body('GetVMRaySample')['sample_id']",
                                                    "Notes": "@body('GetVMRaySample')['sample_verdict_reason_description']"
                                                  }
                                                ]
                                              }
                                            },
                                            "Create_HTML_table": {
                                              "runAfter": {
                                                "Set_Submission_Report_Variable": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Table",
                                              "inputs": {
                                                "from": "@variables('submission_report')",
                                                "format": "HTML"
                                              }
                                            },
                                            "Add_comment_to_incident_(V3)": {
                                              "runAfter": {
                                                "Create_HTML_table": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "ApiConnection",
                                              "inputs": {
                                                "host": {
                                                  "connection": {
                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                  }
                                                },
                                                "method": "post",
                                                "body": {
                                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                                  "message": "<p class=\"editor-paragraph\">VMRay Submission Details for URL: @{replace(replace(items('For_each_URL')?['url'],'https://',''),'http://','')}</p><p class=\"editor-paragraph\">@{body('Create_HTML_table')}@{body('Create_HTML_table_2')}</p>"
                                                },
                                                "path": "/Incidents/Comment"
                                              }
                                            },
                                            "GetVMRayIOCs": {
                                              "runAfter": {
                                                "Add_comment_to_incident_(V3)": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Function",
                                              "inputs": {
                                                "body": {
                                                  "sample_id": "@body('GetVMRaySample')['sample_id']",
                                                  "submission_id": "@body('GetVMRaySubmission')['submission_id']",
                                                  "sample_verdict": [
                                                    "malicious",
                                                    "suspicious"
                                                  ],
                                                  "incident_id": "@triggerBody()?['object']?['properties']?['incidentNumber']",
                                                  "valid_until": "@parameters('Indicator_Expiration_In_Days')"
                                                },
                                                "function": {
                                                  "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/GetVMRayIOCs')]"
                                                }
                                              }
                                            },
                                            "Check_if_VMRay_has_any_indicators_for_the_sample": {
                                              "type": "If",
                                              "expression": {
                                                "and": [
                                                  {
                                                    "greater": [
                                                      "@length(body('GetVMRayIOCs')['custom_resp'])",
                                                      0
                                                    ]
                                                  }
                                                ]
                                              },
                                              "actions": {
                                                "Threat_Intelligence_-_Upload_Indicators_of_Compromise_(V2)_(Preview)": {
                                                  "type": "ApiConnection",
                                                  "inputs": {
                                                    "host": {
                                                      "connection": {
                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                      }
                                                    },
                                                    "method": "post",
                                                    "body": {
                                                      "sourcesystem": "VMRayThreatIntelligence",
                                                      "indicators": "@body('GetVMRayIOCs')['custom_resp']"
                                                    },
                                                    "path": "/V2/ThreatIntelligence/@{encodeURIComponent(triggerBody()?['workspaceId'])}/UploadIndicators/"
                                                  }
                                                }
                                              },
                                              "runAfter": {
                                                "GetVMRayIOCs": [
                                                  "Succeeded"
                                                ]
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Create_HTML_table_2": [
                                              "Succeeded"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Set_Submission_Report_Variable_01": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "submission_report",
                                                  "value": [
                                                    {
                                                      "Submission Status": "@body('GetVMRaySubmission')['submission_status']",
                                                      "Sample Verdict": "@body('GetVMRaySample')['sample_verdict']",
                                                      "Classification": "@body('GetVMRaySample')['sample_classifications']",
                                                      "Threat Names": "@body('GetVMRaySample')['sample_threat_names']",
                                                      "Link to the Full Report": "@body('GetVMRaySample')['sample_webif_url']",
                                                      "Submission ID": "@body('GetVMRaySubmission')['submission_id']",
                                                      "Sample ID": "@body('GetVMRaySample')['sample_id']",
                                                      "Notes": "@body('GetVMRaySample')['sample_verdict_reason_description']"
                                                    }
                                                  ]
                                                }
                                              },
                                              "Create_HTML_table_1": {
                                                "runAfter": {
                                                  "Set_Submission_Report_Variable_01": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "Table",
                                                "inputs": {
                                                  "from": "@variables('submission_report')",
                                                  "format": "HTML"
                                                }
                                              },
                                              "Add_comment_to_incident_(V3)_1": {
                                                "runAfter": {
                                                  "Create_HTML_table_1": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                  "host": {
                                                    "connection": {
                                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                  },
                                                  "method": "post",
                                                  "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p class=\"editor-paragraph\">VMRay Submission Details for URL: @{replace(replace(items('For_each_URL')?['url'],'https://',''),'http://','')}<br>@{body('Create_HTML_table_1')}@{body('Create_HTML_table_2')}</p>"
                                                  },
                                                  "path": "/Incidents/Comment"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "not": {
                                                  "equals": [
                                                    "@body('GetVMRaySample')['sample_verdict']",
                                                    "clean"
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "vmrayenrichcox-GetVMRayVTIs": {
                                          "runAfter": {
                                            "GetVMRaySample": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Function",
                                          "inputs": {
                                            "body": {
                                              "sample_id": "@body('GetVMRaySubmission')?['submission_sample_id']"
                                            },
                                            "function": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/GetVMRayVTIs')]"
                                            }
                                          }
                                        },
                                        "Set_VTIS": {
                                          "runAfter": {
                                            "vmrayenrichcox-GetVMRayVTIs": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "sample_vtis",
                                            "value": "@body('vmrayenrichcox-GetVMRayVTIs')['threat_indicators']"
                                          }
                                        },
                                        "Create_HTML_table_2": {
                                          "runAfter": {
                                            "Set_variable": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Table",
                                          "inputs": {
                                            "from": "@reverse(variables('sorted_vmray_vtis'))",
                                            "format": "HTML"
                                          }
                                        },
                                        "For_each_VTI": {
                                          "foreach": "@variables('sample_vtis')",
                                          "actions": {
                                            "Compose": {
                                              "type": "Compose",
                                              "inputs": {
                                                "Severity": "@items('For_each_VTI')?['score']",
                                                "Category": "@items('For_each_VTI')?['category']",
                                                "Operation": "@items('For_each_VTI')?['operation']",
                                                "Classifications": "@items('For_each_VTI')?['classifications']"
                                              }
                                            },
                                            "Append_to_array_variable": {
                                              "runAfter": {
                                                "Compose": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "AppendToArrayVariable",
                                              "inputs": {
                                                "name": "vmray_vtis",
                                                "value": "@outputs('Compose')"
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "Set_variable_2": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Foreach"
                                        },
                                        "Set_variable": {
                                          "runAfter": {
                                            "For_each_VTI": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "sorted_vmray_vtis",
                                            "value": "@sort(variables('vmray_vtis'), 'Severity')"
                                          }
                                        },
                                        "Set_variable_1": {
                                          "runAfter": {
                                            "Set_VTIS": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "vmray_vtis",
                                            "value": "@null"
                                          }
                                        },
                                        "Set_variable_2": {
                                          "runAfter": {
                                            "Set_variable_1": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "sorted_vmray_vtis",
                                            "value": "@null"
                                          }
                                        }
                                      },
                                      "runAfter": {
                                        "GetVMRaySubmission": [
                                          "Succeeded"
                                        ]
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@body('GetVMRaySubmission')?['submission_finished']",
                                              true
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "runAfter": {
                                    "Set_Submission_Status": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": "@equals(variables('submission_status'),true)",
                                  "limit": {
                                    "count": 60,
                                    "timeout": "PT1H"
                                  },
                                  "type": "Until"
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "UplaodURL": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Comment_to_incident": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel-1']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p class=\"editor-paragraph\">Invalid API Response</p>"
                                  },
                                  "path": "/Incidents/Comment"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('UplaodURL')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_URLs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "SubmissionReportforTable": {
                      "runAfter": {
                        "check_submission_status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "submission_report",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "check_submission_status": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "submission_status",
                            "type": "boolean",
                            "value": false
                          }
                        ]
                      }
                    },
                    "Sample_VTIS": {
                      "runAfter": {
                        "SubmissionReportforTable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "sample_vtis",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "VMRay_VTIS": {
                      "runAfter": {
                        "Sample_VTIS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "vmray_vtis",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Sorted_VMRay_VTIS": {
                      "runAfter": {
                        "VMRay_VTIS": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "sorted_vmray_vtis",
                            "type": "array"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "VMRay",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "VMRay"
                },
                "support": {
                  "name": "VMRay",
                  "email": "support@vmray.com",
                  "tier": "Partner",
                  "link": "https://www.vmray.com/contact/customer-support/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_VMRayEnrichment_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "VMRay URL Analyis",
            "description": "Submits a url or set of urls associated with an incident to VMRay for Analyis.",
            "prerequisites": "VMRay API Key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2025-02-20T00:00:00Z",
            "entities": [
              "url"
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "Submit-URL-VMRay-Analyzer",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VMRay-Sandbox_Outlook_Attachment Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion3')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VMRay-Sandbox_Outlook_Attachment",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "WorkspaceName": {
              "defaultValue": "",
              "type": "String",
              "metadata": {
                "description": "Log Analytics Workspace name"
              }
            },
            "WorkspaceID": {
              "defaultValue": "",
              "type": "String",
              "metadata": {
                "description": "Log Analytics Workspace ID"
              }
            },
            "FunctionAppName": {
              "defaultValue": "vmrayenrich",
              "type": "string",
              "metadata": {
                "description": "Name of the FunctionApp"
              }
            }
          },
          "variables": {
            "functionappName": "[[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "Office365V1": "[[concat('office365-', parameters('PlaybookName'))]",
            "subscription": "[[last(split(subscription().id, '/'))]",
            "resourceGroupName": "[[resourceGroup().name]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/office365')]",
            "_connection-1": "[[variables('connection-1')]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('Office365V1')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('Office365V1')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('Office365V1'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Disabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "Indicator_Expiration_In_Days": {
                      "defaultValue": "30",
                      "type": "String"
                    },
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "When_a_new_email_arrives_(V3)": {
                      "splitOn": "@triggerBody()?['value']",
                      "type": "ApiConnectionNotification",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['office365']['connectionId']"
                          }
                        },
                        "fetch": {
                          "pathTemplate": {
                            "template": "/v3/Mail/OnNewEmail"
                          },
                          "method": "get",
                          "queries": {
                            "importance": "Any",
                            "fetchOnlyWithAttachment": true,
                            "includeAttachments": true,
                            "folderPath": "Inbox"
                          }
                        },
                        "subscribe": {
                          "body": {
                            "NotificationUrl": "@listCallbackUrl()"
                          },
                          "pathTemplate": {
                            "template": "/GraphMailSubscriptionPoke/$subscriptions"
                          },
                          "method": "post",
                          "queries": {
                            "importance": "Any",
                            "fetchOnlyWithAttachment": true,
                            "folderPath": "Inbox"
                          }
                        }
                      }
                    }
                  },
                  "actions": {
                    "Submission_Status": {
                      "runAfter": {
                        "Submission_Object": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "submission_status",
                            "type": "boolean",
                            "value": false
                          }
                        ]
                      }
                    },
                    "Submission_Report": {
                      "runAfter": {
                        "Submission_Status": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "submission_report",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Email_Body": {
                      "runAfter": {
                        "Submission_Report": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "email_body",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "File_Name": {
                      "runAfter": {
                        "Email_Body": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "file_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Submission_Object": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "submissin_obj",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "For_Every_Attachment": {
                      "foreach": "@triggerBody()?['attachments']",
                      "actions": {
                        "VMRayUploadSample": {
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "file": "@item()?['contentBytes']",
                              "name": "@item()?['name']",
                              "tags": [
                                "outlook_attachment_logic_app_submission"
                              ]
                            },
                            "function": {
                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/VMRayUploadSample')]"
                            }
                          }
                        },
                        "Append_to_Submission_Object_to_Variable": {
                          "runAfter": {
                            "VMRayUploadSample": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "submissin_obj",
                            "value": {
                              "submission_id": "@body('VMRayUploadSample')['vmray_submission']",
                              "filename": "@variables('file_name')"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "File_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_Every_Submission_Object": {
                      "foreach": "@variables('submissin_obj')",
                      "actions": {
                        "Set_Submission_Status_to_False": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "submission_status",
                            "value": false
                          }
                        },
                        "Wait_untill_submission_is_completed": {
                          "actions": {
                            "GetVMRaySubmission": {
                              "type": "Function",
                              "inputs": {
                                "body": {
                                  "submission_id": "@items('For_Every_Submission_Object')['submission_id'][0]['SubmissionID']"
                                },
                                "function": {
                                  "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/GetVMRaySubmission')]"
                                }
                              }
                            },
                            "Check_If_Submission_is_finished": {
                              "actions": {
                                "GetVMRaySample": {
                                  "type": "Function",
                                  "inputs": {
                                    "body": {
                                      "sample_id": "@body('GetVMRaySubmission')?['submission_sample_id']"
                                    },
                                    "function": {
                                      "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/GetVMRaySample')]"
                                    }
                                  }
                                },
                                "Check_If_Sample_Verdict_is_Malicious_or_Suspicious": {
                                  "actions": {
                                    "Set_submission_report": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "submission_report",
                                        "value": [
                                          {
                                            "Submission ID": "@body('GetVMRaySubmission')['submission_id']",
                                            "Submission Status": "@body('GetVMRaySubmission')['submission_status']",
                                            "Sample ID": "@body('GetVMRaySample')['sample_id']",
                                            "Sample Classifications": "@body('GetVMRaySample')['sample_classifications']",
                                            "Sample Threat Names": "@body('GetVMRaySample')['sample_threat_names']",
                                            "Sample Webif URL": "@body('GetVMRaySample')['sample_webif_url']",
                                            "Sample Verdict": "@body('GetVMRaySample')['sample_verdict']",
                                            "Sample VTI Score": "@body('GetVMRaySample')['sample_vti_score']",
                                            "Sample Verdict Reason Code": "@body('GetVMRaySample')['sample_verdict_reason_code']",
                                            "Sample Verdict Reason Description": "@body('GetVMRaySample')['sample_verdict_reason_description']"
                                          }
                                        ]
                                      }
                                    },
                                    "Create_HTML_table": {
                                      "runAfter": {
                                        "Set_submission_report": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Table",
                                      "inputs": {
                                        "from": "@variables('submission_report')",
                                        "format": "HTML"
                                      }
                                    },
                                    "Create_incident": {
                                      "runAfter": {
                                        "Create_HTML_table": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "put",
                                        "body": {
                                          "title": "VMRay Email Attachment Scan Submission Details for file - @{body('GetVMRaySample')['sample_filename']}",
                                          "severity": "Medium",
                                          "status": "New",
                                          "description": "VMRay Email Attachment Scan . From:@{triggerBody()?['from']} . To: @{triggerBody()?['toRecipients']}"
                                        },
                                        "path": "[[concat('/Incidents/subscriptions/',variables('subscription'),'/resourceGroups/',variables('resourceGroupName'),'/workspaces/',parameters('WorkspaceName'))]"
                                      }
                                    },
                                    "Add_comment_to_incident_(V3)": {
                                      "runAfter": {
                                        "Create_incident": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "body": {
                                          "incidentArmId": "@body('Create_incident')?['id']",
                                          "message": "<p class=\"editor-paragraph\">VMRay Submission for File - @{items('For_Every_Submission_Object')['filename']}<br>@{body('Create_HTML_table')}</p>"
                                        },
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "GetVMRayIOCs": {
                                      "runAfter": {
                                        "Add_comment_to_incident_(V3)": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Function",
                                      "inputs": {
                                        "body": {
                                          "sample_id": "@body('GetVMRaySample')['sample_id']",
                                          "submission_id": "@body('GetVMRaySubmission')['submission_id']",
                                          "sample_verdict": [
                                            "malicious",
                                            "suspicious"
                                          ],
                                          "incident_id": "@body('Create_incident')?['properties']?['incidentNumber']",
                                          "valid_until": "@parameters('Indicator_Expiration_In_Days')"
                                        },
                                        "function": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/GetVMRayIOCs')]"
                                        }
                                      }
                                    },
                                    "Check_if_VMRay_has_any_indicators_for_the_sample": {
                                      "actions": {
                                        "Threat_Intelligence_-_Upload_Indicators_of_Compromise_(V2)_(Preview)": {
                                          "type": "ApiConnection",
                                          "inputs": {
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                              }
                                            },
                                            "method": "post",
                                            "body": {
                                              "sourcesystem": "VMRayThreatIntelligence",
                                              "indicators": "@body('GetVMRayIOCs')['custom_resp']"
                                            },
                                            "path": "[[concat('/V2/ThreatIntelligence/',parameters('WorkspaceID'),'/UploadIndicators/')]"
                                          }
                                        }
                                      },
                                      "runAfter": {
                                        "GetVMRayIOCs": [
                                          "Succeeded"
                                        ]
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "greater": [
                                              "@length(body('GetVMRayIOCs')['custom_resp'])",
                                              0
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    },
                                    "Set_email_body": {
                                      "runAfter": {
                                        "Check_if_VMRay_has_any_indicators_for_the_sample": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "email_body",
                                        "value": "<p class=\"editor-paragraph\">\n<table style=\"width: 100%; border-collapse: collapse; background-color: #f0f0f0;\">\n<thead>\n<tr>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Submission ID</th>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Submission Status</th>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Sample ID</th>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Sample Classifications</th>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Sample Threat Names</th>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Sample Webif URL</th>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Sample Verdict</th>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Sample VTI Score</th>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Sample Verdict Reason Code</th>\n<th style=\"background-color: #002a46; color: white; padding: 10px; text-align: left; border: 1px solid #ddd;\">Sample Verdict Reason Description</th>\n</tr>\n</thead>\n<tbody>\n<tr style=\"background-color: #ffffff; border-bottom: 1px solid #ddd;\">\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySubmission')['submission_id']}</td>\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySubmission')['submission_status']}</td>\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySample')['sample_id']}</td>\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySample')['sample_classifications']}</td>\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySample')['sample_threat_names']}</td>\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySample')['sample_webif_url']}</td>\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySample')['sample_verdict']}</td>\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySample')['sample_vti_score']}</td>\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySample')['sample_verdict_reason_code']}</td>\n<td style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">@{body('GetVMRaySample')['sample_verdict_reason_description']}</td>\n</tr>\n</tbody>\n</table>\n</p>\n"
                                      }
                                    },
                                    "Send_an_email_(V2)": {
                                      "runAfter": {
                                        "Set_email_body": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['office365']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "body": {
                                          "To": "abc@abc.com",
                                          "Subject": "VMRay Email Attachment Scan for file - @{body('GetVMRaySample')['sample_filename']}",
                                          "Body": "<p class=\"editor-paragraph\">@{variables('email_body')}</p>",
                                          "Importance": "Normal"
                                        },
                                        "path": "/v2/Mail"
                                      }
                                    },
                                    "Set_Submission_Status_to_True": {
                                      "runAfter": {
                                        "Send_an_email_(V2)": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "submission_status",
                                        "value": true
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "GetVMRaySample": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@body('GetVMRaySample')['sample_verdict']",
                                            "clean"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "runAfter": {
                                "GetVMRaySubmission": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Delay_by_2_minutes": {
                                    "type": "Wait",
                                    "inputs": {
                                      "interval": {
                                        "count": 2,
                                        "unit": "Minute"
                                      }
                                    }
                                  },
                                  "Set_submission_status_to_false_again": {
                                    "runAfter": {
                                      "Delay_by_2_minutes": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "submission_status",
                                      "value": false
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('GetVMRaySubmission')['submission_finished']",
                                      true
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "runAfter": {
                            "Set_Submission_Status_to_False": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('submission_status'),true)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "For_Every_Attachment": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "office365": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('Office365V1'))]",
                        "connectionName": "[[variables('Office365V1')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/office365')]"
                      },
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId3'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId3')]",
                "contentId": "[variables('_playbookContentId3')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "VMRay",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "VMRay"
                },
                "support": {
                  "name": "VMRay",
                  "email": "support@vmray.com",
                  "tier": "Partner",
                  "link": "https://www.vmray.com/contact/customer-support/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_VMRayEnrichment_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "VMRay Email Attachment Analyis",
            "description": "Submits a attachment or set of attachment associated with an office 365 email to VMRay for Analyis.",
            "prerequisites": "VMRay API Key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2025-02-20T00:00:00Z",
            "entities": [
              ""
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId3')]",
        "contentKind": "Playbook",
        "displayName": "VMRay-Sandbox_Outlook_Attachment",
        "contentProductId": "[variables('_playbookcontentProductId3')]",
        "id": "[variables('_playbookcontentProductId3')]",
        "version": "[variables('playbookVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VMRay data connector with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "VMRayThreatIntelligence (using Azure Functions)",
                  "publisher": "VMRay",
                  "descriptionMarkdown": "VMRayThreatIntelligence connector automatically generates and feeds threat intelligence for all submissions to VMRay, improving threat detection and incident response in Sentinel. This seamless integration empowers teams to proactively address emerging threats.",
                  "graphQueries": [
                    {
                      "metricName": "VMRay Threat Indicators data received",
                      "legend": "ThreatIntelligenceIndicator | where SourceSystem contains 'VMRay'",
                      "baseQuery": "ThreatIntelligenceIndicator | where SourceSystem contains 'VMRay'"
                    },
                    {
                      "metricName": "Non-VMRay Threat Indicators data received",
                      "legend": "ThreatIntelligenceIndicator | where SourceSystem !contains 'VMRay'",
                      "baseQuery": "ThreatIntelligenceIndicator | where SourceSystem !contains 'VMRay'"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "VMRay Based Indicators Events - All VMRay threat indicators in Microsoft Sentinel Threat Intelligence.",
                      "query": "ThreatIntelligenceIndicator\n | where SourceSystem contains 'VMRay'\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Non-VMRay Based Indicators Events - All Non-VMRay threat indicators in Microsoft Sentinel Threat Intelligence.",
                      "query": "ThreatIntelligenceIndicator\n | where SourceSystem !contains 'VMRay'\n | sort by TimeGenerated desc"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "ThreatIntelligenceIndicator",
                      "lastDataReceivedQuery": "ThreatIntelligenceIndicator\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "ThreatIntelligenceIndicator\n            | where SourceSystem contains 'VMRay'\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Report_links_data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "ThreatIntelligenceIndicator\n             | where SourceSystem !contains 'VMRay'\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions on the workspace are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Azure Subscription",
                        "description": "Azure Subscription with owner role is required to register an application in azure active directory() and assign role of contributor to app in resource group."
                      },
                      {
                        "name": "Microsoft.Web/sites permissions",
                        "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
                      },
                      {
                        "name": "REST API Credentials/permissions",
                        "description": "**VMRay API Key** is required."
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This connector uses Azure Functions to connect to the VMRay API to pull VMRay Threat IOCs into Microsoft Sentinel. This might result in additional costs for data ingestion and for storing data in Azure Blob Storage costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) and [Azure Blob Storage pricing page](https://azure.microsoft.com/pricing/details/storage/blobs/) for details."
                    },
                    {
                      "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
                    },
                    {
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Primary Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ]
                    },
                    {
                      "description": "Use this method for automated deployment of the data connector using an ARM Template.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-VMRay-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Application ID**, **Tenant ID**,**Client Secret**, **VMRay API Key**, **VMRay Initial Fetch Date**, **TimeInterval** and deploy.\n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**.\n5. Click **Purchase** to deploy.",
                      "title": "Option 1 - Azure Resource Manager (ARM) Template for Flex Consumption Plan"
                    },
                    {
                      "description": "Use this method for automated deployment of the data connector using an ARM Template.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-VMRay-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Application ID**, **Tenant ID**,**Client Secret**, **VMRay API Key**, **VMRay Initial Fetch Date**, **TimeInterval** and deploy.\n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**.\n5. Click **Purchase** to deploy.",
                      "title": "Option 1 - Azure Resource Manager (ARM) Template for Premium Plan"
                    },
                    {
                      "description": "Use the following step-by-step instructions to deploy the VMRay data connector manually with Azure Functions (Deployment via Visual Studio Code).",
                      "title": "Option 2 - Manual Deployment of Azure Functions"
                    },
                    {
                      "description": "**1. Deploy a Function App**\n\n> NOTE:You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-VMRay-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. VMRayXXX).\n\n\te. **Select a runtime:** Choose Python 3.11.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
                    },
                    {
                      "description": "**2. Configure the Function App**\\n\\n1. In the Function App, select the Function App Name and select **Configuration**.\\n2. In the **Application settings** tab, select **+ New application setting**.\\n3. Add each of the following application settings individually, with their respective string values (case-sensitive): \\n\\tApplication ID\\n\\tTenant ID\\n\\tClient Secret\\n\\tVMRay API Key\\n\\tVMRay Initial Fetch Date\\n\\tTimeInterval - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://<CustomerId>.ods.opinsights.azure.us`\\n3. Once all application settings have been entered, click **Save**."
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "VMRay",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "VMRay"
                },
                "support": {
                  "name": "VMRay",
                  "email": "support@vmray.com",
                  "tier": "Partner",
                  "link": "https://www.vmray.com/contact/customer-support/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "VMRayThreatIntelligence (using Azure Functions)",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "VMRay",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "VMRay"
        },
        "support": {
          "name": "VMRay",
          "email": "support@vmray.com",
          "tier": "Partner",
          "link": "https://www.vmray.com/contact/customer-support/"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "VMRayThreatIntelligence (using Azure Functions)",
          "publisher": "VMRay",
          "descriptionMarkdown": "VMRayThreatIntelligence connector automatically generates and feeds threat intelligence for all submissions to VMRay, improving threat detection and incident response in Sentinel. This seamless integration empowers teams to proactively address emerging threats.",
          "graphQueries": [
            {
              "metricName": "VMRay Threat Indicators data received",
              "legend": "ThreatIntelligenceIndicator | where SourceSystem contains 'VMRay'",
              "baseQuery": "ThreatIntelligenceIndicator | where SourceSystem contains 'VMRay'"
            },
            {
              "metricName": "Non-VMRay Threat Indicators data received",
              "legend": "ThreatIntelligenceIndicator | where SourceSystem !contains 'VMRay'",
              "baseQuery": "ThreatIntelligenceIndicator | where SourceSystem !contains 'VMRay'"
            }
          ],
          "dataTypes": [
            {
              "name": "ThreatIntelligenceIndicator",
              "lastDataReceivedQuery": "ThreatIntelligenceIndicator\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "ThreatIntelligenceIndicator\n            | where SourceSystem contains 'VMRay'\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Report_links_data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "ThreatIntelligenceIndicator\n             | where SourceSystem !contains 'VMRay'\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "VMRay Based Indicators Events - All VMRay threat indicators in Microsoft Sentinel Threat Intelligence.",
              "query": "ThreatIntelligenceIndicator\n | where SourceSystem contains 'VMRay'\n | sort by TimeGenerated desc"
            },
            {
              "description": "Non-VMRay Based Indicators Events - All Non-VMRay threat indicators in Microsoft Sentinel Threat Intelligence.",
              "query": "ThreatIntelligenceIndicator\n | where SourceSystem !contains 'VMRay'\n | sort by TimeGenerated desc"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Azure Subscription",
                "description": "Azure Subscription with owner role is required to register an application in azure active directory() and assign role of contributor to app in resource group."
              },
              {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
              },
              {
                "name": "REST API Credentials/permissions",
                "description": "**VMRay API Key** is required."
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This connector uses Azure Functions to connect to the VMRay API to pull VMRay Threat IOCs into Microsoft Sentinel. This might result in additional costs for data ingestion and for storing data in Azure Blob Storage costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) and [Azure Blob Storage pricing page](https://azure.microsoft.com/pricing/details/storage/blobs/) for details."
            },
            {
              "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
            },
            {
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Primary Key"
                  },
                  "type": "CopyableLabel"
                }
              ]
            },
            {
              "description": "Use this method for automated deployment of the data connector using an ARM Template.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-VMRay-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Application ID**, **Tenant ID**,**Client Secret**, **VMRay API Key**, **VMRay Initial Fetch Date**, **TimeInterval** and deploy.\n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**.\n5. Click **Purchase** to deploy.",
              "title": "Option 1 - Azure Resource Manager (ARM) Template for Flex Consumption Plan"
            },
            {
              "description": "Use this method for automated deployment of the data connector using an ARM Template.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-VMRay-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Application ID**, **Tenant ID**,**Client Secret**, **VMRay API Key**, **VMRay Initial Fetch Date**, **TimeInterval** and deploy.\n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**.\n5. Click **Purchase** to deploy.",
              "title": "Option 1 - Azure Resource Manager (ARM) Template for Premium Plan"
            },
            {
              "description": "Use the following step-by-step instructions to deploy the VMRay data connector manually with Azure Functions (Deployment via Visual Studio Code).",
              "title": "Option 2 - Manual Deployment of Azure Functions"
            },
            {
              "description": "**1. Deploy a Function App**\n\n> NOTE:You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-VMRay-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. VMRayXXX).\n\n\te. **Select a runtime:** Choose Python 3.11.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
            },
            {
              "description": "**2. Configure the Function App**\\n\\n1. In the Function App, select the Function App Name and select **Configuration**.\\n2. In the **Application settings** tab, select **+ New application setting**.\\n3. Add each of the following application settings individually, with their respective string values (case-sensitive): \\n\\tApplication ID\\n\\tTenant ID\\n\\tClient Secret\\n\\tVMRay API Key\\n\\tVMRay Initial Fetch Date\\n\\tTimeInterval - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://<CustomerId>.ods.opinsights.azure.us`\\n3. Once all application settings have been entered, click **Save**."
            }
          ],
          "id": "[variables('_uiConfigId1')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "VMRay",
        "publisherDisplayName": "VMRay",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/VMRay/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p> The VMRay Connector for Microsoft Sentinel enhances security operations by providing enriched threat intelligence, enabling faster and more informed responses to security incidents. The integration has two main parts: first, URL detonation and enrichment, which provides detailed insights into suspicious URLs. Second, it automatically generates and feeds threat intelligence for all submissions to VMRay, improving threat detection and incident response in Sentinel. This seamless integration empowers teams to proactively address emerging threats.</p>\n<p><strong>Data Connectors:</strong> 1, <strong>Function Apps:</strong> 1, <strong>Playbooks:</strong> 2</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/vmray.svg\" width=\"75\" height=\"75\" >",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "VMRay",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "VMRay"
        },
        "support": {
          "name": "VMRay",
          "email": "support@vmray.com",
          "tier": "Partner",
          "link": "https://www.vmray.com/contact/customer-support/"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "AzureFunction",
              "contentId": "[variables('_VMRayEnrichment_FunctionAppConnector')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Submit-URL-VMRay-Analyzer')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VMRay-Sandbox_Outlook_Attachment')]",
              "version": "[variables('playbookVersion3')]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            }
          ]
        },
        "firstPublishDate": "2025-07-23",
        "providers": [
          "VMRay Inc"
        ],
        "categories": {
          "domains": [
            "Security - Automation (SOAR)",
            "Security - Threat Intelligence"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}

