{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for Google Apigee"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "resource group name where Microsoft Sentinel is setup"
      }
    },
    "subscription": {
      "type": "string",
      "defaultValue": "[last(split(subscription().id, '/'))]",
      "metadata": {
        "description": "subscription id where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "support@microsoft.com",
    "_email": "[variables('email')]",
    "_solutionName": "Google Apigee",
    "_solutionVersion": "3.1.0",
    "solutionId": "azuresentinel.azure-sentinel-solution-googleapigeex",
    "_solutionId": "[variables('solutionId')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "dataConnectorCCPVersion": "1.0.0",
    "_dataConnectorContentIdConnectorDefinition1": "GoogleApigeeXLogsCCPDefinition",
    "dataConnectorTemplateNameConnectorDefinition1": "[concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentIdConnectorDefinition1')))]",
    "_dataConnectorContentIdConnections1": "GoogleApigeeXLogsCCPDefinitionConnections",
    "dataConnectorTemplateNameConnections1": "[concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentIdConnections1')))]",
    "dataCollectionEndpointId1": "[concat('/subscriptions/',parameters('subscription'),'/resourceGroups/',parameters('resourceGroupName'),'/providers/Microsoft.Insights/dataCollectionEndpoints/',parameters('workspace'))]",
    "blanks": "[replace('b', 'b', '')]",
    "parserObject1": {
      "_parserName1": "[concat(parameters('workspace'),'/','ApigeeX')]",
      "_parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeX')]",
      "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('ApigeeX-Parser')))]",
      "parserVersion1": "1.0.0",
      "parserContentId1": "ApigeeX-Parser"
    },
    "parserObject2": {
      "_parserName2": "[concat(parameters('workspace'),'/','ApigeeXv2')]",
      "_parserId2": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeXv2')]",
      "parserTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('ApigeeXv2-Parser')))]",
      "parserVersion2": "1.0.0",
      "parserContentId2": "ApigeeXv2-Parser"
    },
    "parserObject3": {
      "_parserName3": "[concat(parameters('workspace'),'/','Unified_ApigeeX')]",
      "_parserId3": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'Unified_ApigeeX')]",
      "parserTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('Unified_ApigeeX-Parser')))]",
      "parserVersion3": "1.0.0",
      "parserContentId3": "Unified_ApigeeX-Parser"
    },
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('dataConnectorTemplateNameConnectorDefinition1'), variables('dataConnectorCCPVersion'))]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
        "displayName": "Google ApigeeX (via Codeless Connector Framework) (Preview)",
        "contentKind": "DataConnector",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorCCPVersion')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentIdConnectorDefinition1'))]",
              "apiVersion": "2022-09-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectorDefinitions",
              "location": "[parameters('workspace-location')]",
              "kind": "Customizable",
              "properties": {
                "connectorUiConfig": {
                  "id": "GoogleApigeeXLogsCCPDefinition",
                  "title": "Google ApigeeX (via Codeless Connector Framework) (Preview)",
                  "publisher": "Microsoft",
                  "descriptionMarkdown": "The Google ApigeeX data connector provides the capability to ingest Audit logs into Microsoft Sentinel using the Google Apigee API. Refer to [Google Apigee API](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/?apix=true) documentation for more information.",
                  "graphQueriesTableName": "GCPApigee",
                  "graphQueries": [
                    {
                      "metricName": "Total events received",
                      "legend": "Google ApigeeX Logs",
                      "baseQuery": "{{graphQueriesTableName}}"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Get Sample of Google ApigeeX logs",
                      "query": "{{graphQueriesTableName}}\n | take 10"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "{{graphQueriesTableName}}",
                      "lastDataReceivedQuery": "{{graphQueriesTableName}}\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriteria": [
                    {
                      "type": "HasDataConnectors"
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "Read and Write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "read": true,
                          "write": true,
                          "delete": true,
                          "action": false
                        }
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "instructions": [
                        {
                          "type": "MarkdownControlEnvBased",
                          "parameters": {
                            "prodScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/ApigeeXReadme.md) for log setup and authentication setup tutorial.\n Log set up script: [Click Here](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/GCPApigeeLogSetup.tf)\nAuthentication set up script: [Click here](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation/GCPInitialAuthenticationSetup)",
                            "govScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/ApigeeXReadme.md) for log setup and authentication setup tutorial.\n Log set up script: [Click Here](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/GCPApigeeLogSetup.tf)\nAuthentication set up script: [Click here](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation_gov/GCPInitialAuthenticationSetupGov)"
                          }
                        },
                        {
                          "type": "CopyableLabel",
                          "parameters": {
                            "label": "Tenant ID: A unique identifier that is used as an input in the Terraform configuration within a GCP environment.",
                            "fillWith": [
                              "TenantId"
                            ],
                            "name": "TenantId",
                            "disabled": true
                          }
                        },
                        {
                          "type": "Markdown",
                          "parameters": {
                            "content": "#### 2. Enable ApigeeX logs \n In the Google Cloud Console, enable Apigee API, if not enabled previously, and save the changes."
                          }
                        },
                        {
                          "type": "Markdown",
                          "parameters": {
                            "content": "#### 3. Connect new collectors \n To enable ApigeeX Logs for Microsoft Sentinel, click on Add new collector button, provide the required information in the pop up and click on Connect."
                          }
                        },
                        {
                          "type": "GCPGrid",
                          "parameters": {}
                        },
                        {
                          "type": "GCPContextPane",
                          "parameters": {}
                        }
                      ],
                      "title": "Connect Google ApigeeX to Microsoft Sentinel\n"
                    }
                  ]
                }
              }
            },
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnectorDefinition1')))]",
              "apiVersion": "2022-01-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectorDefinitions', variables('_dataConnectorContentIdConnectorDefinition1'))]",
                "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorCCPVersion')]",
                "source": {
                  "sourceId": "[variables('_solutionId')]",
                  "name": "[variables('_solutionName')]",
                  "kind": "Solution"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "version": "[variables('dataConnectorCCPVersion')]",
                      "contentId": "[variables('_dataConnectorContentIdConnections1')]",
                      "kind": "ResourcesDataConnector"
                    }
                  ]
                }
              }
            },
            {
              "name": "GoogleApigeeXDCR",
              "apiVersion": "2022-06-01",
              "type": "Microsoft.Insights/dataCollectionRules",
              "location": "[parameters('workspace-location')]",
              "kind": "[variables('blanks')]",
              "properties": {
                "destinations": {
                  "logAnalytics": [
                    {
                      "workspaceResourceId": "[variables('workspaceResourceId')]",
                      "name": "clv2ws1"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Microsoft-GCPApigee"
                    ],
                    "destinations": [
                      "clv2ws1"
                    ]
                  }
                ],
                "dataCollectionEndpointId": "[variables('dataCollectionEndpointId1')]"
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "contentProductId": "[concat(take(variables('_solutionId'), 50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentIdConnectorDefinition1'),'-', variables('dataConnectorCCPVersion'))))]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "version": "[variables('dataConnectorCCPVersion')]"
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentIdConnectorDefinition1'))]",
      "apiVersion": "2022-09-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectorDefinitions",
      "location": "[parameters('workspace-location')]",
      "kind": "Customizable",
      "properties": {
        "connectorUiConfig": {
          "id": "GoogleApigeeXLogsCCPDefinition",
          "title": "Google ApigeeX (via Codeless Connector Framework) (Preview)",
          "publisher": "Microsoft",
          "descriptionMarkdown": "The Google ApigeeX data connector provides the capability to ingest Audit logs into Microsoft Sentinel using the Google Apigee API. Refer to [Google Apigee API](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/?apix=true) documentation for more information.",
          "graphQueriesTableName": "GCPApigee",
          "graphQueries": [
            {
              "metricName": "Total events received",
              "legend": "Google ApigeeX Logs",
              "baseQuery": "{{graphQueriesTableName}}"
            }
          ],
          "sampleQueries": [
            {
              "description": "Get Sample of Google ApigeeX logs",
              "query": "{{graphQueriesTableName}}\n | take 10"
            }
          ],
          "dataTypes": [
            {
              "name": "{{graphQueriesTableName}}",
              "lastDataReceivedQuery": "{{graphQueriesTableName}}\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            }
          ],
          "connectivityCriteria": [
            {
              "type": "HasDataConnectors"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "Read and Write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "action": false
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "instructions": [
                {
                  "type": "MarkdownControlEnvBased",
                  "parameters": {
                    "prodScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/ApigeeXReadme.md) for log setup and authentication setup tutorial.\n Log set up script: [Click Here](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/GCPApigeeLogSetup.tf)\nAuthentication set up script: [Click here](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation/GCPInitialAuthenticationSetup)",
                    "govScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/ApigeeXReadme.md) for log setup and authentication setup tutorial.\n Log set up script: [Click Here](https://github.com/v-gsrihitha/v-gsrihitha/blob/main/GCPApigee/GCPApigeeLogSetup.tf)\nAuthentication set up script: [Click here](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation_gov/GCPInitialAuthenticationSetupGov)"
                  }
                },
                {
                  "type": "CopyableLabel",
                  "parameters": {
                    "label": "Tenant ID: A unique identifier that is used as an input in the Terraform configuration within a GCP environment.",
                    "fillWith": [
                      "TenantId"
                    ],
                    "name": "TenantId",
                    "disabled": true
                  }
                },
                {
                  "type": "Markdown",
                  "parameters": {
                    "content": "#### 2. Enable ApigeeX logs \n In the Google Cloud Console, enable Apigee API, if not enabled previously, and save the changes."
                  }
                },
                {
                  "type": "Markdown",
                  "parameters": {
                    "content": "#### 3. Connect new collectors \n To enable ApigeeX Logs for Microsoft Sentinel, click on Add new collector button, provide the required information in the pop up and click on Connect."
                  }
                },
                {
                  "type": "GCPGrid",
                  "parameters": {}
                },
                {
                  "type": "GCPContextPane",
                  "parameters": {}
                }
              ],
              "title": "Connect Google ApigeeX to Microsoft Sentinel\n"
            }
          ]
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnectorDefinition1')))]",
      "apiVersion": "2022-01-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectorDefinitions', variables('_dataConnectorContentIdConnectorDefinition1'))]",
        "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorCCPVersion')]",
        "source": {
          "sourceId": "[variables('_solutionId')]",
          "name": "[variables('_solutionName')]",
          "kind": "Solution"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "criteria": [
            {
              "version": "[variables('dataConnectorCCPVersion')]",
              "contentId": "[variables('_dataConnectorContentIdConnections1')]",
              "kind": "ResourcesDataConnector"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('dataConnectorTemplateNameConnections1'), variables('dataConnectorCCPVersion'))]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "contentId": "[variables('_dataConnectorContentIdConnections1')]",
        "displayName": "Google ApigeeX (via Codeless Connector Framework) (Preview)",
        "contentKind": "ResourcesDataConnector",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorCCPVersion')]",
          "parameters": {
            "guidValue": {
              "defaultValue": "[[newGuid()]",
              "type": "securestring"
            },
            "innerWorkspace": {
              "defaultValue": "[parameters('workspace')]",
              "type": "securestring"
            },
            "GCPServiceAccountEmail": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 4
            },
            "GCPProjectNumber": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 1
            },
            "GCPWorkloadIdentityProviderId": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 4
            },
            "GCPProjectId": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 4
            },
            "GCPSubscriptionName": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 3
            },
            "connectorDefinitionName": {
              "defaultValue": "Google ApigeeX (via Codeless Connector Framework) (Preview)",
              "type": "securestring",
              "minLength": 1
            },
            "workspace": {
              "defaultValue": "[parameters('workspace')]",
              "type": "securestring"
            },
            "dcrConfig": {
              "defaultValue": {
                "dataCollectionEndpoint": "data collection Endpoint",
                "dataCollectionRuleImmutableId": "data collection rule immutableId"
              },
              "type": "object"
            }
          },
          "variables": {
            "_dataConnectorContentIdConnections1": "[variables('_dataConnectorContentIdConnections1')]"
          },
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnections1')))]",
              "apiVersion": "2022-01-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentIdConnections1'))]",
                "contentId": "[variables('_dataConnectorContentIdConnections1')]",
                "kind": "ResourcesDataConnector",
                "version": "[variables('dataConnectorCCPVersion')]",
                "source": {
                  "sourceId": "[variables('_solutionId')]",
                  "name": "[variables('_solutionName')]",
                  "kind": "Solution"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            },
            {
              "name": "[[concat(parameters('innerWorkspace'),'/Microsoft.SecurityInsights/', 'GoogleApigeeXLogs', parameters('guidValue'))]",
              "apiVersion": "2023-02-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GCP",
              "properties": {
                "connectorDefinitionName": "GoogleApigeeXLogsCCPDefinition",
                "dataType": "GCPApigee",
                "dcrConfig": {
                  "streamName": "SENTINEL_GCPAPIGEE",
                  "dataCollectionEndpoint": "[[parameters('dcrConfig').dataCollectionEndpoint]",
                  "dataCollectionRuleImmutableId": "[[parameters('dcrConfig').dataCollectionRuleImmutableId]"
                },
                "auth": {
                  "serviceAccountEmail": "[[parameters('GCPServiceAccountEmail')]",
                  "projectNumber": "[[parameters('GCPProjectNumber')]",
                  "workloadIdentityProviderId": "[[parameters('GCPWorkloadIdentityProviderId')]"
                },
                "request": {
                  "projectId": "[[parameters('GCPProjectId')]",
                  "subscriptionNames": [
                    "[[parameters('GCPSubscriptionName')]"
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "contentProductId": "[concat(take(variables('_solutionId'), 50),'-','rdc','-', uniqueString(concat(variables('_solutionId'),'-','ResourcesDataConnector','-',variables('_dataConnectorContentIdConnections1'),'-', variables('dataConnectorCCPVersion'))))]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "version": "[variables('dataConnectorCCPVersion')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject1').parserTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ApigeeX Data Parser with template version 3.1.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject1').parserVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject1')._parserName1]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for ApigeeX",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "ApigeeX",
                "query": "let ApigeeX_view = view () {\nApigeeX_CL\n| extend EventVendor = 'Google'\n| extend EventProduct = 'ApigeeX'\n| project-rename\n    EventSeverity=severity_s,\n    EventEndTime=timestamp_t,\n    SrcIpAddr=payload_requestMetadata_callerIp_s,\n    HttpUserAgentOriginal=payload_requestMetadata_callerSuppliedUserAgent_s\n};\nlet GcpApigee1_view = view () {\nGoogleApigeeXV2_CL\n| extend EventSeverity=column_ifexists('Severity', '')\n| extend EventEndTime=column_ifexists('Timestamp', '')\n| extend protopayloadList=todynamic(ProtoPayload)\n| extend\n    SrcIpAddr= tostring(protopayloadList.requestMetadata.callerIp),\n    HttpUserAgentOriginal= tostring(protopayloadList.requestMetadata.callerSuppliedUserAgent)\n};\nunion isfuzzy=true (ApigeeX_view), (GcpApigee1_view)\n| project\nEventSeverity,\nEventEndTime,\nSrcIpAddr,\nHttpUserAgentOriginal\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
              "dependsOn": [
                "[variables('parserObject1')._parserId1]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeX')]",
                "contentId": "[variables('parserObject1').parserContentId1]",
                "kind": "Parser",
                "version": "[variables('parserObject1').parserVersion1]",
                "source": {
                  "name": "Google Apigee",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "contentKind": "Parser",
        "displayName": "Parser for ApigeeX",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "version": "[variables('parserObject1').parserVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject1')._parserName1]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for ApigeeX",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "ApigeeX",
        "query": "let ApigeeX_view = view () {\nApigeeX_CL\n| extend EventVendor = 'Google'\n| extend EventProduct = 'ApigeeX'\n| project-rename\n    EventSeverity=severity_s,\n    EventEndTime=timestamp_t,\n    SrcIpAddr=payload_requestMetadata_callerIp_s,\n    HttpUserAgentOriginal=payload_requestMetadata_callerSuppliedUserAgent_s\n};\nlet GcpApigee1_view = view () {\nGoogleApigeeXV2_CL\n| extend EventSeverity=column_ifexists('Severity', '')\n| extend EventEndTime=column_ifexists('Timestamp', '')\n| extend protopayloadList=todynamic(ProtoPayload)\n| extend\n    SrcIpAddr= tostring(protopayloadList.requestMetadata.callerIp),\n    HttpUserAgentOriginal= tostring(protopayloadList.requestMetadata.callerSuppliedUserAgent)\n};\nunion isfuzzy=true (ApigeeX_view), (GcpApigee1_view)\n| project\nEventSeverity,\nEventEndTime,\nSrcIpAddr,\nHttpUserAgentOriginal\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
      "dependsOn": [
        "[variables('parserObject1')._parserId1]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeX')]",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "kind": "Parser",
        "version": "[variables('parserObject1').parserVersion1]",
        "source": {
          "kind": "Solution",
          "name": "Google Apigee",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject2').parserTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ApigeeXV2 Data Parser with template version 3.1.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject2').parserVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject2')._parserName2]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for ApigeeXv2",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "ApigeeXv2",
                "query": "ApigeeXV2_CL\n| extend\n    EventVendor = 'Google',\n    EventProduct = 'ApigeeX',\n    RequestName = tostring(parse_json(tostring(protoPayload.request)).instance),\n    EnvironmentName =  tostring(split(tostring(parse_json(tostring(protoPayload.request)).instance), '/')[3]),\n    RequestAttributesTime = tostring(parse_json(tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes)).['time']),\n    InstertID = insertId,\n    ResourceType = tostring(resource.type),\n    Type = tostring(protoPayload.['@type']),\n    MethodName = tostring(protoPayload.methodName),\n    ProjectID =  tostring(parse_json(tostring(resource.labels)).project_id),\n    Service = tostring(parse_json(tostring(resource.labels)).service),\n    Method =  tostring(parse_json(tostring(resource.labels)).method),\n    PrincipalEmail = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalEmail),\n    PrincipalSubject = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalSubject),\n    SrcIpAddr = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerIp),\n    HttpUserAgentOriginal = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerSuppliedUserAgent),\n    RequestAttributes =tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes),\n    ServiceName = tostring(parse_json(tostring(protoPayload.serviceName))),\n    AuthorizationInfo = tostring(parse_json(tostring(protoPayload.authorizationInfo))),\n    ResourceName = tostring(parse_json(tostring(protoPayload.resourceName))),\n    InstanceUID =  tostring(parse_json(tostring(protoPayload.request)).instanceUid),\n    RequestType = tostring(parse_json(tostring(protoPayload.request)).['@type']),\n    EventEndTime = timestamp,\n    ResourceLocation = tostring(parse_json(tostring(protoPayload.resourceLocation))),\n    DestinationAttributes = tostring(parse_json(tostring(protoPayload.requestMetadata)).destinationAttributes),\n    Resources = protoPayload.resources\n| project-away protoPayload, resource\n| project-rename\n    EventSeverity = severity,\n    InsertID = insertId,\n    LogName = logName,\n    TimeStamp = timestamp\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
              "dependsOn": [
                "[variables('parserObject2')._parserId2]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeXv2')]",
                "contentId": "[variables('parserObject2').parserContentId2]",
                "kind": "Parser",
                "version": "[variables('parserObject2').parserVersion2]",
                "source": {
                  "name": "Google Apigee",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "contentKind": "Parser",
        "displayName": "Parser for ApigeeXv2",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "version": "[variables('parserObject2').parserVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject2')._parserName2]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for ApigeeXv2",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "ApigeeXv2",
        "query": "ApigeeXV2_CL\n| extend\n    EventVendor = 'Google',\n    EventProduct = 'ApigeeX',\n    RequestName = tostring(parse_json(tostring(protoPayload.request)).instance),\n    EnvironmentName =  tostring(split(tostring(parse_json(tostring(protoPayload.request)).instance), '/')[3]),\n    RequestAttributesTime = tostring(parse_json(tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes)).['time']),\n    InstertID = insertId,\n    ResourceType = tostring(resource.type),\n    Type = tostring(protoPayload.['@type']),\n    MethodName = tostring(protoPayload.methodName),\n    ProjectID =  tostring(parse_json(tostring(resource.labels)).project_id),\n    Service = tostring(parse_json(tostring(resource.labels)).service),\n    Method =  tostring(parse_json(tostring(resource.labels)).method),\n    PrincipalEmail = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalEmail),\n    PrincipalSubject = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalSubject),\n    SrcIpAddr = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerIp),\n    HttpUserAgentOriginal = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerSuppliedUserAgent),\n    RequestAttributes =tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes),\n    ServiceName = tostring(parse_json(tostring(protoPayload.serviceName))),\n    AuthorizationInfo = tostring(parse_json(tostring(protoPayload.authorizationInfo))),\n    ResourceName = tostring(parse_json(tostring(protoPayload.resourceName))),\n    InstanceUID =  tostring(parse_json(tostring(protoPayload.request)).instanceUid),\n    RequestType = tostring(parse_json(tostring(protoPayload.request)).['@type']),\n    EventEndTime = timestamp,\n    ResourceLocation = tostring(parse_json(tostring(protoPayload.resourceLocation))),\n    DestinationAttributes = tostring(parse_json(tostring(protoPayload.requestMetadata)).destinationAttributes),\n    Resources = protoPayload.resources\n| project-away protoPayload, resource\n| project-rename\n    EventSeverity = severity,\n    InsertID = insertId,\n    LogName = logName,\n    TimeStamp = timestamp\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
      "dependsOn": [
        "[variables('parserObject2')._parserId2]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ApigeeXv2')]",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "kind": "Parser",
        "version": "[variables('parserObject2').parserVersion2]",
        "source": {
          "kind": "Solution",
          "name": "Google Apigee",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject3').parserTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Unified_ApigeeX Data Parser with template version 3.1.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject3').parserVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject3')._parserName3]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for both ApiGeeX connectors",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "Unified_ApigeeX",
                "query": "let t1= ApigeeX_CL\n    | extend EventVendor = 'Google',\n             EventProduct = 'ApigeeX'\n    | project-rename\n        RequestName = payload_request_name_s,\n        RequestAPIProxyType = payload_request_environment_apiProxyType_s,\n        DeploymentType = payload_request_environment_deploymentType_s,\n        Description = payload_request_environment_description_s,\n        DisplayName = payload_request_environment_displayname_s,\n        EnvironmentName = payload_request_environment_name_s,\n        ResponseType = payload_response_type_s,\n        ResponseName = payload_response_name_s,\n        ResponseDisplayName = payload_response_displayName_s,\n        ResponseAPIProxyType = payload_response_apiProxyType_s,\n        StatusCode = payload_status_code_d,\n        StatusMessage = payload_status_message_s,   \n        RequestReportTime = payload_request_reportTime_s,\n        RequestAttributesTime = payload_requestMetadata_requestAttributes_time_t,\n        InsertID = insert_id_s,    \n        ResourceType = resource_type_s,\n        EventSeverity=severity_s,\n        TimeStamp = timestamp_t,\n        Type = payload__type_s,\n        LogName = log_name_s,\n        MethodName = payload_methodName_s,\n        ProjectID = resource_labels_project_id_s,\n        Service = resource_labels_service_s,\n        Method = resource_labels_method_s,\n        PrincipalEmail = payload_authenticationInfo_principalEmail_s,\n        SrcIpAddr=payload_requestMetadata_callerIp_s,\n        HttpUserAgentOriginal=payload_requestMetadata_callerSuppliedUserAgent_s,\n        RequestAttributes = payload_requestMetadata_requestAttributes_time_s,\n        ServiceName = payload_serviceName_s,\n        AuthorizationInfo = payload_authorizationInfo_s,\n        ResourceName = payload_resourceName_s,\n        InstanceUID = payload_request_instanceUid_g,\n        RequestType = payload_request_type_s,\n        EventEndTime=timestamp_t;\nlet t2 = ApigeeXV2_CL\n    | extend\n        EventVendor = 'Google',\n        EventProduct = 'ApigeeX',        \n        RequestName = tostring(parse_json(tostring(protoPayload.request)).instance),\n        EnvironmentName =  tostring(split(tostring(parse_json(tostring(protoPayload.request)).instance), '/')[3]),\n        RequestAttributesTime = tostring(parse_json(tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes)).['time']),\n        InsertID = insertId,\n        ResourceType = tostring(resource.type),\n        Type = tostring(protoPayload.[\"@type\"]),\n        MethodName = tostring(protoPayload.methodName),\n        ProjectID =  tostring(parse_json(tostring(resource.labels)).project_id),\n        Service = tostring(parse_json(tostring(resource.labels)).service),\n        Method =  tostring(parse_json(tostring(resource.labels)).method),\n        PrincipalEmail = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalEmail),\n        PrincipalSubject = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalSubject),\n        SrcIpAddr = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerIp),\n        HttpUserAgentOriginal = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerSuppliedUserAgent), \n        RequestAttributes =tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes),\n        ServiceName = tostring(parse_json(tostring(protoPayload.serviceName))),\n        AuthorizationInfo = tostring(parse_json(tostring(protoPayload.authorizationInfo))),\n        ResourceName = tostring(parse_json(tostring(protoPayload.resourceName))),\n        InstanceUID =  tostring(parse_json(tostring(protoPayload.request)).instanceUid),\n        RequestType = tostring(parse_json(tostring(protoPayload.request)).[\"@type\"]),\n        EventEndTime = timestamp,\n        ResourceLocation = tostring(parse_json(tostring(protoPayload.resourceLocation))), \n        DestinationAttributes = tostring(parse_json(tostring(protoPayload.requestMetadata)).destinationAttributes),\n        Resources = protoPayload.resources\n    | project-away protoPayload, resource\n    | project-rename\n        EventSeverity = severity,\n        LogName = logName,\n        TimeStamp = timestamp;\nt1\n| union t2\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
              "dependsOn": [
                "[variables('parserObject3')._parserId3]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'Unified_ApigeeX')]",
                "contentId": "[variables('parserObject3').parserContentId3]",
                "kind": "Parser",
                "version": "[variables('parserObject3').parserVersion3]",
                "source": {
                  "name": "Google Apigee",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "contentKind": "Parser",
        "displayName": "Parser for both ApiGeeX connectors",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "version": "[variables('parserObject3').parserVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject3')._parserName3]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for both ApiGeeX connectors",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "Unified_ApigeeX",
        "query": "let t1= ApigeeX_CL\n    | extend EventVendor = 'Google',\n             EventProduct = 'ApigeeX'\n    | project-rename\n        RequestName = payload_request_name_s,\n        RequestAPIProxyType = payload_request_environment_apiProxyType_s,\n        DeploymentType = payload_request_environment_deploymentType_s,\n        Description = payload_request_environment_description_s,\n        DisplayName = payload_request_environment_displayname_s,\n        EnvironmentName = payload_request_environment_name_s,\n        ResponseType = payload_response_type_s,\n        ResponseName = payload_response_name_s,\n        ResponseDisplayName = payload_response_displayName_s,\n        ResponseAPIProxyType = payload_response_apiProxyType_s,\n        StatusCode = payload_status_code_d,\n        StatusMessage = payload_status_message_s,   \n        RequestReportTime = payload_request_reportTime_s,\n        RequestAttributesTime = payload_requestMetadata_requestAttributes_time_t,\n        InsertID = insert_id_s,    \n        ResourceType = resource_type_s,\n        EventSeverity=severity_s,\n        TimeStamp = timestamp_t,\n        Type = payload__type_s,\n        LogName = log_name_s,\n        MethodName = payload_methodName_s,\n        ProjectID = resource_labels_project_id_s,\n        Service = resource_labels_service_s,\n        Method = resource_labels_method_s,\n        PrincipalEmail = payload_authenticationInfo_principalEmail_s,\n        SrcIpAddr=payload_requestMetadata_callerIp_s,\n        HttpUserAgentOriginal=payload_requestMetadata_callerSuppliedUserAgent_s,\n        RequestAttributes = payload_requestMetadata_requestAttributes_time_s,\n        ServiceName = payload_serviceName_s,\n        AuthorizationInfo = payload_authorizationInfo_s,\n        ResourceName = payload_resourceName_s,\n        InstanceUID = payload_request_instanceUid_g,\n        RequestType = payload_request_type_s,\n        EventEndTime=timestamp_t;\nlet t2 = ApigeeXV2_CL\n    | extend\n        EventVendor = 'Google',\n        EventProduct = 'ApigeeX',        \n        RequestName = tostring(parse_json(tostring(protoPayload.request)).instance),\n        EnvironmentName =  tostring(split(tostring(parse_json(tostring(protoPayload.request)).instance), '/')[3]),\n        RequestAttributesTime = tostring(parse_json(tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes)).['time']),\n        InsertID = insertId,\n        ResourceType = tostring(resource.type),\n        Type = tostring(protoPayload.[\"@type\"]),\n        MethodName = tostring(protoPayload.methodName),\n        ProjectID =  tostring(parse_json(tostring(resource.labels)).project_id),\n        Service = tostring(parse_json(tostring(resource.labels)).service),\n        Method =  tostring(parse_json(tostring(resource.labels)).method),\n        PrincipalEmail = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalEmail),\n        PrincipalSubject = tostring(parse_json(tostring(protoPayload.authenticationInfo)).principalSubject),\n        SrcIpAddr = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerIp),\n        HttpUserAgentOriginal = tostring(parse_json(tostring(protoPayload.requestMetadata)).callerSuppliedUserAgent), \n        RequestAttributes =tostring(parse_json(tostring(protoPayload.requestMetadata)).requestAttributes),\n        ServiceName = tostring(parse_json(tostring(protoPayload.serviceName))),\n        AuthorizationInfo = tostring(parse_json(tostring(protoPayload.authorizationInfo))),\n        ResourceName = tostring(parse_json(tostring(protoPayload.resourceName))),\n        InstanceUID =  tostring(parse_json(tostring(protoPayload.request)).instanceUid),\n        RequestType = tostring(parse_json(tostring(protoPayload.request)).[\"@type\"]),\n        EventEndTime = timestamp,\n        ResourceLocation = tostring(parse_json(tostring(protoPayload.resourceLocation))), \n        DestinationAttributes = tostring(parse_json(tostring(protoPayload.requestMetadata)).destinationAttributes),\n        Resources = protoPayload.resources\n    | project-away protoPayload, resource\n    | project-rename\n        EventSeverity = severity,\n        LogName = logName,\n        TimeStamp = timestamp;\nt1\n| union t2\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
      "dependsOn": [
        "[variables('parserObject3')._parserId3]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'Unified_ApigeeX')]",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "kind": "Parser",
        "version": "[variables('parserObject3').parserVersion3]",
        "source": {
          "kind": "Solution",
          "name": "Google Apigee",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.1.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Google Apigee",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Google%20Apigee/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://cloud.google.com/apigee/docs\">Google ApigeeX</a> solution provides the capability to ingest ApigeeX audit logs into Microsoft Sentinel using the GCP Logging API or PubSub architecture. Refer to <a href=\"https://cloud.google.com/logging/docs/reference/v2/rest\">GCP Logging API documentation</a> for more information on the Azure Function connector and the <a href=\"https://learn.microsoft.com/azure/sentinel/connect-google-cloud-platform?tabs=terraform%2Cauditlogs\">Microsoft Sentinel documentation</a> for the basics on PubSub based ingestion.</p>\n<p><strong>Underlying Microsoft Technologies used:</strong></p>\n<p>This solution takes a dependency on the following technologies, and some of these dependencies either may be in <a href=\"https://azure.microsoft.com/support/legal/preview-supplemental-terms/\">Preview</a> state or might result in additional ingestion or operational costs:</p>\n<ol type=\"a\">\n<li><p><a href=\"https://aka.ms/Log-Ingestion-API\">Log Ingestion API in Azure Monitor</a></p>\n</li>\n<li><p><a href=\"https://aka.ms/Sentinel-CCP_Platform\">Microsoft Sentinel Codeless Connector Framework</a></p>\n</li>\n</ol>\n<p>c.<a href=\"https://learn.microsoft.com/en-us/azure/sentinel/create-codeless-connector\">Codeless Data Connector</a></p>\n<p><span style='color:red; font-weight:bold;'>NOTE</span>: Microsoft recommends installation of \"GoogleApigeeXLogsCCPDefinition\" (via Codeless Connector Framework). This connector is build on the Codeless Connector Framework (CCF), which uses the Log Ingestion API, which replaces ingestion via the <a href='https://aka.ms/Sentinel-Logs_migration' style='color:#1890F1;'>deprecated HTTP Data Collector API</a>. CCF-based data connectors also support <a href='https://aka.ms/Sentinel-DCR_Overview' style='color:#1890F1;'>Data Collection Rules</a> (DCRs) offering transformations and enrichment.</p>\n<p><span style='color:red; font-weight:bold;'>Important</span>: While the updated connector(s) can coexist with their legacy versions, running them together will result in duplicated data ingestion. You can disable the older versions of these connectors to avoid duplication of data..</p>\n<p><strong>Data Connectors:</strong> 1, <strong>Parsers:</strong> 3</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Solutions/Google%20Apigee/logo/Google-Cloud-Branding.png\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Google Apigee",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentIdConnections1')]",
              "version": "[variables('dataConnectorCCPVersion')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject1').parserContentId1]",
              "version": "[variables('parserObject1').parserVersion1]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject2').parserContentId2]",
              "version": "[variables('parserObject2').parserVersion2]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject3').parserContentId3]",
              "version": "[variables('parserObject3').parserVersion3]"
            }
          ]
        },
        "firstPublishDate": "2021-10-28",
        "providers": [
          "Google"
        ],
        "categories": {
          "domains": [
            "DevOps"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
