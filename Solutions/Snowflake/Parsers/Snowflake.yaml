id: 2757535d-ca8d-4083-8ea2-ac9ba5237b95
Function:
  Title: Parser for Snowflake
  Version: '1.0.0'
  LastUpdated: '2023-08-23'
Category: Microsoft Sentinel Parser
FunctionName: Snowflake
FunctionAlias: Snowflake
FunctionQuery: |
  let Snowflake_view = view () {
    Snowflake_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | extend 
      EventStartTime = column_ifexists('START_TIME_t', ''),
      EventType = column_ifexists('EVENT_TYPE_s', ''),
      TargetUsername = column_ifexists('USER_NAME_s', ''),
      SrcDvcIpAddr = column_ifexists('CLIENT_IP_s', '')
    | extend 
      User=TargetUsername,
      EventEndTime=iff(isnotempty(EVENT_TIMESTAMP_t), EVENT_TIMESTAMP_t, END_TIME_t)
  };
  let SnowflakeLogin_view = view () {
    SnowflakeLogin_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend Time = toreal(DataList[1])
    | extend
      LoginEventId = tostring(DataList[0]),
      EventEndTime = unixtime_seconds_todatetime(Time),
      EventType = tostring(DataList[2]),
      TargetUsername = tostring(DataList[3]),
      SrcDvcIpAddr = tostring(DataList[4]),
      LoginReportedClientType = tostring(DataList[5]),
      LoginReportedClientVersion = tostring(DataList[6]),
      LoginFirstAuthenticationFactor = tostring(DataList[7]),
      LoginSecondAuthenticationFactor = tostring(DataList[8]),
      LoginIsSuccess = tostring(DataList[9]),
      LoginErrorCode = tostring(DataList[10]),
      LoginErrorMessage = tostring(DataList[11]),
      LoginRelatedEventId = tostring(DataList[12]),
      LoginConnection = tostring(DataList[13]),
      LoginClientPrivateLinkId = tostring(DataList[14])
    | extend User = TargetUsername
  };
  let SnowflakeUserGrant_view = view ()  {
    SnowflakeUserGrant_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend 
      CTime = toreal(DataList[0]),
      DTime = toreal(DataList[1])
    | extend
      UserGrantCreatedOn = unixtime_seconds_todatetime(CTime),
      UserGrantDeletedOn = unixtime_seconds_todatetime(DTime),
      UserRole = tostring(DataList[2]),
      UserGrantGrantedTo = tostring(DataList[3]),
      UserGrantGranteeName = tostring(DataList[4]),
      UserGrantGrantedBy = tostring(DataList[5])
  };
  let SnowflakeMaterializedView_view = view () {
    SnowflakeMaterializedView_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend 
      STime = toreal(DataList[0]),
      ETime = toreal(DataList[1])
    | extend
      MaterializedViewStartTime = unixtime_seconds_todatetime(STime),
      MaterializedViewEndTime = unixtime_seconds_todatetime(ETime),
      MaterializedViewCreditsUsed = tostring(DataList[2]),
      MaterializedViewTableId = tostring(DataList[3]),
      MaterializedViewTableName = tostring(DataList[4]),
      MaterializedViewSchemaId = tostring(DataList[5]),
      MaterializedViewSchemaName = tostring(DataList[6]),
      MaterializedViewDatabaseId = tostring(DataList[7]),
      MaterializedViewDatabaseName = tostring(DataList[8])
  };
  let SnowflakeRoles_view = view () {
    SnowflakeRoles_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend 
      CTime = toreal(DataList[1]),
      DTime = toreal(DataList[2])
    | extend
      RoleId = tostring(DataList[0]),
      RoleCreatedOn = unixtime_seconds_todatetime(CTime),
      RoleDeletedOn = unixtime_seconds_todatetime(DTime),
      RoleName = tostring(DataList[3]),
      RoleComment = tostring(DataList[4]),
      RoleOwner = tostring(DataList[5]),
      RoleType = tostring(DataList[6]),
      RoleDatabaseName = tostring(DataList[7]),
      RoleInstanceId = tostring(DataList[8]),
      OwnerRoleType = tostring(DataList[9])
  };
  let SnowflakeRoleGrant_view = view () {
    SnowflakeRoleGrant_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend 
      CTime = toreal(DataList[0]),
      MTime = toreal(DataList[1]),
      DTime = toreal(DataList[11])
    | extend 
      RoleGrantCreatedOn = unixtime_seconds_todatetime(CTime),
      RoleGrantModifiedOn = unixtime_seconds_todatetime(MTime),
      RoleGrantPrivilege = tostring(DataList[2]),
      RoleGrantGrantedOn = tostring(DataList[3]),
      RoleGrantName = tostring(DataList[4]),
      RoleGrantTableCatalog = tostring(DataList[5]),
      RoleGrantTableSchema = tostring(DataList[6]),
      RoleGrantGrantedTo = tostring(DataList[7]),
      RoleGrantGranteeName = tostring(DataList[8]),
      RoleGrantGrantOption = tobool(DataList[9]),
      RoleGrantGrantedBy = tostring(DataList[10]),
      RoleGrantDeletedOn = unixtime_seconds_todatetime(DTime),
      RoleGrantGrantedByRoleType = tostring(DataList[12]),
      RoleGrantObjectInstance = tostring(DataList[13])
  };
  let SnowflakeLoad_view = view () {
    SnowflakeLoad_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend LTime = toreal(DataList[7])
    | extend
      LoadTableId = tostring(DataList[0]),
      LoadTableName = tostring(DataList[1]),
      LoadSchemaId = tostring(DataList[2]),
      LoadSchemaName = tostring(DataList[3]),
      LoadCatalogId = tostring(DataList[4]),
      LoadCatalogName = tostring(DataList[5]),
      LoadFileName = tostring(DataList[6]),
      LastLoadTime = unixtime_seconds_todatetime(LTime),
      LoadStatus = tostring(DataList[8]),
      LoadRowCount = tostring(DataList[9]),
      LoadRowParsed = tostring(DataList[10]),
      LoadFirstErrorMessage = tostring(DataList[11]),
      LoadFirstErrorLineNumber = tostring(DataList[12]),
      LoadFirstErrorCharacterPosition = tostring(DataList[13]),
      LoadFirstErrorColName = tostring(DataList[14]),
      LoadErrorCount = tostring(DataList[15]),
      LoadErrorLimit = tostring(DataList[16])
  };
  let SnowflakeTableStorageMetrics_view = view () {
    SnowflakeTableStorageMetrics_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend
      TCTime = toreal(DataList[13]),
      TDTime = toreal(DataList[14]),
      TFTime = toreal(DataList[15]),
      SCTime = toreal(DataList[16]),
      SDTime = toreal(DataList[17]),
      CCTime = toreal(DataList[18]),
      CDTime = toreal(DataList[19])
    | extend 
      TableStorageMetricsId = tostring(DataList[0]),
      TableStorageMetricsTableName = tostring(DataList[1]),
      TableStorageMetricsTableSchemaId = tostring(DataList[2]),
      TableStorageMetricsTableSchema = tostring(DataList[3]),
      TableStorageMetricsTableCatalogId = tostring(DataList[4]),
      TableStorageMetricsTableCatalog = tostring(DataList[5]),
      TableStorageMetricsCloneGroupId = tostring(DataList[6]),
      TableStorageMetricsIsTransient = tostring(DataList[7]),
      TableStorageMetricsActiveBytes = tostring(DataList[8]),
      TableStorageMetricsTimeTravelBytes = tostring(DataList[9]),
      TableStorageMetricsFailsafeBytes = tostring(DataList[10]),
      TableStorageMetricsRetainedForCloneBytes = tostring(DataList[11]),
      TableStorageMetricsDeleted = tobool(DataList[12]),
      TableStorageMetricsTableCreated = unixtime_seconds_todatetime(TCTime),
      TableStorageMetricsTableDropped = unixtime_seconds_todatetime(TDTime),
      TableStorageMetricsTableEnteredFailsafe = unixtime_seconds_todatetime(TFTime),
      TableStorageMetricsSchemaCreated = unixtime_seconds_todatetime(SCTime),
      TableStorageMetricsSchemaDropped = unixtime_seconds_todatetime(SDTime),
      TableStorageMetricsCatalogCreated = unixtime_seconds_todatetime(CCTime),
      TableStorageMetricsCatalogDropped = unixtime_seconds_todatetime(CDTime),
      TableStorageMetricsComment = tostring(DataList[20]),
      TableStorageMetricsInstanceId = tostring(DataList[21])
  };
  let SnowflakeTables_view = view () {
    SnowflakeTables_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend
      TCTime = toreal(DataList[24]),
      LATime = toreal(DataList[25]),
      LDTime = toreal(DataList[26]),
      TDTime = toreal(DataList[28])
    | extend 
      TableId = tostring(DataList[0]),
      TableName = tostring(DataList[1]),
      TableSchemaId = tostring(DataList[2]),
      TableSchema = tostring(DataList[3]),
      TableCatalogId = tostring(DataList[4]),
      TableCatalog = tostring(DataList[5]),
      TableOwner = tostring(DataList[6]),
      TableType = tostring(DataList[7]),
      TableIsTransient = tostring(DataList[8]),
      TableIsIceberg = tostring(DataList[9]),
      TableIsDynamic = tostring(DataList[10]),
      TableIsHybrid = tostring(DataList[11]),
      TableClusteringKey = tostring(DataList[12]),
      TableRowCount = tostring(DataList[13]),
      TableBytes = tostring(DataList[14]),
      TableRetentionTime = tostring(DataList[15]),
      TableSelfReferencingColumnName = tostring(DataList[16]),
      TableReferenceGeneration = tostring(DataList[17]),
      TableUserDefinedTypeCatalog = tostring(DataList[18]),
      TableUserDefinedTypeSchema = tostring(DataList[19]),
      TableUserDefinedTypeName = tostring(DataList[20]),
      TableIsInsertableInto = tostring(DataList[21]),
      TableIsTyped = tostring(DataList[22]),
      TableCommitAction = tostring(DataList[23]),
      TableCreated = unixtime_seconds_todatetime(TCTime),
      TableLastAltered = unixtime_seconds_todatetime(LATime),
      TableLastDDL = unixtime_seconds_todatetime(LDTime),
      TableLastDDLBy = tostring(DataList[27]),
      TableDeleted = unixtime_seconds_todatetime(TDTime),
      TableAutoClusteringOn = tostring(DataList[29]),
      TableComment = tostring(DataList[30]),
      TableOwnerRoleType = tostring(DataList[31]),
      TableInstanceId = tostring(DataList[32])
  };
  let SnowflakeUsers_view = view () {
    SnowflakeUsers_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend
      CTime = toreal(DataList[2]),
      DTime = toreal(DataList[3]),
      BMTime = toreal(DataList[20]),
      LSLTime = toreal(DataList[21]),
      ETime = toreal(DataList[22]),
      LUTime = toreal(DataList[23]),
      PLSTime = toreal(DataList[25])
    | extend
      UserId = tostring(DataList[0]),
      UserName = tostring(DataList[1]),
      UserCreatedOn = unixtime_seconds_todatetime(CTime),
      UserDeletedOn = unixtime_seconds_todatetime(DTime),
      UserLoginName = tostring(DataList[4]),
      UserDisplayName = tostring(DataList[5]),
      UserFirstName = tostring(DataList[6]),
      UserLastName = tostring(DataList[7]),
      UserEmail = tostring(DataList[8]),
      UserMustChangePassword = tobool(DataList[9]),
      UserHasPassword = tobool(DataList[10]),
      UserComment = tostring(DataList[11]),
      UserDisabled = tostring(DataList[12]),
      UserSnowflakeLock = tostring(DataList[13]),
      UserDefaultWarehouse = tostring(DataList[14]),
      UserDefaultNamespace = tostring(DataList[15]),
      UserDefaultRole = tostring(DataList[16]),
      UserExtAuthnDuo = tobool(DataList[17]),
      UserExtAuthnUid = tostring(DataList[18]),
      UserHasMFA = tobool(DataList[19]),
      UserBypassMFAUntil = unixtime_seconds_todatetime(BMTime),
      UserLastSuccessLogin = unixtime_seconds_todatetime(LSLTime),
      UserExpiresAt = unixtime_seconds_todatetime(ETime),
      UserLockedUntilTime = unixtime_seconds_todatetime(LUTime),
      UserHasRSAPublicKey = tobool(DataList[24]),
      UserPasswordLastSetTime = unixtime_seconds_todatetime(PLSTime),
      UserOwner = tostring(DataList[26]),
      UserDefaultSecondaryRole = tostring(DataList[27]),
      UserType = tostring(DataList[28]),
      UserDatabaseName = tostring(DataList[29]),
      UserDatabaseId = tostring(DataList[30]),
      UserSchemaName = tostring(DataList[31]),
      UserSchemaId = tostring(DataList[32])
  };
  let SnowflakeQuery_view = view () {
    SnowflakeQuery_CL
    | extend EventVendor = 'Snowflake'
    | extend EventProduct = 'Snowflake'
    | mv-expand DataList = todynamic(Data)
    | extend
      STime = toreal(DataList[19]),
      ETime = toreal(DataList[20])
    | extend
      QueryId = tostring(DataList[0]),
      QueryText = tostring(DataList[1]),
      QueryDatabaseId = tostring(DataList[2]),
      QueryDatabaseName = tostring(DataList[3]),
      QuerySchemaId = tostring(DataList[4]),
      QuerySchemaName = tostring(DataList[5]),
      QueryType = tostring(DataList[6]),
      QuerySessionId = tostring(DataList[7]),
      QueryUserName = tostring(DataList[8]),
      QueryRoleName = tostring(DataList[9]),
      QueryWarehouseId = tostring(DataList[10]),
      QueryWarehouseName = tostring(DataList[11]),
      QueryWarehouseSize = tostring(DataList[12]),
      QueryWarehouseType = tostring(DataList[13]),
      QueryClusterNumber = tostring(DataList[14]),
      QueryTag = tostring(DataList[15]),
      QueryExecutionStatus = tostring(DataList[16]),
      QueryErrorCode = tostring(DataList[17]),
      QueryErrorMessage = tostring(DataList[18]),
      QueryStartTime = unixtime_seconds_todatetime(STime),
      EventEndTime = unixtime_seconds_todatetime(ETime),
      QueryTotalElapsedTime = tostring(DataList[21]),
      QueryBytesScanned = tostring(DataList[22]),
      QueryPercentageScannedFromCache = tostring(DataList[23]),
      QueryBytesWritten = tostring(DataList[24]),
      QueryBytesWrittenToResult = tostring(DataList[25]),
      QueryBytesReadFromResult = tostring(DataList[26]),
      QueryRowsProduced = tostring(DataList[27]),
      QueryRowsInserted = tostring(DataList[28]),
      QueryRowsUpdated = tostring(DataList[29]),
      QueryRowsDeleted = tostring(DataList[30]),
      QueryRowsUnloaded = tostring(DataList[31]),
      QueryBytesDeleted = tostring(DataList[32]),
      QueryPartitionsScanned = tostring(DataList[33]),
      QueryPartitionsTotal = tostring(DataList[34]),
      QueryBytesSpilledToLocalStorage = tostring(DataList[35]),
      QueryBytesSpilledToRemoteStorage = tostring(DataList[36]),
      QueryBytesSentOverTheNetwork = tostring(DataList[37]),
      QueryCompilationTime = tostring(DataList[38]),
      QueryExecutionTime = tostring(DataList[39]),
      QueryQueuedProvisioningTime = tostring(DataList[40]),
      QueryQueuedRepairTime = tostring(DataList[41]),
      QueryQueuedOverloadTime = tostring(DataList[42]),
      QueryTransactionBlockedTime = tostring(DataList[43]),
      QueryOutboundDataTransferCloud = tostring(DataList[44]),
      QueryOutboundDataTransferRegion = tostring(DataList[45]),
      QueryOutboundDataTransferBytes = tostring(DataList[46]),
      QueryInboundDataTransferCloud = tostring(DataList[47]),
      QueryInboundDataTransferRegion = tostring(DataList[48]),
      QueryInboundDataTransferBytes = tostring(DataList[49]),
      QueryListExternalFilesTime = tostring(DataList[50]),
      QueryCreditsUsedCloudServices = tostring(DataList[51]),
      QueryReleaseVersion = tostring(DataList[52]),
      QueryExternalFunctionTotalInvocations = tostring(DataList[53]),
      QueryExternalFunctionTotalSentRows = tostring(DataList[54]),
      QueryExternalFunctionTotalReceivedRows = tostring(DataList[55]),
      QueryExternalFunctionTotalSentBytes = tostring(DataList[56]),
      QueryExternalFunctionTotalReceivedBytes = tostring(DataList[57]),
      QueryLoadPercent = tostring(DataList[58]),
      QueryIsClientGeneratedStatement = tobool(DataList[59]),
      QueryAccelerationBytesScanned = tostring(DataList[60]),
      QueryAccelerationPartitionsScanned = tostring(DataList[61]),
      QueryAccelerationUpperLimitScaleFactor = tostring(DataList[62]),
      QueryTransactionId = tostring(DataList[63]),
      ChildQueriesWaitTime = tostring(DataList[64]),
      QueryRoleType = tostring(DataList[65]),
      QueryHash = tostring(DataList[66]),
      QueryHashVersion = tostring(DataList[67]),
      QueryParameterizedHash = tostring(DataList[68]),
      QueryParameterizedHashVersion = tostring(DataList[69]),
      QuerySecondaryRoleStats = tostring(DataList[70]),
      QueryRowsWrittenToResult = tostring(DataList[71]),
      QueryRetryTime = tostring(DataList[72]),
      QueryRetryCause = tostring(DataList[73]),
      QueryFaultHandlingTime = tostring(DataList[74]),
      QueryUserType = tostring(DataList[75]),
      QueryUserDatabaseName = tostring(DataList[76]),
      QueryUserDatabaseId = tostring(DataList[77]),
      QueryUserSchemaName = tostring(DataList[78]),
      QueryUserSchemaId = tostring(DataList[79])
  };
  union isfuzzy=true
  (Snowflake_view),
  (SnowflakeLogin_view),
  (SnowflakeUserGrant_view),
  (SnowflakeMaterializedView_view),
  (SnowflakeRoles_view),
  (SnowflakeRoleGrant_view),
  (SnowflakeLoad_view),
  (SnowflakeTableStorageMetrics_view),
  (SnowflakeTables_view),
  (SnowflakeUsers_view),
  (SnowflakeQuery_view)
  | project
    EventVendor, 
    EventProduct, 
    EventStartTime,
    EventType,
    TargetUsername,
    SrcDvcIpAddr,
    User,
    EventEndTime,
    LoginEventId,
    LoginReportedClientType,
    LoginReportedClientVersion,
    LoginFirstAuthenticationFactor,
    LoginSecondAuthenticationFactor,
    LoginIsSuccess,
    LoginErrorCode,
    LoginErrorMessage,
    LoginRelatedEventId,
    LoginConnection,
    LoginClientPrivateLinkId,
    UserGrantCreatedOn,
    UserGrantDeletedOn,
    UserRole,
    UserGrantGrantedTo,
    UserGrantGranteeName,
    UserGrantGrantedBy,
    MaterializedViewStartTime,
    MaterializedViewEndTime,
    MaterializedViewCreditsUsed,
    MaterializedViewTableId,
    MaterializedViewTableName,
    MaterializedViewSchemaId,
    MaterializedViewSchemaName,
    MaterializedViewDatabaseId,
    MaterializedViewDatabaseName,
    RoleId,
    RoleCreatedOn,
    RoleDeletedOn,
    RoleName,
    RoleComment,
    RoleOwner,
    RoleType,
    RoleDatabaseName,
    RoleInstanceId,
    OwnerRoleType,
    RoleGrantCreatedOn,
    RoleGrantModifiedOn,
    RoleGrantPrivilege,
    RoleGrantGrantedOn,
    RoleGrantName,
    RoleGrantTableCatalog,
    RoleGrantTableSchema,
    RoleGrantGrantedTo,
    RoleGrantGranteeName,
    RoleGrantGrantOption,
    RoleGrantGrantedBy,
    RoleGrantDeletedOn,
    RoleGrantGrantedByRoleType,
    RoleGrantObjectInstance,
    LoadTableId,
    LoadTableName,
    LoadSchemaId,
    LoadSchemaName,
    LoadCatalogId,
    LoadCatalogName,
    LoadFileName,
    LastLoadTime,
    LoadStatus,
    LoadRowCount,
    LoadRowParsed,
    LoadFirstErrorMessage,
    LoadFirstErrorLineNumber,
    LoadFirstErrorCharacterPosition,
    LoadFirstErrorColName,
    LoadErrorCount,
    LoadErrorLimit,
    TableStorageMetricsId,
    TableStorageMetricsTableName,
    TableStorageMetricsTableSchemaId,
    TableStorageMetricsTableSchema,
    TableStorageMetricsTableCatalogId,
    TableStorageMetricsTableCatalog,
    TableStorageMetricsCloneGroupId,
    TableStorageMetricsIsTransient,
    TableStorageMetricsActiveBytes,
    TableStorageMetricsTimeTravelBytes,
    TableStorageMetricsFailsafeBytes,
    TableStorageMetricsRetainedForCloneBytes,
    TableStorageMetricsDeleted,
    TableStorageMetricsTableCreated,
    TableStorageMetricsTableDropped,
    TableStorageMetricsTableEnteredFailsafe,
    TableStorageMetricsSchemaCreated,
    TableStorageMetricsSchemaDropped,
    TableStorageMetricsCatalogCreated,
    TableStorageMetricsCatalogDropped,
    TableStorageMetricsComment,
    TableStorageMetricsInstanceId,
    TableId,
    TableName,
    TableSchemaId,
    TableSchema,
    TableCatalogId,
    TableCatalog,
    TableOwner,
    TableType,
    TableIsTransient,
    TableIsIceberg,
    TableIsDynamic,
    TableIsHybrid,
    TableClusteringKey,
    TableRowCount,
    TableBytes,
    TableRetentionTime,
    TableSelfReferencingColumnName,
    TableReferenceGeneration,
    TableUserDefinedTypeCatalog,
    TableUserDefinedTypeSchema,
    TableUserDefinedTypeName,
    TableIsInsertableInto,
    TableIsTyped,
    TableCommitAction,
    TableCreated,
    TableLastAltered,
    TableLastDDL,
    TableLastDDLBy,
    TableDeleted,
    TableAutoClusteringOn,
    TableComment,
    TableOwnerRoleType,
    TableInstanceId,
    UserId,
    UserName,
    UserCreatedOn,
    UserDeletedOn,
    UserLoginName,
    UserDisplayName,
    UserFirstName,
    UserLastName,
    UserEmail,
    UserMustChangePassword,
    UserHasPassword,
    UserComment,
    UserDisabled,
    UserSnowflakeLock,
    UserDefaultWarehouse,
    UserDefaultNamespace,
    UserDefaultRole,
    UserExtAuthnDuo,
    UserExtAuthnUid,
    UserHasMFA,
    UserBypassMFAUntil,
    UserLastSuccessLogin,
    UserExpiresAt,
    UserLockedUntilTime,
    UserHasRSAPublicKey,
    UserPasswordLastSetTime,
    UserOwner,
    UserDefaultSecondaryRole,
    UserType,
    UserDatabaseName,
    UserDatabaseId,
    UserSchemaName,
    UserSchemaId,
    QueryId,
    QueryText,
    QueryDatabaseId,
    QueryDatabaseName,
    QuerySchemaId,
    QuerySchemaName,
    QueryType,
    QuerySessionId,
    QueryUserName,
    QueryRoleName,
    QueryWarehouseId,
    QueryWarehouseName,
    QueryWarehouseSize,
    QueryWarehouseType,
    QueryClusterNumber,
    QueryTag,
    QueryExecutionStatus,
    QueryErrorCode,
    QueryErrorMessage,
    QueryStartTime,
    QueryTotalElapsedTime,
    QueryBytesScanned,
    QueryPercentageScannedFromCache,
    QueryBytesWritten,
    QueryBytesWrittenToResult,
    QueryBytesReadFromResult,
    QueryRowsProduced,
    QueryRowsInserted,
    QueryRowsUpdated,
    QueryRowsDeleted,
    QueryRowsUnloaded,
    QueryBytesDeleted,
    QueryPartitionsScanned,
    QueryPartitionsTotal,
    QueryBytesSpilledToLocalStorage,
    QueryBytesSpilledToRemoteStorage,
    QueryBytesSentOverTheNetwork,
    QueryCompilationTime,
    QueryExecutionTime,
    QueryQueuedProvisioningTime,
    QueryQueuedRepairTime,
    QueryQueuedOverloadTime,
    QueryTransactionBlockedTime,
    QueryOutboundDataTransferCloud,
    QueryOutboundDataTransferRegion,
    QueryOutboundDataTransferBytes,
    QueryInboundDataTransferCloud,
    QueryInboundDataTransferRegion,
    QueryInboundDataTransferBytes,
    QueryListExternalFilesTime,
    QueryCreditsUsedCloudServices,
    QueryReleaseVersion,
    QueryExternalFunctionTotalInvocations,
    QueryExternalFunctionTotalSentRows,
    QueryExternalFunctionTotalReceivedRows,
    QueryExternalFunctionTotalSentBytes,
    QueryExternalFunctionTotalReceivedBytes,
    QueryLoadPercent,
    QueryIsClientGeneratedStatement,
    QueryAccelerationBytesScanned,
    QueryAccelerationPartitionsScanned,
    QueryAccelerationUpperLimitScaleFactor,
    QueryTransactionId,
    ChildQueriesWaitTime,
    QueryRoleType,
    QueryHash,
    QueryHashVersion,
    QueryParameterizedHash,
    QueryParameterizedHashVersion,
    QuerySecondaryRoleStats,
    QueryRowsWrittenToResult,
    QueryRetryTime,
    QueryRetryCause,
    QueryFaultHandlingTime,
    QueryUserType,
    QueryUserDatabaseName,
    QueryUserDatabaseId,
    QueryUserSchemaName,
    QueryUserSchemaId
