id: f648b6fb-b2ac-46c9-9df3-21d6e3d68fae
Function:
  Title: Parser for CiscoSDWANNetflow
  Version: '1.0.0'
  LastUpdated: '2023-08-23'
Category: Microsoft Sentinel Parser
FunctionName: CiscoSDWANNetflow
FunctionAlias: CiscoSDWANNetflow
FunctionQuery: |
    let ConvertNetflowApplicationTag = (ApplicationTag: string) {
        let raw_application_tag = todynamic(ApplicationTag);
        let application_tag_number_0 = toint((raw_application_tag)[0]);
        let application_tag_number_1 = toint((raw_application_tag)[1]);
        let application_tag_number_2 = toint((raw_application_tag)[2]);
        let application_tag_number_3 = toint((raw_application_tag)[3]);
        let hex_application_tag = strcat(tohex(application_tag_number_1, 2), tohex(application_tag_number_2, 2), tohex(application_tag_number_3, 2));
        case(application_tag_number_0 == 0, strcat("Invalid", " : ", hex_application_tag),
            application_tag_number_0 == 1, strcat("IANA-L3", " : ", hex_application_tag),
            application_tag_number_0 == 2, strcat("PANA-L3", " : ", hex_application_tag),
            application_tag_number_0 == 3, strcat("IANA-L4", " : ", hex_application_tag),
            application_tag_number_0 == 4, strcat("PANA-L4", " : ", hex_application_tag),
            application_tag_number_0 == 5, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 6, strcat("USER-Defined", " : ", hex_application_tag),
            application_tag_number_0 == 7, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 8, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 9, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 10, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 11, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 12, strcat("PANA-L2", " : ", hex_application_tag),
            application_tag_number_0 == 13, strcat("PANA-L7", " : ", hex_application_tag),
            application_tag_number_0 == 14, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 15, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 16, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 17, strcat("Reserved", " : ", hex_application_tag),
            application_tag_number_0 == 18, strcat("ETHERTYPE", " : ", hex_application_tag),
            application_tag_number_0 == 19, strcat("LLC", " : ", hex_application_tag),
            application_tag_number_0 == 20, strcat("PANA-L7-PEN", " : ", hex_application_tag), "unclassified");
    };
    let CiscoSDWANNetflow_view = view() {
        CiscoSDWANNetflow_CL
        | extend
            EventVendor="CiscoSD-WAN",
            EventProduct="Netflow",
            ApplicationTag = coalesce(column_ifexists('netflow_application_tag_s', ''), column_ifexists('netflow_options_application_tag_s', ''), column_ifexists('netflow_scope_application_tag_s', '')),
            NetflowBytesIn = column_ifexists('netflow_bytes_in_d', ''),
            NetflowElement_9_2239 = coalesce(toint(column_ifexists('netflow_element_9_2239_d', '')), toint(column_ifexists('netflow_scope_element_9_2239_d', ''))),
            NetflowEgressVRFID = column_ifexists('netflow_egress_vrf_id_d', '' ),
            NetflowIngressVRFID = column_ifexists('netflow_ingress_vrf_id_d', ''),
            NetflowExporterAddress = column_ifexists('netflow_exporter_address_s', ''),
            NetflowExporterSourceID = column_ifexists('netflow_exporter_source_id_d', ''),
            NetflowExporterTimestamp = column_ifexists('netflow_exporter_timestamp_t', ''),
            NetflowExporterUptimeMillis = column_ifexists('netflow_exporter_uptime_millis_d', ''),
            NetflowExporterVersion = column_ifexists('netflow_exporter_version_d', ''),
            NetflowFirewallEvent = column_ifexists('netflow_firewall_event_d', ''),
            NetflowFlowFieldDestDSAID = column_ifexists('netflow_flow_field_dst_dsa_id_d', ''),
            NetflowFlowFieldSGT = column_ifexists('netflow_flow_field_sgt_d', ''),
            NetflowFlowFieldSrcDSAID = column_ifexists('netflow_flow_field_src_dsa_id_d', ''),
            NetflowFlowEndMilliseconds = column_ifexists('netflow_flow_end_milliseconds_t', ''),
            NetflowFlowEndReason = column_ifexists('netflow_flow_end_reason_d', ''),
            NetflowFlowStartMilliseconds = column_ifexists('netflow_flow_start_milliseconds_t', ''),
            NetflowFwAction = coalesce(toint(column_ifexists('netflow_fw_action_d', '')), toint(column_ifexists('netflow_scope_fw_action_d', ''))),
            NetflowFwDestAddrIpv4 = column_ifexists('netflow_fw_dest_addr_ipv4_s', ''),
            NetflowFwDestPort = column_ifexists('netflow_fw_dest_port_d', ''),
            NetflowFwEventTimeMsec = column_ifexists('netflow_fw_event_time_msec_d', ''),
            NetflowFwICMPCode = column_ifexists('netflow_fw_icmp_code_d', ''),
            NetflowFwICMPType = column_ifexists('netflow_fw_icmp_type_d', ''),
            NetflowFwInitiatorOctets = column_ifexists('netflow_fw_initiator_octets_d', ''),
            NetflowFwIpv4Ident = column_ifexists('netflow_fw_ipv4_ident_d', ''),
            NetflowFwPolicy = coalesce(toint(column_ifexists('netflow_fw_policy_d', '')), toint(column_ifexists('netflow_options_fw_policy_d', '')), toint(column_ifexists('netflow_scope_fw_policy_d', ''))),
            NetflowFwProtocol = column_ifexists('netflow_fw_protocol_d', ''),
            NetflowFwResponderOctets = column_ifexists('netflow_fw_responder_octets_d', ''),
            NetflowFwSrcAddrIpv4 = column_ifexists('netflow_fw_src_addr_ipv4_s', ''),
            NetflowFwSrcPort = column_ifexists('netflow_fw_src_port_d', ''),
            NetflowFwSummaryPktCnt = column_ifexists('netflow_fw_summary_pkt_cnt_d', ''),
            NetflowFwTCPAck = column_ifexists('netflow_fw_tcp_ack_d', ''),
            NetflowFwTCPFlags = column_ifexists('netflow_fw_tcp_flags_d', ''),
            NetflowFwTCPSeq = column_ifexists('netflow_fw_tcp_seq_d', ''),
            NetflowFwXlateDestAddrIpv4 = column_ifexists('netflow_fw_xlate_dst_addr_ipv4_s', ''),
            NetflowFwXlateDestPort = column_ifexists('netflow_fw_xlate_dst_port_d', ''),
            NetflowFwXlateSrcAddrIpv4 = column_ifexists('netflow_fw_xlate_src_addr_ipv4_s', ''),
            NetflowFwXlateSrcPort = column_ifexists('netflow_fw_xlate_src_port_d', ''),
            NetflowInputSNMPIDX = column_ifexists('netflow_input_snmpidx_d', ''),
            NetflowOutputSNMPIDX = column_ifexists('netflow_output_snmpidx_d', ''),
            NetflowIpDiffServCodePoint = column_ifexists('netflow_ip_diff_serv_code_point_d', ''),
            NetflowApplicationDescription = column_ifexists('netflow_options_application_description_s', ''),
            NetflowApplicationName = column_ifexists('netflow_options_application_name_s', ''),
            NetflowEncryptedTechnology = column_ifexists('netflow_options_encrypted_technology_s', ''),
            NetflowFwActionRule = column_ifexists('netflow_options_fw_action_rule_s', ''),
            NetflowFwExtEvent = coalesce(toint(column_ifexists('netflow_fw_ext_event_d', '')), toint(column_ifexists('netflow_options_fw_ext_event_d', ''))),
            NetflowFwExtEventDesc = column_ifexists('netflow_options_fw_ext_event_desc_s', ''),
            NetflowFwPolicyRule = column_ifexists('netflow_options_fw_policy_rule_s', ''),
            NetflowFwPolicyType = column_ifexists('netflow_options_fw_policy_type_s', ''),
            NetflowFwZonepairID = coalesce(toint(column_ifexists('netflow_fw_zonepair_id_d', '')),toint(column_ifexists('netflow_options_fw_zonepair_id_d', ''))),
            NetflowFwZonepairName = column_ifexists('netflow_options_fw_zonepair_name_s', ''),
            NetflowInterfaceDescription = column_ifexists('netflow_options_interface_description_s', ''),
            NetflowInterfaceName = column_ifexists('netflow_options_interface_name_s', ''),
            NetflowP2pTechnology = column_ifexists('netflow_options_p2p_technology_s', ''),
            NetflowTunnelTechnology = column_ifexists('netflow_options_tunnel_technology_s', ''),
            NetflowPacketsIn = column_ifexists('netflow_packets_in_d', ''),
            NetflowPostIpDiffServCodePoint = column_ifexists('netflow_post_ip_diff_serv_code_point_d', ''),
            NetflowSrcTOS = column_ifexists('netflow_src_tos_d', ''),
            NetflowType = column_ifexists('netflow_type_s', ''),
            NetflowUsername = column_ifexists('netflow_username_s', ''),
            NetworkCommunityID = column_ifexists('network_community_id_s', ''),
            NetworkDirection = column_ifexists('network_direction_s', ''),
            ObserverIp = column_ifexists('observer_ip_s', ''),
            HostArchitecture = column_ifexists('host_architecture_s', ''),
            HostContainerized = column_ifexists('host_containerized_b', ''),
            NetflowHostname = coalesce(column_ifexists('host_hostname_s', ''), column_ifexists('host_name_s', '')),
            HostID = column_ifexists('host_id_g', ''),
            HostIp = column_ifexists('host_ip_s', ''),
            HostMac = column_ifexists('host_mac_s', ''),
            Hostname = column_ifexists('host_name_s', ''),
            HostOSCodename = column_ifexists('host_os_codename_s', ''),
            HostOSFamily = column_ifexists('host_os_family_s', ''),
            HostOSKernel = column_ifexists('host_os_kernel_s', ''),
            HostOSName = column_ifexists('host_os_name_s', ''),
            HostOSPlatform = column_ifexists('host_os_platform_s', ''),
            HostOSType = column_ifexists('host_os_type_s', ''),
            HostOSVersion = column_ifexists('host_os_version_s', ''),
            InputType = column_ifexists('input_type_s', ''),
            Tags = column_ifexists('tags_s', ''),
            TimeStamp = column_ifexists('_timestamp_t', ''),
            Version = column_ifexists('_version_s', ''),
            AgentEphemeralID = column_ifexists('agent_ephemeral_id_g', ''),
            AgentID = column_ifexists('agent_id_g', ''),
            AgentName = column_ifexists('agent_name_s', ''),
            AgentType = column_ifexists('agent_type_s', ''),
            AgentVersion = column_ifexists('agent_version_s', ''),
            ECSVersion = column_ifexists('ecs_version_s', ''),
            EventAction = column_ifexists('event_action_s', ''),
            EventCategory = column_ifexists('event_category_s', ''),
            EventCreated = column_ifexists('event_created_t', ''),
            EventKind = column_ifexists('event_kind_s', ''),
            EventType = column_ifexists('event_type_s', ''),
            FlowID = column_ifexists('flow_id_s', ''),
            FlowLocality = column_ifexists('flow_locality_s', '')
        | extend NetflowApplicationTag = iff(isnotempty(ApplicationTag),ConvertNetflowApplicationTag(ApplicationTag), ApplicationTag)
        | project
            EventVendor,
            EventProduct,
            TimeStamp,
            TimeGenerated = TimeStamp,
            NetflowApplicationTag,
            NetflowApplicationName,
            NetflowApplicationDescription,
            NetflowBytesIn,
            NetflowElement_9_2239,
            NetflowEgressVRFID,
            NetflowIngressVRFID,
            NetflowExporterAddress,
            NetflowExporterSourceID,
            NetflowExporterTimestamp,
            NetflowExporterUptimeMillis,
            NetflowExporterVersion,
            NetflowFirewallEvent,
            NetflowFlowFieldDestDSAID,
            NetflowFlowFieldSGT,
            NetflowFlowFieldSrcDSAID,
            NetflowFlowEndMilliseconds,
            NetflowFlowEndReason,
            NetflowFlowStartMilliseconds,
            NetflowFwAction,
            NetflowFwDestAddrIpv4,
            NetflowFwDestPort,
            NetflowFwEventTimeMsec,
            NetflowFwICMPCode,
            NetflowFwICMPType,
            NetflowFwInitiatorOctets,
            NetflowFwResponderOctets,
            NetflowFwIpv4Ident,
            NetflowFwPolicy,
            NetflowFwProtocol,
            NetflowFwSrcAddrIpv4,
            NetflowFwSrcPort,
            NetflowFwSummaryPktCnt,
            NetflowFwTCPAck,
            NetflowFwTCPFlags,
            NetflowFwTCPSeq,
            NetflowFwXlateDestAddrIpv4,
            NetflowFwXlateDestPort,
            NetflowFwXlateSrcAddrIpv4,
            NetflowFwXlateSrcPort,
            NetflowInputSNMPIDX,
            NetflowOutputSNMPIDX,
            NetflowIpDiffServCodePoint,
            NetflowEncryptedTechnology,
            NetflowFwActionRule,
            NetflowFwExtEvent,
            NetflowFwExtEventDesc,
            NetflowFwPolicyRule,
            NetflowFwPolicyType,
            NetflowFwZonepairID,
            NetflowFwZonepairName,
            NetflowInterfaceDescription,
            NetflowInterfaceName,
            NetflowP2pTechnology,
            NetflowTunnelTechnology,
            NetflowPacketsIn,
            NetflowPostIpDiffServCodePoint,
            NetflowSrcTOS,
            NetflowType,
            NetflowUsername,
            NetworkCommunityID,
            NetworkDirection,
            ObserverIp,
            HostArchitecture,
            HostContainerized,
            NetflowHostname,
            HostID,
            HostIp,
            HostMac,
            Hostname,
            HostOSCodename,
            HostOSFamily,
            HostOSKernel,
            HostOSName,
            HostOSPlatform,
            HostOSType,
            HostOSVersion,
            InputType,
            Tags,
            Version,
            AgentEphemeralID,
            AgentID,
            AgentName,
            AgentType,
            AgentVersion,
            Computer,
            ECSVersion,
            EventAction,
            EventCategory,
            EventCreated,
            EventKind,
            EventType,
            FlowID,
            FlowLocality,
            RawData,
            Type,
            _ResourceId,
            _SubscriptionId
    };
    CiscoSDWANNetflow_view