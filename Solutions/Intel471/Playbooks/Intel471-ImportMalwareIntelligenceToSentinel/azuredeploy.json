{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Intel 471 Malware Intelligence to Sentinel",
        "description": "This playbook ingests malware indicators from Intel 471's Titan API into Microsoft Sentinel as tiIndicator resource type.",
        "prerequisites": [
            "1. An active account in Titan platform, which is available as part of Intel 471's subscriptions. For more information, please contact sales@intel471.com.",
            "2. Titan API credentials.",
            "3. Pre-existing [Key Vault](https://docs.microsoft.com/azure/key-vault/general/basic-concepts) for securely storing Titan API credentials. Store Titan API credentials as secrets under `TitanUserNameSentinel` and `TitanAPIKeySentinel` keys.",
            "4. Pre-existing [Storage account](https://learn.microsoft.com/azure/storage/common/storage-account-overview) with blob container already created for persisting data such as cursor between the API calls.",
            "5. Threat Intelligence connector enabled in Sentinel. Go to Sentinel instance → 'Content hub' and install 'Threat Intelligence' solution."
        ],
        "postDeployment": [
            "1. Go to the Key Vault. Select `Access control (IAM)` → `+ Add` → `Add role assignment`. Choose `Key Vault Secrets User`. On the next screen hit `+ Select members`, search for Intel 471 and select newly created logic app. Select it and proceed with granting access rights.",
            "2. Go to the selected Log Analytics workspace and repeat step 1. except grant role `Microsoft Sentinel Contributor`.",
            "3. Go to created `Logic App` → `Edit`. Navigate to `CollectAndSubmitIndicators → IfIndicators → True → Threat Intelligence - Upload Indicators of Compromise (V2) (Preview)` block. Inside this block create a new connection. Select `Connect with managed identity`, provide connection name and click `Create`.",
            "4. Optionally change the schedule's frequency in `Recurrence` block (the first one)."
        ],
        "lastUpdateTime": "2023-06-21T00:00:00.000Z",
        "entities": [
            "ip",
            "filehash",
            "url"
        ],
        "tags": [
            "ThreatIntelligence"
        ],
        "author": {
            "name": "Marcin Molenda / Intel 471, Inc."
        },
        "support": {
          "name": "Intel 471",
          "email": "support@intel471.com",
          "tier": "Partner",
          "link": "https://intel471.com/company/contact"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Intel471-ImportMalwareIntelligenceToSentinel",
            "type": "String"
        },
        "StorageAccountName": {
            "type": "String",
            "metadata": {
                "description": "Name of the pre-existing Storage Account where Logic App can store helper data."
            }
        },
        "StorageAccountContainerName": {
            "type": "String",
            "metadata": {
                "description": "Name of the pre-existing blob container inside provided Storage Account."
            }
        },
        "KeyVaultName": {
            "type": "String",
            "metadata": {
                "description": "Name of the pre-existing Key Vault with Titan API credentials. The credentials are expected under following keys: TitanUserNameSentinal nad TitanAPIKeySentinel"
            }
        },
        "WorkspaceID": {
            "type": "String",
            "metadata": {
                "description": "ID of the Log Analytics workspace to which the indicators will be directed."
            }
        },
        "LookBackDays": {
            "defaultValue": 0,
            "type": "int",
            "metadata": {
                "description": "How many days of history should be pulled on the first run. Leave 0 to start from the current time."
            }
        }
    },
    "variables": {
        "MicrosoftSentinelConnectionName": "[concat('sentinel-', parameters('PlaybookName'))]",
        "AzureBlobConnectionName": "[concat('azureblob-', parameters('PlaybookName'))]",
        "StorageAccountName": "[parameters('StorageAccountName')]",
        "StorageAccountContainerName": "[parameters('StorageAccountContainerName')]",
        "AzureKeyVaultName": "[parameters('KeyVaultName')]",
        "AzureKeyVaultConnectionName": "[concat('keyvault-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('MicrosoftSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureBlobConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[variables('AzureBlobConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                },
                "parameterValues": {
                    "accountName": "[variables('StorageAccountName')]",
                    "accessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2022-09-01').keys[0].value]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureKeyVaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureKeyVaultConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                },
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                    "vaultName": "[variables('AzureKeyVaultName')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]"
            ],
            "tags": {
                "LogicAppsCategory": "security"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "StorageAccountName": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "StorageAccountContainerName": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "BlobNameCursor": {
                            "defaultValue": "cursorSentinel.txt",
                            "type": "String"
                        },
                        "BlobNameFromDate": {
                            "defaultValue": "fromdateSentinel.txt",
                            "type": "String"
                        },
                        "LookBackDays": {
                            "defaultValue": 0,
                            "type": "int"
                        },
                        "WorkspaceID": {
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 1
                            },
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "runs": 1
                                }
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "CollectAndSubmitIndicators": {
                            "actions": {
                                "CursorNotNull": {
                                    "actions": {
                                        "StoreCursor": {
                                            "runAfter": {
                                                "UpdateCursor": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@string(variables('cursor'))",
                                                "headers": {
                                                    "ReadFileMetadataFromServer": true
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                    }
                                                },
                                                "method": "put",
                                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountContainerName'),'/',parameters('BlobNameCursor')))}"
                                            }
                                        },
                                        "UpdateCursor": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "cursor",
                                                "value": "@body('Parse_JSON')?['cursorNext']"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@body('Parse_JSON')?['cursorNext']",
                                                        "@null"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "FilterIndicators": {
                                    "actions": {
                                        "Each_indicator": {
                                            "foreach": "@body('Parse_JSON')?['indicators']",
                                            "actions": {
                                                "Condition": {
                                                    "actions": {
                                                        "Append_indicator": {
                                                            "runAfter": {},
                                                            "type": "AppendToArrayVariable",
                                                            "inputs": {
                                                                "name": "collectedIndicators",
                                                                "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', ''), 'composedHashType', '')"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {},
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "greater": [
                                                                    "@items('Each_indicator')?['data']?['expiration']",
                                                                    "@div(sub(ticks(utcNow()),ticks('1970-01-01')), 10000)"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "SetHasResults": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('hasResults')",
                                                    true
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "HTTP": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "password": "@body('GetApiKey')?['value']",
                                            "type": "Basic",
                                            "username": "@body('GetUsername')?['value']"
                                        },
                                        "headers": {
                                            "User-Agent": "Intel 471 - Malware Intelligence Sentinel - Azure Logic App 1.0.0"
                                        },
                                        "method": "GET",
                                        "queries": "@if(equals(variables('cursor'), 'null'), variables('payload'), setProperty(variables('payload'), 'cursor', variables('cursor')))",
                                        "uri": "https://api.intel471.com/v1/indicators/stream"
                                    }
                                },
                                "IfIndicators": {
                                    "actions": {
                                        "ClearCollectedIndicators": {
                                            "runAfter": {
                                                "Threat_Intelligence_-_Upload_Indicators_of_Compromise_(V2)_(Preview)": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "collectedIndicators",
                                                "value": []
                                            }
                                        },
                                        "MapIndicatorsToTiIndicators": {
                                            "runAfter": {},
                                            "type": "Select",
                                            "inputs": {
                                                "from": "@variables('collectedIndicators')",
                                                "select": {
                                                    "confidence": "@if(equals(item()?['data']?['confidence'], 'high'), 85, if(equals(item()?['data']?['confidence'], 'medium'), 50, 15))",
                                                    "created": "@{addToTime('1970-01-01T00:00:00Z', div(item()?['activity']['first'], 1000), 'second')}",
                                                    "description": "@concat('Intel 471 - ', item()?['data']?['context']?['description'])",
                                                    "external_references": [
                                                        {
                                                            "external_id": "@item()['data']['threat']['uid']",
                                                            "source_name": "intel471",
                                                            "url": "@concat('https://titan.intel471.com/malware/', item()['data']['threat']['uid'])"
                                                        }
                                                    ],
                                                    "id": "@concat('indicator--', guid())",
                                                    "indicator_types": [
                                                        "malicious-activity"
                                                    ],
                                                    "kill_chain_phases": [
                                                        {
                                                            "kill_chain_name": "lockheed-martin-cyber-kill-chain",
                                                            "phase_name": "@if(equals(item()?['data']?['mitre_tactics'], 'command_and_control'), 'C2', if(equals(item()?['data']?['mitre_tactics'], 'stage_capabilities'), 'Installation', if(equals(item()?['data']?['mitre_tactics'], 'initial_access'), 'Exploitation', '')))"
                                                        }
                                                    ],
                                                    "labels": "@createArray(item()['data']['threat']['data']['family'])",
                                                    "modified": "@{addToTime('1970-01-01T00:00:00Z', div(item()?['last_updated'], 1000), 'second')}",
                                                    "name": "@item()['data']['threat']['data']['family']",
                                                    "object_marking_refs": [
                                                        "marking-definition--f88d31f6-486f-44da-b317-01333bde0b82"
                                                    ],
                                                    "pattern": "@if(equals(item()?['data']?['indicator_type'], 'url'), concat('[url:value = ''', item()?['data']?['indicator_data']?['url'], ''']'), if(equals(item()?['data']?['indicator_type'], 'ipv4'), concat('[ipv4-addr:value = ''', item()?['data']?['indicator_data']?['address'], ''']'),    concat('[file:hashes.md5 = ''', item()?['data']?['indicator_data']?['file']?['md5'], ''' OR file:hashes.sha1 = ''', item()?['data']?['indicator_data']?['file']?['sha1'], ''' OR file:hashes.sha256 = ''', item()?['data']?['indicator_data']?['file']?['sha256'], ''']')      ))",
                                                    "pattern_type": "stix",
                                                    "spec_version": "2.1",
                                                    "type": "indicator",
                                                    "valid_from": "@{addToTime('1970-01-01T00:00:00Z', div(item()?['activity']['first'], 1000), 'second')}",
                                                    "valid_until": "@addToTime('1970-01-01T00:00:00Z', div(item()?['data']['expiration'], 1000), 'second')"
                                                }
                                            }
                                        },
                                        "Threat_Intelligence_-_Upload_Indicators_of_Compromise_(V2)_(Preview)": {
                                            "runAfter": {
                                                "MapIndicatorsToTiIndicators": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "indicators": "@body('MapIndicatorsToTiIndicators')",
                                                    "sourcesystem": "Intel 471 Titan"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/V2/ThreatIntelligence/@{encodeURIComponent(parameters('WorkspaceID'))}/UploadIndicators/"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "FilterIndicators": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(variables('collectedIndicators'))",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Parse_JSON": {
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('HTTP')",
                                        "schema": {
                                            "properties": {
                                                "cursorNext": {
                                                    "type": "string"
                                                },
                                                "indicators": {
                                                    "items": {
                                                        "properties": {
                                                            "activity": {
                                                                "properties": {
                                                                    "first": {
                                                                        "type": "integer"
                                                                    },
                                                                    "last": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "data": {
                                                                "properties": {
                                                                    "confidence": {
                                                                        "type": "string"
                                                                    },
                                                                    "context": {
                                                                        "properties": {
                                                                            "description": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "expiration": {
                                                                        "type": "integer"
                                                                    },
                                                                    "indicator_data": {
                                                                        "properties": {
                                                                            "address": {
                                                                                "type": "string"
                                                                            },
                                                                            "file": {
                                                                                "properties": {
                                                                                    "download_url": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "md5": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "sha1": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "sha256": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "size": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "ssdeep": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "geo_ip": {
                                                                                "properties": {
                                                                                    "city": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "country": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "country_code": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "isp": {
                                                                                        "properties": {
                                                                                            "autonomous_system": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "isp": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "network": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "organization": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "subdivision": {
                                                                                        "items": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": "array"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "url": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "indicator_type": {
                                                                        "type": "string"
                                                                    },
                                                                    "intel_requirements": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "mitre_tactics": {
                                                                        "type": "string"
                                                                    },
                                                                    "source_id": {
                                                                        "type": "string"
                                                                    },
                                                                    "threat": {
                                                                        "properties": {
                                                                            "data": {
                                                                                "properties": {
                                                                                    "family": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "malware_family_profile_uid": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "version": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "type": {
                                                                                "type": "string"
                                                                            },
                                                                            "uid": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "uid": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "last_updated": {
                                                                "type": "integer"
                                                            },
                                                            "meta": {
                                                                "properties": {
                                                                    "version": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "uid": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "activity",
                                                            "data",
                                                            "last_updated",
                                                            "meta",
                                                            "uid"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "SetHasResults": {
                                    "runAfter": {
                                        "CursorNotNull": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "hasResults",
                                        "value": "@contains(body('Parse_JSON'), 'indicators')"
                                    }
                                }
                            },
                            "runAfter": {
                                "InitIntel471Payload": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(variables('hasResults'), false)",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "GetApiKey": {
                            "runAfter": {
                                "GetUsername": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('TitanAPIKeySentinel')}/value"
                            }
                        },
                        "GetCursorFromBlob": {
                            "runAfter": {
                                "InitCollectedIndicators": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountContainerName'),'/',parameters('BlobNameCursor')))}/content",
                                "queries": {
                                    "inferContentType": true
                                }
                            }
                        },
                        "GetFromDateFromBlob": {
                            "runAfter": {
                                "IfCursorBlobExists": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountContainerName'),'/',parameters('BlobNameFromDate')))}/content",
                                "queries": {
                                    "inferContentType": true
                                }
                            }
                        },
                        "GetUsername": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('TitanUserNameSentinel')}/value"
                            }
                        },
                        "IfCursorBlobExists": {
                            "actions": {
                                "SetCursor": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "cursor",
                                        "value": "@{body('GetCursorFromBlob')}"
                                    }
                                }
                            },
                            "runAfter": {
                                "GetCursorFromBlob": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "CreateBlobForCursor": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "body": "null",
                                            "headers": {
                                                "ReadFileMetadataFromServer": true
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                                            "queries": {
                                                "folderPath": "@parameters('StorageAccountContainerName')",
                                                "name": "@parameters('BlobNameCursor')",
                                                "queryParametersSingleEncoded": true
                                            }
                                        },
                                        "runtimeConfiguration": {
                                            "contentTransfer": {
                                                "transferMode": "Chunked"
                                            }
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@actions('GetCursorFromBlob').outputs.statusCode",
                                                404
                                            ]
                                        }
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "IfFromDateBlobExists": {
                            "actions": {
                                "SetFromDateFromBlob": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "fromDate",
                                        "value": "@int(body('GetFromDateFromBlob'))"
                                    }
                                }
                            },
                            "runAfter": {
                                "GetFromDateFromBlob": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "CreateBlobForFromDate": {
                                        "runAfter": {
                                            "SetFromDate": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "body": "@variables('fromDate')",
                                            "headers": {
                                                "ReadFileMetadataFromServer": true
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                                            "queries": {
                                                "folderPath": "@parameters('StorageAccountContainerName')",
                                                "name": "@parameters('BlobNameFromDate')",
                                                "queryParametersSingleEncoded": true
                                            }
                                        },
                                        "runtimeConfiguration": {
                                            "contentTransfer": {
                                                "transferMode": "Chunked"
                                            }
                                        }
                                    },
                                    "SetFromDate": {
                                        "runAfter": {},
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "fromDate",
                                            "value": "@div(if(equals(parameters('LookBackDays'), 0), sub(ticks(utcNow()),ticks('1970-01-01')), sub(sub(ticks(utcNow()), mul(864000000000, parameters('LookBackDays'))), ticks('1970-01-01'))), 10000)"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@actions('GetFromDateFromBlob').outputs.statusCode",
                                                404
                                            ]
                                        }
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "InitCollectedIndicators": {
                            "runAfter": {
                                "InitFromDate": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "collectedIndicators",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "InitCursor": {
                            "runAfter": {
                                "InitHasResults": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "cursor",
                                        "type": "string",
                                        "value": "null"
                                    }
                                ]
                            }
                        },
                        "InitFromDate": {
                            "runAfter": {
                                "InitCursor": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "fromDate",
                                        "type": "integer"
                                    }
                                ]
                            }
                        },
                        "InitHasResults": {
                            "runAfter": {
                                "GetApiKey": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "hasResults",
                                        "type": "boolean",
                                        "value": true
                                    }
                                ]
                            }
                        },
                        "InitIntel471Payload": {
                            "runAfter": {
                                "IfFromDateBlobExists": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "payload",
                                        "type": "object",
                                        "value": {
                                            "count": 100,
                                            "lastUpdatedFrom": "@variables('fromDate')"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                                "connectionName": "[variables('AzureBlobConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]",
                                "connectionName": "[variables('AzureKeyVaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    },
                    "StorageAccountName": {
                        "value": "[variables('StorageAccountName')]"
                    },
                    "StorageAccountContainerName": {
                        "value": "[variables('StorageAccountContainerName')]"
                    },
                    "LookBackDays": {
                        "value": "[parameters('LookBackDays')]"
                    },
                    "WorkspaceID": {
                        "value": "[parameters('WorkspaceID')]"
                    }
                }
            }
        }
    ]
}