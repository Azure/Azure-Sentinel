{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Intel 471 Inc.",
    "comments": "Solution template for Intel471"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "_solutionName": "Intel471",
    "_solutionVersion": "3.0.0",
    "solutionId": "intel471inc1641226539011.microsoft-sentinel-solution-intel471",
    "_solutionId": "[variables('solutionId')]",
    "Intel471-ImportMalwareIntelligenceToGraphSecurity": "Intel471-ImportMalwareIntelligenceToGraphSecurity",
    "_Intel471-ImportMalwareIntelligenceToGraphSecurity": "[variables('Intel471-ImportMalwareIntelligenceToGraphSecurity')]",
    "TemplateEmptyArray": "[json('[]')]",
    "blanks": "[replace('b', 'b', '')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "Intel471-ImportMalwareIntelligenceToGraphSecurity",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1'))))]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "Intel471-ImportMalwareIntelligenceToSentinel": "Intel471-ImportMalwareIntelligenceToSentinel",
    "_Intel471-ImportMalwareIntelligenceToSentinel": "[variables('Intel471-ImportMalwareIntelligenceToSentinel')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "Intel471-ImportMalwareIntelligenceToSentinel",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Intel471-ImportMalwareIntelligenceToGraphSecurity Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Intel471-ImportMalwareIntelligenceToGraphSecurity",
              "type": "String"
            },
            "StorageAccountName": {
              "type": "String",
              "metadata": {
                "description": "Name of the pre-existing Storage Account where Logic App can store helper data."
              }
            },
            "StorageAccountContainerName": {
              "type": "String",
              "metadata": {
                "description": "Name of the pre-existing blob container inside provided Storage Account."
              }
            },
            "KeyVaultName": {
              "type": "String",
              "metadata": {
                "description": "Name of the pre-existing Key Vault with Titan API credentials. The credentials are expected under following keys: TitanUserNameGraph nad TitanAPIKeyGraph"
              }
            },
            "TargetProduct": {
              "defaultValue": "Azure Sentinel",
              "type": "String",
              "metadata": {
                "description": "Security product to which the indicators will be applied. Allowed values: Azure Sentinel, Microsoft Defender ATP."
              }
            },
            "Action": {
              "defaultValue": "unknown",
              "type": "String",
              "metadata": {
                "description": "The action to apply if the indicator is matched from within the targetProduct security tool. Allowed values: unknown, allow, block, alert."
              }
            },
            "LookBackDays": {
              "defaultValue": 0,
              "type": "int",
              "metadata": {
                "description": "How many days of history should be pulled on the first run. Leave 0 to start from the current time."
              }
            }
          },
          "variables": {
            "GraphSecurityConnectionName": "[[concat('microsoftgraphsecurity-', parameters('PlaybookName'))]",
            "AzureBlobConnectionName": "[[concat('azureblob-', parameters('PlaybookName'))]",
            "StorageAccountName": "[[parameters('StorageAccountName')]",
            "StorageAccountContainerName": "[[parameters('StorageAccountContainerName')]",
            "AzureKeyVaultName": "[[parameters('KeyVaultName')]",
            "AzureKeyVaultConnectionName": "[[concat('keyvault-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/microsoftgraphsecurity')]",
            "_connection-1": "[[variables('connection-1')]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azureblob')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('GraphSecurityConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('GraphSecurityConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureBlobConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureBlobConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                },
                "parameterValues": {
                  "accountName": "[[variables('StorageAccountName')]",
                  "accessKey": "[[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2022-09-01').keys[0].value]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureKeyVaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureKeyVaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                  "vaultName": "[[variables('AzureKeyVaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('GraphSecurityConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]"
              ],
              "tags": {
                "LogicAppsCategory": "security",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "StorageAccountName": {
                      "defaultValue": "[variables('blanks')]",
                      "type": "String"
                    },
                    "StorageAccountContainerName": {
                      "defaultValue": "[variables('blanks')]",
                      "type": "String"
                    },
                    "BlobNameCursor": {
                      "defaultValue": "cursorGraph.txt",
                      "type": "String"
                    },
                    "BlobNameFromDate": {
                      "defaultValue": "fromdateGraph.txt",
                      "type": "String"
                    },
                    "LookBackDays": {
                      "defaultValue": 0,
                      "type": "int"
                    },
                    "TargetProduct": {
                      "defaultValue": "Azure Sentinel",
                      "type": "String"
                    },
                    "Action": {
                      "defaultValue": "unknown",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Hour",
                        "interval": 1
                      },
                      "runtimeConfiguration": {
                        "concurrency": {
                          "runs": 1
                        }
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "CollectAndSubmitIndicators": {
                      "actions": {
                        "ClearCollectedIndicators": {
                          "inputs": {
                            "name": "collectedIndicators",
                            "value": "[variables('TemplateEmptyArray')]"
                          },
                          "runAfter": {
                            "SubmitInBatches": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable"
                        },
                        "CursorNotNull": {
                          "actions": {
                            "StoreCursor": {
                              "inputs": {
                                "body": "@string(variables('cursor'))",
                                "headers": {
                                  "ReadFileMetadataFromServer": true
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                  }
                                },
                                "method": "put",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountContainerName'),'/',parameters('BlobNameCursor')))}"
                              },
                              "runAfter": {
                                "UpdateCursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection"
                            },
                            "UpdateCursor": {
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_JSON')?['cursorNext']"
                              },
                              "type": "SetVariable"
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Parse_JSON')?['cursorNext']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "runAfter": {
                            "Parse_JSON": [
                              "Succeeded"
                            ]
                          },
                          "type": "If"
                        },
                        "FilterAndSplitFetchedIndicators": {
                          "actions": {
                            "Each_indicator": {
                              "actions": {
                                "Condition": {
                                  "actions": {
                                    "Switch": {
                                      "cases": {
                                        "Case": {
                                          "actions": {
                                            "Append_md5_indicator": {
                                              "inputs": {
                                                "name": "collectedIndicators",
                                                "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', items('Each_indicator')?['data']['indicator_data']?['file']?['md5']), 'composedHashType', 'md5')"
                                              },
                                              "type": "AppendToArrayVariable"
                                            },
                                            "Append_sha1_indicator": {
                                              "inputs": {
                                                "name": "collectedIndicators",
                                                "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', items('Each_indicator')?['data']['indicator_data']?['file']?['sha1']), 'composedHashType', 'sha1')"
                                              },
                                              "type": "AppendToArrayVariable"
                                            },
                                            "Append_sha256_indicator": {
                                              "inputs": {
                                                "name": "collectedIndicators",
                                                "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', items('Each_indicator')?['data']['indicator_data']?['file']?['sha256']), 'composedHashType', 'sha256')"
                                              },
                                              "type": "AppendToArrayVariable"
                                            }
                                          },
                                          "case": "file"
                                        }
                                      },
                                      "default": {
                                        "actions": {
                                          "Append_indicator": {
                                            "inputs": {
                                              "name": "collectedIndicators",
                                              "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', ''), 'composedHashType', '')"
                                            },
                                            "type": "AppendToArrayVariable"
                                          }
                                        }
                                      },
                                      "expression": "@items('Each_indicator')?['data']['indicator_type']",
                                      "type": "Switch"
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "greater": [
                                          "@items('Each_indicator')?['data']?['expiration']",
                                          "@div(sub(ticks(utcNow()),ticks('1970-01-01')), 10000)"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "foreach": "@body('Parse_JSON')?['indicators']",
                              "type": "Foreach"
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@variables('hasResults')",
                                  true
                                ]
                              }
                            ]
                          },
                          "runAfter": {
                            "SetHasResults": [
                              "Succeeded"
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP": {
                          "inputs": {
                            "authentication": {
                              "password": "@body('GetApiKey')?['value']",
                              "type": "Basic",
                              "username": "@body('GetUsername')?['value']"
                            },
                            "headers": {
                              "User-Agent": "Intel 471 - Malware Intelligence Graph - Azure Logic App 1.0.0"
                            },
                            "method": "GET",
                            "queries": "@if(equals(variables('cursor'), 'null'), variables('payload'), setProperty(variables('payload'), 'cursor', variables('cursor')))",
                            "uri": "https://api.intel471.com/v1/indicators/stream"
                          },
                          "type": "Http"
                        },
                        "MapIndicatorsToTiIndicators": {
                          "inputs": {
                            "from": "@variables('collectedIndicators')",
                            "select": {
                              "action": "@parameters('Action')",
                              "confidence": "@if(equals(item()?['data']?['confidence'], 'high'), 85, if(equals(item()?['data']?['confidence'], 'medium'), 50, 15))",
                              "description": "@concat('Intel 471 - ', item()?['data']?['context']?['description'])",
                              "expirationDateTime": "@addToTime('1970-01-01T00:00:00Z', div(item()?['data']['expiration'], 1000), 'second')",
                              "externalId": "@{item()?['data']?['uid']}",
                              "fileHashType": "@{item()?['composedHashType']}",
                              "fileHashValue": "@{item()?['composedHashValue']}",
                              "fileSize": "@if(contains(item()?['data']?['indicator_data'], 'file'), item()?['data']?['indicator_data']?['file']?['size'], '')",
                              "fileType": "@if(contains(item()?['data']?['indicator_data'], 'file'), item()?['data']?['indicator_data']?['file']?['type'], '')",
                              "killChain": "@if(equals(item()?['data']?['mitre_tactics'], 'command_and_control'), createArray('C2'), if(equals(item()?['data']?['mitre_tactics'], 'stage_capabilities'), createArray('Installation'), if(equals(item()?['data']?['mitre_tactics'], 'initial_access'), createArray('Exploitation'), json('[]'))))",
                              "lastReportedDateTime": "@{addToTime('1970-01-01T00:00:00Z', div(item()?['activity']['last'], 1000), 'second')}",
                              "malwareFamilyNames": "@createArray(item()['data']['threat']['data']['family'])",
                              "networkIPv4": "@{item()?['data']?['indicator_data']?['address']}",
                              "targetProduct": "@parameters('TargetProduct')",
                              "threatType": "Malware",
                              "tlpLevel": "amber",
                              "url": "@{item()?['data']?['indicator_data']?['url']}"
                            }
                          },
                          "runAfter": {
                            "FilterAndSplitFetchedIndicators": [
                              "Succeeded"
                            ]
                          },
                          "type": "Select"
                        },
                        "Parse_JSON": {
                          "inputs": {
                            "content": "@body('HTTP')",
                            "schema": {
                              "properties": {
                                "cursorNext": {
                                  "type": "string"
                                },
                                "indicators": {
                                  "items": {
                                    "properties": {
                                      "activity": {
                                        "properties": {
                                          "first": {
                                            "type": "integer"
                                          },
                                          "last": {
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "data": {
                                        "properties": {
                                          "confidence": {
                                            "type": "string"
                                          },
                                          "context": {
                                            "properties": {
                                              "description": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "expiration": {
                                            "type": "integer"
                                          },
                                          "indicator_data": {
                                            "properties": {
                                              "address": {
                                                "type": "string"
                                              },
                                              "file": {
                                                "properties": {
                                                  "download_url": {
                                                    "type": "string"
                                                  },
                                                  "md5": {
                                                    "type": "string"
                                                  },
                                                  "sha1": {
                                                    "type": "string"
                                                  },
                                                  "sha256": {
                                                    "type": "string"
                                                  },
                                                  "size": {
                                                    "type": "integer"
                                                  },
                                                  "ssdeep": {
                                                    "type": "string"
                                                  },
                                                  "type": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "geo_ip": {
                                                "properties": {
                                                  "city": {
                                                    "type": "string"
                                                  },
                                                  "country": {
                                                    "type": "string"
                                                  },
                                                  "country_code": {
                                                    "type": "string"
                                                  },
                                                  "isp": {
                                                    "properties": {
                                                      "autonomous_system": {
                                                        "type": "string"
                                                      },
                                                      "isp": {
                                                        "type": "string"
                                                      },
                                                      "network": {
                                                        "type": "string"
                                                      },
                                                      "organization": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "subdivision": {
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "url": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "indicator_type": {
                                            "type": "string"
                                          },
                                          "intel_requirements": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "mitre_tactics": {
                                            "type": "string"
                                          },
                                          "source_id": {
                                            "type": "string"
                                          },
                                          "threat": {
                                            "properties": {
                                              "data": {
                                                "properties": {
                                                  "family": {
                                                    "type": "string"
                                                  },
                                                  "malware_family_profile_uid": {
                                                    "type": "string"
                                                  },
                                                  "version": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": {
                                                "type": "string"
                                              },
                                              "uid": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "uid": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "last_updated": {
                                        "type": "integer"
                                      },
                                      "meta": {
                                        "properties": {
                                          "version": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "uid": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "activity",
                                      "data",
                                      "last_updated",
                                      "meta",
                                      "uid"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "runAfter": {
                            "HTTP": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson"
                        },
                        "SetHasResults": {
                          "inputs": {
                            "name": "hasResults",
                            "value": "@contains(body('Parse_JSON'), 'indicators')"
                          },
                          "runAfter": {
                            "CursorNotNull": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable"
                        },
                        "SubmitInBatches": {
                          "actions": {
                            "Submit_multiple_tiIndicators": {
                              "inputs": {
                                "body": {
                                  "value": "@items('SubmitInBatches')"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['microsoftgraphsecurity']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/beta/security/tiIndicators/submitTiIndicators"
                              },
                              "type": "ApiConnection"
                            }
                          },
                          "foreach": "@chunk(body('MapIndicatorsToTiIndicators'), 100)",
                          "runAfter": {
                            "MapIndicatorsToTiIndicators": [
                              "Succeeded"
                            ]
                          },
                          "runtimeConfiguration": {
                            "concurrency": {
                              "repetitions": 1
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "expression": "@equals(variables('hasResults'), false)",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "runAfter": {
                        "InitIntel471Payload": [
                          "Succeeded"
                        ]
                      },
                      "type": "Until"
                    },
                    "GetApiKey": {
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('TitanAPIKeyGraph')}/value"
                      },
                      "runAfter": {
                        "GetUsername": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection"
                    },
                    "GetCursorFromBlob": {
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountContainerName'),'/',parameters('BlobNameCursor')))}/content",
                        "queries": {
                          "inferContentType": true
                        }
                      },
                      "runAfter": {
                        "InitCollectedIndicators": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection"
                    },
                    "GetFromDateFromBlob": {
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountContainerName'),'/',parameters('BlobNameFromDate')))}/content",
                        "queries": {
                          "inferContentType": true
                        }
                      },
                      "runAfter": {
                        "IfCursorBlobExists": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection"
                    },
                    "GetUsername": {
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('TitanUserNameGraph')}/value"
                      },
                      "type": "ApiConnection"
                    },
                    "IfCursorBlobExists": {
                      "actions": {
                        "SetCursor": {
                          "inputs": {
                            "name": "cursor",
                            "value": "@{body('GetCursorFromBlob')}"
                          },
                          "type": "SetVariable"
                        }
                      },
                      "else": {
                        "actions": {
                          "CreateBlobForCursor": {
                            "inputs": {
                              "body": "null",
                              "headers": {
                                "ReadFileMetadataFromServer": true
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                              "queries": {
                                "folderPath": "@parameters('StorageAccountContainerName')",
                                "name": "@parameters('BlobNameCursor')",
                                "queryParametersSingleEncoded": true
                              }
                            },
                            "runtimeConfiguration": {
                              "contentTransfer": {
                                "transferMode": "Chunked"
                              }
                            },
                            "type": "ApiConnection"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@actions('GetCursorFromBlob').outputs.statusCode",
                                404
                              ]
                            }
                          }
                        ]
                      },
                      "runAfter": {
                        "GetCursorFromBlob": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "type": "If"
                    },
                    "IfFromDateBlobExists": {
                      "actions": {
                        "SetFromDateFromBlob": {
                          "inputs": {
                            "name": "fromDate",
                            "value": "@int(body('GetFromDateFromBlob'))"
                          },
                          "type": "SetVariable"
                        }
                      },
                      "else": {
                        "actions": {
                          "CreateBlobForFromDate": {
                            "inputs": {
                              "body": "@variables('fromDate')",
                              "headers": {
                                "ReadFileMetadataFromServer": true
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                              "queries": {
                                "folderPath": "@parameters('StorageAccountContainerName')",
                                "name": "@parameters('BlobNameFromDate')",
                                "queryParametersSingleEncoded": true
                              }
                            },
                            "runAfter": {
                              "SetFromDate": [
                                "Succeeded"
                              ]
                            },
                            "runtimeConfiguration": {
                              "contentTransfer": {
                                "transferMode": "Chunked"
                              }
                            },
                            "type": "ApiConnection"
                          },
                          "SetFromDate": {
                            "inputs": {
                              "name": "fromDate",
                              "value": "@div(if(equals(parameters('LookBackDays'), 0), sub(ticks(utcNow()),ticks('1970-01-01')), sub(sub(ticks(utcNow()), mul(864000000000, parameters('LookBackDays'))), ticks('1970-01-01'))), 10000)"
                            },
                            "type": "SetVariable"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@actions('GetFromDateFromBlob').outputs.statusCode",
                                404
                              ]
                            }
                          }
                        ]
                      },
                      "runAfter": {
                        "GetFromDateFromBlob": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "type": "If"
                    },
                    "InitCollectedIndicators": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "collectedIndicators",
                            "type": "array",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        ]
                      },
                      "runAfter": {
                        "InitFromDate": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "InitCursor": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "null"
                          }
                        ]
                      },
                      "runAfter": {
                        "InitHasResults": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "InitFromDate": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "fromDate",
                            "type": "integer"
                          }
                        ]
                      },
                      "runAfter": {
                        "InitCursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "InitHasResults": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "hasResults",
                            "type": "boolean",
                            "value": true
                          }
                        ]
                      },
                      "runAfter": {
                        "GetApiKey": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    },
                    "InitIntel471Payload": {
                      "inputs": {
                        "variables": [
                          {
                            "name": "payload",
                            "type": "object",
                            "value": {
                              "count": 100,
                              "lastUpdatedFrom": "@variables('fromDate')"
                            }
                          }
                        ]
                      },
                      "runAfter": {
                        "IfFromDateBlobExists": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "microsoftgraphsecurity": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('GraphSecurityConnectionName'))]",
                        "connectionName": "[[variables('GraphSecurityConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/microsoftgraphsecurity')]"
                      },
                      "azureblob": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                        "connectionName": "[[variables('AzureBlobConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azureblob')]"
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]",
                        "connectionName": "[[variables('AzureKeyVaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/keyvault')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  },
                  "StorageAccountName": {
                    "value": "[[variables('StorageAccountName')]"
                  },
                  "StorageAccountContainerName": {
                    "value": "[[variables('StorageAccountContainerName')]"
                  },
                  "LookBackDays": {
                    "value": "[[parameters('LookBackDays')]"
                  },
                  "TargetProduct": {
                    "value": "[[parameters('TargetProduct')]"
                  },
                  "Action": {
                    "value": "[[parameters('Action')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Intel471",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Intel 471 Inc."
                },
                "support": {
                  "name": "Intel 471",
                  "email": "support@intel471.com",
                  "tier": "Partner",
                  "link": "https://intel471.com/company/contact"
                }
              }
            }
          ],
          "metadata": {
            "title": "Intel 471 Malware Intelligence to Graph Security",
            "description": "This playbook ingests malware indicators from Intel 471's Titan API into Microsoft Graph Security as tiIndicator resource type.",
            "prerequisites": [
              "1. An active account in Titan platform, which is available as part of Intel 471's subscriptions. For more information, please contact sales@intel471.com.",
              "2. Titan API credentials.",
              "3. Pre-existing [Key Vault](https://docs.microsoft.com/azure/key-vault/general/basic-concepts) for securely storing Titan API credentials. Store Titan API credentials as secrets under `TitanUserNameGraph` and `TitanAPIKeyGraph` keys.",
              "4. Pre-existing [Storage account](https://learn.microsoft.com/azure/storage/common/storage-account-overview) with blob container already created for persisting data such as cursor between the API calls.",
              "5. Threat Intelligence connector enabled in Sentinel. Go to Sentinel instance → 'Content hub' and install 'Threat Intelligence' solution."
            ],
            "postDeployment": [
              "1. Go to the Key Vault. Select `Access control (IAM)` → `+ Add` → `Add role assignment`. Choose `Key Vault Secrets User`. On the next screen hit `+ Select members`, search for Intel 471 and select newly created logic app. Select it and proceed with granting access rights.",
              "2. Go to created `Logic App` → `Edit`. Navigate to `CollectAndSubmitIndicators → SubmitInBatches → Connections` block. Inside this block create a new connection. Select `Connect with managed identity`, provide connection name and click `Create`.",
              "3. Grant `ThreatIndicators.ReadWrite.OwnedBy` role for the Logic App to allow indicator ingestion through the tiIndicators API. It can't be done in the Azure portal at the moment. You can use the Azure CLI script listed below instead. Consult [Microsoft documentation](https://learn.microsoft.com/azure/app-service/scenario-secure-app-access-microsoft-graph-as-app?tabs=azure-cli#grant-access-to-microsoft-graph) for more details.",
              "4. Optionally change the schedule's frequency in `Recurrence` block (the first one)."
            ],
            "lastUpdateTime": "2023-06-21T00:00:00Z",
            "entities": [
              "ip",
              "filehash",
              "url"
            ],
            "tags": [
              "ThreatIntelligence"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "Playbook",
        "displayName": "Intel471-ImportMalwareIntelligenceToGraphSecurity",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Intel471-ImportMalwareIntelligenceToSentinel Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Intel471-ImportMalwareIntelligenceToSentinel",
              "type": "String"
            },
            "StorageAccountName": {
              "type": "String",
              "metadata": {
                "description": "Name of the pre-existing Storage Account where Logic App can store helper data."
              }
            },
            "StorageAccountContainerName": {
              "type": "String",
              "metadata": {
                "description": "Name of the pre-existing blob container inside provided Storage Account."
              }
            },
            "KeyVaultName": {
              "type": "String",
              "metadata": {
                "description": "Name of the pre-existing Key Vault with Titan API credentials. The credentials are expected under following keys: TitanUserNameSentinal nad TitanAPIKeySentinel"
              }
            },
            "WorkspaceID": {
              "type": "String",
              "metadata": {
                "description": "ID of the Log Analytics workspace to which the indicators will be directed."
              }
            },
            "LookBackDays": {
              "defaultValue": 0,
              "type": "int",
              "metadata": {
                "description": "How many days of history should be pulled on the first run. Leave 0 to start from the current time."
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('sentinel-', parameters('PlaybookName'))]",
            "AzureBlobConnectionName": "[[concat('azureblob-', parameters('PlaybookName'))]",
            "StorageAccountName": "[[parameters('StorageAccountName')]",
            "StorageAccountContainerName": "[[parameters('StorageAccountContainerName')]",
            "AzureKeyVaultName": "[[parameters('KeyVaultName')]",
            "AzureKeyVaultConnectionName": "[[concat('keyvault-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azureblob')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureBlobConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('AzureBlobConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                },
                "parameterValues": {
                  "accountName": "[[variables('StorageAccountName')]",
                  "accessKey": "[[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2022-09-01').keys[0].value]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureKeyVaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureKeyVaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                  "vaultName": "[[variables('AzureKeyVaultName')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]"
              ],
              "tags": {
                "LogicAppsCategory": "security",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "StorageAccountName": {
                      "defaultValue": "[variables('blanks')]",
                      "type": "String"
                    },
                    "StorageAccountContainerName": {
                      "defaultValue": "[variables('blanks')]",
                      "type": "String"
                    },
                    "BlobNameCursor": {
                      "defaultValue": "cursorSentinel.txt",
                      "type": "String"
                    },
                    "BlobNameFromDate": {
                      "defaultValue": "fromdateSentinel.txt",
                      "type": "String"
                    },
                    "LookBackDays": {
                      "defaultValue": 0,
                      "type": "int"
                    },
                    "WorkspaceID": {
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Hour",
                        "interval": 1
                      },
                      "runtimeConfiguration": {
                        "concurrency": {
                          "runs": 1
                        }
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "CollectAndSubmitIndicators": {
                      "actions": {
                        "CursorNotNull": {
                          "actions": {
                            "StoreCursor": {
                              "runAfter": {
                                "UpdateCursor": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@string(variables('cursor'))",
                                "headers": {
                                  "ReadFileMetadataFromServer": true
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                  }
                                },
                                "method": "put",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountContainerName'),'/',parameters('BlobNameCursor')))}"
                              }
                            },
                            "UpdateCursor": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "cursor",
                                "value": "@body('Parse_JSON')?['cursorNext']"
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_JSON": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Parse_JSON')?['cursorNext']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "FilterIndicators": {
                          "actions": {
                            "Each_indicator": {
                              "foreach": "@body('Parse_JSON')?['indicators']",
                              "actions": {
                                "Condition": {
                                  "actions": {
                                    "Append_indicator": {
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "collectedIndicators",
                                        "value": "@setProperty(setProperty(items('Each_indicator'), 'composedHashValue', ''), 'composedHashType', '')"
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "greater": [
                                          "@items('Each_indicator')?['data']?['expiration']",
                                          "@div(sub(ticks(utcNow()),ticks('1970-01-01')), 10000)"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "SetHasResults": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@variables('hasResults')",
                                  true
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP": {
                          "type": "Http",
                          "inputs": {
                            "authentication": {
                              "password": "@body('GetApiKey')?['value']",
                              "type": "Basic",
                              "username": "@body('GetUsername')?['value']"
                            },
                            "headers": {
                              "User-Agent": "Intel 471 - Malware Intelligence Sentinel - Azure Logic App 1.0.0"
                            },
                            "method": "GET",
                            "queries": "@if(equals(variables('cursor'), 'null'), variables('payload'), setProperty(variables('payload'), 'cursor', variables('cursor')))",
                            "uri": "https://api.intel471.com/v1/indicators/stream"
                          }
                        },
                        "IfIndicators": {
                          "actions": {
                            "ClearCollectedIndicators": {
                              "runAfter": {
                                "Threat_Intelligence_-_Upload_Indicators_of_Compromise_(V2)_(Preview)": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "collectedIndicators",
                                "value": "[variables('TemplateEmptyArray')]"
                              }
                            },
                            "MapIndicatorsToTiIndicators": {
                              "type": "Select",
                              "inputs": {
                                "from": "@variables('collectedIndicators')",
                                "select": {
                                  "confidence": "@if(equals(item()?['data']?['confidence'], 'high'), 85, if(equals(item()?['data']?['confidence'], 'medium'), 50, 15))",
                                  "created": "@{addToTime('1970-01-01T00:00:00Z', div(item()?['activity']['first'], 1000), 'second')}",
                                  "description": "@concat('Intel 471 - ', item()?['data']?['context']?['description'])",
                                  "external_references": [
                                    {
                                      "external_id": "@item()['data']['threat']['uid']",
                                      "source_name": "intel471",
                                      "url": "@concat('https://titan.intel471.com/malware/', item()['data']['threat']['uid'])"
                                    }
                                  ],
                                  "id": "@concat('indicator--', guid())",
                                  "indicator_types": [
                                    "malicious-activity"
                                  ],
                                  "kill_chain_phases": [
                                    {
                                      "kill_chain_name": "lockheed-martin-cyber-kill-chain",
                                      "phase_name": "@if(equals(item()?['data']?['mitre_tactics'], 'command_and_control'), 'C2', if(equals(item()?['data']?['mitre_tactics'], 'stage_capabilities'), 'Installation', if(equals(item()?['data']?['mitre_tactics'], 'initial_access'), 'Exploitation', '')))"
                                    }
                                  ],
                                  "labels": "@createArray(item()['data']['threat']['data']['family'])",
                                  "modified": "@{addToTime('1970-01-01T00:00:00Z', div(item()?['last_updated'], 1000), 'second')}",
                                  "name": "@item()['data']['threat']['data']['family']",
                                  "object_marking_refs": [
                                    "marking-definition--f88d31f6-486f-44da-b317-01333bde0b82"
                                  ],
                                  "pattern": "@if(equals(item()?['data']?['indicator_type'], 'url'), concat('[url:value = ''', item()?['data']?['indicator_data']?['url'], ''']'), if(equals(item()?['data']?['indicator_type'], 'ipv4'), concat('[ipv4-addr:value = ''', item()?['data']?['indicator_data']?['address'], ''']'),    concat('[file:hashes.md5 = ''', item()?['data']?['indicator_data']?['file']?['md5'], ''' OR file:hashes.sha1 = ''', item()?['data']?['indicator_data']?['file']?['sha1'], ''' OR file:hashes.sha256 = ''', item()?['data']?['indicator_data']?['file']?['sha256'], ''']')      ))",
                                  "pattern_type": "stix",
                                  "spec_version": "2.1",
                                  "type": "indicator",
                                  "valid_from": "@{addToTime('1970-01-01T00:00:00Z', div(item()?['activity']['first'], 1000), 'second')}",
                                  "valid_until": "@addToTime('1970-01-01T00:00:00Z', div(item()?['data']['expiration'], 1000), 'second')"
                                }
                              }
                            },
                            "Threat_Intelligence_-_Upload_Indicators_of_Compromise_(V2)_(Preview)": {
                              "runAfter": {
                                "MapIndicatorsToTiIndicators": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "indicators": "@body('MapIndicatorsToTiIndicators')",
                                  "sourcesystem": "Intel 471 Titan"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/V2/ThreatIntelligence/@{encodeURIComponent(parameters('WorkspaceID'))}/UploadIndicators/"
                              }
                            }
                          },
                          "runAfter": {
                            "FilterIndicators": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(variables('collectedIndicators'))",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Parse_JSON": {
                          "runAfter": {
                            "HTTP": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('HTTP')",
                            "schema": {
                              "properties": {
                                "cursorNext": {
                                  "type": "string"
                                },
                                "indicators": {
                                  "items": {
                                    "properties": {
                                      "activity": {
                                        "properties": {
                                          "first": {
                                            "type": "integer"
                                          },
                                          "last": {
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "data": {
                                        "properties": {
                                          "confidence": {
                                            "type": "string"
                                          },
                                          "context": {
                                            "properties": {
                                              "description": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "expiration": {
                                            "type": "integer"
                                          },
                                          "indicator_data": {
                                            "properties": {
                                              "address": {
                                                "type": "string"
                                              },
                                              "file": {
                                                "properties": {
                                                  "download_url": {
                                                    "type": "string"
                                                  },
                                                  "md5": {
                                                    "type": "string"
                                                  },
                                                  "sha1": {
                                                    "type": "string"
                                                  },
                                                  "sha256": {
                                                    "type": "string"
                                                  },
                                                  "size": {
                                                    "type": "integer"
                                                  },
                                                  "ssdeep": {
                                                    "type": "string"
                                                  },
                                                  "type": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "geo_ip": {
                                                "properties": {
                                                  "city": {
                                                    "type": "string"
                                                  },
                                                  "country": {
                                                    "type": "string"
                                                  },
                                                  "country_code": {
                                                    "type": "string"
                                                  },
                                                  "isp": {
                                                    "properties": {
                                                      "autonomous_system": {
                                                        "type": "string"
                                                      },
                                                      "isp": {
                                                        "type": "string"
                                                      },
                                                      "network": {
                                                        "type": "string"
                                                      },
                                                      "organization": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "subdivision": {
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "url": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "indicator_type": {
                                            "type": "string"
                                          },
                                          "intel_requirements": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "mitre_tactics": {
                                            "type": "string"
                                          },
                                          "source_id": {
                                            "type": "string"
                                          },
                                          "threat": {
                                            "properties": {
                                              "data": {
                                                "properties": {
                                                  "family": {
                                                    "type": "string"
                                                  },
                                                  "malware_family_profile_uid": {
                                                    "type": "string"
                                                  },
                                                  "version": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": {
                                                "type": "string"
                                              },
                                              "uid": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "uid": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "last_updated": {
                                        "type": "integer"
                                      },
                                      "meta": {
                                        "properties": {
                                          "version": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "uid": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "activity",
                                      "data",
                                      "last_updated",
                                      "meta",
                                      "uid"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "SetHasResults": {
                          "runAfter": {
                            "CursorNotNull": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "hasResults",
                            "value": "@contains(body('Parse_JSON'), 'indicators')"
                          }
                        }
                      },
                      "runAfter": {
                        "InitIntel471Payload": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('hasResults'), false)",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "GetApiKey": {
                      "runAfter": {
                        "GetUsername": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('TitanAPIKeySentinel')}/value"
                      }
                    },
                    "GetCursorFromBlob": {
                      "runAfter": {
                        "InitCollectedIndicators": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountContainerName'),'/',parameters('BlobNameCursor')))}/content",
                        "queries": {
                          "inferContentType": true
                        }
                      }
                    },
                    "GetFromDateFromBlob": {
                      "runAfter": {
                        "IfCursorBlobExists": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountContainerName'),'/',parameters('BlobNameFromDate')))}/content",
                        "queries": {
                          "inferContentType": true
                        }
                      }
                    },
                    "GetUsername": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('TitanUserNameSentinel')}/value"
                      }
                    },
                    "IfCursorBlobExists": {
                      "actions": {
                        "SetCursor": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "cursor",
                            "value": "@{body('GetCursorFromBlob')}"
                          }
                        }
                      },
                      "runAfter": {
                        "GetCursorFromBlob": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "CreateBlobForCursor": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": "null",
                              "headers": {
                                "ReadFileMetadataFromServer": true
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                              "queries": {
                                "folderPath": "@parameters('StorageAccountContainerName')",
                                "name": "@parameters('BlobNameCursor')",
                                "queryParametersSingleEncoded": true
                              }
                            },
                            "runtimeConfiguration": {
                              "contentTransfer": {
                                "transferMode": "Chunked"
                              }
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@actions('GetCursorFromBlob').outputs.statusCode",
                                404
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "IfFromDateBlobExists": {
                      "actions": {
                        "SetFromDateFromBlob": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "fromDate",
                            "value": "@int(body('GetFromDateFromBlob'))"
                          }
                        }
                      },
                      "runAfter": {
                        "GetFromDateFromBlob": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "else": {
                        "actions": {
                          "CreateBlobForFromDate": {
                            "runAfter": {
                              "SetFromDate": [
                                "Succeeded"
                              ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                              "body": "@variables('fromDate')",
                              "headers": {
                                "ReadFileMetadataFromServer": true
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                              "queries": {
                                "folderPath": "@parameters('StorageAccountContainerName')",
                                "name": "@parameters('BlobNameFromDate')",
                                "queryParametersSingleEncoded": true
                              }
                            },
                            "runtimeConfiguration": {
                              "contentTransfer": {
                                "transferMode": "Chunked"
                              }
                            }
                          },
                          "SetFromDate": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "fromDate",
                              "value": "@div(if(equals(parameters('LookBackDays'), 0), sub(ticks(utcNow()),ticks('1970-01-01')), sub(sub(ticks(utcNow()), mul(864000000000, parameters('LookBackDays'))), ticks('1970-01-01'))), 10000)"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@actions('GetFromDateFromBlob').outputs.statusCode",
                                404
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "InitCollectedIndicators": {
                      "runAfter": {
                        "InitFromDate": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "collectedIndicators",
                            "type": "array",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        ]
                      }
                    },
                    "InitCursor": {
                      "runAfter": {
                        "InitHasResults": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "cursor",
                            "type": "string",
                            "value": "null"
                          }
                        ]
                      }
                    },
                    "InitFromDate": {
                      "runAfter": {
                        "InitCursor": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fromDate",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "InitHasResults": {
                      "runAfter": {
                        "GetApiKey": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "hasResults",
                            "type": "boolean",
                            "value": true
                          }
                        ]
                      }
                    },
                    "InitIntel471Payload": {
                      "runAfter": {
                        "IfFromDateBlobExists": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "payload",
                            "type": "object",
                            "value": {
                              "count": 100,
                              "lastUpdatedFrom": "@variables('fromDate')"
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "azureblob": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                        "connectionName": "[[variables('AzureBlobConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azureblob')]"
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]",
                        "connectionName": "[[variables('AzureKeyVaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/keyvault')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  },
                  "StorageAccountName": {
                    "value": "[[variables('StorageAccountName')]"
                  },
                  "StorageAccountContainerName": {
                    "value": "[[variables('StorageAccountContainerName')]"
                  },
                  "LookBackDays": {
                    "value": "[[parameters('LookBackDays')]"
                  },
                  "WorkspaceID": {
                    "value": "[[parameters('WorkspaceID')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Intel471",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Intel 471 Inc."
                },
                "support": {
                  "name": "Intel 471",
                  "email": "support@intel471.com",
                  "tier": "Partner",
                  "link": "https://intel471.com/company/contact"
                }
              }
            }
          ],
          "metadata": {
            "title": "Intel 471 Malware Intelligence to Sentinel",
            "description": "This playbook ingests malware indicators from Intel 471's Titan API into Microsoft Sentinel as tiIndicator resource type.",
            "prerequisites": [
              "1. An active account in Titan platform, which is available as part of Intel 471's subscriptions. For more information, please contact sales@intel471.com.",
              "2. Titan API credentials.",
              "3. Pre-existing [Key Vault](https://docs.microsoft.com/azure/key-vault/general/basic-concepts) for securely storing Titan API credentials. Store Titan API credentials as secrets under `TitanUserNameSentinel` and `TitanAPIKeySentinel` keys.",
              "4. Pre-existing [Storage account](https://learn.microsoft.com/azure/storage/common/storage-account-overview) with blob container already created for persisting data such as cursor between the API calls.",
              "5. Threat Intelligence connector enabled in Sentinel. Go to Sentinel instance → 'Content hub' and install 'Threat Intelligence' solution."
            ],
            "postDeployment": [
              "1. Go to the Key Vault. Select `Access control (IAM)` → `+ Add` → `Add role assignment`. Choose `Key Vault Secrets User`. On the next screen hit `+ Select members`, search for Intel 471 and select newly created logic app. Select it and proceed with granting access rights.",
              "2. Go to the selected Log Analytics workspace and repeat step 1. except grant role `Microsoft Sentinel Contributor`.",
              "3. Go to created `Logic App` → `Edit`. Navigate to `CollectAndSubmitIndicators → IfIndicators → True → Threat Intelligence - Upload Indicators of Compromise (V2) (Preview)` block. Inside this block create a new connection. Select `Connect with managed identity`, provide connection name and click `Create`.",
              "4. Optionally change the schedule's frequency in `Recurrence` block (the first one)."
            ],
            "lastUpdateTime": "2023-06-21T00:00:00Z",
            "entities": [
              "ip",
              "filehash",
              "url"
            ],
            "tags": [
              "ThreatIntelligence"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "Intel471-ImportMalwareIntelligenceToSentinel",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Intel471",
        "publisherDisplayName": "Intel 471",
        "descriptionHtml": "<p><strong>Note:</strong> <em>There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</em></p>\n<p>Intel 471 Threat Intelligence integration ingests malware indicators into Log Analytics workspace.</p>\n<p><strong>Playbooks:</strong> 2</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/intel471_logo.svg\" >",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Intel471",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Intel 471 Inc."
        },
        "support": {
          "name": "Intel 471",
          "email": "support@intel471.com",
          "tier": "Partner",
          "link": "https://intel471.com/company/contact"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Playbook",
              "contentId": "[variables('_Intel471-ImportMalwareIntelligenceToGraphSecurity')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Intel471-ImportMalwareIntelligenceToSentinel')]",
              "version": "[variables('playbookVersion2')]"
            }
          ]
        },
        "firstPublishDate": "2023-06-21",
        "providers": [
          "Intel 471"
        ],
        "categories": {
          "domains": [
            "Security - Threat Protection"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
