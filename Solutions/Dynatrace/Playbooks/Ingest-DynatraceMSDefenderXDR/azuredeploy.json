{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Ingest Microsoft Defender XDR insights into Dynatrace",
        "description": "This playbook will ingest Microsoft Defender XDR insights into Dynatrace.",
        "prerequisites": [
            "1. Dynatrace tenant (ex. xyz.dynatrace.com)",
            "2. Dynatrace Access Token, the token should have Ingest logs (logs.ingest) scope."
        ],
        "lastUpdateTime": "2022-10-19T00:00:00.000Z",
        "tags": [ "Ingest" ],
        "postDeployment": [
            "After deployment, open the playbook to configure all connections and press save."
        ],
        "support": {
            "tier": "community"
        },
        "author": {
            "name": "Dynatrace"
        },
        "releaseNotes": [
            {
                "version": "1.0.0",
                "title": "Ingest Microsoft Defender 365 insights into Dynatrace",
                "notes": [
                    "Initial version"
                ]
            }
        ]
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "IngestDynatraceMSDefenderXDR",
            "type": "string",
            "metadata": {
                "description": "Alert trigger"
            }
        },
        "DynatraceTenant": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Dynatrace tenant (ex. xyz.dynatrace.com)"
            }
        },
        "KeyvaultName": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Enter the key vault name where Dynatrace Access Token is stored"
            }
        }
    },
    "variables": {
        "MicrosoftSentinelConnectionName": "[concat('microsoftsentinel-', parameters('PlaybookName'))]",
        "KeyvaultConnectionName": "[concat('akv-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2018-07-01-preview",
            "name": "[variables('MicrosoftSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/Connections",
            "apiVersion": "2018-07-01-preview",
            "name": "[variables('KeyvaultConnectionName')]",
            "kind": "V1",
            "location": "[resourceGroup().location]",
            "properties": {
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                    "vaultName": "[parameters('KeyvaultName')]"
                },
                "displayName": "[variables('KeyvaultConnectionName')]",
                "nonSecretParameterValues": {
                    "vaultName": "[parameters('KeyvaultName')]"
                }

            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2019-05-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "hidden-SentinelTemplateName": "IngestDynatraceMSDefender365-Alert",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "KeyvaultName": {
                            "type": "String"
                        },
                        "Tenant": {
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_alert": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['microsoftsentinel']['connectionId']"
                                    }
                                },
                                "path": "/subscribe"
                            },
                            "conditions": [
                                {
                                    "expression": "@or(equals(triggerBody()?['ProductName'],'Microsoft Defender Advanced Threat Protection'), equals(triggerBody()?['ProductName'],'Office 365 Advanced Threat Protection'), equals(triggerBody()?['ProductName'],'Azure Advanced Threat Protection'), equals(triggerBody()?['ProductName'],'Microsoft Cloud App Security'), equals(triggerBody()?['ProductName'],'Microsoft 365 Defender'), equals(triggerBody()?['ProductName'],'Azure Active Directory Identity Protection'), equals(triggerBody()?['ProductName'],'Azure Security Center'))"
                                }
                            ]
                        }
                    },
                    "actions": {
                        "Append_Payload_Item_to_LogEntries": {
                            "runAfter": {
                                "Compose_Ingest_Payload_Item": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable",
                            "inputs": {
                                "name": "logentries",
                                "value": "@outputs('Compose_Ingest_Payload_Item')"
                            }
                        },
                        "Compose_Ingest_Payload_Item": {
                            "runAfter": {
                                "Initialize_LogEntries": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": {
                                "AlertName": "@{triggerBody()?['AlertDisplayName']}",
                                "AlertType": "@{triggerBody()?['AlertType']}",
                                "EndTime": "@{triggerBody()?['EndTimeUtc']}",
                                "OriginalSeverity": "@{triggerBody()?['Severity']}",
                                "ProductName": "@{triggerBody()?['ProductName']}",
                                "ResourceGroup": "@{triggerBody()?['WorkspaceResourceGroup']}",
                                "StartTime": "@{triggerBody()?['StartTimeUtc']}",
                                "SubscriptionID": "@{triggerBody()?['WorkspaceSubscriptionId']}",
                                "SystemAlertId": "@{triggerBody()?['SystemAlertId']}",
                                "WorkspaceID": "@{triggerBody()?['WorkspaceId']}",
                                "log.source": "@{triggerBody()?['ProductName']}",
                                "severity": "warn",
                                "timestamp": "@{triggerBody()?['TimeGenerated']}"
                            }
                        },
                        "Get_Dynatrace_Access_Token": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('DynatraceAccessToken')}/value"
                            }
                        },
                        "If_Entities_Exist": {
                            "actions": {
                                "For_each_Security_Alert_Entity": {
                                    "foreach": "@triggerBody()?['Entities']",
                                    "actions": {
                                        "Append_Entity_Item_to_LogEntries": {
                                            "runAfter": {
                                                "Compose_Entity_Item": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "logentries",
                                                "value": "@outputs('Compose_Entity_Item')"
                                            }
                                        },
                                        "Compose_Entity_Item": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": {
                                                "Content": "@{items('For_each_Security_Alert_Entity')}",
                                                "EntityType": "@{Coalesce(items('For_each_Security_Alert_Entity')?['Type'], 'None')}",
                                                "SystemAlertId": "@{triggerBody()?['SystemAlertId']}",
                                                "log.source": "@{triggerBody()?['ProductName']}",
                                                "severity": "info",
                                                "timestamp": "@{triggerBody()?['TimeGenerated']}"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "type": "Foreach"
                                }
                            },
                            "runAfter": {
                                "Append_Payload_Item_to_LogEntries": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@empty(triggerBody()?['Entities'])",
                                                true
                                            ]
                                        }
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "If_Extended_Links_Exist": {
                            "actions": {
                                "For_each_Extended_Link": {
                                    "foreach": "@triggerBody()?['ExtendedLinks']",
                                    "actions": {
                                        "Append_Extended_Link_Item_to_LogEntries": {
                                            "runAfter": {
                                                "Compose_Extended_Links_Item": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "logentries",
                                                "value": "@outputs('Compose_Extended_Links_Item')"
                                            }
                                        },
                                        "Compose_Extended_Links_Item": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": {
                                                "Content": "@{items('For_each_Extended_Link')}",
                                                "SystemAlertId": "@{triggerBody()?['SystemAlertId']}",
                                                "log.source": "@{triggerBody()?['ProductName']}",
                                                "severity": "info",
                                                "timestamp": "@{triggerBody()?['TimeGenerated']}"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "type": "Foreach"
                                }
                            },
                            "runAfter": {
                                "If_Extended_Properties_Exist": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@empty(triggerBody()?['ExtendedLinks'])",
                                                true
                                            ]
                                        }
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "If_Extended_Properties_Exist": {
                            "actions": {
                                "Append_Extended_Properties_to_LogEntries": {
                                    "runAfter": {
                                        "Compose_Extended_Properties_Item": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "logentries",
                                        "value": "@outputs('Compose_Extended_Properties_Item')"
                                    }
                                },
                                "Compose_Extended_Properties_Item": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": {
                                        "Content": "@{triggerBody()?['ExtendedProperties']}",
                                        "SystemAlertId": "@{triggerBody()?['SystemAlertId']}",
                                        "log.source": "@{triggerBody()?['ProductName']}",
                                        "severity": "info",
                                        "timestamp": "@{triggerBody()?['TimeGenerated']}"
                                    }
                                }
                            },
                            "runAfter": {
                                "If_Entities_Exist": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@empty(triggerBody()?['ExtendedProperties'])",
                                                true
                                            ]
                                        }
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "If_Log_Entries_exist": {
                            "actions": {
                                "Ingest_Dynatrace_Log_Entries": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "body": "@variables('logentries')",
                                        "headers": {
                                            "Authorization": "Api-Token @{body('Get_Dynatrace_Access_Token')?['value']}",
                                            "Content-Type": "application/json; charset=utf-8",
                                            "User-Agent" : "dynatrace-microsoft-sentinel/3.x/playbooks/ingestdynatracemsdefender365"
                                        },
                                        "method": "POST",
                                        "uri": "https://@{parameters('Tenant')}/api/v2/logs/ingest"
                                    }
                                }
                            },
                            "runAfter": {
                                "If_Extended_Links_Exist": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "No_log_entries_to_ingest": {
                                        "runAfter": {},
                                        "type": "Terminate",
                                        "inputs": {
                                            "runStatus": "Succeeded"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(variables('logentries'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_LogEntries": {
                            "runAfter": {
                                "Get_Dynatrace_Access_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "logentries",
                                        "type": "array"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "microsoftsentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                                "connectionName": "[variables('KeyvaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    },
                    "KeyvaultName": {
                        "value": "[parameters('KeyvaultName')]"
                    },
                    "Tenant": {
                        "value": "[parameters('DynatraceTenant')]"
                    }
                }
            }
        }
    ]
}