id: c1dc5d15-5600-477b-8750-48b5e2df7da8
Function:
  Title: Parser for GCPCloudDNS
  Version: '1.0.0'
  LastUpdated: '2025-02-10'
Category: Microsoft Sentinel Parser
FunctionName: GCPCloudDNS
FunctionAlias: GCPCloudDNS
FunctionQuery: |
    let GCPCloudDNS_view  = view () {
    let DNSQuery_GcpDns_empty = datatable(
           Query:string,
           QueryTypeName:string,
           ResponseName:string,
           EventResultDetails:string,
           NetworkProtocol:string,
           SrcIpAddr:string,
           EventOriginalUid:string,
           EventSeverity:string,
           EventCount:int,
           EventProduct:string,
           EventVendor:string,
           EventSchemaVersion:string,
           Dvc:string,
           EventType:string,
           EventResult:string,
           EventSubType:string,
           EventEndTime:datetime,
           ResponseCodeName:string,
           Domain:string,
           IpAddr:string,
           EventStartTime:datetime
    )[];
    let DNSQuery_GcpDns = union isfuzzy=true GCP_DNS_CL, DNSQuery_GcpDns_empty
       | extend 
           Query=column_ifexists('payload_queryName_s', ''),
           QueryTypeName=column_ifexists('payload_queryType_s', ''),
           ResponseName=column_ifexists('payload_rdata_s', ''),
           EventResultDetails=column_ifexists('payload_responseCode_s', ''),
           NetworkProtocol=column_ifexists('payload_protocol_s', ''),
           SrcIpAddr=column_ifexists('payload_sourceIP_s', ''),
           EventOriginalUid=column_ifexists('insert_id_s', ''),
           EventSeverity=column_ifexists('severity_s', ''),
           EventCount=(1),
           EventProduct="Cloud DNS",
           EventVendor="GCP",
           EventSchemaVersion="0.1.0",
           Dvc="GCPDNS",
           EventType = iif (column_ifexists('resource_type_s', '') == "dns_query", "lookup", column_ifexists('resource_type_s', '')),
           EventResult=iff(EventResultDetails =~ 'NOERROR', 'Success', 'Failure'),
           EventSubType='response',
           EventEndTime=todatetime(column_ifexists('timestamp_t', ''))
       | extend
           ResponseCodeName=EventResultDetails, 
           Domain=Query,
           IpAddr=SrcIpAddr,
           EventStartTime = EventEndTime
       | project-rename
           Query=Query,
           QueryTypeName=QueryTypeName,
           ResponseName=ResponseName,
           EventResultDetails=EventResultDetails,
           NetworkProtocol=NetworkProtocol,
           SrcIpAddr=SrcIpAddr,
           EventOriginalUid=EventOriginalUid,
           EventSeverity=EventSeverity,
           EventCount=EventCount,
           EventProduct=EventProduct,
           EventVendor=EventVendor,
           EventSchemaVersion=EventSchemaVersion,
           Dvc=Dvc,
           EventType=EventType,
           EventResult=EventResult,
           EventSubType=EventSubType,
           EventEndTime=EventEndTime,
           ResponseCodeName=ResponseCodeName,
           Domain=Domain,
           IpAddr=IpAddr,
           EventStartTime=EventStartTime;
    let DNSQuery_GcpDnsV2 = union isfuzzy=true GCP_DNSV2_CL, DNSQuery_GcpDns_empty
       | extend 
           Query=column_ifexists('payload_queryName', ''),
           QueryTypeName=column_ifexists('payload_queryType', ''),
           ResponseName=column_ifexists('payload_rdata', ''),
           EventResultDetails=column_ifexists('payload_responseCode', ''),
           NetworkProtocol=column_ifexists('payload_protocol', ''),
           SrcIpAddr=column_ifexists('payload_sourceIP', ''),
           EventOriginalUid=column_ifexists('insert_id', ''),
           EventSeverity=column_ifexists('severity', ''),
           EventCount=(1),
           EventProduct="Cloud DNS",
           EventVendor="GCP",
           EventSchemaVersion="0.1.0",
           Dvc="GCPDNS",
           EventType = iif (column_ifexists('resource_type', '') == "dns_query", "lookup", column_ifexists('resource_type', '')),
           EventResult=iff(EventResultDetails =~ 'NOERROR', 'Success', 'Failure'),
           EventSubType='response',
           EventEndTime=todatetime(column_ifexists('timestamp', ''))
       | extend
           ResponseCodeName=EventResultDetails, 
           Domain=Query,
           IpAddr=SrcIpAddr,
           EventStartTime = EventEndTime
       | project-rename
           Query=Query,
           QueryTypeName=QueryTypeName,
           ResponseName=ResponseName,
           EventResultDetails=EventResultDetails,
           NetworkProtocol=NetworkProtocol,
           SrcIpAddr=SrcIpAddr,
           EventOriginalUid=EventOriginalUid,
           EventSeverity=EventSeverity,
           EventCount=EventCount,
           EventProduct=EventProduct,
           EventVendor=EventVendor,
           EventSchemaVersion=EventSchemaVersion,
           Dvc=Dvc,
           EventType=EventType,
           EventResult=EventResult,
           EventSubType=EventSubType,
           EventEndTime=EventEndTime,
           ResponseCodeName=ResponseCodeName,
           Domain=Domain,
           IpAddr=IpAddr,
           EventStartTime=EventStartTime;
           union isfuzzy=true DNSQuery_GcpDns, DNSQuery_GcpDnsV2
           | project-reorder EventEndTime, IpAddr, Query, QueryTypeName, ResponseName, EventResult, EventSeverity, EventProduct, EventVendor, EventSchemaVersion, Dvc, EventType, EventSubType, ResponseCodeName, Domain, EventStartTime;
    };
    GCPCloudDNS_view