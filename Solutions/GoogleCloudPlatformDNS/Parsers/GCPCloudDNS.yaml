id: c1dc5d15-5600-477b-8750-48b5e2df7da8
Function:
  Title: Parser for GCPCloudDNS
  Version: '1.0.0'
  LastUpdated: '2025-02-10'
Category: Microsoft Sentinel Parser
FunctionName: GCPCloudDNS
FunctionAlias: GCPCloudDNS
FunctionQuery: |
    let GCPCloudDNS_view  = view () {
    let DNSQuery_GcpDns_empty = datatable(
           Query_e:string,
           QueryTypeName_e:string,
           ResponseName_e:string,
           EventResultDetails_e:string,
           NetworkProtocol_e:string,
           SrcIpAddr_e:string,
           EventOriginalUid_e:string,
           EventSeverity_e:string,
           EventCount_e:int,
           EventProduct_e:string,
           EventVendor_e:string,
           EventSchemaVersion_e:string,
           Dvc_e:string,
           EventType_e:string,
           EventResult_e:string,
           EventSubType_e:string,
           EventEndTime_e:datetime,
           ResponseCodeName_e:string,
           Domain_e:string,
           IpAddr_e:string,
           EventStartTime_e:datetime
    )[];
    let DNSQuery_GcpDns = union isfuzzy=true GCP_DNS_CL, DNSQuery_GcpDns_empty
       | extend 
           Query_e=column_ifexists('payload_queryName_s', ''),
           QueryTypeName_e=column_ifexists('payload_queryType_s', ''),
           ResponseName_e=column_ifexists('payload_rdata_s', ''),
           EventResultDetails_e=column_ifexists('payload_responseCode_s', ''),
           NetworkProtocol_e=column_ifexists('payload_protocol_s', ''),
           SrcIpAddr_e=column_ifexists('payload_sourceIP_s', ''),
           EventOriginalUid_e=column_ifexists('insert_id_s', ''),
           EventSeverity_e=column_ifexists('severity_s', ''),
           EventCount_e=(1),
           EventProduct_e="Cloud DNS",
           EventVendor_e="GCP",
           EventSchemaVersion_e="0.1.0",
           Dvc_e="GCPDNS",
           EventType_e=iif (column_ifexists('resource_type_s', '') == "dns_query", "lookup", column_ifexists('resource_type_s', '')),
           EventResult_e=iff(EventResultDetails_e =~ 'NOERROR', 'Success', 'Failure'),
           EventSubType_e='response',
           EventEndTime_e=todatetime(column_ifexists('timestamp_t', ''))
        // ---Aliases   
       | extend
           ResponseCodeName_e=EventResultDetails_e, 
           Domain_e=Query_e,
           IpAddr_e=SrcIpAddr_e,
           EventStartTime_e=EventEndTime_e
       | project-rename
           Query=Query_e,
           QueryTypeName=QueryTypeName_e,
           ResponseName=ResponseName_e,
           EventResultDetails=EventResultDetails_e,
           NetworkProtocol=NetworkProtocol_e,
           SrcIpAddr=SrcIpAddr_e,
           EventOriginalUid=EventOriginalUid_e,
           EventSeverity=EventSeverity_e,
           EventCount=EventCount_e,
           EventProduct=EventProduct_e,
           EventVendor=EventVendor_e,
           EventSchemaVersion=EventSchemaVersion_e,
           Dvc=Dvc_e,
           EventType=EventType_e,
           EventResult=EventResult_e,
           EventSubType=EventSubType_e,
           EventEndTime=EventEndTime_e,
           ResponseCodeName=ResponseCodeName_e,
           Domain=Domain_e,
           IpAddr=IpAddr_e,
           EventStartTime=EventStartTime_e;
    let DNSQuery_GcpDnsV2 = union isfuzzy=true GCP_DNSV2_CL, DNSQuery_GcpDns_empty
       | extend 
           Query_e=column_ifexists('QueryName', ''),
           QueryTypeName_e=column_ifexists('QueryType', ''),
           ResponseName_e=column_ifexists('Rdata', ''),
           EventResultDetails_e=column_ifexists('ResponseCode', ''),
           NetworkProtocol_e=column_ifexists('Protocol', ''),
           SrcIpAddr_e=column_ifexists('SourceIP', ''),
           EventOriginalUid_e=column_ifexists('InsertId', ''),
           EventSeverity_e=column_ifexists('Severity', ''),
           EventCount_e=(1),
           EventProduct_e="Cloud DNS",
           EventVendor_e="GCP",
           EventSchemaVersion_e="0.1.0",
           Dvc_e="GCPDNS",
           EventType_e=iif (column_ifexists('ResourceType', '') == "dns_query", "lookup", column_ifexists('ResourceType', '')),
           EventResult_e=iff(EventResultDetails_e =~ 'NOERROR', 'Success', 'Failure'),
           EventSubType_e='response',
           EventEndTime_e=todatetime(column_ifexists('Timestamp', ''))
        // ---Aliases
       | extend
           ResponseCodeName_e=EventResultDetails_e, 
           Domain_e=Query_e,
           IpAddr_e=SrcIpAddr_e,
           EventStartTime_e=EventEndTime_e
       | project-rename
           Query=Query_e,
           QueryTypeName=QueryTypeName_e,
           ResponseName=ResponseName_e,
           EventResultDetails=EventResultDetails_e,
           NetworkProtocol=NetworkProtocol_e,
           SrcIpAddr=SrcIpAddr_e,
           EventOriginalUid=EventOriginalUid_e,
           EventSeverity=EventSeverity_e,
           EventCount=EventCount_e,
           EventProduct=EventProduct_e,
           EventVendor=EventVendor_e,
           EventSchemaVersion=EventSchemaVersion_e,
           Dvc=Dvc_e,
           EventType=EventType_e,
           EventResult=EventResult_e,
           EventSubType=EventSubType_e,
           EventEndTime=EventEndTime_e,
           ResponseCodeName=ResponseCodeName_e,
           Domain=Domain_e,
           IpAddr=IpAddr_e,
           EventStartTime=EventStartTime_e;
           union isfuzzy=true DNSQuery_GcpDns, DNSQuery_GcpDnsV2
           | project-reorder Query, QueryTypeName, ResponseName, EventResultDetails, NetworkProtocol, SrcIpAddr, EventOriginalUid, EventSeverity, EventCount, EventProduct, EventVendor, EventSchemaVersion, Dvc, EventType, EventResult, EventSubType, EventEndTime, ResponseCodeName, Domain, IpAddr, EventStartTime;
    };
    GCPCloudDNS_view