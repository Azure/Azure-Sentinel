{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Domain Enrichment - DomainTools Iris Investigate", 
        "description": "Given a domain or set of domains associated with an incident return all Iris Investigate data for those domains as comments in the incident.",
        "prerequisites": "A DomainTools API Key provisioned for Iris Investigate. Visit https://www.domaintools.com/integrations to request a trial key.",       
        "prerequisitesDeployTemplateFile": "../DomainTools_FunctionAppConnector/azuredeploy.json",
        "postDeploymentSteps": ["None"],      
        "lastUpdateTime": "2024-06-27T00:00:00.000Z", 
        "entities": ["host","dnsresolution","url"], 
        "tags": ["Enrichment"], 
        "support": {
            "tier": "community" 
        },
        "author": {
            "name": "DomainTools"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "DomainTools-Iris-Investigate-Playbook",
            "type": "string",
            "metadata": {
                "description": "Name of the Logic App/Playbook"
            }
        },
        "FunctionAppName": {
            "defaultValue": "dtirisfuncapp",
            "type": "string",
            "metadata": {
                "description": "Name of the FunctionApp"
            }
        }
    },
    "variables": {
		"functionappName": "[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
		"DomainToolsDNSDBConnectionName": "[concat('domaintoolsdnsdb-', parameters('PlaybookName'))]",
		"AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]"
	},
    "resources": [
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('AzureSentinelConnectionName')]",
			"location": "[resourceGroup().location]",
			"kind": "V1",
			"properties": {
				"displayName": "[variables('AzureSentinelConnectionName')]",
				"customParameterValues": {},
				"parameterValueType": "Alternative",
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('DomainToolsDNSDBConnectionName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "[variables('DomainToolsDNSDBConnectionName')]",
				"customParameterValues": {},
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/farsightdnsdb')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
			"identity": {
				"type": "SystemAssigned"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
			],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
						"Fetch_Guided_Pivots_Results": {
							"defaultValue": false,
							"type": "Bool"
						},
						"Pivot_Threshold": {
							"defaultValue": 200,
							"type": "Int"
						},
						"Find_Domains_With_Malicious_tags": {
							"defaultValue": [
							"test_tag", "test_tag1"
							],
							"type": "Array"
						},
						"Fetch_DomainTools_DNSDB_Results": {
							"defaultValue": false,
							"type": "Bool"
						},
						"DomainTools_DNSDB_Results_Count": {
							"defaultValue": 10,
							"type": "Int"
						}
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Check_if_got_entities": {
                            "actions": {
                                "Check_if_farsigt_DNSDB_": {
                                    "actions": {
                                        "For_each_domain_list": {
                                            "foreach": "@variables('domains_list')",
                                            "actions": {
                                                "Check_if_Rdata_records_exists": {
                                                    "actions": {
                                                        "Add_RData_comment_to_incident_(V3)": {
                                                            "runAfter": {
                                                                "check_if_dnsdb_results_are_greater_than_the_set_parameter": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "body": {
                                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                    "message": "<p><strong>DomainTools DNSDB RData Results for Domain </strong><strong>@{items('For_each_domain_list')}</strong><strong>:<br>\n</strong><strong>@{variables('dnsdb_results_string')}</strong><strong></strong><strong>@{replace(replace(replace(body('DNSDB_Table') , '&quot;', ''),']','') , '[', '')}</strong><strong></strong></p>"
                                                                },
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "path": "/Incidents/Comment"
                                                            }
                                                        },
                                                        "DNSDB_Table": {
                                                            "runAfter": {
                                                                "For_each": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Table",
                                                            "inputs": {
                                                                "format": "HTML",
                                                                "from": "@reverse(sort(variables('rdtaa_output_array'),'Last Seen'))"
                                                            }
                                                        },
                                                        "For_each": {
                                                            "foreach": "@body('RData_Lookup_with_RRType')",
                                                            "actions": {
                                                                "Condition": {
                                                                    "actions": {
                                                                        "Append_to_rdara_array_variable_1": {
                                                                            "runAfter": {
                                                                                "DNSDB_Compose_1": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "AppendToArrayVariable",
                                                                            "inputs": {
                                                                                "name": "rdtaa_output_array",
                                                                                "value": "@outputs('DNSDB_Compose_1')"
                                                                            }
                                                                        },
                                                                        "DNSDB_Compose_1": {
                                                                            "runAfter": {},
                                                                            "type": "Compose",
                                                                            "inputs": {
                                                                                "Count": "@items('For_each')?['count']",
                                                                                "First Seen": "@items('For_each')?['time_first']",
                                                                                "Last Seen": "@items('For_each')?['time_last']",
                                                                                "RRName": "@items('For_each')?['rrname']",
                                                                                "Rdata": "@items('For_each')?['rdata']",
                                                                                "Record Type": "@items('For_each')?['rrtype']"
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "else": {
                                                                        "actions": {
                                                                            "Append_to_rdara_array_variable_2": {
                                                                                "runAfter": {
                                                                                    "DNSDB_Compose_2": [
                                                                                        "Succeeded"
                                                                                    ]
                                                                                },
                                                                                "type": "AppendToArrayVariable",
                                                                                "inputs": {
                                                                                    "name": "rdtaa_output_array",
                                                                                    "value": "@outputs('DNSDB_Compose_2')"
                                                                                }
                                                                            },
                                                                            "DNSDB_Compose_2": {
                                                                                "runAfter": {},
                                                                                "type": "Compose",
                                                                                "inputs": {
                                                                                    "Count": "@items('For_each')?['count']",
                                                                                    "First Seen": "@items('For_each')?['zone_time_first']",
                                                                                    "Last Seen": "@items('For_each')?['zone_time_last']",
                                                                                    "RRName": "@items('For_each')?['rrname']",
                                                                                    "Rdata": "@items('For_each')?['rdata']",
                                                                                    "Record Type": "@items('For_each')?['rrtype']"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "not": {
                                                                                    "equals": [
                                                                                        "@items('For_each')?['time_first']",
                                                                                        "@null"
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                }
                                                            },
                                                            "runAfter": {},
                                                            "type": "Foreach"
                                                        },
                                                        "check_if_dnsdb_results_are_greater_than_the_set_parameter": {
                                                            "actions": {
                                                                "set_dnsdb_results_string": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "dnsdb_results_string",
                                                                        "value": "Showing first  @{variables('dnsdb_results_count')}  records "
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "DNSDB_Table": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "expression": {
                                                                "and": [
                                                                    {
                                                                        "greater": [
                                                                            "@length(variables('rdtaa_output_array'))",
                                                                            "@variables('dnsdb_results_count')"
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "type": "If"
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Set_rdata_output_variable_to_empty": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "greater": [
                                                                    "@length(body('RData_Lookup_with_RRType'))",
                                                                    0
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "RData_Lookup_with_RRType": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                                                            }
                                                        },
                                                        "method": "get",
                                                        "path": "/lookup/rdata/name/@{encodeURIComponent(items('For_each_domain_list'))}/ANY",
                                                        "queries": {
                                                            "humantime": true,
                                                            "limit": "@variables('dnsdb_results_count')"
                                                        }
                                                    }
                                                },
                                                "Set_rdata_output_variable_to_empty": {
                                                    "runAfter": {
                                                        "RData_Lookup_with_RRType": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "rdtaa_output_array",
                                                        "value": "@null"
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach",
                                            "runtimeConfiguration": {
                                                "concurrency": {
                                                    "repetitions": 1
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Check_if_the_response_is_successful": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('farsight_dnsdb')",
                                                    "@true"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Check_if_the_response_is_successful": {
                                    "actions": {
                                        "For_each_response": {
                                            "foreach": "@variables('customized_response')",
                                            "actions": {
                                                "Add_Iris_Investigate_Table_to_Incident_Comments": {
                                                    "runAfter": {
                                                        "Set_Damain_Value": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": {
                                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                                            "message": "<p><strong>Iris Investigate results for Domain: </strong><strong>@{variables('domain_name')}</strong><strong></strong><strong>@{replace(replace(body('Customized_Table'), '&lt;', '<'), '&gt;', '>')}</strong><strong></strong></p>"
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/Incidents/Comment"
                                                    }
                                                },
                                                "Check_Custom_Pivot_response_exists": {
                                                    "actions": {
                                                        "For_each_pivot": {
                                                            "foreach": "@items('For_each_response')['pivot']",
                                                            "actions": {
                                                                "Add_Pivoting_Data_to_Incident_Comments": {
                                                                    "runAfter": {
                                                                        "Create_Pivot_Table": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "ApiConnection",
                                                                    "inputs": {
                                                                        "body": {
                                                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                            "message": "<p><strong>Pivot Results for </strong><strong>@{variables('pivot_type')}</strong><strong>:</strong><strong>@{variables('pivot_value')}</strong><strong> for domain:</strong><strong>@{variables('domain_name')}</strong><strong></strong><strong>@{body('Create_Pivot_Table')}</strong><strong></strong></p>"
                                                                        },
                                                                        "host": {
                                                                            "connection": {
                                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                            }
                                                                        },
                                                                        "method": "post",
                                                                        "path": "/Incidents/Comment"
                                                                    }
                                                                },
                                                                "Create_Pivot_Table": {
                                                                    "runAfter": {
                                                                        "Set_Pivot_Value": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "Table",
                                                                    "inputs": {
                                                                        "format": "HTML",
                                                                        "from": "@items('For_each_pivot')['pivot_results']"
                                                                    }
                                                                },
                                                                "Set_Pivot_Type": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "pivot_type",
                                                                        "value": "@{items('For_each_pivot')['pivot_type']}"
                                                                    }
                                                                },
                                                                "Set_Pivot_Value": {
                                                                    "runAfter": {
                                                                        "Set_Pivot_Type": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "pivot_value",
                                                                        "value": "@{items('For_each_pivot')['pivot_value']}"
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {},
                                                            "type": "Foreach"
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Add_Iris_Investigate_Table_to_Incident_Comments": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "not": {
                                                                    "equals": [
                                                                        "@items('For_each_response')?['pivot']",
                                                                        "@null"
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "Check_if_Malicious_Tags_exist": {
                                                    "actions": {
                                                        "Add_Malicious_tags_to_Incident": {
                                                            "runAfter": {
                                                                "set_domain_malicious_tags": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "body": {
                                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                    "message": "<p><strong>Malicious Tags:</strong><strong>@{variables('domain_malicious_tags')}</strong><strong>  found for domain: </strong><strong>@{variables('domain_name')}</strong><strong>&nbsp;</strong></p>"
                                                                },
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "path": "/Incidents/Comment"
                                                            }
                                                        },
                                                        "Update_incident": {
                                                            "runAfter": {
                                                                "Add_Malicious_tags_to_Incident": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "body": {
                                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                    "severity": "High",
                                                                    "tagsToAdd": {
                                                                        "TagsToAdd": [
                                                                            {
                                                                                "Tag": "Malicious Tags: @{variables('domain_malicious_tags')}"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "put",
                                                                "path": "/Incidents"
                                                            }
                                                        },
                                                        "set_domain_malicious_tags": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "domain_malicious_tags",
                                                                "value": "@join(items('For_each_response')?['malicious_tags'],',')"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Check_Custom_Pivot_response_exists": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "greater": [
                                                                    "@length(items('For_each_response')?['malicious_tags'])",
                                                                    0
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "Customized_Table": {
                                                    "runAfter": {},
                                                    "type": "Table",
                                                    "inputs": {
                                                        "format": "HTML",
                                                        "from": "@items('For_each_response')['custom_table']"
                                                    }
                                                },
                                                "Set_Damain_Value": {
                                                    "runAfter": {
                                                        "Customized_Table": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "domain_name",
                                                        "value": "@{items('For_each_response')['domain']}"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Ser_Playbook_Response": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach",
                                            "runtimeConfiguration": {
                                                "concurrency": {
                                                    "repetitions": 1
                                                }
                                            }
                                        },
                                        "Ser_Playbook_Response": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "customized_response",
                                                "value": "@body('InvestigateDomain')['custom_response']"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "InvestigateDomain": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Add_Error_to_Incident_Comments": {
                                                "runAfter": {},
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": {
                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                        "message": "<p><strong>Error Message: </strong><strong>@{body('InvestigateDomain')['respone']['error']['message']}</strong><strong></strong><br>\n<br>\n</p>"
                                                    },
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/Incidents/Comment"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(body('InvestigateDomain')['custom_response'])",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "InvestigateDomain": {
                                    "runAfter": {},
                                    "type": "Function",
                                    "inputs": {
                                        "body": {
                                            "domain": "@variables('domains_list')",
                                            "from_playbook": "@true",
                                            "guided_pivots": "@parameters('Fetch_Guided_Pivots_Results')",
                                            "malicious_tags": "@parameters('Find_Domains_With_Malicious_tags')",
                                            "max_pivot": "@parameters('Pivot_Threshold')"
                                        },
                                        "function": {
                                            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/InvestigateDomain')]"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "For_each_DNS": [
                                    "Succeeded"
                                ],
                                "For_each_URL": [
                                    "Succeeded"
                                ],
                                "for_each_host_object": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(variables('domains_list'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "DNS_Name_Variable": {
                            "runAfter": {
                                "Host_Name_Variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "dns_name",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Domain_Name_Variable": {
                            "runAfter": {
                                "DNS_Name_Variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domain_name",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Entities_-_Get_DNS": {
                            "runAfter": {
                                "Pivot_Value": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/dnsresolution"
                            }
                        },
                        "Entities_-_Get_Hosts": {
                            "runAfter": {
                                "Pivot_Value": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/host"
                            }
                        },
                        "Entities_-_Get_URLs": {
                            "runAfter": {
                                "Pivot_Value": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/url"
                            }
                        },
                        "For_each_DNS": {
                            "foreach": "@body('Entities_-_Get_DNS')?['Dnsresolutions']",
                            "actions": {
                                "Add_Dnd_Domain_to_Domains_List": {
                                    "runAfter": {},
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "domains_list",
                                        "value": "@items('For_each_DNS')?['DomainName']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Entities_-_Get_DNS": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_URL": {
                            "foreach": "@body('Entities_-_Get_URLs')?['URLs']",
                            "actions": {
                                "Add_URLS_to_Domain_list": {
                                    "runAfter": {},
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "domains_list",
                                        "value": "@items('For_each_URL')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Entities_-_Get_URLs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Host_Name_Variable": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "host_name",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "List_Of_Domains": {
                            "runAfter": {
                                "URL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domains_list",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Pivot_Type": {
                            "runAfter": {
                                "Playbook_Response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "pivot_type",
                                        "type": "string",
                                        "value": "@{null}"
                                    }
                                ]
                            }
                        },
                        "Pivot_Value": {
                            "runAfter": {
                                "Pivot_Type": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "pivot_value",
                                        "type": "string",
                                        "value": "@{null}"
                                    }
                                ]
                            }
                        },
                        "Playbook_Response": {
                            "runAfter": {
                                "domain_malicious_tags": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "customized_response",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "RRSet_array": {
                            "runAfter": {
                                "Rdata_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "rrset_output_array",
                                        "type": "array",
                                        "value": "@null"
                                    }
                                ]
                            }
                        },
                        "Rdata_array": {
                            "runAfter": {
                                "dnsdb_results_string": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "rdtaa_output_array",
                                        "type": "array",
                                        "value": "@null"
                                    }
                                ]
                            }
                        },
                        "URL": {
                            "runAfter": {
                                "Domain_Name_Variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "url",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "dnsdb_results_count": {
                            "runAfter": {
                                "farsight_dnddb": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "dnsdb_results_count",
                                        "type": "integer",
                                        "value": "@parameters('DomainTools_DNSDB_Results_Count')"
                                    }
                                ]
                            }
                        },
                        "dnsdb_results_string": {
                            "runAfter": {
                                "dnsdb_results_count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "dnsdb_results_string",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "domain_malicious_tags": {
                            "runAfter": {
                                "malicious_tags": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domain_malicious_tags",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "farsight_dnddb": {
                            "runAfter": {
                                "guided_pivots": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "farsight_dnsdb",
                                        "type": "boolean",
                                        "value": "@parameters('Fetch_DomainTools_DNSDB_Results')"
                                    }
                                ]
                            }
                        },
                        "for_each_host_object": {
                            "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                            "actions": {
                                "Append_host_domain_names_to_Domain_list": {
                                    "runAfter": {
                                        "Check_DNS_Name_is_empty": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "domains_list",
                                        "value": "@variables('domain_name')"
                                    }
                                },
                                "Check_DNS_Name_is_empty": {
                                    "actions": {
                                        "Set_Domain_Name_with_DNS_Domain": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "domain_name",
                                                "value": "@{variables('host_name')}.@{variables('dns_name')}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_DNS_Name_Variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Set_Domain_Name_without_DNS_Domain": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "domain_name",
                                                    "value": "@variables('host_name')"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@variables('dns_name')",
                                                        "@null"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Set_DNS_Name_Variable": {
                                    "runAfter": {
                                        "Set_Host_Name_Variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "dns_name",
                                        "value": "@items('for_each_host_object')?['DnsDomain']"
                                    }
                                },
                                "Set_Host_Name_Variable": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "host_name",
                                        "value": "@items('for_each_host_object')?['HostName']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Entities_-_Get_Hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "guided_pivots": {
                            "runAfter": {
                                "List_Of_Domains": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "guided_pivots",
                                        "type": "boolean",
                                        "value": "@parameters('Fetch_Guided_Pivots_Results')"
                                    }
                                ]
                            }
                        },
                        "malicious_tags": {
                            "runAfter": {
                                "max_pivot": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "malicious_tags",
                                        "type": "array",
                                        "value": "@parameters('Find_Domains_With_Malicious_tags')"
                                    }
                                ]
                            }
                        },
                        "max_pivot": {
                            "runAfter": {
                                "RRSet_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "max_pivot",
                                        "type": "integer",
                                        "value": "@parameters('Pivot_Threshold')"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                                "connectionName": "[variables('AzureSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
								"connectionProperties": {
									"authentication": {
										"type": "ManagedServiceIdentity"
									}
								}
                            },
                            "farsightdnsdb": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                                "connectionName": "[variables('DomainToolsDNSDBConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/farsightdnsdb')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}