{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
	"metadata": {
        "title": "DomainTools DNSDB Co-Located Hosts", 
        "description": "This playbook uses the Farsight DNSDB connector to automatically enrich Domain's found in the Microsoft Sentinel incidents. This use case describes the desire to easily identify Hosts that are co-located (based on Address) based on the input of a domain and a given point in time. The response would be a set of domains that also shared the same IP address as the originating domain name at the given point in time.",
        "prerequisites": "A DomainTools API Key provisioned for Iris Investigate. Visit https://www.domaintools.com/integrations to request a trial key.",       
        "prerequisitesDeployTemplateFile": "",
        "postDeploymentSteps": ["None"],      
        "lastUpdateTime": "2024-05-20T00:00:00.000Z", 
        "entities": ["host","dnsresolution"], 
        "tags": ["Enrichment"], 
        "support": {
            "tier": "community" 
        },
        "author": {
            "name": "DomainTools"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "DomainTools-DNSDB-Co-Located-Hosts",
            "type": "string",
            "metadata": {
                "description": "Name of the Logic App/Playbook"
            }
        }
    },
    "variables": {
		"DomainToolsDNSDBConnectionName": "[concat('domaintoolsdnsdb-', parameters('PlaybookName'))]",
		"AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]"
	},
    "resources": [
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('AzureSentinelConnectionName')]",
			"location": "[resourceGroup().location]",
			"kind": "V1",
			"properties": {
				"displayName": "[variables('AzureSentinelConnectionName')]",
				"customParameterValues": {},
				"parameterValueType": "Alternative",
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('DomainToolsDNSDBConnectionName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "[variables('DomainToolsDNSDBConnectionName')]",
				"customParameterValues": {},
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/farsightdnsdb')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
			"identity": {
				"type": "SystemAssigned"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
			],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_Azure_Sentinel_incident_creation_rule_was_triggered": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Co_Located_Hosts_": {
                            "runAfter": {
                                "RRSET_Unique_IPS_Array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "co_located_hosts",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Co_Located_Hosts_Array": {
                            "runAfter": {
                                "Unique_Co_Located_Hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "co_located_domains_array",
                                        "type": "array",
                                        "value": "@null"
                                    }
                                ]
                            }
                        },
                        "DNS_Name_Variable": {
                            "runAfter": {
                                "Host_Name_Variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "dns_name",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Domain_Name_Varibale": {
                            "runAfter": {
                                "DNS_Name_Variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "domain_name",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "End_Date_epoch": {
                            "runAfter": {
                                "Get1970TimestampInTicks": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "end_date_epoch",
                                        "type": "integer",
                                        "value": "@div(sub(variables('end_date_ticks_time'),variables('ticks_1970_time')),10000000)"
                                    }
                                ]
                            }
                        },
                        "Entities_-_Get_DNS": {
                            "runAfter": {
                                "For_each_incident_host": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/dnsresolution"
                            }
                        },
                        "Entities_-_Get_Hosts": {
                            "runAfter": {
                                "Co_Located_Hosts_Array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/host"
                            }
                        },
                        "Filter_results_for_time_seen_after_relative_to_incident_date": {
                            "runAfter": {
                                "Incident_Date": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "time_fencing_seen_after",
                                        "type": "string",
                                        "value": "90d"
                                    }
                                ]
                            },
                            "description": "Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d (Default 1d)"
                        },
                        "Filter_results_for_time_seen_before_relative_to_incident_date": {
                            "runAfter": {
                                "Filter_results_for_time_seen_after_relative_to_incident_date": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "time_fencing_seen_before",
                                        "type": "string",
                                        "value": "1h"
                                    }
                                ]
                            },
                            "description": "Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d(Default 1h)"
                        },
                        "For_each": {
                            "foreach": "@variables('incident_domains')",
                            "actions": {
                                "Check_if_co_located_domains_exist": {
                                    "actions": {
                                        "Add_co_located_domains_to_the_incident_comment": {
                                            "runAfter": {
                                                "Co_located_domains_table": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                    "message": "<p><span style=\"font-size: 12px\">DNSDB Co-Located Domains for Domain: </span><span style=\"font-size: 12px\">@{items('For_each')}</span><span style=\"font-size: 12px\">(From Date: </span><span style=\"font-size: 12px\">@{variables('start_date')}</span><span style=\"font-size: 12px\">, To Date: </span><span style=\"font-size: 12px\">@{variables('end_date')}</span><span style=\"font-size: 12px\">)</span><span style=\"font-size: 12px\"><strong>@{body('Co_located_domains_table')}</strong></span><span style=\"font-size: 12px\"><strong></strong></span><br>\n</p>"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/Incidents/Comment"
                                            }
                                        },
                                        "Co_located_domains_table": {
                                            "runAfter": {},
                                            "type": "Table",
                                            "inputs": {
                                                "format": "HTML",
                                                "from": "@variables('co_located_domains_array')"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "for_each_co_located_hosts": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Add_comment_to_incident_(V3)": {
                                                "runAfter": {},
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": {
                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                        "message": "<p>DNSDB Co-Located Domains for Domain: @{items('For_each')}(From Date: @{variables('start_date')}, To Date: @{variables('end_date')}) <br>\nNo Records Found</p>"
                                                    },
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/Incidents/Comment"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(variables('co_located_domains_array'))",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "For_each_RRSet_CNAME": {
                                    "foreach": "@body('RRSet_Lookup_with_RRType_CNAME')",
                                    "actions": {
                                        "For_each_CNAME_RDATA": {
                                            "foreach": "@items('For_each_RRSet_CNAME')?['rdata']",
                                            "actions": {
                                                "Append_to_array_variable": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "co_located_hosts",
                                                        "value": "@items('For_each_CNAME_RDATA')"
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "For_each_Unique_IPS": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "For_each_RRType_AAAA_Records": {
                                    "foreach": "@body('RRSet_Lookup_with_RRType_AAAA_Records')",
                                    "actions": {
                                        "For_each_RDATA_AAAA_Records": {
                                            "foreach": "@items('For_each_RRType_AAAA_Records')?['rdata']",
                                            "actions": {
                                                "RRSET_AAAA_IPS": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "IPS_Array",
                                                        "value": "@items('For_each_RDATA_AAAA_Records')"
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "For_each_RRType_A_Records": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "For_each_RRType_A_Records": {
                                    "foreach": "@body('RRSet_Lookup_with_RRType_A_Records')",
                                    "actions": {
                                        "For_each_RDATA_A_Records": {
                                            "foreach": "@items('For_each_RRType_A_Records')?['rdata']",
                                            "actions": {
                                                "RRSET_A_IPS": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "IPS_Array",
                                                        "value": "@items('For_each_RDATA_A_Records')"
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "Set_IP_Arrays_to_Empty": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "For_each_Unique_IPS": {
                                    "foreach": "@variables('ips_array_unique')",
                                    "actions": {
                                        "For_each_RDATA": {
                                            "foreach": "@body('RData_Lookup_with_RRType')",
                                            "actions": {
                                                "Co_Located_Hosts": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "co_located_hosts",
                                                        "value": "@items('For_each_RDATA')?['rrname']"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "RData_Lookup_with_RRType": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "RData_Lookup_with_RRType": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/lookup/rdata/@{encodeURIComponent('ip')}/@{encodeURIComponent(items('For_each_Unique_IPS'))}/ANY",
                                                "queries": {
                                                    "limit": 10,
                                                    "time_first_before": "@variables('end_date_epoch')",
                                                    "time_last_after": "@variables('start_date_epoch')"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_Co_located_Hosts_to_Empty": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "Get_Unique_Co_located_Hosts": {
                                    "runAfter": {
                                        "Set_Co_Located_Hosts_Unique_to_Empty": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "co_located_hosts_unique",
                                        "value": "@union(variables('co_located_hosts'),variables('co_located_hosts'))"
                                    }
                                },
                                "Get_Unique_IPS": {
                                    "runAfter": {
                                        "Set_Unique_IP_Array_to_empty": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "ips_array_unique",
                                        "value": "@union(variables('ips_array'),variables('ips_array'))"
                                    }
                                },
                                "Join": {
                                    "runAfter": {
                                        "Get_Unique_Co_located_Hosts": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Join",
                                    "inputs": {
                                        "from": "@variables('co_located_hosts_unique')",
                                        "joinWith": ",\n"
                                    }
                                },
                                "RRSet_Lookup_with_RRType_AAAA_Records": {
                                    "runAfter": {
                                        "RRSet_Lookup_with_RRType_A_Records": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each'))}/@{encodeURIComponent('AAAA')}",
                                        "queries": {
                                            "limit": 10,
                                            "time_first_before": "@variables('end_date_epoch')",
                                            "time_last_after": "@variables('start_date_epoch')"
                                        }
                                    }
                                },
                                "RRSet_Lookup_with_RRType_A_Records": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each'))}/@{encodeURIComponent('A')}",
                                        "queries": {
                                            "limit": 10,
                                            "time_first_before": "@variables('end_date_epoch')",
                                            "time_last_after": "@variables('start_date_epoch')"
                                        }
                                    }
                                },
                                "RRSet_Lookup_with_RRType_CNAME": {
                                    "runAfter": {
                                        "RRSet_Lookup_with_RRType_AAAA_Records": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each'))}/@{encodeURIComponent('CNAME')}",
                                        "queries": {
                                            "limit": 10,
                                            "time_first_before": "@variables('end_date_epoch')",
                                            "time_last_after": "@variables('start_date_epoch')"
                                        }
                                    }
                                },
                                "Set_Co_Located_Hosts_Unique_to_Empty": {
                                    "runAfter": {
                                        "For_each_RRSet_CNAME": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "co_located_hosts_unique",
                                        "value": []
                                    }
                                },
                                "Set_Co_located_Hosts_to_Empty": {
                                    "runAfter": {
                                        "Get_Unique_IPS": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "co_located_hosts",
                                        "value": []
                                    }
                                },
                                "Set_IP_Arrays_to_Empty": {
                                    "runAfter": {
                                        "RRSet_Lookup_with_RRType_CNAME": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "ips_array",
                                        "value": []
                                    }
                                },
                                "Set_Unique_IP_Array_to_empty": {
                                    "runAfter": {
                                        "For_each_RRType_AAAA_Records": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "ips_array_unique",
                                        "value": []
                                    }
                                },
                                "Set_variable": {
                                    "runAfter": {
                                        "Join": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "co_located_domains_array",
                                        "value": "@null"
                                    }
                                },
                                "for_each_co_located_hosts": {
                                    "foreach": "@variables('co_located_hosts_unique')",
                                    "actions": {
                                        "Append_to_co_located_domains_array_variable": {
                                            "runAfter": {
                                                "Co_located_hosts_compose": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "co_located_domains_array",
                                                "value": "@outputs('Co_located_hosts_compose')"
                                            }
                                        },
                                        "Co_located_hosts_compose": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": {
                                                "Hosts": "@items('for_each_co_located_hosts')"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                }
                            },
                            "runAfter": {
                                "For_each_incident_dns_domain": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "For_each_incident_dns_domain": {
                            "foreach": "@body('Entities_-_Get_DNS')?['Dnsresolutions']",
                            "actions": {
                                "append_dns_domain_to_domain_list": {
                                    "runAfter": {},
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "incident_domains",
                                        "value": "@items('For_each_incident_dns_domain')?['DomainName']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Entities_-_Get_DNS": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 2
                                }
                            }
                        },
                        "For_each_incident_host": {
                            "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                            "actions": {
                                "Check_DNS_Name_is_empty": {
                                    "actions": {
                                        "Set_Domain_Name_with_DNS_Domain": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "domain_name",
                                                "value": "@{variables('host_name')}.@{variables('dns_name')}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "set_dns_name": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Set_Domain_Name_without_DNS_Domain": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "domain_name",
                                                    "value": "@variables('host_name')"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@variables('dns_name')",
                                                        "@null"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "add_hosts_to_domain_list": {
                                    "runAfter": {
                                        "Check_DNS_Name_is_empty": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "incident_domains",
                                        "value": "@variables('domain_name')"
                                    }
                                },
                                "set_dns_name": {
                                    "runAfter": {
                                        "set_host_name": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "dns_name",
                                        "value": "@items('For_each_incident_host')?['DnsDomain']"
                                    }
                                },
                                "set_host_name": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "host_name",
                                        "value": "@items('For_each_incident_host')?['HostName']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Entities_-_Get_Hosts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Get1970TimestampInTicks": {
                            "runAfter": {
                                "Lookup_Start_Date_Ticks_Time": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ticks_1970_time",
                                        "type": "integer",
                                        "value": "@ticks('1970-01-01T00:00:00Z')"
                                    }
                                ]
                            }
                        },
                        "Host_Name_Variable": {
                            "runAfter": {
                                "incident_domains": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "host_name",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Incident_Date": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "incident_created_date",
                                        "type": "string",
                                        "value": "@triggerBody()?['object']?['properties']?['createdTimeUtc']"
                                    }
                                ]
                            }
                        },
                        "LookUp_End_Date": {
                            "runAfter": {
                                "LookUp_Start_Date": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "end_date",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "LookUp_Start_Date": {
                            "runAfter": {
                                "Filter_results_for_time_seen_before_relative_to_incident_date": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "start_date",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Lookup_End_Date_Ticks_Time": {
                            "runAfter": {
                                "Lookup_date_based_on_Timefencing_Seen_After": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "end_date_ticks_time",
                                        "type": "integer",
                                        "value": "@ticks(variables('end_date'))"
                                    }
                                ]
                            }
                        },
                        "Lookup_Start_Date_Ticks_Time": {
                            "runAfter": {
                                "Lookup_End_Date_Ticks_Time": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "start_date__ticks_time",
                                        "type": "integer",
                                        "value": "@ticks(variables('start_date'))"
                                    }
                                ]
                            }
                        },
                        "Lookup_date_based_on_Timefencing_Seen_After": {
                            "runAfter": {
                                "Lookup_date_based_on_Timefencing_Seen_Before": [
                                    "Succeeded"
                                ]
                            },
                            "cases": {
                                "Case_12_Hours": {
                                    "case": "12h",
                                    "actions": {
                                        "Set_end_date_12_hours_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "start_date",
                                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                                            }
                                        }
                                    }
                                },
                                "Case_1_Hours": {
                                    "case": "1h",
                                    "actions": {
                                        "Set_end_date_an_hour_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "start_date",
                                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                                            }
                                        }
                                    }
                                },
                                "Case_24_Hours": {
                                    "case": "24h",
                                    "actions": {
                                        "set_end_date_1_day_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "start_date",
                                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                                            }
                                        }
                                    }
                                },
                                "Case_30_Days": {
                                    "case": "30d",
                                    "actions": {
                                        "set_end_date_30_days_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "start_date",
                                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                                            }
                                        }
                                    }
                                },
                                "Case_365_Days": {
                                    "case": "365d",
                                    "actions": {
                                        "set_end_date_365_days_back": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "start_date",
                                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                                            }
                                        }
                                    }
                                },
                                "Case_60_Days": {
                                    "case": "60d",
                                    "actions": {
                                        "set_end_date_60_days_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "start_date",
                                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                                            }
                                        }
                                    }
                                },
                                "Case_6_Hours": {
                                    "case": "6h",
                                    "actions": {
                                        "Set_end_date_6_hours_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "start_date",
                                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                                            }
                                        }
                                    }
                                },
                                "Case_90_Days": {
                                    "case": "90d",
                                    "actions": {
                                        "set_end_date_90_days_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "start_date",
                                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                                            }
                                        }
                                    }
                                }
                            },
                            "default": {
                                "actions": {
                                    "set_default_end_date_to_1_hour_before": {
                                        "runAfter": {},
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "start_date",
                                            "value": "@{addHours(variables('incident_created_date'),-1)}"
                                        }
                                    }
                                }
                            },
                            "expression": "@variables('time_fencing_seen_after')",
                            "type": "Switch"
                        },
                        "Lookup_date_based_on_Timefencing_Seen_Before": {
                            "runAfter": {
                                "LookUp_End_Date": [
                                    "Succeeded"
                                ]
                            },
                            "cases": {
                                "Case_12_Hours": {
                                    "case": "12h",
                                    "actions": {
                                        "Set_start_date_12_hours_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "end_date",
                                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                                            }
                                        }
                                    }
                                },
                                "Case_1_Hours": {
                                    "case": "1h",
                                    "actions": {
                                        "Set_start_date_an_hour_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "end_date",
                                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                                            }
                                        }
                                    }
                                },
                                "Case_24_Hours": {
                                    "case": "24h",
                                    "actions": {
                                        "set_start_date_1_day_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "end_date",
                                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                                            }
                                        }
                                    }
                                },
                                "Case_30_Days": {
                                    "case": "30d",
                                    "actions": {
                                        "set_start_date_30_days_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "end_date",
                                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                                            }
                                        }
                                    }
                                },
                                "Case_365_Days": {
                                    "case": "365d",
                                    "actions": {
                                        "set_start_date_365_days_back": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "end_date",
                                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                                            }
                                        }
                                    }
                                },
                                "Case_60_Days": {
                                    "case": "60d",
                                    "actions": {
                                        "set_start_date_60_days_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "end_date",
                                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                                            }
                                        }
                                    }
                                },
                                "Case_6_Hours": {
                                    "case": "6h",
                                    "actions": {
                                        "Set_start_date_6_hours_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "end_date",
                                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                                            }
                                        }
                                    }
                                },
                                "Case_90_Days": {
                                    "case": "90d",
                                    "actions": {
                                        "set_start_date_90_days_before": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "end_date",
                                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                                            }
                                        }
                                    }
                                }
                            },
                            "default": {
                                "actions": {
                                    "set_default_start_date_to_1_day_before": {
                                        "runAfter": {},
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "end_date",
                                            "value": "@{addDays(variables('incident_created_date'),-1)}"
                                        }
                                    }
                                }
                            },
                            "expression": "@variables('time_fencing_seen_before')",
                            "type": "Switch"
                        },
                        "RRSET_IPS_Array": {
                            "runAfter": {
                                "Domain_Name_Varibale": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ips_array",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "RRSET_Unique_IPS_Array": {
                            "runAfter": {
                                "RRSET_IPS_Array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ips_array_unique",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Start_Date_epoch": {
                            "runAfter": {
                                "End_Date_epoch": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "start_date_epoch",
                                        "type": "integer",
                                        "value": "@div(sub(variables('start_date__ticks_time'),variables('ticks_1970_time')),10000000)"
                                    }
                                ]
                            }
                        },
                        "Unique_Co_Located_Hosts": {
                            "runAfter": {
                                "Co_Located_Hosts_": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "co_located_hosts_unique",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "incident_domains": {
                            "runAfter": {
                                "Start_Date_epoch": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "incident_domains",
                                        "type": "array",
                                        "value": "@null"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                                "connectionName": "[variables('AzureSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
								"connectionProperties": {
									"authentication": {
										"type": "ManagedServiceIdentity"
									}
								}
                            },
                            "farsightdnsdb": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                                "connectionName": "[variables('DomainToolsDNSDBConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/farsightdnsdb')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}