{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "DomainTools - memberservices@domaintools.com",
    "comments": "Solution template for DomainTools"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "memberservices@domaintools.com",
    "_email": "[variables('email')]",
    "_solutionName": "DomainTools",
    "_solutionVersion": "3.0.2",
    "solutionId": "domaintoolsllc1647901527537.domaintools-iris-investigate",
    "_solutionId": "[variables('solutionId')]",
    "DomainTools_FunctionAppConnector": "DomainTools_FunctionAppConnector",
    "_DomainTools_FunctionAppConnector": "[variables('DomainTools_FunctionAppConnector')]",
    "TemplateEmptyArray": "[json('[]')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "DomainTools_FunctionAppConnector",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-fa-',uniquestring(variables('_playbookContentId1'))))]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','fa','-', uniqueString(concat(variables('_solutionId'),'-','AzureFunction','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "DomainTools-ASIM-DNS-Playbook": "DomainTools-ASIM-DNS-Playbook",
    "_DomainTools-ASIM-DNS-Playbook": "[variables('DomainTools-ASIM-DNS-Playbook')]",
    "blanks": "[replace('b', 'b', '')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "DomainTools-ASIM-DNS-Playbook",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "DomainTools-DNSDB-Co-Located-Addresses": "DomainTools-DNSDB-Co-Located-Addresses",
    "_DomainTools-DNSDB-Co-Located-Addresses": "[variables('DomainTools-DNSDB-Co-Located-Addresses')]",
    "playbookVersion3": "1.0",
    "playbookContentId3": "DomainTools-DNSDB-Co-Located-Addresses",
    "_playbookContentId3": "[variables('playbookContentId3')]",
    "playbookId3": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId3'))]",
    "playbookTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId3'))))]",
    "_playbookcontentProductId3": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId3'),'-', variables('playbookVersion3'))))]",
    "DomainTools-DNSDB-Co-Located-Hosts": "DomainTools-DNSDB-Co-Located-Hosts",
    "_DomainTools-DNSDB-Co-Located-Hosts": "[variables('DomainTools-DNSDB-Co-Located-Hosts')]",
    "playbookVersion4": "1.0",
    "playbookContentId4": "DomainTools-DNSDB-Co-Located-Hosts",
    "_playbookContentId4": "[variables('playbookContentId4')]",
    "playbookId4": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId4'))]",
    "playbookTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId4'))))]",
    "_playbookcontentProductId4": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId4'),'-', variables('playbookVersion4'))))]",
    "DomainTools-DNSDB-Historical-Addresses": "DomainTools-DNSDB-Historical-Addresses",
    "_DomainTools-DNSDB-Historical-Addresses": "[variables('DomainTools-DNSDB-Historical-Addresses')]",
    "playbookVersion5": "1.0",
    "playbookContentId5": "DomainTools-DNSDB-Historical-Addresses",
    "_playbookContentId5": "[variables('playbookContentId5')]",
    "playbookId5": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId5'))]",
    "playbookTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId5'))))]",
    "_playbookcontentProductId5": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId5'),'-', variables('playbookVersion5'))))]",
    "DomainTools-DNSDB-Historical-Hosts": "DomainTools-DNSDB-Historical-Hosts",
    "_DomainTools-DNSDB-Historical-Hosts": "[variables('DomainTools-DNSDB-Historical-Hosts')]",
    "playbookVersion6": "1.0",
    "playbookContentId6": "DomainTools-DNSDB-Historical-Hosts",
    "_playbookContentId6": "[variables('playbookContentId6')]",
    "playbookId6": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId6'))]",
    "playbookTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId6'))))]",
    "_playbookcontentProductId6": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId6'),'-', variables('playbookVersion6'))))]",
    "DomainTools-IP-Address-Playbook": "DomainTools-IP-Address-Playbook",
    "_DomainTools-IP-Address-Playbook": "[variables('DomainTools-IP-Address-Playbook')]",
    "playbookVersion7": "1.0",
    "playbookContentId7": "DomainTools-IP-Address-Playbook",
    "_playbookContentId7": "[variables('playbookContentId7')]",
    "playbookId7": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId7'))]",
    "playbookTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId7'))))]",
    "_playbookcontentProductId7": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId7'),'-', variables('playbookVersion7'))))]",
    "DomainTools-Iris-Enrich-Playbook": "DomainTools-Iris-Enrich-Playbook",
    "_DomainTools-Iris-Enrich-Playbook": "[variables('DomainTools-Iris-Enrich-Playbook')]",
    "playbookVersion8": "1.0",
    "playbookContentId8": "DomainTools-Iris-Enrich-Playbook",
    "_playbookContentId8": "[variables('playbookContentId8')]",
    "playbookId8": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId8'))]",
    "playbookTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId8'))))]",
    "_playbookcontentProductId8": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId8'),'-', variables('playbookVersion8'))))]",
    "DomainTools-Iris-Investigate-Playbook": "DomainTools-Iris-Investigate-Playbook",
    "_DomainTools-Iris-Investigate-Playbook": "[variables('DomainTools-Iris-Investigate-Playbook')]",
    "playbookVersion9": "1.0",
    "playbookContentId9": "DomainTools-Iris-Investigate-Playbook",
    "_playbookContentId9": "[variables('playbookContentId9')]",
    "playbookId9": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId9'))]",
    "playbookTemplateSpecName9": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId9'))))]",
    "_playbookcontentProductId9": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId9'),'-', variables('playbookVersion9'))))]",
    "parserObject1": {
      "_parserName1": "[concat(parameters('workspace'),'/','DomainToolsDNSActivity')]",
      "_parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'DomainToolsDNSActivity')]",
      "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('DomainToolsDNSActivity-Parser')))]",
      "parserVersion1": "1.0.0",
      "parserContentId1": "DomainToolsDNSActivity-Parser"
    },
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainTools_FunctionAppConnector Playbook with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "DomainToolsAPIUsername": {
              "type": "securestring",
              "metadata": {
                "description": "API Username provisioned by DomainTools"
              }
            },
            "DomainToolsAPIKey": {
              "type": "securestring",
              "metadata": {
                "description": "API Key provisioned by DomainTools"
              }
            },
            "FunctionAppName": {
              "defaultValue": "dtirisfuncapp",
              "type": "string"
            },
            "AppInsightsWorkspaceResourceID": {
              "type": "string",
              "metadata": {
                "description": "Migrate Classic Application Insights to Log Analytic Workspace which is retiring by 29 Febraury 2024. Use 'Log Analytic Workspace-->Properties' blade having 'Resource ID' property value. This is a fully qualified resourceId which is in format '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}'"
              }
            }
          },
          "variables": {
            "FunctionName": "[[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
            "StorageSuffix": "[[environment().suffixes.storage]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "playbookContentId1": "DomainTools_FunctionAppConnector",
            "playbookId1": "[[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[[variables('FunctionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "ApplicationId": "[[variables('FunctionName')]",
                "WorkspaceResourceId": "[[parameters('AppInsightsWorkspaceResourceID')]"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[[tolower(variables('FunctionName'))]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": "[variables('TemplateEmptyArray')]",
                  "ipRules": "[variables('TemplateEmptyArray')]",
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('FunctionName')))]"
              ],
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "properties": {
                "cors": {
                  "corsRules": "[variables('TemplateEmptyArray')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": false
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('FunctionName')))]"
              ],
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "properties": {
                "cors": {
                  "corsRules": "[variables('TemplateEmptyArray')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2018-11-01",
              "name": "[[variables('FunctionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('FunctionName')))]",
                "[[resourceId('Microsoft.Insights/components', variables('FunctionName'))]"
              ],
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "name": "[[variables('FunctionName')]",
                "httpsOnly": true,
                "clientAffinityEnabled": true,
                "alwaysOn": true,
                "reserved": true,
                "siteConfig": {
                  "linuxFxVersion": "python|3.11"
                }
              },
              "resources": [
                {
                  "apiVersion": "2018-11-01",
                  "type": "config",
                  "name": "appsettings",
                  "dependsOn": [
                    "[[concat('Microsoft.Web/sites/', variables('FunctionName'))]"
                  ],
                  "properties": {
                    "FUNCTIONS_EXTENSION_VERSION": "~4",
                    "FUNCTIONS_WORKER_RUNTIME": "python",
                    "APPINSIGHTS_INSTRUMENTATIONKEY": "[[reference(resourceId('Microsoft.insights/components', variables('FunctionName')), '2020-02-02').InstrumentationKey]",
                    "APPLICATIONINSIGHTS_CONNECTION_STRING": "[[reference(resourceId('microsoft.insights/components', variables('FunctionName')), '2020-02-02').ConnectionString]",
                    "AzureWebJobsStorage": "[[concat('DefaultEndpointsProtocol=https;AccountName=', toLower(variables('FunctionName')),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(variables('FunctionName'))), '2023-04-01').keys[0].value, ';EndpointSuffix=',toLower(variables('StorageSuffix')))]",
                    "APIKey": "[[parameters('DomainToolsAPIKey')]",
                    "APIUsername": "[[parameters('DomainToolsAPIUsername')]",
                    "WEBSITE_RUN_FROM_PACKAGE": "https://aka.ms/sentinel-DomainTools-Playbook_FunctionAppConnector"
                  }
                }
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default/azure-webjobs-hosts')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('FunctionName'), 'default')]",
                "[[resourceId('Microsoft.Storage/storageAccounts', variables('FunctionName'))]"
              ],
              "properties": {
                "publicAccess": "None"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default/azure-webjobs-secrets')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('FunctionName'), 'default')]",
                "[[resourceId('Microsoft.Storage/storageAccounts', variables('FunctionName'))]"
              ],
              "properties": {
                "publicAccess": "None"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2019-06-01",
              "name": "[[concat(variables('FunctionName'), '/default/', tolower(variables('FunctionName')))]",
              "dependsOn": [
                "[[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('FunctionName'), 'default')]",
                "[[resourceId('Microsoft.Storage/storageAccounts', variables('FunctionName'))]"
              ],
              "properties": {
                "shareQuota": 5120
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[[concat(variables('workspace-name'),'/Microsoft.SecurityInsights/',concat('AzureFunction-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "AzureFunction",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "DomainTools",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "AzureFunction",
        "displayName": "DomainTools_FunctionAppConnector",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainTools-ASIM-DNS-Playbook Playbook with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "DomainTools-ASIM-DNS-Playbook",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "FunctionAppName": {
              "defaultValue": "dtirisfuncapp",
              "type": "string",
              "metadata": {
                "description": "Name of the Function App"
              }
            }
          },
          "variables": {
            "functionappName": "[[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "Workspace ID": {
                      "defaultValue": "[variables('blanks')]",
                      "type": "string",
                      "metadata": {
                        "description": "Log Analytics Workspace ID"
                      }
                    },
                    "Workspace Key": {
                      "type": "SecureString",
                      "metadata": {
                        "description": "Log Analytics Workspace Key"
                      }
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_alert": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/subscribe"
                      }
                    }
                  },
                  "actions": {
                    "Check_if_got_entities": {
                      "actions": {
                        "EnrichDomain": {
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "asim": "@true",
                              "domain": "@variables('domains_list')",
                              "workspace_id": "@parameters('Workspace ID')",
                              "workspace_key": "@parameters('Workspace Key')"
                            },
                            "function": {
                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/EnrichDomain')]"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_DNS": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('domains_list'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "DNS_Name_Variable": {
                      "runAfter": {
                        "Host_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "dns_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Domain_Name_Variable": {
                      "runAfter": {
                        "DNS_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "domain_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "For_each_DNS": {
                      "foreach": "@triggerBody()?['Entities']",
                      "actions": {
                        "Add_Dns_Domain_to_Domains_List": {
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "domains_list",
                            "value": "@items('For_each_DNS')?['DomainName']"
                          }
                        }
                      },
                      "runAfter": {
                        "Playbook_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Host_Name_Variable": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "host_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "List_Of_Domains": {
                      "runAfter": {
                        "URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "domains_list",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "List_Of_Urls": {
                      "runAfter": {
                        "List_Of_Domains": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "urls_list",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Playbook_Response": {
                      "runAfter": {
                        "List_Of_Urls": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "custom_response",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "URL": {
                      "runAfter": {
                        "Domain_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "url",
                            "type": "string"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "DomainTools",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_DomainTools_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "Domain ASIM Enrichment - DomainTools Iris Enrich",
            "description": "Given a domain or set of domains associated with an alert return all Iris Enrich data for those domains and adds the enrichment data to the custom table.",
            "prerequisites": "A DomainTools API Key provisioned for Iris Enrich. Visit https://www.domaintools.com/integrations to request a trial key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2024-06-27T00:00:00Z",
            "entities": [
              "dnsresolution"
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "DomainTools-ASIM-DNS-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainTools-DNSDB-Co-Located-IP-Addresses Playbook with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion3')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "DomainTools-DNSDB-Co-Located-IP-Addresses",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            }
          },
          "variables": {
            "DomainToolsDNSDBConnectionName": "[[concat('domaintoolsdnsdb-', parameters('PlaybookName'))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('DomainToolsDNSDBConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('DomainToolsDNSDBConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "When_Azure_Sentinel_incident_creation_rule_was_triggered": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Co_Located_IPs": {
                      "runAfter": {
                        "RDATA_Unique_hosts_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_ips",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "End_Date_epoch": {
                      "runAfter": {
                        "Get1970TimestampInTicks": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date_epoch",
                            "type": "integer",
                            "value": "@div(sub(variables('end_date_ticks_time'),variables('ticks_1970_time')),10000000)"
                          }
                        ]
                      }
                    },
                    "Entities_-_Get_IPs": {
                      "runAfter": {
                        "co_located_ip_address_output": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "Filter_results_for_time_seen_after_relative_to_incident_date": {
                      "runAfter": {
                        "Incident_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "time_fencing_seen_after",
                            "type": "string",
                            "value": "90d"
                          }
                        ]
                      },
                      "description": "Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d"
                    },
                    "Filter_results_for_time_seen_before_relative_to_incident_date": {
                      "runAfter": {
                        "Filter_results_for_time_seen_after_relative_to_incident_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "time_fencing_seen_before",
                            "type": "string",
                            "value": "1h"
                          }
                        ]
                      },
                      "description": " Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d"
                    },
                    "For_each": {
                      "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                      "actions": {
                        "Check_if_co_located_ip_address_exists": {
                          "actions": {
                            "Add_comment_to_incident_(V3)": {
                              "runAfter": {
                                "Co_located_Ip_Address_table": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                  "message": "<p><span style=\"font-size: 12px\">DNSDB Co-Located IP Addresses for IP: </span><span style=\"font-size: 12px\">@{items('For_each')?['Address']}</span><span style=\"font-size: 12px\"> (From Date: </span><span style=\"font-size: 12px\">@{variables('start_date')}</span><span style=\"font-size: 12px\">, To Date: </span><span style=\"font-size: 12px\">@{variables('end_date')}</span><span style=\"font-size: 12px\">)</span><span style=\"font-size: 12px\"><strong>@{body('Co_located_Ip_Address_table')}</strong></span><span style=\"font-size: 12px\"><strong></strong></span><br>\n</p>"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                              }
                            },
                            "Co_located_Ip_Address_table": {
                              "type": "Table",
                              "inputs": {
                                "format": "HTML",
                                "from": "@variables('co_located_ip_address_output')"
                              }
                            }
                          },
                          "runAfter": {
                            "For_each_unique_co_located_ip_address": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_comment_to_incident_(V3)_2": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p>DNSDB Co-Located IP Addresses for IP: @{items('For_each')?['Address']} (From Date: @{variables('start_date')}, To Date: @{variables('end_date')})<br>\nNo Records Found</p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(variables('co_located_ip_address_output'))",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "For_each_RDATA_": {
                          "foreach": "@body('RData_Lookup_with_RRType')",
                          "actions": {
                            "Append_to_Rdata_Hosts_variable": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "rdata_hosts",
                                "value": "@items('For_each_RDATA_')?['rrname']"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_RData_Hosts_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_RRName_": {
                          "foreach": "@variables('rdata_hosts_unique')",
                          "actions": {
                            "For_each_RRSet_AAAA": {
                              "foreach": "@body('RRSet_Lookup_with_RRType_AAAA')",
                              "actions": {
                                "For_each_RRSet_AAAA_RData": {
                                  "foreach": "@items('For_each_RRSet_AAAA')?['rdata']",
                                  "actions": {
                                    "Set_Co-located_IPS_2": {
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "co_located_ips",
                                        "value": "@items('For_each_RRSet_AAAA_RData')"
                                      }
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "runAfter": {
                                "RRSet_Lookup_with_RRType_AAAA": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach"
                            },
                            "For_each_RRSet_With_A": {
                              "foreach": "@body('RRSet_Lookup_with_RRType_A')",
                              "actions": {
                                "For_each_RRSet_A_RData": {
                                  "foreach": "@items('For_each_RRSet_With_A')?['rdata']",
                                  "actions": {
                                    "Set_Co-located_IPS": {
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "co_located_ips",
                                        "value": "@items('For_each_RRSet_A_RData')"
                                      }
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "runAfter": {
                                "RRSet_Lookup_with_RRType_A": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach"
                            },
                            "RRSet_Lookup_with_RRType_A": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each_RRName_'))}/@{encodeURIComponent('A')}",
                                "queries": {
                                  "limit": 10,
                                  "time_first_before": "@variables('end_date_epoch')",
                                  "time_last_after": "@variables('start_date_epoch')"
                                }
                              }
                            },
                            "RRSet_Lookup_with_RRType_AAAA": {
                              "runAfter": {
                                "For_each_RRSet_With_A": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each_RRName_'))}/@{encodeURIComponent('AAAA')}",
                                "queries": {
                                  "limit": 10,
                                  "time_first_before": "@variables('end_date_epoch')",
                                  "time_last_after": "@variables('start_date_epoch')"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Set_Co_Located_IPS_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_unique_co_located_ip_address": {
                          "foreach": "@variables('co_located_ips_unique')",
                          "actions": {
                            "co_located_ip_address_compose": {
                              "type": "Compose",
                              "inputs": {
                                "IP Address": "@items('For_each_unique_co_located_ip_address')"
                              }
                            },
                            "co_located_ip_address_output_array": {
                              "runAfter": {
                                "co_located_ip_address_compose": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "co_located_ip_address_output",
                                "value": "@outputs('co_located_ip_address_compose')"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Get_Uniquie_Hosts": {
                          "runAfter": {
                            "Set_Unique_Hosts_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "rdata_hosts_unique",
                            "value": "@union(variables('rdata_hosts'),variables('rdata_hosts'))"
                          }
                        },
                        "Join": {
                          "runAfter": {
                            "Unique_co_located_IP_Addresses": [
                              "Succeeded"
                            ]
                          },
                          "type": "Join",
                          "inputs": {
                            "from": "@variables('co_located_ips_unique')",
                            "joinWith": ",\n"
                          }
                        },
                        "RData_Lookup_with_RRType": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/lookup/rdata/@{encodeURIComponent('ip')}/@{encodeURIComponent(items('For_each')?['Address'])}/ANY",
                            "queries": {
                              "limit": 10,
                              "time_first_before": "@variables('end_date_epoch')",
                              "time_last_after": "@variables('start_date_epoch')"
                            }
                          }
                        },
                        "Set_Co_Located_IPS_to_Empty": {
                          "runAfter": {
                            "Get_Uniquie_Hosts": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "co_located_ips",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_RData_Hosts_to_Empty": {
                          "runAfter": {
                            "RData_Lookup_with_RRType": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "rdata_hosts",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_Unique_Hosts_to_Empty": {
                          "runAfter": {
                            "For_each_RDATA_": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "rdata_hosts_unique",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_Unique_IP_Address_to_Empty": {
                          "runAfter": {
                            "For_each_RRName_": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "co_located_ips_unique",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_variable": {
                          "runAfter": {
                            "Join": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "co_located_ip_address_output",
                            "value": "@null"
                          }
                        },
                        "Unique_co_located_IP_Addresses": {
                          "runAfter": {
                            "Set_Unique_IP_Address_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "co_located_ips_unique",
                            "value": "@union(variables('co_located_ips'),variables('co_located_ips'))"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Get1970TimestampInTicks": {
                      "runAfter": {
                        "Lookup_Start_Date_Ticks_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ticks_1970_time",
                            "type": "integer",
                            "value": "@ticks('1970-01-01T00:00:00Z')"
                          }
                        ]
                      }
                    },
                    "Incident_Date": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_created_date",
                            "type": "string",
                            "value": "@triggerBody()?['object']?['properties']?['createdTimeUtc']"
                          }
                        ]
                      }
                    },
                    "LookUp_End_Date": {
                      "runAfter": {
                        "LookUp_Start_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "LookUp_Start_Date": {
                      "runAfter": {
                        "Filter_results_for_time_seen_before_relative_to_incident_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Lookup_End_Date_Ticks_Time": {
                      "runAfter": {
                        "Lookup_date_based_on_Timefencing_Seen_After": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date_ticks_time",
                            "type": "integer",
                            "value": "@ticks(variables('end_date'))"
                          }
                        ]
                      }
                    },
                    "Lookup_Start_Date_Ticks_Time": {
                      "runAfter": {
                        "Lookup_End_Date_Ticks_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date__ticks_time",
                            "type": "integer",
                            "value": "@ticks(variables('start_date'))"
                          }
                        ]
                      }
                    },
                    "Lookup_date_based_on_Timefencing_Seen_After": {
                      "runAfter": {
                        "Lookup_date_based_on_Timefencing_Seen_Before": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_12_Hours": {
                          "case": "12h",
                          "actions": {
                            "Set_end_date_12_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                              }
                            }
                          }
                        },
                        "Case_1_Hours": {
                          "case": "1h",
                          "actions": {
                            "Set_end_date_an_hour_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_24_Hours": {
                          "case": "24h",
                          "actions": {
                            "set_end_date_1_day_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_30_Days": {
                          "case": "30d",
                          "actions": {
                            "set_end_date_30_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                              }
                            }
                          }
                        },
                        "Case_365_Days": {
                          "case": "365d",
                          "actions": {
                            "set_end_date_365_days_back": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                              }
                            }
                          }
                        },
                        "Case_60_Days": {
                          "case": "60d",
                          "actions": {
                            "set_end_date_60_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                              }
                            }
                          }
                        },
                        "Case_6_Hours": {
                          "case": "6h",
                          "actions": {
                            "Set_end_date_6_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                              }
                            }
                          }
                        },
                        "Case_90_Days": {
                          "case": "90d",
                          "actions": {
                            "set_end_date_90_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "set_default_end_date_to_1_hour_before": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "start_date",
                              "value": "@{addHours(variables('incident_created_date'),-1)}"
                            }
                          }
                        }
                      },
                      "expression": "@variables('time_fencing_seen_after')",
                      "type": "Switch"
                    },
                    "Lookup_date_based_on_Timefencing_Seen_Before": {
                      "runAfter": {
                        "LookUp_End_Date": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_12_Hours": {
                          "case": "12h",
                          "actions": {
                            "Set_start_date_12_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                              }
                            }
                          }
                        },
                        "Case_1_Hours": {
                          "case": "1h",
                          "actions": {
                            "Set_start_date_an_hour_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_24_Hours": {
                          "case": "24h",
                          "actions": {
                            "set_start_date_1_day_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_30_Days": {
                          "case": "30d",
                          "actions": {
                            "set_start_date_30_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                              }
                            }
                          }
                        },
                        "Case_365_Days": {
                          "case": "365d",
                          "actions": {
                            "set_start_date_365_days_back": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                              }
                            }
                          }
                        },
                        "Case_60_Days": {
                          "case": "60d",
                          "actions": {
                            "set_start_date_60_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                              }
                            }
                          }
                        },
                        "Case_6_Hours": {
                          "case": "6h",
                          "actions": {
                            "Set_start_date_6_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                              }
                            }
                          }
                        },
                        "Case_90_Days": {
                          "case": "90d",
                          "actions": {
                            "set_start_date_90_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "set_default_start_date_to_1_day_before": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "end_date",
                              "value": "@{addDays(variables('incident_created_date'),-1)}"
                            }
                          }
                        }
                      },
                      "expression": "@variables('time_fencing_seen_before')",
                      "type": "Switch"
                    },
                    "RDATA_Unique_hosts_Array": {
                      "runAfter": {
                        "RDATA_hosts_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "rdata_hosts_unique",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "RDATA_hosts_Array": {
                      "runAfter": {
                        "Start_Date_epoch": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "rdata_hosts",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Start_Date_epoch": {
                      "runAfter": {
                        "End_Date_epoch": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date_epoch",
                            "type": "integer",
                            "value": "@div(sub(variables('start_date__ticks_time'),variables('ticks_1970_time')),10000000)"
                          }
                        ]
                      }
                    },
                    "Unique_Co_Located_IPs": {
                      "runAfter": {
                        "Co_Located_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_ips_unique",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "co_located_ip_address_output": {
                      "runAfter": {
                        "Unique_Co_Located_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_ip_address_output",
                            "type": "array",
                            "value": "@null"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "farsightdnsdb": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                        "connectionName": "[[variables('DomainToolsDNSDBConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]"
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId3'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId3')]",
                "contentId": "[variables('_playbookContentId3')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "DomainTools",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                }
              }
            }
          ],
          "metadata": {
            "title": "DomainTools DNSDB Co-Located IP Addresses",
            "description": "This playbook uses the Farsight DNSDB connector to automatically enrich IP Addresses found in the Microsoft Sentinel incidents. This lookup will identify all the IPs that are co-located (based on Domain) based on the Offense Source value. This would be set of IPs that also shared the same Domain as the originating IP address.",
            "prerequisites": "A DomainTools API Key provisioned for Iris Investigate. Visit https://www.domaintools.com/integrations to request a trial key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2024-06-27T00:00:00Z",
            "entities": [
              "ip"
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId3')]",
        "contentKind": "Playbook",
        "displayName": "DomainTools-DNSDB-Co-Located-IP-Addresses",
        "contentProductId": "[variables('_playbookcontentProductId3')]",
        "id": "[variables('_playbookcontentProductId3')]",
        "version": "[variables('playbookVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainTools-DNSDB-Co-Located-Hosts Playbook with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion4')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "DomainTools-DNSDB-Co-Located-Hosts",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            }
          },
          "variables": {
            "DomainToolsDNSDBConnectionName": "[[concat('domaintoolsdnsdb-', parameters('PlaybookName'))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('DomainToolsDNSDBConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('DomainToolsDNSDBConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "When_Azure_Sentinel_incident_creation_rule_was_triggered": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Co_Located_Hosts_": {
                      "runAfter": {
                        "RRSET_Unique_IPS_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_hosts",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Co_Located_Hosts_Array": {
                      "runAfter": {
                        "Unique_Co_Located_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_domains_array",
                            "type": "array",
                            "value": "@null"
                          }
                        ]
                      }
                    },
                    "DNS_Name_Variable": {
                      "runAfter": {
                        "Host_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "dns_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Domain_Name_Varibale": {
                      "runAfter": {
                        "DNS_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "domain_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "End_Date_epoch": {
                      "runAfter": {
                        "Get1970TimestampInTicks": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date_epoch",
                            "type": "integer",
                            "value": "@div(sub(variables('end_date_ticks_time'),variables('ticks_1970_time')),10000000)"
                          }
                        ]
                      }
                    },
                    "Entities_-_Get_DNS": {
                      "runAfter": {
                        "For_each_incident_host": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/dnsresolution"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "runAfter": {
                        "Co_Located_Hosts_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Filter_results_for_time_seen_after_relative_to_incident_date": {
                      "runAfter": {
                        "Incident_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "time_fencing_seen_after",
                            "type": "string",
                            "value": "90d"
                          }
                        ]
                      },
                      "description": "Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d (Default 1d)"
                    },
                    "Filter_results_for_time_seen_before_relative_to_incident_date": {
                      "runAfter": {
                        "Filter_results_for_time_seen_after_relative_to_incident_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "time_fencing_seen_before",
                            "type": "string",
                            "value": "1h"
                          }
                        ]
                      },
                      "description": "Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d(Default 1h)"
                    },
                    "For_each": {
                      "foreach": "@variables('incident_domains')",
                      "actions": {
                        "Check_if_co_located_domains_exist": {
                          "actions": {
                            "Add_co_located_domains_to_the_incident_comment": {
                              "runAfter": {
                                "Co_located_domains_table": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                  "message": "<p><span style=\"font-size: 12px\">DNSDB Co-Located Domains for Domain: </span><span style=\"font-size: 12px\">@{items('For_each')}</span><span style=\"font-size: 12px\">(From Date: </span><span style=\"font-size: 12px\">@{variables('start_date')}</span><span style=\"font-size: 12px\">, To Date: </span><span style=\"font-size: 12px\">@{variables('end_date')}</span><span style=\"font-size: 12px\">)</span><span style=\"font-size: 12px\"><strong>@{body('Co_located_domains_table')}</strong></span><span style=\"font-size: 12px\"><strong></strong></span><br>\n</p>"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                              }
                            },
                            "Co_located_domains_table": {
                              "type": "Table",
                              "inputs": {
                                "format": "HTML",
                                "from": "@variables('co_located_domains_array')"
                              }
                            }
                          },
                          "runAfter": {
                            "for_each_co_located_hosts": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_comment_to_incident_(V3)": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p>DNSDB Co-Located Domains for Domain: @{items('For_each')}(From Date: @{variables('start_date')}, To Date: @{variables('end_date')}) <br>\nNo Records Found</p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(variables('co_located_domains_array'))",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "For_each_RRSet_CNAME": {
                          "foreach": "@body('RRSet_Lookup_with_RRType_CNAME')",
                          "actions": {
                            "For_each_CNAME_RDATA": {
                              "foreach": "@items('For_each_RRSet_CNAME')?['rdata']",
                              "actions": {
                                "Append_to_array_variable": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "co_located_hosts",
                                    "value": "@items('For_each_CNAME_RDATA')"
                                  }
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "For_each_Unique_IPS": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_RRType_AAAA_Records": {
                          "foreach": "@body('RRSet_Lookup_with_RRType_AAAA_Records')",
                          "actions": {
                            "For_each_RDATA_AAAA_Records": {
                              "foreach": "@items('For_each_RRType_AAAA_Records')?['rdata']",
                              "actions": {
                                "RRSET_AAAA_IPS": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "IPS_Array",
                                    "value": "@items('For_each_RDATA_AAAA_Records')"
                                  }
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "For_each_RRType_A_Records": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_RRType_A_Records": {
                          "foreach": "@body('RRSet_Lookup_with_RRType_A_Records')",
                          "actions": {
                            "For_each_RDATA_A_Records": {
                              "foreach": "@items('For_each_RRType_A_Records')?['rdata']",
                              "actions": {
                                "RRSET_A_IPS": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "IPS_Array",
                                    "value": "@items('For_each_RDATA_A_Records')"
                                  }
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "Set_IP_Arrays_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_Unique_IPS": {
                          "foreach": "@variables('ips_array_unique')",
                          "actions": {
                            "For_each_RDATA": {
                              "foreach": "@body('RData_Lookup_with_RRType')",
                              "actions": {
                                "Co_Located_Hosts": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "co_located_hosts",
                                    "value": "@items('For_each_RDATA')?['rrname']"
                                  }
                                }
                              },
                              "runAfter": {
                                "RData_Lookup_with_RRType": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach"
                            },
                            "RData_Lookup_with_RRType": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/lookup/rdata/@{encodeURIComponent('ip')}/@{encodeURIComponent(items('For_each_Unique_IPS'))}/ANY",
                                "queries": {
                                  "limit": 10,
                                  "time_first_before": "@variables('end_date_epoch')",
                                  "time_last_after": "@variables('start_date_epoch')"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Set_Co_located_Hosts_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Get_Unique_Co_located_Hosts": {
                          "runAfter": {
                            "Set_Co_Located_Hosts_Unique_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "co_located_hosts_unique",
                            "value": "@union(variables('co_located_hosts'),variables('co_located_hosts'))"
                          }
                        },
                        "Get_Unique_IPS": {
                          "runAfter": {
                            "Set_Unique_IP_Array_to_empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ips_array_unique",
                            "value": "@union(variables('ips_array'),variables('ips_array'))"
                          }
                        },
                        "Join": {
                          "runAfter": {
                            "Get_Unique_Co_located_Hosts": [
                              "Succeeded"
                            ]
                          },
                          "type": "Join",
                          "inputs": {
                            "from": "@variables('co_located_hosts_unique')",
                            "joinWith": ",\n"
                          }
                        },
                        "RRSet_Lookup_with_RRType_AAAA_Records": {
                          "runAfter": {
                            "RRSet_Lookup_with_RRType_A_Records": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each'))}/@{encodeURIComponent('AAAA')}",
                            "queries": {
                              "limit": 10,
                              "time_first_before": "@variables('end_date_epoch')",
                              "time_last_after": "@variables('start_date_epoch')"
                            }
                          }
                        },
                        "RRSet_Lookup_with_RRType_A_Records": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each'))}/@{encodeURIComponent('A')}",
                            "queries": {
                              "limit": 10,
                              "time_first_before": "@variables('end_date_epoch')",
                              "time_last_after": "@variables('start_date_epoch')"
                            }
                          }
                        },
                        "RRSet_Lookup_with_RRType_CNAME": {
                          "runAfter": {
                            "RRSet_Lookup_with_RRType_AAAA_Records": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each'))}/@{encodeURIComponent('CNAME')}",
                            "queries": {
                              "limit": 10,
                              "time_first_before": "@variables('end_date_epoch')",
                              "time_last_after": "@variables('start_date_epoch')"
                            }
                          }
                        },
                        "Set_Co_Located_Hosts_Unique_to_Empty": {
                          "runAfter": {
                            "For_each_RRSet_CNAME": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "co_located_hosts_unique",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_Co_located_Hosts_to_Empty": {
                          "runAfter": {
                            "Get_Unique_IPS": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "co_located_hosts",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_IP_Arrays_to_Empty": {
                          "runAfter": {
                            "RRSet_Lookup_with_RRType_CNAME": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ips_array",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_Unique_IP_Array_to_empty": {
                          "runAfter": {
                            "For_each_RRType_AAAA_Records": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ips_array_unique",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_variable": {
                          "runAfter": {
                            "Join": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "co_located_domains_array",
                            "value": "@null"
                          }
                        },
                        "for_each_co_located_hosts": {
                          "foreach": "@variables('co_located_hosts_unique')",
                          "actions": {
                            "Append_to_co_located_domains_array_variable": {
                              "runAfter": {
                                "Co_located_hosts_compose": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "co_located_domains_array",
                                "value": "@outputs('Co_located_hosts_compose')"
                              }
                            },
                            "Co_located_hosts_compose": {
                              "type": "Compose",
                              "inputs": {
                                "Hosts": "@items('for_each_co_located_hosts')"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "For_each_incident_dns_domain": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_each_incident_dns_domain": {
                      "foreach": "@body('Entities_-_Get_DNS')?['Dnsresolutions']",
                      "actions": {
                        "append_dns_domain_to_domain_list": {
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "incident_domains",
                            "value": "@items('For_each_incident_dns_domain')?['DomainName']"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_DNS": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 2
                        }
                      }
                    },
                    "For_each_incident_host": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "Check_DNS_Name_is_empty": {
                          "actions": {
                            "Set_Domain_Name_with_DNS_Domain": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "domain_name",
                                "value": "@{variables('host_name')}.@{variables('dns_name')}"
                              }
                            }
                          },
                          "runAfter": {
                            "set_dns_name": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_Domain_Name_without_DNS_Domain": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "domain_name",
                                  "value": "@variables('host_name')"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@variables('dns_name')",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "add_hosts_to_domain_list": {
                          "runAfter": {
                            "Check_DNS_Name_is_empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "incident_domains",
                            "value": "@variables('domain_name')"
                          }
                        },
                        "set_dns_name": {
                          "runAfter": {
                            "set_host_name": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "dns_name",
                            "value": "@items('For_each_incident_host')?['DnsDomain']"
                          }
                        },
                        "set_host_name": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "host_name",
                            "value": "@items('For_each_incident_host')?['HostName']"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Get1970TimestampInTicks": {
                      "runAfter": {
                        "Lookup_Start_Date_Ticks_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ticks_1970_time",
                            "type": "integer",
                            "value": "@ticks('1970-01-01T00:00:00Z')"
                          }
                        ]
                      }
                    },
                    "Host_Name_Variable": {
                      "runAfter": {
                        "incident_domains": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "host_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Incident_Date": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_created_date",
                            "type": "string",
                            "value": "@triggerBody()?['object']?['properties']?['createdTimeUtc']"
                          }
                        ]
                      }
                    },
                    "LookUp_End_Date": {
                      "runAfter": {
                        "LookUp_Start_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "LookUp_Start_Date": {
                      "runAfter": {
                        "Filter_results_for_time_seen_before_relative_to_incident_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Lookup_End_Date_Ticks_Time": {
                      "runAfter": {
                        "Lookup_date_based_on_Timefencing_Seen_After": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date_ticks_time",
                            "type": "integer",
                            "value": "@ticks(variables('end_date'))"
                          }
                        ]
                      }
                    },
                    "Lookup_Start_Date_Ticks_Time": {
                      "runAfter": {
                        "Lookup_End_Date_Ticks_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date__ticks_time",
                            "type": "integer",
                            "value": "@ticks(variables('start_date'))"
                          }
                        ]
                      }
                    },
                    "Lookup_date_based_on_Timefencing_Seen_After": {
                      "runAfter": {
                        "Lookup_date_based_on_Timefencing_Seen_Before": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_12_Hours": {
                          "case": "12h",
                          "actions": {
                            "Set_end_date_12_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                              }
                            }
                          }
                        },
                        "Case_1_Hours": {
                          "case": "1h",
                          "actions": {
                            "Set_end_date_an_hour_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_24_Hours": {
                          "case": "24h",
                          "actions": {
                            "set_end_date_1_day_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_30_Days": {
                          "case": "30d",
                          "actions": {
                            "set_end_date_30_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                              }
                            }
                          }
                        },
                        "Case_365_Days": {
                          "case": "365d",
                          "actions": {
                            "set_end_date_365_days_back": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                              }
                            }
                          }
                        },
                        "Case_60_Days": {
                          "case": "60d",
                          "actions": {
                            "set_end_date_60_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                              }
                            }
                          }
                        },
                        "Case_6_Hours": {
                          "case": "6h",
                          "actions": {
                            "Set_end_date_6_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                              }
                            }
                          }
                        },
                        "Case_90_Days": {
                          "case": "90d",
                          "actions": {
                            "set_end_date_90_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "set_default_end_date_to_1_hour_before": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "start_date",
                              "value": "@{addHours(variables('incident_created_date'),-1)}"
                            }
                          }
                        }
                      },
                      "expression": "@variables('time_fencing_seen_after')",
                      "type": "Switch"
                    },
                    "Lookup_date_based_on_Timefencing_Seen_Before": {
                      "runAfter": {
                        "LookUp_End_Date": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_12_Hours": {
                          "case": "12h",
                          "actions": {
                            "Set_start_date_12_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                              }
                            }
                          }
                        },
                        "Case_1_Hours": {
                          "case": "1h",
                          "actions": {
                            "Set_start_date_an_hour_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_24_Hours": {
                          "case": "24h",
                          "actions": {
                            "set_start_date_1_day_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_30_Days": {
                          "case": "30d",
                          "actions": {
                            "set_start_date_30_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                              }
                            }
                          }
                        },
                        "Case_365_Days": {
                          "case": "365d",
                          "actions": {
                            "set_start_date_365_days_back": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                              }
                            }
                          }
                        },
                        "Case_60_Days": {
                          "case": "60d",
                          "actions": {
                            "set_start_date_60_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                              }
                            }
                          }
                        },
                        "Case_6_Hours": {
                          "case": "6h",
                          "actions": {
                            "Set_start_date_6_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                              }
                            }
                          }
                        },
                        "Case_90_Days": {
                          "case": "90d",
                          "actions": {
                            "set_start_date_90_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "set_default_start_date_to_1_day_before": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "end_date",
                              "value": "@{addDays(variables('incident_created_date'),-1)}"
                            }
                          }
                        }
                      },
                      "expression": "@variables('time_fencing_seen_before')",
                      "type": "Switch"
                    },
                    "RRSET_IPS_Array": {
                      "runAfter": {
                        "Domain_Name_Varibale": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ips_array",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "RRSET_Unique_IPS_Array": {
                      "runAfter": {
                        "RRSET_IPS_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ips_array_unique",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Start_Date_epoch": {
                      "runAfter": {
                        "End_Date_epoch": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date_epoch",
                            "type": "integer",
                            "value": "@div(sub(variables('start_date__ticks_time'),variables('ticks_1970_time')),10000000)"
                          }
                        ]
                      }
                    },
                    "Unique_Co_Located_Hosts": {
                      "runAfter": {
                        "Co_Located_Hosts_": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_hosts_unique",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "incident_domains": {
                      "runAfter": {
                        "Start_Date_epoch": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_domains",
                            "type": "array",
                            "value": "@null"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "farsightdnsdb": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                        "connectionName": "[[variables('DomainToolsDNSDBConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]"
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId4'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId4')]",
                "contentId": "[variables('_playbookContentId4')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "DomainTools",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                }
              }
            }
          ],
          "metadata": {
            "title": "DomainTools DNSDB Co-Located Hosts",
            "description": "This playbook uses the Farsight DNSDB connector to automatically enrich Domain's found in the Microsoft Sentinel incidents. This use case describes the desire to easily identify Hosts that are co-located (based on Address) based on the input of a domain and a given point in time. The response would be a set of domains that also shared the same IP address as the originating domain name at the given point in time.",
            "prerequisites": "A DomainTools API Key provisioned for Iris Investigate. Visit https://www.domaintools.com/integrations to request a trial key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2024-05-20T00:00:00Z",
            "entities": [
              "host",
              "dnsresolution"
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId4')]",
        "contentKind": "Playbook",
        "displayName": "DomainTools-DNSDB-Co-Located-Hosts",
        "contentProductId": "[variables('_playbookcontentProductId4')]",
        "id": "[variables('_playbookcontentProductId4')]",
        "version": "[variables('playbookVersion4')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainTools-DNSDB-Historical-IP-Addresses Playbook with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion5')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "DomainTools-DNSDB-Historical-IP-Addresses",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            }
          },
          "variables": {
            "DomainToolsDNSDBConnectionName": "[[concat('domaintoolsdnsdb-', parameters('PlaybookName'))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('DomainToolsDNSDBConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('DomainToolsDNSDBConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "When_Azure_Sentinel_incident_creation_rule_was_triggered": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Co_Located_Hosts_": {
                      "runAfter": {
                        "RRSET_Unique_IPS_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_hosts",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "DNS_Name_Variable": {
                      "runAfter": {
                        "Host_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "dns_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Domain_Name_Varibale": {
                      "runAfter": {
                        "DNS_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "domain_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "End_Date_epoch": {
                      "runAfter": {
                        "Get1970TimestampInTicks": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date_epoch",
                            "type": "integer",
                            "value": "@div(sub(variables('end_date_ticks_time'),variables('ticks_1970_time')),10000000)"
                          }
                        ]
                      }
                    },
                    "Entities_-_Get_DNS": {
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/dnsresolution"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "runAfter": {
                        "IPs_output_": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Filter_results_for_time_seen_after_relative_to_incident_date": {
                      "runAfter": {
                        "Incident_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "time_fencing_seen_after",
                            "type": "string",
                            "value": "90d"
                          }
                        ]
                      },
                      "description": "Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d"
                    },
                    "Filter_results_for_time_seen_before_relative_to_incident_date": {
                      "runAfter": {
                        "Filter_results_for_time_seen_after_relative_to_incident_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "time_fencing_seen_before",
                            "type": "string",
                            "value": "1h"
                          }
                        ]
                      },
                      "description": "Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d"
                    },
                    "For_each": {
                      "foreach": "@variables('incident_domains')",
                      "actions": {
                        "Check_historical_ips_exist": {
                          "actions": {
                            "Add_comment_to_incident_(V3)": {
                              "runAfter": {
                                "Historical_IPS_table": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                  "message": "<p><span style=\"font-size: 12px\">DNSDB Historical Address for Domain: </span><span style=\"font-size: 12px\">@{items('For_each')}</span><span style=\"font-size: 12px\">(From Date: </span><span style=\"font-size: 12px\">@{variables('start_date')}</span><span style=\"font-size: 12px\">, To Date: </span><span style=\"font-size: 12px\">@{variables('end_date')}</span><span style=\"font-size: 12px\">)</span><br>\n<span style=\"font-size: 16px\"></span><span style=\"font-size: 16px\">@{body('Historical_IPS_table')}</span><span style=\"font-size: 16px\"></span></p>"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                              }
                            },
                            "Historical_IPS_table": {
                              "type": "Table",
                              "inputs": {
                                "format": "HTML",
                                "from": "@variables('historical_ips_output')"
                              }
                            }
                          },
                          "runAfter": {
                            "For_each_IPS": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_comment_to_incident_(V3)_2": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p>DNSDB Historical Address for Domain: @{items('For_each')}(From Date: @{variables('start_date')}, To Date: @{variables('end_date')})<br>\n No Records Found</p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(variables('historical_ips_output'))",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "For_each_IPS": {
                          "foreach": "@variables('ips_array_unique')",
                          "actions": {
                            "Append_to_historical_ips_array_variable": {
                              "runAfter": {
                                "IPs_Compose": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "historical_ips_output",
                                "value": "@outputs('IPs_Compose')"
                              }
                            },
                            "IPs_Compose": {
                              "type": "Compose",
                              "inputs": {
                                "IP Address": "@items('For_each_IPS')"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_RRType_AAAA_Records": {
                          "foreach": "@body('RRSet_Lookup_with_RRType_AAAA_Records')",
                          "actions": {
                            "For_each_RDATA_AAAA_Records": {
                              "foreach": "@items('For_each_RRType_AAAA_Records')?['rdata']",
                              "actions": {
                                "RRSET_AAAA_IPS": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "IPS_Array",
                                    "value": "@items('For_each_RDATA_AAAA_Records')"
                                  }
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "For_each_RRType_A_Records": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_RRType_A_Records": {
                          "foreach": "@body('RRSet_Lookup_with_RRType_A_Records')",
                          "actions": {
                            "For_each_RDATA_A_Records": {
                              "foreach": "@items('For_each_RRType_A_Records')?['rdata']",
                              "actions": {
                                "RRSET_A_IPS": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "IPS_Array",
                                    "value": "@items('For_each_RDATA_A_Records')"
                                  }
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "runAfter": {
                            "Set_IPs_Array_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Get_Unique_IPS": {
                          "runAfter": {
                            "Set_Unique_IPS_Variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ips_array_unique",
                            "value": "@union(variables('ips_array'),variables('ips_array'))"
                          }
                        },
                        "Join": {
                          "runAfter": {
                            "Get_Unique_IPS": [
                              "Succeeded"
                            ]
                          },
                          "type": "Join",
                          "inputs": {
                            "from": "@variables('ips_array_unique')",
                            "joinWith": ",\n"
                          }
                        },
                        "RRSet_Lookup_with_RRType_AAAA_Records": {
                          "runAfter": {
                            "RRSet_Lookup_with_RRType_A_Records": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each'))}/@{encodeURIComponent('AAAA')}",
                            "queries": {
                              "limit": 10,
                              "time_first_before": "@variables('end_date_epoch')",
                              "time_last_after": "@variables('start_date_epoch')"
                            }
                          }
                        },
                        "RRSet_Lookup_with_RRType_A_Records": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/lookup/rrset/name/@{encodeURIComponent(items('For_each'))}/@{encodeURIComponent('A')}",
                            "queries": {
                              "limit": 10,
                              "time_first_before": "@variables('end_date_epoch')",
                              "time_last_after": "@variables('start_date_epoch')"
                            }
                          }
                        },
                        "Set_IPs_Array_to_Empty": {
                          "runAfter": {
                            "RRSet_Lookup_with_RRType_AAAA_Records": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ips_array",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_Unique_IPS_Variable": {
                          "runAfter": {
                            "For_each_RRType_AAAA_Records": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ips_array_unique",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_variable": {
                          "runAfter": {
                            "Join": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "historical_ips_output",
                            "value": "@null"
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_incident_dns_domain": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_each_incident_dns_domain": {
                      "foreach": "@body('Entities_-_Get_DNS')?['Dnsresolutions']",
                      "actions": {
                        "append_dns_domain_to_domain_list": {
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "incident_domains",
                            "value": "@items('For_each_incident_dns_domain')?['DomainName']"
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_incident_host": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_each_incident_host": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "Check_DNS_Name_is_empty": {
                          "actions": {
                            "Set_Domain_Name_with_DNS_Domain": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "domain_name",
                                "value": "@{variables('host_name')}.@{variables('dns_name')}"
                              }
                            }
                          },
                          "runAfter": {
                            "set_dns_name": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_Domain_Name_without_DNS_Domain": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "domain_name",
                                  "value": "@variables('host_name')"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@variables('dns_name')",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "add_hosts_to_domain_list": {
                          "runAfter": {
                            "Check_DNS_Name_is_empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "incident_domains",
                            "value": "@variables('domain_name')"
                          }
                        },
                        "set_dns_name": {
                          "runAfter": {
                            "set_host_name": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "dns_name",
                            "value": "@items('For_each_incident_host')?['DnsDomain']"
                          }
                        },
                        "set_host_name": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "host_name",
                            "value": "@items('For_each_incident_host')?['HostName']"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_DNS": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Get1970TimestampInTicks": {
                      "runAfter": {
                        "Lookup_Start_Date_Ticks_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ticks_1970_time",
                            "type": "integer",
                            "value": "@ticks('1970-01-01T00:00:00Z')"
                          }
                        ]
                      }
                    },
                    "Host_Name_Variable": {
                      "runAfter": {
                        "incident_domains": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "host_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "IPs_output_": {
                      "runAfter": {
                        "Unique_Co_Located_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "historical_ips_output",
                            "type": "array",
                            "value": "@null"
                          }
                        ]
                      }
                    },
                    "Incident_Date": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_created_date",
                            "type": "string",
                            "value": "@triggerBody()?['object']?['properties']?['createdTimeUtc']"
                          }
                        ]
                      }
                    },
                    "Lookup_End_Date": {
                      "runAfter": {
                        "Lookup_Start_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Lookup_End_Date_Ticks_Time": {
                      "runAfter": {
                        "Lookup_date_based_on_Timefencing_Seen_After": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date_ticks_time",
                            "type": "integer",
                            "value": "@ticks(variables('end_date'))"
                          }
                        ]
                      }
                    },
                    "Lookup_Start_Date": {
                      "runAfter": {
                        "Filter_results_for_time_seen_before_relative_to_incident_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Lookup_Start_Date_Ticks_Time": {
                      "runAfter": {
                        "Lookup_End_Date_Ticks_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date__ticks_time",
                            "type": "integer",
                            "value": "@ticks(variables('start_date'))"
                          }
                        ]
                      }
                    },
                    "Lookup_date_based_on_Timefencing_Seen_After": {
                      "runAfter": {
                        "Lookup_date_based_on_Timefencing_Seen_Before": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_12_Hours": {
                          "case": "12h",
                          "actions": {
                            "Set_end_date_12_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                              }
                            }
                          }
                        },
                        "Case_1_Hours": {
                          "case": "1h",
                          "actions": {
                            "Set_end_date_an_hour_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_24_Hours": {
                          "case": "24h",
                          "actions": {
                            "set_end_date_1_day_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_30_Days": {
                          "case": "30d",
                          "actions": {
                            "set_end_date_30_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                              }
                            }
                          }
                        },
                        "Case_365_Days": {
                          "case": "365d",
                          "actions": {
                            "set_end_date_365_days_back": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                              }
                            }
                          }
                        },
                        "Case_60_Days": {
                          "case": "60d",
                          "actions": {
                            "set_end_date_60_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                              }
                            }
                          }
                        },
                        "Case_6_Hours": {
                          "case": "6h",
                          "actions": {
                            "Set_end_date_6_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                              }
                            }
                          }
                        },
                        "Case_90_Days": {
                          "case": "90d",
                          "actions": {
                            "set_end_date_90_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "set_default_end_date_to_1_hour_before": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "start_date",
                              "value": "@{addHours(variables('incident_created_date'),-1)}"
                            }
                          }
                        }
                      },
                      "expression": "@variables('time_fencing_seen_after')",
                      "type": "Switch"
                    },
                    "Lookup_date_based_on_Timefencing_Seen_Before": {
                      "runAfter": {
                        "Lookup_End_Date": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_12_Hours": {
                          "case": "12h",
                          "actions": {
                            "Set_start_date_12_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                              }
                            }
                          }
                        },
                        "Case_1_Hours": {
                          "case": "1h",
                          "actions": {
                            "Set_start_date_an_hour_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_24_Hours": {
                          "case": "24h",
                          "actions": {
                            "set_start_date_1_day_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_30_Days": {
                          "case": "30d",
                          "actions": {
                            "set_start_date_30_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                              }
                            }
                          }
                        },
                        "Case_365_Days": {
                          "case": "365d",
                          "actions": {
                            "set_start_date_365_days_back": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                              }
                            }
                          }
                        },
                        "Case_60_Days": {
                          "case": "60d",
                          "actions": {
                            "set_start_date_60_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                              }
                            }
                          }
                        },
                        "Case_6_Hours": {
                          "case": "6h",
                          "actions": {
                            "Set_start_date_6_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                              }
                            }
                          }
                        },
                        "Case_90_Days": {
                          "case": "90d",
                          "actions": {
                            "set_start_date_90_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_date",
                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "set_default_start_date_to_1_day_before": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "end_date",
                              "value": "@{addDays(variables('incident_created_date'),-1)}"
                            }
                          }
                        }
                      },
                      "expression": "@variables('time_fencing_seen_before')",
                      "type": "Switch"
                    },
                    "RRSET_IPS_Array": {
                      "runAfter": {
                        "Domain_Name_Varibale": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ips_array",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "RRSET_Unique_IPS_Array": {
                      "runAfter": {
                        "RRSET_IPS_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ips_array_unique",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Start_Date_epoch": {
                      "runAfter": {
                        "End_Date_epoch": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date_epoch",
                            "type": "integer",
                            "value": "@div(sub(variables('start_date__ticks_time'),variables('ticks_1970_time')),10000000)"
                          }
                        ]
                      }
                    },
                    "Unique_Co_Located_Hosts": {
                      "runAfter": {
                        "Co_Located_Hosts_": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_hosts_unique",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "incident_domains": {
                      "runAfter": {
                        "Start_Date_epoch": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_domains",
                            "type": "array",
                            "value": "@null"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "farsightdnsdb": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                        "connectionName": "[[variables('DomainToolsDNSDBConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]"
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId5'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId5')]",
                "contentId": "[variables('_playbookContentId5')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "DomainTools",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                }
              }
            }
          ],
          "metadata": {
            "title": "DomainTools DNSDB Historical IP Addresses",
            "description": "This playbook uses the Farsight DNSDB connector to automatically enrich IP Addresses found in the Microsoft Sentinel incidents. This use case describes the desire to identify all Addresses used as DNS A records for a given Host based on a time window from a starting and stopping point in time. ",
            "prerequisites": "A DomainTools API Key provisioned for Iris Investigate. Visit https://www.domaintools.com/integrations to request a trial key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2024-06-27T00:00:00Z",
            "entities": [
              "host",
              "dnsresolution"
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId5')]",
        "contentKind": "Playbook",
        "displayName": "DomainTools-DNSDB-Historical-IP-Addresses",
        "contentProductId": "[variables('_playbookcontentProductId5')]",
        "id": "[variables('_playbookcontentProductId5')]",
        "version": "[variables('playbookVersion5')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName6')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainTools-DNSDB-Historical-Hosts Playbook with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion6')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "DomainTools-DNSDB-Historical-Hosts",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            }
          },
          "variables": {
            "DomainToolsDNSDBConnectionName": "[[concat('domaintoolsdnsdb-', parameters('PlaybookName'))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('DomainToolsDNSDBConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('DomainToolsDNSDBConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "When_Azure_Sentinel_incident_creation_rule_was_triggered": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Co_Located_IPs": {
                      "runAfter": {
                        "rdata_hosts_output_": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_ips",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "End_Date_epoch": {
                      "runAfter": {
                        "Get1970TimestampInTicks": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date_epoch",
                            "type": "integer",
                            "value": "@div(sub(variables('end_date_ticks_time'),variables('ticks_1970_time')),10000000)"
                          }
                        ]
                      }
                    },
                    "Entities_-_Get_IPs": {
                      "runAfter": {
                        "Unique_Co_Located_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "Filter_results_for_time_seen_after_relative_to_incident_date": {
                      "runAfter": {
                        "Incident_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "time_fencing_seen_after",
                            "type": "string",
                            "value": "90d"
                          }
                        ]
                      },
                      "description": "Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d"
                    },
                    "Filter_results_for_time_seen_before_relative_to_incident_date": {
                      "runAfter": {
                        "Filter_results_for_time_seen_after_relative_to_incident_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "time_fencing_seen_before",
                            "type": "string",
                            "value": "1h"
                          }
                        ]
                      },
                      "description": "Possible Values: 1h,6h,12h,24h, 30d, 60d,90d,365d"
                    },
                    "For_each": {
                      "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                      "actions": {
                        "For_each_RDATA_": {
                          "foreach": "@body('RData_Lookup_with_RRType')",
                          "actions": {
                            "Append_to_array_variable": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "rdata_hosts",
                                "value": "@items('For_each_RDATA_')?['rrname']"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_Rdata_Hosts_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Get_Uniquie_Hosts": {
                          "runAfter": {
                            "Set_Unique_Hosts_to_Empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "rdata_hosts_unique",
                            "value": "@union(variables('rdata_hosts'),variables('rdata_hosts'))"
                          }
                        },
                        "Join": {
                          "runAfter": {
                            "Get_Uniquie_Hosts": [
                              "Succeeded"
                            ]
                          },
                          "type": "Join",
                          "inputs": {
                            "from": "@variables('rdata_hosts_unique')",
                            "joinWith": ",\n"
                          }
                        },
                        "RData_Lookup_with_RRType": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/lookup/rdata/@{encodeURIComponent('ip')}/@{encodeURIComponent(items('For_each')?['Address'])}/ANY",
                            "queries": {
                              "limit": 10,
                              "time_first_before": "@variables('end_date_epoch')",
                              "time_last_after": "@variables('start_date_epoch')"
                            }
                          }
                        },
                        "Set_Rdata_Hosts_to_Empty": {
                          "runAfter": {
                            "RData_Lookup_with_RRType": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "rdata_hosts",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_Unique_Hosts_to_Empty": {
                          "runAfter": {
                            "For_each_RDATA_": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "rdata_hosts_unique",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        },
                        "Set_variable": {
                          "runAfter": {
                            "Join": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "rdata_hosts_output",
                            "value": "@null"
                          }
                        },
                        "check_if_historical_hosts_exists": {
                          "actions": {
                            "Add_comment_to_incident_(V3)": {
                              "runAfter": {
                                "Historical_Hosts_Table": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                  "message": "<p><span style=\"font-size: 12px\">DNSDB Historical Hosts for IP: </span><span style=\"font-size: 12px\">@{items('For_each')?['Address']}</span><span style=\"font-size: 12px\"> (From Date:</span><span style=\"font-size: 12px\">@{variables('start_date')}</span><span style=\"font-size: 12px\">, To Date:</span><span style=\"font-size: 12px\">@{variables('end_Date')}</span><span style=\"font-size: 12px\">)</span><span style=\"font-size: 16px\"><br>\n</span><span style=\"font-size: 16px\">@{body('Historical_Hosts_Table')}</span><span style=\"font-size: 16px\"></span></p>"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                              }
                            },
                            "Historical_Hosts_Table": {
                              "type": "Table",
                              "inputs": {
                                "format": "HTML",
                                "from": "@variables('rdata_hosts_output')"
                              }
                            }
                          },
                          "runAfter": {
                            "for_each_historical_hosts": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_comment_to_incident_(V3)_2": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p>DNSDB Historical Hosts for IP: @{items('For_each')?['Address']} (From Date:@{variables('start_date')}, To Date:@{variables('end_Date')})<br>\nNo Records Found</p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(variables('rdata_hosts_output'))",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "for_each_historical_hosts": {
                          "foreach": "@variables('rdata_hosts_unique')",
                          "actions": {
                            "Append_to_rdata_hosts_output_variable": {
                              "runAfter": {
                                "Historical_Hosts_Compose": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "rdata_hosts_output",
                                "value": "@outputs('Historical_Hosts_Compose')"
                              }
                            },
                            "Historical_Hosts_Compose": {
                              "type": "Compose",
                              "inputs": {
                                "Hosts": "@items('for_each_historical_hosts')"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Get1970TimestampInTicks": {
                      "runAfter": {
                        "Lookup_Start_Date_Ticks_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ticks_1970_time",
                            "type": "integer",
                            "value": "@ticks('1970-01-01T00:00:00Z')"
                          }
                        ]
                      }
                    },
                    "Incident_Date": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_created_date",
                            "type": "string",
                            "value": "@triggerBody()?['object']?['properties']?['createdTimeUtc']"
                          }
                        ]
                      }
                    },
                    "LookUp_End_Date": {
                      "runAfter": {
                        "Lookup_Start_Date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_Date",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Lookup_End_Date_Ticks_Time": {
                      "runAfter": {
                        "Lookup_date_based_on_Timefencing_Seen_After": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "end_date_ticks_time",
                            "type": "integer",
                            "value": "@ticks(variables('end_date'))"
                          }
                        ]
                      }
                    },
                    "Lookup_Start_Date": {
                      "runAfter": {
                        "Filter_results_for_time_seen_before_relative_to_incident_date": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Lookup_Start_Date_Ticks_Time": {
                      "runAfter": {
                        "Lookup_End_Date_Ticks_Time": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date__ticks_time",
                            "type": "integer",
                            "value": "@ticks(variables('start_date'))"
                          }
                        ]
                      }
                    },
                    "Lookup_date_based_on_Timefencing_Seen_After": {
                      "runAfter": {
                        "Lookup_date_based_on_Timefencing_Seen_Before": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_12_Hours": {
                          "case": "12h",
                          "actions": {
                            "Set_end_date_12_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                              }
                            }
                          }
                        },
                        "Case_1_Hours": {
                          "case": "1h",
                          "actions": {
                            "Set_end_date_an_hour_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_24_Hours": {
                          "case": "24h",
                          "actions": {
                            "set_end_date_1_day_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_30_Days": {
                          "case": "30d",
                          "actions": {
                            "set_end_date_30_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                              }
                            }
                          }
                        },
                        "Case_365_Days": {
                          "case": "365d",
                          "actions": {
                            "set_end_date_365_days_back": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                              }
                            }
                          }
                        },
                        "Case_60_Days": {
                          "case": "60d",
                          "actions": {
                            "set_end_date_60_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                              }
                            }
                          }
                        },
                        "Case_6_Hours": {
                          "case": "6h",
                          "actions": {
                            "Set_end_date_6_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                              }
                            }
                          }
                        },
                        "Case_90_Days": {
                          "case": "90d",
                          "actions": {
                            "set_end_date_90_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "start_date",
                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "set_default_end_date_to_1_hour_before": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "start_date",
                              "value": "@{addHours(variables('incident_created_date'),-1)}"
                            }
                          }
                        }
                      },
                      "expression": "@variables('time_fencing_seen_after')",
                      "type": "Switch"
                    },
                    "Lookup_date_based_on_Timefencing_Seen_Before": {
                      "runAfter": {
                        "LookUp_End_Date": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_12_Hours": {
                          "case": "12h",
                          "actions": {
                            "Set_start_date_12_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_Date",
                                "value": "@{addHours(variables('incident_created_date'),-12)}"
                              }
                            }
                          }
                        },
                        "Case_1_Hours": {
                          "case": "1h",
                          "actions": {
                            "Set_start_date_an_hour_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_Date",
                                "value": "@{addHours(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_24_Hours": {
                          "case": "24h",
                          "actions": {
                            "set_start_date_1_day_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_Date",
                                "value": "@{addDays(variables('incident_created_date'),-1)}"
                              }
                            }
                          }
                        },
                        "Case_30_Days": {
                          "case": "30d",
                          "actions": {
                            "set_start_date_30_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_Date",
                                "value": "@{addDays(variables('incident_created_date'),-30)}"
                              }
                            }
                          }
                        },
                        "Case_365_Days": {
                          "case": "365d",
                          "actions": {
                            "set_start_date_365_days_back": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_Date",
                                "value": "@{addDays(variables('incident_created_date'),-365)}"
                              }
                            }
                          }
                        },
                        "Case_60_Days": {
                          "case": "60d",
                          "actions": {
                            "set_start_date_60_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_Date",
                                "value": "@{addDays(variables('incident_created_date'),-60)}"
                              }
                            }
                          }
                        },
                        "Case_6_Hours": {
                          "case": "6h",
                          "actions": {
                            "Set_start_date_6_hours_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_Date",
                                "value": "@{addHours(variables('incident_created_date'),-6)}"
                              }
                            }
                          }
                        },
                        "Case_90_Days": {
                          "case": "90d",
                          "actions": {
                            "set_start_date_90_days_before": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "end_Date",
                                "value": "@{addDays(variables('incident_created_date'),-90)}"
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "set_default_start_date_to_1_day_before": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "end_Date",
                              "value": "@{addDays(variables('incident_created_date'),-1)}"
                            }
                          }
                        }
                      },
                      "expression": "@variables('time_fencing_seen_before')",
                      "type": "Switch"
                    },
                    "RDATA_Unique_hosts_Array": {
                      "runAfter": {
                        "RDATA_hosts_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "rdata_hosts_unique",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "RDATA_hosts_Array": {
                      "runAfter": {
                        "Start_Date_epoch": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "rdata_hosts",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Start_Date_epoch": {
                      "runAfter": {
                        "End_Date_epoch": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "start_date_epoch",
                            "type": "integer",
                            "value": "@div(sub(variables('start_date__ticks_time'),variables('ticks_1970_time')),10000000)"
                          }
                        ]
                      }
                    },
                    "Unique_Co_Located_IPs": {
                      "runAfter": {
                        "Co_Located_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "co_located_ips_unique",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "rdata_hosts_output_": {
                      "runAfter": {
                        "RDATA_Unique_hosts_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "rdata_hosts_output",
                            "type": "array",
                            "value": "@null"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "farsightdnsdb": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                        "connectionName": "[[variables('DomainToolsDNSDBConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]"
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId6'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId6')]",
                "contentId": "[variables('_playbookContentId6')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion6')]",
                "source": {
                  "kind": "Solution",
                  "name": "DomainTools",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                }
              }
            }
          ],
          "metadata": {
            "title": "DomainTools DNSDB Historical Hosts",
            "description": "This playbook uses the Farsight DNSDB connector to automatically enrich Domain's found in the Microsoft Sentinel incidents. This use case describes the desire to identify all Hosts that resolved to a given Address based on a time window from a starting and stopping point in time.",
            "prerequisites": "A DomainTools API Key provisioned for Iris Investigate. Visit https://www.domaintools.com/integrations to request a trial key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2024-06-27T00:00:00Z",
            "entities": [
              "ip"
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId6')]",
        "contentKind": "Playbook",
        "displayName": "DomainTools-DNSDB-Historical-Hosts",
        "contentProductId": "[variables('_playbookcontentProductId6')]",
        "id": "[variables('_playbookcontentProductId6')]",
        "version": "[variables('playbookVersion6')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName7')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainTools-IP-Address-Playbook Playbook with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion7')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "DomainTools-IP-Address-Playbook",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "FunctionAppName": {
              "defaultValue": "dtirisfuncapp",
              "type": "string"
            }
          },
          "variables": {
            "functionappName": "[[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Basic_compose_array": {
                      "runAfter": {
                        "Custom_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "basic_array",
                            "type": "array",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        ]
                      }
                    },
                    "Custom_Response": {
                      "runAfter": {
                        "ip_": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "custom_response",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Entities_-_Get_IPs": {
                      "runAfter": {
                        "whois_compose_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "For_each_IP": {
                      "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                      "actions": {
                        "Check_if_response_object_exists": {
                          "actions": {
                            "Add_Parsed_WhoIs_data_to_Incident_Comments": {
                              "runAfter": {
                                "Whois_Record_Table": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                  "message": "<p><strong>Parsed WhoIs Response for IP Address: </strong><strong>@{variables('ip_address')}</strong><strong></strong><strong>@{body('Whois_Record_Table')}</strong><strong></strong></p>"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                              }
                            },
                            "Add_basic_Parsed_WhoIs_data_to_Incident_Comments": {
                              "runAfter": {
                                "Basic_Compose_Tbale": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                  "message": "<p><strong>Parsed WhoIs Response for IP Address: </strong><strong>@{variables('ip_address')}</strong><strong></strong><strong>@{body('Basic_Compose_Tbale')}</strong><strong></strong></p>"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                              }
                            },
                            "Append_to_basic_array_variable": {
                              "runAfter": {
                                "Basic_Compose": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "basic_array",
                                "value": "@outputs('Basic_Compose')"
                              }
                            },
                            "Append_to_whois_array_variable": {
                              "runAfter": {
                                "Whois_Record_Compose": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "whois_array",
                                "value": "@outputs('Whois_Record_Compose')"
                              }
                            },
                            "Basic_Compose": {
                              "runAfter": {
                                "set_basic_array_to_null": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": {
                                "Record Source": "@body('ParsedWhois')?['record_source']",
                                "Registrant": "@body('ParsedWhois')?['registrant']",
                                "Source": "@body('ParsedWhois')?['source']"
                              }
                            },
                            "Basic_Compose_Tbale": {
                              "runAfter": {
                                "Append_to_basic_array_variable": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Table",
                              "inputs": {
                                "format": "HTML",
                                "from": "@variables('basic_array')"
                              }
                            },
                            "Check_if_Parsed_WhoIs_Contacts_records_Exits": {
                              "actions": {
                                "For_each_parsed_whois_contacts": {
                                  "foreach": "@body('ParsedWhois')?['parsed_whois_contacts']",
                                  "actions": {
                                    "Add_parsed_whois_contacts_to_incident_Comments": {
                                      "runAfter": {
                                        "Parsed_Whois_Contacts_table": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p><strong>Parsed WhoIs Contacts IP Address: </strong><strong>@{variables('ip_address')}</strong><strong></strong><strong>@{body('Parsed_Whois_Contacts_table')}</strong><strong></strong></p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "Parsed_Whois_Contacts_table": {
                                      "type": "Table",
                                      "inputs": {
                                        "format": "HTML",
                                        "from": "@items('For_each_parsed_whois_contacts')"
                                      }
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "runAfter": {
                                "Check_if_Parsed_WhoIs_Networks_records_Exits": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "greater": [
                                      "@length(body('ParsedWhois')?['parsed_whois_contacts'])",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Check_if_Parsed_WhoIs_Networks_records_Exits": {
                              "actions": {
                                "For_each_parsed_whois_networks": {
                                  "foreach": "@body('ParsedWhois')?['parsed_whois_networks']",
                                  "actions": {
                                    "Add_parsed_whois_networks_to_incident_Comments": {
                                      "runAfter": {
                                        "parsed_whois_networks_table": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p><strong>Parsed WhoIs Networks IP Address: </strong><strong>@{variables('ip_address')}</strong><strong></strong><strong>@{body('parsed_whois_networks_table')}</strong><strong></strong></p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "parsed_whois_networks_table": {
                                      "type": "Table",
                                      "inputs": {
                                        "format": "HTML",
                                        "from": "@items('For_each_parsed_whois_networks')"
                                      }
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "runAfter": {
                                "Add_Parsed_WhoIs_data_to_Incident_Comments": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "greater": [
                                      "@length(body('ParsedWhois')?['parsed_whois_networks'])",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Check_if_Parsed_WhoIs_routes_records_Exits": {
                              "actions": {
                                "for_each_whois_routes": {
                                  "foreach": "@body('ParsedWhois')?['parsed_whois_routes']",
                                  "actions": {
                                    "Add_parsed_whois_routes_data_to_incident_comments": {
                                      "runAfter": {
                                        "Parsed_Whois_Routes_table": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p><strong>Parsed WhoIs Routes for IP Address: </strong><strong>@{variables('ip_address')}</strong><strong></strong><strong>@{body('Parsed_Whois_Routes_table')}</strong><strong></strong></p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "Parsed_Whois_Routes_table": {
                                      "type": "Table",
                                      "inputs": {
                                        "format": "HTML",
                                        "from": "@items('for_each_whois_routes')"
                                      }
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "runAfter": {
                                "Check_if_Parsed_WhoIs_Contacts_records_Exits": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "greater": [
                                      "@length(body('ParsedWhois')?['parsed_whois_routes'])",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Check_if_Parsed_Whois_other_properties": {
                              "actions": {
                                "for_each_parsed_whois_other_properties": {
                                  "foreach": "@body('ParsedWhois')?['parsed_whois_other_properties']",
                                  "actions": {
                                    "Add_comment_to_incident_(V3)": {
                                      "runAfter": {
                                        "parsed_whois_other_properties_table": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p><strong>Parsed WhoIs Referral Servers for IP Address: </strong><strong>@{variables('ip_address')}</strong><strong></strong><strong>@{body('parsed_whois_other_properties_table')}</strong><strong></strong></p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "parsed_whois_other_properties_table": {
                                      "type": "Table",
                                      "inputs": {
                                        "format": "HTML",
                                        "from": "@items('for_each_parsed_whois_other_properties')"
                                      }
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "runAfter": {
                                "Check_if_Parsed_Whois_reffereral_servers_exists": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "greater": [
                                      "@length(body('ParsedWhois')?['parsed_whois_other_properties'])",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Check_if_Parsed_Whois_reffereral_servers_exists": {
                              "actions": {
                                "for_each_parsed_whois_referral_servers": {
                                  "foreach": "@body('ParsedWhois')?['parsed_whois_referral_servers']",
                                  "actions": {
                                    "Add_refferral_servers_comments_to_incident_comments": {
                                      "runAfter": {
                                        "parsed_whois_refferal_servers_table": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p><strong>Parsed WhoIs Referral Servers for IP Address: </strong><strong>@{variables('ip_address')}</strong><strong></strong><strong>@{body('parsed_whois_refferal_servers_table')}</strong><strong></strong></p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "parsed_whois_refferal_servers_table": {
                                      "type": "Table",
                                      "inputs": {
                                        "format": "HTML",
                                        "from": "@items('for_each_parsed_whois_referral_servers')"
                                      }
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "runAfter": {
                                "Check_if_Parsed_WhoIs_routes_records_Exits": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@length(body('ParsedWhois')?['parsed_whois_referral_servers'])",
                                      ""
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Whois_Record_Compose": {
                              "runAfter": {
                                "Add_basic_Parsed_WhoIs_data_to_Incident_Comments": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": {
                                "WhoIs Date": "@body('ParsedWhois')?['whois_date']",
                                "WhoIs Record": "@body('ParsedWhois')?['whois_record']"
                              }
                            },
                            "Whois_Record_Table": {
                              "runAfter": {
                                "Append_to_whois_array_variable": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Table",
                              "inputs": {
                                "format": "HTML",
                                "from": "@variables('whois_array')"
                              }
                            },
                            "set_basic_array_to_null": {
                              "runAfter": {
                                "set_whois_array_to_null": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "basic_array",
                                "value": "@null"
                              }
                            },
                            "set_whois_array_to_null": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "whois_array",
                                "value": "@null"
                              }
                            }
                          },
                          "runAfter": {
                            "ParsedWhois": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('ParsedWhois')",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "ParsedWhois": {
                          "runAfter": {
                            "Set_IP_Variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "from_playbook": "@true",
                              "query": "@variables('ip_address')"
                            },
                            "function": {
                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/ParsedWhois')]"
                            }
                          }
                        },
                        "Set_IP_Variable": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ip_address",
                            "value": "@items('For_each_IP')?['Address']"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "ip_": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ip_address",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "whois_compose_array": {
                      "runAfter": {
                        "Basic_compose_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "whois_array",
                            "type": "array",
                            "value": "[variables('TemplateEmptyArray')]"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId7'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId7')]",
                "contentId": "[variables('_playbookContentId7')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion7')]",
                "source": {
                  "kind": "Solution",
                  "name": "DomainTools",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_DomainTools_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "IP Enrichment - DomainTools Parsed Whois",
            "description": "This playbook uses the DomainTools Parsed Whois API. Given a ip address or set of ip addresses associated with an incident, return Whois information data for the extracted ip addresess as comments to the incident.",
            "prerequisites": "A DomainTools API Key provisioned for Iris Investigate. Visit https://www.domaintools.com/integrations to request a trial key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2024-06-27T00:00:00Z",
            "entities": [
              "ip"
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId7')]",
        "contentKind": "Playbook",
        "displayName": "DomainTools-IP-Address-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId7')]",
        "id": "[variables('_playbookcontentProductId7')]",
        "version": "[variables('playbookVersion7')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName8')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainTools-Iris-Enrich-Playbook Playbook with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion8')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "DomainTools-Iris-Enrich-Playbook",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "FunctionAppName": {
              "defaultValue": "dtirisfuncapp",
              "type": "string"
            }
          },
          "variables": {
            "functionappName": "[[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Check_if_we_got_entitites": {
                      "actions": {
                        "Check_if_the_response_is_successful": {
                          "actions": {
                            "For_each_response": {
                              "foreach": "@variables('custom_response')",
                              "actions": {
                                "Add_Iris_Enrich_Table_to_Incident_Comments": {
                                  "runAfter": {
                                    "Customized_Table": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p><strong>Iris Enrich results for Domain: </strong><strong>@{variables('domain_name')}</strong><strong></strong><strong>@{body('Customized_Table')}</strong><strong></strong></p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Customized_Table": {
                                  "runAfter": {
                                    "Set_Domain_Value": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Table",
                                  "inputs": {
                                    "format": "HTML",
                                    "from": "@items('For_each_response')['custom_table']"
                                  }
                                },
                                "Set_Domain_Value": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "domain_name",
                                    "value": "@{items('For_each_response')['domain']}"
                                  }
                                }
                              },
                              "runAfter": {
                                "Set_Playbook_Response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Set_Playbook_Response": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "custom_response",
                                "value": "@body('EnrichDomain')['custom_response']"
                              }
                            }
                          },
                          "runAfter": {
                            "EnrichDomain": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_to_Incident_Comments": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p><strong>Error Message:: </strong><strong>@{body('EnrichDomain')['respone']['error']['message']}</strong><strong></strong></p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(body('EnrichDomain')['custom_response'])",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "EnrichDomain": {
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "domain": "@variables('domains_list')",
                              "from_playbook": "@true"
                            },
                            "function": {
                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/EnrichDomain')]"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_DNS": [
                          "Succeeded"
                        ],
                        "For_each_URL": [
                          "Succeeded"
                        ],
                        "for_each_host_object": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('domains_list'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "DNS_Name_Variable": {
                      "runAfter": {
                        "Host_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "dns_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Domain_Name_Variable": {
                      "runAfter": {
                        "DNS_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "domain_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Entities_-_Get_DNS": {
                      "runAfter": {
                        "Playbook_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/dnsresolution"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "runAfter": {
                        "Playbook_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Entities_-_Get_URLs": {
                      "runAfter": {
                        "Playbook_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/url"
                      }
                    },
                    "For_each_DNS": {
                      "foreach": "@body('Entities_-_Get_DNS')?['Dnsresolutions']",
                      "actions": {
                        "Add_Dns_Domain_to_Domains_List": {
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "domains_list",
                            "value": "@items('For_each_DNS')?['DomainName']"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_DNS": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_URL": {
                      "foreach": "@body('Entities_-_Get_URLs')?['URLs']",
                      "actions": {
                        "Add_Urls_to_domains_list": {
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "domains_list",
                            "value": "@items('For_each_URL')"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_URLs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Host_Name_Variable": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "host_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "List_Of_Domains": {
                      "runAfter": {
                        "URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "domains_list",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "List_Of_Urls": {
                      "runAfter": {
                        "List_Of_Domains": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "urls_list",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Playbook_Response": {
                      "runAfter": {
                        "List_Of_Urls": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "custom_response",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "URL": {
                      "runAfter": {
                        "Domain_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "url",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "for_each_host_object": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "Append_host_domain_names_to_Domain_list": {
                          "runAfter": {
                            "Check_DNS_Name_is_empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "domains_list",
                            "value": "@variables('domain_name')"
                          }
                        },
                        "Check_DNS_Name_is_empty": {
                          "actions": {
                            "Set_Domain_Name_with_DNS_Domain": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "domain_name",
                                "value": "@{variables('host_name')}.@{variables('dns_name')}"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_DNS_Name_Variable": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_Domain_Name_without_DNS_Domain": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "domain_name",
                                  "value": "@variables('host_name')"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@variables('dns_name')",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Set_DNS_Name_Variable": {
                          "runAfter": {
                            "Set_Host_Name_Variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "dns_name",
                            "value": "@items('for_each_host_object')?['DnsDomain']"
                          }
                        },
                        "Set_Host_Name_Variable": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "host_name",
                            "value": "@items('for_each_host_object')?['HostName']"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId8'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId8')]",
                "contentId": "[variables('_playbookContentId8')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion8')]",
                "source": {
                  "kind": "Solution",
                  "name": "DomainTools",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_DomainTools_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "Domain Enrichment - DomainTools Iris Enrich",
            "description": "Given a domain or set of domains associated with an incident return all Iris Enrich data for those domains as comments in the incident.",
            "prerequisites": "A DomainTools API Key provisioned for Iris Enrich. Visit https://www.domaintools.com/integrations to request a trial key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2024-06-27T00:00:00Z",
            "entities": [
              "host",
              "dnsresolution",
              "url"
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId8')]",
        "contentKind": "Playbook",
        "displayName": "DomainTools-Iris-Enrich-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId8')]",
        "id": "[variables('_playbookcontentProductId8')]",
        "version": "[variables('playbookVersion8')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName9')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainTools-Iris-Investigate-Playbook Playbook with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion9')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "DomainTools-Iris-Investigate-Playbook",
              "type": "string",
              "metadata": {
                "description": "Name of the Logic App/Playbook"
              }
            },
            "FunctionAppName": {
              "defaultValue": "dtirisfuncapp",
              "type": "string",
              "metadata": {
                "description": "Name of the FunctionApp"
              }
            }
          },
          "variables": {
            "functionappName": "[[concat(toLower(parameters('FunctionAppName')), take(uniqueString(resourceGroup().id), 3))]",
            "DomainToolsDNSDBConnectionName": "[[concat('domaintoolsdnsdb-', parameters('PlaybookName'))]",
            "AzureSentinelConnectionName": "[[concat('azuresentinel-', parameters('PlaybookName'))]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('DomainToolsDNSDBConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('DomainToolsDNSDBConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "Fetch_Guided_Pivots_Results": {
                      "defaultValue": false,
                      "type": "Bool"
                    },
                    "Pivot_Threshold": {
                      "defaultValue": 200,
                      "type": "Int"
                    },
                    "Find_Domains_With_Malicious_tags": {
                      "defaultValue": [
                        "test_tag",
                        "test_tag1"
                      ],
                      "type": "Array"
                    },
                    "Fetch_DomainTools_DNSDB_Results": {
                      "defaultValue": false,
                      "type": "Bool"
                    },
                    "DomainTools_DNSDB_Results_Count": {
                      "defaultValue": 10,
                      "type": "Int"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Check_if_got_entities": {
                      "actions": {
                        "Check_if_farsigt_DNSDB_": {
                          "actions": {
                            "For_each_domain_list": {
                              "foreach": "@variables('domains_list')",
                              "actions": {
                                "Check_if_Rdata_records_exists": {
                                  "actions": {
                                    "Add_RData_comment_to_incident_(V3)": {
                                      "runAfter": {
                                        "check_if_dnsdb_results_are_greater_than_the_set_parameter": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p><strong>DomainTools DNSDB RData Results for Domain </strong><strong>@{items('For_each_domain_list')}</strong><strong>:<br>\n</strong><strong>@{variables('dnsdb_results_string')}</strong><strong></strong><strong>@{replace(replace(replace(body('DNSDB_Table') , '&quot;', ''),']','') , '[', '')}</strong><strong></strong></p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "DNSDB_Table": {
                                      "runAfter": {
                                        "For_each": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Table",
                                      "inputs": {
                                        "format": "HTML",
                                        "from": "@reverse(sort(variables('rdtaa_output_array'),'Last Seen'))"
                                      }
                                    },
                                    "For_each": {
                                      "foreach": "@body('RData_Lookup_with_RRType')",
                                      "actions": {
                                        "Condition": {
                                          "actions": {
                                            "Append_to_rdara_array_variable_1": {
                                              "runAfter": {
                                                "DNSDB_Compose_1": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "AppendToArrayVariable",
                                              "inputs": {
                                                "name": "rdtaa_output_array",
                                                "value": "@outputs('DNSDB_Compose_1')"
                                              }
                                            },
                                            "DNSDB_Compose_1": {
                                              "type": "Compose",
                                              "inputs": {
                                                "Count": "@items('For_each')?['count']",
                                                "First Seen": "@items('For_each')?['time_first']",
                                                "Last Seen": "@items('For_each')?['time_last']",
                                                "RRName": "@items('For_each')?['rrname']",
                                                "Rdata": "@items('For_each')?['rdata']",
                                                "Record Type": "@items('For_each')?['rrtype']"
                                              }
                                            }
                                          },
                                          "else": {
                                            "actions": {
                                              "Append_to_rdara_array_variable_2": {
                                                "runAfter": {
                                                  "DNSDB_Compose_2": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                  "name": "rdtaa_output_array",
                                                  "value": "@outputs('DNSDB_Compose_2')"
                                                }
                                              },
                                              "DNSDB_Compose_2": {
                                                "type": "Compose",
                                                "inputs": {
                                                  "Count": "@items('For_each')?['count']",
                                                  "First Seen": "@items('For_each')?['zone_time_first']",
                                                  "Last Seen": "@items('For_each')?['zone_time_last']",
                                                  "RRName": "@items('For_each')?['rrname']",
                                                  "Rdata": "@items('For_each')?['rdata']",
                                                  "Record Type": "@items('For_each')?['rrtype']"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "not": {
                                                  "equals": [
                                                    "@items('For_each')?['time_first']",
                                                    "@null"
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      },
                                      "type": "Foreach"
                                    },
                                    "check_if_dnsdb_results_are_greater_than_the_set_parameter": {
                                      "actions": {
                                        "set_dnsdb_results_string": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "dnsdb_results_string",
                                            "value": "Showing first  @{variables('dnsdb_results_count')}  records "
                                          }
                                        }
                                      },
                                      "runAfter": {
                                        "DNSDB_Table": [
                                          "Succeeded"
                                        ]
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "greater": [
                                              "@length(variables('rdtaa_output_array'))",
                                              "@variables('dnsdb_results_count')"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "runAfter": {
                                    "Set_rdata_output_variable_to_empty": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "greater": [
                                          "@length(body('RData_Lookup_with_RRType'))",
                                          0
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "RData_Lookup_with_RRType": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
                                      }
                                    },
                                    "method": "get",
                                    "path": "/lookup/rdata/name/@{encodeURIComponent(items('For_each_domain_list'))}/ANY",
                                    "queries": {
                                      "humantime": true,
                                      "limit": "@variables('dnsdb_results_count')"
                                    }
                                  }
                                },
                                "Set_rdata_output_variable_to_empty": {
                                  "runAfter": {
                                    "RData_Lookup_with_RRType": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "rdtaa_output_array",
                                    "value": "@null"
                                  }
                                }
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Check_if_the_response_is_successful": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@variables('farsight_dnsdb')",
                                  "@true"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Check_if_the_response_is_successful": {
                          "actions": {
                            "For_each_response": {
                              "foreach": "@variables('customized_response')",
                              "actions": {
                                "Add_Iris_Investigate_Table_to_Incident_Comments": {
                                  "runAfter": {
                                    "Set_Damain_Value": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "incidentArmId": "@triggerBody()?['object']?['id']",
                                      "message": "<p><strong>Iris Investigate results for Domain: </strong><strong>@{variables('domain_name')}</strong><strong></strong><strong>@{replace(replace(body('Customized_Table'), '&lt;', '<'), '&gt;', '>')}</strong><strong></strong></p>"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/Incidents/Comment"
                                  }
                                },
                                "Check_Custom_Pivot_response_exists": {
                                  "actions": {
                                    "For_each_pivot": {
                                      "foreach": "@items('For_each_response')['pivot']",
                                      "actions": {
                                        "Add_Pivoting_Data_to_Incident_Comments": {
                                          "runAfter": {
                                            "Create_Pivot_Table": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "ApiConnection",
                                          "inputs": {
                                            "body": {
                                              "incidentArmId": "@triggerBody()?['object']?['id']",
                                              "message": "<p><strong>Pivot Results for </strong><strong>@{variables('pivot_type')}</strong><strong>:</strong><strong>@{variables('pivot_value')}</strong><strong> for domain:</strong><strong>@{variables('domain_name')}</strong><strong></strong><strong>@{body('Create_Pivot_Table')}</strong><strong></strong></p>"
                                            },
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                              }
                                            },
                                            "method": "post",
                                            "path": "/Incidents/Comment"
                                          }
                                        },
                                        "Create_Pivot_Table": {
                                          "runAfter": {
                                            "Set_Pivot_Value": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Table",
                                          "inputs": {
                                            "format": "HTML",
                                            "from": "@items('For_each_pivot')['pivot_results']"
                                          }
                                        },
                                        "Set_Pivot_Type": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "pivot_type",
                                            "value": "@{items('For_each_pivot')['pivot_type']}"
                                          }
                                        },
                                        "Set_Pivot_Value": {
                                          "runAfter": {
                                            "Set_Pivot_Type": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "pivot_value",
                                            "value": "@{items('For_each_pivot')['pivot_value']}"
                                          }
                                        }
                                      },
                                      "type": "Foreach"
                                    }
                                  },
                                  "runAfter": {
                                    "Add_Iris_Investigate_Table_to_Incident_Comments": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@items('For_each_response')?['pivot']",
                                            "@null"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Check_if_Malicious_Tags_exist": {
                                  "actions": {
                                    "Add_Malicious_tags_to_Incident": {
                                      "runAfter": {
                                        "set_domain_malicious_tags": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p><strong>Malicious Tags:</strong><strong>@{variables('domain_malicious_tags')}</strong><strong>  found for domain: </strong><strong>@{variables('domain_name')}</strong><strong>&nbsp;</strong></p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "Update_incident": {
                                      "runAfter": {
                                        "Add_Malicious_tags_to_Incident": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "severity": "High",
                                          "tagsToAdd": {
                                            "TagsToAdd": [
                                              {
                                                "Tag": "Malicious Tags: @{variables('domain_malicious_tags')}"
                                              }
                                            ]
                                          }
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "put",
                                        "path": "/Incidents"
                                      }
                                    },
                                    "set_domain_malicious_tags": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "domain_malicious_tags",
                                        "value": "@join(items('For_each_response')?['malicious_tags'],',')"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Check_Custom_Pivot_response_exists": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "greater": [
                                          "@length(items('For_each_response')?['malicious_tags'])",
                                          0
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Customized_Table": {
                                  "type": "Table",
                                  "inputs": {
                                    "format": "HTML",
                                    "from": "@items('For_each_response')['custom_table']"
                                  }
                                },
                                "Set_Damain_Value": {
                                  "runAfter": {
                                    "Customized_Table": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "domain_name",
                                    "value": "@{items('For_each_response')['domain']}"
                                  }
                                }
                              },
                              "runAfter": {
                                "Ser_Playbook_Response": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "runtimeConfiguration": {
                                "concurrency": {
                                  "repetitions": 1
                                }
                              }
                            },
                            "Ser_Playbook_Response": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "customized_response",
                                "value": "@body('InvestigateDomain')['custom_response']"
                              }
                            }
                          },
                          "runAfter": {
                            "InvestigateDomain": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Add_Error_to_Incident_Comments": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p><strong>Error Message: </strong><strong>@{body('InvestigateDomain')['respone']['error']['message']}</strong><strong></strong><br>\n<br>\n</p>"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Incidents/Comment"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@length(body('InvestigateDomain')['custom_response'])",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "InvestigateDomain": {
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "domain": "@variables('domains_list')",
                              "from_playbook": "@true",
                              "guided_pivots": "@parameters('Fetch_Guided_Pivots_Results')",
                              "malicious_tags": "@parameters('Find_Domains_With_Malicious_tags')",
                              "max_pivot": "@parameters('Pivot_Threshold')"
                            },
                            "function": {
                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('Functionappname'), '/functions/InvestigateDomain')]"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "For_each_DNS": [
                          "Succeeded"
                        ],
                        "For_each_URL": [
                          "Succeeded"
                        ],
                        "for_each_host_object": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('domains_list'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "DNS_Name_Variable": {
                      "runAfter": {
                        "Host_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "dns_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Domain_Name_Variable": {
                      "runAfter": {
                        "DNS_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "domain_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Entities_-_Get_DNS": {
                      "runAfter": {
                        "Pivot_Value": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/dnsresolution"
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "runAfter": {
                        "Pivot_Value": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Entities_-_Get_URLs": {
                      "runAfter": {
                        "Pivot_Value": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/url"
                      }
                    },
                    "For_each_DNS": {
                      "foreach": "@body('Entities_-_Get_DNS')?['Dnsresolutions']",
                      "actions": {
                        "Add_Dnd_Domain_to_Domains_List": {
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "domains_list",
                            "value": "@items('For_each_DNS')?['DomainName']"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_DNS": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_URL": {
                      "foreach": "@body('Entities_-_Get_URLs')?['URLs']",
                      "actions": {
                        "Add_URLS_to_Domain_list": {
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "domains_list",
                            "value": "@items('For_each_URL')"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_URLs": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Host_Name_Variable": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "host_name",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "List_Of_Domains": {
                      "runAfter": {
                        "URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "domains_list",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Pivot_Type": {
                      "runAfter": {
                        "Playbook_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "pivot_type",
                            "type": "string",
                            "value": "@{null}"
                          }
                        ]
                      }
                    },
                    "Pivot_Value": {
                      "runAfter": {
                        "Pivot_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "pivot_value",
                            "type": "string",
                            "value": "@{null}"
                          }
                        ]
                      }
                    },
                    "Playbook_Response": {
                      "runAfter": {
                        "domain_malicious_tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "customized_response",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "RRSet_array": {
                      "runAfter": {
                        "Rdata_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "rrset_output_array",
                            "type": "array",
                            "value": "@null"
                          }
                        ]
                      }
                    },
                    "Rdata_array": {
                      "runAfter": {
                        "dnsdb_results_string": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "rdtaa_output_array",
                            "type": "array",
                            "value": "@null"
                          }
                        ]
                      }
                    },
                    "URL": {
                      "runAfter": {
                        "Domain_Name_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "url",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "dnsdb_results_count": {
                      "runAfter": {
                        "farsight_dnddb": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "dnsdb_results_count",
                            "type": "integer",
                            "value": "@parameters('DomainTools_DNSDB_Results_Count')"
                          }
                        ]
                      }
                    },
                    "dnsdb_results_string": {
                      "runAfter": {
                        "dnsdb_results_count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "dnsdb_results_string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "domain_malicious_tags": {
                      "runAfter": {
                        "malicious_tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "domain_malicious_tags",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "farsight_dnddb": {
                      "runAfter": {
                        "guided_pivots": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "farsight_dnsdb",
                            "type": "boolean",
                            "value": "@parameters('Fetch_DomainTools_DNSDB_Results')"
                          }
                        ]
                      }
                    },
                    "for_each_host_object": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "Append_host_domain_names_to_Domain_list": {
                          "runAfter": {
                            "Check_DNS_Name_is_empty": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "domains_list",
                            "value": "@variables('domain_name')"
                          }
                        },
                        "Check_DNS_Name_is_empty": {
                          "actions": {
                            "Set_Domain_Name_with_DNS_Domain": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "domain_name",
                                "value": "@{variables('host_name')}.@{variables('dns_name')}"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_DNS_Name_Variable": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_Domain_Name_without_DNS_Domain": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "domain_name",
                                  "value": "@variables('host_name')"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@variables('dns_name')",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Set_DNS_Name_Variable": {
                          "runAfter": {
                            "Set_Host_Name_Variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "dns_name",
                            "value": "@items('for_each_host_object')?['DnsDomain']"
                          }
                        },
                        "Set_Host_Name_Variable": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "host_name",
                            "value": "@items('for_each_host_object')?['HostName']"
                          }
                        }
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "guided_pivots": {
                      "runAfter": {
                        "List_Of_Domains": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "guided_pivots",
                            "type": "boolean",
                            "value": "@parameters('Fetch_Guided_Pivots_Results')"
                          }
                        ]
                      }
                    },
                    "malicious_tags": {
                      "runAfter": {
                        "max_pivot": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "malicious_tags",
                            "type": "array",
                            "value": "@parameters('Find_Domains_With_Malicious_tags')"
                          }
                        ]
                      }
                    },
                    "max_pivot": {
                      "runAfter": {
                        "RRSet_array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "max_pivot",
                            "type": "integer",
                            "value": "@parameters('Pivot_Threshold')"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "farsightdnsdb": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('DomainToolsDNSDBConnectionName'))]",
                        "connectionName": "[[variables('DomainToolsDNSDBConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/farsightdnsdb')]"
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId9'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId9')]",
                "contentId": "[variables('_playbookContentId9')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion9')]",
                "source": {
                  "kind": "Solution",
                  "name": "DomainTools",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_DomainTools_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "Domain Enrichment - DomainTools Iris Investigate",
            "description": "Given a domain or set of domains associated with an incident return all Iris Investigate data for those domains as comments in the incident.",
            "prerequisites": "A DomainTools API Key provisioned for Iris Investigate. Visit https://www.domaintools.com/integrations to request a trial key.",
            "postDeploymentSteps": [
              "None"
            ],
            "lastUpdateTime": "2024-06-27T00:00:00Z",
            "entities": [
              "host",
              "dnsresolution",
              "url"
            ],
            "tags": [
              "Enrichment"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId9')]",
        "contentKind": "Playbook",
        "displayName": "DomainTools-Iris-Investigate-Playbook",
        "contentProductId": "[variables('_playbookcontentProductId9')]",
        "id": "[variables('_playbookcontentProductId9')]",
        "version": "[variables('playbookVersion9')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject1').parserTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainToolsDNS Data Parser with template version 3.0.2",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject1').parserVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject1')._parserName1]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "DomainTools ASIM DNS Schema",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "DomainToolsDNSActivity",
                "query": "DomainToolsDomainEnrichment_CL\n| extend EventVendor = \"DomainTools\"\n| extend EventProduct = \"Iris Enrich\"\n| extend EventSchema = \"Dns\"\n| extend EventSchemaVersion = \"0.1.7\"\n| extend EventCount = 1\n| extend EventType = \"Query\"\n| extend EventSubType = \"response\"\n| extend\n\tEventStartTime = TimeGenerated,\n\tEventEndTime = TimeGenerated,\n\tDvc = EventVendor,\n\tEventResult = 'Success',\n    SrcGeoCountry = column_ifexists('Contact_Country_Code_s', ''),\n    Domain = column_ifexists('Domain_s', ''),\n    IpAddr = column_ifexists('IP_Address_s', ''),\n    DnsResponseIpCountry = column_ifexists('IP_Country_s', ''),\n    SrcRiskLevel = column_ifexists('Risk_Score_d', '')\n | project\n    TimeGenerated,\n    EventVendor,\n    EventProduct,\n    EventType,\n    SrcGeoCountry,\n    Domain,\n    IpAddr,\n    DnsResponseIpCountry,\n    SrcRiskLevel\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
              "dependsOn": [
                "[variables('parserObject1')._parserId1]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'DomainToolsDNSActivity')]",
                "contentId": "[variables('parserObject1').parserContentId1]",
                "kind": "Parser",
                "version": "[variables('parserObject1').parserVersion1]",
                "source": {
                  "name": "DomainTools",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "DomainTools",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Partner",
                  "name": "DomainTools",
                  "email": "memberservices@domaintools.com",
                  "link": "https://www.domaintools.com/support/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "contentKind": "Parser",
        "displayName": "DomainTools ASIM DNS Schema",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "version": "[variables('parserObject1').parserVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject1')._parserName1]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "DomainTools ASIM DNS Schema",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "DomainToolsDNSActivity",
        "query": "DomainToolsDomainEnrichment_CL\n| extend EventVendor = \"DomainTools\"\n| extend EventProduct = \"Iris Enrich\"\n| extend EventSchema = \"Dns\"\n| extend EventSchemaVersion = \"0.1.7\"\n| extend EventCount = 1\n| extend EventType = \"Query\"\n| extend EventSubType = \"response\"\n| extend\n\tEventStartTime = TimeGenerated,\n\tEventEndTime = TimeGenerated,\n\tDvc = EventVendor,\n\tEventResult = 'Success',\n    SrcGeoCountry = column_ifexists('Contact_Country_Code_s', ''),\n    Domain = column_ifexists('Domain_s', ''),\n    IpAddr = column_ifexists('IP_Address_s', ''),\n    DnsResponseIpCountry = column_ifexists('IP_Country_s', ''),\n    SrcRiskLevel = column_ifexists('Risk_Score_d', '')\n | project\n    TimeGenerated,\n    EventVendor,\n    EventProduct,\n    EventType,\n    SrcGeoCountry,\n    Domain,\n    IpAddr,\n    DnsResponseIpCountry,\n    SrcRiskLevel\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
      "dependsOn": [
        "[variables('parserObject1')._parserId1]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'DomainToolsDNSActivity')]",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "kind": "Parser",
        "version": "[variables('parserObject1').parserVersion1]",
        "source": {
          "kind": "Solution",
          "name": "DomainTools",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "DomainTools",
          "email": "[variables('_email')]"
        },
        "support": {
          "tier": "Partner",
          "name": "DomainTools",
          "email": "memberservices@domaintools.com",
          "link": "https://www.domaintools.com/support/"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.2",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "DomainTools",
        "publisherDisplayName": "DomainTools",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/DomainTools/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The <a href=\"https://www.domaintools.com/products/platform/iris-investigate/\">Domaintools Iris investigate</a> solution for Microsoft Sentinel contains Playbooks that can help Enrich domain &amp; investigate domain, domain risk score, Malicious tags, URL's and DNS from Domain tools. This enriched / investigated information can help drive better analysis in security Operations.</p>\n<p><strong>Parsers:</strong> 1, <strong>Function Apps:</strong> 1, <strong>Playbooks:</strong> 8</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/DomainTools.svg\"width=\"75px\"height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "DomainTools",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "DomainTools",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "DomainTools",
          "email": "memberservices@domaintools.com",
          "tier": "Partner",
          "link": "https://www.domaintools.com/support/"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "AzureFunction",
              "contentId": "[variables('_DomainTools_FunctionAppConnector')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_DomainTools-ASIM-DNS-Playbook')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_DomainTools-DNSDB-Co-Located-Addresses')]",
              "version": "[variables('playbookVersion3')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_DomainTools-DNSDB-Co-Located-Hosts')]",
              "version": "[variables('playbookVersion4')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_DomainTools-DNSDB-Historical-Addresses')]",
              "version": "[variables('playbookVersion5')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_DomainTools-DNSDB-Historical-Hosts')]",
              "version": "[variables('playbookVersion6')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_DomainTools-IP-Address-Playbook')]",
              "version": "[variables('playbookVersion7')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_DomainTools-Iris-Enrich-Playbook')]",
              "version": "[variables('playbookVersion8')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_DomainTools-Iris-Investigate-Playbook')]",
              "version": "[variables('playbookVersion9')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject1').parserContentId1]",
              "version": "[variables('parserObject1').parserVersion1]"
            }
          ]
        },
        "firstPublishDate": "2022-10-20",
        "providers": [
          "DomainTools"
        ],
        "categories": {
          "domains": [
            "Security - Automation (SOAR)",
            "Security - Threat Intelligence"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
