{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for Network Session Essentials"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "Network Session Essentials",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    },
    "watchlist1-id": {
      "type": "string",
      "defaultValue": "NetworkSession_Monitor_Configuration",
      "minLength": 1,
      "metadata": {
        "description": "Unique id for the watchlist"
      }
    }
  },
  "variables": {
    "email": "support@microsoft.com",
    "_email": "[variables('email')]",
    "_solutionName": "Network Session Essentials",
    "_solutionVersion": "3.0.4",
    "solutionId": "azuresentinel.azure-sentinel-solution-networksession",
    "_solutionId": "[variables('solutionId')]",
    "workbookVersion1": "1.0.0",
    "workbookContentId1": "NetworkSessionSolution",
    "workbookId1": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId1'))]",
    "workbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId1'))))]",
    "_workbookContentId1": "[variables('workbookContentId1')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_workbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','wb','-', uniqueString(concat(variables('_solutionId'),'-','Workbook','-',variables('_workbookContentId1'),'-', variables('workbookVersion1'))))]",
    "analyticRuleObject1": {
      "analyticRuleVersion1": "1.0.1",
      "_analyticRulecontentId1": "cd6def0d-3ef0-4d55-a7e3-faa96c46ba12",
      "analyticRuleId1": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'cd6def0d-3ef0-4d55-a7e3-faa96c46ba12')]",
      "analyticRuleTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('cd6def0d-3ef0-4d55-a7e3-faa96c46ba12')))]",
      "_analyticRulecontentProductId1": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','cd6def0d-3ef0-4d55-a7e3-faa96c46ba12','-', '1.0.1')))]"
    },
    "analyticRuleObject2": {
      "analyticRuleVersion2": "1.0.0",
      "_analyticRulecontentId2": "8717e498-7b5d-4e23-9e7c-fa4913dbfd79",
      "analyticRuleId2": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '8717e498-7b5d-4e23-9e7c-fa4913dbfd79')]",
      "analyticRuleTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('8717e498-7b5d-4e23-9e7c-fa4913dbfd79')))]",
      "_analyticRulecontentProductId2": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','8717e498-7b5d-4e23-9e7c-fa4913dbfd79','-', '1.0.0')))]"
    },
    "analyticRuleObject3": {
      "analyticRuleVersion3": "1.0.0",
      "_analyticRulecontentId3": "b7dc801e-1e79-48bb-91e8-2229a8e6d40b",
      "analyticRuleId3": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'b7dc801e-1e79-48bb-91e8-2229a8e6d40b')]",
      "analyticRuleTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('b7dc801e-1e79-48bb-91e8-2229a8e6d40b')))]",
      "_analyticRulecontentProductId3": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','b7dc801e-1e79-48bb-91e8-2229a8e6d40b','-', '1.0.0')))]"
    },
    "analyticRuleObject4": {
      "analyticRuleVersion4": "1.0.2",
      "_analyticRulecontentId4": "cbf07406-fa2a-48b0-82b8-efad58db14ec",
      "analyticRuleId4": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'cbf07406-fa2a-48b0-82b8-efad58db14ec')]",
      "analyticRuleTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('cbf07406-fa2a-48b0-82b8-efad58db14ec')))]",
      "_analyticRulecontentProductId4": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','cbf07406-fa2a-48b0-82b8-efad58db14ec','-', '1.0.2')))]"
    },
    "analyticRuleObject5": {
      "analyticRuleVersion5": "1.0.1",
      "_analyticRulecontentId5": "156997bd-da0f-4729-b47a-0a3e02dd50c8",
      "analyticRuleId5": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '156997bd-da0f-4729-b47a-0a3e02dd50c8')]",
      "analyticRuleTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('156997bd-da0f-4729-b47a-0a3e02dd50c8')))]",
      "_analyticRulecontentProductId5": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','156997bd-da0f-4729-b47a-0a3e02dd50c8','-', '1.0.1')))]"
    },
    "analyticRuleObject6": {
      "analyticRuleVersion6": "1.0.3",
      "_analyticRulecontentId6": "cd8faa84-4464-4b4e-96dc-b22f50c27541",
      "analyticRuleId6": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'cd8faa84-4464-4b4e-96dc-b22f50c27541')]",
      "analyticRuleTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('cd8faa84-4464-4b4e-96dc-b22f50c27541')))]",
      "_analyticRulecontentProductId6": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','cd8faa84-4464-4b4e-96dc-b22f50c27541','-', '1.0.3')))]"
    },
    "analyticRuleObject7": {
      "analyticRuleVersion7": "1.2.7",
      "_analyticRulecontentId7": "4902eddb-34f7-44a8-ac94-8486366e9494",
      "analyticRuleId7": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '4902eddb-34f7-44a8-ac94-8486366e9494')]",
      "analyticRuleTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('4902eddb-34f7-44a8-ac94-8486366e9494')))]",
      "_analyticRulecontentProductId7": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','4902eddb-34f7-44a8-ac94-8486366e9494','-', '1.2.7')))]"
    },
    "analyticRuleObject8": {
      "analyticRuleVersion8": "1.0.6",
      "_analyticRulecontentId8": "1da9853f-3dea-4ea9-b7e5-26730da3d537",
      "analyticRuleId8": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '1da9853f-3dea-4ea9-b7e5-26730da3d537')]",
      "analyticRuleTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('1da9853f-3dea-4ea9-b7e5-26730da3d537')))]",
      "_analyticRulecontentProductId8": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','1da9853f-3dea-4ea9-b7e5-26730da3d537','-', '1.0.6')))]"
    },
    "analyticRuleObject9": {
      "analyticRuleVersion9": "1.1.6",
      "_analyticRulecontentId9": "fcb9d75c-c3c1-4910-8697-f136bfef2363",
      "analyticRuleId9": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'fcb9d75c-c3c1-4910-8697-f136bfef2363')]",
      "analyticRuleTemplateSpecName9": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('fcb9d75c-c3c1-4910-8697-f136bfef2363')))]",
      "_analyticRulecontentProductId9": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','fcb9d75c-c3c1-4910-8697-f136bfef2363','-', '1.1.6')))]"
    },
    "SummarizeData_NSE": "SummarizeData_NSE",
    "_SummarizeData_NSE": "[variables('SummarizeData_NSE')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "SummarizeData_NSE",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1'))))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "blanks": "[replace('b', 'b', '')]",
    "huntingQueryObject1": {
      "huntingQueryVersion1": "1.0.0",
      "_huntingQuerycontentId1": "5dca6047-24ed-4eb7-b44e-ec7f1bf42621",
      "huntingQueryTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('5dca6047-24ed-4eb7-b44e-ec7f1bf42621')))]"
    },
    "huntingQueryObject2": {
      "huntingQueryVersion2": "1.0.0",
      "_huntingQuerycontentId2": "906c20c6-b62c-4af7-be91-d7300e3bded2",
      "huntingQueryTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('906c20c6-b62c-4af7-be91-d7300e3bded2')))]"
    },
    "huntingQueryObject3": {
      "huntingQueryVersion3": "1.0.0",
      "_huntingQuerycontentId3": "70e2a349-87f0-4266-809c-e92fc71e0830",
      "huntingQueryTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('70e2a349-87f0-4266-809c-e92fc71e0830')))]"
    },
    "huntingQueryObject4": {
      "huntingQueryVersion4": "1.0.0",
      "_huntingQuerycontentId4": "cbe10c58-e96b-4827-853e-5c1f22fdcc74",
      "huntingQueryTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('cbe10c58-e96b-4827-853e-5c1f22fdcc74')))]"
    },
    "huntingQueryObject5": {
      "huntingQueryVersion5": "1.0.0",
      "_huntingQuerycontentId5": "a61e9fc1-dd9e-4588-a497-2a34a1d811bf",
      "huntingQueryTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('a61e9fc1-dd9e-4588-a497-2a34a1d811bf')))]"
    },
    "huntingQueryObject6": {
      "huntingQueryVersion6": "1.0.0",
      "_huntingQuerycontentId6": "96f9fdd1-bb5b-4d32-8790-666457dc00c0",
      "huntingQueryTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('96f9fdd1-bb5b-4d32-8790-666457dc00c0')))]"
    },
    "huntingQueryObject7": {
      "huntingQueryVersion7": "1.0.0",
      "_huntingQuerycontentId7": "6fd69768-fdf1-4cfd-805f-b243be3f0c6d",
      "huntingQueryTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('6fd69768-fdf1-4cfd-805f-b243be3f0c6d')))]"
    },
    "NetworkSession Monitor Configuration": "NetworkSession Monitor Configuration",
    "_NetworkSession Monitor Configuration": "[variables('NetworkSession Monitor Configuration')]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('workbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetworkSessionEssentials Workbook with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId1')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "This workbook is included as part of Network Session Essentials solution and gives a summary of analyzed traffic, helps with threat analysis and investigating suspicious IP's and traffic analysis. Network Session Essentials Solution also includes playbooks to periodically summarize the logs thus enhancing user experience and improving data search. For the effective usage of workbook, we highly recommend to enable the summarization playbooks that are provided with this solution."
              },
              "properties": {
                "displayName": "[parameters('workbook1-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Network Session Essentials\\n---\\n\"},\"name\":\"text - 2\"},{\"type\":1,\"content\":{\"json\":\"The Microsoft Sentinel Domain Solution for Network sessions provides real-time insights into activity and potential threats in your network. This solution is designed for Network teams, Security Architects, Analysts and Consultants to monitor network assets, as well as identify and investigate network threats. The workbook gives a summary of analyzed traffic, helps with threat analysis and investigating suspicious IP’s, it also gives traffic analysis. \",\"style\":\"info\"},\"name\":\"text - 6\"},{\"type\":1,\"content\":{\"json\":\"The \\\"SummarizedData\\\" playbook installed along with the Solution helps in summarizing the logs and improves the performance of workbooks and data searches. It is highly recommended to run the playbook to utilize the best capabilities of this workbook.\",\"style\":\"warning\"},\"name\":\"text - 7\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"af8c6e44-af5f-49b3-b64c-b35f1db29003\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":1209600000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000}],\"allowCustom\":false},\"timeContext\":{\"durationMs\":86400000}}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 3\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"4326117d-592d-452d-82a2-c06837937d89\",\"cellValue\":\"tabVisibility\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Traffic Analysis - Summary\",\"subTarget\":\"summary\",\"style\":\"link\"},{\"id\":\"e8ec7baf-fada-4dbc-bd28-e1b939636787\",\"cellValue\":\"tabVisibility\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Traffic Analysis - Detailed\",\"subTarget\":\"detailed\",\"style\":\"link\"},{\"id\":\"22b74130-7c95-43b4-8439-def057191a35\",\"cellValue\":\"tabVisibility\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Threat Analysis\",\"subTarget\":\"threat\",\"style\":\"link\"},{\"id\":\"c9b48e95-0d96-4526-86af-b40b817c683b\",\"cellValue\":\"tabVisibility\",\"linkTarget\":\"parameter\",\"linkLabel\":\"IP Investigation\",\"subTarget\":\"ipinvest\",\"style\":\"link\"}]},\"name\":\"links - 4\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Summary of Traffic Analysis\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTimeIp = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet maxSummarizedTimeSource = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_sourceInfo_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet totalConnection = \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTimeIp),endtime=now())\\r\\n\\t\\t| where isnotempty(SrcIpAddr) and isnotempty(DstIpAddr)\\r\\n\\t\\t| summarize count() by SrcIpAddr, DstIpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n\\t\\t| where isnotempty(SrcIpAddr_s) and isnotempty(DstIpAddr_s)\\r\\n\\t\\t| summarize count() by SrcIpAddr=SrcIpAddr_s, DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | summarize count() by SrcIpAddr, DstIpAddr\\r\\n    | count\\r\\n    | extend Product = \\\"Total Connections\\\", orderNum = 1\\r\\n;\\r\\nlet products = \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTimeSource),endtime=now())\\r\\n\\t\\t| extend EventProduct = strcat(EventVendor,\\\"-\\\",EventProduct)\\r\\n        | distinct EventProduct\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_sourceInfo_CL\\r\\n\\t\\t| distinct EventProduct_s\\r\\n\\t\\t| extend EventProduct=EventProduct_s\\r\\n    )\\r\\n    | distinct EventProduct\\r\\n    | count\\r\\n    | extend Product = \\\"Different Products\\\", orderNum = 2\\r\\n;\\r\\nlet sources = \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTimeIp),endtime=now())\\r\\n\\t\\t| where isnotempty(SrcIpAddr)\\r\\n\\t\\t| summarize count() by SrcIpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n\\t\\t| where isnotempty(SrcIpAddr_s)\\r\\n\\t\\t| summarize count() by SrcIpAddr=SrcIpAddr_s\\r\\n    )\\r\\n    | summarize count() by SrcIpAddr\\r\\n    | count\\r\\n    | extend Product = \\\"Unique Sources\\\", orderNum = 3\\r\\n;\\r\\nlet destinations = \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTimeIp),endtime=now())\\r\\n\\t\\t| where isnotempty(DstIpAddr)\\r\\n\\t\\t| summarize count() by DstIpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n\\t\\t| where isnotempty(DstIpAddr_s)\\r\\n\\t\\t| summarize count() by DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | summarize count() by DstIpAddr\\r\\n    | count\\r\\n    | extend Product = \\\"Unique Destinations\\\", orderNum = 4\\r\\n;\\r\\nlet blockedTraffic = \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTimeIp),endtime=now(),dvcaction=dynamic([\\\"Deny\\\",\\\"Drop\\\"]))\\r\\n\\t\\t| where isnotempty(SrcIpAddr) and isnotempty(DstIpAddr)\\r\\n\\t\\t| summarize count() by SrcIpAddr, DstIpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n\\t\\t| where DvcAction_s in (\\\"Deny\\\",\\\"Drop\\\")\\r\\n\\t\\t| where isnotempty(SrcIpAddr_s) and isnotempty(DstIpAddr_s)\\r\\n\\t\\t| summarize count() by SrcIpAddr=SrcIpAddr_s, DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | summarize count() by SrcIpAddr,DstIpAddr\\r\\n    | count\\r\\n    | extend Product = \\\"Blocked Traffic\\\", orderNum = 5\\r\\n;\\r\\nunion totalConnection, products, sources, destinations, blockedTraffic\\r\\n| order by orderNum asc\",\"size\":4,\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Product\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Total Connections\",\"representation\":\"Available\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Different Products\",\"representation\":\"Connect\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Unique Sources\",\"representation\":\"Publish\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Unique Destinations\",\"representation\":\"Publish\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Blocked Traffic\",\"representation\":\"failed\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Bytes Received (MB)\",\"representation\":\"trenddown\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Bytes Sent (MB)\",\"representation\":\"trendup\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"Available\",\"text\":\"{0}{1}\"}]}},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3},\"emptyValCustomText\":\"0\"}},\"showBorder\":true,\"sortCriteriaField\":\"Count\",\"size\":\"auto\"},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Product\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"Count\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"name\":\"Traffic - Connections\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(EventSeverity)\\r\\n        | summarize Instances=toint(count()) by EventSeverity, bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | where isnotempty(EventSeverity_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by EventSeverity=EventSeverity_s, TimeGenerated=bin(EventTime_t, 6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by EventSeverity, bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"Change in Severity of Events over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\"},\"customWidth\":\"50\",\"name\":\"Traffic - Severity\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(DvcAction)\\r\\n        | summarize Instances=toint(count()) by DvcAction, bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | where isnotempty(DvcAction_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by DvcAction=DvcAction_s, TimeGenerated=bin(EventTime_t, 6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DvcAction, bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"Change in Device Action over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"DvcAction\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":19,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false},\"graphSettings\":{\"type\":0}},\"customWidth\":\"50\",\"name\":\"Traffic - Action\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(NetworkDirection)\\r\\n        | summarize Instances=toint(count()) by NetworkDirection, bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | where isnotempty(NetworkDirection_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by NetworkDirection=NetworkDirection_s, TimeGenerated=bin(EventTime_t, 6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by NetworkDirection, bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"Change in Network Direction over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}],\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"DvcAction\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":19,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false},\"graphSettings\":{\"type\":0}},\"customWidth\":\"50\",\"name\":\"Traffic - NetworkDirection\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(EventResult)\\r\\n        | summarize Instances=toint(count()) by EventResult, bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | where isnotempty(EventResult_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by EventResult=EventResult_s, TimeGenerated=bin(EventTime_t, 6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by EventResult, bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"Change in Event Result over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"DvcAction\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":19,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false},\"graphSettings\":{\"type\":0}},\"customWidth\":\"50\",\"name\":\"Traffic - EventResult\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_sourceInfo_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | extend EventProduct = strcat(EventVendor,\\\"-\\\",EventProduct)\\r\\n        | summarize Instances=toint(count()) by EventProduct, bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_sourceInfo_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | where isnotempty(EventProduct_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by EventProduct=EventProduct_s, TimeGenerated=bin(EventTime_t, 6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by EventProduct, bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"Events by Source Type\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\"},\"customWidth\":\"50\",\"name\":\"Traffic - Source Type\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_sourceInfo_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(DvcHostname)\\r\\n        | summarize Instances=toint(count()) by DvcHostname, bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_sourceInfo_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | where isnotempty(DvcHostname_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by DvcHostname=DvcHostname_s, TimeGenerated=bin(EventTime_t, 6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DvcHostname, bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"Events by Device Hostname\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\"},\"customWidth\":\"50\",\"name\":\"Traffic - Device Hostname\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(DstAppName)\\r\\n        | summarize Instances=toint(count()) by DstAppName, bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | where isnotempty(DstAppName_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by DstAppName=DstAppName_s, TimeGenerated=bin(EventTime_t, 6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstAppName, bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"Events by Destination Applications \",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\"},\"customWidth\":\"50\",\"name\":\"Traffic - Destination Application\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_rule_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(Rule)\\r\\n        | summarize Instances=toint(count()) by Rule\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_rule_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | extend Rule = coalesce(Rule_s,Rule_g)\\r\\n\\t  | where isnotempty(Rule)\\r\\n        | summarize Instances=toint(sum(count__d)) by Rule\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by Rule\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Rules\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Rule\",\"formatter\":1},\"secondaryContent\":{\"columnMatch\":\"Instances\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\",\"compositeBarSettings\":{\"labelText\":\"\"}},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\"}}},\"showBorder\":false}},\"customWidth\":\"50\",\"name\":\"Security - Rules\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"tabVisibility\",\"comparison\":\"isEqualTo\",\"value\":\"summary\"},\"name\":\"Group - Traffic - Summary\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Detailed Analysis of Traffic\",\"items\":[{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"d3dd80a6-e4d6-49b3-babb-306f4a1fea5e\",\"cellValue\":\"basedOn\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Based on Network Direction\",\"subTarget\":\"direction\",\"style\":\"link\"},{\"id\":\"029e4bbb-bb1e-408b-8a33-3718a6e0aae3\",\"cellValue\":\"basedOn\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Based on Device Action\",\"subTarget\":\"action\",\"style\":\"link\"}]},\"name\":\"links - 1\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Analysis of Events based on Network Direction\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | summarize Instances=toint(count()) by NetworkDirection, DvcAction\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | summarize Instances=toint(sum(count__d)) by NetworkDirection=NetworkDirection_s, DvcAction=DvcAction_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by NetworkDirection, DvcAction\",\"size\":0,\"title\":\"Traffic by Severity and Action\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"hierarchySettings\":{\"treeType\":1,\"groupBy\":[\"NetworkDirection\"],\"expandTopLevel\":true},\"sortBy\":[{\"itemKey\":\"$gen_count_$gen_group_0\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"$gen_count_$gen_group_0\",\"sortOrder\":1}],\"chartSettings\":{\"yAxis\":[\"Instances\"]}},\"name\":\"Traffic - Detailed\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"8e0a0daa-5a7c-492a-995f-7f0e7fbf2b93\",\"cellValue\":\"TrafficSubTabVisibility\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Inbound Traffic\",\"subTarget\":\"inbound\",\"style\":\"link\"},{\"id\":\"6cd8378a-b5d4-4c0e-8a28-0c4af987206e\",\"cellValue\":\"TrafficSubTabVisibility\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Outbound Traffic\",\"subTarget\":\"outbound\",\"style\":\"link\"}]},\"name\":\"links - 6\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Inbound Traffic\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Inbound\\\" and isnotempty(EventSeverity)\\r\\n        | summarize Instances=toint(count()) by EventSeverity\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Inbound\\\" and isnotempty(EventSeverity_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by EventSeverity=EventSeverity_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by EventSeverity\",\"size\":1,\"title\":\"Inbound Traffic by Severity\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"yAxis\":[\"Instances\"]}},\"customWidth\":\"33\",\"name\":\"Traffic - Inbound - Severity\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Inbound\\\" and isnotempty(DvcAction)\\r\\n        | summarize Instances=toint(count()) by DvcAction\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Inbound\\\" and isnotempty(DvcAction_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by DvcAction=DvcAction_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DvcAction\",\"size\":1,\"title\":\"Inbound Traffic by Device Action\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"DvcAction\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"xAxis\":\"DvcAction\",\"yAxis\":[\"Instances\"],\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Traffic - Inbound - Device Action\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Inbound\\\" and isnotempty(EventResult)\\r\\n        | summarize Instances=toint(count()) by EventResult\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Inbound\\\" and isnotempty(EventResult_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by EventResult=EventResult_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by EventResult\",\"size\":1,\"title\":\"Inbound Traffic by Event Result\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Instances\",\"formatter\":3,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"compositeBarSettings\":{\"labelText\":\"\"}}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"EventResult\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false,\"sortCriteriaField\":\"EventResult\",\"sortOrderField\":2,\"size\":\"full\"},\"chartSettings\":{\"xAxis\":\"EventResult\",\"yAxis\":[\"Instances\"],\"showMetrics\":false,\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Traffic - Inbound - EventResult\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Inbound\\\"\\r\\n        | summarize Instances=toint(count()) by bin(TimeGenerated,1h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Inbound\\\"\\r\\n        | summarize Instances=toint(sum(count__d)) by TimeGenerated=bin(EventTime_t,1h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by bin(TimeGenerated,1h)\",\"size\":1,\"title\":\"Inbound Traffic over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Instances\",\"formatter\":3,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"compositeBarSettings\":{\"labelText\":\"\"}}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"EventResult\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false,\"sortCriteriaField\":\"EventResult\",\"sortOrderField\":2,\"size\":\"full\"},\"chartSettings\":{\"xAxis\":\"TimeGenerated\",\"yAxis\":[\"Instances\"],\"showMetrics\":false}},\"name\":\"Traffic - Inbound - Trend\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_country_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Inbound\\\" and isnotempty(SrcGeoCountry)\\r\\n        | summarize Instances=toint(count()) by SrcGeoCountry\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_country_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Inbound\\\" and isnotempty(SrcGeoCountry_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by SrcGeoCountry=SrcGeoCountry_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcGeoCountry\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":0,\"title\":\"Traffic by Source Country\",\"exportFieldName\":\"SrcGeoCountry\",\"exportParameterName\":\"SrcGeoCountry\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"SrcGeoCountry\",\"sizeSettings\":\"Instances\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Instances\",\"numberOfMetrics\":5,\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Instances\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"50\",\"name\":\"Traffic - 6\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Inbound\\\" and isnotempty(NetworkProtocol)\\r\\n        | summarize Instances=toint(count()) by NetworkProtocol, bin(TimeGenerated,1h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Inbound\\\" and isnotempty(NetworkProtocol_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by NetworkProtocol=NetworkProtocol_s, TimeGenerated=bin(EventTime_t,1h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by NetworkProtocol, bin(TimeGenerated,1h)\",\"size\":0,\"title\":\"Traffic by Protocol\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"NetworkProtocol\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"yAxis\":[\"Instances\"]}},\"customWidth\":\"50\",\"showPin\":false,\"name\":\"Traffic - 7\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_rule_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where isnotempty(Rule) and NetworkDirection == \\\"Inbound\\\"\\r\\n        | summarize Instances=toint(count()) by Rule, bin(TimeGenerated,1h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_rule_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | extend Rule = coalesce(Rule_s,Rule_g)\\r\\n\\t  | where isnotempty(Rule) and NetworkDirection_s == \\\"Inbound\\\"\\r\\n        | summarize Instances=toint(sum(count__d)) by Rule, TimeGenerated=bin(EventTime_t,1h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by Rule, bin(TimeGenerated, 1h)\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":0,\"title\":\"Traffic by Firewall Rule\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"linechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Instances\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}}]}},\"customWidth\":\"50\",\"showPin\":false,\"name\":\"Traffic - 8\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\n    union isfuzzy=true \\n        (\\n            NetworkCustomAnalytics_ip_CL\\n                | where EventTime_t >= {TimeRange:start}\\n                | summarize max_TimeGenerated=max(EventTime_t)\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\n        ),\\n        (\\n            print({TimeRange:start})\\n            | extend max_TimeGenerated = print_0\\n            | project max_TimeGenerated\\n        )\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\n    );\\nunion isfuzzy=true \\n    (\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\n\\t  | where NetworkDirection == \\\"Inbound\\\"\\n\\t  | where isnotempty(SrcIpAddr) and isnotempty(DstIpAddr)\\n\\t  | summarize NumberOfConnections=toint(count()) by SrcIpAddr, DstIpAddr\\n    ),\\n    (\\n        NetworkCustomAnalytics_ip_CL\\n        | where EventTime_t >= {TimeRange:start}\\n\\t  | where NetworkDirection_s == \\\"Inbound\\\"\\n\\t  | where isnotempty(SrcIpAddr_s) and isnotempty(DstIpAddr_s)\\n\\t  | summarize NumberOfConnections=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, DstIpAddr=DstIpAddr_s\\n    )\\n    | summarize NumberOfConnections = sum(NumberOfConnections) by SrcIpAddr, DstIpAddr\\n    | order by NumberOfConnections\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Connections\",\"timeContextFromParameter\":\"TimeRange\",\"exportedParameters\":[{\"fieldName\":\"SrcIpAddr\",\"parameterName\":\"SrcIpAddrConn\",\"parameterType\":1},{\"fieldName\":\"DstIpAddr\",\"parameterName\":\"DstIpAddrConn\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"NumberOfConnections\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\"}}}]}},\"customWidth\":\"50\",\"name\":\"Traffic - 5\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | where isnotempty(SrcIpAddr)\\r\\n\\t  | summarize Instances=toint(count()) by SrcIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t  | where isnotempty(SrcIpAddr_s)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcIpAddr\\r\\n    | order by Instances\\r\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Source IP\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"SrcIpAddr\",\"exportParameterName\":\"SrcIpAddr\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Instances\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"SrcIpAddr\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false}},\"customWidth\":\"25\",\"name\":\"Traffic - 1\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_source_port_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where isnotempty(SrcPortNumber) and NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(SrcPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_source_port_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcPortNumber_d) and NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcPortNumber=toint(SrcPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcPortNumber\\r\\n    | order by Instances\\r\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Source Ports\",\"exportFieldName\":\"SrcPortNumber\",\"exportParameterName\":\"SrcPortNumber\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"SrcPortNumber\",\"formatter\":1},{\"columnMatch\":\"Instances\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"SrcPortNumber\",\"formatter\":1},\"secondaryContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\"}}},\"showBorder\":false,\"sortCriteriaField\":\"Instances\",\"sortOrderField\":2},\"graphSettings\":{\"type\":2,\"hivesContent\":{\"columnMatch\":\"Instances\",\"formatter\":1},\"nodeIdField\":\"SrcPortNumber\",\"graphOrientation\":3,\"showOrientationToggles\":false,\"staticNodeSize\":100,\"groupByField\":\"Instances\",\"hivesMargin\":5}},\"customWidth\":\"25\",\"name\":\"Traffic - 2\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | where isnotempty(DstIpAddr)\\r\\n\\t  | summarize Instances=toint(count()) by DstIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t    | where NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t    | where isnotempty(DstIpAddr_s)\\r\\n\\t    | summarize Instances=toint(sum(count__d)) by DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstIpAddr\\r\\n    | order by Instances\\r\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Destination IP\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"DstIpAddr\",\"exportParameterName\":\"DstIpAddr\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Instances\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"DstIpAddr\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false}},\"customWidth\":\"25\",\"name\":\"Traffic - 3\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where isnotempty(DstPortNumber) and NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(DstPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstPortNumber_d) and NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstPortNumber=toint(DstPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstPortNumber\\r\\n    | order by Instances\\r\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Destination Ports\",\"exportFieldName\":\"DstPortNumber\",\"exportParameterName\":\"DstPortNumber\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"DstPortNumber\",\"formatter\":1},{\"columnMatch\":\"Instances\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"DstPortNumber\",\"formatter\":1},\"secondaryContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\"}}},\"showBorder\":false,\"sortCriteriaField\":\"Instances\",\"sortOrderField\":2},\"graphSettings\":{\"type\":2,\"hivesContent\":{\"columnMatch\":\"Instances\",\"formatter\":1},\"nodeIdField\":\"SrcPortNumber\",\"graphOrientation\":3,\"showOrientationToggles\":false,\"staticNodeSize\":100,\"groupByField\":\"Instances\",\"hivesMargin\":5}},\"customWidth\":\"25\",\"name\":\"Traffic - 4\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"TrafficSubTabVisibility\",\"comparison\":\"isEqualTo\",\"value\":\"inbound\"},\"name\":\"Group - Traffic - Inbound\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Outbound Traffic\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Outbound\\\" and isnotempty(EventSeverity)\\r\\n        | summarize Instances=toint(count()) by EventSeverity\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Outbound\\\" and isnotempty(EventSeverity_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by EventSeverity=EventSeverity_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by EventSeverity\",\"size\":1,\"title\":\"Outbound Traffic by Severity\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"DstGeoCountry\",\"exportParameterName\":\"DstGeoCountry\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"Traffic - Outbound - Severity\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Outbound\\\" and isnotempty(DvcAction)\\r\\n        | summarize Instances=toint(count()) by DvcAction\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Outbound\\\" and isnotempty(DvcAction_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by DvcAction=DvcAction_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DvcAction\",\"size\":1,\"title\":\"Outbound Traffic by Device Action\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"DstGeoCountry\",\"exportParameterName\":\"DstGeoCountry\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\"},\"customWidth\":\"33\",\"name\":\"Traffic - Outbound - DeviceAction\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Outbound\\\" and isnotempty(EventResult)\\r\\n        | summarize Instances=toint(count()) by EventResult\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Outbound\\\" and isnotempty(EventResult_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by EventResult=EventResult_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by EventResult\",\"size\":1,\"title\":\"Outbound Traffic by Event Result\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"DstGeoCountry\",\"exportParameterName\":\"DstGeoCountry\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"NetworkProtocol\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"showLegend\":true}},\"customWidth\":\"33\",\"name\":\"Traffic - Outbound - EventResult\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Outbound\\\"\\r\\n        | summarize Instances=toint(count()) by bin(TimeGenerated,1h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Outbound\\\"\\r\\n        | summarize Instances=toint(sum(count__d)) by TimeGenerated=bin(EventTime_t,1h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by bin(TimeGenerated,1h)\",\"size\":1,\"title\":\"Outbound Traffic over time\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"DstGeoCountry\",\"exportParameterName\":\"DstGeoCountry\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"NetworkProtocol\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"showMetrics\":false}},\"name\":\"Traffic - Outbound - Trend\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_country_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Outbound\\\" and isnotempty(DstGeoCountry)\\r\\n        | summarize Instances=toint(count()) by DstGeoCountry\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_country_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Outbound\\\" and isnotempty(DstGeoCountry_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by DstGeoCountry=DstGeoCountry_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstGeoCountry\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":0,\"title\":\"Traffic by Destination Country\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"DstGeoCountry\",\"exportParameterName\":\"DstGeoCountry\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"DstGeoCountry\",\"sizeSettings\":\"Instances\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Instances\",\"numberOfMetrics\":5,\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Instances\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"50\",\"name\":\"Traffic - 6\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Outbound\\\" and isnotempty(NetworkProtocol)\\r\\n        | summarize Instances=toint(count()) by NetworkProtocol, bin(TimeGenerated,1h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Outbound\\\" and isnotempty(NetworkProtocol_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by NetworkProtocol=NetworkProtocol_s, TimeGenerated=bin(EventTime_t,1h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by NetworkProtocol, bin(TimeGenerated,1h)\",\"size\":0,\"title\":\"Traffic by Protocol\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"NetworkProtocol\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"yAxis\":[\"Instances\"]}},\"customWidth\":\"50\",\"showPin\":false,\"name\":\"Traffic - 7\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_rule_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where isnotempty(Rule) and NetworkDirection == \\\"Outbound\\\"\\r\\n        | summarize Instances=toint(count()) by Rule, bin(TimeGenerated,1h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_rule_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | extend Rule = coalesce(Rule_s,Rule_g)\\r\\n\\t  | where isnotempty(Rule) and NetworkDirection_s == \\\"Outbound\\\"\\r\\n        | summarize Instances=toint(sum(count__d)) by Rule, TimeGenerated=bin(EventTime_t,1h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by Rule, bin(TimeGenerated, 1h)\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":0,\"title\":\"Traffic by Firewall Rule\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Instances\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}}]}},\"customWidth\":\"50\",\"showPin\":false,\"name\":\"Traffic - 8\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\n    union isfuzzy=true \\n        (\\n            NetworkCustomAnalytics_ip_CL\\n                | where EventTime_t >= {TimeRange:start}\\n                | summarize max_TimeGenerated=max(EventTime_t)\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\n        ),\\n        (\\n            print({TimeRange:start})\\n            | extend max_TimeGenerated = print_0\\n            | project max_TimeGenerated\\n        )\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\n    );\\nunion isfuzzy=true \\n    (\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\n\\t  | where NetworkDirection == \\\"Outbound\\\"\\n\\t  | where isnotempty(SrcIpAddr) and isnotempty(DstIpAddr)\\n\\t  | summarize NumberOfConnections=toint(count()) by SrcIpAddr, DstIpAddr\\n    ),\\n    (\\n        NetworkCustomAnalytics_ip_CL\\n        | where EventTime_t >= {TimeRange:start}\\n\\t  | where NetworkDirection_s == \\\"Outbound\\\"\\n\\t  | where isnotempty(SrcIpAddr_s) and isnotempty(DstIpAddr_s)\\n\\t  | summarize NumberOfConnections=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, DstIpAddr=DstIpAddr_s\\n    )\\n    | summarize NumberOfConnections = sum(NumberOfConnections) by SrcIpAddr, DstIpAddr\\n    | order by NumberOfConnections\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Connections\",\"timeContextFromParameter\":\"TimeRange\",\"exportedParameters\":[{\"fieldName\":\"SrcIpAddr\",\"parameterName\":\"SrcIpAddrConn\",\"parameterType\":1},{\"fieldName\":\"DstIpAddr\",\"parameterName\":\"DstIpAddrConn\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"NumberOfConnections\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\"}}}]}},\"customWidth\":\"50\",\"name\":\"Traffic - 5\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | where isnotempty(SrcIpAddr)\\r\\n\\t  | summarize Instances=toint(count()) by SrcIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t  | where isnotempty(SrcIpAddr_s)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcIpAddr\\r\\n    | order by Instances\\r\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Source IP\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"SrcIpAddr\",\"exportParameterName\":\"SrcIpAddr\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Instances\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"compositeBarSettings\":{\"labelText\":\"\"}}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"SrcIpAddr\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false}},\"customWidth\":\"25\",\"name\":\"Traffic - 1\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_source_port_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where isnotempty(SrcPortNumber) and NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(SrcPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_source_port_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcPortNumber_d) and NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcPortNumber=toint(SrcPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcPortNumber\\r\\n    | order by Instances\\r\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Source Ports\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"SrcPortNumber\",\"exportParameterName\":\"SrcPortNumber\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"SrcPortNumber\",\"formatter\":1},{\"columnMatch\":\"Instances\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"SrcPortNumber\",\"formatter\":1},\"secondaryContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\"}}},\"showBorder\":false,\"sortCriteriaField\":\"Instances\",\"sortOrderField\":2},\"graphSettings\":{\"type\":2,\"hivesContent\":{\"columnMatch\":\"Instances\",\"formatter\":1},\"nodeIdField\":\"SrcPortNumber\",\"graphOrientation\":3,\"showOrientationToggles\":false,\"staticNodeSize\":100,\"groupByField\":\"Instances\",\"hivesMargin\":5}},\"customWidth\":\"25\",\"name\":\"Traffic - 2\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | where isnotempty(DstIpAddr)\\r\\n\\t  | summarize Instances=toint(count()) by DstIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t    | where NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t    | where isnotempty(DstIpAddr_s)\\r\\n\\t    | summarize Instances=toint(sum(count__d)) by DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstIpAddr\\r\\n    | order by Instances\\r\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Destination IP\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"DstIpAddr\",\"exportParameterName\":\"DstIpAddr\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Instances\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"DstIpAddr\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false}},\"customWidth\":\"25\",\"name\":\"Traffic - 3\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where isnotempty(DstPortNumber) and NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(DstPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstPortNumber_d) and NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstPortNumber=toint(DstPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstPortNumber\\r\\n    | order by Instances\\r\\n    | take 10\",\"size\":0,\"title\":\"Top 10 Destination Ports\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"DstPortNumber\",\"exportParameterName\":\"DstPortNumber\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"DstPortNumber\",\"formatter\":1},{\"columnMatch\":\"Instances\",\"formatter\":8,\"formatOptions\":{\"min\":0,\"palette\":\"blue\"}}]},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"DstPortNumber\",\"formatter\":1},\"secondaryContent\":{\"columnMatch\":\"Instances\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\"}}},\"showBorder\":false,\"sortCriteriaField\":\"Instances\",\"sortOrderField\":2},\"graphSettings\":{\"type\":2,\"hivesContent\":{\"columnMatch\":\"Instances\",\"formatter\":1},\"nodeIdField\":\"SrcPortNumber\",\"graphOrientation\":3,\"showOrientationToggles\":false,\"staticNodeSize\":100,\"groupByField\":\"Instances\",\"hivesMargin\":5}},\"customWidth\":\"25\",\"name\":\"Traffic - 4\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"TrafficSubTabVisibility\",\"comparison\":\"isEqualTo\",\"value\":\"outbound\"},\"name\":\"Group - Traffic - Outbound\"}]},\"conditionalVisibility\":{\"parameterName\":\"basedOn\",\"comparison\":\"isEqualTo\",\"value\":\"direction\"},\"name\":\"Traffic - Network Direction\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Analysis of Events based on Device Action\",\"items\":[{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"7feab473-8ca8-48e3-a061-19b30176fe6f\",\"cellValue\":\"actionTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Allowed Events\",\"subTarget\":\"allow\",\"style\":\"link\"},{\"id\":\"75b65a5f-6274-4c45-a0e6-7f871ef0128b\",\"cellValue\":\"actionTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Denied Events\",\"subTarget\":\"deny\",\"style\":\"link\"},{\"id\":\"038dc2e0-97a2-4d18-8b1e-e9a0712afea3\",\"cellValue\":\"actionTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Dropped Events\",\"subTarget\":\"drop\",\"style\":\"link\"}]},\"name\":\"links - 3\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Traffic Analysis of Allowed Events\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Allow\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(NetworkProtocol)\\r\\n\\t  | summarize Instances=toint(count()) by NetworkProtocol\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(NetworkProtocol_s) and DvcAction_s in (actions)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by NetworkProtocol=NetworkProtocol_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by NetworkProtocol\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Protocols in Allowed Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"Security - 5\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Allow\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_country_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(SrcGeoCountry)\\r\\n\\t  | summarize Instances=toint(count()) by SrcGeoCountry\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_country_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcGeoCountry_s) and DvcAction_s in (actions)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcGeoCountry=SrcGeoCountry_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcGeoCountry\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Source Countries in Allowed Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"SrcGeoCountry\",\"sizeSettings\":\"Instances\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Instances\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Instances\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"33\",\"name\":\"Security - 19\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Allow\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_country_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(DstGeoCountry)\\r\\n\\t  | summarize Instances=toint(count()) by DstGeoCountry\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_country_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstGeoCountry_s) and DvcAction_s in (actions)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstGeoCountry=DstGeoCountry_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstGeoCountry\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Destination Countries in Allowed Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"DstGeoCountry\",\"sizeSettings\":\"Instances\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Instances\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Instances\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"33\",\"name\":\"Security - 22\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Allow\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(SrcIpAddr) and NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by SrcIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcIpAddr_s) and NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcIpAddr\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 IPs in Allowed Incoming Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"chartSettings\":{\"xAxis\":\"SrcIpAddr\",\"yAxis\":[\"Instances\"]}},\"customWidth\":\"25\",\"name\":\"Security - 8\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Allow\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_source_port_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(SrcPortNumber) and NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(SrcPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_source_port_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcPortNumber_d) and NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcPortNumber=toint(SrcPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcPortNumber\\r\\n    | extend SrcPortNumber = tostring(SrcPortNumber)\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Ports in Allowed Incoming Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"chartSettings\":{\"xAxis\":\"SrcPortNumber\",\"yAxis\":[\"Instances\"],\"showMetrics\":false,\"showLegend\":true,\"xSettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"customWidth\":\"25\",\"name\":\"Security - 9\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Allow\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(DstIpAddr) and NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by DstIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstIpAddr_s) and NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstIpAddr\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 IPs in Allowed Outgoing Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\"},\"customWidth\":\"25\",\"name\":\"Security - 10\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Allow\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(DstPortNumber) and NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(DstPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstPortNumber_d) and NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstPortNumber=toint(DstPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstPortNumber\\r\\n    | extend DstPortNumber = tostring(DstPortNumber)\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Ports in Allowed Outgoing Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"chartSettings\":{\"xAxis\":\"DstPortNumber\",\"showMetrics\":false,\"showLegend\":true,\"xSettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"customWidth\":\"25\",\"name\":\"Security - 11\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"actionTab\",\"comparison\":\"isEqualTo\",\"value\":\"allow\"},\"name\":\"Traffic - Allowed\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Traffic Analysis of Denied Events\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Deny\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(NetworkProtocol)\\r\\n\\t  | summarize Instances=toint(count()) by NetworkProtocol\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(NetworkProtocol_s) and DvcAction_s in (actions)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by NetworkProtocol=NetworkProtocol_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by NetworkProtocol\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Protocols in Denied Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"Security - 6\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Deny\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_country_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(SrcGeoCountry)\\r\\n\\t  | summarize Instances=toint(count()) by SrcGeoCountry\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_country_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcGeoCountry_s) and DvcAction_s in (actions)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcGeoCountry=SrcGeoCountry_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcGeoCountry\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Source Countries in Denied Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"SrcGeoCountry\",\"sizeSettings\":\"Instances\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Instances\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Instances\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"33\",\"name\":\"Security - 20\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Deny\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_country_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(DstGeoCountry)\\r\\n\\t  | summarize Instances=toint(count()) by DstGeoCountry\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_country_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstGeoCountry_s) and DvcAction_s in (actions)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstGeoCountry=DstGeoCountry_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstGeoCountry\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Destination Countries in Denied Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"DstGeoCountry\",\"sizeSettings\":\"Instances\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Instances\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Instances\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"33\",\"name\":\"Security - 23\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Deny\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(SrcIpAddr) and NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by SrcIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcIpAddr_s) and NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcIpAddr\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 IPs in Denied Incoming Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\"},\"customWidth\":\"25\",\"name\":\"Security - 12\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Deny\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_source_port_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(SrcPortNumber) and NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(SrcPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_source_port_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcPortNumber_d) and NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcPortNumber=toint(SrcPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcPortNumber\\r\\n    | extend SrcPortNumber = tostring(SrcPortNumber)\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Ports in Denied Incoming Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"chartSettings\":{\"xAxis\":\"SrcPortNumber\",\"showMetrics\":false,\"showLegend\":true,\"xSettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"customWidth\":\"25\",\"name\":\"Security - 13\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Deny\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(DstIpAddr) and NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by DstIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstIpAddr_s) and NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstIpAddr\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 IPs in Denied Outgoing Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\"},\"customWidth\":\"25\",\"name\":\"Security - 14\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Deny\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(DstPortNumber) and NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(DstPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstPortNumber_d) and NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstPortNumber=toint(DstPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstPortNumber\\r\\n    | extend DstPortNumber = tostring(DstPortNumber)\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Ports in Denied Outgoing Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"chartSettings\":{\"xAxis\":\"DstPortNumber\",\"showMetrics\":false,\"showLegend\":true,\"xSettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"customWidth\":\"25\",\"name\":\"Security - 15\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"actionTab\",\"comparison\":\"isEqualTo\",\"value\":\"deny\"},\"name\":\"Traffic - Denied\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Traffic Analysis of Dropped Events\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Drop\\\",\\\"Drop ICMP\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(NetworkProtocol)\\r\\n\\t  | summarize Instances=toint(count()) by NetworkProtocol\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(NetworkProtocol_s) and DvcAction_s in (actions)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by NetworkProtocol=NetworkProtocol_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by NetworkProtocol\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Protocols in Dropped Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"Security - 7\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Drop\\\",\\\"Drop ICMP\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_country_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(SrcGeoCountry)\\r\\n\\t  | summarize Instances=toint(count()) by SrcGeoCountry\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_country_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcGeoCountry_s) and DvcAction_s in (actions)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcGeoCountry=SrcGeoCountry_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcGeoCountry\\r\\n    | order by Instances\\r\\n    | take 5\\r\\n\",\"size\":1,\"title\":\"Top 5 Source Countries in Dropped Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"SrcGeoCountry\",\"sizeSettings\":\"Instances\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Instances\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Instances\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"33\",\"name\":\"Security - 21\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Drop\\\",\\\"Drop ICMP\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_country_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(DstGeoCountry)\\r\\n\\t  | summarize Instances=toint(count()) by DstGeoCountry\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_country_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstGeoCountry_s) and DvcAction_s in (actions)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstGeoCountry=DstGeoCountry_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstGeoCountry\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Destination Countries in Dropped Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"DstGeoCountry\",\"sizeSettings\":\"Instances\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"Instances\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Instances\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"33\",\"name\":\"Security - 24\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Drop\\\",\\\"Drop ICMP\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(SrcIpAddr) and NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by SrcIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcIpAddr_s) and NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcIpAddr\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 IPs in Dropped Incoming Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\"},\"customWidth\":\"25\",\"name\":\"Security - 18\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Drop\\\",\\\"Drop ICMP\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_source_port_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(SrcPortNumber) and NetworkDirection == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(SrcPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_source_port_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(SrcPortNumber_d) and NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by SrcPortNumber=toint(SrcPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by SrcPortNumber\\r\\n    | extend SrcPortNumber = tostring(SrcPortNumber)\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 Ports in Dropped Incoming Traffic\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"chartSettings\":{\"xAxis\":\"SrcPortNumber\",\"showMetrics\":false,\"showLegend\":true,\"xSettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"customWidth\":\"25\",\"name\":\"Security - 16\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Drop\\\", \\\"Drop ICMP\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(DstIpAddr) and NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by DstIpAddr\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstIpAddr_s) and NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstIpAddr\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 IPs in Dropped Outgoing Traffic\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\"},\"customWidth\":\"25\",\"name\":\"Security - 16\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Drop\\\",\\\"Drop ICMP\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_protocol_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now(), dvcaction=actions)\\r\\n\\t  | where isnotempty(DstPortNumber) and NetworkDirection == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(count()) by toint(DstPortNumber)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_protocol_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(DstPortNumber_d) and NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by DstPortNumber=toint(DstPortNumber_d)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by DstPortNumber\\r\\n    | extend DstPortNumber = tostring(DstPortNumber)\\r\\n    | order by Instances\\r\\n    | take 5\",\"size\":1,\"title\":\"Top 5 IPs in Dropped Outgoing Traffic\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"chartSettings\":{\"xAxis\":\"DstPortNumber\",\"showMetrics\":false,\"showLegend\":true,\"xSettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"customWidth\":\"25\",\"name\":\"Security - 17\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"actionTab\",\"comparison\":\"isEqualTo\",\"value\":\"drop\"},\"name\":\"Traffic - Dropped\"}]},\"conditionalVisibility\":{\"parameterName\":\"basedOn\",\"comparison\":\"isEqualTo\",\"value\":\"action\"},\"name\":\"Traffic - Device Action\"}]},\"conditionalVisibility\":{\"parameterName\":\"tabVisibility\",\"comparison\":\"isEqualTo\",\"value\":\"detailed\"},\"name\":\"Group - Traffic - Detailed\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Threat Landscape Analysis\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_threat_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet distinctThreatCategory = \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now())\\r\\n\\t\\t| where isnotempty(ThreatCategory)\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_threat_CL\\r\\n\\t\\t| where isnotempty(ThreatCategory_s)\\r\\n\\t\\t| extend ThreatCategory = ThreatCategory_s\\r\\n    )\\r\\n    | summarize Count=dcount(ThreatCategory)\\r\\n    | extend Product = \\\"Distinct Threat Categories\\\", orderNum = 1\\r\\n;\\r\\nlet distinctThreats = \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now())\\r\\n        | extend Threat = coalesce(ThreatId,ThreatName)\\r\\n\\t\\t| where isnotempty(Threat)\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_threat_CL\\r\\n\\t\\t| where isnotempty(Threat_s)\\r\\n\\t\\t| extend Threat = Threat_s\\r\\n    )\\r\\n    | summarize Count=dcount(Threat)\\r\\n    | extend Product = \\\"Distinct Threats\\\", orderNum = 2\\r\\n;\\r\\nunion distinctThreatCategory, distinctThreats\\r\\n| order by orderNum asc\",\"size\":4,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"sum_NetworkBytes\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"sum_NetworkBytes\",\"sortOrder\":1}],\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Product\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Distinct Threat Categories\",\"representation\":\"SmileySad\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Distinct Threats\",\"representation\":\"error\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"Available\",\"text\":\"{0}{1}\"}]}},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3},\"emptyValCustomText\":\"0\"}},\"showBorder\":true,\"sortCriteriaField\":\"Count\",\"size\":\"auto\"},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"Product\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"Count\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"name\":\"Threat - Summary\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_threat_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | where isnotempty(ThreatCategory)\\r\\n\\t  | summarize Instances=toint(count()) by ThreatCategory, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_threat_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(ThreatCategory_s)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by ThreatCategory=ThreatCategory_s, TimeGenerated=bin(EventTime_t,6h)\\r\\n    )\\r\\n    | summarize Instances=sum(Instances) by ThreatCategory, bin(TimeGenerated,6h)\",\"size\":1,\"title\":\"Events by Threat Category\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\"},\"customWidth\":\"33\",\"name\":\"Threat - 1\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_threat_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t\\t| extend Threat = coalesce(ThreatId,ThreatName)\\r\\n\\t\\t| where (isnotempty(Threat) or isnotempty(ThreatCategory)) and isnotempty(EventSeverity)\\r\\n\\t\\t| summarize Instances=toint(count()) by EventSeverity, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        NetworkCustomAnalytics_threat_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n\\t  | where isnotempty(EventSeverity_s)\\r\\n\\t  | summarize Instances=toint(sum(count__d)) by EventSeverity=EventSeverity_s, TimeGenerated=bin(EventTime_t,6h)\\r\\n    )\\r\\n    | summarize Instances=sum(Instances) by EventSeverity, bin(TimeGenerated,6h)\",\"size\":1,\"title\":\"Threat Events by Severity\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\"},\"customWidth\":\"33\",\"name\":\"Threat - 2\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_threat_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | extend Threat = coalesce(ThreatId,ThreatName)\\r\\n        | where (isnotempty(Threat) or isnotempty(ThreatCategory)) and isnotempty(DvcAction)\\r\\n        | summarize Instances=toint(count()) by DvcAction, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_threat_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | where isnotempty(DvcAction_s)\\r\\n        | summarize Instances=toint(sum(count__d)) by DvcAction=DvcAction_s, TimeGenerated=bin(EventTime_t,6h)\\r\\n    )\\r\\n    | summarize Instances=sum(Instances) by DvcAction, bin(TimeGenerated,6h)\",\"size\":1,\"title\":\"Threat Events by Device Action\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\"},\"customWidth\":\"33\",\"name\":\"Threat - 3\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Allow\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet getIps = union isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now(),dvcaction=actions)\\r\\n\\t\\t| extend IpAddr = case(NetworkDirection == \\\"Inbound\\\", SrcIpAddr,\\r\\n                       NetworkDirection == \\\"Outbound\\\", DstIpAddr,\\r\\n                        \\\"\\\")\\r\\n\\t\\t| where isnotempty(IpAddr)\\r\\n\\t\\t| distinct IpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n\\t\\t| where DvcAction_s in (actions)\\r\\n\\t\\t| extend IpAddr = case(NetworkDirection_s == \\\"Inbound\\\", SrcIpAddr_s,\\r\\n                       NetworkDirection_s == \\\"Outbound\\\", DstIpAddr_s,\\r\\n                        \\\"\\\")\\r\\n\\t\\t| where isnotempty(IpAddr)\\r\\n\\t\\t| distinct IpAddr\\r\\n    )\\r\\n    | distinct IpAddr;\\r\\nThreatIntelligenceIndicator\\r\\n| where NetworkIP in (getIps) \",\"size\":0,\"title\":\"Allowed Connection with Threat Intelligence Correlation\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"name\":\"Threat - 6\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let actions = dynamic([\\\"Deny\\\", \\\"Drop\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet getIps = union isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now(),dvcaction=actions)\\r\\n\\t\\t| extend IpAddr = case(NetworkDirection == \\\"Inbound\\\", SrcIpAddr,\\r\\n                       NetworkDirection == \\\"Outbound\\\", DstIpAddr,\\r\\n                        \\\"\\\")\\r\\n\\t\\t| where isnotempty(IpAddr)\\r\\n\\t\\t| distinct IpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_ip_CL\\r\\n\\t\\t| where DvcAction_s in (actions)\\r\\n\\t\\t| extend IpAddr = case(NetworkDirection_s == \\\"Inbound\\\", SrcIpAddr_s,\\r\\n                       NetworkDirection_s == \\\"Outbound\\\", DstIpAddr_s,\\r\\n                        \\\"\\\")\\r\\n\\t\\t| where isnotempty(IpAddr)\\r\\n\\t\\t| distinct IpAddr\\r\\n    )\\r\\n    | distinct IpAddr;\\r\\nThreatIntelligenceIndicator\\r\\n| where NetworkIP in (getIps) \",\"size\":0,\"title\":\"Blocked Connection with Threat Intelligence Correlation\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"name\":\"Threat - 5\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_threat_ioc_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet getSourceIp = union isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now())\\r\\n        | extend Threat = coalesce(ThreatId,ThreatName)\\r\\n        | where isnotempty(Threat)\\r\\n\\t\\t| where isnotempty(SrcIpAddr) and not(ipv4_is_private(SrcIpAddr))\\r\\n\\t\\t| distinct SrcIpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_threat_ioc_CL\\r\\n\\t\\t| where isnotempty(SrcIpAddr_s) and not(ipv4_is_private(SrcIpAddr_s))\\r\\n\\t\\t| distinct SrcIpAddr=SrcIpAddr_s\\r\\n    )\\r\\n    | distinct SrcIpAddr;\\r\\nlet getDestinationIp = union isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now())\\r\\n        | extend Threat = coalesce(ThreatId,ThreatName)\\r\\n        | where isnotempty(Threat)\\r\\n\\t\\t| where isnotempty(DstIpAddr) and not(ipv4_is_private(DstIpAddr))\\r\\n\\t\\t| distinct DstIpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_threat_ioc_CL\\r\\n\\t\\t| where isnotempty(DstIpAddr_s) and not(ipv4_is_private(DstIpAddr_s))\\r\\n\\t\\t| distinct DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | distinct DstIpAddr;\\r\\nSecurityAlert\\r\\n| where Entities has_any (getSourceIp,getDestinationIp)\",\"size\":0,\"title\":\"Security Alerts with Threat IP\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"name\":\"Threat - 6\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_threat_ioc_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet getSourceHostname = union isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now())\\r\\n\\t\\t| where isnotempty(SrcHostname)\\r\\n\\t\\t| distinct SrcHostname\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_threat_ioc_CL\\r\\n\\t\\t| where isnotempty(SrcHostname_s)\\r\\n\\t\\t| distinct SrcHostname=SrcHostname_s\\r\\n    )\\r\\n    | distinct SrcHostname;\\r\\nlet getDestinationHostname = union isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now())\\r\\n        | extend Threat = coalesce(ThreatId,ThreatName)\\r\\n        | where isnotempty(Threat)\\r\\n\\t\\t| where isnotempty(DstHostname)\\r\\n\\t\\t| distinct DstHostname\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_threat_ioc_CL\\r\\n\\t\\t| where isnotempty(DstHostname_s)\\r\\n\\t\\t| distinct DstHostname=DstHostname_s\\r\\n    )\\r\\n    | distinct DstHostname;\\r\\nSecurityAlert\\r\\n| where Entities has_any (getSourceHostname,getDestinationHostname)\",\"size\":0,\"title\":\"Security Alerts with Threat Hostname\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"name\":\"Threat - 7\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet getIps = union isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now())\\r\\n        | extend Threat = coalesce(ThreatId,ThreatName)\\r\\n        | where isnotempty(Threat)\\r\\n\\t\\t| where NetworkDirection == \\\"Inbound\\\"\\r\\n\\t\\t| where isnotempty(SrcIpAddr)\\r\\n\\t\\t| distinct SrcIpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_threat_ioc_CL\\r\\n\\t\\t| where NetworkDirection_s == \\\"Inbound\\\"\\r\\n\\t\\t| where isnotempty(SrcIpAddr_s)\\r\\n\\t\\t| distinct SrcIpAddr=SrcIpAddr_s\\r\\n    )\\r\\n    | distinct SrcIpAddr;\\r\\nThreatIntelligenceIndicator\\r\\n| where NetworkIP in (getIps)\\r\\n| order by TimeGenerated, ConfidenceScore\\r\\n| project TimeGenerated, NetworkIP, Action, ConfidenceScore, Description, ExternalIndicatorId, ExpirationDateTime, IndicatorId, ThreatType\\r\\n| take 10\",\"size\":0,\"title\":\"Source IPs associated with Threats\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"customWidth\":\"50\",\"name\":\"Threat - 8\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            NetworkCustomAnalytics_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet getIps = union isfuzzy=true \\r\\n    (\\r\\n        _Im_NetworkSession(starttime=todatetime(maxSummarizedTime),endtime=now())\\r\\n        | extend Threat = coalesce(ThreatId,ThreatName)\\r\\n        | where isnotempty(Threat)\\r\\n\\t\\t| where NetworkDirection == \\\"Outbound\\\"\\r\\n\\t\\t| where isnotempty(DstIpAddr)\\r\\n\\t\\t| distinct DstIpAddr\\r\\n    ),\\r\\n    (  \\r\\n        NetworkCustomAnalytics_threat_ioc_CL\\r\\n\\t\\t| where NetworkDirection_s == \\\"Outbound\\\"\\r\\n\\t\\t| where isnotempty(DstIpAddr_s)\\r\\n\\t\\t| distinct DstIpAddr=DstIpAddr_s\\r\\n    )\\r\\n    | distinct DstIpAddr;\\r\\nThreatIntelligenceIndicator\\r\\n| where NetworkIP in (getIps)\\r\\n| order by TimeGenerated, ConfidenceScore\\r\\n| project TimeGenerated, NetworkIP, Action, ConfidenceScore, Description, ExternalIndicatorId, ExpirationDateTime, IndicatorId, ThreatType\\r\\n| take 10\",\"size\":0,\"title\":\"Destination IPs associated with Threats\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"customWidth\":\"50\",\"name\":\"Threat - 9\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"tabVisibility\",\"comparison\":\"isEqualTo\",\"value\":\"threat\"},\"name\":\"Group - Threat\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"IP Investigation\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"01449bd8-a147-48c7-9c10-72c3b2014817\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SearchIP\",\"label\":\"Search IP\",\"type\":1,\"description\":\"Enter the IP to be investigated\",\"isRequired\":true,\"value\":\"\",\"timeContext\":{\"durationMs\":86400000}}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_NetworkSession(starttime={TimeRange:start},endtime={TimeRange:end})\\r\\n| where SrcIpAddr == \\\"{SearchIP}\\\" or DstIpAddr == \\\"{SearchIP}\\\"\\r\\n| summarize count() by EventProduct\",\"size\":1,\"title\":\"Data Volume from different Sources\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"IpInvestigate - 1\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_NetworkSession(starttime={TimeRange:start},endtime={TimeRange:end})\\r\\n| where SrcIpAddr == \\\"{SearchIP}\\\" or DstIpAddr == \\\"{SearchIP}\\\"\\r\\n| summarize count() by NetworkProtocol\",\"size\":1,\"title\":\"Data Volume from different Protocols\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"IpInvestigate - 2\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_NetworkSession(starttime={TimeRange:start},endtime={TimeRange:end})\\r\\n| where SrcIpAddr == \\\"{SearchIP}\\\" or DstIpAddr == \\\"{SearchIP}\\\"\\r\\n| summarize count() by NetworkDirection\",\"size\":1,\"title\":\"Data Volume from different directions\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"IpInvestigate - 3\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"ThreatIntelligenceIndicator\\r\\n| where NetworkIP == \\\"{SearchIP}\\\" and Active\\r\\n| summarize arg_max(TimeGenerated,*) by NetworkIP\\r\\n| project TimeGenerated, NetworkIP, Action, ConfidenceScore, Description, ExternalIndicatorId, ExpirationDateTime, IndicatorId, ThreatType, TrafficLightProtocolLevel\\r\\n| evaluate narrow()\\r\\n| project-away Row\",\"size\":0,\"title\":\"Information from Threat Intelligence Table\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"customWidth\":\"50\",\"name\":\"IP Investigation - 4\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"SecurityAlert\\r\\n| where Entities has \\\"{SearchIP}\\\"\\r\\n| project TimeGenerated, DisplayName, AlertName, AlertSeverity, ProviderName, VendorName, SystemAlertId, StartTime, EndTime, todynamic(ExtendedProperties), Entities\",\"size\":0,\"title\":\"Security Alerts with Searched IP\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"customWidth\":\"50\",\"name\":\"IP Investigation - 5\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_NetworkSession(starttime=ago(1d), endtime=now(), srcipaddr_has_any_prefix=dynamic([\\\"{SearchIP}\\\"]))\\r\\n| summarize Instances=count() by DstIpAddr\\r\\n| order by Instances\\r\\n| take 5\",\"size\":1,\"title\":\"When Searched IP is the Source IP\",\"timeContextFromParameter\":\"TimeRange\",\"exportMultipleValues\":true,\"exportedParameters\":[{\"fieldName\":\"DstIpAddr\",\"parameterName\":\"DstIpAddr\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"customWidth\":\"33\",\"name\":\"IP Investigation - 7\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_NetworkSession(starttime=ago(1d), endtime=now(), srcipaddr_has_any_prefix=dynamic([\\\"{SearchIP}\\\"]))\\r\\n| where DstIpAddr in (\\\"\\\" {DstIpAddr})\\r\\n| order by TimeGenerated\\r\\n| project DstIpAddr, DstPortNumber, SrcIpAddr, SrcPortNumber, DstAppName, NetworkProtocol, NetworkDirection, DvcAction, EventStartTime, EventEndTime\\r\\n| take 250\",\"size\":1,\"title\":\"Connection Details of Selected Destination IP\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"customWidth\":\"67\",\"name\":\"IP Investigation - 8\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_NetworkSession(starttime=ago(1d), endtime=now(), dstipaddr_has_any_prefix=dynamic([\\\"{SearchIP}\\\"]))\\r\\n| summarize Instances=count() by SrcIpAddr\\r\\n| order by Instances\\r\\n| take 5\",\"size\":1,\"title\":\"When Searched IP is the Destination IP\",\"timeContextFromParameter\":\"TimeRange\",\"exportMultipleValues\":true,\"exportedParameters\":[{\"fieldName\":\"SrcIpAddr\",\"parameterName\":\"SrcIpAddr\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"customWidth\":\"33\",\"name\":\"IP Investigation - 7 - Copy\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_NetworkSession(starttime=ago(1d), endtime=now(), dstipaddr_has_any_prefix=dynamic([\\\"{SearchIP}\\\"]))\\r\\n| where SrcIpAddr in (\\\"\\\" {SrcIpAddr})\\r\\n| order by TimeGenerated\\r\\n| project DstIpAddr, DstPortNumber, SrcIpAddr, SrcPortNumber, DstAppName, NetworkProtocol, NetworkDirection, DvcAction, EventStartTime, EventEndTime\\r\\n| take 250\",\"size\":1,\"title\":\"Connection Details of Selected Source IP\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\"},\"customWidth\":\"67\",\"name\":\"IP Investigation - 10\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_NetworkSession(starttime={TimeRange:start},endtime={TimeRange:end}, ipaddr_has_any_prefix=dynamic([\\\"{SearchIP}\\\"]))\\r\\n| where isnotempty(SrcDomain)\\r\\n| summarize Instances=count() by SrcDomain\\r\\n| order by Instances\\r\\n| take 5\",\"size\":1,\"title\":\"Top Source Domain\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\"},\"customWidth\":\"50\",\"name\":\"IP Investigation - 13\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_NetworkSession(starttime={TimeRange:start},endtime={TimeRange:end}, ipaddr_has_any_prefix=dynamic([\\\"{SearchIP}\\\"]))\\r\\n| where isnotempty(DstDomain)\\r\\n| summarize Instances=count() by DstDomain\\r\\n| order by Instances\\r\\n| take 5\",\"size\":1,\"title\":\"Top Destination Domain\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\"},\"customWidth\":\"50\",\"name\":\"IP Investigation - 14\",\"styleSettings\":{\"margin\":\"10\",\"padding\":\"10\",\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"tabVisibility\",\"comparison\":\"isEqualTo\",\"value\":\"ipinvest\"},\"name\":\"Group - IP Investigate\"}],\"fromTemplateId\":\"sentinel-NetworkSessionSolution\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId1'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=NetworkSessionSolution; logoFileName=Azure_Sentinel.svg; description=This workbook is included as part of Network Session Essentials solution and gives a summary of analyzed traffic, helps with threat analysis and investigating suspicious IP's and traffic analysis. Network Session Essentials Solution also includes playbooks to periodically summarize the logs thus enhancing user experience and improving data search. For the effective usage of workbook, we highly recommend to enable the summarization playbooks that are provided with this solution.; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=1.0.0; title=Network Session Essentials; templateRelativePath=NetworkSessionEssentials.json; subtitle=; provider=Microsoft}.description",
                "parentId": "[variables('workbookId1')]",
                "contentId": "[variables('_workbookContentId1')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                },
                "dependencies": {
                  "operator": "AND",
                  "criteria": [
                    {
                      "contentId": "AWSVPCFlow",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "DeviceNetworkEvents",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "SecurityEvent",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "WindowsEvent",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "CommonSecurityLog",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Syslog",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "CommonSecurityLog",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "VMConnection",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "AzureDiagnostics",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "AzureDiagnostics",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "CommonSecurityLog",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Corelight_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "VectraStream",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "CommonSecurityLog",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "CommonSecurityLog",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Syslog",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "CiscoMerakiNativePoller",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "AWSS3",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "MicrosoftThreatProtection",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "SecurityEvents",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "WindowsForwardedEvents",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "Zscaler",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "MicrosoftSysmonForLinux",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "PaloAltoNetworks",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "AzureMonitor(VMInsights)",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "AzureFirewall",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "AzureNSG",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "CiscoASA",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "Corelight",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "AIVectraStream",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "CheckPoint",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "Fortinet",
                      "kind": "DataConnector"
                    },
                    {
                      "contentId": "CiscoMeraki",
                      "kind": "DataConnector"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_workbookContentId1')]",
        "contentKind": "Workbook",
        "displayName": "[parameters('workbook1-name')]",
        "contentProductId": "[variables('_workbookcontentProductId1')]",
        "id": "[variables('_workbookcontentProductId1')]",
        "version": "[variables('workbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject1').analyticRuleTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AnomalyFoundInNetworkSessionTraffic_AnalyticalRules Analytics Rule with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject1').analyticRuleVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "The rule identifies anomalous pattern in network session traffic based on previously seen data, different Device Action, Network Protocol, Network Direction or overall volume. The rule utilize [ASIM](https://aka.ms/AboutASIM) normalization, and is applied to any source which supports the ASIM Network Session schema",
                "displayName": "Anomaly found in Network Session Traffic (ASIM Network Session schema)",
                "enabled": false,
                "query": "let min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\nlet fieldForDvcAction = \"DvcAction\";\nlet fieldForNetworkDirection = \"NetworkDirection\";\nlet fieldForNetworkProtocol = \"NetworkProtocol\";\nlet AnomalyThreshold = 2.5;\nlet eps = materialize (_Im_NetworkSession | project TimeGenerated | where TimeGenerated > ago(5m) | count | extend Count = Count/300);\nlet maxSummarizedTime = toscalar (\n    union isfuzzy=true \n        (\n            NetworkCustomAnalytics_protocol_CL\n                | where EventTime_t > min_t\n                | summarize max_TimeGenerated=max(EventTime_t)\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\n        ),\n        (\n            print(min_t)\n            | project max_TimeGenerated = print_0\n        )\n      | summarize maxTimeGenerated = max(max_TimeGenerated) \n    );\nlet nosummary = materialize(\n              union isfuzzy=true \n                (\n                    NetworkCustomAnalytics_protocol_CL\n                    | where EventTime_t > ago(1d) \n                    | project v = int(2)\n                ),\n                (\n                    print int(1) \n                    | project v = print_0\n                )\n                | summarize maxv = max(v)\n                | extend nosum = (maxv > 1)\n              );\nlet allData = union isfuzzy=true \n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) > 1000 | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(2d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) between (501 .. 1000) | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(3d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) <= 500 | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(4d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t > min_t\n        | project-rename NetworkProtocol=NetworkProtocol_s, DstPortNumber=DstPortNumber_d, DstAppName=DstAppName_s, NetworkDirection=NetworkDirection_s, DvcAction=DvcAction_s, Count=count__d, EventTime=EventTime_t\n        | extend Count = toint(Count),DstPortNumber = toint(DstPortNumber) \n    )\n;\nlet findVolumneBasedAnomaly = allData\n        | make-series total=sum(Count) on EventTime from min_t to max_t step dt\n        | extend (anomalies, score, baseline) = series_decompose_anomalies(total, AnomalyThreshold, -1, 'linefit') \n        | mv-expand anomalies, score, baseline, EventTime, total\n        | extend anomalies = toint(anomalies), score = toint(score), baseline = toint(baseline), EventTime = todatetime(EventTime), total = tolong(total)\n        | where EventTime >= ago(1d)\n        | where score >= 2*AnomalyThreshold\n        ;\nlet findAnomalies = (field:string){\n    allData\n        | where isnotempty(column_ifexists(field,\"\"))\n        | make-series total=sum(Count) on EventTime from min_t to max_t step dt by column_ifexists(field,\"\")\n        | extend (anomalies, score, baseline) = series_decompose_anomalies(total, AnomalyThreshold, -1, 'linefit')\n        | mv-expand anomalies, score, baseline, EventTime, total\n        | extend anomalies = toint(anomalies), score = toint(score), baseline = toint(baseline), EventTime = todatetime(EventTime), total = tolong(total)\n        | where EventTime >= ago(1d)\n        | where score >= 2*AnomalyThreshold\n};\nunion findAnomalies(fieldForDvcAction), findAnomalies(fieldForNetworkDirection), findAnomalies(fieldForNetworkProtocol), findVolumneBasedAnomaly\n| extend anomalyFieldType  = case (isnotempty(column_ifexists(fieldForDvcAction,\"\")), \"DvcAction\",\n                                  isnotempty(column_ifexists(fieldForNetworkDirection,\"\")), \"NetworkDirection\",\n                                  isnotempty(column_ifexists(fieldForNetworkProtocol,\"\")), \"NetworkProtocol\",\n                                  \"TotalVolume\"\n                                ),\n        anomalyFieldValue  = case (isnotempty(column_ifexists(fieldForDvcAction,\"\")), column_ifexists(fieldForDvcAction,\"\"),\n                                  isnotempty(column_ifexists(fieldForNetworkDirection,\"\")), column_ifexists(fieldForNetworkDirection,\"\"),\n                                  isnotempty(column_ifexists(fieldForNetworkProtocol,\"\")), column_ifexists(fieldForNetworkProtocol,\"\"),\n                                  \"Overall\"\n                                )\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AWSVPCFlow"
                    ],
                    "connectorId": "AWSS3"
                  },
                  {
                    "dataTypes": [
                      "DeviceNetworkEvents"
                    ],
                    "connectorId": "MicrosoftThreatProtection"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "SecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "WindowsSecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "WindowsEvent"
                    ],
                    "connectorId": "WindowsForwardedEvents"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Zscaler"
                  },
                  {
                    "dataTypes": [
                      "Syslog"
                    ],
                    "connectorId": "MicrosoftSysmonForLinux"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "PaloAltoNetworks"
                  },
                  {
                    "dataTypes": [
                      "VMConnection"
                    ],
                    "connectorId": "AzureMonitor(VMInsights)"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureFirewall"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureNSG"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoASA"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoAsaAma"
                  },
                  {
                    "dataTypes": [
                      "Corelight_CL"
                    ],
                    "connectorId": "Corelight"
                  },
                  {
                    "dataTypes": [
                      "VectraStream"
                    ],
                    "connectorId": "AIVectraStream"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CheckPoint"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Fortinet"
                  },
                  {
                    "dataTypes": [
                      "Syslog",
                      "CiscoMerakiNativePoller"
                    ],
                    "connectorId": "CiscoMeraki"
                  }
                ],
                "tactics": [
                  "CommandAndControl",
                  "Discovery",
                  "Exfiltration",
                  "LateralMovement"
                ],
                "techniques": [
                  "T1095",
                  "T1071",
                  "T1046",
                  "T1030",
                  "T1210"
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "Score": "score",
                  "AnomalyFieldType": "anomalyFieldType",
                  "AnomalyFieldValue": "anomalyFieldValue"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Anomaly was observed with {{anomalyFieldValue}} Traffic",
                  "alertDescriptionFormat": "Based on past data, anomaly was observed in {{anomalyFieldValue}} Traffic with a score of {{score}}."
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject1').analyticRuleId1,'/'))))]",
              "properties": {
                "description": "Network Session Essentials Analytics Rule 1",
                "parentId": "[variables('analyticRuleObject1').analyticRuleId1]",
                "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject1').analyticRuleVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
        "contentKind": "AnalyticsRule",
        "displayName": "Anomaly found in Network Session Traffic (ASIM Network Session schema)",
        "contentProductId": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "id": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject2').analyticRuleTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Anomaly in SMB Traffic(ASIM Network Session schema)_AnalyticalRules Analytics Rule with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject2').analyticRuleVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This detection detects abnormal SMB traffic, a file-sharing protocol. By calculating the average deviation of SMB connections over last 14 days, flagging sources exceeding 50 average deviations.",
                "displayName": "Anomaly in SMB Traffic(ASIM Network Session schema)",
                "enabled": false,
                "query": "// Define the threshold for deviation\nlet threshold = 50;\n// Define the time range for the baseline data\nlet starttime = 14d;\nlet endtime = 1d;\n// Define the SMB ports to monitor\nlet SMBPorts = dynamic([\"139\", \"445\"]);\n// Get the baseline data for user network sessions and Filter for the defined time range\nlet userBaseline = _Im_NetworkSession(starttime=ago(starttime), endtime=ago(endtime))\n  | where ipv4_is_private(SrcIpAddr) and tostring(DstPortNumber) has_any (SMBPorts) and SrcIpAddr != DstIpAddr // Filter for private IP addresses and SMB ports\n  | summarize Count = count() by SrcIpAddr, DstPortNumber // Group by source IP and destination port\n  | summarize AvgCount = avg(Count) by SrcIpAddr, DstPortNumber; // Calculate the average count\n// Get the recent user activity data and Filter for recent activity\nlet recentUserActivity = _Im_NetworkSession(starttime=ago(endtime))\n  | where ipv4_is_private(SrcIpAddr) and tostring(DstPortNumber) has_any (SMBPorts) and SrcIpAddr != DstIpAddr // Filter for private IP addresses and SMB ports\n  | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), RecentCount = count() by SrcIpAddr, DstPortNumber; // Group by source IP and destination port\n// Join the baseline and recent activity data\nlet UserBehaviorAnalysis = userBaseline\n  | join kind=inner (recentUserActivity) on SrcIpAddr, DstPortNumber\n  | extend Deviation = abs(RecentCount - AvgCount) / AvgCount; // Calculate the deviation\n// Filter for deviations greater than the threshold\nUserBehaviorAnalysis\n  | where Deviation > threshold\n  | project SrcIpAddr, DstPortNumber, Deviation, Count = RecentCount; // Project the required columns\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "LateralMovement"
                ],
                "subTechniques": [
                  "T1021.002"
                ],
                "techniques": [
                  "T1021",
                  "T1021"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ],
                    "entityType": "IP"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject2').analyticRuleId2,'/'))))]",
              "properties": {
                "description": "Network Session Essentials Analytics Rule 2",
                "parentId": "[variables('analyticRuleObject2').analyticRuleId2]",
                "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject2').analyticRuleVersion2]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
        "contentKind": "AnalyticsRule",
        "displayName": "Anomaly in SMB Traffic(ASIM Network Session schema)",
        "contentProductId": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "id": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject3').analyticRuleTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Remote Desktop Network Brute force (ASIM Network Session schema)_AnalyticalRules Analytics Rule with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject3').analyticRuleVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This detection identifies RDP application network traffic and filters any source/destination pair generating more than 25 events hard threshold.",
                "displayName": "Remote Desktop Network Brute force (ASIM Network Session schema)",
                "enabled": false,
                "query": "// Start of the query and  Filter events that resulted in failure\n_Im_NetworkSession(eventresult=\"Failure\")\n// Filter out private source IP addresses and focus on specific destination port (3389)\n// Also, ensure that the source and destination IP addresses are not the same\n| where not(ipv4_is_private(SrcIpAddr)) and tostring(DstPortNumber) has_any (\"3389\") and SrcIpAddr != DstIpAddr\n// Summarize the data by source and destination IP addresses, destination port number, network protocol, and event result\n// Also, bin the time generated in 5-minute intervals\n// Calculate the minimum and maximum time generated, the sum of event counts, and a set of up to 10 event vendors\n| summarize Starttime= min(TimeGenerated),EndTime= max(TimeGenerated),TargettedIPs=dcount(DstIpAddr),Eventscount=sum(EventCount),EventVendors=make_set(EventVendor,10) by SrcIpAddr,DstPortNumber,EventResult, bin(TimeGenerated, 5m)\n// Filter the summarized data to include only those with an event count of 25 or more\n| where Eventscount >= 25\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "CredentialAccess"
                ],
                "techniques": [
                  "T1110"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ],
                    "entityType": "IP"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject3').analyticRuleId3,'/'))))]",
              "properties": {
                "description": "Network Session Essentials Analytics Rule 3",
                "parentId": "[variables('analyticRuleObject3').analyticRuleId3]",
                "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject3').analyticRuleVersion3]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
        "contentKind": "AnalyticsRule",
        "displayName": "Remote Desktop Network Brute force (ASIM Network Session schema)",
        "contentProductId": "[variables('analyticRuleObject3')._analyticRulecontentProductId3]",
        "id": "[variables('analyticRuleObject3')._analyticRulecontentProductId3]",
        "version": "[variables('analyticRuleObject3').analyticRuleVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject4').analyticRuleTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DetectPortMisuseByAnomalyBasedDetection_AnalyticalRules Analytics Rule with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject4').analyticRuleVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule detects anomalous pattern in port usage. The rule utilize [ASIM](https://aka.ms/AboutASIM) normalization, and is applied to any source which supports the ASIM Network Session schema. To tune the rule to your environment configure it using the 'NetworkSession_Monitor_Configuration' watchlist. Note that to enhance performance, the rule uses summarized data generated from the summarization logic App.",
                "displayName": "Detect port misuse by anomaly based detection (ASIM Network Session schema)",
                "enabled": false,
                "query": "let lookback = 14d;\nlet mapping = _GetWatchlist('NetworkSession_Monitor_Configuration')\n| where Type == \"Detection\" and ThresholdType == \"Anomaly\" and Severity != \"Disabled\"  \n| extend Ports = split(Ports,\",\"),\n        App = split(App,\",\"),\n        Protocol = split(Protocol,\",\"),\n        Direction = split(Direction,\",\"),\n        Action = split(Action,\",\")\n| project Ports, App, Protocol, Direction, Action, Type, ThresholdType, Threshold, Severity, Tactic, Name, Description\n| mv-expand Ports\n| mv-expand App\n| mv-expand Protocol\n| mv-expand Direction\n| mv-expand Action\n| extend Ports = tostring(Ports), App = tostring(App), Protocol = tostring(Protocol), Direction = tostring(Direction), Action = tostring(Action), Threshold = toint(Threshold)\n;\nlet AnomalyThreshold = 2.5;\nlet eps = materialize (_Im_NetworkSession | project TimeGenerated | where TimeGenerated > ago(5m) | count | extend Count = Count/300);\nlet maxSummarizedTime = toscalar (\n    union isfuzzy=true \n        (\n            NetworkCustomAnalytics_protocol_CL\n                | where EventTime_t > ago(lookback)\n                | summarize max_TimeGenerated=max(EventTime_t)\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\n        ),\n        (\n            print(ago(lookback))\n            | project max_TimeGenerated = print_0\n        )\n      | summarize maxTimeGenerated = max(max_TimeGenerated) \n    );\nlet nosummary = materialize(\n              union isfuzzy=true \n                (\n                    NetworkCustomAnalytics_protocol_CL\n                    | where EventTime_t > ago(1d) \n                    | project v = int(2)\n                ),\n                (\n                    print int(1) \n                    | project v = print_0\n                )\n                | summarize maxv = max(v)\n                | extend nosum = (maxv > 1)\n              );\nlet allData = union isfuzzy=true \n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) > 1000 | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(2d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) between (501 .. 1000) | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(3d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) <= 500 | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(4d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t > ago(lookback)\n        | project-rename NetworkProtocol=NetworkProtocol_s, DstPortNumber=DstPortNumber_d, DstAppName=DstAppName_s, NetworkDirection=NetworkDirection_s, DvcAction=DvcAction_s, Count=count__d, EventTime=EventTime_t\n        | extend Count = toint(Count),DstPortNumber = toint(DstPortNumber) \n    )\n;\nallData\n| where isnotempty(DstPortNumber)\n| make-series Total=sum(Count) on EventTime from ago(lookback) to now() step 1d by DstPortNumber, NetworkProtocol, NetworkDirection, DvcAction\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, AnomalyThreshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, Total\n| extend anomalies = toint(anomalies), score = toint(score), baseline = toint(baseline), EventTime = todatetime(EventTime), Total = tolong(Total)\n| where EventTime >= ago(1d)\n| extend DstPortNumber = trim_end(\".0\",tostring(DstPortNumber))\n| where score > 2*AnomalyThreshold\n| join kind=inner ['mapping'] where Ports == DstPortNumber\n| where (Protocol == \"*\" or Protocol has NetworkProtocol)\n                and (Direction == \"*\" or Direction has NetworkDirection)\n                and (Action == \"*\" or Action has DvcAction)  \n| project Name, Description, NetworkProtocol, DstPortNumber, NetworkDirection, DvcAction, Severity, Tactic\n| summarize NetworkProtocols=make_set_if(NetworkProtocol,isnotempty(NetworkProtocol),20), \n                    NetworkDirections=make_set_if(NetworkDirection,isnotempty(NetworkDirection),5), \n                    DvcActions=make_set_if(DvcAction,isnotempty(DvcAction),10) by Name, Severity, Tactic, DstPortNumber, Description\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AWSVPCFlow"
                    ],
                    "connectorId": "AWSS3"
                  },
                  {
                    "dataTypes": [
                      "DeviceNetworkEvents"
                    ],
                    "connectorId": "MicrosoftThreatProtection"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "SecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "WindowsSecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "WindowsEvent"
                    ],
                    "connectorId": "WindowsForwardedEvents"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Zscaler"
                  },
                  {
                    "dataTypes": [
                      "Syslog"
                    ],
                    "connectorId": "MicrosoftSysmonForLinux"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "PaloAltoNetworks"
                  },
                  {
                    "dataTypes": [
                      "VMConnection"
                    ],
                    "connectorId": "AzureMonitor(VMInsights)"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureFirewall"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureNSG"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoASA"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoAsaAma"
                  },
                  {
                    "dataTypes": [
                      "Corelight_CL"
                    ],
                    "connectorId": "Corelight"
                  },
                  {
                    "dataTypes": [
                      "VectraStream"
                    ],
                    "connectorId": "AIVectraStream"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CheckPoint"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Fortinet"
                  },
                  {
                    "dataTypes": [
                      "Syslog",
                      "CiscoMerakiNativePoller"
                    ],
                    "connectorId": "CiscoMeraki"
                  }
                ],
                "tactics": [
                  "CommandAndControl",
                  "LateralMovement",
                  "Execution",
                  "InitialAccess"
                ],
                "techniques": [
                  "T1095",
                  "T1059",
                  "T1203",
                  "T1190"
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "DstPortNumber": "DstPortNumber",
                  "AllNetworkDirections": "NetworkDirections",
                  "AllNetworkProtocols": "NetworkProtocols",
                  "AllDvcAction": "DvcActions"
                },
                "alertDetailsOverride": {
                  "alertSeverityColumnName": "Severity",
                  "alertDisplayNameFormat": "Detected {{Name}}",
                  "alertTacticsColumnName": "Tactic",
                  "alertDescriptionFormat": "{{Description}}"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject4').analyticRuleId4,'/'))))]",
              "properties": {
                "description": "Network Session Essentials Analytics Rule 4",
                "parentId": "[variables('analyticRuleObject4').analyticRuleId4]",
                "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject4').analyticRuleVersion4]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
        "contentKind": "AnalyticsRule",
        "displayName": "Detect port misuse by anomaly based detection (ASIM Network Session schema)",
        "contentProductId": "[variables('analyticRuleObject4')._analyticRulecontentProductId4]",
        "id": "[variables('analyticRuleObject4')._analyticRulecontentProductId4]",
        "version": "[variables('analyticRuleObject4').analyticRuleVersion4]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject5').analyticRuleTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DetectPortMisuseByStaticThreshold_AnalyticalRules Analytics Rule with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject5').analyticRuleVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This detection rule detects port usage above the configured threshold. The rule utilize [ASIM](https://aka.ms/AboutASIM) normalization, and is applied to any source which supports the ASIM Network Session schema. To tune the rule to your environment configure it using the 'NetworkSession_Monitor_Configuration' watchlist. Note that to enhance performance, the rule uses summarized data generated from the summarization logic app.",
                "displayName": "Detect port misuse by static threshold (ASIM Network Session schema)",
                "enabled": false,
                "query": "let lookback = 10m; \nlet mapping = _GetWatchlist('NetworkSession_Monitor_Configuration')\n| where Type == \"Detection\" and ThresholdType == \"Static\" and Severity != \"Disabled\"  \n| extend Ports = split(Ports,\",\"),\n        App = split(App,\",\"),\n        Protocol = split(Protocol,\",\"),\n        Direction = split(Direction,\",\"),\n        Action = split(Action,\",\")\n| project Ports, App, Protocol, Direction, Action, Type, ThresholdType, Threshold, Severity, Tactic, Name, Description\n| mv-expand Ports\n| mv-expand App\n| mv-expand Protocol\n| mv-expand Direction\n| mv-expand Action\n| extend Ports = tostring(Ports), App = tostring(App), Protocol = tostring(Protocol), Direction = tostring(Direction), Action = tostring(Action), Threshold = toint(Threshold)\n;\nlet nosummary = materialize(\n              union isfuzzy=true \n                (\n                    NetworkCustomAnalytics_protocol_CL \n                    | project v = int(2)\n                ),\n                (\n                    print int(1) \n                    | project v = print_0\n                )\n                | summarize maxv = max(v)\n                | extend nosum = (maxv > 1)\n              );\nlet allData = union isfuzzy=true \n    (\n        (datatable(exists:int, nosum:bool)[1,false] | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=bin(now(-10m),10m), endtime=bin(now(),10m))\n        | where TimeGenerated > bin(now(-10m),10m)\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t == toscalar(NetworkCustomAnalytics_protocol_CL | summarize max(EventTime_t))\n        | project-rename NetworkProtocol=NetworkProtocol_s, DstPortNumber=DstPortNumber_d, DstAppName=DstAppName_s, NetworkDirection=NetworkDirection_s, DvcAction=DvcAction_s, Count=count__d, EventTime=EventTime_t\n        | extend Count = toint(Count),DstPortNumber = toint(DstPortNumber)\n    )\n;\nallData\n      | where isnotempty(DstPortNumber)\n      | summarize Sum=sum(Count) by DstPortNumber, NetworkProtocol, NetworkDirection, DvcAction \n      | join kind=inner ['mapping'] where Ports has tostring(DstPortNumber)\n      | where Sum > Threshold         \n                and (Protocol == \"*\" or Protocol has NetworkProtocol)\n                and (Direction == \"*\" or Direction has NetworkDirection)\n                and (Action == \"*\" or Action has DvcAction)\n      | project Name, Description, NetworkProtocol, DstPortNumber, NetworkDirection, DvcAction, Severity, Tactic\n      | summarize NetworkProtocols=make_set_if(NetworkProtocol,isnotempty(NetworkProtocol),20), \n                  NetworkDirections=make_set_if(NetworkDirection,isnotempty(NetworkDirection),5), \n                  DvcActions=make_set_if(DvcAction,isnotempty(DvcAction),10) by Name, Severity, Tactic, DstPortNumber, Description\n",
                "queryFrequency": "PT10M",
                "queryPeriod": "PT30M",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AWSVPCFlow"
                    ],
                    "connectorId": "AWSS3"
                  },
                  {
                    "dataTypes": [
                      "DeviceNetworkEvents"
                    ],
                    "connectorId": "MicrosoftThreatProtection"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "SecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "WindowsSecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "WindowsEvent"
                    ],
                    "connectorId": "WindowsForwardedEvents"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Zscaler"
                  },
                  {
                    "dataTypes": [
                      "Syslog"
                    ],
                    "connectorId": "MicrosoftSysmonForLinux"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "PaloAltoNetworks"
                  },
                  {
                    "dataTypes": [
                      "VMConnection"
                    ],
                    "connectorId": "AzureMonitor(VMInsights)"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureFirewall"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureNSG"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoASA"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoAsaAma"
                  },
                  {
                    "dataTypes": [
                      "Corelight_CL"
                    ],
                    "connectorId": "Corelight"
                  },
                  {
                    "dataTypes": [
                      "VectraStream"
                    ],
                    "connectorId": "AIVectraStream"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CheckPoint"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Fortinet"
                  },
                  {
                    "dataTypes": [
                      "Syslog",
                      "CiscoMerakiNativePoller"
                    ],
                    "connectorId": "CiscoMeraki"
                  }
                ],
                "tactics": [
                  "CommandAndControl",
                  "Execution",
                  "InitialAccess"
                ],
                "techniques": [
                  "T1095",
                  "T1059",
                  "T1203",
                  "T1190"
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "DstPortNumber": "DstPortNumber",
                  "AllNetworkDirections": "NetworkDirections",
                  "AllNetworkProtocols": "NetworkProtocols",
                  "AllDvcAction": "DvcActions"
                },
                "alertDetailsOverride": {
                  "alertSeverityColumnName": "Severity",
                  "alertDisplayNameFormat": "Detected {{Name}}",
                  "alertTacticsColumnName": "Tactic",
                  "alertDescriptionFormat": "{{Description}}"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject5').analyticRuleId5,'/'))))]",
              "properties": {
                "description": "Network Session Essentials Analytics Rule 5",
                "parentId": "[variables('analyticRuleObject5').analyticRuleId5]",
                "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject5').analyticRuleVersion5]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
        "contentKind": "AnalyticsRule",
        "displayName": "Detect port misuse by static threshold (ASIM Network Session schema)",
        "contentProductId": "[variables('analyticRuleObject5')._analyticRulecontentProductId5]",
        "id": "[variables('analyticRuleObject5')._analyticRulecontentProductId5]",
        "version": "[variables('analyticRuleObject5').analyticRuleVersion5]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject6').analyticRuleTemplateSpecName6]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NetworkPortSweepFromExternalNetwork_AnalyticalRules Analytics Rule with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject6').analyticRuleVersion6]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This detection rule detects scenarios when a particular port is being scanned by multiple external sources. The rule utilize [ASIM](https://aka.ms/AboutASIM) normalization, and is applied to any source which supports the ASIM Network Session schema.",
                "displayName": "Network Port Sweep from External Network (ASIM Network Session schema)",
                "enabled": false,
                "query": "let lookback = 1h;\nlet threshold = 20;\n_Im_NetworkSession(starttime=ago(lookback),endtime=now())\n| where NetworkDirection == \"Inbound\"\n| summarize make_set(DstIpAddr,100) by DstPortNumber\n| where array_length(set_DstIpAddr) > threshold\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AWSVPCFlow"
                    ],
                    "connectorId": "AWSS3"
                  },
                  {
                    "dataTypes": [
                      "DeviceNetworkEvents"
                    ],
                    "connectorId": "MicrosoftThreatProtection"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "SecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "WindowsSecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "WindowsEvent"
                    ],
                    "connectorId": "WindowsForwardedEvents"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Zscaler"
                  },
                  {
                    "dataTypes": [
                      "Syslog"
                    ],
                    "connectorId": "MicrosoftSysmonForLinux"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "PaloAltoNetworks"
                  },
                  {
                    "dataTypes": [
                      "VMConnection"
                    ],
                    "connectorId": "AzureMonitor(VMInsights)"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureFirewall"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureNSG"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoASA"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoAsaAma"
                  },
                  {
                    "dataTypes": [
                      "Corelight_CL"
                    ],
                    "connectorId": "Corelight"
                  },
                  {
                    "dataTypes": [
                      "VectraStream"
                    ],
                    "connectorId": "AIVectraStream"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CheckPoint"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Fortinet"
                  },
                  {
                    "dataTypes": [
                      "Syslog",
                      "CiscoMerakiNativePoller"
                    ],
                    "connectorId": "CiscoMeraki"
                  }
                ],
                "tactics": [
                  "Discovery"
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "SingleAlert"
                },
                "customDetails": {
                  "AllDstIpAddr": "set_DstIpAddr"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Network Port Sweep detected on {{DstPortNumber}}",
                  "alertDescriptionFormat": "Network Port Sweep was detection by multiple IPs"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject6').analyticRuleId6,'/'))))]",
              "properties": {
                "description": "Network Session Essentials Analytics Rule 6",
                "parentId": "[variables('analyticRuleObject6').analyticRuleId6]",
                "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject6').analyticRuleVersion6]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
        "contentKind": "AnalyticsRule",
        "displayName": "Network Port Sweep from External Network (ASIM Network Session schema)",
        "contentProductId": "[variables('analyticRuleObject6')._analyticRulecontentProductId6]",
        "id": "[variables('analyticRuleObject6')._analyticRulecontentProductId6]",
        "version": "[variables('analyticRuleObject6').analyticRuleVersion6]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject7').analyticRuleTemplateSpecName7]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ExcessiveHTTPFailuresFromSource_AnalyticalRules Analytics Rule with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject7').analyticRuleVersion7]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule identifies a single source that generates an excessive amount of failed connections. Modify the threshold to change the sensitivity of the rule: the higher the threshold, the less sensitive is the rule and less incidents will be generated.\n This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema",
                "displayName": "Excessive number of failed connections from a single source (ASIM Network Session schema)",
                "enabled": false,
                "query": "let threshold = 5000;\n_Im_NetworkSession(eventresult='Failure')\n| summarize Count=count() by SrcIpAddr, bin(TimeGenerated,5m)\n| where Count > threshold\n| extend timestamp = TimeGenerated, threshold\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AWSVPCFlow"
                    ],
                    "connectorId": "AWSS3"
                  },
                  {
                    "dataTypes": [
                      "DeviceNetworkEvents"
                    ],
                    "connectorId": "MicrosoftThreatProtection"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "SecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "WindowsSecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "WindowsEvent"
                    ],
                    "connectorId": "WindowsForwardedEvents"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Zscaler"
                  },
                  {
                    "dataTypes": [
                      "Syslog"
                    ],
                    "connectorId": "MicrosoftSysmonForLinux"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "PaloAltoNetworks"
                  },
                  {
                    "dataTypes": [
                      "VMConnection"
                    ],
                    "connectorId": "AzureMonitor(VMInsights)"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureFirewall"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureNSG"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoASA"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoAsaAma"
                  },
                  {
                    "dataTypes": [
                      "Corelight_CL"
                    ],
                    "connectorId": "Corelight"
                  },
                  {
                    "dataTypes": [
                      "VectraStream"
                    ],
                    "connectorId": "AIVectraStream"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CheckPoint"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Fortinet"
                  },
                  {
                    "dataTypes": [
                      "Syslog",
                      "CiscoMerakiNativePoller"
                    ],
                    "connectorId": "CiscoMeraki"
                  }
                ],
                "tactics": [
                  "Impact"
                ],
                "techniques": [
                  "T1499"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ],
                    "entityType": "IP"
                  }
                ],
                "customDetails": {
                  "NumberOfDenies": "Count"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Excessive number of failed connections from {{SrcIpAddr}}",
                  "alertDescriptionFormat": "The client at address {{SrcIpAddr}} generated more than {{threshold}} failures over a 5 minutes time window, which may indicate malicious activity."
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject7').analyticRuleId7,'/'))))]",
              "properties": {
                "description": "Network Session Essentials Analytics Rule 7",
                "parentId": "[variables('analyticRuleObject7').analyticRuleId7]",
                "contentId": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject7').analyticRuleVersion7]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
        "contentKind": "AnalyticsRule",
        "displayName": "Excessive number of failed connections from a single source (ASIM Network Session schema)",
        "contentProductId": "[variables('analyticRuleObject7')._analyticRulecontentProductId7]",
        "id": "[variables('analyticRuleObject7')._analyticRulecontentProductId7]",
        "version": "[variables('analyticRuleObject7').analyticRuleVersion7]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject8').analyticRuleTemplateSpecName8]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "PortScan_AnalyticalRules Analytics Rule with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject8').analyticRuleVersion8]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule identifies a possible port scan, in which a single source tries to access a large number of different ports is a short time frame. This may indicate that a [port scanner](https://en.wikipedia.org/wiki/Port_scanner) is trying to identify open ports in order to penetrate a system.\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema",
                "displayName": "Port scan detected  (ASIM Network Session schema)",
                "enabled": false,
                "query": "let PortScanThreshold = 50;\n_Im_NetworkSession\n| where ipv4_is_private(SrcIpAddr) == False\n| where SrcIpAddr !in (\"127.0.0.1\", \"::1\")\n| summarize AttemptedPortsCount=dcount(DstPortNumber), AttemptedPorts=make_set(DstPortNumber, 100), ReportedBy=make_set(strcat(EventVendor, \"/\", EventProduct), 20) by SrcIpAddr, bin(TimeGenerated, 5m)\n| where AttemptedPortsCount > PortScanThreshold\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AWSVPCFlow"
                    ],
                    "connectorId": "AWSS3"
                  },
                  {
                    "dataTypes": [
                      "DeviceNetworkEvents"
                    ],
                    "connectorId": "MicrosoftThreatProtection"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "SecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "WindowsSecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "WindowsEvent"
                    ],
                    "connectorId": "WindowsForwardedEvents"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Zscaler"
                  },
                  {
                    "dataTypes": [
                      "Syslog"
                    ],
                    "connectorId": "MicrosoftSysmonForLinux"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "PaloAltoNetworks"
                  },
                  {
                    "dataTypes": [
                      "VMConnection"
                    ],
                    "connectorId": "AzureMonitor(VMInsights)"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureFirewall"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureNSG"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoASA"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoAsaAma"
                  },
                  {
                    "dataTypes": [
                      "Corelight_CL"
                    ],
                    "connectorId": "Corelight"
                  },
                  {
                    "dataTypes": [
                      "VectraStream"
                    ],
                    "connectorId": "AIVectraStream"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CheckPoint"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Fortinet"
                  },
                  {
                    "dataTypes": [
                      "Syslog",
                      "CiscoMerakiNativePoller"
                    ],
                    "connectorId": "CiscoMeraki"
                  }
                ],
                "tactics": [
                  "Discovery"
                ],
                "techniques": [
                  "T1046"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ],
                    "entityType": "IP"
                  }
                ],
                "customDetails": {
                  "AttemptedPortsCount": "AttemptedPortsCount"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Potential port scan from {{SrcIpAddr}}",
                  "alertDescriptionFormat": "A port scan has been performed from address {{SrcIpAddr}} over {{AttemptedPortsCount}} ports within 5 minutes. This may indicate that a [port scanner](https://en.wikipedia.org/wiki/Port_scanner) is trying to identify open ports in order to penetrate a system."
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject8').analyticRuleId8,'/'))))]",
              "properties": {
                "description": "Network Session Essentials Analytics Rule 8",
                "parentId": "[variables('analyticRuleObject8').analyticRuleId8]",
                "contentId": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject8').analyticRuleVersion8]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
        "contentKind": "AnalyticsRule",
        "displayName": "Port scan detected  (ASIM Network Session schema)",
        "contentProductId": "[variables('analyticRuleObject8')._analyticRulecontentProductId8]",
        "id": "[variables('analyticRuleObject8')._analyticRulecontentProductId8]",
        "version": "[variables('analyticRuleObject8').analyticRuleVersion8]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject9').analyticRuleTemplateSpecName9]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "PossibleBeaconingActivity_AnalyticalRules Analytics Rule with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject9').analyticRuleVersion9]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule identifies beaconing patterns from Network traffic logs based on recurrent frequency patterns. \nSuch potential outbound beaconing patterns to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts as discussed in this [Blog](https://medium.com/@HuntOperator/detect-beaconing-with-flare-elastic-stack-and-intrusion-detection-systems-110dc74e0c56).\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema'",
                "displayName": "Potential beaconing activity (ASIM Network Session schema)",
                "enabled": false,
                "query": "let querystarttime = 2d;\nlet queryendtime = 1d;\nlet TimeDeltaThreshold = 10;\nlet TotalEventsThreshold = 15;\nlet PercentBeaconThreshold = 80;\nlet LocalNetworks=dynamic([\"169.254.0.0/16\",\"127.0.0.0/8\"]);\n_Im_NetworkSession(starttime=ago(querystarttime), endtime=ago(queryendtime))\n| where not(ipv4_is_private(DstIpAddr))\n| where not (ipv4_is_in_any_range(DstIpAddr, LocalNetworks))\n| project \n    TimeGenerated\n    , SrcIpAddr\n    , SrcPortNumber\n    , DstIpAddr\n    , DstPortNumber\n    , DstBytes\n    , SrcBytes\n| sort by \n    SrcIpAddr asc\n    , TimeGenerated asc\n    , DstIpAddr asc\n    , DstPortNumber asc\n| serialize\n| extend \n    nextTimeGenerated = next(TimeGenerated, 1)\n    , nextSrcIpAddr = next(SrcIpAddr, 1)\n| extend \n    TimeDeltainSeconds = datetime_diff('second', nextTimeGenerated, TimeGenerated)\n| where SrcIpAddr == nextSrcIpAddr\n//Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds > TimeDeltaThreshold \n| project\n    TimeGenerated\n    , TimeDeltainSeconds\n    , SrcIpAddr\n    , SrcPortNumber\n    , DstIpAddr\n    , DstPortNumber\n    , DstBytes\n    , SrcBytes\n| summarize\n    count()\n    , sum(DstBytes)\n    , sum(SrcBytes)\n    , make_list(TimeDeltainSeconds) \n    by TimeDeltainSeconds\n        , bin(TimeGenerated, 1h)\n        , SrcIpAddr\n        , DstIpAddr\n        , DstPortNumber\n| summarize\n    (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds)\n    , TotalEvents=sum(count_)\n    , TotalSrcBytes = sum(sum_SrcBytes)\n    , TotalDstBytes = sum(sum_DstBytes)\n    by bin(TimeGenerated, 1h)\n        , SrcIpAddr\n        , DstIpAddr\n        , DstPortNumber\n| where TotalEvents > TotalEventsThreshold \n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P2D",
                "severity": "Low",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "AWSVPCFlow"
                    ],
                    "connectorId": "AWSS3"
                  },
                  {
                    "dataTypes": [
                      "DeviceNetworkEvents"
                    ],
                    "connectorId": "MicrosoftThreatProtection"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "SecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "SecurityEvent"
                    ],
                    "connectorId": "WindowsSecurityEvents"
                  },
                  {
                    "dataTypes": [
                      "WindowsEvent"
                    ],
                    "connectorId": "WindowsForwardedEvents"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Zscaler"
                  },
                  {
                    "dataTypes": [
                      "Syslog"
                    ],
                    "connectorId": "MicrosoftSysmonForLinux"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "PaloAltoNetworks"
                  },
                  {
                    "dataTypes": [
                      "VMConnection"
                    ],
                    "connectorId": "AzureMonitor(VMInsights)"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureFirewall"
                  },
                  {
                    "dataTypes": [
                      "AzureDiagnostics"
                    ],
                    "connectorId": "AzureNSG"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoASA"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CiscoAsaAma"
                  },
                  {
                    "dataTypes": [
                      "Corelight_CL"
                    ],
                    "connectorId": "Corelight"
                  },
                  {
                    "dataTypes": [
                      "VectraStream"
                    ],
                    "connectorId": "AIVectraStream"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CheckPoint"
                  },
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "Fortinet"
                  },
                  {
                    "dataTypes": [
                      "Syslog",
                      "CiscoMerakiNativePoller"
                    ],
                    "connectorId": "CiscoMeraki"
                  }
                ],
                "tactics": [
                  "CommandAndControl"
                ],
                "techniques": [
                  "T1071",
                  "T1571"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "DstIpAddr"
                      }
                    ],
                    "entityType": "IP"
                  }
                ],
                "customDetails": {
                  "TotalDstBytes": "TotalDstBytes",
                  "FrequencyTime": "MostFrequentTimeDeltaCount",
                  "DstPortNumber": "DstPortNumber",
                  "FrequencyCount": "TotalSrcBytes"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Potential beaconing from {{SrcIpAddr}} to {{DstIpAddr}}",
                  "alertDescriptionFormat": "Potential beaconing pattern from a client at address {{SrcIpAddr}} to a server at address {{DstIpAddr}} over port {{DstPortNumber}} identified. Such potential outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts as discussed in this [Blog](http://www.austintaylor.io/detect/beaconing/intrusion/detection/system/command/control/flare/elastic/stack/2017/06/10/detect-beaconing-with-flare-elasticsearch-and-intrusion-detection-systems/). The recurring frequency, reported as FrequencyTime in the custom details, and the total transferred volume reported as TotalDstBytes in the custom details, can help to determine the significance of this incident."
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject9').analyticRuleId9,'/'))))]",
              "properties": {
                "description": "Network Session Essentials Analytics Rule 9",
                "parentId": "[variables('analyticRuleObject9').analyticRuleId9]",
                "contentId": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject9').analyticRuleVersion9]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
        "contentKind": "AnalyticsRule",
        "displayName": "Potential beaconing activity (ASIM Network Session schema)",
        "contentProductId": "[variables('analyticRuleObject9')._analyticRulecontentProductId9]",
        "id": "[variables('analyticRuleObject9')._analyticRulecontentProductId9]",
        "version": "[variables('analyticRuleObject9').analyticRuleVersion9]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "SummarizeData_NSE Playbook with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "SummarizeData_NSE",
              "type": "string"
            },
            "logAnalyticsName": {
              "type": "string",
              "metadata": {
                "description": "Enter value for logAnalyticsName"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Enter value for resourceGroupName"
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Enter value for subscriptionId"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "AzuremonitorlogsConnectionName": "[[concat('Azuremonitorlogs-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "logAnalyticsName": {
                      "type": "string",
                      "defaultValue": "[[parameters('logAnalyticsName')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[[parameters('resourceGroupName')]"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[[parameters('subscriptionId')]"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Minute",
                        "interval": 10
                      },
                      "evaluatedRecurrence": {
                        "frequency": "Minute",
                        "interval": 10
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "Condition": {
                      "actions": {
                        "Condition_-_If_data_-_IP": {
                          "actions": {
                            "For_each_-_SubArray_-_IP": {
                              "foreach": "@variables('multipleArraysIP')",
                              "actions": {
                                "Send_Data_-_IP": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": "@{items('For_each_-_SubArray_-_IP')}",
                                    "headers": {
                                      "Log-Type": "NetworkCustomAnalytics_ip_CL"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/api/logs"
                                  }
                                }
                              },
                              "runAfter": {
                                "Set_variable_-_multipleArrays_-_IP": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach"
                            },
                            "Set_variable_-_multipleArrays_-_IP": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "multipleArraysIP",
                                "value": "@chunk(body('Run_query_and_list_results_-_IP')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthIP'),variables('ArraySizeIP'))))"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_TotalCharacterLength_-_IP": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@variables('ArraySizeIP')",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Condition_-_If_data_-_Port": {
                          "actions": {
                            "For_each_-_SubArray_-_Port": {
                              "foreach": "@variables('multipleArraysPort')",
                              "actions": {
                                "Send_Data_-_Port": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": "@{items('For_each_-_SubArray_-_Port')}",
                                    "headers": {
                                      "Log-Type": "NetworkCustomAnalytics_source_port_CL"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/api/logs"
                                  }
                                }
                              },
                              "runAfter": {
                                "Set_variable_-_multipleArrays_-_Port": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach"
                            },
                            "Set_variable_-_multipleArrays_-_Port": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "multipleArraysPort",
                                "value": "@chunk(body('Run_query_and_list_results_-_Port')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthPort'),variables('ArraySizePort'))))"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_TotalCharacterLength_-_Port": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@variables('ArraySizePort')",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Run_query_and_list_results_-_IP": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           NetworkCustomAnalytics_ip_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('hour',1,bin(max_EventTime_t,1h))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,1h)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_NetworkSession(starttime=lastRecievedTime,endtime=bin(nowTime,1h))\n| where TimeGenerated < bin(nowTime,1h)\n| summarize count() by SrcIpAddr, DstIpAddr, NetworkDirection, DvcAction, bin(TimeGenerated,1h)\n| extend EventTime = TimeGenerated",
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/queryData",
                            "queries": {
                              "resourcegroups": "@parameters('resourceGroupName')",
                              "resourcename": "@parameters('logAnalyticsName')",
                              "resourcetype": "Log Analytics Workspace",
                              "subscriptions": "@parameters('subscriptionId')",
                              "timerange": "Last 1 day"
                            }
                          }
                        },
                        "Run_query_and_list_results_-_Port": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           NetworkCustomAnalytics_source_port_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('hour',1,bin(max_EventTime_t,1h))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,1h)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_NetworkSession(starttime=lastRecievedTime,endtime=bin(nowTime,1h))\n| where TimeGenerated < bin(nowTime,1h)\n| summarize count() by SrcPortNumber, NetworkDirection, DvcAction, bin(TimeGenerated,1h)\n| extend EventTime = TimeGenerated",
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/queryData",
                            "queries": {
                              "resourcegroups": "@parameters('resourceGroupName')",
                              "resourcename": "@parameters('logAnalyticsName')",
                              "resourcetype": "Log Analytics Workspace",
                              "subscriptions": "@parameters('subscriptionId')",
                              "timerange": "Last 1 day"
                            }
                          }
                        },
                        "Set_variable_-_ArraySize_-_IP": {
                          "runAfter": {
                            "Run_query_and_list_results_-_IP": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ArraySizeIP",
                            "value": "@length(body('Run_query_and_list_results_-_IP')?['value'])"
                          }
                        },
                        "Set_variable_-_ArraySize_-_Port": {
                          "runAfter": {
                            "Run_query_and_list_results_-_Port": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ArraySizePort",
                            "value": "@length(body('Run_query_and_list_results_-_Port')?['value'])"
                          }
                        },
                        "Set_variable_-_TotalCharacterLength_-_IP": {
                          "runAfter": {
                            "Set_variable_-_ArraySize_-_IP": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "TotalCharacterLengthIP",
                            "value": "@length(string(body('Run_query_and_list_results_-_IP')?['value']))"
                          }
                        },
                        "Set_variable_-_TotalCharacterLength_-_Port": {
                          "runAfter": {
                            "Set_variable_-_ArraySize_-_Port": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "TotalCharacterLengthPort",
                            "value": "@length(string(body('Run_query_and_list_results_-_Port')?['value']))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArraysPort": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "lessOrEquals": [
                              "@div(sub(ticks(variables('nowTime')),ticks(startOfHour(variables('nowTime')))),10000000)",
                              600
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_-_If_data_-_GeoCountry": {
                      "actions": {
                        "For_each_-_SubArray_-_GeoCountry": {
                          "foreach": "@variables('multipleArraysGeoCountry')",
                          "actions": {
                            "Send_Data_-_GeoCountry": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{items('For_each_-_SubArray_-_GeoCountry')}",
                                "headers": {
                                  "Log-Type": "NetworkCustomAnalytics_country_CL"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_multipleArrays_-_GeoCountry": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Set_variable_-_multipleArrays_-_GeoCountry": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "multipleArraysGeoCountry",
                            "value": "@chunk(body('Run_query_and_list_results_-_GeoCountry')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthGeoCountry'),variables('ArraySizeGeoCountry'))))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArrays_-_GeoCountry": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@variables('ArraySizeGeoCountry')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_-_If_data_-_Overall": {
                      "actions": {
                        "For_each_-_SubArray_-_Overall": {
                          "foreach": "@variables('multipleArraysOverall')",
                          "actions": {
                            "Send_Data_-_Overall": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{items('For_each_-_SubArray_-_Overall')}",
                                "headers": {
                                  "Log-Type": "NetworkCustomAnalytics_CL"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_multipleArrays_-_Overall": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Set_variable_-_multipleArrays_-_Overall": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "multipleArraysOverall",
                            "value": "@chunk(body('Run_query_and_list_results_-_Overall')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthOverall'),variables('ArraySizeOverall'))))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArrays_-_Overall": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@variables('ArraySizeOverall')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_-_If_data_-_Protocol": {
                      "actions": {
                        "For_each_-_SubArray_-_Protocol": {
                          "foreach": "@variables('multipleArraysProtocol')",
                          "actions": {
                            "Send_Data_-_Protocol": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{items('For_each_-_SubArray_-_Protocol')}",
                                "headers": {
                                  "Log-Type": "NetworkCustomAnalytics_protocol_CL"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_multipleArrays_-_Protocol": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Set_variable_-_multipleArrays_-_Protocol": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "multipleArraysProtocol",
                            "value": "@chunk(body('Run_query_and_list_results_-_Protocol')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthProtocol'),variables('ArraySizeProtocol'))))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArrays_-_Protocol": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@variables('ArraySizeProtocol')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_-_If_data_-_SourceInfo": {
                      "actions": {
                        "For_each_-_SubArray_-_SourceInfo": {
                          "foreach": "@variables('multipleArraysSourceInfo')",
                          "actions": {
                            "Send_Data_-_SourceInfo": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{items('For_each_-_SubArray_-_SourceInfo')}",
                                "headers": {
                                  "Log-Type": "NetworkCustomAnalytics_sourceInfo_CL"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_multipleArrays_-_SourceInfo": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Set_variable_-_multipleArrays_-_SourceInfo": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "multipleArraysSourceInfo",
                            "value": "@chunk(body('Run_query_and_list_results_-_SourceInfo')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthSourceInfo'),variables('ArraySizeSourceInfo'))))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArrays_-_SourceInfo": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@variables('ArraySizeSourceInfo')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_-_If_data_-_Threat": {
                      "actions": {
                        "For_each_-_SubArray_-_Threat": {
                          "foreach": "@variables('multipleArraysThreat')",
                          "actions": {
                            "Send_Data_-_Threat": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{items('For_each_-_SubArray_-_Threat')}",
                                "headers": {
                                  "Log-Type": "NetworkCustomAnalytics_threat_CL"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_multipleArrays_-_Threat": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Set_variable_-_multipleArrays_-_Threat": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "multipleArraysThreat",
                            "value": "@chunk(body('Run_query_and_list_results_-_Threat')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthThreat'),variables('ArraySizeThreat'))))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArrays_-_Threat": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@variables('ArraySizeThreat')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_-_If_data_-_ThreatIOC": {
                      "actions": {
                        "For_each_-_SubArray_-_Threat_IOC": {
                          "foreach": "@variables('multipleArrayThreatIOC')",
                          "actions": {
                            "Send_Data_-_Threat_IOC": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{items('For_each_-_SubArray_-_Threat_IOC')}",
                                "headers": {
                                  "Log-Type": "NetworkCustomAnalytics_threat_ioc_CL"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_multipleArray_-_ThreatIOC": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Set_variable_-_multipleArray_-_ThreatIOC": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "multipleArrayThreatIOC",
                            "value": "@chunk(body('Run_query_and_list_results_-_Threat_IOC')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthThreatIOC'),variables('ArraySizeThreatIOC'))))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArray_-_Threat_IOC": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@variables('ArraySizeThreatIOC')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_-_if_data_-_Rule": {
                      "actions": {
                        "For_each_-_SubArray_-_Rule": {
                          "foreach": "@variables('multipleArraysRule')",
                          "actions": {
                            "Send_Data_-_Rule": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{items('For_each_-_SubArray_-_Rule')}",
                                "headers": {
                                  "Log-Type": "NetworkCustomAnalytics_rule_CL"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable__-_multipleArrays_-_Rule": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Set_variable__-_multipleArrays_-_Rule": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "multipleArraysRule",
                            "value": "@chunk(body('Run_query_and_list_results_-_Rules')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthRule'),variables('ArraySizeRule'))))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArrays_-_Rule": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@variables('ArraySizeRule')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_variable_-_ArraySizeIP": {
                      "runAfter": {
                        "Initialize_variable_-_maxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeIP",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_ArraySizePort": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySizeIP": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizePort",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_ArraySize_-_GeoCountry": {
                      "runAfter": {
                        "Run_query_and_list_results_-_GeoCountry": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeGeoCountry",
                            "type": "integer",
                            "value": "@length(body('Run_query_and_list_results_-_GeoCountry')?['value'])"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_ArraySize_-_Overall": {
                      "runAfter": {
                        "Run_query_and_list_results_-_Overall": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeOverall",
                            "type": "integer",
                            "value": "@length(body('Run_query_and_list_results_-_Overall')?['value'])"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_ArraySize_-_Protocol": {
                      "runAfter": {
                        "Run_query_and_list_results_-_Protocol": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeProtocol",
                            "type": "integer",
                            "value": "@length(body('Run_query_and_list_results_-_Protocol')?['value'])"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_ArraySize_-_Rule": {
                      "runAfter": {
                        "Run_query_and_list_results_-_Rules": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeRule",
                            "type": "integer",
                            "value": "@length(body('Run_query_and_list_results_-_Rules')?['value'])"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_ArraySize_-_SourceInfo": {
                      "runAfter": {
                        "Run_query_and_list_results_-_SourceInfo": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeSourceInfo",
                            "type": "integer",
                            "value": "@length(body('Run_query_and_list_results_-_SourceInfo')?['value'])"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_ArraySize_-_Threat": {
                      "runAfter": {
                        "Run_query_and_list_results_-_Threat": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeThreat",
                            "type": "integer",
                            "value": "@length(body('Run_query_and_list_results_-_Threat')?['value'])"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_ArraySize_-_Threat_IOC": {
                      "runAfter": {
                        "Run_query_and_list_results_-_Threat_IOC": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeThreatIOC",
                            "type": "integer",
                            "value": "@length(body('Run_query_and_list_results_-_Threat_IOC')?['value'])"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLengthIP": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySizePort": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthIP",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLengthPort": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLengthIP": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthPort",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLength_-_GeoCountry": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySize_-_GeoCountry": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthGeoCountry",
                            "type": "integer",
                            "value": "@length(string(body('Run_query_and_list_results_-_GeoCountry')?['value']))"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLength_-_Overall": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySize_-_Overall": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthOverall",
                            "type": "integer",
                            "value": "@length(string(body('Run_query_and_list_results_-_Overall')?['value']))"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLength_-_Protocol": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySize_-_Protocol": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthProtocol",
                            "type": "integer",
                            "value": "@length(string(body('Run_query_and_list_results_-_Protocol')?['value']))"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLength_-_Rule": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySize_-_Rule": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthRule",
                            "type": "integer",
                            "value": "@length(string(body('Run_query_and_list_results_-_Rules')?['value']))"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLength_-_SourceInfo": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySize_-_SourceInfo": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthSourceInfo",
                            "type": "integer",
                            "value": "@length(string(body('Run_query_and_list_results_-_SourceInfo')?['value']))"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLength_-_Threat": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySize_-_Threat": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthThreat",
                            "type": "integer",
                            "value": "@length(string(body('Run_query_and_list_results_-_Threat')?['value']))"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLength_-_Threat_IOC": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySize_-_Threat_IOC": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthThreatIOC",
                            "type": "integer",
                            "value": "@length(string(body('Run_query_and_list_results_-_Threat_IOC')?['value']))"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_maxRequestSizeAllowed": {
                      "runAfter": {
                        "Initialize_variable_-_nowTime": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "MaxByteSizeAllowed",
                            "type": "integer",
                            "value": 26214400
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArray_-_Threat_IOC": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLength_-_Threat_IOC": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArrayThreatIOC",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArraysIP": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLengthPort": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysIP",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArraysPort": {
                      "runAfter": {
                        "Initialize_variable_-_multipleArraysIP": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysPort",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArrays_-_GeoCountry": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLength_-_GeoCountry": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysGeoCountry",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArrays_-_Overall": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLength_-_Overall": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysOverall",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArrays_-_Protocol": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLength_-_Protocol": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysProtocol",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArrays_-_Rule": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLength_-_Rule": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysRule",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArrays_-_SourceInfo": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLength_-_SourceInfo": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysSourceInfo",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArrays_-_Threat": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLength_-_Threat": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysThreat",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_nowTime": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "nowTime",
                            "type": "string",
                            "value": "@{utcNow()}"
                          }
                        ]
                      }
                    },
                    "Run_query_and_list_results_-_GeoCountry": {
                      "runAfter": {
                        "Initialize_variable_-_maxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           NetworkCustomAnalytics_country_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('minute',10,bin(max_EventTime_t,10m))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,10m)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_NetworkSession(starttime=lastRecievedTime,endtime=bin(nowTime,10m))\n| where TimeGenerated < bin(nowTime,10m)\n| summarize count() by SrcGeoCountry, DstGeoCountry, DvcAction, NetworkDirection, bin(TimeGenerated,10m)\n| extend EventTime = TimeGenerated",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryData",
                        "queries": {
                          "resourcegroups": "@parameters('resourceGroupName')",
                          "resourcename": "@parameters('logAnalyticsName')",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "@parameters('subscriptionId')",
                          "timerange": "Last 1 day"
                        }
                      }
                    },
                    "Run_query_and_list_results_-_Overall": {
                      "runAfter": {
                        "Initialize_variable_-_maxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           NetworkCustomAnalytics_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('minute',10,bin(max_EventTime_t,10m))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,10m)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_NetworkSession(starttime=lastRecievedTime,endtime=bin(nowTime,10m))\n| where TimeGenerated < bin(nowTime,10m)\n| summarize count() by EventResult, NetworkDirection, DvcAction, EventSeverity, bin(TimeGenerated,10m)\n| extend EventTime = TimeGenerated",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryData",
                        "queries": {
                          "resourcegroups": "@parameters('resourceGroupName')",
                          "resourcename": "@parameters('logAnalyticsName')",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "@parameters('subscriptionId')",
                          "timerange": "Last 1 day"
                        }
                      }
                    },
                    "Run_query_and_list_results_-_Protocol": {
                      "runAfter": {
                        "Initialize_variable_-_maxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           NetworkCustomAnalytics_protocol_CL\n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('minute',10,bin(max_EventTime_t,10m))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,10m)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_NetworkSession(starttime=lastRecievedTime,endtime=bin(nowTime,10m))\n| where TimeGenerated < bin(nowTime,10m)\n| summarize count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n| extend EventTime = TimeGenerated",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryData",
                        "queries": {
                          "resourcegroups": "@parameters('resourceGroupName')",
                          "resourcename": "@parameters('logAnalyticsName')",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "@parameters('subscriptionId')",
                          "timerange": "Last 1 day"
                        }
                      }
                    },
                    "Run_query_and_list_results_-_Rules": {
                      "runAfter": {
                        "Initialize_variable_-_maxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           NetworkCustomAnalytics_rule_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('minute',10,bin(max_EventTime_t,10m))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,10m)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_NetworkSession(starttime=lastRecievedTime,endtime=bin(nowTime,10m))\n| where TimeGenerated < bin(nowTime,10m)\n| summarize count() by Rule, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n| extend EventTime = TimeGenerated",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryData",
                        "queries": {
                          "resourcegroups": "@parameters('resourceGroupName')",
                          "resourcename": "@parameters('logAnalyticsName')",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "@parameters('subscriptionId')",
                          "timerange": "Last 1 day"
                        }
                      }
                    },
                    "Run_query_and_list_results_-_SourceInfo": {
                      "runAfter": {
                        "Initialize_variable_-_maxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           NetworkCustomAnalytics_sourceInfo_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('minute',10,bin(max_EventTime_t,10m))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,10m)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_NetworkSession(starttime=lastRecievedTime,endtime=bin(nowTime,10m))\n| where TimeGenerated < bin(nowTime,10m)\n| extend EventProduct = strcat(EventVendor,\"-\",EventProduct)\n| summarize count() by EventProduct, DvcHostname, bin(TimeGenerated,10m)\n| extend EventTime = TimeGenerated",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryData",
                        "queries": {
                          "resourcegroups": "@parameters('resourceGroupName')",
                          "resourcename": "@parameters('logAnalyticsName')",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "@parameters('subscriptionId')",
                          "timerange": "Last 1 day"
                        }
                      }
                    },
                    "Run_query_and_list_results_-_Threat": {
                      "runAfter": {
                        "Initialize_variable_-_maxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           NetworkCustomAnalytics_threat_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('minute',10,bin(max_EventTime_t,10m))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,10m)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_NetworkSession(starttime=lastRecievedTime,endtime=bin(nowTime,10m))\n| where TimeGenerated < bin(nowTime,10m)\n| extend Threat = coalesce(ThreatId,ThreatName)\n| where isnotempty(Threat) or isnotempty(ThreatCategory)\n| summarize count() by Threat, ThreatCategory, EventSeverity, DvcAction, bin(TimeGenerated,10m)\n| extend EventTime = TimeGenerated",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryData",
                        "queries": {
                          "resourcegroups": "@parameters('resourceGroupName')",
                          "resourcename": "@parameters('logAnalyticsName')",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "@parameters('subscriptionId')",
                          "timerange": "Last 1 day"
                        }
                      }
                    },
                    "Run_query_and_list_results_-_Threat_IOC": {
                      "runAfter": {
                        "Initialize_variable_-_maxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           NetworkCustomAnalytics_threat_ioc_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('minute',10,bin(max_EventTime_t,10m))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,10m)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_NetworkSession(starttime=lastRecievedTime,endtime=bin(nowTime,10m))\n| where TimeGenerated < bin(nowTime,10m)\n| extend Threat = coalesce(ThreatId,ThreatName)\n| where isnotempty(Threat) or isnotempty(ThreatCategory)\n| summarize count() by SrcIpAddr, DstIpAddr, SrcHostname, DstHostname, bin(TimeGenerated,10m)\n| extend EventTime = TimeGenerated",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryData",
                        "queries": {
                          "resourcegroups": "@parameters('resourceGroupName')",
                          "resourcename": "@parameters('logAnalyticsName')",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "@parameters('subscriptionId')",
                          "timerange": "Last 1 day"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      },
                      "azuremonitorlogs": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                        "connectionName": "[[variables('AzuremonitorlogsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "SummarizeData",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzuremonitorlogsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzuremonitorlogsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Summarize Data for Network Session Essentials",
            "description": "This playbook summarizes data for Network Session Essentials and lands it into custom tables.",
            "prerequisites": [
              "1. Ensure all the details appearing in the deployment are correct."
            ],
            "postDeployment": [
              "1. Authorize 'Azure Monitor Logs' and 'Azure Log Analytics Data Collector' API connections."
            ],
            "lastUpdateTime": "2022-11-15T13:45:00Z",
            "tags": [
              "Security - Network"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "Playbook",
        "displayName": "SummarizeData_NSE",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject1').huntingQueryTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detect Outbound LDAP Traffic(ASIM Network Session schema)_HuntingQueries Hunting Query with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject1').huntingQueryVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Network_Session_Essentials_Hunting_Query_1",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Detect Outbound LDAP Traffic(ASIM Network Session schema)",
                "category": "Hunting Queries",
                "query": "_Im_NetworkSession(starttime=ago(1d))\n| where EventResult==\"Failure\" and ipv4_is_private(SrcIpAddr) and not(ipv4_is_private(DstIpAddr)) and SrcIpAddr != DstIpAddr\n| where tostring(DstPortNumber) has_any (\"389\", \"636\")\n| summarize Starttime= min(TimeGenerated),EndTime= max(TimeGenerated),Eventscount=sum(EventCount), EventVendors=make_set(EventVendor,10) by SrcIpAddr,DstIpAddr,DstPortNumber,NetworkProtocol,EventResult\n| extend IP_0_Address = SrcIpAddr\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Malicious actors often abuse misconfigured LDAP servers or applications that use the LDAP servers in organizations. Outbound LDAP traffic should not be allowed outbound through your perimeter firewall."
                  },
                  {
                    "name": "tactics",
                    "value": "InitialAccess,Execution"
                  },
                  {
                    "name": "techniques",
                    "value": "T1071,T1059"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject1')._huntingQuerycontentId1),'/'))))]",
              "properties": {
                "description": "Network Session Essentials Hunting Query 1",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject1')._huntingQuerycontentId1)]",
                "contentId": "[variables('huntingQueryObject1')._huntingQuerycontentId1]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject1').huntingQueryVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject1')._huntingQuerycontentId1]",
        "contentKind": "HuntingQuery",
        "displayName": "Detect Outbound LDAP Traffic(ASIM Network Session schema)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject1')._huntingQuerycontentId1,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject1')._huntingQuerycontentId1,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject2').huntingQueryTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DetectPortMisuseByAnomalyHunting_HuntingQueries Hunting Query with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject2').huntingQueryVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Network_Session_Essentials_Hunting_Query_2",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Detect port misuse by anomaly (ASIM Network Session schema)",
                "category": "Hunting Queries",
                "query": "let lookback = 14d;\nlet mapping = _GetWatchlist('NetworkSession_Monitor_Configuration')\n| where Type == \"Hunting\" and ThresholdType == \"Anomaly\" and Severity != \"Disabled\"  \n| extend Ports = split(Ports,\",\"),\n        App = split(App,\",\"),\n        Protocol = split(Protocol,\",\"),\n        Direction = split(Direction,\",\"),\n        Action = split(Action,\",\")\n| project Ports, App, Protocol, Direction, Action, Type, ThresholdType, Threshold, Severity, Tactic, Name, Description\n| mv-expand Ports\n| mv-expand App\n| mv-expand Protocol\n| mv-expand Direction\n| mv-expand Action\n| extend Ports = tostring(Ports), App = tostring(App), Protocol = tostring(Protocol), Direction = tostring(Direction), Action = tostring(Action), Threshold = toint(Threshold)\n;\nlet AnomalyThreshold = 2.5;\nlet eps = materialize (_Im_NetworkSession | project TimeGenerated | where TimeGenerated > ago(5m) | count | extend Count = Count/300);\nlet maxSummarizedTime = toscalar (\n    union isfuzzy=true \n        (\n            NetworkCustomAnalytics_protocol_CL\n                | where EventTime_t > ago(lookback)\n                | summarize max_TimeGenerated=max(EventTime_t)\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\n        ),\n        (\n            print(ago(lookback))\n            | project max_TimeGenerated = print_0\n        )\n      | summarize maxTimeGenerated = max(max_TimeGenerated) \n    );\nlet nosummary = materialize(\n              union isfuzzy=true \n                (\n                    NetworkCustomAnalytics_protocol_CL\n                    | where EventTime_t > ago(1d) \n                    | project v = int(2)\n                ),\n                (\n                    print int(1) \n                    | project v = print_0\n                )\n                | summarize maxv = max(v)\n                | extend nosum = (maxv > 1)\n              );\nlet allData = union isfuzzy=true \n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) > 1000 | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(2d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) between (501 .. 1000) | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(3d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        (datatable(exists:int, nosum:bool)[1,false] | where toscalar(eps) <= 500 | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=todatetime(ago(4d)), endtime=now())\n        | where TimeGenerated > maxSummarizedTime\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t > ago(lookback)\n        | project-rename NetworkProtocol=NetworkProtocol_s, DstPortNumber=DstPortNumber_d, DstAppName=DstAppName_s, NetworkDirection=NetworkDirection_s, DvcAction=DvcAction_s, Count=count__d, EventTime=EventTime_t\n        | extend Count = toint(Count),DstPortNumber = toint(DstPortNumber) \n    )\n;\nallData\n| where isnotempty(DstPortNumber)\n| make-series Total=count() on EventTime from ago(lookback) to now() step 1d by DstPortNumber, NetworkProtocol, NetworkDirection, DvcAction\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, AnomalyThreshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, Total\n| extend anomalies = toint(anomalies), score = toint(score), baseline = toint(baseline), EventTime = todatetime(EventTime), Total = tolong(Total)\n| where EventTime >= ago(1d)\n| extend DstPortNumber = trim_end(\".0\",tostring(DstPortNumber))\n| where score > 2*AnomalyThreshold\n| join kind=inner ['mapping'] where Ports == DstPortNumber\n| where (Protocol == \"*\" or Protocol has NetworkProtocol)\n                and (Direction == \"*\" or Direction has NetworkDirection)\n                and (Action == \"*\" or Action has DvcAction)  \n| project Name, Description, NetworkProtocol, DstPortNumber, NetworkDirection, DvcAction, Severity, Tactic\n| summarize NetworkProtocols=make_set_if(NetworkProtocol,isnotempty(NetworkProtocol),20), \n                    NetworkDirections=make_set_if(NetworkDirection,isnotempty(NetworkDirection),5), \n                    DvcActions=make_set_if(DvcAction,isnotempty(DvcAction),10) by Name, Severity, Tactic, DstPortNumber, Description\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This hunting query detect anomalous pattern in port usage with ASIM normalization. To tune the query to your environment configure it using the 'NetworkSession_Monitor_Configuration' watchlist."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl,InitialAccess,Execution"
                  },
                  {
                    "name": "techniques",
                    "value": "T1905,T1190,T1059,T1203"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject2')._huntingQuerycontentId2),'/'))))]",
              "properties": {
                "description": "Network Session Essentials Hunting Query 2",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject2')._huntingQuerycontentId2)]",
                "contentId": "[variables('huntingQueryObject2')._huntingQuerycontentId2]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject2').huntingQueryVersion2]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject2')._huntingQuerycontentId2]",
        "contentKind": "HuntingQuery",
        "displayName": "Detect port misuse by anomaly (ASIM Network Session schema)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject2')._huntingQuerycontentId2,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject2')._huntingQuerycontentId2,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject3').huntingQueryTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DetectPortMisuseByStaticThresholdHunting_HuntingQueries Hunting Query with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject3').huntingQueryVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Network_Session_Essentials_Hunting_Query_3",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Detect port misuse by static threshold (ASIM Network Session schema)",
                "category": "Hunting Queries",
                "query": "let lookback = 10m; \nlet mapping = _GetWatchlist('NetworkSession_Monitor_Configuration')\n| where Type == \"Hunting\" and ThresholdType == \"Static\" and Severity != \"Disabled\"  \n| extend Ports = split(Ports,\",\"),\n        App = split(App,\",\"),\n        Protocol = split(Protocol,\",\"),\n        Direction = split(Direction,\",\"),\n        Action = split(Action,\",\")\n| project Ports, App, Protocol, Direction, Action, Type, ThresholdType, Threshold, Severity, Tactic, Name, Description\n| mv-expand Ports\n| mv-expand App\n| mv-expand Protocol\n| mv-expand Direction\n| mv-expand Action\n| extend Ports = tostring(Ports), App = tostring(App), Protocol = tostring(Protocol), Direction = tostring(Direction), Action = tostring(Action), Threshold = toint(Threshold)\n;\nlet nosummary = materialize(\n              union isfuzzy=true \n                (\n                    NetworkCustomAnalytics_protocol_CL \n                    | project v = int(2)\n                ),\n                (\n                    print int(1) \n                    | project v = print_0\n                )\n                | summarize maxv = max(v)\n                | extend nosum = (maxv > 1)\n              );\nlet allData = union isfuzzy=true \n    (\n        (datatable(exists:int, nosum:bool)[1,false] | join (nosummary) on nosum) | join (\n        _Im_NetworkSession(starttime=bin(now(-10m),10m), endtime=bin(now(),10m))\n        | where TimeGenerated > bin(now(-10m),10m)\n        | summarize Count=count() by NetworkProtocol, DstPortNumber, DstAppName, NetworkDirection, DvcAction, bin(TimeGenerated,10m)\n        | extend EventTime = TimeGenerated, Count = toint(Count), DstPortNumber = toint(DstPortNumber), exists=int(1)\n        ) on exists\n        | project-away exists, maxv, nosum*\n    ),\n    (\n        NetworkCustomAnalytics_protocol_CL\n        | where EventTime_t == toscalar(NetworkCustomAnalytics_protocol_CL | summarize max(EventTime_t))\n        | project-rename NetworkProtocol=NetworkProtocol_s, DstPortNumber=DstPortNumber_d, DstAppName=DstAppName_s, NetworkDirection=NetworkDirection_s, DvcAction=DvcAction_s, Count=count__d, EventTime=EventTime_t\n        | extend Count = toint(Count),DstPortNumber = toint(DstPortNumber)\n    )\n;\nallData\n      | where isnotempty(DstPortNumber)\n      | summarize Sum=sum(Count) by DstPortNumber, NetworkProtocol, NetworkDirection, DvcAction \n      | join kind=inner ['mapping'] where Ports has tostring(DstPortNumber)\n      | where Sum > Threshold         \n                and (Protocol == \"*\" or Protocol has NetworkProtocol)\n                and (Direction == \"*\" or Direction has NetworkDirection)\n                and (Action == \"*\" or Action has DvcAction)\n      | project Name, Description, NetworkProtocol, DstPortNumber, NetworkDirection, DvcAction, Severity, Tactic\n      | summarize NetworkProtocols=make_set_if(NetworkProtocol,isnotempty(NetworkProtocol),20), \n                  NetworkDirections=make_set_if(NetworkDirection,isnotempty(NetworkDirection),5), \n                  DvcActions=make_set_if(DvcAction,isnotempty(DvcAction),10) by Name, Severity, Tactic, DstPortNumber, Description\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "There is an normal amount of traffic that goes on a particular port in any organization. This hunting query identifies port usage higher than threshold defined in 'NetworkSession_Monitor_Configuration' watchlist to determine high port usage."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl,InitialAccess,Execution"
                  },
                  {
                    "name": "techniques",
                    "value": "T1905,T1190,T1059,T1203"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject3')._huntingQuerycontentId3),'/'))))]",
              "properties": {
                "description": "Network Session Essentials Hunting Query 3",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject3')._huntingQuerycontentId3)]",
                "contentId": "[variables('huntingQueryObject3')._huntingQuerycontentId3]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject3').huntingQueryVersion3]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject3')._huntingQuerycontentId3]",
        "contentKind": "HuntingQuery",
        "displayName": "Detect port misuse by static threshold (ASIM Network Session schema)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject3')._huntingQuerycontentId3,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject3')._huntingQuerycontentId3,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject4').huntingQueryTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DetectsSeveralUsersWithTheSameMACAddress_HuntingQueries Hunting Query with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject4').huntingQueryVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Network_Session_Essentials_Hunting_Query_4",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Detects several users with the same MAC address (ASIM Network Session schema)",
                "category": "Hunting Queries",
                "query": "let lookback = 1h;\n_Im_NetworkSession(starttime=ago(lookback),endtime=now())\n  | where isnotempty(DstMacAddr) and isnotempty(DstUsername)\n  | summarize UserSet = make_set(DstUsername,10) by DstMacAddr\n  | extend UniqueUsers = array_length(UserSet)\n  | where UniqueUsers >= 2\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Ideally one user should be associated with one MAC ID, this hunting query will identify if same MAC ID is associated with more than one user which can be a case of MAC spoofing attack."
                  },
                  {
                    "name": "tactics",
                    "value": "InitialAccess"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject4')._huntingQuerycontentId4),'/'))))]",
              "properties": {
                "description": "Network Session Essentials Hunting Query 4",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject4')._huntingQuerycontentId4)]",
                "contentId": "[variables('huntingQueryObject4')._huntingQuerycontentId4]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject4').huntingQueryVersion4]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject4')._huntingQuerycontentId4]",
        "contentKind": "HuntingQuery",
        "displayName": "Detects several users with the same MAC address (ASIM Network Session schema)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject4')._huntingQuerycontentId4,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject4')._huntingQuerycontentId4,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject5').huntingQueryTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "MismatchBetweenDestinationAppNameAndDestinationPort_HuntingQueries Hunting Query with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject5').huntingQueryVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Network_Session_Essentials_Hunting_Query_5",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Mismatch between Destination App name and Destination Port (ASIM Network Session schema)",
                "category": "Hunting Queries",
                "query": "_Im_NetworkSession(starttime=ago(1d),endtime=now())\n| where DstAppName in (\"dns\",\"web-browsing\",\"http\",\"ssl\",\"smtp\") and DstPortNumber in (53, 80, 8080, 8000, 443, 8443, 25)\n| extend DstAppName = tolower(DstAppName)\n| where \n        (DstAppName == \"dns\" and not(DstPortNumber == 53)) or\n        (DstAppName in (\"web-browsing\",\"http\") and not(DstPortNumber in (80, 8080, 8000))) or\n        (DstAppName == \"ssl\" and not(DstPortNumber in (443, 8443))) or\n        (DstAppName == \"smtp\" and not(DstPortNumber == 25))\n| summarize Instances = count(), EventStartTime = min(EventStartTime), EventEndTime = max(EventEndTime) by SrcIpAddr, DstIpAddr, DstAppName, DstPortNumber\n| extend IP_0_Address = SrcIpAddr\n| extend IP_1_Address = DstIpAddr\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Every standard app has a port associated with it. This query will identify if destination port associated with destination app is not standard which can be a case of network spoofing attack."
                  },
                  {
                    "name": "tactics",
                    "value": "Discovery"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject5')._huntingQuerycontentId5),'/'))))]",
              "properties": {
                "description": "Network Session Essentials Hunting Query 5",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject5')._huntingQuerycontentId5)]",
                "contentId": "[variables('huntingQueryObject5')._huntingQuerycontentId5]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject5').huntingQueryVersion5]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject5')._huntingQuerycontentId5]",
        "contentKind": "HuntingQuery",
        "displayName": "Mismatch between Destination App name and Destination Port (ASIM Network Session schema)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject5')._huntingQuerycontentId5,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject5')._huntingQuerycontentId5,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject6').huntingQueryTemplateSpecName6]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Protocols passing authentication in cleartext (ASIM Network Session schema)_HuntingQueries Hunting Query with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject6').huntingQueryVersion6]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Network_Session_Essentials_Hunting_Query_6",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Protocols passing authentication in cleartext (ASIM Network Session schema)",
                "category": "Hunting Queries",
                "query": "// Filter events from last 1 day and not failed\n_Im_NetworkSession(starttime=ago(1d))\n// Filter for private source IP and public destination IP\n| where EventResult != \"Failure\" and ipv4_is_private(SrcIpAddr) and not(ipv4_is_private(DstIpAddr))\n// Filter for specific destination ports or non-anonymous FTP\n| where tostring(DstPortNumber) has_any (\"23\", \"143\", \"110\") or (tostring(DstPortNumber) == \"21\" and SrcUsername != \"anonymous\")\n// Summarize data by session parameters\n| summarize Starttime= min(TimeGenerated),EndTime= max(TimeGenerated),Eventscount=sum(EventCount), EventVendors=make_set(EventVendor,10) by SrcIpAddr,DstIpAddr,DstPortNumber,NetworkProtocol,EventResult\n| extend PortUsage = case(\n    DstPortNumber == 23, \"Telnet\",\n    DstPortNumber == 143, \"IMAP\",\n    DstPortNumber == 110, \"POP3\",\n    DstPortNumber == 21, \"FTP\",\n    \"Other\"\n)\n| extend IP_0_Address = SrcIpAddr\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This hunting query identifies cleartext protocols like telnet, POP3, IMAP, and non-anonymous FTP that could leak sensitive information. These protocols may use SSL, but usually on different ports."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl"
                  },
                  {
                    "name": "techniques",
                    "value": "T1071"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject6')._huntingQuerycontentId6),'/'))))]",
              "properties": {
                "description": "Network Session Essentials Hunting Query 6",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject6')._huntingQuerycontentId6)]",
                "contentId": "[variables('huntingQueryObject6')._huntingQuerycontentId6]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject6').huntingQueryVersion6]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject6')._huntingQuerycontentId6]",
        "contentKind": "HuntingQuery",
        "displayName": "Protocols passing authentication in cleartext (ASIM Network Session schema)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject6')._huntingQuerycontentId6,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject6')._huntingQuerycontentId6,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject7').huntingQueryTemplateSpecName7]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Remote Desktop Network Traffic(ASIM Network Session schema)_HuntingQueries Hunting Query with template version 3.0.4",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject7').huntingQueryVersion7]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "Network_Session_Essentials_Hunting_Query_7",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Remote Desktop Network Traffic(ASIM Network Session schema)",
                "category": "Hunting Queries",
                "query": "// Filter events from the last day that were not failures\n_Im_NetworkSession(starttime=ago(1d))\n// Filter events where the source IP is private, the destination IP is not private, and the source and destination IPs are not the same\n| where  EventResult == \"Failure\" and ipv4_is_private(SrcIpAddr) and not(ipv4_is_private(DstIpAddr)) and SrcIpAddr != DstIpAddr\n// Filter events where the destination port number is 3389 (commonly used for Microsoft Remote Desktop (RDP))\n| where tostring(DstPortNumber) has_any (\"3389\")\n// Summarize the data by source IP, destination IP, destination port number, network protocol, and event result\n// For each group, calculate the start time, end time, event count, and a set of up to 10 event vendors\n| summarize Starttime= min(TimeGenerated),EndTime= max(TimeGenerated),Eventscount=sum(EventCount), EventVendors=make_set(EventVendor,10) by SrcIpAddr,DstIpAddr,DstPortNumber,NetworkProtocol,EventResult\n| extend IP_0_Address = SrcIpAddr\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This hunting query looks for unusual remote desktop activity by monitoring TCP/3389 traffic. While RDP is common, focus on atypical connections to identify potential threats."
                  },
                  {
                    "name": "tactics",
                    "value": "LateralMovement"
                  },
                  {
                    "name": "techniques",
                    "value": "T1021,T1021.001"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject7')._huntingQuerycontentId7),'/'))))]",
              "properties": {
                "description": "Network Session Essentials Hunting Query 7",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject7')._huntingQuerycontentId7)]",
                "contentId": "[variables('huntingQueryObject7')._huntingQuerycontentId7]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject7').huntingQueryVersion7]",
                "source": {
                  "kind": "Solution",
                  "name": "Network Session Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject7')._huntingQuerycontentId7]",
        "contentKind": "HuntingQuery",
        "displayName": "Remote Desktop Network Traffic(ASIM Network Session schema)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject7')._huntingQuerycontentId7,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject7')._huntingQuerycontentId7,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/Watchlists",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('watchlist1-id'))]",
      "apiVersion": "2021-04-01",
      "properties": {
        "description": "Configure the Network Session Essentials solution monitoring conditions here. \n\nChoose between Detection or Hunting for Type and Anomaly or Static for Threshold type to tune monitoring according to environment.",
        "displayName": "NetworkSession Monitor Configuration",
        "source": "NetworkSession_Monitor_Configuration.csv",
        "provider": "Microsoft",
        "isDeleted": false,
        "numberOfLinesToSkip": 0,
        "itemsSearchKey": "Ports",
        "rawContent": "Ports,App,Protocol,Direction,Action,Type,ThresholdType,Threshold,Severity,Tactic,Name,Description\r\n\"389,636\",*,*,*,*,Detection,Anomaly,,High,\"InitialAccess,Execution\",Suspicious LDAP Traffic,Adversary often abuse misconfigured LDAP servers or applications that use the LDAP servers in organizations. \r\n3389,*,*,*,*,Detection,Anomaly,,High,Lateral Movement,Suspicious Remote Desktop Network Traffic,\" TCP/3389 is the default port used by remote desktop. While remote desktop traffic is not uncommon on a network, any anomaly in traffic can be suspicious.\"\r\n\"9150,9151\",tor,*,*,*,Detection,Static,1000,High,Command and Control,Suspicious TOR Traffic,\"Traces Network traffic identified as The Onion Router (TOR), a benign anonymity network which can be abused for a variety of nefarious purposes. \"\r\n\"139,445\",smb,*,*,*,Detection,Static,1000,High,Lateral Movement,Suspicious SMB Traffic,Spike in the number of Server Message Block (SMB) traffic connections can be suspicious.\r\n23,*,TCP,*,*,Hunting,Static,1000,Low,\"Command and Control,Lateral Movement,Initial Access\",Suspicious Telnet Port,Spike in the number of Telnet traffic connections. earch looks for spike in the number of Telnet traffic connections.\r\n\"5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810\",*,TCP,*,*,Hunting,Anomaly,,Low,\"Command and Control,Initial Access\",Suspicious VNC Traffic,Spike in the number of Virtual Network Computer traffic connections. \r\n135,*,TCP,*,*,Hunting,Static,1000,Low,Initial Access,Anomalous RPC Traffic,Spike in the number of Remote Procedure Call traffic connections.\r\n13,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,3rd Party Attacks - Daytime protocol used in reflection/amplification attacks \r\n111,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - RPC, unencrypted authentication allowed\"\r\n138,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Hacker Recon - Netbios Datagram Service\r\n445,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Unsecure - SMB - well known attack vector\r\n1900,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Hacker Recon/3rd Party Attacks - Simple Service Discovery Protocol, unencrypted\"\r\n4333,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - MSql\r\n17,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"3rd Party Attacks - QOTD protocol, reflection/amplification attacks\"\r\n7001,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Cassandra\r\n26379,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Redis\r\n111,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - RPC, unencrypted authentication allowed\"\r\n139,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Hacker Recon - NetBIOS Session Service\r\n512,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - Rexec on Linux, remote commands w/o encrypt auth\"\r\n2049,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Unsecure - Network File System\r\n5353,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,3rd Party Attacks - mDNS\r\n19,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"3rd Party Attacks - Chargen protocol, reflection/amplification attacks\"\r\n7199,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Cassandra\r\n27017,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - MongoDB\r\n119,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Unsecure - NNTP, unencrypted authentication\"\r\n161,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Unsecure/3rd Party Attacks - SNMP, unsecure / no authentication UDP Reflection attacks\"\r\n514,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - Remote Shell, remote commands w/o auth or encrypt\"\r\n2049,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Unsecure - Network File System\r\n5432,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - PostgresSQL Database Management\r\n20,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Unencrypted - Unencrypted FTP Traffic\r\n9042,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Cassandra\r\n123,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"3rd Party Attacks - Network Time Protocol, reflection/amplification attacks\"\r\n161,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Unsecure/3rd Party Attacks - SNMP, unsecure / no authentication UDP Reflection attacks\"\r\n593,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - HTTP RPC EPMAP, unencrypted remote procedure call\"\r\n2301,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Hacker Recon - Compaq Management Service, no recent incidents\"\r\n5800,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Management - VNC Remote Frame Buffer over HTTP\r\n21,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Unencrypted - Unencrypted FTP Traffic\r\n9160,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Cassandra\r\n135,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - End Point Mapper, multiple remote management srvcs\"\r\n162,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Unsecure - SNMP Trap, unsecure / no authentication\"\r\n593,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - HTTP RPC EPMAP, unencrypted remote procedure call\"\r\n2381,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - Compaq Management Service, no recent incidents\"\r\n5900,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Management - VNC Remote Frame Buffer over HTTP\r\n22,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - SSH, brute force attacks common\"\r\n9200,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Elastic Search\r\n135,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - End Point Mapper, multiple remote management srvcs\"\r\n162,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Unsecure - SNMP Trap, unsecure / no authentication\"\r\n636,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Hacker Recon - Lightweight Directory Access Protocol\r\n3268,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Hacker Recon - Microsoft Global Catalog LDAP\r\n5985,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Management - Windows Powershell\r\n23,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - Telnet, allows unauthenticated and/or unencrypted\"\r\n9300,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Elastic Search\r\n137,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Hacker Recon - Netbios Name Service\r\n389,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Hacker Recon/3rd Party Attacks - LDAP/CLDAP\r\n873,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - Rsync, unencrypted file transfer\"\r\n3306,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - MySQL Database Management Port\r\n5986,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Management - Windows Powershell\r\n53,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"3rd Party Attacks - DNS, reflection/amplification attacks\"\r\n9987,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,3rd Party Attack - DSM/SCM Target Interface\r\n137,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Hacker Recon - Netbios Name Service\r\n389,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Hacker Recon/3rd Party Attacks - LDAP/CLDAP\r\n1433,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - MS SQL Management & Data Access\r\n3389,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management/3rd Party Attacks - RDP, Common brute force attack port\"\r\n6379,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Redis\r\n69,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management - TFTP, allows unauthenticated and/or unencrypted\"\r\n11211,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Unencrypted - Memcached\r\n138,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Hacker Recon - NetBIOS Datagram Service\r\n443,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,3rd Party Attacks - UDP Reflection / Amplification attacks\r\n1434,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - MS SQL Monitor Port\r\n3389,*,UDP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,\"Management/3rd Party Attacks - RDP, Common brute force attack port\"\r\n7000,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Cassandra\r\n16379,*,TCP,*,Allow,Hunting,Static,0,Low,\"InitialAccess,Discovery\",High-risk Ports,Data Access/Mgmt - Redis\r\n",
        "watchlistAlias": "NetworkSession_Monitor_Configuration",
        "contentType": "text/csv"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.4",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Network Session Essentials",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Network%20Session%20Essentials/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p><a href=\"https://aka.ms/NetworkSessionEssential\">Network Session Essentials</a> is a <a href=\"https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fdocs.microsoft.com%2Fazure%2Fsentinel%2Fsentinel-solutions-catalog%23domain-solutions&amp;data=05%7C01%7Ckavishbakshi%40microsoft.com%7Cbe2a496082b24caa4b8c08da9cefacca%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637994850502413731%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=OJegu%2B2EqD7rmYmK9pm9QniD6YWp5ooloZ6tHzcwVi0%3D&amp;reserved=0\">domain solution</a> and does not include any data connectors. The content in this solution requires one of the product solutions below , as well as any other connector or data source normalized to the <a href=\"https://aka.ms/AboutASIM\">ASIM</a>.</p>\n<p><strong>Prerequisite :-</strong></p>\n<p>Install one or more of the listed solutions, or develop your custom ASIM parsers to unlock the value provided by this solution.</p>\n<ol>\n<li>Amazon Web Services</li>\n<li>Azure Firewall</li>\n<li>Azure Network Security Groups</li>\n<li>Check Point</li>\n<li>Cisco ASA</li>\n<li>Cisco Meraki Security Events</li>\n<li>Corelight</li>\n<li>Fortinet FortiGate</li>\n<li>Microsoft Defender for IoT</li>\n<li>Microsoft Defender for Cloud</li>\n<li>Microsoft Sysmon For Linux</li>\n<li>Windows Firewall</li>\n<li>Palo Alto PANOS</li>\n<li>Vectra AI Stream</li>\n<li>WatchGuard Firebox</li>\n<li>Zscaler Internet Access</li>\n</ol>\n<p><strong>Underlying Microsoft Technologies used:</strong></p>\n<p>This solution takes a dependency on the following technologies, and some of these dependencies either may be in Preview state or might result in additional ingestion or operational costs:</p>\n<ol>\n<li>Product solutions as described above</li>\n<li>Logic app for data summarization</li>\n</ol>\n<p><strong>Recommendation :-</strong></p>\n<p>It is highly recommended to use the <strong>Summarize data</strong> logic app playbook provided with this solution as it will significantly improve the performance of the Workbook, Analytic rules &amp; Hunting queries.</p>\n<p><strong>Workbooks:</strong> 1, <strong>Analytic Rules:</strong> 9, <strong>Hunting Queries:</strong> 7, <strong>Watchlists:</strong> 1, <strong>Playbooks:</strong> 1</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/Azure_Sentinel.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Network Session Essentials",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "criteria": [
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId1')]",
              "version": "[variables('workbookVersion1')]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
              "version": "[variables('analyticRuleObject3').analyticRuleVersion3]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
              "version": "[variables('analyticRuleObject4').analyticRuleVersion4]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
              "version": "[variables('analyticRuleObject5').analyticRuleVersion5]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
              "version": "[variables('analyticRuleObject6').analyticRuleVersion6]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
              "version": "[variables('analyticRuleObject7').analyticRuleVersion7]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
              "version": "[variables('analyticRuleObject8').analyticRuleVersion8]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
              "version": "[variables('analyticRuleObject9').analyticRuleVersion9]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_SummarizeData_NSE')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject1')._huntingQuerycontentId1]",
              "version": "[variables('huntingQueryObject1').huntingQueryVersion1]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject2')._huntingQuerycontentId2]",
              "version": "[variables('huntingQueryObject2').huntingQueryVersion2]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject3')._huntingQuerycontentId3]",
              "version": "[variables('huntingQueryObject3').huntingQueryVersion3]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject4')._huntingQuerycontentId4]",
              "version": "[variables('huntingQueryObject4').huntingQueryVersion4]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject5')._huntingQuerycontentId5]",
              "version": "[variables('huntingQueryObject5').huntingQueryVersion5]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject6')._huntingQuerycontentId6]",
              "version": "[variables('huntingQueryObject6').huntingQueryVersion6]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject7')._huntingQuerycontentId7]",
              "version": "[variables('huntingQueryObject7').huntingQueryVersion7]"
            },
            {
              "kind": "Watchlist",
              "contentId": "[variables('_NetworkSession Monitor Configuration')]",
              "version": "3.0.4"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-amazonwebservices"
            },
            {
              "kind": "Solution",
              "contentId": "sentinel4azurefirewall.sentinel4azurefirewall"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-networksecuritygroup"
            },
            {
              "kind": "Solution",
              "contentId": "checkpoint.checkpoint-sentinel-solutions"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-ciscoasa"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-ciscomeraki"
            },
            {
              "kind": "Solution",
              "contentId": "corelightinc1584998267292.corelight-for-azure-sentinel"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-fortinetfortigate"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-unifiedmicrosoftsocforot"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-microsoftdefenderforcloud"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-sysmonforlinux"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-windowsfirewall"
            },
            {
              "kind": "Solution",
              "contentId": "azuresentinel.azure-sentinel-solution-paloaltopanos"
            },
            {
              "kind": "Solution",
              "contentId": "vectraaiinc.vectra_sentinel_solution"
            },
            {
              "kind": "Solution",
              "contentId": "watchguard-technologies.watchguard_firebox_mss"
            },
            {
              "kind": "Solution",
              "contentId": "zscaler1579058425289.zscaler_internet_access_mss"
            }
          ]
        },
        "firstPublishDate": "2022-11-11",
        "lastPublishDate": "2022-11-11",
        "providers": [
          "Microsoft"
        ],
        "categories": {
          "domains": [
            "Security - Network"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
