{
  "$schema": "https://schema.management.azure.com/schemas/0.1.2-preview/CreateUIDefinition.MultiVm.json#",
  "handler": "Microsoft.Azure.CreateUIDef",
  "version": "0.1.2-preview",
  "parameters": {
    "config": {
      "isWizard": false,
      "basics": {
        "description": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/ContrastADR.svg\"width=\"75px\"height=\"75px\">\n\n**Note:** Please refer to the following before installing the solution: \n\n• Review the solution [Release Notes](https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/ContrastADR/ReleaseNotes.md)\n\n • There may be [known issues](https://aka.ms/sentinelsolutionsknownissues) pertaining to this Solution, please refer to them before installing.\n\nThe [Contrast Security](https://www.contrastsecurity.com/contrast-adr) solution for Microsoft Sentinel enables you to ingest [Contrast Security events] generated using the Contrast Webhook ,\n\n**Data Connectors:** 1, **Parsers:** 1, **Workbooks:** 9, **Analytic Rules:** 13\n\n[Learn more about Microsoft Sentinel](https://aka.ms/azuresentinel) | [Learn more about Solutions](https://aka.ms/azuresentinelsolutionsdoc)",
        "subscription": {
          "resourceProviders": [
            "Microsoft.OperationsManagement/solutions",
            "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "Microsoft.Insights/workbooks",
            "Microsoft.Logic/workflows"
          ]
        },
        "location": {
          "metadata": {
            "hidden": "Hiding location, we get it from the log analytics workspace"
          },
          "visible": false
        },
        "resourceGroup": {
          "allowExisting": true
        }
      }
    },
    "basics": [
      {
        "name": "getLAWorkspace",
        "type": "Microsoft.Solutions.ArmApiControl",
        "toolTip": "This filters by workspaces that exist in the Resource Group selected",
        "condition": "[greater(length(resourceGroup().name),0)]",
        "request": {
          "method": "GET",
          "path": "[concat(subscription().id,'/providers/Microsoft.OperationalInsights/workspaces?api-version=2020-08-01')]"
        }
      },
      {
        "name": "workspace",
        "type": "Microsoft.Common.DropDown",
        "label": "Workspace",
        "placeholder": "Select a workspace",
        "toolTip": "This dropdown will list only workspace that exists in the Resource Group selected",
        "constraints": {
          "allowedValues": "[map(filter(basics('getLAWorkspace').value, (filter) => contains(toLower(filter.id), toLower(resourceGroup().name))), (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.name, '\"}')))]",
          "required": true
        },
        "visible": true
      }
    ],
    "steps": [
      {
        "name": "dataconnectors",
        "label": "Data Connectors",
        "bladeTitle": "Data Connectors",
        "elements": [
          {
            "name": "dataconnectors1-text",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "text": "This Solution installs the data connector for ContrastADR. You can get ContrastADR custom log data in your Microsoft Sentinel workspace. After installing the solution, configure and enable this data connector by following guidance in Manage solution view."
            }
          },
          {
            "name": "dataconnectors-parser-text",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "text": "The Solution installs a parser that transforms the ingested data into Microsoft Sentinel normalized format. The normalized format enables better correlation of different types of data from different data sources to drive end-to-end outcomes seamlessly in security monitoring, hunting, incident investigation and response scenarios in Microsoft Sentinel."
            }
          },
          {
            "name": "dataconnectors-link1",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "link": {
                "label": "Learn more about connecting data sources",
                "uri": "https://docs.microsoft.com/azure/sentinel/connect-data-sources"
              }
            }
          }
        ]
      },
      {
        "name": "workbooks",
        "label": "Workbooks",
        "subLabel": {
          "preValidation": "Configure the workbooks",
          "postValidation": "Done"
        },
        "bladeTitle": "Workbooks",
        "elements": [
          {
            "name": "workbooks-text",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "text": "This solution installs workbook(s) to help you gain insights into the telemetry collected in Microsoft Sentinel. After installing the solution, start using the workbook in Manage solution view."
            }
          },
          {
            "name": "workbooks-link",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "link": {
                "label": "Learn more",
                "uri": "https://docs.microsoft.com/azure/sentinel/tutorial-monitor-your-data"
              }
            }
          },
          {
            "name": "workbook1",
            "type": "Microsoft.Common.Section",
            "label": "Command Injection Runbook",
            "elements": [
              {
                "name": "workbook1-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Command injection is a malicious technique where attackers exploit vulnerabilities in web applications to inject and execute arbitrary operating system (OS) commands on the server. By manipulating input data, attackers can manipulate the application's execution flow, tricking it into running unintended system commands.This can result in data breaches, system compromise, etc. Contrast uses various detection capabilities for Command Injection. Some track malicious input into commands being run, some detect sensitive file paths being accessed, and so forth. "
                }
              }
            ]
          },
          {
            "name": "workbook2",
            "type": "Microsoft.Common.Section",
            "label": "Cross-site scripting (XSS) Runbook",
            "elements": [
              {
                "name": "workbook2-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Cross-site scripting (XSS) is a type of web security vulnerability that allows an attacker to inject malicious JavaScript code into websites viewed by other users. Instead of the website displaying trusted content, the attacker's code is executed, which can compromise user accounts, steal sensitive data, or even take control of the user's browser"
                }
              }
            ]
          },
          {
            "name": "workbook3",
            "type": "Microsoft.Common.Section",
            "label": "Expression Language Injection Runbook",
            "elements": [
              {
                "name": "workbook3-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Expression Language Injection works by taking advantage of server-side code injection vulnerabilities which occur whenever an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. This can lead to complete compromise of the application's data and functionality, as well as the server that is hosting the application."
                }
              }
            ]
          },
          {
            "name": "workbook4",
            "type": "Microsoft.Common.Section",
            "label": "HTTP Method Tampering Runbook",
            "elements": [
              {
                "name": "workbook4-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Method Tampering (aka verb tampering or HTTP method tampering) is an attack where an attacker manipulates the HTTP method used in a request to a web application. Providing unexpected HTTP methods can sometimes bypass authentication, authorization or other security mechanisms."
                }
              }
            ]
          },
          {
            "name": "workbook5",
            "type": "Microsoft.Common.Section",
            "label": "JNDI Injection Runbook",
            "elements": [
              {
                "name": "workbook5-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "JNDI injection is a malicious technique where attackers exploit vulnerabilities in web applications to influence the server used in a JNDI lookup. Where an attacker can influence the server the JNDI Lookup is sent to, it is possible to get the server to connect to a malicious JNDI Server which returns a malicious class which when loaded will give the attacker Remote Code Execution on the impacted server. Also in the case of infamous log4shell vulnerability, as well as RCE, it is possible to exfiltrate data fro the impacted server."
                }
              }
            ]
          },
          {
            "name": "workbook6",
            "type": "Microsoft.Common.Section",
            "label": "Path Traversal Runbook",
            "elements": [
              {
                "name": "workbook6-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Path traversal attacks use an affected application to gain unauthorized access to server file system folders that are higher in the directory hierarchy than the web root folder. A successful path traversal attack can fool a web application into reading and consequently exposing the contents of files outside of the document root directory of the application or the web server, including credentials for back-end systems, application code and data, and sensitive operating system files. If successful this can lead to unauthorized data access, data exfiltration, and remote code execution."
                }
              }
            ]
          },
          {
            "name": "workbook7",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection Runbook",
            "elements": [
              {
                "name": "workbook7-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "SQL injection is a malicious technique where attackers exploit vulnerabilities in web applications to inject unauthorized SQL commands into the database. By carefully crafting input data, attackers can manipulate the SQL queries executed by the application, potentially leading to unauthorized data access, data modification, or even complete database compromise."
                }
              }
            ]
          },
          {
            "name": "workbook8",
            "type": "Microsoft.Common.Section",
            "label": "Untrusted Deserialization Runbook",
            "elements": [
              {
                "name": "workbook8-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Serialization refers to the process of converting an object into a format which can be saved to a file or a datastore. Deserialization reverses this process, transforming serialized data coming from a file, stream, or network socket into an object.Untrusted Deserialization is a web application vulnerability that enables attackers to pass arbitrary objects or code to a deserializer. In this kind of attack, untrusted data abuses the logic of an application to inflict a denial of service (DoS) attack, achieve authentication bypass, enable remote code execution, and even execute arbitrary code as it is being deserialized."
                }
              }
            ]
          },
          {
            "name": "workbook9",
            "type": "Microsoft.Common.Section",
            "label": "XML External Entity Injection Runbook",
            "elements": [
              {
                "name": "workbook9-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "XXE is a flaw in XML parsers where attackers can cause the parser to read local or remote resources as part of the document. Attackers often abuse this functionality to access other sensitive system information."
                }
              }
            ]
          }
        ]
      },
      {
        "name": "analytics",
        "label": "Analytics",
        "subLabel": {
          "preValidation": "Configure the analytics",
          "postValidation": "Done"
        },
        "bladeTitle": "Analytics",
        "elements": [
          {
            "name": "analytics-text",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "text": "This solution installs the following analytic rule templates. After installing the solution, create and enable analytic rules in Manage solution view."
            }
          },
          {
            "name": "analytics-link",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "link": {
                "label": "Learn more",
                "uri": "https://docs.microsoft.com/azure/sentinel/tutorial-detect-threats-custom?WT.mc_id=Portal-Microsoft_Azure_CreateUIDef"
              }
            }
          },
          {
            "name": "analytic1",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic1-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "JNDI injection is a malicious technique where attackers exploit vulnerabilities in web applications to influence the server used in a JNDI lookup. Where an attacker can influence the server the JNDI Lookup is sent to, it is possible to get the server to connect to a malicious JNDI Server which returns a malicious class which when loaded will give the attacker Remote Code Execution on the impacted server. Also in the case of infamous log4shell vulnerability, as well as RCE, it is possible to exfiltrate data fro the impacted server."
                }
              }
            ]
          },
          {
            "name": "analytic2",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic2-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Command injection is a malicious technique where attackers exploit vulnerabilities in web applications to inject and execute arbitrary operating system (OS) commands on the server. By manipulating input data, attackers can manipulate the application's execution flow, tricking it into running unintended system commands.This can result in data breaches, system compromise, etc. Contrast uses various detection capabilities for Command Injection. Some track malicious input into commands being run, some detect sensitive file paths being accessed, and so forth."
                }
              }
            ]
          },
          {
            "name": "analytic3",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic3-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Cross-site scripting (XSS) is a type of web security vulnerability that allows an attacker to inject malicious JavaScript code into websites viewed by other users. Instead of the website displaying trusted content, the attacker's code is executed, which can compromise user accounts, steal sensitive data, or even take control of the user's browser."
                }
              }
            ]
          },
          {
            "name": "analytic4",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic4-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Expression Language Injection works by taking advantage of server-side code injection vulnerabilities which occur whenever an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. This can lead to complete compromise of the application's data and functionality, as well as the server that is hosting the application."
                }
              }
            ]
          },
          {
            "name": "analytic5",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic5-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Method Tampering (aka verb tampering or HTTP method tampering) is an attack where an attacker manipulates the HTTP method used in a request to a web application. Providing unexpected HTTP methods can sometimes bypass authentication, authorization or other security mechanisms."
                }
              }
            ]
          },
          {
            "name": "analytic6",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic6-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Path traversal attacks use an affected application to gain unauthorized access to server file system folders that are higher in the directory hierarchy than the web root folder. A successful path traversal attack can fool a web application into reading and consequently exposing the contents of files outside of the document root directory of the application or the web server, including credentials for back-end systems, application code and data, and sensitive operating system files. If successful this can lead to unauthorized data access, data exfiltration, and remote code execution."
                }
              }
            ]
          },
          {
            "name": "analytic7",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic7-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Critical Severity Level."
                }
              }
            ]
          },
          {
            "name": "analytic8",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic8-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "High Severity Level."
                }
              }
            ]
          },
          {
            "name": "analytic9",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic9-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Low Severity Level."
                }
              }
            ]
          },
          {
            "name": "analytic10",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic10-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Medium Severity Level."
                }
              }
            ]
          },
          {
            "name": "analytic11",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic11-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "SQL injection is a malicious technique where attackers exploit vulnerabilities in web applications to inject unauthorized SQL commands into the database. By carefully crafting input data, attackers can manipulate the SQL queries executed by the application, potentially leading to unauthorized data access, data modification, or even complete database compromise."
                }
              }
            ]
          },
          {
            "name": "analytic12",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic12-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Serialization refers to the process of converting an object into a format which can be saved to a file or a datastore. Deserialization reverses this process, transforming serialized data coming from a file, stream, or network socket into an object.Untrusted Deserialization is a web application vulnerability that enables attackers to pass arbitrary objects or code to a deserializer. In this kind of attack, untrusted data abuses the logic of an application to inflict a denial of service (DoS) attack, achieve authentication bypass, enable remote code execution, and even execute arbitrary code as it is being deserialized."
                }
              }
            ]
          },
          {
            "name": "analytic13",
            "type": "Microsoft.Common.Section",
            "label": "SQL Injection",
            "elements": [
              {
                "name": "analytic13-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "XXE is a flaw in XML parsers where attackers can cause the parser to read local or remote resources as part of the document. Attackers often abuse this functionality to access other sensitive system information."
                }
              }
            ]
          }
        ]
      }
    ],
    "outputs": {
      "workspace-location": "[first(map(filter(basics('getLAWorkspace').value, (filter) => and(contains(toLower(filter.id), toLower(resourceGroup().name)),equals(filter.name,basics('workspace')))), (item) => item.location))]",
      "location": "[location()]",
      "workspace": "[basics('workspace')]"
    }
  }
}
