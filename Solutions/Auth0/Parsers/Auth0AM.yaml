id: a6453489-5e6c-4976-bfc7-f9d234fde3ca
Function:
  Title: Parser for Auth0 Auth0AM_CL
  Version: '1.0.0'
  LastUpdated: '2023-12-07'
Category: Microsoft Sentinel Parser
FunctionName: Auth0AM
FunctionAlias: Auth0AM
FunctionQuery: |
    let logData = () 
        {
            // Parse Auth0 Log data from custom table
            Auth0AM_CL
            | where isnotempty(type_s)
            | project TimeGenerated
                , Audience = tostring(column_ifexists('audience_s', ""))
                , Auth0ClientEnvIos = tostring(column_ifexists('auth0__s', ""))
                , Auth0ClientEnvNode = tostring(column_ifexists('auth0_client_env_node_s', ""))
                , Auth0ClientEnvSwift = tostring(column_ifexists('auth0_client_env_swift_s', ""))
                , Auth0ClientName = tostring(column_ifexists('auth0_client_name_s', ""))
                , Auth0ClientVersion = tostring(column_ifexists('auth0_client_version_s', ""))
                , ClientId = tostring(column_ifexists('client_id_s', ""))
                , ClientIp = tostring(column_ifexists('client_ip_s', ""))
                , ClientName = tostring(column_ifexists('client_name_s', ""))
                , ConnectionId = tostring(column_ifexists('connection_id_s', ""))
                , Connection = tostring(column_ifexists('connection_s', ""))
                , Date = todatetime(column_ifexists('date_t', ""))
                , Description = tostring(column_ifexists('description_s', ""))
                , DetailsAccessedSecrets = tostring(column_ifexists('details_accessedSecrets_s', ""))
                , DetailsActionsExecutions = todynamic(column_ifexists('details_actions_executions_s', ""))
                , DetailsAllowedOrigins = todynamic(column_ifexists('details_allowedOrigins_s', ""))
                , DetailsClientId = tostring(column_ifexists('details_body_client_id_s', ""))
                , DetailsConnection = tostring(column_ifexists('details_body_connection_s', ""))
                , DetailsEmail = tostring(column_ifexists('details_body_email_s', ""))
                , DetailsEmailVerified = tobool(column_ifexists('details_body_email_verified_b', ""))
                , DetailsIdentifierType = tostring(column_ifexists('details_body_identifier_type_s', ""))
                , DetailsIdentifierValue = tostring(column_ifexists('details_body_identifier_value_s', ""))
                , DetailsNewEmail = tostring(column_ifexists('details_body_newEmail_s', ""))
                , DetailsTenant = tostring(column_ifexists('details_body_tenant_s', ""))
                , DetailsUserId = tostring(column_ifexists('details_body_user_id_g', ""))
                , DetailsVerify = tobool(column_ifexists('details_body_verify_b', ""))
                , DetailsCode = tostring(column_ifexists('details_code_s', ""))
                , DetailsCompletedAt = unixtime_milliseconds_todatetime(tolong(column_ifexists('details_completedAt_d', "")))
                , DetailsConsoleOut = tostring(column_ifexists('details_consoleOut_s', ""))
                , DetailsElapsedTime = toint(column_ifexists('details_elapsedTime_d', ""))
                , DetailsErrorMessage = tostring(column_ifexists('details_error_message_s', ""))
                , DetailsHeadersOrigin = tostring(column_ifexists('details_headers_origin_s', ""))
                , DetailsXforwardedProtocol = tostring(column_ifexists('details_headers_x_forwarded_proto_s', ""))
                , DetailsHost = tostring(column_ifexists('details_host_s', ""))
                , DetailsInitiatedAt = unixtime_milliseconds_todatetime(tolong((column_ifexists('details_initiatedAt_d', ""))))
                , DetailsMethod = tostring(column_ifexists('details_method_s', ""))
                , DetailsOrigin = tostring(column_ifexists('details_origin_s', ""))
                , DetailsOriginalUrl = tostring(column_ifexists('details_originalUrl_s', ""))
                , DetailsPrompts = todynamic(column_ifexists('details_prompts_s', ""))
                , RequestAuthCredentialsJTI = tostring(column_ifexists('details_request_auth_credentials_jti_g', ""))
                , RequestAuthCredentialsScopes = todynamic(column_ifexists('details_request_auth_credentials_scopes_s', ""))
                , RequestAuthStrategy = tostring(column_ifexists('details_request_auth_strategy_s', ""))
                , RequestUserEmail = tostring(column_ifexists('details_request_auth_user_email_s', ""))
                , RequestUserPrincipalName = tostring(column_ifexists('details_request_auth_user_name_s', ""))
                , RequestAuthUserId = tostring(column_ifexists('details_request_auth_user_user_id_s', ""))
                , RequestMetadataPrimaryLocale = todynamic(column_ifexists('details_request_body_app_metadata_primary_locale_s', ""))
                , RequestMetadataSecondaryLocale= todynamic(column_ifexists('details_request_body_app_metadata_secondary_locales_s', ""))
                , RequestConnection = tostring(column_ifexists('details_request_body_connection_s', ""))
                , RequestEmail = tostring(column_ifexists('details_request_body_email_s', ""))
                , RequestEmailVerified = tobool(column_ifexists('details_request_body_email_verified_b', ""))
                , RequestBodyPassword = tostring(column_ifexists('details_request_body_password_s', ""))
                , RequestChannel = tostring(column_ifexists('details_request_channel_s', ""))
                , RequestIP = tostring(column_ifexists('details_request_ip_s', ""))
                , RequestMethod = tostring(column_ifexists('details_request_method_s', ""))
                , RequestPath = tostring(column_ifexists('details_request_path_s', ""))
                , RequestUserAgent = tostring(column_ifexists('details_request_userAgent_s', ""))
                , ResponseAppMetadataPrimaryLocale = todynamic(column_ifexists('details_response_body_app_metadata_primary_locale_s', ""))
                , ResponseAppMetadataSecondaryLocale = todynamic(column_ifexists('details_response_body_app_metadata_secondary_locales_s', ""))
                , ResponseBlocked = tobool(column_ifexists('details_response_body_blocked_b', ""))
                , ResponseClientID = tostring(column_ifexists('details_response_body_client_id_s', ""))
                , ResponseCreatedAt = tostring(column_ifexists('details_response_body_created_at_t', ""))
                , ResponseEmail = tostring(column_ifexists('details_response_body_email_s', ""))
                , ResponseEmailVerified = tobool(column_ifexists('details_response_body_email_verified_b', ""))
                , ResponseFamilyName = tostring(column_ifexists('details_response_body_family_name_s', ""))
                , ResponseGivenName = tostring(column_ifexists('details_response_body_given_name_s', ""))
                , ResponseIdentities = todynamic(column_ifexists('details_response_body_identities_s', ""))
                , ResponseLastIP = tostring(column_ifexists('details_response_body_last_ip_s', ""))
                , ResponseLastLogin = todatetime(column_ifexists('details_response_body_last_login_t', ""))
                , ResponseLastPasswordReset = todatetime(column_ifexists('details_response_body_last_password_reset_t', ""))
                , ResponseLoginsCount = toint(column_ifexists('details_response_body_logins_count_d', ""))
                , ResponseName = tostring(column_ifexists('details_response_body_name_s', ""))
                , ResponseNickname = tostring(column_ifexists('details_response_body_nickname_s', ""))
                , ResponsePhoneVerified = tobool(column_ifexists('details_response_body_phone_verified_b', ""))
                , ResponsePicture = tostring(column_ifexists('details_response_body_picture_s', ""))
                , ResponseUpdatedAt = todatetime(column_ifexists('details_response_body_updated_at_t', ""))
                , ResponseUserDiscriminator = tostring(column_ifexists('details_response_body_user_discriminator_s', ""))
                , ResponseUserId = tostring(split(column_ifexists('details_response_body_user_id_s', ""), "|")[1])
                , ResponseStatusCode = toint(column_ifexists('details_response_statusCode_d', ""))
                , SessionId = tostring(column_ifexists('details_session_id_s', ""))
                , StatsLoginsCount = toint(column_ifexists('details_stats_loginsCount_d', ""))
                , XHR = tobool(column_ifexists('details_xhr_b', ""))
                , Hostname = tostring(column_ifexists('hostname_s', ""))
                , IPAddress = tostring(column_ifexists('ip_s', ""))
                , IsMobile = tobool(column_ifexists('isMobile_b', ""))
                , LogId = tostring(column_ifexists('log_id_s', ""))
                , Scope = tostring(column_ifexists('scope_s', ""))
                , Strategy = tostring(column_ifexists('strategy_s', ""))
                , StrategyType = tostring(column_ifexists('strategy_type_s', ""))
                , Type = tostring(column_ifexists('Type', ""))
                , EventCode = tostring(column_ifexists('type_s', ""))
                , UserAgent = tostring(column_ifexists('user_agent_s', ""))
                , UserId = tostring(split(column_ifexists('user_id_s', ""), '|')[1])
                , UserPrincipalName = tolower(tostring(column_ifexists('user_name_s', "")))
                | extend TimeGenerated = Date
                | extend IPGeoLocation = geo_info_from_ip_address
                ;
            };
        let FailedByCORS = ()
            // fco =Origin is not in the Allowed Origins list for the specified application
            {
                logData
                | where EventCode == "fco"
                | extend LogType = "Failed By CORS"
                | project TimeGenerated, ClientId, Description, DetailsAllowedOrigins, DetailsHeadersOrigin
                    , DetailsXforwardedProtocol, DetailsHost, DetailsMethod, DetailsOrigin, DetailsOriginalUrl
                    , XHR, Hostname, IPAddress, IPGeoLocation, IsMobile, LogId, UserAgent, LogType
            };
        let FailedExchange = ()
            // feccft = Failed exchange of Access Token for a Client Credentials Grant
            // fepft = Failed exchange of Password for Access Token
            {
                logData
                | where EventCode == "feccft"
                    or EventCode == "fepft"
                | extend EventDescritpion = iff(EventCode == "feccft", "Failed exchange of Access Token for a Client Credentials Grant", "Failed exchange of Password for Access Token")
                | extend LogType = "Failed Exchange"
                | project TimeGenerated, Audience, ClientId, ClientIp,ClientName, ConnectionId
                    ,Connection, Description, Hostname, IPAddress, IPGeoLocation,  IsMobile, LogId, Scope
                    , UserAgent, UserPrincipalName, EventDescritpion, LogType
            };
        let FailedLogin = () 
            // fp =	Failed Login (Incorrect Password)	
            {
                logData
                | where EventCode == "fp"
                | extend LogType = "Failed Login"
                | project TimeGenerated, ClientId, ClientName, ConnectionId, Connection, Description
                    , DetailsErrorMessage, IPAddress, IPGeoLocation,  IsMobile, LogId, Strategy, StrategyType, UserAgent
                    , UserId, UserPrincipalName, LogType
            };
        let BlockedIpAddress = ()
            // limit_mu = An IP address is blocked because it attempted too many failed logins without a successful login. Or an IP address is blocked because it attempted too many sign-ups, whether successful or failed. For more information, 
            // see Attack Protection - https://auth0.com/docs/configure/attack-protection
            {
                logData
                | where EventCode == "limit_mu"
                | extend LogType = "Blocked IP Address"
                | project TimeGenerated, ClientId, ConnectionId, Connection, Description, IsMobile
                , LogId, UserAgent
                    , UserPrincipalName, LogType
            };
        let ManagementAPIReadOperation = ()
            // mgmt_api_read = API GET operation returning secrets completed successfully
            {
                logData
                | where EventCode == "mgmt_api_read"
                | extend LogType = "Management API Read Operation"
                | project TimeGenerated, ClientId, ConnectionId, Connection, Description, RequestAuthStrategy
                    , RequestChannel, RequestIP, RequestMethod, RequestPath, RequestUserAgent, ResponseStatusCode
                    , IPAddress, IsMobile, LogId, UserAgent, UserId, LogType
            };
        let BreachedPassword = () 
            // pwd_leak = Someone behind the IP address ip attempted to login with a leaked password.
            {
                logData
                | where EventCode == "pwd_leak"
                | extend LogType = "Breached Password"
                | project TimeGenerated, ClientId, ConnectionId, Connection, Description, Hostname, IPAddress
                    , IPGeoLocation, IsMobile, LogId, UserAgent, UserPrincipalName, LogType
            };
        let SuccessLogin = ()
            // s = Successful login event.
            {
                logData
                | where EventCode == "s"
                | extend LogType = "Success Login"
                | project TimeGenerated, ClientId, ClientName, ConnectionId, Connection, DetailsActionsExecutions
                    , DetailsCompletedAt, DetailsElapsedTime, DetailsInitiatedAt, DetailsPrompts, SessionId, StatsLoginsCount
                    , Hostname, IPAddress, IPGeoLocation, IsMobile, LogId, Strategy, UserAgent, UserId, UserPrincipalName, LogType
                };
        let SuccessAPIOperation = ()
            // sapi = Successful management API write event.
            {
                logData
                | where EventCode == "sapi"
                | extend LogType = "Success API Operation"
                | project TimeGenerated, ClientId, Description, RequestAuthCredentialsScopes, RequestAuthStrategy
                    , RequestMetadataPrimaryLocale, RequestMetadataSecondaryLocale, RequestConnection, RequestEmail, RequestEmailVerified
                    , RequestBodyPassword, RequestChannel, RequestIP, RequestPath, RequestUserAgent, ResponseAppMetadataPrimaryLocale
                    , ResponseAppMetadataSecondaryLocale, ResponseBlocked, ResponseCreatedAt, ResponseEmail, ResponseEmailVerified
                    , ResponseGivenName, ResponseFamilyName, ResponseIdentities, ResponseLastIP, ResponseLastLogin, ResponseLastPasswordReset
                    , ResponseLoginsCount, ResponseName, ResponsePhoneVerified, ResponsePicture, ResponseUpdatedAt, ResponseUserDiscriminator
                    , ResponseUserId, ResponseStatusCode, IPAddress, IPGeoLocation, IsMobile, LogId, UserAgent, LogType
            };
        let SuccessChangeEmail = ()
            // sce = Success Change Email
            {
                logData
                | where EventCode == "sce"
                | extend LogType = "Success Change Email"
                | project TimeGenerated, ClientId, ClientName, ConnectionId, Connection, Description, DetailsClientId, DetailsConnection
                    , DetailsEmail, DetailsEmailVerified, DetailsTenant, DetailsUserId, DetailsVerify, RequestAuthCredentialsScopes, RequestAuthStrategy
                    , RequestMetadataPrimaryLocale, RequestMetadataSecondaryLocale, RequestConnection, RequestEmail, RequestEmailVerified, RequestBodyPassword
                    , RequestChannel, RequestIP, RequestMethod, RequestPath, RequestUserAgent, ResponseAppMetadataPrimaryLocale, ResponseAppMetadataSecondaryLocale
                    , ResponseBlocked, ResponseCreatedAt, ResponseEmail, ResponseEmailVerified, ResponseGivenName, ResponseFamilyName, ResponseIdentities
                    , ResponseLastIP, ResponseLastLogin, ResponseLastPasswordReset, ResponseLoginsCount, ResponseName, ResponseNickname, ResponsePhoneVerified
                    , ResponsePicture, ResponseUpdatedAt, ResponseUserDiscriminator, ResponseUserId, ResponseStatusCode, IPAddress, IPGeoLocation, IsMobile, LogId, Strategy
                    , StrategyType, UserAgent, UserId, UserPrincipalName, LogType
            };
        let SuccessChangePassword = () 
            // scp = Success Change Password
            {
                logData
                | where EventCode == "scp"
                | extend LogType = "Success Change Password"
                | project TimeGenerated, ClientId, ClientName, ConnectionId, Connection, Description, DetailsClientId, DetailsConnection
                    , DetailsEmail, DetailsIdentifierType, DetailsIdentifierValue, DetailsTenant, DetailsUserId, DetailsVerify, IPAddress
                    , IPGeoLocation, IsMobile, LogId, Strategy, StrategyType, UserAgent, UserId, UserPrincipalName, LogType
            };
        let SuccessExchange = ()
            // seacft = Successful exchange of authorization code for Access Token
            // seccft = Successful exchange of Access Token for a Client Credentials Grant
            // sepft = Successful exchange of Password for Access Token
            // sertft = Successful exchange of Refresh Token for Access Token
            {
                logData
                | where EventCode == "seacft"
                    or EventCode == "seccft"
                    or EventCode == "sepft"
                    or EventCode == "sertft"
                | extend EventDescritpion = case (
                    EventCode == "seacft", "Successful exchange of authorization code for Access Token"
                    , EventCode == "seccft", "Successful exchange of Access Token for a Client Credentials Grant"
                    , EventCode == "sepft", "Successful exchange of Password for Access Token"
                    , EventCode == "sertft", "Successful exchange of Refresh Token for Access Token"
                    , ""
                )
                | extend LogType = "Success Exchange"
                | project TimeGenerated, Audience, Auth0ClientEnvNode, Auth0ClientEnvSwift, Auth0ClientName, Auth0ClientVersion, ClientId
                    , ClientIp, ClientName, ConnectionId, Connection, Description, DetailsActionsExecutions, DetailsCode, Hostname
                    , IPAddress, IPGeoLocation, IsMobile, LogId, Scope, UserAgent, UserId, UserPrincipalName, EventDescritpion, LogType
            };
    union FailedByCORS, FailedExchange, FailedLogin, BlockedIpAddress, ManagementAPIReadOperation, BreachedPassword
        , SuccessLogin, SuccessAPIOperation, SuccessChangeEmail, SuccessChangePassword, SuccessExchange