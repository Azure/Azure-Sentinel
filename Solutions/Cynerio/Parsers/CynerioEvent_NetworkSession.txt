// Usage Instructions:
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and specifying Legacy Category.
// This function maps Cynerio Network events to Microsoft Sentinel Information Model (ASIM) (https://docs.microsoft.com/azure/sentinel/normalization).
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries
// Reference : Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
let SeverityLookup = datatable (EventOriginalSeverity: string, EventSeverity:string) [
    'Low', 'Informational',
    'Medium', 'Low',
    'High', 'Medium',
    'Critical', 'High'
  ];

  let ScannerActivities = CynerioEvent_CL
    | where title_s == 'Scanner Activity'
    | extend EventOriginalSeverity = severity_s
    | lookup SeverityLookup on EventOriginalSeverity
    | extend
        Type = 'CynerioEvent_CL',
        EventStartTime = unixtime_seconds_todatetime(timestamp_d),
        EventEndTime = unixtime_seconds_todatetime(timestamp_d),
        EventOriginalUid = uid_s,
        EventType = 'EndpointNetworkSession',
        EventOriginalType = 'IDS',
        EventOriginalSubType = 'Scanner Activity',
        EventMessage = details_s,
        AdditonalFields = pack("AssetType", asset_type_s),
        Dvc = tostring(asset_id_g),
        DvcId = tostring(asset_id_g),
        DvcIpAddr = asset_ip_s,
        EventProduct = 'Cynerio',
        EventCount = int(1),
        EventResult = 'Success',
        EventVendor = 'Cynerio',
        EventSchema = 'NetworkSession',
        EventSchemaVersion = '0.2.5',
        SrcIpAddr = src_ip_s,
        IpAddr = src_ip_s,
        DstIpAddr = dst_ip_s,
        NetworkProtocol = trans_s,
        DstPortNumber = toint(port_d)
    | parse EventMessage with "Scanner type: " SrcAppName " Source IP" * "Expliot: " ThreatName "," *
    | project-away
        *_d, *_s, *_g;

  let InternetBrowsings = CynerioEvent_CL
    | where title_s == 'Internet Browsing'
    | extend EventOriginalSeverity = severity_s
    | lookup SeverityLookup on EventOriginalSeverity
    | extend
        Type = 'CynerioEvent_CL',
        EventStartTime = unixtime_seconds_todatetime(timestamp_d),
        EventEndTime = unixtime_seconds_todatetime(timestamp_d),
        EventType = 'EndpointNetworkSession',
        EventOriginalType = 'IDS',
        EventOriginalSubType = title_s,
        EventOriginalUid = uid_s,
        EventMessage = details_s,
        Dvc = tostring(asset_id_g),
        AdditonalFields = pack("AssetType", asset_type_s),
        DvcId = tostring(asset_id_g),
        DvcIpAddr = asset_ip_s,
        EventProduct = 'Cynerio',
        EventCount = int(1),
        EventResult = 'Success',
        EventVendor = 'Cynerio',
        EventSchema = 'NetworkSession',
        EventSchemaVersion = '0.2.5',
        SrcIpAddr = src_ip_s,
        IpAddr = src_ip_s,
        DstIpAddr = dst_ip_s,
        NetworkProtocol = trans_s,
        DstPortNumber = toint(port_d),
        DstFQDN = host_s,
        FQDN = host_s,
        SrcAppName = browser_s
    | project-away
        *_d, *_s, *_g;

  let SuspiciousConnections = CynerioEvent_CL
    | where title_s == 'Suspicious Connection'
    | extend EventOriginalSeverity = severity_s
    | lookup SeverityLookup on EventOriginalSeverity
    | extend
        Type = 'CynerioEvent_CL',
        EventStartTime = unixtime_seconds_todatetime(timestamp_d),
        EventEndTime = unixtime_seconds_todatetime(timestamp_d),
        EventOriginalUid = uid_s,
        EventType = 'EndpointNetworkSession',
        EventOriginalType = 'IDS',
        EventOriginalSubType = title_s,
        EventMessage = details_s,
        DvcIdType = 'Cynerio',
        AdditonalFields = pack("AssetType", asset_type_s),
        Dvc = tostring(asset_id_g),
        DvcId = tostring(asset_id_g),
        DvcIpAddr = asset_ip_s,
        EventProduct = 'Cynerio',
        EventCount = int(1),
        EventResult = 'Success',
        EventVendor = 'Cynerio',
        EventSchema = 'NetworkSession',
        EventSchemaVersion = '0.2.5',
        SrcIpAddr = src_ip_s,
        IpAddr = src_ip_s,
        DstIpAddr = dst_ip_s,
        NetworkProtocol = trans_s,
        DstPortNumber = toint(port_d),
        NetworkApplicationProtocol = service_s,
        DstDomainType = 'FQDN'
    | parse EventMessage with * "Suspicious Connection Entity: " DstDomain "," *
    | project-away
        *_d, *_s, *_g;

  let ExplotationAttempts = CynerioEvent_CL
    | where title_s == 'Exploitation Attempt'
    | extend EventOriginalSeverity = severity_s
    | lookup SeverityLookup on EventOriginalSeverity
    | extend
        Type = 'CynerioEvent_CL',
        EventStartTime = unixtime_seconds_todatetime(timestamp_d),
        EventEndTime = unixtime_seconds_todatetime(timestamp_d),
        EventOriginalUid = uid_s,
        EventType = 'EndpointNetworkSession',
        EventOriginalType = 'IDS',
        EventOriginalSubType = title_s,
        EventMessage = details_s,
        DvcIdType = 'Cynerio',
        AdditonalFields = pack("AssetType", asset_type_s),
        Dvc = tostring(asset_id_g),
        DvcId = tostring(asset_id_g),
        DvcIpAddr = asset_ip_s,
        EventProduct = 'Cynerio',
        EventCount = int(1),
        EventResult = 'Success',
        EventVendor = 'Cynerio',
        EventSchema = 'NetworkSession',
        EventSchemaVersion = '0.2.5',
        SrcIpAddr = src_ip_s,
        IpAddr = src_ip_s,
        DstIpAddr = dst_ip_s,
        NetworkProtocol = trans_s,
        DstPortNumber = toint(port_d)
    | parse EventMessage with * "Expliot: " ThreatName "," *
    | project-away
      *_d, *_s, *_g;

  let Connections = CynerioEvent_CL
    | where title_s in ('SSH Connection', 'Telnet Connection', 'RDP Connection', 'REXEC Connection')
    | extend EventOriginalSeverity = severity_s
    | lookup SeverityLookup on EventOriginalSeverity
    | extend
        Type = 'CynerioEvent_CL',
        EventStartTime = unixtime_seconds_todatetime(timestamp_d),
        EventEndTime = unixtime_seconds_todatetime(timestamp_d),
        EventOriginalUid = uid_s,
        EventType = 'EndpointNetworkSession',
        EventOriginalType = 'IDS',
        EventOriginalSubType = title_s,
        EventMessage = details_s,
        DvcIdType = 'Cynerio',
        Dvc = tostring(asset_id_g),
        AdditonalFields = pack("AssetType", asset_type_s),
        DvcId = tostring(asset_id_g),
        DvcIpAddr = asset_ip_s,
        EventProduct = 'Cynerio',
        EventCount = int(1),
        EventResult = 'Success',
        EventVendor = 'Cynerio',
        EventSchema = 'NetworkSession',
        EventSchemaVersion = '0.2.5',
        SrcIpAddr = src_ip_s,
        IpAddr = src_ip_s,
        DstIpAddr = dst_ip_s,
        NetworkProtocol = trans_s,
        DstPortNumber = toint(port_d)
    | project-away
      *_d, *_s, *_g;

  union InternetBrowsings, ScannerActivities, SuspiciousConnections, ExplotationAttempts, Connections