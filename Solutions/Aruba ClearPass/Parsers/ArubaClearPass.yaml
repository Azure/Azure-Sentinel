id: 7dabe04d-66c5-4d47-8e3c-7580e807be88
Function:
  Title: Parser for ArubaClearPass
  Version: '1.0.0'
  LastUpdated: '2023-08-23'
Category: Microsoft Sentinel Parser
FunctionName: ArubaClearPass
FunctionAlias: ArubaClearPass
FunctionQuery: |
    let LogHeader =
    CommonSecurityLog
    | where DeviceVendor == "Aruba Networks" and DeviceProduct == "ClearPass"
    | extend Category = coalesce(
                                extract(@'cat=([^;]+)(\;|$)',1, AdditionalExtensions),                            
                                column_ifexists("DeviceEventCategory", "")
                            ),
            Outcome = coalesce(
                                extract(@'outcome=([^;]+)\;',1, AdditionalExtensions),                            
                                column_ifexists("EventOutcome", "")
                            )
    | project-rename DvcIpAddr = DeviceAddress,
                     DvcVersion = DeviceVersion,
                     SrcIpAddr = SourceIP;
    let InsightLogs = LogHeader
    | where Activity == "Insight Logs" or Category == "Insight Logs"
    // Version 6.5
    | extend UserName = extract(@'Auth.Username=([^;]+)\;',1, AdditionalExtensions),
            AuthorizationSources = extract(@'Auth.Authorization-Sources=([^;]+)\;',1, AdditionalExtensions),
            NetworkProtocol = extract(@'Auth.Protocol=([^;]+)\;',1, AdditionalExtensions),
            RequestTimestamp = extract(@'Auth.Request-Timestamp=([^;]+)\;',1, AdditionalExtensions),
            LoginStatus = extract(@'Auth.Login-Status=([^;]+)\;',1, AdditionalExtensions),
            Source = extract(@'Auth.Source=([^;]+)\;',1, AdditionalExtensions),
            EnforcementProfiles = extract(@'Auth.Enforcement-Profiles=([^;]+)\;',1, AdditionalExtensions),
            NasPort = extract(@'Auth.NAS-Port=([^;]+)\;',1, AdditionalExtensions),
            TimestampFormat = extract(@'TimestampFormat=([^;]+)\;',1, AdditionalExtensions),
            Ssid = extract(@'Auth.SSID=([^;]+)\;',1, AdditionalExtensions),
            NasPortType = extract(@'Auth.NAS-Port-Type=([^;]+)\;',1, AdditionalExtensions),
            ErrorCode = extract(@'Auth.Error-Code=([^;]+)\;',1, AdditionalExtensions),
            Roles = extract(@'Auth.Roles=([^;]+)\;',1, AdditionalExtensions),
            Service = extract(@'Auth.Service=([^;]+)\;',1, AdditionalExtensions),
            SrcMacAddr = extract(@'Auth.Host-MAC-Address=([^;]+)\;',1, AdditionalExtensions),
            Unhealthy = extract(@'Auth.Unhealthy=([^;]+)\;',1, AdditionalExtensions),
            NasIpAddr = extract(@'Auth.NAS-IP-Address=([^;]+)\;',1, AdditionalExtensions),
            CalledStationId = extract(@'Auth.CalledStationId=([^;]+)\;',1, AdditionalExtensions),
            NasIdentifier = extract(@'Auth.NAS-Identifier=([^;]+)\;',1, AdditionalExtensions)
    // Version 6.6+
    | extend EndpointStatus = extract(@'ArubaClearpassEndpointStatus=([^;]+)\;',1, AdditionalExtensions),
             EndpointConflict = extract(@'ArubaClearpassEndpointConflict=([^;]+)\;',1, AdditionalExtensions),
             EndpointDvcCategory = iif(DeviceCustomString3Label == "Endpoint.Device-Category", DeviceCustomString3, ""),
             EndpointDvcFamily = iif(DeviceCustomString4Label == "Endpoint.Device-Family", DeviceCustomString4, ""),
             EndpointDvcName = iif(DeviceCustomString5Label == "Endpoint.Device-Name", DeviceCustomString5, ""),
             EndpointMacVendor = iif(DeviceCustomString6Label == "Endpoint.MAC-Vendor", DeviceCustomString6, ""),        
             EndpointAddedDate= iif(DeviceCustomDate1Label == "Endpoint.Added-At", todatetime(DeviceCustomDate1), todatetime(""))
    | extend Category = iif(isempty(Category), "Insight Logs", Category); 
    let AuditRecords = LogHeader
    | where Activity == "Audit Records" or Category == "Audit Records"
    | extend TimestampFormat = extract(@'timeFormat=([^;]+)\;',1, AdditionalExtensions),
            UserName = extract(@'usrName=([^;]+)(\;|$)',1, AdditionalExtensions)
    | extend Category = iif(isempty(Category), "Audit Records", Category);
    let SessionLogs = LogHeader
    | where Activity == "Session Logs" or Category == "Session Logs"
    | extend Timestamp = extract(@'RADIUS.Acct-Timestamp=([^;]+)\;',1, AdditionalExtensions),
            CallingStationId = extract(@'RADIUS.Acct-Calling-Station-Id=([^;]+)\;',1, AdditionalExtensions),
            InputOctets = extract(@'RADIUS.Acct-Input-Octets=([^;]+)\;',1, AdditionalExtensions),
            TimestampFormat = extract(@'TimestampFormat=([^;]+)\;',1, AdditionalExtensions),
            SessionTime = extract(@'RADIUS.Acct-Session-Time=([^;]+)\;',1, AdditionalExtensions),
            FramedIpAddr = extract(@'RADIUS.Acct-Framed-IP-Address=([^;]+)\;',1, AdditionalExtensions),
            Source = extract(@'RADIUS.Auth-Source=([^;]+)\;',1, AdditionalExtensions),
            Method = extract(@'RADIUS.Auth-Method=([^;]+)\;',1, AdditionalExtensions),
            SessionId = extract(@'RADIUS.Acct-Session-Id=([^;]+)\;',1, AdditionalExtensions),
            ServiceName = extract(@'RADIUS.Acct-Service-Name=([^;]+)\;',1, AdditionalExtensions),
            NasPortNumber = extract(@'RADIUS.Acct-NAS-Port=([^;]+)\;',1, AdditionalExtensions),
            NasPortType = extract(@'RADIUS.Acct-NAS-Port-Type=([^;]+)\;',1, AdditionalExtensions),
            OutputOctets = extract(@'RADIUS.Acct-Output-Octets=([^;]+)\;',1, AdditionalExtensions),
            UserName = extract(@'RADIUS.Acct-Username=([^;]+)\;',1, AdditionalExtensions),
            NasIpAddr = extract(@'RADIUS.Acct-NAS-IP-Address=([^;]+)\;',1, AdditionalExtensions)
    | project-rename DstServiceName = DestinationServiceName,
                     DstUserPriviledges = DestinationUserPrivileges,
                     DstUserName = DestinationUserName,
                     DstMacAddr = DestinationMACAddress
    | extend Category = iif(isempty(Category), "Sessions Logs", Category);
    let SystemLogs = LogHeader
    | where Activity == "System Logs" or Category == "ClearPass System Events"
    | extend Description = extract(@'description=([^;]+)\;',1, AdditionalExtensions),
             Action = extract(@'daction=([^;]+)\;',1, AdditionalExtensions),
             InputOctets = extract(@'RADIUS.Acct-Input-Octets=([^;]+)\;',1, AdditionalExtensions),
             TimeFormat = extract(@'devTimeFormat=([^;]+)\;',1, AdditionalExtensions)
    | extend Category = iif(isempty(Category), "System Logs", "System Logs");
    union SessionLogs, InsightLogs, AuditRecords, SystemLogs