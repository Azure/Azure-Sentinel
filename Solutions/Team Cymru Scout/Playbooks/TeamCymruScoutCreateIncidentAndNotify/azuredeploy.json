{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Team Cymru Scout Create Incident And Notify",
        "description": "This playbook will create an incident for malicious ip and notify to pre-defined or user customizable email id.",
        "prerequisites": [
            "1. User should have an outlook mail account in order to use this playbook."
        ],
        "postDeployment": [
            "**a. Authorize connections**",
            "Once deployment is complete, authorize each connection.",
            "1. Go to your logic app → API connections → Select outlook connection resource",
            "2. Go to General → Edit API connection",
            "3. Click Authorize",
            "5. Sign in",
            "6. Click Save",
            "7. Repeat steps for other connections",
            "**b. Assign Role to add comment in incident**",
            "Assign role to this playbook.",
            "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
            "2.Add role assignment",
            "3.Assignment type: Job function roles",
            "4.Role: Microsoft Sentinel Contributor",
            "5.Members: select managed identity for assigned access to and add your logic app as member",
            "6.Click on review+assign"
        ],
        "lastUpdateTime": "2024-08-13T11:30:10.866Z",
        "entities": ["IP"],
        "tags": [
            "Team Cymru Scout",
            "Incident",
            "IP",
            "Mail"
        ],
        "support": {
            "tier": "community",
            "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author": {
            "name": "Team Cymru"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "TeamCymruScoutCreateIncidentAndNotify",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Please do not change the playbook name, else you will not be able to run playbook from workbook."
            }
        },
        "EmailId": {
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Enter valid comma separated email ID(s) of receiver without space. (e.g. person1@gmail.com,person2@gmail.com)"
            }
        },
        "WorkspaceName": {
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Enter workspace name in which you want to create an incidents."
            }
        }
    },
    "variables": {
        "AzuremonitorlogsConnectionName": "[concat('Azuremonitorlogs-', parameters('PlaybookName'))]",
        "MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
        "OutlookConnectionName": "[concat('Outlook-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "email_id": {
                            "defaultValue": "[trim(parameters('EmailId'))]",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "country_code": {
                                            "type": "string"
                                        },
                                        "fetch_from_logs": {
                                            "type": "boolean"
                                        },
                                        "indicator_value": {
                                            "type": "string"
                                        },
                                        "insights": {
                                            "items": {
                                                "properties": {},
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "open_ports": {
                                            "items": {
                                                "properties": {},
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "pdns": {
                                            "items": {
                                                "properties": {},
                                                "required": [],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "time_range": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Add_Insights_Details_To_Incident_Comment_(V3)": {
                            "runAfter": {
                                "Create_Incident_For_Malicious_IP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "incidentArmId": "@body('Create_Incident_For_Malicious_IP')?['id']",
                                    "message": "<p><strong>IP:</strong> @{triggerBody()?['indicator_value']}<br>\n<strong>Country Code:</strong> @{variables('country_code')}<br>\n<strong>Insights:</strong><br>\n@{variables('insights_html_table')}</p>"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                            }
                        },
                        "Add_Open_Ports_Details_To_Incident_Comment_(V3)": {
                            "runAfter": {
                                "Create_Incident_For_Malicious_IP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "incidentArmId": "@body('Create_Incident_For_Malicious_IP')?['id']",
                                    "message": "<p><strong>IP: </strong>@{triggerBody()?['indicator_value']}<br>\n<strong>Country Code: </strong>@{variables('country_code')}<strong><br>\nOpen Ports:<br>\n</strong>@{variables('open_ports_html_table')}</p>"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                            }
                        },
                        "Add_PDNS_Details_To_Incident_Comment_(V3)": {
                            "runAfter": {
                                "Create_Incident_For_Malicious_IP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "incidentArmId": "@body('Create_Incident_For_Malicious_IP')?['id']",
                                    "message": "<p><strong>IP: </strong>@{triggerBody()?['indicator_value']}<br>\n<strong>Country Code:</strong> @{variables('country_code')}<br>\n<strong>PDNS:</strong><br>\n@{variables('pdns_html_table')}</p>"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                            }
                        },
                        "Condition_To_Fetch_Data_From_Logs_If_Flag_Set_To_True": {
                            "actions": {
                                "Condition_To_Add_Insights_Data_In_HTML_Table_If_It_Is_Available_In_Logs": {
                                    "actions": {
                                        "Complete_HTML_Table_For_Insights_Data": {
                                            "runAfter": {
                                                "For_Each_Insights_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "insights_html_table",
                                                "value": "</table>"
                                            }
                                        },
                                        "Compose_An_Array_For_Insights_Data": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "@json(body('Run_Query_And_List_Data_For_Indicator')?['value'][0]?['Insights'])"
                                        },
                                        "For_Each_Insights_Data": {
                                            "foreach": "@outputs('Compose_An_Array_For_Insights_Data')",
                                            "actions": {
                                                "Append_Insight_To_Insights_HTML_Table": {
                                                    "runAfter": {},
                                                    "type": "AppendToStringVariable",
                                                    "inputs": {
                                                        "name": "insights_html_table",
                                                        "value": "<tr><td>@{items('For_Each_Insights_Data')?['rating']}</td><td>@{items('For_Each_Insights_Data')?['message']}</td></tr>"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Compose_An_Array_For_Insights_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "Set_Country_Code_From_Logs_Data": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Set_Insights_HTML_Table_For_No_Insights_Record_Found": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "insights_html_table",
                                                    "value": "<b> No Insights Data Found in Logs. </b>"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@empty(body('Run_Query_And_List_Data_For_Indicator')?['value'][0]?['Insights'])",
                                                        "@true"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Condition_To_Add_Open_Ports_Data_In_HTML_Table_If_It_Is_Available_In_Logs": {
                                    "actions": {
                                        "Complete_HTML_Table_For_Open_Ports_Data": {
                                            "runAfter": {
                                                "For_Each_Port_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "open_ports_html_table",
                                                "value": "</table>"
                                            }
                                        },
                                        "Compose_An_Array_For_Open_Ports_Data": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "@json(body('Run_Query_And_List_Data_For_Indicator')?['value'][0]?['OpenPortsDetails'])"
                                        },
                                        "For_Each_Port_Data": {
                                            "foreach": "@outputs('Compose_An_Array_For_Open_Ports_Data')",
                                            "actions": {
                                                "Append_Data_To_HTML_Variable": {
                                                    "runAfter": {},
                                                    "type": "AppendToStringVariable",
                                                    "inputs": {
                                                        "name": "open_ports_html_table",
                                                        "value": "<tr><td>@{items('For_Each_Port_Data')?['port']}</td><td>@{items('For_Each_Port_Data')?['protocol']}</td><td>@{items('For_Each_Port_Data')?['protocol_text']}</td><td>@{items('For_Each_Port_Data')?['event_count']}</td></tr>"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Compose_An_Array_For_Open_Ports_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "Set_Country_Code_From_Logs_Data": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Set_Open_Ports_HTML_Table_Data_For_No_Open_Ports_Record_Found": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "open_ports_html_table",
                                                    "value": "<b> No Open Ports Data Found in Logs. </b>"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@empty(body('Run_Query_And_List_Data_For_Indicator')?['value'][0]?['OpenPortsDetails'])",
                                                        "@true"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Condition_To_Add_PDNS_Data_In_HTML_Table_If_It_Is_Available_In_Logs": {
                                    "actions": {
                                        "Complete_HTML_Table_For_PDNS_Data": {
                                            "runAfter": {
                                                "For_Each_PDNS_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "pdns_html_table",
                                                "value": "</table>"
                                            }
                                        },
                                        "Compose_An_Array_For_PDNS_Data": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "@json(body('Run_Query_And_List_Data_For_Indicator')?['value'][0]?['PDNSDetails'])"
                                        },
                                        "For_Each_PDNS_Data": {
                                            "foreach": "@outputs('Compose_An_Array_For_PDNS_Data')",
                                            "actions": {
                                                "Append_Data_To_PDNS_HTML_Table": {
                                                    "runAfter": {},
                                                    "type": "AppendToStringVariable",
                                                    "inputs": {
                                                        "name": "pdns_html_table",
                                                        "value": "<tr><td>@{items('For_Each_PDNS_Data')?['domain']}</td><td>@{items('For_Each_PDNS_Data')?['event_count']}</td></tr>"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Compose_An_Array_For_PDNS_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "Set_Country_Code_From_Logs_Data": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Set_PDNS_HTML_Data_For_No_PDNS_Record_Found": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "pdns_html_table",
                                                    "value": "<b> No PDNS Data Found in Logs. </b>"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@empty(body('Run_Query_And_List_Data_For_Indicator')?['value'][0]?['PDNSDetails'])",
                                                        "@true"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Run_Query_And_List_Data_For_Indicator": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "CymruScoutIP\n| where Indicator == \"@{triggerBody()?['indicator_value']}\"\n| summarize arg_max(TimeGenerated, *) by Indicator\n| project PDNSDetails,  OpenPortsDetails, Insights, IPCountryCode",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/queryData",
                                        "queries": {
                                            "resourcegroups": "[resourceGroup().name]",
                                            "resourcename": "[trim(parameters('WorkspaceName'))]",
                                            "resourcetype": "Log Analytics Workspace",
                                            "subscriptions": "[subscription().subscriptionId]",
                                            "timerange": "@triggerBody()?['time_range']"
                                        }
                                    }
                                },
                                "Set_Country_Code_From_Logs_Data": {
                                    "runAfter": {
                                        "Run_Query_And_List_Data_For_Indicator": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "country_code",
                                        "value": "@{if(empty(body('Run_Query_And_List_Data_For_Indicator')?['value'][0]?['IPCountryCode']), 'No Country Code Found', body('Run_Query_And_List_Data_For_Indicator')?['value'][0]?['IPCountryCode'])}"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_Country_Code": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Condition_To_Add_Insights_Data_To_HTML_Table_If_It_Is_Available": {
                                        "actions": {
                                            "Complete_Insights_HTML_Table": {
                                                "runAfter": {
                                                    "For_Each_Insights": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "AppendToStringVariable",
                                                "inputs": {
                                                    "name": "insights_html_table",
                                                    "value": "</table>"
                                                }
                                            },
                                            "For_Each_Insights": {
                                                "foreach": "@triggerBody()?['insights']",
                                                "actions": {
                                                    "Append_Insights_Information_To_Insights_HTML_Table": {
                                                        "runAfter": {},
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "insights_html_table",
                                                            "value": "<tr><td>@{items('For_Each_Insights')?['rating']}</td><td>@{items('For_Each_Insights')?['message']}</td></tr>"
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        },
                                        "runAfter": {
                                            "Condition_To_Add_PDNS_Data_To_HTML_Table_If_It_Is_Available": [
                                                "Succeeded"
                                            ]
                                        },
                                        "else": {
                                            "actions": {
                                                "Set_Insights_HTML_Table_Data_For_No_Insights_Found": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "insights_html_table",
                                                        "value": "<b> No Insights Found. </b>"
                                                    }
                                                }
                                            }
                                        },
                                        "expression": {
                                            "and": [
                                                {
                                                    "not": {
                                                        "equals": [
                                                            "@triggerBody()?['insights']",
                                                            "@null"
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "type": "If"
                                    },
                                    "Condition_To_Add_Open_Ports_Data_To_HTML_Table_If_It_Is_Available": {
                                        "actions": {
                                            "Complete_Open_Ports_HTML_Table": {
                                                "runAfter": {
                                                    "For_Each_Open_Port": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "AppendToStringVariable",
                                                "inputs": {
                                                    "name": "open_ports_html_table",
                                                    "value": "</table>"
                                                }
                                            },
                                            "For_Each_Open_Port": {
                                                "foreach": "@triggerBody()?['open_ports']",
                                                "actions": {
                                                    "Append_Each_Port_Details_To_HTML_Table": {
                                                        "runAfter": {},
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "open_ports_html_table",
                                                            "value": "<tr><td>@{items('For_Each_Open_Port')?['port']}</td><td>@{items('For_Each_Open_Port')?['protocol']}</td><td>@{items('For_Each_Open_Port')?['protocol_text']}</td><td>@{items('For_Each_Open_Port')?['event_count']}</td></tr>"
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        },
                                        "runAfter": {},
                                        "else": {
                                            "actions": {
                                                "Set_Open_Ports_HTML_Table_Data_For_No_Data_Found": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "open_ports_html_table",
                                                        "value": "<b> No Open Ports Details Found. </b>"
                                                    }
                                                }
                                            }
                                        },
                                        "expression": {
                                            "and": [
                                                {
                                                    "not": {
                                                        "equals": [
                                                            "@triggerBody()?['open_ports']",
                                                            "@null"
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "type": "If"
                                    },
                                    "Condition_To_Add_PDNS_Data_To_HTML_Table_If_It_Is_Available": {
                                        "actions": {
                                            "Complete_PDNS_HTML_Table": {
                                                "runAfter": {
                                                    "For_Each_PDNS": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "AppendToStringVariable",
                                                "inputs": {
                                                    "name": "pdns_html_table",
                                                    "value": "</table>"
                                                }
                                            },
                                            "For_Each_PDNS": {
                                                "foreach": "@triggerBody()?['pdns']",
                                                "actions": {
                                                    "Append_PDNS_To_PDNS_HTML_Table": {
                                                        "runAfter": {},
                                                        "type": "AppendToStringVariable",
                                                        "inputs": {
                                                            "name": "pdns_html_table",
                                                            "value": "<tr><td>@{items('For_Each_PDNS')?['domain']}</td><td>@{items('For_Each_PDNS')?['event_count']}</td></tr>"
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        },
                                        "runAfter": {
                                            "Condition_To_Add_Open_Ports_Data_To_HTML_Table_If_It_Is_Available": [
                                                "Succeeded"
                                            ]
                                        },
                                        "else": {
                                            "actions": {
                                                "Set_PDNS_HTML_Table_Data_For_No_PDNS_Found": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "pdns_html_table",
                                                        "value": "<b> No PDNS Details Found. </b>"
                                                    }
                                                }
                                            }
                                        },
                                        "expression": {
                                            "and": [
                                                {
                                                    "not": {
                                                        "equals": [
                                                            "@triggerBody()?['pdns']",
                                                            "@null"
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "type": "If"
                                    },
                                    "Set_Country_Code": {
                                        "runAfter": {
                                            "Condition_To_Add_Insights_Data_To_HTML_Table_If_It_Is_Available": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "country_code",
                                            "value": "@{if(empty(triggerBody()?['country_code']), 'No Country Code Found', triggerBody()?['country_code'])}"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@triggerBody()?['fetch_from_logs']",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Create_Incident_For_Malicious_IP": {
                            "runAfter": {
                                "Condition_To_Fetch_Data_From_Logs_If_Flag_Set_To_True": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "description": "Found malicious ip: @{triggerBody()?['indicator_value']} for Team Cymru Scout.",
                                    "severity": "High",
                                    "status": "New",
                                    "title": "Found Malicious IP: @{triggerBody()?['indicator_value']}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "put",
                                "path": "[concat('/Incidents/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/workspaces/', parameters('WorkspaceName'))]"
                            }
                        },
                        "Initialize_Country_Code": {
                            "runAfter": {
                                "Initialize_Insights_HTML_Table": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "country_code",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Email_ID": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email_recipient",
                                        "type": "string",
                                        "value": "@parameters('email_id')"
                                    }
                                ]
                            }
                        },
                        "Initialize_HTML_Table_For_Open_Ports_Data": {
                            "runAfter": {
                                "Initialize_Email_ID": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "open_ports_html_table",
                                        "type": "string",
                                        "value": "<table border=\"1\"><tr><th>Port</th><th>Protocol</th><th>Protocol Name</th><th>Events</th></tr>"
                                    }
                                ]
                            }
                        },
                        "Initialize_Insights_HTML_Table": {
                            "runAfter": {
                                "Initialize_PDNS_HTML_Table": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "insights_html_table",
                                        "type": "string",
                                        "value": "<table border=\"1\"><tr><th>Rating</th><th>Message</th></tr>"
                                    }
                                ]
                            }
                        },
                        "Initialize_PDNS_HTML_Table": {
                            "runAfter": {
                                "Initialize_HTML_Table_For_Open_Ports_Data": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "pdns_html_table",
                                        "type": "string",
                                        "value": "<table border=\"1\"><tr><th>Domain</th><th>Events</th></tr>"
                                    }
                                ]
                            }
                        },
                        "Response_To_Indicate_Failure": {
                            "runAfter": {
                                "Send_An_Email_(V2)": [
                                    "Failed"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": {
                                    "status": "failure"
                                },
                                "statusCode": 400
                            }
                        },
                        "Response_To_Indicate_Success": {
                            "runAfter": {
                                "Send_An_Email_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": {
                                    "status": "success"
                                },
                                "statusCode": 200
                            }
                        },
                        "Send_An_Email_(V2)": {
                            "runAfter": {
                                "Add_Insights_Details_To_Incident_Comment_(V3)": [
                                    "Succeeded",
                                    "FAILED",
                                    "TIMEDOUT"
                                ],
                                "Add_Open_Ports_Details_To_Incident_Comment_(V3)": [
                                    "Succeeded",
                                    "TIMEDOUT",
                                    "FAILED"
                                ],
                                "Add_PDNS_Details_To_Incident_Comment_(V3)": [
                                    "Succeeded",
                                    "TIMEDOUT",
                                    "FAILED"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "Body": "<p>A malicious IP address @{triggerBody()?['indicator_value']} has been identified, and an incident has been created for it in Sentinel.<br>\n<br>\n<strong>Incident URL: </strong>@{body('Create_Incident_For_Malicious_IP')?['properties']?['incidentUrl']}<br>\n<br>\n<strong>IP: </strong>@{triggerBody()?['indicator_value']}<br>\n<strong>Country Code: </strong>@{variables('country_code')}<br>\n<strong>Open Ports:</strong><br>\n@{variables('open_ports_html_table')}<br>\n<br>\n<strong>PDNS:</strong><br>\n@{variables('pdns_html_table')}<br>\n<br>\n<strong>Insights:</strong><br>\n@{variables('insights_html_table')}</p>",
                                    "Importance": "High",
                                    "Subject": "A malicious IP address has been identified, and an incident has been created for it in Sentinel.\nIP: @{triggerBody()?['indicator_value']}",
                                    "To": "@variables('email_recipient')"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['outlook']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/Mail"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                                "connectionName": "[variables('AzuremonitorlogsConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuremonitorlogs')]"
                            },
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "outlook": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('OutlookConnectionName'))]",
                                "connectionName": "[variables('OutlookConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Outlook')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "tags": {
                "hidden-SentinelTemplateName": "CymruScoutCreateIncidentAndNotify",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('OutlookConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzuremonitorlogsConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzuremonitorlogsConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuremonitorlogs')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('MicrosoftSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('OutlookConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('OutlookConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Outlook')]"
                }
            }
        }
    ]
}