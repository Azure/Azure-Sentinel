[
    {
        "name": "GCPFlowDCR",
        "apiVersion": "2023-03-11",
        "type": "Microsoft.Insights/dataCollectionRules",
        "location": "{{location}}",
        "properties": {
            "dataCollectionEndpointId": "{{dataCollectionEndpointId}}",
            "streamDeclarations": {
                "Custom-GCPFlowLogs": {
                    "columns": [
                        {
                            "name": "insertId",
                            "type": "string"
                        },
                        {
                            "name": "logName",
                            "type": "string"
                        },
                        {
                            "name": "jsonPayload",
                            "type": "dynamic"
                        },
                        {
                            "name": "receiveTimestamp",
                            "type": "datetime"
                        },
                        {
                            "name": "resource",
                            "type": "dynamic"
                        },
                        {
                            "name": "timestamp",
                            "type": "datetime"
                        }
                    ]
                }
            },
            "destinations": {
                "logAnalytics": [
                    {
                        "workspaceResourceId": "{{workspaceResourceId}}",
                        "name": "clv2ws1"
                    }
                ]
            },
            "dataFlows": [
                {
                    "streams": [
                        "Custom-GCPFlowLogs"
                    ],
                    "destinations": [
                        "clv2ws1"
                    ],
                    "transformKql": "source |extend TimeGenerated = timestamp, InsertId = tostring(insertId), BytesSent = tostring(jsonPayload['bytes_sent']), PacketsSent = tostring(jsonPayload['packets_sent']), Reporter = tostring(jsonPayload['reporter']), Rttmsec = tostring(jsonPayload['rtt_msec']), StartTime = todatetime(jsonPayload['start_time']), EndTime = todatetime(jsonPayload['end_time']), LogName = tostring(logName), ReceiveTimestamp = todatetime(receiveTimestamp), Timestamp = todatetime(timestamp), Location = tostring(resource.labels['location']), ProjectId = tostring(resource.labels['project_id']), SubnetworkId = tostring(resource.labels['subnetwork_id']), SubnetworkName = tostring(resource.labels['subnetwork_name']), ResourceType = tostring(resource['type']), DestIp = tostring(jsonPayload.connection['dest_ip']), DestPort = tostring(jsonPayload.connection['dest_port']), Protocol = tostring(jsonPayload.connection['protocol']), SrcIp = tostring(jsonPayload.connection['src_ip']), SrcPort = tostring(jsonPayload.connection['src_port']), DestInstanceProjectId = tostring(jsonPayload.dest_instance['project_id']), DestInstanceRegion = tostring(jsonPayload.dest_instance['region']), DestInstanceVmName = tostring(jsonPayload.dest_instance['vm_name']), DestInstanceZone = tostring(jsonPayload.dest_instance['zone']), DestInstanceGroupName = tostring(jsonPayload.dest_instance.managed_instance_group['name']), DestInstanceGroupZone = tostring(jsonPayload.dest_instance.managed_instance_group['zone']), DestInstanceGroupRegion = tostring(jsonPayload.dest_instance.managed_instance_group['region']), DestVpcProjectId = tostring(jsonPayload.dest_vpc['project_id']), DestVpcSubnetworkName = tostring(jsonPayload.dest_vpc['subnetwork_name']), DestVpcSubnetworkRegion = tostring(jsonPayload.dest_vpc['subnetwork_region']), DestVpcName = tostring(jsonPayload.dest_vpc['vpc_name']), NetworkServiceDscp = tostring(jsonPayload.network_service['dscp']), SrcInstanceProjectId = tostring(jsonPayload.src_instance['project_id']), SrcInstanceRegion = tostring(jsonPayload.src_instance['region']), SrcInstanceVmName = tostring(jsonPayload.src_instance['vm_name']), SrcInstanceZone = tostring(jsonPayload.src_instance['zone']), SrcInstanceGroupName = tostring(jsonPayload.src_instance.managed_instance_group['name']), SrcInstanceGroupZone = tostring(jsonPayload.src_instance.managed_instance_group['zone']), SrcInstanceGroupRegion = tostring(jsonPayload.src_instance.managed_instance_group['region']), SrcVpcProjectId = tostring(jsonPayload.src_vpc['project_id']), SrcVpcSubnetworkName = tostring(jsonPayload.src_vpc['subnetwork_name']), SrcVpcSubnetworkRegion = tostring(jsonPayload.src_vpc['subnetwork_region']), SrcVpcName = tostring(jsonPayload.src_vpc['vpc_name']), DestGoogleServiceType = tostring(jsonPayload.dest_google_service['type']), SrcGoogleServiceType = tostring(jsonPayload.src_google_service['type']), DestLocationAsn = tostring(jsonPayload.dest_location['asn']), DestLocationContinent = tostring(jsonPayload.dest_location['continent']), DestLocationCity = tostring(jsonPayload.dest_location['city']), DestLocationCountry = tostring(jsonPayload.dest_location['country']), DestLocationRegion = tostring(jsonPayload.dest_location['region']), SrcLocationAsn = tostring(jsonPayload.src_location['asn']), SrcLocationContinent = tostring(jsonPayload.src_location['continent']), SrcLocationCountry = tostring(jsonPayload.src_location['country']), SrcLocationCity = tostring(jsonPayload.src_location['city']), SrcLocationRegion = tostring(jsonPayload.src_location['region']), InternetRoutingDetailsEgressAsn = tostring(jsonPayload.internet_routing_details.egress_as_path[0].as_details[0].asn), LbBackendGroupName = tostring(jsonPayload.load_balancing['backend_group_name']), LbBackendGroupType = tostring(jsonPayload.load_balancing['backend_group_type']), LbForwardingRuleName = tostring(jsonPayload.load_balancing['forwarding_rule_name']), LbForwardingRuleProjectId = tostring(jsonPayload.load_balancing['forwarding_rule_project_id']), LbReporter = tostring(jsonPayload.load_balancing['reporter']), LbScheme = tostring(jsonPayload.load_balancing['scheme']), LbUrlMapName = tostring(jsonPayload.load_balancing['url_map_name']), LbBackendServiceName = tostring(jsonPayload.load_balancing['backend_service_name']), LbType = tostring(jsonPayload.load_balancing['type']), LbBackendGroupLocation = tostring(jsonPayload.load_balancing['backend_group_location']), LbVpc = todynamic(jsonPayload.load_balancing['vpc']), SrcGkeClusterLocation = tostring(jsonPayload.src_gke_details.cluster['cluster_location']), SrcGkeClusterName = tostring(jsonPayload.src_gke_details.cluster['cluster_name']), SrcGkeService = todynamic(jsonPayload.src_gke_details.service), SrcGkePodName = tostring(jsonPayload.src_gke_details.pod['pod_name']), SrcGkePodNamespace = tostring(jsonPayload.src_gke_details.pod['pod_namespace']), SrcGkePodWorkloadName = tostring(jsonPayload.src_gke_details.pod.workload['name']), SrcGkePodWorkloadType = tostring(jsonPayload.src_gke_details.pod.workload['type']), DestGkeClusterLocation = tostring(jsonPayload.dest_gke_details.cluster['cluster_location']), DestGkeClusterName = tostring(jsonPayload.dest_gke_details.cluster['cluster_name']), DestGkeService = todynamic(jsonPayload.dest_gke_details.service), DestGkePodName = tostring(jsonPayload.dest_gke_details.pod['pod_name']), DestGkePodNamespace = tostring(jsonPayload.dest_gke_details.pod['pod_namespace']), DestGkePodWorkloadName = tostring(jsonPayload.dest_gke_details.pod.workload['name']), DestGkePodWorkloadType = tostring(jsonPayload.dest_gke_details.pod.workload['type']), PscAttachmentProjectId = tostring(jsonPayload.psc.psc_attachment['project_id']), PscAttachmentRegion = tostring(jsonPayload.psc.psc_attachment['region']), PscAttachmentVpc = todynamic(jsonPayload.psc.psc_attachment['vpc']), PscEndpointProjectId = tostring(jsonPayload.psc.psc_endpoint['project_id']), PscEndpointConnectionId = tostring(jsonPayload.psc.psc_endpoint['psc_connection_id']), PscEndpointRegion = tostring(jsonPayload.psc.psc_endpoint['region']), PscEndpointTargetServiceType = tostring(jsonPayload.psc.psc_endpoint['target_service_type']), PscEndpointVpc = todynamic(jsonPayload.psc.psc_endpoint['vpc']), SrcGatewayProjectId = tostring(jsonPayload.src_gateway['project_id']), SrcGatewayLocation = tostring(jsonPayload.src_gateway['location']), SrcGatewayName = tostring(jsonPayload.src_gateway['name']), SrcGatewayType = tostring(jsonPayload.src_gateway['type']), SrcGatewayVpc = todynamic(jsonPayload.src_gateway['vpc']), SrcGatewayInterconnectName = tostring(jsonPayload.src_gateway['interconnect_name']), SrcGatewayInterconnectProjectNumber = tostring(jsonPayload.src_gateway['interconnect_project_number']), DestGatewayProjectId = tostring(jsonPayload.dest_gateway['project_id']), DestGatewayLocation = tostring(jsonPayload.dest_gateway['location']), DestGatewayName = tostring(jsonPayload.dest_gateway['name']), DestGatewayType = tostring(jsonPayload.dest_gateway['type']), DestGatewayVpc = todynamic(jsonPayload.dest_gateway['vpc']), DestGatewayInterconnectName = tostring(jsonPayload.dest_gateway['interconnect_name']), DestGatewayInterconnectProjectNumber = tostring(jsonPayload.dest_gateway['interconnect_project_number'])|project-away jsonPayload,resource",
                    "outputStream": "Custom-GCPVPCFlowLogsV2_CL"
                }
            ]
        }
    }
]