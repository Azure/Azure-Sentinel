{
  "$schema": "https://schema.management.azure.com/schemas/0.1.2-preview/CreateUIDefinition.MultiVm.json#",
  "handler": "Microsoft.Azure.CreateUIDef",
  "version": "0.1.2-preview",
  "parameters": {
    "config": {
      "isWizard": false,
      "basics": {
        "description": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/cyborgsecurity-logo-75px.svg\" width=\"75px\" height=\"75px\">\n\n**Note:** Please refer to the following before installing the solution: \r \n • Review the solution [Release Notes](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/Cyborg%20Security%20HUNTER/ReleaseNotes.md)\r \n •There may be [known issues](https://aka.ms/sentinelsolutionsknownissues) pertaining to this Solution, please refer to them before installing. \n\nThe [Cyborg Security HUNTER](https://www.cyborgsecurity.com/) solution for Microsoft Sentinel helps analysts to configure the 'Open in Tool' button within the HUNTER platform, allowing the Microsoft Sentinel hunt packages to be deployed in the Microsoft Sentinel Platform. \n\n**Data Connectors:** 1, **Hunting Queries:** 10\n\n[Learn more about Microsoft Sentinel](https://aka.ms/azuresentinel) | [Learn more about Solutions](https://aka.ms/azuresentinelsolutionsdoc)",
        "subscription": {
          "resourceProviders": [
            "Microsoft.OperationsManagement/solutions",
            "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "Microsoft.Insights/workbooks",
            "Microsoft.Logic/workflows"
          ]
        },
        "location": {
          "metadata": {
            "hidden": "Hiding location, we get it from the log analytics workspace"
          },
          "visible": false
        },
        "resourceGroup": {
          "allowExisting": true
        }
      }
    },
    "basics": [
      {
        "name": "getLAWorkspace",
        "type": "Microsoft.Solutions.ArmApiControl",
        "toolTip": "This filters by workspaces that exist in the Resource Group selected",
        "condition": "[greater(length(resourceGroup().name),0)]",
        "request": {
          "method": "GET",
          "path": "[concat(subscription().id,'/providers/Microsoft.OperationalInsights/workspaces?api-version=2020-08-01')]"
        }
      },
      {
        "name": "workspace",
        "type": "Microsoft.Common.DropDown",
        "label": "Workspace",
        "placeholder": "Select a workspace",
        "toolTip": "This dropdown will list only workspace that exists in the Resource Group selected",
        "constraints": {
          "allowedValues": "[map(filter(basics('getLAWorkspace').value, (filter) => contains(toLower(filter.id), toLower(resourceGroup().name))), (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.name, '\"}')))]",
          "required": true
        },
        "visible": true
      }
    ],
    "steps": [
      {
        "name": "dataconnectors",
        "label": "Data Connectors",
        "bladeTitle": "Data Connectors",
        "elements": [
          {
            "name": "dataconnectors1-text",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "text": "This Solution installs the data connector for Cyborg Security HUNTER. You can get Cyborg Security HUNTER custom log data in your Microsoft Sentinel workspace. After installing the solution, configure and enable this data connector by following guidance in Manage solution view."
            }
          },
          {
            "name": "dataconnectors-link2",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "link": {
                "label": "Learn more about connecting data sources",
                "uri": "https://docs.microsoft.com/azure/sentinel/connect-data-sources"
              }
            }
          }
        ]
      },
      {
        "name": "huntingqueries",
        "label": "Hunting Queries",
        "bladeTitle": "Hunting Queries",
        "elements": [
          {
            "name": "huntingqueries-text",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "text": "This solution installs the following Cyborg Security HUNTER hunting queries. After installing the solution, run these hunting queries to hunt for threats in Manage solution view"
            }
          },
          {
            "name": "huntingqueries-link",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "link": {
                "label": "Learn more",
                "uri": "https://docs.microsoft.com/azure/sentinel/hunting"
              }
            }
          },
          {
            "name": "huntingquery1",
            "type": "Microsoft.Common.Section",
            "label": "Attempted VBScript Stored in Non-Run CurrentVersion Registry Key Value",
            "elements": [
              {
                "name": "huntingquery1-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Identify potential new registry key name that is a non-autorun and non-run key in the HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\ registry key containing VBScript in the key value value. This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          },
          {
            "name": "huntingquery2",
            "type": "Microsoft.Common.Section",
            "label": "Excessive Windows Discovery and Execution Processes - Potential Malware Installation",
            "elements": [
              {
                "name": "huntingquery2-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Utilizes a list of commonly abused LOLB an attacker or malware would execute in quick succession. The presence of multiple executions of the programs within the list can be indicative of an infection or malicious activity occurring on a victim host. This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          },
          {
            "name": "huntingquery3",
            "type": "Microsoft.Common.Section",
            "label": "LSASS Memory Dumping using WerFault.exe - Command Identification",
            "elements": [
              {
                "name": "huntingquery3-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Identifies WerFault.exe creating a memory dump of lsass.exe (Local Security Authority Subsystem Service, a process responsible for the enforcement of security policies on Windows systems, which generates and stores credentials in its process memory). This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          },
          {
            "name": "huntingquery4",
            "type": "Microsoft.Common.Section",
            "label": "Metasploit / Impacket PsExec Process Creation Activity",
            "elements": [
              {
                "name": "huntingquery4-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Meant to detect process creations containing names consistent with the schema used by Metasploit or Impacket's PsExec tool. Metasploit and Impacket's PsExec tooling is used by malicious actors for lateral movement & performing actions on remote systems. This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          },
          {
            "name": "huntingquery5",
            "type": "Microsoft.Common.Section",
            "label": "Potential Maldoc Execution Chain Observed",
            "elements": [
              {
                "name": "huntingquery5-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Detect the aftermath of a successfully delivered and executed maldoc (Microsoft Office). Indicates an Office document was opened from an email or download/link, spawned a suspicious execution, and attempted to execute code via common Windows binaries. This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          },
          {
            "name": "huntingquery6",
            "type": "Microsoft.Common.Section",
            "label": "Powershell Encoded Command Execution",
            "elements": [
              {
                "name": "huntingquery6-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Looks for valid variations of the -EncodedCommand parameter. Commonly used to encode or obfuscate commands, and not all occurrences are malicious. This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          },
          {
            "name": "huntingquery7",
            "type": "Microsoft.Common.Section",
            "label": "PowerShell Pastebin Download",
            "elements": [
              {
                "name": "huntingquery7-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Detects PowerShell commands downloading and execute code hosted on Pastebin and other services. This technique has been used by malicious actors to distribute malware, in particular it has been used by the EvilCorp Ransomware variants such as Sodinokibi. This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          },
          {
            "name": "huntingquery8",
            "type": "Microsoft.Common.Section",
            "label": "Prohibited Applications Spawning cmd.exe or powershell.exe",
            "elements": [
              {
                "name": "huntingquery8-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": " This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          },
          {
            "name": "huntingquery9",
            "type": "Microsoft.Common.Section",
            "label": "Proxy VBScript Execution via CurrentVersion Registry Key",
            "elements": [
              {
                "name": "huntingquery9-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Identifies VBScript proxy execution through a registry key in \\Microsoft\\Windows\\CurrentVersion. This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          },
          {
            "name": "huntingquery10",
            "type": "Microsoft.Common.Section",
            "label": "Rundll32 or cmd Executing Application from Explorer - Potential Malware Execution Chain",
            "elements": [
              {
                "name": "huntingquery10-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Identifies when rundll32 or cmd.exe is utilized to launch a malicious DLL or executable from explorer.exe. Indicative of a cmd window or LNK file executing a program or malware due to a user clicking on a file. This hunting query depends on SecurityEvent data connector (SecurityEvent Parser or Table)"
                }
              }
            ]
          }
        ]
      }
    ],
    "outputs": {
      "workspace-location": "[first(map(filter(basics('getLAWorkspace').value, (filter) => and(contains(toLower(filter.id), toLower(resourceGroup().name)),equals(filter.name,basics('workspace')))), (item) => item.location))]",
      "location": "[location()]",
      "workspace": "[basics('workspace')]"
    }
  }
}
