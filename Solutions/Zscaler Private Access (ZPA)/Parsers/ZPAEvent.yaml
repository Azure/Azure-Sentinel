id: 5e9317c6-d07d-4d5f-b048-c487aaab9de2
Function:
  Title: Parser for ZPAEvent
  Version: '1.0.3'
  LastUpdated: '2025-07-30'
Category: Microsoft Sentinel Parser
FunctionName: ZPAEvent
FunctionAlias: ZPAEvent
FunctionQuery: |
    ZPA_CL
    | extend EventVendor="Zscaler",
            EventProduct="Private Access"
    | extend MessageJson=parse_json(Message)
    | extend LogTimestamp=tostring(MessageJson.LogTimestamp),
             Customer=tostring(MessageJson.Customer),
             NetworkSessionId=tostring(MessageJson.SessionID),
             ConnectionID=tostring(MessageJson.ConnectionID),
             NetworkProtocol=tostring(MessageJson.IPProtocol),
             DoubleEncryption=tostring(MessageJson.DoubleEncryption),
             SrcIpAddr=tostring(MessageJson.ClientPublicIP),
             SrcNatIpAddr=tostring(MessageJson.ClientPrivateIP),
             SrcGeoLatitude=tostring(MessageJson.ClientLatitude),
             SrcGeoLongitude=tostring(MessageJson.ClientLongitude),
             SrcGeoCountry=tostring(MessageJson.ClientCountryCode),
             ClientZEN=tostring(MessageJson.ClientZEN),
             NetworkRuleName=tostring(MessageJson.Policy),
             ConnectorZEN=tostring(MessageJson.ConnectorZEN),
             ConnectorIP=tostring(MessageJson.ConnectorIP),
             ConnectorPort=tostring(MessageJson.ConnectorPort),
             SrcDvcHostname=tostring(MessageJson.Host),
             Application=tostring(MessageJson.Application),
             AppGroup=tostring(MessageJson.AppGroup),
             DstDomainHostname=tostring(MessageJson.Server),
             DstIpAddr=tostring(MessageJson.ServerIP),
             PolicyProcessingTime=tostring(MessageJson.PolicyProcessingTime),
             CAProcessingTime=tostring(MessageJson.CAProcessingTime),
             ConnectorZENSetupTime=tostring(MessageJson.ConnectorZENSetupTime),
             ConnectionSetupTime=tostring(MessageJson.ConnectionSetupTime),
             ServerSetupTime=tostring(MessageJson.ServerSetupTime),
             AppLearnTime=tostring(MessageJson.AppLearnTime),
             TimestampConnectionStart=tostring(MessageJson.TimestampConnectionStart),
             TimestampConnectionEnd=tostring(MessageJson.TimestampConnectionEnd),
             TimestampCATx=tostring(MessageJson.TimestampCATx),
             TimestampCARx=tostring(MessageJson.TimestampCARx),
             TimestampAppLearnStart=tostring(MessageJson.TimestampAppLearnStart),
             TimestampZENFirstRxClient=tostring(MessageJson.TimestampZENFirstRxClient),
             TimestampZENFirstTxClient=tostring(MessageJson.TimestampZENFirstTxClient),
             TimestampZENLastRxClient=tostring(MessageJson.TimestampZENLastRxClient),
             TimestampZENLastTxClient=tostring(MessageJson.TimestampZENLastTxClient),
             TimestampConnectorZENSetupComplete=tostring(MessageJson.TimestampConnectorZENSetupComplete),
             TimestampZENFirstRxConnector=tostring(MessageJson.TimestampZENFirstRxConnector),
             TimestampZENFirstTxConnector=tostring(MessageJson.TimestampZENFirstTxConnector),
             TimestampZENLastRxConnector=tostring(MessageJson.TimestampZENLastRxConnector),
             TimestampZENLastTxConnector=tostring(MessageJson.TimestampZENLastTxConnector),
             ZENBytesRxClient=tostring(MessageJson.ZENBytesRxClient),
             ZENBytesTxClient=tostring(MessageJson.ZENBytesTxClient),
             ZENTotalBytesRxConnector=tostring(MessageJson.ZENTotalBytesRxConnector),
             ZENBytesRxConnector=tostring(MessageJson.ZENBytesRxConnector),
             ZENTotalBytesTxConnector=tostring(MessageJson.ZENTotalBytesTxConnector),
             ZENBytesTxConnector=tostring(MessageJson.ZENBytesTxConnector),
             Idp=tostring(MessageJson.Idp),
             Version=tostring(MessageJson.Version),
             ZEN=tostring(MessageJson.ZEN),
             CertificateCN=tostring(MessageJson.CertificateCN),
             PrivateIP=tostring(MessageJson.PrivateIP),
             DvcIpAddr=tostring(MessageJson.DvcIpAddr),
             Latitude=tostring(MessageJson.Latitude),
             Longitude=tostring(MessageJson.Longitude),
             CountryCode=tostring(MessageJson.CountryCode),
             TimestampAuthentication=tostring(MessageJson.TimestampAuthentication),
             TimestampUnAuthentication=tostring(MessageJson.TimestampUnAuthentication),
             DvcHostname=tostring(MessageJson.DvcHostname),
             SrcDvcOs=tostring(MessageJson.SrcDvcOs),
             DvcType=tostring(MessageJson.DvcType),
             TrustedNetworks=tostring(MessageJson.TrustedNetworks),
             TrustedNetworksNames=tostring(MessageJson.TrustedNetworksNames),
             SAMLAttributes=tostring(MessageJson.SAMLAttributes),
             PosturesHit=tostring(MessageJson.PosturesHit),
             PosturesMiss=tostring(MessageJson.PosturesMiss),
             ZENLatitude=tostring(MessageJson.ZENLatitude),
             ZENLongitude=tostring(MessageJson.ZENLongitude),
             ZENCountryCode=tostring(MessageJson.ZENCountryCode),
             SessionType=tostring(MessageJson.SessionType),
             Connector=tostring(MessageJson.Connector),
             ConnectorGroup=tostring(MessageJson.ConnectorGroup),
             CPUUtilization=tostring(MessageJson.CPUUtilization),
             MemUtilization=tostring(MessageJson.MemUtilization),
             ServiceCount=tostring(MessageJson.ServiceCount),
             InterfaceDefRoute=tostring(MessageJson.InterfaceDefRoute),
             DefRouteGW=tostring(MessageJson.DefRouteGW),
             PrimaryDNSResolver=tostring(MessageJson.PrimaryDNSResolver),
             HostUpTime=tostring(MessageJson.HostUpTime),
             ConnectorUpTime=tostring(MessageJson.ConnectorUpTime),
             NumOfInterfaces=tostring(MessageJson.NumOfInterfaces),
             BytesRxInterface=tostring(MessageJson.BytesRxInterface),
             PacketsRxInterface=tostring(MessageJson.PacketsRxInterface),
             ErrorsRxInterface=tostring(MessageJson.ErrorsRxInterface),
             DiscardsRxInterface=tostring(MessageJson.DiscardsRxInterface),
             BytesTxInterface=tostring(MessageJson.BytesTxInterface),
             PacketsTxInterface=tostring(MessageJson.PacketsTxInterface),
             ErrorsTxInterface=tostring(MessageJson.ErrorsTxInterface),
             DiscardsTxInterface=tostring(MessageJson.DiscardsTxInterface),
             ModifiedTime=tostring(MessageJson.ModifiedTime),
             CreationTime=tostring(MessageJson.CreationTime),
             ModifiedBy=tostring(MessageJson.ModifiedBy),
             RequestID=tostring(MessageJson.RequestID),
             AuditOldValue=tostring(MessageJson.AuditOldValue),
             AuditNewValue=tostring(MessageJson.AuditNewValue),
             AuditOperationType=tostring(MessageJson.AuditOperationType),
             ObjectType=tostring(MessageJson.ObjectType),
             ObjectName=tostring(MessageJson.ObjectName),
             ObjectID=tostring(MessageJson.ObjectID),
             CustomerID=tostring(MessageJson.CustomerID),
             Exporter=tostring(MessageJson.Exporter),
             TimestampRequestReceiveStart=tostring(MessageJson.TimestampRequestReceiveStart),
             TimestampRequestReceiveHeaderFinish=tostring(MessageJson.TimestampRequestReceiveHeaderFinish),
             TimestampRequestReceiveFinish=tostring(MessageJson.TimestampRequestReceiveFinish),
             TimestampRequestTransmitStart=tostring(MessageJson.TimestampRequestTransmitStart),
             TimestampRequestTransmitFinish=tostring(MessageJson.TimestampRequestTransmitFinish),
             TimestampResponseReceiveStart=tostring(MessageJson.TimestampResponseReceiveStart),
             TimestampResponseReceiveFinish=tostring(MessageJson.TimestampResponseReceiveFinish),
             TimestampResponseTransmitStart=tostring(MessageJson.TimestampResponseTransmitStart),
             TimestampResponseTransmitFinish=tostring(MessageJson.TimestampResponseTransmitFinish),
             TotalTimeRequestReceive=tostring(MessageJson.TotalTimeRequestReceive),
             TotalTimeRequestTransmit=tostring(MessageJson.TotalTimeRequestTransmit),
             TotalTimeResponseReceive=tostring(MessageJson.TotalTimeResponseReceive),
             TotalTimeResponseTransmit=tostring(MessageJson.TotalTimeResponseTransmit),
             TotalTimeConnectionSetup=tostring(MessageJson.TotalTimeConnectionSetup),
             TotalTimeServerResponse=tostring(MessageJson.TotalTimeServerResponse),
             HttpRequestMethod=tostring(MessageJson.HttpRequestMethod),
             NetworkApplicationProtocol=tostring(MessageJson.NetworkApplicationProtocol),
             UrlHostname=tostring(MessageJson.UrlHostname),
             UrlOriginal=tostring(MessageJson.UrlOriginal),
             HttpUserAgentOriginal=tostring(MessageJson.HttpUserAgentOriginal),
             HttpRequestXff=tostring(MessageJson.HttpRequestXff),
             NameID=tostring(MessageJson.NameID),
             HttpStatusCode=tostring(MessageJson.HttpStatusCode),
             HttpRequestBodyBytes=tostring(MessageJson.HttpRequestBodyBytes),
             HttpResponseBodyBytes=tostring(MessageJson.HttpResponseBodyBytes),
             SrcPortNumber=tostring(MessageJson.SrcPortNumber),
             EventResultDetails=tostring(MessageJson.EventResultDetails),
             CorsToken=tostring(MessageJson.CorsToken),
             Origin=tostring(MessageJson.Origin),
             InternalReason=tostring(MessageJson.InternalReason),
             ConnectionStatus=tostring(MessageJson.ConnectionStatus),
             SessionStatus=tostring(MessageJson.SessionStatus),
             Username=tostring(MessageJson.Username),
             User=tostring(MessageJson.User),
             ServicePort=tostring(MessageJson.ServicePort),
             ServerPort=tostring(MessageJson.ServerPort),
             ApplicationPort=tostring(MessageJson.ApplicationPort),
             ZENTotalBytesRxClient=tostring(MessageJson.ZENTotalBytesRxClient),
             TotalBytesRx=tostring(MessageJson.TotalBytesRx),
             ZENTotalBytesTxClient=tostring(MessageJson.ZENTotalBytesTxClient),
             TotalBytesTx=tostring(MessageJson.TotalBytesTx)
    | extend
            EventResult=column_ifexists('InternalReason', column_ifexists('ConnectionStatus', '')),
            DvcAction=column_ifexists('ConnectionStatus', column_ifexists('SessionStatus', '')),
            DstUserName=column_ifexists('Username', column_ifexists('User', '')),
            DstPortNumber=column_ifexists('ServicePort', column_ifexists('ServerPort', column_ifexists('ApplicationPort', ''))),
            SrcBytes=column_ifexists('ZENTotalBytesRxClient', column_ifexists('TotalBytesRx', '')),
            DstBytes=column_ifexists('ZENTotalBytesTxClient', column_ifexists('TotalBytesTx', ''))