{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Druva Quarantine Playbook for inSync Workloads",
        "description": "This playbook uses Druva-Ransomware-Response capabilities to stop the spread of ransomware and avoid reinfection or contamination spread to your inSync User based workloads.",
        "prerequisites": [
            "1. Verify ARR (Accelerated Ransomware Recovery) should be enabled for the respective Device using Resource ID on the Druva Security Cloud Platform.",
            "2. Generate Druva API Client Credentials",
                "a. Use the following link to navigate to Druva's documentation page and refer the steps to generate API Client Credentials.",
                "b. Druva's Documentation Page : https://help.druva.com/en/articles/8580838-create-and-manage-api-credentials",
                "c. Copy/Paste or Store the creds for future use.",
            "3. Store Service account credentials in Key Vault Secrets and obtain keyvault name.",
                "a. Create a Key Vault with name as Druva-ClientCredential",
                "b. Go to KeyVault -> secrets -> Generate/import and create 'Druva-ClientID' & 'Druva-ClientSecret' for storing client_id and client_secret respectively",
                "c. Store the secrets obtained for your organization and user from Druva Console UI in the previous step."
        ],
        "executionSteps": [
            "1. Deploy the ARM template:",
                "a. Open the Azure Portal.",
                "b. Navigate to 'Deploy a custom template'.",
                "c. Upload this ARM template file or paste its content.",
                "d. Provide the necessary parameter values (e.g., KeyVault name, connection name, etc.).",
                "e. Review and start the deployment.",
            "2. Validate the deployment:",
                "a. Check if the resources (e.g., Key Vault, API connections, Logic Apps) are created successfully.",
                "b. Verify the deployment logs for any errors.",
            "3. Authorize connections:",
                "a. Follow the steps in the 'postDeployment' section to authorize connections.",
            "4. Test the playbook:",
                "a. Trigger the playbook manually by using the dropdown option as 'run_with_payload'",
                "b. On triggering a side screen will appear in which there will be a section named as 'Body'.",
                "c. Inside body paste the json obtained from the README.md file with respective edited values according to your resources.",
                "d. Hit the 'run' button at the bottom.",
                "e. Navigate to the playbook home page and check the run history if the run was successful or not."
        ],
        "postDeployment": [
            "**a. Authorize connections**",
                "Once deployment is complete, authorize each connection.",
                "1. Login to the Microsoft Azure portal and in the search box type API Connections.",
                "2. Find API connection option.",
                "3. Check for your created API connection exists. eg. Druva-KeyVault-Connection",
                "4. Check Status should be ready for the same API Connection.",
            "**b. Grant permissions**",
                "Make sure that this playbook and your user has the IAM role permission granted as 'Key Vault Secrets User'."
        ],
        "lastUpdateTime": "2025-01-13T00:00:00.000Z",
        "author": {
            "name": "Druva"
        },
        "version": "1.0",
        "category": "Druva-Realize-UDA-Quarantine_snapshots",
        "tags": [ "Ransomware Recovery", "Druva Security", "Unusual Data Activity", "Quarantine Snapshots" ],
        "support":  {
            "tier":  "Druva Community"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Druva_Quarantine_Insync_User_Workloads",
            "type": "string",
            "metadata": {
                "description": "Name of the Playbook."
            }
        },
        "keyvaultName": {
            "type": "String",
            "defaultValue": "Druva-ClientCredential",
            "metadata": {
                "description": "Name of the Vault created to store Druva Client Credentials."
            }
        }
    },
    "variables": {
        "keyvaultConnectionName": "[concat('KeyVault-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "hidden-SentinelTemplateName": "DruvaQuarantineInsyncWorkloadsResource",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('keyvaultConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "resourceTypes": {
                            "defaultValue": [
                                "Endpoint",
                                "OneDrive",
                                "Google Drive"
                            ],
                            "type": "Array"
                        },
                        "api_host": {
                            "defaultValue": "https://apis.druva.com",
                            "type": "String"
                        },
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_HTTP_request_is_received": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "username": {
                                            "type": "string"
                                        },
                                        "fromDate": {
                                            "type": "string"
                                        },
                                        "toDate": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "Generate_Bearer_Token": {
                            "runAfter": {
                                "Get_secret_ClientSecret": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "uri": "@{parameters('api_host')}/token",
                                "method": "POST",
                                "headers": {
                                    "Authorization": "Basic @{base64(concat(body('Get_secret_ClientId')?['value'], ':', body('Get_secret_ClientSecret')?['value']))}",
                                    "Content-Type": "application/x-www-form-urlencoded"
                                },
                                "body": "scope=read&grant_type=client_credentials"
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "Parse_Bearer_Token": {
                            "runAfter": {
                                "Generate_Bearer_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Generate_Bearer_Token')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "access_token": {
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "type": "string"
                                        },
                                        "expires_in": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        },
                        "Find_User": {
                            "runAfter": {
                                "Parse_Bearer_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "uri": "@{parameters('api_host')}/realize/ransomwarerecovery/v1/users",
                                "method": "GET",
                                "headers": {
                                    "Authorization": "Bearer @{body('Parse_Bearer_Token')?['access_token']}"
                                },
                                "queries": {
                                    "users": "@{triggerBody()?['username']}"
                                }
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "Parse_User_Details": {
                            "runAfter": {
                                "Find_User": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Find_User')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "users": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "userID": {
                                                        "type": "integer"
                                                    },
                                                    "userName": {
                                                        "type": "string"
                                                    },
                                                    "emailID": {
                                                        "type": "string"
                                                    },
                                                    "profileID": {
                                                        "type": "integer"
                                                    },
                                                    "storageID": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "userID",
                                                    "userName",
                                                    "emailID",
                                                    "profileID",
                                                    "storageID"
                                                ]
                                            }
                                        },
                                        "totalSize": {
                                            "type": "integer"
                                        },
                                        "nextPageToken": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "Find_Users_Device": {
                            "runAfter": {
                                "Compose_api_host": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "uri": "@concat(parameters('api_host'),\n    '/realize/ransomwarerecovery/v1/search/device?',\n    outputs('Compose_api_host')\n)",
                                "method": "GET",
                                "headers": {
                                    "Authorization": "Bearer @{body('Parse_Bearer_Token')?['access_token']}"
                                }
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "Parse_Device_Details": {
                            "runAfter": {
                                "Find_Users_Device": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Find_Users_Device')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "resources": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "resourceID": {
                                                        "type": "integer"
                                                    },
                                                    "resourceName": {
                                                        "type": "string"
                                                    },
                                                    "resourceType": {
                                                        "type": "string"
                                                    },
                                                    "resourceStatus": {
                                                        "type": "string"
                                                    },
                                                    "userID": {
                                                        "type": "integer"
                                                    },
                                                    "userName": {
                                                        "type": "string"
                                                    },
                                                    "profileID": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "resourceID",
                                                    "resourceName",
                                                    "resourceType",
                                                    "resourceStatus",
                                                    "userID",
                                                    "userName",
                                                    "profileID"
                                                ]
                                            }
                                        },
                                        "nextPageToken": {
                                            "type": "string"
                                        },
                                        "isLast": {
                                            "type": "boolean"
                                        },
                                        "errorMessage": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "For_each_user_device": {
                            "foreach": "@body('Parse_Device_Details')?['resources']",
                            "actions": {
                                "Parse_Range_ID": {
                                    "runAfter": {
                                        "Quarantine_Resource_API": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Quarantine_Resource_API')",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "rangeID": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                "Quarantine_Resource_API": {
                                    "type": "Http",
                                    "inputs": {
                                        "uri": "@{parameters('api_host')}/realize/ransomwarerecovery/v1/quarantineranges/resource/@{item()?['resourceID']}",
                                        "method": "POST",
                                        "headers": {
                                            "accept": "application/json",
                                            "Authorization": "Bearer @{body('Parse_Bearer_Token')?['access_token']}",
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "resourceType": "@item()?['resourceType']",
                                            "orgID": -1,
                                            "fromDate": "@triggerBody()?['fromDate']",
                                            "toDate": "@triggerBody()?['toDate']"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_Device_Details": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "check_username": {
                            "actions": {
                                "Compose_Message": {
                                    "type": "Compose",
                                    "inputs": {
                                        "message": "username is not empty"
                                    }
                                }
                            },
                            "runAfter": {},
                            "else": {
                                "actions": {
                                    "Terminate_Execution": {
                                        "type": "Terminate",
                                        "inputs": {
                                            "runStatus": "Failed",
                                            "runError": {
                                                "code": "500",
                                                "message": "\"Username is empty\""
                                            }
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "or": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@triggerBody()?['username']",
                                                "@null"
                                            ]
                                        }
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "For_each": {
                            "foreach": "@body('Parse_User_Details')?['users']",
                            "actions": {
                                "Check_If_user_exists": {
                                    "actions": {
                                        "Set_Match_User_True": {
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "UserNameMatched",
                                                "value": true
                                            }
                                        },
                                        "Append_to_User_array_": {
                                            "runAfter": {
                                                "Set_Match_User_True": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "UserArray",
                                                "value": "@items('For_each')"
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@item()?['userName']",
                                                    "@triggerBody()?['username']"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Parse_User_Details": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Compose_api_host": {
                            "runAfter": {
                                "Check_if_User_found_": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@concat(\n    'users[]=',\n    string(body('User_JSON')?['users'][0]['userID']),\n    '&resourceTypes[]=',\n    join(parameters('resourceTypes'), '&resourceTypes[]=')\n)"
                        },
                        "Get_secret_ClientSecret": {
                            "runAfter": {
                                "Get_secret_ClientID": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Druva-ClientSecret')}/value"
                            }
                        },
                        "Get_secret_ClientID": {
                            "runAfter": {
                                "Initialize_Array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Druva-ClientID')}/value"
                            }
                        },
                        "Check_if_User_found_": {
                            "actions": {
                                "User_JSON": {
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@outputs('Compose_Users')",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "users": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "userID": {
                                                                "type": "integer"
                                                            },
                                                            "userName": {
                                                                "type": "string"
                                                            },
                                                            "emailID": {
                                                                "type": "string"
                                                            },
                                                            "profileID": {
                                                                "type": "integer"
                                                            },
                                                            "storageID": {
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "required": [
                                                            "userID",
                                                            "userName",
                                                            "emailID",
                                                            "profileID",
                                                            "storageID"
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Compose_Users": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Terminate": {
                                        "type": "Terminate",
                                        "inputs": {
                                            "runStatus": "Failed",
                                            "runError": {
                                                "code": "500",
                                                "message": "User Not Found"
                                            }
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('UserNameMatched')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_Array": {
                            "runAfter": {
                                "Initialize_variable_Match_User": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "UserArray",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_Match_User": {
                            "runAfter": {
                                "check_username": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "UserNameMatched",
                                        "type": "boolean",
                                        "value": false
                                    }
                                ]
                            }
                        },
                        "Compose_Users": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": {
                                "users": "@variables('UserArray')"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('keyvaultConnectionName'))]",
                                "connectionName": "[variables('keyvaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2018-07-01-preview",
            "name": "[variables('keyvaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('keyvaultConnectionName')]",
                "connectionState": "Enabled",
                "parameterValueSet": {
                    "name": "oauthMI",
                    "values": {
                        "vaultName": {
                            "value": "[parameters('keyvaultName')]"
                        }
                    }
                },
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                }
            }
        }
    ]
}
