id: 974718ae-c0a5-4d4a-bb42-63a0f394d66f
Function:
  Title: Corelight DNS Events
  Version: '1.1.0'
  LastUpdated: '2024-08-09'
Category: Microsoft Sentinel Parser
FunctionName: corelight_dns
FunctionAlias: corelight_dns
FunctionQuery: |
    let DNSLookup = datatable(
        rcode: int,
        reply_code: string,
        cim_reply_code: string
    )[
        0,"NOERROR","No Error",
        1,"FORMERR","FormErr",
        2,"SERVFAIL","ServFail",
        3,"NXDOMAIN","NXDomain",
        4,"NOTIMP","NotImp",
        5,"REFUSED","Refused"
    ];
    let dummy_table = datatable(TimeGenerated: datetime, uid_s: string) [];
    let corelight_dns = view () {
        union isfuzzy=true Corelight_v2_dns_CL, Corelight_v2_dns_red_CL, dummy_table
        | summarize arg_max(TimeGenerated, *) by uid_s
        | join kind=leftouter 
        ( corelight_conn
        | project uid, local_orig, local_resp    
        ) on $left.uid_s == $right.uid
        | project-away uid
        | extend
            path = column_ifexists("_path_s", ""),
            system_name = column_ifexists("_system_name_s", ""),
            write_ts = column_ifexists("_write_ts_t", ""),
            AA = column_ifexists("AA_b", ""),
            RA = column_ifexists("RA_b", ""),
            RD = column_ifexists("RD_b", ""),
            TC = column_ifexists("TC_b", ""),
            TTLs = column_ifexists("TTLs_s", ""),
            Z = column_ifexists("Z_d", real(null)),
            answers = column_ifexists("answers_s", ""),
            id_orig_h = column_ifexists("id_orig_h_s", ""),
            id_orig_p = column_ifexists("id_orig_p_d", real(null)),
            id_resp_h = column_ifexists("id_resp_h_s", ""),
            id_resp_p = column_ifexists("id_resp_p_d", real(null)),
            proto = column_ifexists("proto_s", ""),
            qclass = column_ifexists("qclass_d", real(null)),
            qclass_name = column_ifexists("qclass_name_s", ""),
            qtype = column_ifexists("qtype_d", real(null)),
            qtype_name = column_ifexists("qtype_name_s", ""),
            query = column_ifexists("query_s", ""),
            rcode = column_ifexists("rcode_d", long(null)),
            rcode_name = column_ifexists("rcode_name_s", ""),
            rejected = column_ifexists("rejected_b", ""),
            rtt = column_ifexists("rtt_d", real(null)),
            trans_id = column_ifexists("trans_id_d", ""),
            uid = column_ifexists("uid_s", ""),
            num = column_ifexists("num_d", real(null)),
            icann_domain = column_ifexists("icann_domain_s", ""),
            icann_host_subdomain = column_ifexists("icann_host_subdomain_s", ""),
            icann_tld = column_ifexists("icann_tld_s", ""),
            is_trusted_domain = column_ifexists("is_trusted_domain_b", "")
        | extend rcode = toint(rcode)
        | lookup DNSLookup on rcode
        | extend
            EventVendor = "Corelight",
            EventProduct = "CorelightSensor",
            EventType = "dns",
            ts = TimeGenerated,
            dns_flags_authoritative_answer = AA,
            dns_flags_recursion_available = RA,
            dns_flags_truncated_response = TC,
            ttl = TTLs,
            src = id_orig_h,
            src_ip = id_orig_h,
            src_port = id_orig_p,
            dest = id_resp_h,
            dest_ip = id_resp_h,
            dest_port = id_resp_p,
            record_class = qclass_name,
            record_type = qtype_name,
            reply_code_id = rcode,
            dns_flags_rejected = rejected,
            duration = rtt,
            response_time = rtt,
            transaction_id = trans_id,
            session_id = uid,
            answer_count = array_length(todynamic(answers)),
            query_count = array_length(todynamic(query)),
            sensor_name = coalesce(system_name, "unknown"),
            reply_code = cim_reply_code
        | extend
            is_broadcast =iff(src in("0.0.0.0", "255.255.255.255") or dest in("255.255.255.255", "0.0.0.0"),"true","false"),
            is_dest_internal_ip = iff(local_resp == true, "true", "false"),
            is_src_internal_ip = iff(local_orig == true, "true", "false"),
            transport = iff(proto == "icmp" and id_orig_h matches regex ".*:.*", "icmp6", proto),
            query_length = strlen(query),
            answer_length = iff(answer_count == 1, strlen(answers), tolong('')),
            message_type = iff(isnotnull(rcode), "Response", "Query")
        | project
            TimeGenerated,
            path,
            system_name,
            write_ts,
            AA,
            RA,
            RD,
            TC,
            TTLs,
            Z,
            answers,
            id_orig_h,
            id_orig_p,
            id_resp_h,
            id_resp_p,
            proto,
            qclass,
            qclass_name,
            qtype,
            qtype_name,
            query,
            rcode,
            rcode_name,
            rejected,
            rtt,
            trans_id,
            uid,
            num,
            icann_domain,
            icann_host_subdomain,
            icann_tld,
            is_trusted_domain,
            EventVendor,
            EventProduct,
            EventType,
            ts,
            dns_flags_authoritative_answer,
            dns_flags_recursion_available,
            dns_flags_truncated_response,
            ttl,
            src,
            src_ip,
            src_port,
            dest,
            dest_ip,
            dest_port,
            record_class,
            record_type,
            reply_code_id,
            dns_flags_rejected,
            duration,
            response_time,
            transaction_id,
            session_id,
            answer_count,
            query_count,
            sensor_name,
            is_broadcast,
            is_dest_internal_ip,
            is_src_internal_ip,
            transport,
            query_length,
            answer_length,
            message_type,
            reply_code
    };
    corelight_dns