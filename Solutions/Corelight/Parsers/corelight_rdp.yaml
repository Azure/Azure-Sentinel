id: 974718ae-c0a5-4d4a-bb42-63a0f394d66f
Function:
  Title: Corelight RDP Events
  Version: '1.1.0'
  LastUpdated: '2024-08-09'
Category: Microsoft Sentinel Parser
FunctionName: corelight_rdp
FunctionAlias: corelight_rdp
FunctionQuery: |
    let dummy_table = datatable(TimeGenerated: datetime, uid_s: string) [];
    let corelight_rdp = view () {
        union isfuzzy=true Corelight_v2_rdp_CL, dummy_table
        | summarize arg_max(TimeGenerated, *) by uid_s
        | join kind=leftouter 
        ( corelight_conn
        | project uid, local_orig, local_resp
        ) on $left.uid_s == $right.uid
        | project-away uid
        | extend
            path = column_ifexists("_path_s", ""),
            system_name = column_ifexists("_system_name_s", ""),
            write_ts = column_ifexists("_write_ts_t", ""),
            auth_success = column_ifexists("auth_success_b", ""),
            cert_count = column_ifexists("cert_count_d", real(null)),
            channels_joined = column_ifexists("channels_joined_d", real(null)),
            cookie = column_ifexists("cookie_s", ""),
            id_orig_h = column_ifexists("id_orig_h_s", ""),
            id_orig_p = column_ifexists("id_orig_p_d", real(null)),
            id_resp_h = column_ifexists("id_resp_h_s", ""),
            id_resp_p = column_ifexists("id_resp_p_d", real(null)),
            inferences = column_ifexists("inferences_s", ""),
            result = column_ifexists("result_s", ""),
            security_protocol = column_ifexists("security_protocol_s", ""),
            uid = column_ifexists("uid_s", ""),
            client_channels = column_ifexists("client_channels_s", ""),
            keyboard_layout = column_ifexists("keyboard_layout_s", ""),
            client_build = column_ifexists("client_build_s", ""),
            client_name = column_ifexists("client_name_s", ""),
            client_dig_product_id = column_ifexists("client_dig_product_id_s", ""),
            desktop_width = column_ifexists("desktop_width_d", real(null)),
            desktop_height = column_ifexists("desktop_height_d", real(null)),
            requested_color_depth = column_ifexists("requested_color_depth_s", ""),
            cert_type = column_ifexists("cert_type_s", ""),
            cert_permanent = column_ifexists("cert_permanent_b", ""),
            encryption_level = column_ifexists("encryption_level_s", ""),
            encryption_method = column_ifexists("encryption_method_s", ""),
            rdpeudp_uid = column_ifexists("rdpeudp_uid_s", ""),
            rdfp_string = column_ifexists("rdfp_string_s", ""),
            rdfp_hash = column_ifexists("rdfp_hash_s", "")
        | extend
            EventVendor = "Corelight",
            EventProduct = "CorelightSensor",
            EventType = "rdp",
            ts = TimeGenerated,
            src = id_orig_h,
            src_ip = id_orig_h,
            src_port = id_orig_p,
            dest = id_resp_h,
            dest_ip = id_resp_h,
            dest_port = id_resp_p,
            app = security_protocol,
            sensor_name = coalesce(system_name, "unknown")
        | extend 
            action = case(result == "Success", "success", result == "SSL_NOT_ALLOWED_BY_SERVER", "failure", auth_success == "true", "success", auth_success == "false", "failure", "unknown"),
            is_broadcast =iff(src in("0.0.0.0", "255.255.255.255") or dest in("255.255.255.255", "0.0.0.0"),"true","false"),
            is_dest_internal_ip = iff(local_resp == true, "true", "false"),
            is_src_internal_ip = iff(local_orig == true, "true", "false")
        | project
            TimeGenerated,
            path,
            system_name,
            write_ts,
            auth_success,
            cert_count,
            channels_joined,
            cookie,
            id_orig_h,
            id_orig_p,
            id_resp_h,
            id_resp_p,
            inferences,
            result,
            security_protocol,
            uid,
            client_channels,
            keyboard_layout,
            client_build,
            client_name,
            client_dig_product_id,
            desktop_width,
            desktop_height,
            requested_color_depth,
            cert_type,
            cert_permanent,
            encryption_level,
            encryption_method,
            rdpeudp_uid,
            rdfp_string,
            rdfp_hash,
            EventVendor,
            EventProduct,
            EventType,
            ts,
            src,
            src_ip,
            src_port,
            dest,
            dest_ip,
            dest_port,
            app,
            sensor_name,
            action,
            is_broadcast,
            is_dest_internal_ip,
            is_src_internal_ip
    };
    corelight_rdp