id: 974718ae-c0a5-4d4a-bb42-63a0f394d66f
Function:
  Title: Corelight Connection Events
  Version: '1.1.0'
  LastUpdated: '2024-08-09'
Category: Microsoft Sentinel Parser
FunctionName: corelight_conn
FunctionAlias: corelight_conn
FunctionQuery: |
    let ConnStateLookup = datatable(
        conn_state: string,
        conn_state_desc: string,
        action: string
    )[
        "S0","Connection attempt seen, no reply.","teardown",
        "S1","Connection established, not terminated.","allowed",
        "SF","Normal establishment and termination.","allowed",
        "REJ","Connection attempt rejected.","blocked",
        "S2","Connection established and close attempt by originator seen (but no reply from responder).","allowed",
        "S3","Connection established and close attempt by responder seen (but no reply from originator).","allowed",
        "RSTO","Connection established, originator aborted (sent a RST).","allowed",
        "RSTR","Established, responder aborted.","allowed",
        "RSTOS0","Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder.","teardown",
        "RSTRH","Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator.","teardown",
        "SH","Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open).","teardown",
        "SHR","Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator.","teardown",
        "OTH","No SYN seen, just midstream traffic (a 'partial connection' that was not later closed).","allowed"
    ];
    let dummy_table = datatable(TimeGenerated: datetime, uid_s: string) [];
    let corelight_conn = view () {
        union isfuzzy=true dummy_table,
        Corelight_v2_conn_CL,
        Corelight_v2_conn_red_CL,
        Corelight_v2_conn_long_CL
        | summarize arg_max(TimeGenerated, *) by uid_s
        | extend 
            path=column_ifexists("_path_s", ""),
            system_name=column_ifexists("_system_name_s", ""),
            write_ts=column_ifexists("_write_ts_t", ""),
            uid=column_ifexists("uid_s", ""),
            id_orig_h=column_ifexists("id_orig_h_s", ""),
            id_orig_p=column_ifexists("id_orig_p_d", real(null)),
            id_resp_h=column_ifexists("id_resp_h_s", ""),
            id_resp_p=column_ifexists("id_resp_p_d", real(null)),
            proto=column_ifexists("proto_s", ""),
            service=column_ifexists("service_s", ""),
            duration=column_ifexists("duration_d", real(null)),
            orig_bytes=column_ifexists("orig_bytes_d", real(null)),
            resp_bytes=column_ifexists("resp_bytes_d", real(null)),
            conn_state=column_ifexists("conn_state_s", ""),
            local_orig=column_ifexists("local_orig_b", ""),
            local_resp=column_ifexists("local_resp_b", ""),
            missed_bytes=column_ifexists("missed_bytes_d", real(null)),
            history=column_ifexists("history_s", ""),
            orig_pkts=column_ifexists("orig_pkts_d", real(null)),
            orig_ip_bytes=column_ifexists("orig_ip_bytes_d", real(null)),
            resp_pkts=column_ifexists("resp_pkts_d", real(null)),
            resp_ip_bytes=column_ifexists("resp_ip_bytes_d", real(null)),
            tunnel_parents=column_ifexists("tunnel_parents_s", ""),
            orig_cc=column_ifexists("orig_cc_s", ""),
            resp_cc=column_ifexists("resp_cc_s", ""),
            suri_ids=column_ifexists("suri_ids_s", ""),
            spcap_url=column_ifexists("spcap_url_s", ""),
            spcap_rule=column_ifexists("spcap_rule_d", real(null)),
            spcap_trigger=column_ifexists("spcap_trigger_s", ""),
            apps=column_ifexists("app_s", ""),
            corelight_shunted=column_ifexists("corelight_shunted_b", ""),
            orig_shunted_pkts=column_ifexists("orig_shunted_pkts_d", real(null)),
            orig_shunted_bytes=column_ifexists("orig_shunted_bytes_d", real(null)),
            resp_shunted_pkts=column_ifexists("resp_shunted_pkts_d", real(null)),
            resp_shunted_bytes=column_ifexists("resp_shunted_bytes_d", real(null)),
            orig_l2_addr=column_ifexists("orig_l2_addr_s", ""),
            resp_l2_addr=column_ifexists("resp_l2_addr_s",""),
            id_orig_h_n_src=column_ifexists("id_orig_h_n_src_s",""),
            id_orig_h_n_vals=column_ifexists("id_orig_h_n_vals_s",""),
            id_resp_h_n_src=column_ifexists("id_resp_h_n_src_s",""),
            id_resp_h_n_vals=column_ifexists("id_resp_h_n_vals_s",""),
            vlan=column_ifexists("vlan_d", real(null)),
            inner_vlan=column_ifexists("inner_vlan_d", real(null)),
            community_id=column_ifexists("community_id_s",""),
            pcr=column_ifexists("pcr_d", real(null)),
            id_vlan=column_ifexists("id_vlan_d", real(null)),
            packets=column_ifexists("packets_d", real(null))
        | lookup ConnStateLookup on conn_state
        | extend
            EventVendor="Corelight",
            EventProduct="CorelightSensor",
            EventType="conn",
            ts=TimeGenerated,
            src=id_orig_h,
            src_ip=id_orig_h,
            src_port=id_orig_p,
            dest=id_resp_h,
            dest_ip=id_resp_h,
            dest_port=id_resp_p,
            bytes_out=orig_ip_bytes,
            src_mac=orig_l2_addr,
            dvc=orig_l2_addr,
            packets_out=orig_pkts,
            bytes_in=resp_ip_bytes,
            dest_mac=resp_l2_addr,
            dst_mac=resp_l2_addr,
            packets_in=resp_pkts,
            session_id=uid,
            src_country=orig_cc,
            dest_country=resp_cc,
            bytes=resp_ip_bytes + orig_ip_bytes,
            sensor_name = coalesce(system_name, "unknown"),
            transport=iff(proto=='icmp' and id_orig_h matches regex ".*:.*", "icmp6", proto),
            app=split(service, ",")
        | extend 
            is_broadcast = iff(src in("0.0.0.0", "255.255.255.255") or dest in("255.255.255.255", "0.0.0.0"),"true","false"),
            is_src_internal_ip = iff(local_orig == true, "true", "false"),
            is_dest_internal_ip = iff(local_resp == true, "true", "false"),
            direction=case(local_orig=="true" and local_resp=="true", "internal", local_orig=="true" and local_resp=="false", "outbound", local_orig=="false" and local_resp=="false", "external", local_orig=="false" and local_resp=="true", "inbound", "unknown"),
            packets=coalesce(toreal(packets), packets_in+packets_out)
        | project 
            TimeGenerated,
            path,
            system_name,
            write_ts,
            uid,
            id_orig_h,
            id_orig_p,
            id_resp_h,
            id_resp_p,
            proto,
            service,
            duration,
            orig_bytes,
            resp_bytes,
            conn_state,
            local_orig,
            local_resp,
            missed_bytes,
            history,
            orig_pkts,
            orig_ip_bytes,
            resp_pkts,
            resp_ip_bytes,
            tunnel_parents,
            orig_cc,
            resp_cc,
            suri_ids,
            spcap_url,
            spcap_rule,
            spcap_trigger,
            apps,
            corelight_shunted,
            orig_shunted_pkts,
            orig_shunted_bytes,
            resp_shunted_pkts,
            resp_shunted_bytes,
            orig_l2_addr,
            resp_l2_addr,
            id_orig_h_n_src,
            id_orig_h_n_vals,
            id_resp_h_n_src,
            id_resp_h_n_vals,
            vlan,
            inner_vlan,
            community_id,
            pcr,
            EventVendor,
            EventProduct,
            EventType,
            ts,
            src,
            src_ip,
            src_port,
            dest,
            dest_ip,
            dest_port,
            bytes_out,
            src_mac,
            dvc,
            packets_out,
            bytes_in,
            dest_mac,
            dst_mac,
            packets_in,
            session_id,
            src_country,
            dest_country,
            bytes,
            sensor_name,
            is_broadcast,
            is_src_internal_ip,
            is_dest_internal_ip,
            direction,
            id_vlan,
            packets,
            transport,
            app,
            conn_state_desc,
            action
    };
    corelight_conn