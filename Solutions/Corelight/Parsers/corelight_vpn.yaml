id: 974718ae-c0a5-4d4a-bb42-63a0f394d66f
Function:
  Title: Corelight VPN Events
  Version: '1.1.0'
  LastUpdated: '2024-08-09'
Category: Microsoft Sentinel Parser
FunctionName: corelight_vpn
FunctionAlias: corelight_vpn
FunctionQuery: |
    let VpnInferencesLookup = datatable(
        Code: string,
        Name: string,
        Description: string
    )[
        "ABP Authentication Bypass","N/A","A client wasn't adhering to expectations of SSH either through server exploit or by the client and server switching to a protocol other than SSH after encryption begins.",
        "BF Brute Force Guessing","N/A","A client made a number of authentication attempts that exceeded some configured per-connection threshold.",
        "BFS Brute Force Success","N/A","A client made a number of authentication attempts that exceeded some configured per-connection threshold.",
        "SFD","Small Client File Download","A file transfer occurred in which the server sent a sequence of bytes to the client.",
        "LFD","Large Client File Download","A file transfer occurred in which the server sent a sequence of bytes to the client. Large files are identified dynamically based on trains of MTU-sized packets.",
        "SFU","Small Client File Upload","A file transfer occurred in which the client sent a sequence of bytes to the server.",
        "LFU","Large Client File Upload","A file transfer occurred in which the client sent a sequence of bytes to the server. Large files are identified dynamically based on trains of MTU-sized packets.",
        "KS","Keystrokes","An interactive session occurred in which the client set user-driven keystrokes to the server.",
        "SC","Capabilities Scan- ning","A client exchanged capabilities with the server and then disconnected.",
        "SP","Other Scanning","A client and server didn't exchange encrypted packets but the client wasn't a version or capabilities scanner.",
        "SV","Version Scanning","A client exchanged version strings with the server and then disconnected.",
        "SA Scanning","N/A","The client scanned authentication methods with the server and then disconnected.",
        "APWA","Automated Password Authentication","The client authenticated with an automated password tool (like sshpass).",
        "IPWA","Interactive Password Authentication","The client interactively typed their password to authenticate.",
        "PKA","Public Key Authentication","The client automatically authenticated using pubkey authentication.",
        "NA","None Authentication","The client successfully authenticated using the None method.",
        "MFA","Multifactor authentication","The server required a second form of authentication (a code) after a password or public key was accepted and the client successfully provided it.",
        "UA","Unknown authentication","The authentication method is not determined or is unknown.",
        "AUTO","Automated interaction","The client is a script or automated utility and not driven by a user.",
        "BAN","Server Banner","The server sent the client a pre-authentication banner likely for legal reasons.",
        "CTS trusted server","N/A","The client already has an entry in its known_hosts file for this server.",
        "CUS untrusted server","N/A","The client did not have an entry in its known_hosts file for this server.",
        "RSP","Reverse SSH Provisioned","The client connected with a -R flag which provisions the ports to be used for a Reverse Session set up at any future time.",
        "RSI","Reverse SSH Initiated","The Reverse session is initiated from the server back to the Client.",
        "RSIA","Reverse SSH Initiation Automated","The initiation of the Reverse session happened very early in the packet stream indicating automation.",
        "RSL","Reverse SSH Logged I'n","The Reverse tunnel login has succeeded.",
        "RSK","Reverse SSH Keystrokes","Keystrokes are detected within the Reverse tunnel.",
        "NRC","No Remote Com- mand","The -N flag was used in the SSH session.",
        "AFR","SSH Agent For- warding Requested","Agent forwarding is requested by the Client.",
        "FC","FreeRDP Driven Client","Indicates a CLI tool client (likely FreeRDP-based). This inference doesn't require that the client successfully authenticated to the server.",
        "MSC","Metasploit Scanner Client","Indicates a Metasploit client.",
        "HBC","THC-Hydra Bruteforce Client","Indicates a Hydra client.",
        "CBC","Crowbar Bruteforce Client","Indicates a Crowbar client.",
        "SLC","SharpRDP Lateral Movement Client","Indicates a SharpRDP client.",
        "SOC","Scanner Other Client","Indicates that the client is likely a scanner or exploit tool that the package can't specifically identify (for example, rdpscan or impacket)."
        "RCGA","Remote Credential Guard Authentication","Indicates that the client authenticated using Restricted Admin Mode.",
        "RAMA","Restricted Admin Mode Authentication","Indicates a Metasploit client.",
        "APWA","Automated NTLM Password Authentication","Indicates that the client authenticated using an NTLM password that was provided before the connection was initiated.",
        "IPWA","Interactive NTLM Password Authentication","Indicates that the client authenticated using an NTLM password that was provided after the connection was initiated, suggesting a human-driven connection."
        "SLH","Slow Handshake","Indicates that the handshake (RDPBCGR connection sequence) took an unusually long time to complete.",
        "COM","N/A","Indicates the presence of a commercial VPN service (such as PrivateInternetAccess or NordVPN)."
        "NSP","N/A","Non Standard Port. FW - Using a port to subvert a firewall (i.e. 53/udp).",
        "RW","N/A","Road warrior configuration detected (i.e. Cisco Anyconnect).",
        "SK","N/A","Static Key",
        "TLS","N/A","TLS Auth",
        "FW","N/A","Indicates that the VPN might be trying to subvert network security by using a port that is usually allowed."
    ];
    let dummy_table = datatable(TimeGenerated: datetime, uid_s: string) [];
    let corelight_vpn = view () {
        union isfuzzy=true Corelight_v2_vpn_CL, dummy_table
        | summarize arg_max(TimeGenerated, *) by uid_s
        | join kind=leftouter 
        ( corelight_conn
        | project uid, local_orig, local_resp
        ) on $left.uid_s == $right.uid
        | project-away uid
        | extend
            path = column_ifexists("_path_s", ""),
            system_name = column_ifexists("_system_name_s", ""),
            write_ts = column_ifexists("_write_ts_t", ""),
            client_info = column_ifexists("client_info_s", ""),
            duration = column_ifexists("duration_d", real(null)),
            id_orig_h = column_ifexists("id_orig_h_s", ""),
            id_orig_p = column_ifexists("id_orig_p_d", real(null)),
            id_resp_h = column_ifexists("id_resp_h_s", ""),
            id_resp_p = column_ifexists("id_resp_p_d", real(null)),
            inferences = column_ifexists("inferences_s", ""),
            issuer = column_ifexists("issuer_s", ""),
            ja3 = column_ifexists("ja3_s", ""),
            ja3s = column_ifexists("ja3s_s", ""),
            orig_bytes = column_ifexists("orig_bytes_d", real(null)),
            orig_cc = column_ifexists("orig_cc_s", ""),
            orig_city = column_ifexists("orig_city_s", ""),
            orig_region = column_ifexists("orig_region_s", ""),
            proto = column_ifexists("proto_s", ""),
            resp_bytes = column_ifexists("resp_bytes_d", real(null)),
            resp_cc = column_ifexists("resp_cc_s", ""),
            resp_city = column_ifexists("resp_city_s", ""),
            resp_region = column_ifexists("resp_region_s", ""),
            server_name = column_ifexists("server_name_s", ""),
            service = column_ifexists("service_s", ""),
            subject = column_ifexists("subject_s", ""),
            uid = column_ifexists("uid_s", ""),
            vpn_type = column_ifexists("vpn_type_s", "")
        | mv-expand todynamic(inferences)
        | extend code_string = tostring(inferences)
        | lookup kind=leftouter VpnInferencesLookup on $left.code_string == $right.Code
        | summarize Inferences = make_list(code_string), Names = make_list(Name), Descriptions = make_list(Description), arg_max(TimeGenerated, *) by uid
        | extend
            EventVendor = "Corelight",
            EventProduct = "CorelightSensor",
            EventType = "vpn",
            ts = TimeGenerated,
            src = id_orig_h,
            src_ip = id_orig_h,
            src_port = id_orig_p,
            dest = id_resp_h,
            dest_ip = id_resp_h,
            dest_port = id_resp_p,
            bytes_out = orig_bytes,
            transport = proto,
            bytes_in = resp_bytes,
            signature = vpn_type,
            sensor_name = coalesce(system_name, "unknown")
        | extend
            bytes = bytes_in + bytes_out,
            services = split(service, ','),
            is_broadcast =iff(src in("0.0.0.0", "255.255.255.255") or dest in("255.255.255.255", "0.0.0.0"), "true", "false"),
            is_dest_internal_ip = iff(local_resp == true, "true", "false"),
            is_src_internal_ip = iff(local_orig == true, "true", "false")
        | project
            TimeGenerated,
            path,
            system_name,
            write_ts,
            client_info,
            duration,
            id_orig_h,
            id_orig_p,
            id_resp_h,
            id_resp_p,
            Inferences,
            issuer,
            ja3,
            ja3s,
            orig_bytes,
            orig_cc,
            orig_city,
            orig_region,
            proto,
            resp_bytes,
            resp_cc,
            resp_city,
            resp_region,
            server_name,
            service,
            subject,
            uid,
            vpn_type,
            EventVendor,
            EventProduct,
            EventType,
            ts,
            src,
            src_ip,
            src_port,
            dest,
            dest_ip,
            dest_port,
            bytes_out,
            transport,
            bytes_in,
            signature,
            sensor_name,
            bytes,
            services,
            is_broadcast,
            is_dest_internal_ip,
            is_src_internal_ip,
            Names,
            Descriptions
    };
    corelight_vpn