{
    "id": "NetskopeDataConnector",
    "title": "Netskope Data Connector",
    "publisher": "Netskope",
    "descriptionMarkdown": "The [Netskope](https://docs.netskope.com/en/netskope-help/admin-console/rest-api/rest-api-v2-overview-312207/) data connector provides the following capabilities: \n 1. NetskopeToAzureStorage : \n >* Get the Netskope Alerts and Events data from Netskope and post to Azure storage. \n 2. StorageToSentinel : \n >* Get the Netskope Alerts and Events data from Azure storage and post to custom log table in log analytics workspace. \n 3. WebTxMetrics : \n >* Get the WebTxMetrics data from Netskope and post to custom log table in log analytics workspace.\n\n\n For more details of REST APIs refer to the below documentations: \n 1. Netskope API documentation: \n> https://docs.netskope.com/en/netskope-help/admin-console/rest-api/rest-api-v2-overview-312207/ \n 2. Azure storage documentation: \n> https://learn.microsoft.com/azure/storage/common/storage-introduction \n 3. Microsoft log analytic documentation: \n> https://learn.microsoft.com/azure/azure-monitor/logs/log-analytics-overview",
    "graphQueries": [
        {
            "metricName": "Compromised Credential data received",
            "legend": "alertscompromisedcredentialdata_CL",
            "baseQuery": "alertscompromisedcredentialdata_CL"
        },
        {
            "metricName": "CTEP data received",
            "legend": "alertsctepdata_CL",
            "baseQuery": "alertsctepdata_CL"
        },
        {
            "metricName": "DLP data received",
            "legend": "alertsdlpdata_CL",
            "baseQuery": "alertsdlpdata_CL"
        },
        {
            "metricName": "Malsite data received",
            "legend": "alertsmalsitedata_CL",
            "baseQuery": "alertsmalsitedata_CL"
        },
        {
            "metricName": "Malware data received",
            "legend": "alertsmalwaredata_CL",
            "baseQuery": "alertsmalwaredata_CL"
        },
        {
            "metricName": "Policy data received",
            "legend": "alertspolicydata_CL",
            "baseQuery": "alertspolicydata_CL"
        },
        {
            "metricName": "Quarantine data received",
            "legend": "alertsquarantinedata_CL",
            "baseQuery": "alertsquarantinedata_CL"
        },
        {
            "metricName": "Remediation data received",
            "legend": "alertsremediationdata_CL",
            "baseQuery": "alertsremediationdata_CL"
        },
        {
            "metricName": "SecurityAssessment data received",
            "legend": "alertssecurityassessmentdata_CL",
            "baseQuery": "alertssecurityassessmentdata_CL"
        },
        {
            "metricName": "UBA data received",
            "legend": "alertsubadata_CL",
            "baseQuery": "alertsubadata_CL"
        },
        {
            "metricName": "Application data received",
            "legend": "eventsapplicationdata_CL",
            "baseQuery": "eventsapplicationdata_CL"
        },
        {
            "metricName": "Audit data received",
            "legend": "eventsauditdata_CL",
            "baseQuery": "eventsauditdata_CL"
        },
        {
            "metricName": "Connection data received",
            "legend": "eventsconnectiondata_CL",
            "baseQuery": "eventsconnectiondata_CL"
        },
        {
            "metricName": "Incident data received",
            "legend": "eventsincidentdata_CL",
            "baseQuery": "eventsincidentdata_CL"
        },
        {
            "metricName": "Network data received",
            "legend": "eventsnetworkdata_CL",
            "baseQuery": "eventsnetworkdata_CL"
        },
        {
            "metricName": "Page data received",
            "legend": "eventspagedata_CL",
            "baseQuery": "eventspagedata_CL"
        },
        {
            "metricName": "WebTxMetrics data received",
            "legend": "Netskope_WebTx_metrics_CL",
            "baseQuery": "Netskope_WebTx_metrics_CL"
        }
    ],
    "sampleQueries": [
        {
            "description": "Netskope CompromisedCredential Alerts Data",
            "query": "alertscompromisedcredentialdata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope CTEP Alerts Data",
            "query": "alertsctepdata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope DLP Alerts Data",
            "query": "alertsdlpdata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Malsite Alerts Data",
            "query": "alertsmalsitedata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Malware Alerts Data",
            "query": "alertsmalwaredata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Policy Alerts Data",
            "query": "alertspolicydata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Quarantine Alerts Data",
            "query": "alertsquarantinedata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Remediation Alerts Data",
            "query": "alertsremediationdata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope SecurityAssessment Alerts Data",
            "query": "alertssecurityassessmentdata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Uba Alerts Data",
            "query": "alertsubadata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Application Events Data.",
            "query": "eventsapplicationdata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Audit Events Data",
            "query": "eventsauditdata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Connection Events Data",
            "query": "eventsconnectiondata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Incident Events Data",
            "query": "eventsincidentdata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Network Events Data",
            "query": "eventsnetworkdata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope Page Events Data",
            "query": "eventspagedata_CL\n | sort by TimeGenerated desc"
        },
        {
            "description": "Netskope WebTransactions Metrics Data",
            "query": "Netskope_WebTx_metrics_CL\n | sort by TimeGenerated desc"
        }
    ],
    "dataTypes": [
        {
            "name": "alertscompromisedcredentialdata_CL",
            "lastDataReceivedQuery": "alertscompromisedcredentialdata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "alertsctepdata_CL",
            "lastDataReceivedQuery": "alertsctepdata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "alertsdlpdata_CL",
            "lastDataReceivedQuery": "alertsdlpdata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "alertsmalsitedata_CL",
            "lastDataReceivedQuery": "alertsmalsitedata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "alertsmalwaredata_CL",
            "lastDataReceivedQuery": "alertsmalwaredata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "alertspolicydata_CL",
            "lastDataReceivedQuery": "alertspolicydata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "alertsquarantinedata_CL",
            "lastDataReceivedQuery": "alertsquarantinedata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "alertsremediationdata_CL",
            "lastDataReceivedQuery": "alertsremediationdata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "alertssecurityassessmentdata_CL",
            "lastDataReceivedQuery": "alertssecurityassessmentdata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "alertsubadata_CL",
            "lastDataReceivedQuery": "alertsubadata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "eventsapplicationdata_CL",
            "lastDataReceivedQuery": "eventsapplicationdata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "eventsauditdata_CL",
            "lastDataReceivedQuery": "eventsauditdata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "eventsconnectiondata_CL",
            "lastDataReceivedQuery": "eventsconnectiondata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "eventsincidentdata_CL",
            "lastDataReceivedQuery": "eventsincidentdata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "eventsnetworkdata_CL",
            "lastDataReceivedQuery": "eventsnetworkdata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "eventspagedata_CL",
            "lastDataReceivedQuery": "eventspagedata_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        },
        {
            "name": "Netskope_WebTx_metrics_CL",
            "lastDataReceivedQuery": "Netskope_WebTx_metrics_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        }
    ],
    "connectivityCriterias": [
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertscompromisedcredentialdata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertsctepdata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertsdlpdata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertsmalsitedata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertsmalwaredata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertspolicydata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertsquarantinedata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertsremediationdata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertssecurityassessmentdata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "alertsubadata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "eventsapplicationdata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "eventsauditdata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "eventsconnectiondata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "eventsincidentdata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "eventsnetworkdata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "eventspagedata_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        },
        {
            "type": "IsConnectedQuery",
            "value": [
                "Netskope_WebTx_metrics_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        }
    ],
    "availability": {
        "status": 1,
        "isPreview": true
    },
    "permissions": {
        "resourceProvider": [
            {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                    "write": true,
                    "read": true,
                    "delete": true
                }
            },
            {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                    "action": true
                }
            }
        ],
        "customs": [
            {
                "name": "Azure Subscription",
                "description": "Azure Subscription with owner role is required to register an application in azure active directory() and assign role of contributor to app in resource group."
            },
            {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
            },
            {
                "name": "REST API Credentials/permissions",
                "description": "**Netskope Tenant** and **Netskope API Token** is required.  See the documentation to learn more about API on the [Rest API reference](https://docs.netskope.com/en/netskope-help/admin-console/rest-api/rest-api-v2-overview-312207/)"
            }
        ]
    },
    "instructionSteps": [
        {
            "title": "",
            "description": ">**NOTE:** This connector uses Azure Functions to connect to the Netskope APIs to pull its Alerts and Events data into custom log table. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
        },
        {
            "title": "",
            "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
        },
        {
            "title": "",
            "description": "**STEP 1 - App Registration steps for the Application in Microsoft Entra ID**\n\n This integration requires an App registration in the Azure portal. Follow the steps in this section to create a new application in Microsoft Entra ID:\n 1. Sign in to the [Azure portal](https://portal.azure.com/).\n 2. Search for and select **Microsoft Entra ID**.\n 3. Under **Manage**, select **App registrations > New registration**.\n 4. Enter a display **Name** for your application.\n 5. Select **Register** to complete the initial app registration.\n 6. When registration finishes, the Azure portal displays the app registration's Overview pane. You see the **Application (client) ID** and **Tenant ID**. The client ID and Tenant ID is required as configuration parameters for the execution of the TriggersSync playbook. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app)"
        },
        {
            "title": "",
            "description": "**STEP 2 - Add a client secret for application in Microsoft Entra ID**\n\n Sometimes called an application password, a client secret is a string value required for the execution of TriggersSync playbook. Follow the steps in this section to create a new Client Secret:\n 1. In the Azure portal, in **App registrations**, select your application.\n 2. Select **Certificates & secrets > Client secrets > New client secret**.\n 3. Add a description for your client secret.\n 4. Select an expiration for the secret or specify a custom lifetime. Limit is 24 months.\n 5. Select **Add**. \n 6. *Record the secret's value for use in your client application code. This secret value is never displayed again after you leave this page.* The secret value is required as configuration parameter for the execution of TriggersSync playbook. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret)"
        },
        {
            "title": "",
            "description": "**STEP 3 - Assign role of Contributor to application in Microsoft Entra ID**\n\n Follow the steps in this section to assign the role:\n 1. In the Azure portal, Go to **Resource Group** and select your resource group.\n 2. Go to **Access control (IAM)** from left panel.\n 3. Click on **Add**, and then select **Add role assignment**.\n 4. Select **Contributor** as role and click on next.\n 5. In **Assign access to**, select `User, group, or service principal`.\n 6. Click on **add members** and type **your app name** that you have created and select it.\n 7. Now click on **Review + assign** and then again click on **Review + assign**. \n\n> **Reference link:** [https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal](https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal)"
        },
        {
            "title": "",
            "description": "**STEP 4 - Steps to create/get Credentials for the Netskope account** \n\n Follow the steps in this section to create/get **Netskope Hostname** and **Netskope API Token**:\n 1. Login to your **Netskope Tenant** and go to the **Settings menu** on the left navigation bar.\n 2. Click on Tools and then **REST API v2**\n 3. Now, click on the new token button. Then it will ask for token name, expiration duration and the endpoints that you want to fetch data from.\n 5. Once that is done click the save button, the token will be generated. Copy the token and save at a secure place for further usage."
        },
        {
            "title": "",
            "description": "**STEP 5 - Steps to create the azure functions for Netskope Alerts and Events Data Collection**\n\n>**IMPORTANT:** Before deploying Netskope data connector, have the  Workspace ID and Workspace Primary Key (can be copied from the following) readily available.., as well as the Netskope API Authorization Key(s).",
            "instructions": [
                {
                    "parameters": {
                        "fillWith": [
                            "WorkspaceId"
                        ],
                        "label": "Workspace ID"
                    },
                    "type": "CopyableLabel"
                },
                {
                    "parameters": {
                        "fillWith": [
                            "PrimaryKey"
                        ],
                        "label": "Primary Key"
                    },
                    "type": "CopyableLabel"
                }
            ]
        },
        {
            "description": "Using the ARM template deploy the function apps for ingestion of Netskope events and alerts data to Sentinel.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-NetskopeV2-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tNetskope HostName \n\t\tNetskope API Token \n\t\tSelect Yes in Alerts and Events types dropdown for that endpoint you want to fetch Alerts and Events \n\t\tLog Level \n\t\tWorkspace ID \n\t\tWorkspace Key \n4. Click on **Review+Create**. \n5. Then after validation click on **Create** to deploy."
        }
    ]
}