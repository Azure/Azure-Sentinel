{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "AlertsUba": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/uba endpoint."
            },
            "type": "String"
        },
        "AlertsSecurityAssessment": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/securityassessment endpoint."
            },
            "type": "String"
        },
        "AlertsQuarantine": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/quarantine endpoint."
            },
            "type": "String"
        },
        "AlertsRemediation": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/remediation endpoint."
            },
            "type": "String"
        },
        "AlertsPolicy": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/policy endpoint."
            },
            "type": "String"
        },
        "AlertsMalware": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/malware endpoint."
            },
            "type": "String"
        },
        "AlertsMalsite": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/malsite endpoint."
            },
            "type": "String"
        },
        "AlertsCompromisedCredential": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/compromisedcredential endpoint."
            },
            "type": "String"
        },
        "AlertsCtep": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/ctep endpoint."
            },
            "type": "String"
        },
        "AlertsDlp": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/alerts/dlp endpoint."
            },
            "type": "String"
        },
        "EventsApplication": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/events/application endpoint."
            },
            "type": "String"
        },
        "EventsAudit": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/events/audit endpoint."
            },
            "type": "String"
        },
        "EventsConnection": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/events/connection endpoint."
            },
            "type": "String"
        },
        "EventsIncident": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/events/incident endpoint."
            },
            "type": "String"
        },
        "EventsInfrastructure": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/events/infrastructure endpoint."
            },
            "type": "String"
        },
        "EventsNetwork": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/events/network endpoint."
            },
            "type": "String"
        },
        "EventsPage": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
			"metadata": {
                "description": "Fetches data from /api/v2/events/dataexport/events/page endpoint."
            },
            "type": "String"
        },
        "NetskopeHostName": {
            "type": "String",
            "metadata": {
                "description": "Enter the Netskope Host Name."
            }
        },
        "NetskopeAPIToken": {
            "type": "SecureString",
            "metadata": {
                "description": "Enter the Netskope API Token."
            }
        },
        "LogLevel": {
            "defaultValue": "Info",
            "allowedValues": [
                "Debug",
                "Info",
                "Error",
                "Warning"
            ],
            "type": "String",
            "metadata": {
                "description": "Please add log level or log severity value. By default it is set to INFO"
            }
        },
        "WorkspaceID": {
            "minLength": 1,
            "type": "String",
            "metadata": {
                "description": "Enter Workspace ID of Log Analytics workspace."
            }
        },
        "WorkspaceKey": {
            "minLength": 1,
            "type": "SecureString",
            "metadata": {
                "description": "Enter Workspace Key of Log Analytics workspace."
            }
        }
    },
    "variables": {
        "WebTxMetrics": "[concat('WebTxMetric',uniqueString(resourceGroup().id))]",
        "function_names": [
            {
                "name": "uba",
                "takeornot": "[if(equals(parameters('AlertsUba'),'Yes'), 'true', 'false')]",
                "sharename": "uba"
            },
            {
                "name": "securit",
                "takeornot": "[if(equals(parameters('AlertsSecurityAssessment'),'Yes'), 'true', 'false')]",
                "sharename": "securityassessment"
            },
            {
                "name": "quarant",
                "takeornot": "[if(equals(parameters('AlertsQuarantine'),'Yes'), 'true', 'false')]",
                "sharename": "quarantine"
            },
            {
                "name": "remed",
                "takeornot": "[if(equals(parameters('AlertsRemediation'),'Yes'), 'true', 'false')]",
                "sharename": "remediation"
            },
            {
                "name": "policy",
                "takeornot": "[if(equals(parameters('AlertsPolicy'),'Yes'), 'true', 'false')]",
                "sharename": "policy"
            },
            {
                "name": "malware",
                "takeornot": "[if(equals(parameters('AlertsMalware'),'Yes'), 'true', 'false')]",
                "sharename": "malware"
            },
            {
                "name": "malsite",
                "takeornot": "[if(equals(parameters('AlertsMalsite'),'Yes'), 'true', 'false')]",
                "sharename": "malsite"
            },
            {
                "name": "cc",
                "takeornot": "[if(equals(parameters('AlertsCompromisedCredential'),'Yes'), 'true', 'false')]",
                "sharename": "compromisedcredential"
            },
            {
                "name": "ctep",
                "takeornot": "[if(equals(parameters('AlertsCtep'),'Yes'), 'true', 'false')]",
                "sharename": "ctep"
            },
            {
                "name": "dlp",
                "takeornot": "[if(equals(parameters('AlertsDlp'),'Yes'), 'true', 'false')]",
                "sharename": "dlp"
            },
            {
                "name": "app",
                "takeornot": "[if(equals(parameters('EventsApplication'),'Yes'), 'true', 'false')]",
                "sharename": "application"
            },
            {
                "name": "audit",
                "takeornot": "[if(equals(parameters('EventsAudit'),'Yes'), 'true', 'false')]",
                "sharename": "audit"
            },
            {
                "name": "conn",
                "takeornot": "[if(equals(parameters('EventsConnection'),'Yes'), 'true', 'false')]",
                "sharename": "connection"
            },
            {
                "name": "incid",
                "takeornot": "[if(equals(parameters('EventsIncident'),'Yes'), 'true', 'false')]",
                "sharename": "incident"
            },
            {
                "name": "infra",
                "takeornot": "[if(equals(parameters('EventsInfrastructure'),'Yes'), 'true', 'false')]",
                "sharename": "infrastructure"
            },
            {
                "name": "network",
                "takeornot": "[if(equals(parameters('EventsNetwork'),'Yes'), 'true', 'false')]",
                "sharename": "network"
            },
            {
                "name": "page",
                "takeornot": "[if(equals(parameters('EventsPage'),'Yes'), 'true', 'false')]",
                "sharename": "page"
            }
        ],
        "copy": [
            {
                "name": "AlertsEventsNameArray",
                "count": "[length(variables('function_names'))]",
                "input": {
                    "NetskopeToStorage": "[concat('NtoS',variables('function_names')[copyIndex('AlertsEventsNameArray', 0)].name,uniqueString(resourceGroup().id))]",
                    "StorageToSentinel": "[concat('StoS',variables('function_names')[copyIndex('AlertsEventsNameArray', 0)].name,uniqueString(resourceGroup().id))]",
                    "CheckToInclude": "[variables('function_names')[copyIndex('AlertsEventsNameArray', 0)].takeornot]"
                }
            }
        ],
        "StorageSuffix": "[environment().suffixes.storage]",
        "LogAnaltyicsUri": "[replace(environment().portal, 'https://portal', concat('https://', toLower(parameters('WorkspaceID')), '.ods.opinsights'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2015-05-01",
            "name": "[variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage]",
            "location": "[resourceGroup().location]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage]"
            },
            "copy": {
                "name": "componentcopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[tolower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage)]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "copy": {
                "name": "storageaccountcopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage, '/default')]",
            "dependsOn": [
                "storageaccountcopy"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            },
            "copy": {
                "name": "blobServicescopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage, '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                }
            },
            "copy": {
                "name": "fileServicescopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2018-11-01",
            "name": "[variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage))]",
                "[resourceId('Microsoft.Insights/components', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage)]"
            ],
            "kind": "functionapp,linux",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "name": "[variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage]",
                "httpsOnly": true,
                "clientAffinityEnabled": true,
                "alwaysOn": true,
                "reserved": true,
                "siteConfig": {
                    "linuxFxVersion": "python|3.9"
                }
            },
            "resources": [
                {
                    "type": "config",
                    "apiVersion": "2018-11-01",
                    "name": "appsettings",
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage)]"
                    ],
                    "properties": {
                        "FUNCTIONS_EXTENSION_VERSION": "~4",
                        "FUNCTIONS_WORKER_RUNTIME": "python",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), reference(resourceId('Microsoft.insights/components', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage), '2015-05-01').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), reference(resourceId('microsoft.insights/components', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage), '2015-05-01').ConnectionString, '')]",
                        "AzureWebJobsStorage": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), concat('DefaultEndpointsProtocol=https;AccountName=', toLower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage)), '2019-06-01').keys[0].value, ';EndpointSuffix=',toLower(variables('StorageSuffix'))), '')]",
                        "ConnectionString": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), concat('DefaultEndpointsProtocol=https;AccountName=', toLower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage)), '2019-06-01').keys[0].value, ';EndpointSuffix=',toLower(variables('StorageSuffix'))), '')]",
                        "logAnalyticsUri": "[variables('LogAnaltyicsUri')]",
                        "NetskopeHostname": "[parameters('NetskopeHostName')]",
                        "NetskopeToken": "[parameters('NetskopeAPIToken')]",
                        "ShareName": "[variables('function_names')[copyIndex('sitescopy')].sharename]",
                        "WorkspaceId": "[parameters('WorkspaceID')]",
                        "WorkspaceKey": "[parameters('WorkspaceKey')]",
                        "Log_Level": "[parameters('LogLevel')]",
                        "WEBSITE_RUN_FROM_PACKAGE": "https://aka.ms/sentinel-NetskopeToStorage-functionapp"
                    },
                    "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
                }
            ],
            "copy": {
                "name": "sitescopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage, '/default/azure-webjobs-hosts')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage, 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage)]"
            ],
            "properties": {
                "publicAccess": "None"
            },
            "copy": {
                "name": "containerscopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage, '/default/azure-webjobs-secrets')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage, 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage)]"
            ],
            "properties": {
                "publicAccess": "None"
            },
            "copy": {
                "name": "containerscopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage, '/default/', tolower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage, 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage)]"
            ],
            "properties": {
                "shareQuota": 5120
            },
            "copy": {
                "name": "sharescopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2015-05-01",
            "name": "[variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel]",
            "location": "[resourceGroup().location]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel]"
            },
            "copy": {
                "name": "componentcopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[tolower(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel)]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "copy": {
                "name": "storageaccountcopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel, '/default')]",
            "dependsOn": [
                "storageaccountcopy"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            },
            "copy": {
                "name": "blobServicescopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel, '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                }
            },
            "copy": {
                "name": "fileServicescopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2018-11-01",
            "name": "[variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel))]",
                "[resourceId('Microsoft.Insights/components', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel)]"
            ],
            "kind": "functionapp,linux",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "name": "[variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel]",
                "httpsOnly": true,
                "clientAffinityEnabled": true,
                "alwaysOn": true,
                "reserved": true,
                "siteConfig": {
                    "linuxFxVersion": "python|3.9"
                }
            },
            "resources": [
                {
                    "type": "config",
                    "apiVersion": "2018-11-01",
                    "name": "appsettings",
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel)]"
                    ],
                    "properties": {
                        "FUNCTIONS_EXTENSION_VERSION": "~4",
                        "FUNCTIONS_WORKER_RUNTIME": "python",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), reference(resourceId('Microsoft.insights/components', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel), '2015-05-01').InstrumentationKey, '')]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), reference(resourceId('microsoft.insights/components', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel), '2015-05-01').ConnectionString, '')]",
                        "AzureWebJobsStorage": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), concat('DefaultEndpointsProtocol=https;AccountName=', toLower(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel)), '2019-06-01').keys[0].value, ';EndpointSuffix=',toLower(variables('StorageSuffix'))), '')]",
                        "ConnectionString": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), concat('DefaultEndpointsProtocol=https;AccountName=', toLower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(variables('AlertsEventsNameArray')[copyIndex()].NetskopeToStorage)), '2019-06-01').keys[0].value, ';EndpointSuffix=',toLower(variables('StorageSuffix'))), '')]",
                        "logAnalyticsUri": "[variables('LogAnaltyicsUri')]",
                        "ShareName": "[variables('function_names')[copyIndex('sitescopy')].sharename]",
                        "WorkspaceId": "[parameters('WorkspaceID')]",
                        "WorkspaceKey": "[parameters('WorkspaceKey')]",
                        "Log_Level": "[parameters('LogLevel')]",
                        "WEBSITE_RUN_FROM_PACKAGE": "https://aka.ms/sentinel-NetskopeStorageToSentinel-functionapp"
                    },
                    "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
                }
            ],
            "copy": {
                "name": "sitescopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel, '/default/azure-webjobs-hosts')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel, 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel)]"
            ],
            "properties": {
                "publicAccess": "None"
            },
            "copy": {
                "name": "containerscopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel, '/default/azure-webjobs-secrets')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel, 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel)]"
            ],
            "properties": {
                "publicAccess": "None"
            },
            "copy": {
                "name": "containerscopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel, '/default/', tolower(variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel, 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('AlertsEventsNameArray')[copyIndex()].StorageToSentinel)]"
            ],
            "properties": {
                "shareQuota": 5120
            },
            "copy": {
                "name": "sharescopy",
                "count": "[length(variables('function_names'))]"
            },
            "condition": "[if(equals(variables('AlertsEventsNameArray')[copyIndex()].CheckToInclude, 'true'), true(), false())]"
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2015-05-01",
            "name": "[variables('WebTxMetrics')]",
            "location": "[resourceGroup().location]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[variables('WebTxMetrics')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[tolower(variables('WebTxMetrics'))]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('WebTxMetrics'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('WebTxMetrics')))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('WebTxMetrics'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('WebTxMetrics')))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2018-11-01",
            "name": "[variables('WebTxMetrics')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', tolower(variables('WebTxMetrics')))]",
                "[resourceId('Microsoft.Insights/components', variables('WebTxMetrics'))]"
            ],
            "kind": "functionapp,linux",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "name": "[variables('WebTxMetrics')]",
                "httpsOnly": true,
                "clientAffinityEnabled": true,
                "alwaysOn": true,
                "reserved": true,
                "siteConfig": {
                    "linuxFxVersion": "python|3.9"
                }
            },
            "resources": [
                {
                    "type": "config",
                    "apiVersion": "2018-11-01",
                    "name": "appsettings",
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', variables('WebTxMetrics'))]"
                    ],
                    "properties": {
                        "FUNCTIONS_EXTENSION_VERSION": "~4",
                        "FUNCTIONS_WORKER_RUNTIME": "python",
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.insights/components', variables('WebTxMetrics')), '2015-05-01').InstrumentationKey]",
                        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('microsoft.insights/components', variables('WebTxMetrics')), '2015-05-01').ConnectionString]",
                        "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', toLower(variables('WebTxMetrics')),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(variables('WebTxMetrics'))), '2019-06-01').keys[0].value, ';EndpointSuffix=',toLower(variables('StorageSuffix')))]",
                        "logAnalyticsUri": "[variables('LogAnaltyicsUri')]",
                        "NetskopeHostname": "[parameters('NetskopeHostName')]",
                        "NetskopeToken": "[parameters('NetskopeAPIToken')]",
                        "WorkspaceId": "[parameters('WorkspaceID')]",
                        "WorkspaceKey": "[parameters('WorkspaceKey')]",
                        "Log_Level": "[parameters('LogLevel')]",
                        "WEBSITE_RUN_FROM_PACKAGE": "https://aka.ms/sentinel-NetskopeWebTxMetrics-functionapp"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('WebTxMetrics'), '/default/azure-webjobs-hosts')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('WebTxMetrics'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('WebTxMetrics'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('WebTxMetrics'), '/default/azure-webjobs-secrets')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('WebTxMetrics'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('WebTxMetrics'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('WebTxMetrics'), '/default/', tolower(variables('WebTxMetrics')))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('WebTxMetrics'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('WebTxMetrics'))]"
            ],
            "properties": {
                "shareQuota": 5120
            }
        }
    ]
}