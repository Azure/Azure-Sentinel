// Code generated by mockery v2.49.1. DO NOT EDIT.

package utils

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockCursor is an autogenerated mock type for the Cursor type
type MockCursor struct {
	mock.Mock
}

type MockCursor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCursor) EXPECT() *MockCursor_Expecter {
	return &MockCursor_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx
func (_m *MockCursor) Get(ctx echo.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCursor_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCursor_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *MockCursor_Expecter) Get(ctx interface{}) *MockCursor_Get_Call {
	return &MockCursor_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockCursor_Get_Call) Run(run func(ctx echo.Context)) *MockCursor_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockCursor_Get_Call) Return(_a0 int64, _a1 error) *MockCursor_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCursor_Get_Call) RunAndReturn(run func(echo.Context) (int64, error)) *MockCursor_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, timestamp
func (_m *MockCursor) Store(ctx echo.Context, timestamp int64) error {
	ret := _m.Called(ctx, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, int64) error); ok {
		r0 = rf(ctx, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCursor_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockCursor_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx echo.Context
//   - timestamp int64
func (_e *MockCursor_Expecter) Store(ctx interface{}, timestamp interface{}) *MockCursor_Store_Call {
	return &MockCursor_Store_Call{Call: _e.mock.On("Store", ctx, timestamp)}
}

func (_c *MockCursor_Store_Call) Run(run func(ctx echo.Context, timestamp int64)) *MockCursor_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCursor_Store_Call) Return(_a0 error) *MockCursor_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCursor_Store_Call) RunAndReturn(run func(echo.Context, int64) error) *MockCursor_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCursor creates a new instance of MockCursor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCursor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCursor {
	mock := &MockCursor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
