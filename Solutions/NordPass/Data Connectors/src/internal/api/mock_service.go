// Code generated by mockery v2.49.1. DO NOT EDIT.

package api

import (
	activity "project/internal/activity"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// FetchData provides a mock function with given fields: ctx, lastTimestamp, page
func (_m *MockService) FetchData(ctx echo.Context, lastTimestamp int64, page int) ([]activity.SentinelEvent, error) {
	ret := _m.Called(ctx, lastTimestamp, page)

	if len(ret) == 0 {
		panic("no return value specified for FetchData")
	}

	var r0 []activity.SentinelEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int64, int) ([]activity.SentinelEvent, error)); ok {
		return rf(ctx, lastTimestamp, page)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int64, int) []activity.SentinelEvent); ok {
		r0 = rf(ctx, lastTimestamp, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]activity.SentinelEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int64, int) error); ok {
		r1 = rf(ctx, lastTimestamp, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_FetchData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchData'
type MockService_FetchData_Call struct {
	*mock.Call
}

// FetchData is a helper method to define mock.On call
//   - ctx echo.Context
//   - lastTimestamp int64
//   - page int
func (_e *MockService_Expecter) FetchData(ctx interface{}, lastTimestamp interface{}, page interface{}) *MockService_FetchData_Call {
	return &MockService_FetchData_Call{Call: _e.mock.On("FetchData", ctx, lastTimestamp, page)}
}

func (_c *MockService_FetchData_Call) Run(run func(ctx echo.Context, lastTimestamp int64, page int)) *MockService_FetchData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *MockService_FetchData_Call) Return(_a0 []activity.SentinelEvent, _a1 error) *MockService_FetchData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_FetchData_Call) RunAndReturn(run func(echo.Context, int64, int) ([]activity.SentinelEvent, error)) *MockService_FetchData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
