{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for GoogleCloudPlatformCDN"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "resource group name where Microsoft Sentinel is setup"
      }
    },
    "subscription": {
      "type": "string",
      "defaultValue": "[last(split(subscription().id, '/'))]",
      "metadata": {
        "description": "subscription id where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "support@microsoft.com",
    "_email": "[variables('email')]",
    "_solutionName": "GoogleCloudPlatformCDN",
    "_solutionVersion": "3.0.0",
    "solutionId": "azuresentinel.azure-sentinel-solution-gcp-cdn",
    "_solutionId": "[variables('solutionId')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "dataConnectorCCPVersion": "1.0.0",
    "_dataConnectorContentIdConnectorDefinition1": "GCPCDNLogsCCPDefinition",
    "dataConnectorTemplateNameConnectorDefinition1": "[concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentIdConnectorDefinition1')))]",
    "_dataConnectorContentIdConnections1": "GCPCDNLogsCCPDefinitionConnections",
    "dataConnectorTemplateNameConnections1": "[concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentIdConnections1')))]",
    "dataCollectionEndpointId1": "[concat('/subscriptions/',parameters('subscription'),'/resourceGroups/',parameters('resourceGroupName'),'/providers/Microsoft.Insights/dataCollectionEndpoints/',parameters('workspace'))]",
    "blanks": "[replace('b', 'b', '')]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('dataConnectorTemplateNameConnectorDefinition1'), variables('dataConnectorCCPVersion'))]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
        "displayName": "Google Cloud Platform CDN",
        "contentKind": "DataConnector",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorCCPVersion')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentIdConnectorDefinition1'))]",
              "apiVersion": "2022-09-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectorDefinitions",
              "location": "[parameters('workspace-location')]",
              "kind": "Customizable",
              "properties": {
                "connectorUiConfig": {
                  "id": "GCPCDNLogsCCPDefinition",
                  "title": "Google Cloud Platform CDN",
                  "publisher": "Microsoft",
                  "descriptionMarkdown": "The Google Cloud Platform CDN data connector provides the capability to ingest Cloud CDN Audit logs and Cloud CDN Traffic logs into Microsoft Sentinel using the Compute Engine API. Refer the [Product overview](https://cloud.google.com/cdn/docs/overview) document for more details.",
                  "graphQueriesTableName": "GCP_CDNV2_CL",
                  "graphQueries": [
                    {
                      "metricName": "Total events received",
                      "legend": "GCP CDN Logs",
                      "baseQuery": "{{graphQueriesTableName}}"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Get Sample of GCP CDN logs",
                      "query": "{{graphQueriesTableName}}\n | take 10"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "{{graphQueriesTableName}}",
                      "lastDataReceivedQuery": "{{graphQueriesTableName}}\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriteria": [
                    {
                      "type": "HasDataConnectors"
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "Read and Write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "read": true,
                          "write": true,
                          "delete": true,
                          "action": false
                        }
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "instructions": [
                        {
                          "type": "MarkdownControlEnvBased",
                          "parameters": {
                            "prodScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/GoogleCloudPlatformCDN/Data%20Connectors/README.md) for log setup and authentication setup tutorial.\n\n Find the Log set up script [**here**](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation/GCPCDNLogsSetup)\n & the Authentication set up script [**here**](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation/GCPInitialAuthenticationSetup)",
                            "govScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/GoogleCloudPlatformCDN/Data%20Connectors/README.md) for log setup and authentication setup tutorial.\n\n Find the Log set up script [**here**](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation_gov/GCPCDNLogsSetup)\n & the Authentication set up script [**here**](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation_gov/GCPInitialAuthenticationSetupGov)"
                          }
                        },
                        {
                          "type": "CopyableLabel",
                          "parameters": {
                            "label": "Tenant ID: A unique identifier that is used as an input in the Terraform configuration within a GCP environment.",
                            "fillWith": [
                              "TenantId"
                            ],
                            "name": "TenantId",
                            "disabled": true
                          }
                        },
                        {
                          "type": "Markdown",
                          "parameters": {
                            "content": "#### 2. Enable CDN logs \n In the Google Cloud Console, enable cloud logging if not enabled previously, and save the changes. Navigate to Cloud CDN section and click on Add origin to create backends as per link provided below. \n\n Reference Link: [Link to documentation](https://cloud.google.com/cdn/docs/using-cdn)"
                          }
                        },
                        {
                          "type": "Markdown",
                          "parameters": {
                            "content": "#### 3. Connect new collectors \n To enable GCP Cloud CDN Logs for Microsoft Sentinel, click on Add new collector button, provide the required information in the pop up and click on Connect."
                          }
                        },
                        {
                          "type": "GCPGrid",
                          "parameters": {}
                        },
                        {
                          "type": "GCPContextPane",
                          "parameters": {}
                        }
                      ],
                      "title": "Connect GCP CDN to Microsoft Sentinel\n"
                    }
                  ]
                }
              }
            },
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnectorDefinition1')))]",
              "apiVersion": "2022-01-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectorDefinitions', variables('_dataConnectorContentIdConnectorDefinition1'))]",
                "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorCCPVersion')]",
                "source": {
                  "sourceId": "[variables('_solutionId')]",
                  "name": "[variables('_solutionName')]",
                  "kind": "Solution"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "version": "[variables('dataConnectorCCPVersion')]",
                      "contentId": "[variables('_dataConnectorContentIdConnections1')]",
                      "kind": "ResourcesDataConnector"
                    }
                  ]
                }
              }
            },
            {
              "name": "GCPCDNDCR",
              "apiVersion": "2022-06-01",
              "type": "Microsoft.Insights/dataCollectionRules",
              "location": "[parameters('workspace-location')]",
              "kind": "[variables('blanks')]",
              "properties": {
                "dataCollectionEndpointId": "[variables('dataCollectionEndpointId1')]",
                "streamDeclarations": {
                  "Custom-GCPCDN": {
                    "columns": [
                      {
                        "name": "insertId",
                        "type": "string"
                      },
                      {
                        "name": "logName",
                        "type": "string"
                      },
                      {
                        "name": "protoPayload",
                        "type": "dynamic"
                      },
                      {
                        "name": "resource",
                        "type": "dynamic"
                      },
                      {
                        "name": "severity",
                        "type": "string"
                      },
                      {
                        "name": "timestamp",
                        "type": "datetime"
                      },
                      {
                        "name": "jsonPayload",
                        "type": "dynamic"
                      },
                      {
                        "name": "labels",
                        "type": "dynamic"
                      },
                      {
                        "name": "receiveTimestamp",
                        "type": "datetime"
                      },
                      {
                        "name": "operation",
                        "type": "dynamic"
                      },
                      {
                        "name": "spanId",
                        "type": "string"
                      },
                      {
                        "name": "trace",
                        "type": "string"
                      },
                      {
                        "name": "httpRequest",
                        "type": "dynamic"
                      },
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      }
                    ]
                  }
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "workspaceResourceId": "[variables('workspaceResourceId')]",
                      "name": "clv2ws1"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Custom-GCPCDN"
                    ],
                    "destinations": [
                      "clv2ws1"
                    ],
                    "transformKql": "source | extend ProtoPayload = parse_json(protoPayload) | extend JsonPayload = parse_json(jsonPayload) | extend Operation = parse_json(operation) | extend Labels = parse_json(labels) | extend Resource = parse_json(resource) | extend HttpRequest = parse_json(httpRequest) | extend TimeGenerated = now(), InsertID = insertId, Timestamp = timestamp, Severity = severity, LogName = logName, ReceiveTimestamp = receiveTimestamp, SpanID = spanId, Trace = trace, LabelsAPIRootTriggerID = tostring(Labels['compute.googleapis.com/root_trigger_id']), ResourceType = tostring(Resource['type']), ResourceLabelsBackendServiceID = tostring(Resource['labels']['backend_service_id']), ResourceLabelsBackendBucketID = tostring(Resource['labels']['backend_bucket_id']), ResourceLabelsProjectID = tostring(Resource['labels']['project_id']), ResourceLabelsLocation = tostring(Resource['labels']['location']), PayloadType = tostring(ProtoPayload['@type']), MethodName = tostring(ProtoPayload['methodName']), NumResponseItems = tostring(ProtoPayload['numResponseItems']), ResourceName = tostring(ProtoPayload['resourceName']), ServiceName = tostring(ProtoPayload['serviceName']), AuthenticationInfoPrincipalEmail = tostring(ProtoPayload['authenticationInfo']['principalEmail']), AuthorizationInfo = tostring(ProtoPayload['authorizationInfo']), RequestType = tostring(ProtoPayload['request']['@type']), RequestKeyName = tostring(ProtoPayload['request']['keyName']), RequestGroup = tostring(ProtoPayload['request']['group']), RequestSecurityPolicy = tostring(ProtoPayload['request']['securityPolicy']), RequestCompressionMode = tostring(ProtoPayload['request']['compressionMode']), RequestDescription = tostring(ProtoPayload['request']['description']), RequestEnableCDN = tobool(ProtoPayload['request']['enableCDN']), RequestIPAddressSelectionPolicy = tostring(ProtoPayload['request']['ipAddressSelectionPolicy']), RequestLoadBalancingScheme = tostring(ProtoPayload['request']['loadBalancingScheme']), RequestLocalityLbPolicy = tostring(ProtoPayload['request']['localityLbPolicy']), RequestName = tostring(ProtoPayload['request']['name']), RequestPortName = tostring(ProtoPayload['request']['portName']), RequestProtocol = tostring(ProtoPayload['request']['protocol']), RequestSessionAffinity = tostring(ProtoPayload['request']['sessionAffinity']), RequestTimeoutSec = tostring(ProtoPayload['request']['timeoutSec']), RequestBackends = tostring(ProtoPayload['request']['backends']), RequestCDNPolicySignedUrlCacheMaxAgeSec = tostring(ProtoPayload['request']['cdnPolicy']['signedUrlCacheMaxAgeSec']), RequestFingerprint = tostring(ProtoPayload['request']['fingerprint']), RequestCDNPolicyCacheMode = tostring(ProtoPayload['request']['cdnPolicy']['cacheMode']), RequestCDNPolicyClientTtl = tostring(ProtoPayload['request']['cdnPolicy']['clientTtl']), RequestCDNPolicyDefaultTtl = tostring(ProtoPayload['request']['cdnPolicy']['defaultTtl']), RequestCDNPolicyMaxTtl = tostring(ProtoPayload['request']['cdnPolicy']['maxTtl']), RequestCDNPolicyNegativeCaching = tobool(ProtoPayload['request']['cdnPolicy']['negativeCaching']), RequestCDNPolicyServeWhileStale = tostring(ProtoPayload['request']['cdnPolicy']['serveWhileStale']), RequestCDNPolicyCacheKeyPolicyIncludeHost = tobool(ProtoPayload['request']['cdnPolicy']['cacheKeyPolicy']['includeHost']), RequestCDNPolicyCacheKeyPolicyIncludeProtocol = tobool(ProtoPayload['request']['cdnPolicy']['cacheKeyPolicy']['includeProtocol']), RequestCDNPolicyCacheKeyPolicyIncludeQueryString = tobool(ProtoPayload['request']['cdnPolicy']['cacheKeyPolicy']['includeQueryString']), RequestConnectionDrainingTimeoutSec = tostring(ProtoPayload['request']['connectionDraining']['drainingTimeoutSec']), RequestHealthChecks = tostring(ProtoPayload['request']['healthChecks']), RequestLogConfigEnable = tobool(ProtoPayload['request']['logConfig']['enable']), RequestLogConfigSampleRate = tostring(ProtoPayload['request']['logConfig']['sampleRate']), RequestMetadataCallerIP = tostring(ProtoPayload['requestMetadata']['callerIp']), RequestMetadataCallerSuppliedUserAgent = tostring(ProtoPayload['requestMetadata']['callerSuppliedUserAgent']), RequestMetadataDestinationAttributes = tostring(ProtoPayload['requestMetadata']['destinationAttributes']), RequestMetadataRequestAttributesAuth = tostring(ProtoPayload['requestMetadata']['requestAttributes']['auth']), RequestMetadataRequestAttributesTime = todatetime(ProtoPayload['requestMetadata']['requestAttributes']['time']), RequestMetadataRequestAttributesReason = tostring(ProtoPayload['requestMetadata']['requestAttributes']['reason']), ResourceLocationCurrentLocations = tostring(ProtoPayload['resourceLocation']['currentLocations']), ResponseType = tostring(ProtoPayload['response']['@type']), ResponseID = tostring(ProtoPayload['response']['id']), ResponseInsertTime = todatetime(ProtoPayload['response']['insertTime']), ResponseName = tostring(ProtoPayload['response']['name']), ResponseOperationType = tostring(ProtoPayload['response']['operationType']), ResponseProgress = tostring(ProtoPayload['response']['progress']), ResponseSelfLink = tostring(ProtoPayload['response']['selfLink']), ResponseSelfLinkWithID = tostring(ProtoPayload['response']['selfLinkWithId']), ResponseStartTime = todatetime(ProtoPayload['response']['startTime']), ResponseStatus = tostring(ProtoPayload['response']['status']), ResponseTargetID = tostring(ProtoPayload['response']['targetId']), ResponseTargetLink = tostring(ProtoPayload['response']['targetLink']), ResponseUser = tostring(ProtoPayload['response']['user']), OperationFirst = tobool(Operation['first']), OperationLast = tobool(Operation['last']), OperationID = tostring(Operation['id']), OperationProducer = tostring(Operation['producer']), HttpRequestCacheLookup = tobool(HttpRequest['cacheLookup']), HttpRequestLatency = tostring(HttpRequest['latency']), HttpRequestRemoteIP = tostring(HttpRequest['remoteIp']), HttpRequestRequestMethod = tostring(HttpRequest['requestMethod']), HttpRequestRequestSize = tostring(HttpRequest['requestSize']), HttpRequestRequestUrl = tostring(HttpRequest['requestUrl']), HttpRequestResponseSize = tostring(HttpRequest['responseSize']), HttpRequestCacheFillBytes = tostring(HttpRequest['cacheFillBytes']), HttpRequestCacheHit = tobool(HttpRequest['cacheHit']), HttpRequestServerIP = tostring(HttpRequest['serverIp']), HttpRequestStatus = todouble(HttpRequest['status']), HttpRequestUserAgent = tostring(HttpRequest['userAgent']), JsonPayloadType = tostring(JsonPayload['@type']), BackendTargetProjectNumber = tostring(JsonPayload['backendTargetProjectNumber']), CacheDecision = tostring(JsonPayload['cacheDecision']), CacheID = tostring(JsonPayload['cacheId']), RemoteIP = tostring(JsonPayload['remoteIp']), StatusDetails = tostring(JsonPayload['statusDetails']), EnforcedEdgeSecurityPolicyConfiguredAction = tostring(JsonPayload['enforcedEdgeSecurityPolicy']['configuredAction']), EnforcedEdgeSecurityPolicyName = tostring(JsonPayload['enforcedEdgeSecurityPolicy']['name']), EnforcedEdgeSecurityPolicyOutcome = tostring(JsonPayload['enforcedEdgeSecurityPolicy']['outcome']), EnforcedEdgeSecurityPolicyPriority = tostring(JsonPayload['enforcedEdgeSecurityPolicy']['priority']), OverrideResponseCode = todouble(JsonPayload['overrideResponseCode']), ErrorService = tostring(JsonPayload['errorService']), ErrorBackendStatusDetails = tostring(JsonPayload['errorBackendStatusDetails']), AuthzPolicyInfoPolicies = tostring(JsonPayload['authzPolicyInfo']['policies']), AuthzPolicyInfoResult = tostring(JsonPayload['authzPolicyInfo']['result']), LoadBalancingScheme = tostring(JsonPayload['loadBalancingScheme']), ResourceLabelsBackendServiceName = tostring(Resource['labels']['backend_service_name']), ResourceLabelsForwardingRuleName = tostring(Resource['labels']['forwarding_rule_name']), ResourceLabelsTargetProxyName = tostring(Resource['labels']['target_proxy_name']), ResourceLabelsUrlMapName = tostring(Resource['labels']['url_map_name']), ResourceLabelsZone = tostring(Resource['labels']['zone']) | project-away protoPayload, resource, jsonPayload, labels, operation, httpRequest",
                    "outputStream": "Custom-GCP_CDNV2_CL"
                  }
                ]
              }
            },
            {
              "name": "GCP_CDNV2_CL",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/tables",
              "location": "[parameters('workspace-location')]",
              "kind": null,
              "properties": {
                "schema": {
                  "name": "GCP_CDNV2_CL",
                  "columns": [
                    {
                      "name": "InsertID",
                      "type": "string",
                      "description": "A unique identifier for the log entry assigned by the logging system"
                    },
                    {
                      "name": "Timestamp",
                      "type": "datetime",
                      "description": "The time when the first layer GFE receives the request"
                    },
                    {
                      "name": "Severity",
                      "type": "string",
                      "description": "Indicates the importance or severity level of the log entry"
                    },
                    {
                      "name": "LogName",
                      "type": "string",
                      "description": "The full resource name of the log to which this entry belongs"
                    },
                    {
                      "name": "ReceiveTimestamp",
                      "type": "datetime",
                      "description": "The time the log entry was received by the logging system"
                    },
                    {
                      "name": "TimeGenerated",
                      "type": "datetime",
                      "description": "The timestamp when the log entry was fetched into Microsoft Sentinel"
                    },
                    {
                      "name": "LabelsAPIRootTriggerID",
                      "type": "string",
                      "description": "The root trigger ID identifying the origin request that caused this log entry"
                    },
                    {
                      "name": "ResourceType",
                      "type": "string",
                      "description": "The type of monitored Google Cloud resource that this log entry is associated with"
                    },
                    {
                      "name": "ResourceLabelsBackendServiceID",
                      "type": "string",
                      "description": "The unique identifier for the GCE backend service"
                    },
                    {
                      "name": "ResourceLabelsBackendBucketID",
                      "type": "string",
                      "description": "Holds the ResourceLabelsBackendBucketID value recorded in the CDN or load balancer log"
                    },
                    {
                      "name": "ResourceLabelsProjectID",
                      "type": "string",
                      "description": "The identifier of the Google Cloud project associated with this resource"
                    },
                    {
                      "name": "ResourceLabelsLocation",
                      "type": "string",
                      "description": "The geographical or regional location of the resource"
                    },
                    {
                      "name": "PayloadType",
                      "type": "string",
                      "description": "Type URL of the request or response payload"
                    },
                    {
                      "name": "MethodName",
                      "type": "string",
                      "description": "The name of the API method invoked"
                    },
                    {
                      "name": "NumResponseItems",
                      "type": "string",
                      "description": "The number of items returned in a list response"
                    },
                    {
                      "name": "ResourceName",
                      "type": "string",
                      "description": "Full name of the resource being acted upon"
                    },
                    {
                      "name": "ServiceName",
                      "type": "string",
                      "description": "The Google service processing the request"
                    },
                    {
                      "name": "AuthenticationInfoPrincipalEmail",
                      "type": "string",
                      "description": "The email of the authenticated identity making the request"
                    },
                    {
                      "name": "AuthorizationInfo",
                      "type": "string",
                      "description": "Authorization details such as permission name, granted status, and resource type"
                    },
                    {
                      "name": "RequestType",
                      "type": "string",
                      "description": "Type of the request payload object"
                    },
                    {
                      "name": "RequestKeyName",
                      "type": "string",
                      "description": "The name of the key used in the request"
                    },
                    {
                      "name": "RequestGroup",
                      "type": "string",
                      "description": "The reference to instance group used by the backend service"
                    },
                    {
                      "name": "RequestSecurityPolicy",
                      "type": "string",
                      "description": "The name or full path of the security policy attached to the backend service"
                    },
                    {
                      "name": "RequestCompressionMode",
                      "type": "string",
                      "description": "Specifies whether and how compression is applied"
                    },
                    {
                      "name": "RequestDescription",
                      "type": "string",
                      "description": "A custom description associated with the backend service configuration"
                    },
                    {
                      "name": "RequestEnableCDN",
                      "type": "boolean",
                      "description": "Boolean indicating if Cloud CDN is enabled for the backend service"
                    },
                    {
                      "name": "RequestIPAddressSelectionPolicy",
                      "type": "string",
                      "description": "Specifies IP address family for the backend"
                    },
                    {
                      "name": "RequestLoadBalancingScheme",
                      "type": "string",
                      "description": "Load balancing scheme used"
                    },
                    {
                      "name": "RequestLocalityLbPolicy",
                      "type": "string",
                      "description": "Locality-based load balancing strategy"
                    },
                    {
                      "name": "RequestName",
                      "type": "string",
                      "description": "The name assigned to the resource in the request"
                    },
                    {
                      "name": "RequestPortName",
                      "type": "string",
                      "description": "The named port of the backend service"
                    },
                    {
                      "name": "RequestProtocol",
                      "type": "string",
                      "description": "The protocol used"
                    },
                    {
                      "name": "RequestSessionAffinity",
                      "type": "string",
                      "description": "Affinity setting used to keep sessions on the same backend"
                    },
                    {
                      "name": "RequestTimeoutSec",
                      "type": "string",
                      "description": "Timeout value (in seconds) for the backend service"
                    },
                    {
                      "name": "RequestBackends",
                      "type": "string",
                      "description": "Configuration for backend groups"
                    },
                    {
                      "name": "RequestCDNPolicySignedUrlCacheMaxAgeSec",
                      "type": "string",
                      "description": "Cache TTL for signed URLs in seconds"
                    },
                    {
                      "name": "RequestFingerprint",
                      "type": "string",
                      "description": "Fingerprint of the request configuration, used for optimistic locking"
                    },
                    {
                      "name": "RequestCDNPolicyCacheMode",
                      "type": "string",
                      "description": "Cache mode setting"
                    },
                    {
                      "name": "RequestCDNPolicyClientTtl",
                      "type": "string",
                      "description": "Time-to-live set on responses for clients"
                    },
                    {
                      "name": "RequestCDNPolicyDefaultTtl",
                      "type": "string",
                      "description": "Default TTL applied when no caching headers are set"
                    },
                    {
                      "name": "RequestCDNPolicyMaxTtl",
                      "type": "string",
                      "description": "Maximum allowed TTL for cached responses"
                    },
                    {
                      "name": "RequestCDNPolicyNegativeCaching",
                      "type": "boolean",
                      "description": "Boolean indicating if negative caching is enabled"
                    },
                    {
                      "name": "RequestCDNPolicyServeWhileStale",
                      "type": "string",
                      "description": "Duration responses are served while stale"
                    },
                    {
                      "name": "RequestCDNPolicyCacheKeyPolicyIncludeHost",
                      "type": "boolean",
                      "description": "Whether the host is included in the cache key"
                    },
                    {
                      "name": "RequestCDNPolicyCacheKeyPolicyIncludeProtocol",
                      "type": "boolean",
                      "description": "Whether protocol is included in the cache key"
                    },
                    {
                      "name": "RequestCDNPolicyCacheKeyPolicyIncludeQueryString",
                      "type": "boolean",
                      "description": "Whether the query string is included in the cache key"
                    },
                    {
                      "name": "RequestConnectionDrainingTimeoutSec",
                      "type": "string",
                      "description": "Time in seconds for draining connections during backend removal"
                    },
                    {
                      "name": "RequestHealthChecks",
                      "type": "string",
                      "description": "List of health check resources attached to the backend service"
                    },
                    {
                      "name": "RequestLogConfigEnable",
                      "type": "boolean",
                      "description": "Boolean to enable request logging"
                    },
                    {
                      "name": "RequestLogConfigSampleRate",
                      "type": "string",
                      "description": "Sampling rate for log entries when logging is enabled"
                    },
                    {
                      "name": "RequestMetadataCallerIP",
                      "type": "string",
                      "description": "IP address of the request initiator"
                    },
                    {
                      "name": "RequestMetadataCallerSuppliedUserAgent",
                      "type": "string",
                      "description": "User agent string of the request initiator"
                    },
                    {
                      "name": "RequestMetadataDestinationAttributes",
                      "type": "string",
                      "description": "Attributes of the destination, often empty in public APIs"
                    },
                    {
                      "name": "RequestMetadataRequestAttributesAuth",
                      "type": "string",
                      "description": "Authentication metadata for the request"
                    },
                    {
                      "name": "RequestMetadataRequestAttributesTime",
                      "type": "datetime",
                      "description": "Time when the request was initiated"
                    },
                    {
                      "name": "RequestMetadataRequestAttributesReason",
                      "type": "string",
                      "description": "Encoded reason for the request"
                    },
                    {
                      "name": "ResourceLocationCurrentLocations",
                      "type": "string",
                      "description": "Region or location associated with the resource"
                    },
                    {
                      "name": "ResponseType",
                      "type": "string",
                      "description": "Type of the response object returned"
                    },
                    {
                      "name": "ResponseID",
                      "type": "string",
                      "description": "Unique identifier for the response or operation"
                    },
                    {
                      "name": "ResponseInsertTime",
                      "type": "datetime",
                      "description": "Time when the response operation was created"
                    },
                    {
                      "name": "ResponseName",
                      "type": "string",
                      "description": "Name assigned to the long-running operation"
                    },
                    {
                      "name": "ResponseOperationType",
                      "type": "string",
                      "description": "Type of the operation performed"
                    },
                    {
                      "name": "ResponseProgress",
                      "type": "string",
                      "description": "Progress of the operation in percentage"
                    },
                    {
                      "name": "ResponseSelfLink",
                      "type": "string",
                      "description": "URI of the operation"
                    },
                    {
                      "name": "ResponseSelfLinkWithID",
                      "type": "string",
                      "description": "URI of the operation with ID appended"
                    },
                    {
                      "name": "ResponseStartTime",
                      "type": "datetime",
                      "description": "Time when the operation started"
                    },
                    {
                      "name": "ResponseStatus",
                      "type": "string",
                      "description": "Status of the operation"
                    },
                    {
                      "name": "ResponseTargetID",
                      "type": "string",
                      "description": "ID of the target resource affected by the operation"
                    },
                    {
                      "name": "ResponseTargetLink",
                      "type": "string",
                      "description": "URI of the affected resource"
                    },
                    {
                      "name": "ResponseUser",
                      "type": "string",
                      "description": "User who initiated the operation."
                    },
                    {
                      "name": "OperationFirst",
                      "type": "boolean",
                      "description": "Boolean flag indicating this log entry is the first record in a long-running operation"
                    },
                    {
                      "name": "OperationLast",
                      "type": "boolean",
                      "description": "Boolean flag indicating this log entry is the final record in a long-running operation"
                    },
                    {
                      "name": "OperationID",
                      "type": "string",
                      "description": "Unique identifier for the operation"
                    },
                    {
                      "name": "OperationProducer",
                      "type": "string",
                      "description": "The service that initiated and owns the operation"
                    },
                    {
                      "name": "SpanID",
                      "type": "string",
                      "description": "Identifier of the span within a trace"
                    },
                    {
                      "name": "Trace",
                      "type": "string",
                      "description": "Identifier of the trace"
                    },
                    {
                      "name": "HttpRequestCacheLookup",
                      "type": "boolean",
                      "description": "Boolean flag indicating whether the request attempted a cache lookup before contacting the backend"
                    },
                    {
                      "name": "HttpRequestLatency",
                      "type": "string",
                      "description": "The latency or total time taken to process the request"
                    },
                    {
                      "name": "HttpRequestRemoteIP",
                      "type": "string",
                      "description": "The IP address of the client that made the request"
                    },
                    {
                      "name": "HttpRequestRequestMethod",
                      "type": "string",
                      "description": "HTTP method used for the request"
                    },
                    {
                      "name": "HttpRequestRequestSize",
                      "type": "string",
                      "description": "Size of the incoming HTTP request in bytes"
                    },
                    {
                      "name": "HttpRequestRequestUrl",
                      "type": "string",
                      "description": "Full URL that was requested"
                    },
                    {
                      "name": "HttpRequestResponseSize",
                      "type": "string",
                      "description": "Size of the HTTP response payload sent to the client, in bytes"
                    },
                    {
                      "name": "HttpRequestCacheFillBytes",
                      "type": "string",
                      "description": "Number of bytes written to the cache from this response"
                    },
                    {
                      "name": "HttpRequestCacheHit",
                      "type": "boolean",
                      "description": "Boolean flag indicating whether the response was served from cache"
                    },
                    {
                      "name": "HttpRequestServerIP",
                      "type": "string",
                      "description": "IP address of the server (or Google Front End) that processed the request"
                    },
                    {
                      "name": "HttpRequestStatus",
                      "type": "real",
                      "description": "HTTP status code returned by the server"
                    },
                    {
                      "name": "HttpRequestUserAgent",
                      "type": "string",
                      "description": "User agent string from the HTTP request header"
                    },
                    {
                      "name": "JsonPayloadType",
                      "type": "string",
                      "description": "The protobuf type URL describing the type of jsonPayload content in the log"
                    },
                    {
                      "name": "BackendTargetProjectNumber",
                      "type": "string",
                      "description": "Holds the project number where the backend target—backend service or backend bucket—has been created"
                    },
                    {
                      "name": "CacheDecision",
                      "type": "string",
                      "description": "Indicates caching decisions taken"
                    },
                    {
                      "name": "CacheID",
                      "type": "string",
                      "description": "Unique identifier for the cache entry associated with this response"
                    },
                    {
                      "name": "RemoteIP",
                      "type": "string",
                      "description": "The IP address of the client as seen by the load balancer"
                    },
                    {
                      "name": "StatusDetails",
                      "type": "string",
                      "description": "Holds a string that explains why the load balancer returned the HTTP status that it did"
                    },
                    {
                      "name": "EnforcedEdgeSecurityPolicyConfiguredAction",
                      "type": "string",
                      "description": "The configured action that was evaluated in the edge security policy"
                    },
                    {
                      "name": "EnforcedEdgeSecurityPolicyName",
                      "type": "string",
                      "description": "The name of the edge security policy that was applied to the request"
                    },
                    {
                      "name": "EnforcedEdgeSecurityPolicyOutcome",
                      "type": "string",
                      "description": "The outcome of applying the policy"
                    },
                    {
                      "name": "EnforcedEdgeSecurityPolicyPriority",
                      "type": "string",
                      "description": "The priority value of the rule within the edge security policy that matched the request"
                    },
                    {
                      "name": "OverrideResponseCode",
                      "type": "real",
                      "description": "Holds the override response code applied to the response sent to the client"
                    },
                    {
                      "name": "ErrorService",
                      "type": "string",
                      "description": "Holds the backend service that provided the custom error response"
                    },
                    {
                      "name": "ErrorBackendStatusDetails",
                      "type": "string",
                      "description": "Backend-specific error details when a request fails or is served with an error response"
                    },
                    {
                      "name": "AuthzPolicyInfoPolicies",
                      "type": "string",
                      "description": "The list of Authorization policies that match the request"
                    },
                    {
                      "name": "AuthzPolicyInfoResult",
                      "type": "string",
                      "description": "Stores information about the Authorization Policy result"
                    },
                    {
                      "name": "LoadBalancingScheme",
                      "type": "string",
                      "description": "Holds a string that describes which load balancing scheme was used to route the request"
                    },
                    {
                      "name": "ResourceLabelsBackendServiceName",
                      "type": "string",
                      "description": "The name of the backend service"
                    },
                    {
                      "name": "ResourceLabelsForwardingRuleName",
                      "type": "string",
                      "description": "The name of the forwarding rule object"
                    },
                    {
                      "name": "ResourceLabelsTargetProxyName",
                      "type": "string",
                      "description": "The name of the target proxy object referenced by the forwarding rule"
                    },
                    {
                      "name": "ResourceLabelsUrlMapName",
                      "type": "string",
                      "description": "The name of the URL map object configured to select a backend service"
                    },
                    {
                      "name": "ResourceLabelsZone",
                      "type": "string",
                      "description": "The zone in which the load balancer is running"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "contentProductId": "[concat(take(variables('_solutionId'), 50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentIdConnectorDefinition1'),'-', variables('dataConnectorCCPVersion'))))]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "version": "[variables('dataConnectorCCPVersion')]"
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentIdConnectorDefinition1'))]",
      "apiVersion": "2022-09-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectorDefinitions",
      "location": "[parameters('workspace-location')]",
      "kind": "Customizable",
      "properties": {
        "connectorUiConfig": {
          "id": "GCPCDNLogsCCPDefinition",
          "title": "Google Cloud Platform CDN",
          "publisher": "Microsoft",
          "descriptionMarkdown": "The Google Cloud Platform CDN data connector provides the capability to ingest Cloud CDN Audit logs and Cloud CDN Traffic logs into Microsoft Sentinel using the Compute Engine API. Refer the [Product overview](https://cloud.google.com/cdn/docs/overview) document for more details.",
          "graphQueriesTableName": "GCP_CDNV2_CL",
          "graphQueries": [
            {
              "metricName": "Total events received",
              "legend": "GCP CDN Logs",
              "baseQuery": "{{graphQueriesTableName}}"
            }
          ],
          "sampleQueries": [
            {
              "description": "Get Sample of GCP CDN logs",
              "query": "{{graphQueriesTableName}}\n | take 10"
            }
          ],
          "dataTypes": [
            {
              "name": "{{graphQueriesTableName}}",
              "lastDataReceivedQuery": "{{graphQueriesTableName}}\n| summarize Time = max(TimeGenerated)\n| where isnotempty(Time)"
            }
          ],
          "connectivityCriteria": [
            {
              "type": "HasDataConnectors"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "Read and Write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "action": false
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "instructions": [
                {
                  "type": "MarkdownControlEnvBased",
                  "parameters": {
                    "prodScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/GoogleCloudPlatformCDN/Data%20Connectors/README.md) for log setup and authentication setup tutorial.\n\n Find the Log set up script [**here**](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation/GCPCDNLogsSetup)\n & the Authentication set up script [**here**](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation/GCPInitialAuthenticationSetup)",
                    "govScript": "#### 1. Setup the GCP environment \n Ensure to have the following resources from the GCP Console:\n Project ID, Project Name, GCP Subscription name for the project, Workload Identity Pool ID, Workspace Identity Provider ID, and a Service Account to establish the connection.\n For more information, refer the [Connector tutorial](https://github.com/Azure/Azure-Sentinel/blob/master/Solutions/GoogleCloudPlatformCDN/Data%20Connectors/README.md) for log setup and authentication setup tutorial.\n\n Find the Log set up script [**here**](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation_gov/GCPCDNLogsSetup)\n & the Authentication set up script [**here**](https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GCP/Terraform/sentinel_resources_creation_gov/GCPInitialAuthenticationSetupGov)"
                  }
                },
                {
                  "type": "CopyableLabel",
                  "parameters": {
                    "label": "Tenant ID: A unique identifier that is used as an input in the Terraform configuration within a GCP environment.",
                    "fillWith": [
                      "TenantId"
                    ],
                    "name": "TenantId",
                    "disabled": true
                  }
                },
                {
                  "type": "Markdown",
                  "parameters": {
                    "content": "#### 2. Enable CDN logs \n In the Google Cloud Console, enable cloud logging if not enabled previously, and save the changes. Navigate to Cloud CDN section and click on Add origin to create backends as per link provided below. \n\n Reference Link: [Link to documentation](https://cloud.google.com/cdn/docs/using-cdn)"
                  }
                },
                {
                  "type": "Markdown",
                  "parameters": {
                    "content": "#### 3. Connect new collectors \n To enable GCP Cloud CDN Logs for Microsoft Sentinel, click on Add new collector button, provide the required information in the pop up and click on Connect."
                  }
                },
                {
                  "type": "GCPGrid",
                  "parameters": {}
                },
                {
                  "type": "GCPContextPane",
                  "parameters": {}
                }
              ],
              "title": "Connect GCP CDN to Microsoft Sentinel\n"
            }
          ]
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnectorDefinition1')))]",
      "apiVersion": "2022-01-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectorDefinitions', variables('_dataConnectorContentIdConnectorDefinition1'))]",
        "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorCCPVersion')]",
        "source": {
          "sourceId": "[variables('_solutionId')]",
          "name": "[variables('_solutionName')]",
          "kind": "Solution"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "tier": "Microsoft",
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "link": "https://support.microsoft.com/"
        },
        "dependencies": {
          "criteria": [
            {
              "version": "[variables('dataConnectorCCPVersion')]",
              "contentId": "[variables('_dataConnectorContentIdConnections1')]",
              "kind": "ResourcesDataConnector"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('dataConnectorTemplateNameConnections1'), variables('dataConnectorCCPVersion'))]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "contentId": "[variables('_dataConnectorContentIdConnections1')]",
        "displayName": "Google Cloud Platform CDN",
        "contentKind": "ResourcesDataConnector",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorCCPVersion')]",
          "parameters": {
            "guidValue": {
              "defaultValue": "[[newGuid()]",
              "type": "securestring"
            },
            "innerWorkspace": {
              "defaultValue": "[parameters('workspace')]",
              "type": "securestring"
            },
            "GCPServiceAccountEmail": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 4
            },
            "GCPProjectNumber": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 1
            },
            "GCPWorkloadIdentityProviderId": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 4
            },
            "GCPProjectId": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 4
            },
            "GCPSubscriptionName": {
              "defaultValue": "-NA-",
              "type": "securestring",
              "minLength": 3
            },
            "connectorDefinitionName": {
              "defaultValue": "Google Cloud Platform CDN",
              "type": "securestring",
              "minLength": 1
            },
            "workspace": {
              "defaultValue": "[parameters('workspace')]",
              "type": "securestring"
            },
            "dcrConfig": {
              "defaultValue": {
                "dataCollectionEndpoint": "data collection Endpoint",
                "dataCollectionRuleImmutableId": "data collection rule immutableId"
              },
              "type": "object"
            }
          },
          "variables": {
            "_dataConnectorContentIdConnections1": "[variables('_dataConnectorContentIdConnections1')]"
          },
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnections1')))]",
              "apiVersion": "2022-01-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentIdConnections1'))]",
                "contentId": "[variables('_dataConnectorContentIdConnections1')]",
                "kind": "ResourcesDataConnector",
                "version": "[variables('dataConnectorCCPVersion')]",
                "source": {
                  "sourceId": "[variables('_solutionId')]",
                  "name": "[variables('_solutionName')]",
                  "kind": "Solution"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            },
            {
              "name": "[[concat(parameters('innerWorkspace'),'/Microsoft.SecurityInsights/', 'GCPCDNLogs', parameters('guidValue'))]",
              "apiVersion": "2023-02-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GCP",
              "properties": {
                "connectorDefinitionName": "GCPCDNLogsCCPDefinition",
                "dataType": "GCP_CDNV2_CL",
                "dcrConfig": {
                  "streamName": "Custom-GCPCDN",
                  "dataCollectionEndpoint": "[[parameters('dcrConfig').dataCollectionEndpoint]",
                  "dataCollectionRuleImmutableId": "[[parameters('dcrConfig').dataCollectionRuleImmutableId]"
                },
                "auth": {
                  "serviceAccountEmail": "[[parameters('GCPServiceAccountEmail')]",
                  "projectNumber": "[[parameters('GCPProjectNumber')]",
                  "workloadIdentityProviderId": "[[parameters('GCPWorkloadIdentityProviderId')]"
                },
                "request": {
                  "projectId": "[[parameters('GCPProjectId')]",
                  "subscriptionNames": [
                    "[[parameters('GCPSubscriptionName')]"
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "contentProductId": "[concat(take(variables('_solutionId'), 50),'-','rdc','-', uniqueString(concat(variables('_solutionId'),'-','ResourcesDataConnector','-',variables('_dataConnectorContentIdConnections1'),'-', variables('dataConnectorCCPVersion'))))]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "version": "[variables('dataConnectorCCPVersion')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "GoogleCloudPlatformCDN",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/GoogleCloudPlatformCDN/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The Google Cloud Platform CDN solution provides the capability to ingest <a href=\"https://cloud.google.com/cdn/docs/audit-logging\">Cloud CDN Audit logs</a> and <a href=\"https://cloud.google.com/cdn/docs/logging\">Cloud CDN traffic logs</a> into Microsoft Sentinel using the GCP Compute Engine API and GCP Logging API.</p>\n<p><strong>Underlying Microsoft Technologies used:</strong></p>\n<p>This solution takes a dependency on the following technologies, and some of these dependencies either may be in <a href=\"https://azure.microsoft.com/support/legal/preview-supplemental-terms/\">Preview</a> state or might result in additional ingestion or operational costs</p>\n<ol type=\"a\">\n<li><a href=\"https://learn.microsoft.com/en-us/azure/sentinel/create-codeless-connector\">Codeless Connector Platform (CCP)</a></li>\n</ol>\n<p><strong>Data Connectors:</strong> 1</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/google_logo.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "GoogleCloudPlatformCDN",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com/"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentIdConnections1')]",
              "version": "[variables('dataConnectorCCPVersion')]"
            }
          ]
        },
        "firstPublishDate": "2025-03-07",
        "providers": [
          "Google"
        ],
        "categories": {
          "domains": [
            "Cloud Provider",
            "Networking"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
