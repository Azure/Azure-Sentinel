{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for Teams"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "Microsoft Teams",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    }
  },
  "variables": {
    "email": "support@microsoft.com",
    "_email": "[variables('email')]",
    "_solutionName": "Teams",
    "_solutionVersion": "3.0.0",
    "solutionId": "sentinel4teams.sentinelforteams",
    "_solutionId": "[variables('solutionId')]",
    "Send-Teams-adaptive-card-on-incident-creation": "Send-Teams-adaptive-card-on-incident-creation",
    "_Send-Teams-adaptive-card-on-incident-creation": "[variables('Send-Teams-adaptive-card-on-incident-creation')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "Send-Teams-adaptive-card-on-incident-creation",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1'))),variables('playbookVersion1')))]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "Advanced-SNOW-Teams-Integration": "Advanced-SNOW-Teams-Integration",
    "_Advanced-SNOW-Teams-Integration": "[variables('Advanced-SNOW-Teams-Integration')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "Advanced-SNOW-Teams-Integration",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))),variables('playbookVersion2')))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "workbookVersion1": "1.0.0",
    "workbookContentId1": "MicrorosftTeams",
    "workbookId1": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId1'))]",
    "workbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId1'))),variables('workbookVersion1')))]",
    "_workbookContentId1": "[variables('workbookContentId1')]",
    "_workbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','wb','-', uniqueString(concat(variables('_solutionId'),'-','Workbook','-',variables('_workbookContentId1'),'-', variables('workbookVersion1'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Send-Teams-adaptive-card-on-incident-creation Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "Send-Teams-adaptive-card-on-incident-creation",
              "type": "string"
            },
            "Teams Group ID": {
              "defaultValue": "",
              "type": "string"
            },
            "Teams Channel ID": {
              "defaultValue": "",
              "type": "string"
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "TeamsConnectionName": "[[concat('Teams-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['microsoftsentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Compose_-_Adaptive_card_body": {
                      "type": "Compose",
                      "inputs": {
                        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                        "actions": [
                          {
                            "data": {
                              "x": "confirm"
                            },
                            "title": "Submit response!",
                            "type": "Action.Submit"
                          }
                        ],
                        "body": [
                          {
                            "size": "Large",
                            "text": "New Microsoft Sentinel incident created",
                            "type": "TextBlock",
                            "wrap": true
                          },
                          {
                            "text": "[[Click here to view the Incident](@{triggerBody()?['object']?['properties']?['incidentUrl']})",
                            "type": "TextBlock",
                            "wrap": true
                          },
                          {
                            "facts": [
                              {
                                "size": "medium",
                                "spacing": "large",
                                "title": "Incident Title",
                                "value": "@{triggerBody()?['object']?['properties']?['title']}"
                              },
                              {
                                "spacing": "Medium",
                                "title": "Incident ID",
                                "value": "@{triggerBody()?['object']?['properties']?['incidentNumber']}"
                              },
                              {
                                "spacing": "Medium",
                                "title": "Incident Creation time (UTC)",
                                "value": "@{triggerBody()?['object']?['properties']?['createdTimeUtc']}"
                              },
                              {
                                "spacing": "Medium",
                                "title": "Severity",
                                "value": "@{triggerBody()?['object']?['properties']?['severity']}"
                              },
                              {
                                "spacing": "Medium",
                                "title": "Alert Providers",
                                "value": "@{join(triggerBody()?['object']?['properties']?['additionalData']?['alertProductNames'],'; ')}"
                              },
                              {
                                "spacing": "Medium",
                                "title": "Tactics",
                                "value": "@{join(triggerBody()?['object']?['properties']?['additionalData']?['tactics'], '; ')}"
                              },
                              {
                                "spacing": "Medium",
                                "title": "Description",
                                "value": "@{triggerBody()?['object']?['properties']?['description']}"
                              }
                            ],
                            "type": "FactSet"
                          },
                          {
                            "size": "Large",
                            "spacing": "Large",
                            "text": "Respond:",
                            "type": "TextBlock",
                            "weight": "Bolder"
                          },
                          {
                            "size": "Small",
                            "style": "Person",
                            "type": "Image",
                            "url": "https://connectoricons-prod.azureedge.net/releases/v1.0.1391/1.0.1391.2130/azuresentinel/icon.png"
                          },
                          {
                            "text": "Close Microsoft Sentinel incident?",
                            "type": "TextBlock"
                          },
                          {
                            "choices": [
                              {
                                "isSelected": true,
                                "title": "Close incident - False Positive",
                                "value": "FalsePositive - IncorrectAlertLogic"
                              },
                              {
                                "title": "Close incident - True Positive",
                                "value": "TruePositive - SuspiciousActivity"
                              },
                              {
                                "title": "Close incident - Benign Positive",
                                "value": "BenignPositive - SuspiciousButExpected"
                              },
                              {
                                "title": "Don't close the incident",
                                "value": "no"
                              }
                            ],
                            "id": "incidentStatus",
                            "style": "compact",
                            "type": "Input.ChoiceSet",
                            "value": "no"
                          },
                          {
                            "text": "Change Microsoft Sentinel incident severity?",
                            "type": "TextBlock"
                          },
                          {
                            "choices": [
                              {
                                "isSelected": true,
                                "title": "High",
                                "value": "High"
                              },
                              {
                                "title": "Medium",
                                "value": "Medium"
                              },
                              {
                                "title": "Low",
                                "value": "Low"
                              },
                              {
                                "title": "Informational",
                                "value": "Informational"
                              },
                              {
                                "title": "Don't change",
                                "value": "same"
                              }
                            ],
                            "id": "incidentSeverity",
                            "style": "compact",
                            "type": "Input.ChoiceSet",
                            "value": "same"
                          }
                        ],
                        "type": "AdaptiveCard",
                        "version": "1.4"
                      }
                    },
                    "Condition_-_Change_Severity": {
                      "actions": {
                        "Update_incident_-_update_severity": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "severity": "@{body('Post_Adaptive_Card_and_wait_for_a_response')?['data']?['incidentSeverity']}"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['microsoftsentinel']['connectionId']"
                              }
                            },
                            "method": "put",
                            "path": "/Incidents"
                          }
                        }
                      },
                      "runAfter": {
                        "Post_adaptive_card_and_wait_for_a_response": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@body('Post_Adaptive_Card_and_wait_for_a_response')?['data']?['incidentSeverity']",
                                "same"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_-_Close_incident": {
                      "actions": {
                        "Update_incident_-_close_incident": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "classification": {
                                "ClassificationAndReason": "@{body('Post_Adaptive_Card_and_wait_for_a_response')?['data']?['incidentStatus']}",
                                "ClassificationReasonText": "User choice from Send Teams adaptive card on incident creation playbook."
                              },
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "status": "Closed"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['microsoftsentinel']['connectionId']"
                              }
                            },
                            "method": "put",
                            "path": "/Incidents"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_-_Change_Severity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@body('Post_Adaptive_Card_and_wait_for_a_response')?['data']?['incidentStatus']",
                                "no"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Post_adaptive_card_and_wait_for_a_response": {
                      "runAfter": {
                        "Compose_-_Adaptive_card_body": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "@{outputs('Compose_-_Adaptive_card_body')}",
                            "recipient": {
                              "channelId": "[[parameters('Teams Channel ID')]",
                              "groupId": "[[parameters('Teams Group ID')]"
                            },
                            "updateMessage": "Thanks for your response!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "microsoftsentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "Send-Teams-adaptive-card-on-incident-creation",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Teams",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Send Teams Adaptive Card on incident creation",
            "description": "This playbook will send Microsoft Teams Adaptive Card on incident creation, with the option to change the incident's severity and/or status.",
            "prerequisites": [
              "1. Get Teams Group ID and Teams Channel ID. (instructions available on - https://www.linkedin.com/pulse/3-ways-locate-microsoft-team-id-christopher-barber-/). It is possible to choose Teams group and channel after deployment as well."
            ],
            "postDeployment": [
              "1. Assign Microsoft Sentinel Responder role to the Playbook's Managed Identity.",
              "2. Authorize Microsoft Teams connector."
            ],
            "lastUpdateTime": "2022-08-04T00:00:00Z",
            "releaseNotes": [
              {
                "version": "1.0.0",
                "title": "Send Teams Adaptive Card on incident creation",
                "notes": [
                  "Initial version"
                ]
              }
            ]
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "Playbook",
        "displayName": "Send-Teams-adaptive-card-on-incident-creation",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "SNOW-Teams-Integration Playbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "SNOW-Teams-Integration",
              "type": "string",
              "metadata": {
                "description": "Name of the primary playbook that will be called from Microsoft Sentinel"
              }
            },
            "TeamsGroupId": {
              "defaultValue": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx",
              "type": "string",
              "metadata": {
                "description": "The Teams Group ID where the channel is located."
              }
            },
            "AlertChannelId": {
              "defaultValue": "xx:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@thread.skype",
              "type": "string",
              "metadata": {
                "description": "The particular Teams channel ID where the alert should go"
              }
            },
            "InvestigationChannelId": {
              "defaultValue": "xx:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@thread.skype",
              "type": "string",
              "metadata": {
                "description": "The particular Teams channel ID where the Investigation Playbook options should go."
              }
            }
          },
          "variables": {
            "AzureSentinelConnectionName": "[[concat(parameters('PlaybookName'),'-sentinel')]",
            "SNOWConnectionName": "[[concat(parameters('PlaybookName'),'-snow')]",
            "ARMConnectionName": "[[concat(parameters('PlaybookName'),'-arm')]",
            "TeamsConnectionName": "[[concat(parameters('PlaybookName'),'-teams')]",
            "VirusTotalConnectionName": "[[concat(parameters('PlaybookName'),'-virusTotal')]",
            "connection-1": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
            "_connection-1": "[[variables('connection-1')]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/arm')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/teams')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/service-now')]",
            "_connection-4": "[[variables('connection-4')]",
            "connection-5": "[[concat(subscription().id,'/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/virustotal')]",
            "_connection-5": "[[variables('connection-5')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-1')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('ARMConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('ARMConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('SNOWConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "properties": {
                "displayName": "[[variables('SNOWConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2018-07-01-preview",
              "location": "[[variables('workspace-location-inline')]",
              "name": "[[variables('VirusTotalConnectionName')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('SNOWConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('ARMConnectionName'))]",
                "[[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('PlaybookName'),'-fn-getListOfTaggedPlaybooks')]"
              ],
              "properties": {
                "api": {
                  "id": "[[variables('_connection-5')]"
                },
                "displayName": "[[variables('VirusTotalConnectionName')]"
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[parameters('PlaybookName')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('SNOWConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('ARMConnectionName'))]",
                "[[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('PlaybookName'),'-fn-getListOfTaggedPlaybooks')]"
              ],
              "tags": {
                "LogicAppsCategory": "security",
                "hidden-SentinelTemplateName": "AdvancedSNOWTeamsIntegration",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "AlertChannelId": {
                      "defaultValue": "[[parameters('AlertChannelId')]",
                      "type": "String"
                    },
                    "InvestigationChannelId": {
                      "defaultValue": "[[parameters('InvestigationChannelId')]",
                      "type": "String"
                    },
                    "TeamsGroupId": {
                      "defaultValue": "[[parameters('TeamsGroupId')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_2']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Check_to_see_if_ServiceNow_Incident_exists": {
                      "actions": {
                        "Set_the_ServiceNow_Variable_of_existing_Record": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ServiceNowSystemID",
                            "value": "@{body('ServiceNow_-_Query_for_Sentinel_Incident_Number')?['result'][0]?['sys_id']}"
                          }
                        }
                      },
                      "runAfter": {
                        "ServiceNow_-_Query_for_Sentinel_Incident_Number": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "ServiceNow_-_Create_Record_for_Incident": {
                            "type": "ApiConnection",
                            "inputs": {
                              "body": {
                                "short_description": "@{triggerBody()?['object']?['properties']?['incidentNumber']} - @{triggerBody()?['object']?['properties']?['title']}",
                                "sys_tags": "Microsoft Sentinel"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['service-now']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/api/now/v2/table/@{encodeURIComponent('incident')}",
                              "queries": {
                                "sysparm_display_value": false,
                                "sysparm_exclude_reference_link": true
                              }
                            }
                          },
                          "Set_the_ServiceNow_Variable_of_Created_Record": {
                            "runAfter": {
                              "ServiceNow_-_Create_Record_for_Incident": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ServiceNowSystemID",
                              "value": "@body('ServiceNow_-_Create_Record_for_Incident')?['result']?['sys_id']"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(body('ServiceNow_-_Query_for_Sentinel_Incident_Number')?['result'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Compose_Teams_Incident_Alert_Card": {
                      "runAfter": {
                        "Check_to_see_if_ServiceNow_Incident_exists": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": {
                        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                        "actions": [
                          {
                            "title": "Open Incident in Sentinel",
                            "type": "Action.OpenUrl",
                            "url": "@{triggerBody()?['object']?['properties']?['incidentUrl']}"
                          },
                          {
                            "style": "destructive",
                            "title": "Open Service Now Incident",
                            "type": "Action.OpenUrl",
                            "url": "https://ven03842.service-now.com/nav_to.do?uri=/incident_list.do?sysparm_query=active=true"
                          }
                        ],
                        "body": [
                          {
                            "color": "accent",
                            "size": "large",
                            "text": "Microsoft Sentinel Alert - @{triggerBody()?['object']?['properties']?['incidentNumber']} - @{triggerBody()?['object']?['properties']?['title']} ",
                            "type": "TextBlock",
                            "wrap": true
                          },
                          {
                            "items": "@variables('adaptiveCardItems')",
                            "spacing": "padding",
                            "style": "default",
                            "type": "Container"
                          }
                        ],
                        "msTeams": {
                          "width": "full"
                        },
                        "type": "AdaptiveCard",
                        "version": "1.2"
                      }
                    },
                    "Extract_entities_and_add_to_adaptive_card": {
                      "actions": {
                        "Entities_List": {
                          "runAfter": {
                            "LogicApp_-_Get_tagged_playbooks": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": {}
                        },
                        "For_each_entity_type": {
                          "foreach": "@body('Get_list_of_entity_types')",
                          "actions": {
                            "Append_to_array_variable": {
                              "runAfter": {
                                "Build_entity_json_payload": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "adaptiveCardItems",
                                "value": {
                                  "text": "**Related @{items('For_each_entity_type')['type']}(s)**: @{length(body('Filter_list_by_each_type_name'))}",
                                  "type": "TextBlock",
                                  "wrap": true
                                }
                              }
                            },
                            "Build_entity_json_payload": {
                              "runAfter": {
                                "Filter_list_by_each_type_name": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": {
                                "kind": "@items('For_each_entity_type')['type']",
                                "list": "@body('Filter_list_by_each_type_name')"
                              }
                            },
                            "Filter_list_by_each_type_name": {
                              "type": "Query",
                              "inputs": {
                                "from": "@array(triggerBody()?['object']?['properties']?['relatedEntities'])",
                                "where": "@equals(item()['kind'], items('For_each_entity_type')['type'])"
                              }
                            },
                            "append_to_relatedEntities": {
                              "runAfter": {
                                "Append_to_array_variable": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "RelatedEntities",
                                "value": "@outputs('Build_entity_json_payload')"
                              }
                            }
                          },
                          "runAfter": {
                            "Get_list_of_entity_types": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Get_list_of_entity_types": {
                          "type": "Select",
                          "inputs": {
                            "from": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                            "select": {
                              "type": "@item()['kind']"
                            }
                          }
                        },
                        "LogicApp_-_Get_tagged_playbooks": {
                          "runAfter": {
                            "For_each_entity_type": [
                              "Succeeded"
                            ]
                          },
                          "type": "Workflow",
                          "inputs": {
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('PlaybookName'),'-fn-getListOfTaggedPlaybooks')]"
                              }
                            }
                          },
                          "description": "Gets any playbooks that are tagged with the key 'playbook' and values of (ip, user, device)"
                        }
                      },
                      "runAfter": {
                        "adaptiveCardItems": [
                          "Succeeded"
                        ]
                      },
                      "type": "Scope"
                    },
                    "Grab_selected_playbooks_from_Investigation_Response": {
                      "runAfter": {
                        "ServiceNow_-_Update_Record_with_Response_from_User": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "playbooks",
                        "value": "@split(body('Post_Actions_Required_in_Investigation_Requests_Channel')?['data']?['playbooks'],',')"
                      }
                    },
                    "Initialize_Playbook_Variable": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "playbooks",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Loop_through_each_playbook_and_run_it": {
                      "foreach": "@variables('playbooks')",
                      "actions": {
                        "Azure_Sentinel_-_Add_comment_to_related_Incident": {
                          "runAfter": {
                            "ServiceNow_-_Add_additional_comments_in_ServiceNow_Ticket": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>Playbook (@{items('Loop_through_each_playbook_and_run_it')}) executed with the following response.<br>\n<br>\n@{body('Call_the_playbook_and_pass_alert_to_playbook')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel_2']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Call_the_playbook_and_pass_alert_to_playbook": {
                          "runAfter": {
                            "Find_playbook_based_on_playbook_name_provided": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@{triggerBody()}",
                            "headers": {
                              "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "uri": "@{body('Find_playbook_based_on_playbook_name_provided')[0]?['callbackUrl']}"
                          }
                        },
                        "Find_playbook_based_on_playbook_name_provided": {
                          "type": "Query",
                          "inputs": {
                            "from": "@array(body('LogicApp_-_Get_tagged_playbooks'))",
                            "where": "@equals(item()?['name'], items('Loop_through_each_playbook_and_run_it'))"
                          }
                        },
                        "ServiceNow_-_Add_additional_comments_in_ServiceNow_Ticket": {
                          "runAfter": {
                            "Teams_-_Reply_to_Alert_Thread": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "comments": "Playbook (@{items('Loop_through_each_playbook_and_run_it')}) executed with the following response.\n@{body('Call_the_playbook_and_pass_alert_to_playbook')}\n"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['service-now']['connectionId']"
                              }
                            },
                            "method": "put",
                            "path": "/api/now/v2/table/@{encodeURIComponent('incident')}/@{encodeURIComponent(variables('ServiceNowSystemID'))}",
                            "queries": {
                              "sysparm_display_value": false,
                              "sysparm_exclude_reference_link": true
                            }
                          }
                        },
                        "Teams_-_Reply_to_Alert_Thread": {
                          "runAfter": {
                            "Call_the_playbook_and_pass_alert_to_playbook": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "body": {
                                "content": "<p>Playbook (@{items('Loop_through_each_playbook_and_run_it')}) executed with the following response.<br>\n<br>\n@{body('Call_the_playbook_and_pass_alert_to_playbook')}</p>",
                                "contentType": "html"
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/v2/beta/teams/@{encodeURIComponent(parameters('TeamsGroupId'))}/channels/@{encodeURIComponent(parameters('AlertChannelId'))}/messages/@{encodeURIComponent(body('Post_Incident_in_SOC_Alerts_Channel')?['id'])}/replies"
                          }
                        }
                      },
                      "runAfter": {
                        "Grab_selected_playbooks_from_Investigation_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Post_Actions_Required_in_Investigation_Requests_Channel": {
                      "runAfter": {
                        "Post_Incident_in_SOC_Alerts_Channel": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"msTeams\": {\n        \"width\": \"full\"\n    },\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.2\",\n    \"body\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"TextBlock\",\n\t\t\t\t\t\t\"size\": \"large\",\n\t\t\t\t\t\t\"color\": \"accent\",\n\t\t\t\t\t\t\"text\": \"**Microsoft Sentinel Alert - **@{triggerBody()?['object']?['properties']?['incidentNumber']} - @{triggerBody()?['object']?['properties']?['title']}\",\n\t\t\t\t\t\t\"wrap\": true\n\t\t\t\t\t},\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Please Select the playbooks to run for the incident:\",\n            \"weight\": \"Bolder\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Available tagged Logic App playbooks\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"color\": \"Accent\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{body('LogicApp_-_Get_tagged_playbooks')},\n            \"placeholder\": \"IP Playbooks\",\n            \"isMultiSelect\": true,\n            \"style\": \"expanded\",\n            \"id\": \"playbooks\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit\"\n        }\n    ]\n}",
                            "recipient": {
                              "channelId": "[[parameters('InvestigationChannelId')]"
                            },
                            "shouldUpdateCard": true
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/flowbot/actions/flowcontinuation/recipienttypes/channel/$subscriptions",
                        "queries": {
                          "groupId": "[[parameters('TeamsGroupId')]"
                        }
                      }
                    },
                    "Post_Incident_in_SOC_Alerts_Channel": {
                      "runAfter": {
                        "Compose_Teams_Incident_Alert_Card": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "messageBody": "@{outputs('Compose_Teams_Incident_Alert_Card')}",
                          "recipient": {
                            "channelId": "[[parameters('AlertChannelId')]",
                            "groupId": "[[parameters('TeamsGroupId')]"
                          }
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/v1.0/teams/conversation/adaptivecard/poster/@{encodeURIComponent('User')}/location/@{encodeURIComponent('Channel')}"
                      }
                    },
                    "ServiceNow_-_Query_for_Sentinel_Incident_Number": {
                      "runAfter": {
                        "Extract_entities_and_add_to_adaptive_card": [
                          "Succeeded",
                          "Failed",
                          "Skipped",
                          "TimedOut"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['service-now']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/api/now/v2/table/@{encodeURIComponent('incident')}",
                        "queries": {
                          "sysparm_display_value": false,
                          "sysparm_exclude_reference_link": true,
                          "sysparm_query": "123TEXTQUERY321=@{triggerBody()?['object']?['properties']?['incidentNumber']}^active=true"
                        }
                      }
                    },
                    "ServiceNow_-_Update_Record_with_Response_from_User": {
                      "runAfter": {
                        "Update_Incident_Thread_from_Investigation_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "comments": "\n@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['responder']?['displayName']} <@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['responder']?['userPrincipalName']}> has ran the following playbooks:\n@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['data']?['playbooks']}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['service-now']['connectionId']"
                          }
                        },
                        "method": "put",
                        "path": "/api/now/v2/table/@{encodeURIComponent('incident')}/@{encodeURIComponent(variables('ServiceNowSystemID'))}",
                        "queries": {
                          "sysparm_display_value": false,
                          "sysparm_exclude_reference_link": true
                        }
                      }
                    },
                    "Update_Incident_Thread_from_Investigation_Response": {
                      "runAfter": {
                        "Post_Actions_Required_in_Investigation_Requests_Channel": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "body": {
                            "content": "<p><strong><br>\n</strong><strong>@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['responder']?['displayName']}</strong><strong> &lt;</strong><strong>@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['responder']?['userPrincipalName']}</strong><strong>&gt;</strong> has ran the following playbooks:<br>\n@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['data']?['playbooks']}</p>",
                            "contentType": "html"
                          }
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/v2/beta/teams/@{encodeURIComponent(parameters('TeamsGroupId'))}/channels/@{encodeURIComponent(parameters('AlertChannelId'))}/messages/@{encodeURIComponent(body('Post_Incident_in_SOC_Alerts_Channel')?['id'])}/replies"
                      }
                    },
                    "Variable_-_ServiceNow_Incident_Number": {
                      "runAfter": {
                        "Initialize_Playbook_Variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ServiceNowSystemID",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "adaptiveCardItems": {
                      "runAfter": {
                        "relatedEntities": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "adaptiveCardItems",
                            "type": "array",
                            "value": [
                              {
                                "text": "**Owner:** @{triggerBody()?['object']?['properties']?['owner']?['assignedTo']}",
                                "type": "TextBlock"
                              },
                              {
                                "spacing": "none",
                                "text": "**Date:** @{triggerBody()?['object']?['properties']?['firstActivityTimeUtc']}",
                                "type": "TextBlock",
                                "wrap": true
                              },
                              {
                                "spacing": "none",
                                "text": "**ServiceNow ID#:**  @{variables('ServiceNowSystemID')}",
                                "type": "TextBlock"
                              },
                              {
                                "spacing": "none",
                                "text": "**Incident Status:** @{triggerBody()?['object']?['properties']?['status']}",
                                "type": "TextBlock"
                              },
                              {
                                "spacing": "none",
                                "text": "**Incident Severity:** @{triggerBody()?['object']?['properties']?['severity']}",
                                "type": "TextBlock"
                              },
                              {
                                "text": "**Description:** @{triggerBody()?['object']?['properties']?['description']}",
                                "type": "TextBlock",
                                "wrap": true
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "relatedEntities": {
                      "runAfter": {
                        "Variable_-_ServiceNow_Incident_Number": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "RelatedEntities",
                            "type": "array"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel_2": {
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionName": "[[variables('AzureSentinelConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "service-now": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('SNOWConnectionName'))]",
                        "connectionName": "[[variables('SNOWConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/service-now')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/teams')]"
                      }
                    }
                  },
                  "AlertChannelId": {
                    "value": "[[parameters('AlertChannelId')]"
                  },
                  "TeamsGroupId": {
                    "value": "[[parameters('TeamsGroupId')]"
                  }
                }
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[concat(parameters('PlaybookName'),'-fn-getListOfTaggedPlaybooks')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('ARMConnectionName'))]"
              ],
              "properties": {
                "state": "Disabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "tagName": {
                              "type": "string"
                            },
                            "tagValue": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "description": "This playbook receives an request to get a list of resources that match the playbook tag value and responds with JSON content"
                    }
                  },
                  "actions": {
                    "Compose": {
                      "runAfter": {
                        "For_each_subscription": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": "@variables('playbooks')"
                    },
                    "For_each_subscription": {
                      "foreach": "@body('List_subscriptions')?['value']",
                      "actions": {
                        "For_each_playbook": {
                          "foreach": "@body('List_resources_by_subscription')?['value']",
                          "actions": {
                            "Append_to_array_variable": {
                              "runAfter": {
                                "Compose_new_object_including_callback_URL": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "playbooks",
                                "value": "@outputs('Compose_new_object_including_callback_URL')"
                              }
                            },
                            "Compose_new_object_including_callback_URL": {
                              "runAfter": {
                                "Get_playbook_callback_URL": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": {
                                "callbackUrl": "@{body('Get_playbook_callback_URL')?['value']}",
                                "id": "@{body('Read_a_resource')?['id']}",
                                "name": "@{body('Read_a_resource')?['name']}",
                                "resourceGroup": "@{outputs('split_the_resource_ID')[4]}",
                                "subscription": "@{outputs('split_the_resource_ID')[2]}",
                                "tags": "@{body('Read_a_resource')?['tags']}",
                                "title": "@{items('For_each_playbook')?['name']}",
                                "type": "@{items('For_each_playbook')?['type']}",
                                "value": "@{items('For_each_playbook')?['name']}"
                              }
                            },
                            "Get_playbook_callback_URL": {
                              "runAfter": {
                                "Get_resource_trigger_name": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['arm']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/subscriptions/@{encodeURIComponent(outputs('split_the_resource_ID')[2])}/resourcegroups/@{encodeURIComponent(outputs('split_the_resource_ID')[4])}/providers/@{encodeURIComponent('Microsoft.Logic')}/@{encodeURIComponent('workflows/',outputs('split_the_resource_ID')[8])}/@{encodeURIComponent('triggers/',body('Get_resource_trigger_name')?['value'][0]['name'],'/listCallbackUrl')}",
                                "queries": {
                                  "x-ms-api-version": "2016-06-01"
                                }
                              }
                            },
                            "Get_resource_trigger_name": {
                              "runAfter": {
                                "Read_a_resource": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['arm']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/subscriptions/@{encodeURIComponent(outputs('split_the_resource_ID')[2])}/resourcegroups/@{encodeURIComponent(outputs('split_the_resource_ID')[4])}/providers/@{encodeURIComponent('Microsoft.Logic')}/@{encodeURIComponent('workflows/',outputs('split_the_resource_ID')[8],'/triggers')}",
                                "queries": {
                                  "x-ms-api-version": "2016-06-01"
                                }
                              }
                            },
                            "Read_a_resource": {
                              "runAfter": {
                                "split_the_resource_ID": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['arm']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/subscriptions/@{encodeURIComponent(outputs('split_the_resource_ID')[2])}/resourcegroups/@{encodeURIComponent(outputs('split_the_resource_ID')[4])}/providers/@{encodeURIComponent('Microsoft.Logic')}/@{encodeURIComponent('workflows/',outputs('split_the_resource_ID')[8])}",
                                "queries": {
                                  "x-ms-api-version": "2016-06-01"
                                }
                              }
                            },
                            "split_the_resource_ID": {
                              "type": "Compose",
                              "inputs": "@split(items('For_each_playbook')?['id'],'/')"
                            }
                          },
                          "runAfter": {
                            "List_resources_by_subscription": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "List_resources_by_subscription": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['arm']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/subscriptions/@{encodeURIComponent(item()?['subscriptionId'])}/resources",
                            "queries": {
                              "$filter": "tagName eq 'playbook'",
                              "x-ms-api-version": "2016-06-01"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "List_subscriptions": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "List_subscriptions": {
                      "runAfter": {
                        "Variable_-_playbooks": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['arm']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/subscriptions",
                        "queries": {
                          "x-ms-api-version": "2016-06-01"
                        }
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "Compose": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": "@variables('playbooks')",
                        "statusCode": 200
                      }
                    },
                    "Variable_-_playbooks": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "playbooks",
                            "type": "array"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "arm": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('armConnectionName'))]",
                        "connectionName": "[[variables('armConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/arm')]"
                      }
                    }
                  }
                }
              },
              "tags": {
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              }
            },
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[[concat(parameters('PlaybookName'),'-checkIPOnVirusTotal')]",
              "location": "[[variables('workspace-location-inline')]",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('VirusTotalConnectionName'))]"
              ],
              "tags": {
                "playbook": "ip",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "properties": {
                "state": "Disabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel_2']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Filter_for_IP_Entities": {
                      "runAfter": {
                        "Initialize_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@array(triggerBody()?['object']?['properties']?['relatedEntities'])",
                        "where": "@equals(item()?['Kind'], 'Ip')"
                      }
                    },
                    "For_each": {
                      "foreach": "@body('Filter_for_IP_Entities')",
                      "actions": {
                        "Append_to_string_variable": {
                          "runAfter": {
                            "Get_an_IP_report": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToStringVariable",
                          "inputs": {
                            "name": "responseMessage",
                            "value": "Virus Total scanned IP @{items('For_each')?['Address']} and came back @{body('Get_an_IP_report')?['data']?['attributes']?['total_votes']}<br>"
                          }
                        },
                        "Get_an_IP_report": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['virustotal']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/api/v3/ip_addresses/@{encodeURIComponent(items('For_each')?['properties']?['Address'])}"
                          }
                        }
                      },
                      "runAfter": {
                        "Filter_for_IP_Entities": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Initialize_variable": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "responseMessage",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "For_each": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": "@variables('responseMessage')",
                        "statusCode": 200
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "virustotal": {
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/virustotal')]",
                        "connectionName": "[[variables('VirusTotalConnectionName')]",
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('VirusTotalConnectionName'))]"
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Teams",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ],
          "metadata": {
            "title": "Advanced SNOW Teams Integration Playbook",
            "description": "This playbook showcases an example of triggering an incident within a targeted Teams channel and opening up a ticket within Service Now. Additionally The playbook will also list playbooks that can be initiated from teams using an adaptive card and callbacks that will take action upon certain entities identified in the incident.",
            "prerequisites": [
              "1. ServiceNow Instance URL, Username, and password.",
              "2. Access and authorization to enable API connectors",
              "3. Teams Group ID and Alert Channel ID where the messages are to be posted in."
            ],
            "lastUpdateTime": "2022-08-04T10:00:00Z",
            "entities": [
              "Account",
              "Url",
              "Host"
            ],
            "tags": [
              "Sync",
              "Notification",
              "Teams Response"
            ],
            "releaseNotes": [
              {
                "version": "1.0.0",
                "title": "Advanced SNOW Teams Integration Playbook",
                "notes": [
                  "Initial version"
                ]
              }
            ]
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "SNOW-Teams-Integration",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('workbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "MicrosoftTeamsWorkbook Workbook with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId1')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "This workbook is intended to identify the activities on Microrsoft Teams."
              },
              "properties": {
                "displayName": "[parameters('workbook1-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Microsoft Teams\\n---\\n\\nThis workbook is dedicated to Microsoft Teams Logs.\"},\"name\":\"text - 2\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Subscription}\"],\"parameters\":[{\"id\":\"c59abf67-3610-461e-b263-c90ebaf6e59f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscription\",\"type\":6,\"isRequired\":true,\"typeSettings\":{\"includeAll\":true,\"showDefault\":false}},{\"id\":\"99e8ff0c-1981-41b9-ba6c-dec28a2f77c0\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Workspace\",\"type\":5,\"isRequired\":true,\"query\":\"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| project id\",\"crossComponentResources\":[\"{Subscription}\"],\"typeSettings\":{\"showDefault\":false},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"9dd762f8-8594-432f-b1dc-9561e0b799c6\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":86400000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true}}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 1\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"2cfb496e-8b26-4c13-b91d-04109ee37efc\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Overview\",\"subTarget\":\"Overview\",\"preText\":\"\",\"style\":\"link\"},{\"id\":\"691ebec0-768b-4006-92b1-75660bc90398\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Admin Activity\",\"subTarget\":\"Admin Activity\",\"preText\":\"\",\"style\":\"link\"},{\"id\":\"5f1edb44-1df8-4632-a00b-79a027ae4bcd\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"External User Activity\",\"subTarget\":\"External User Activity\",\"style\":\"link\"},{\"id\":\"2658dec2-ed33-4a4d-a27a-c68b92fa6945\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Hunting\",\"subTarget\":\"Hunting\",\"style\":\"link\"}]},\"name\":\"links - 6\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Overview\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"OfficeActivity\\n| where OfficeWorkload =~ \\\"MicrosoftTeams\\\"\\n| summarize count() by  Operation, bin_at(TimeGenerated, 1h, now())\\n\",\"size\":0,\"title\":\"Operations Over Time\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"timeBrushParameterName\":\"TimeBrush\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\"},\"name\":\"query - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"OfficeActivity\\r\\n| where OfficeWorkload =~ \\\"MicrosoftTeams\\\"\\r\\n| summarize count() by Operation , bin_at(TimeGenerated, 1h, now())\\r\\n| summarize makelist(count_), sum(count_) by Operation\\r\\n| order by sum_count_\",\"size\":0,\"title\":\"Types of Operation\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"gridSettings\":{\"filter\":true},\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Operation\",\"formatter\":1},\"subtitleContent\":{\"columnMatch\":\"sum_count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"blue\"}},\"secondaryContent\":{\"columnMatch\":\"list_count_\",\"formatter\":10,\"formatOptions\":{\"palette\":\"blue\"}},\"showBorder\":false}},\"name\":\"query - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"OfficeActivity\\r\\n| where OfficeWorkload =~ \\\"MicrosoftTeams\\\"\\r\\n| summarize  OperationCount = count() , ['Last Activity Time'] = arg_max(TimeGenerated, *) by UserId, Operation\\r\\n| project OperationCount,  UserId, Operation, ['Last Activity Time']\\r\\n| order by OperationCount\",\"size\":0,\"title\":\"Last Activity based on User\",\"timeContext\":{\"durationMs\":82800000,\"endTime\":\"2022-01-28T17:33:18Z\"},\"timeContextFromParameter\":\"TimeBrush\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"UserId\",\"formatter\":5},{\"columnMatch\":\"OperationCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"}}],\"rowLimit\":10000,\"hierarchySettings\":{\"treeType\":1,\"groupBy\":[\"UserId\"],\"expandTopLevel\":true}}},\"name\":\"query - 4\"}],\"exportParameters\":true},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Overview\"},\"name\":\"tabOverview\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Admin Activity\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"OfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where Operation contains \\\"Added\\\" or Operation contains \\\"Removed\\\" or Operation contains \\\"Deleted\\\" or Operation contains \\\"Created\\\"\\r\\n| summarize count() by Operation\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\"},\"customWidth\":\"30\",\"name\":\"query - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"OfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where Operation contains \\\"Added\\\" or Operation contains \\\"Removed\\\" or Operation contains \\\"Deleted\\\" or Operation contains \\\"Created\\\"\\r\\n| project TimeGenerated, Operation, TeamName, ChannelName, UserId\\r\\n| sort by TimeGenerated desc\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"]},\"customWidth\":\"70\",\"name\":\"query - 1\"}],\"exportParameters\":true},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"Admin Activity\"},\"name\":\"Admin Activity\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"OfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where CommunicationType == \\\"Team\\\"\\r\\n| where Operation == \\\"MemberAdded\\\"\\r\\n| extend DisplayName_ = tostring(parse_json(Members)[0].DisplayName) \\r\\n| extend UPN_ = tostring(parse_json(Members)[0].UPN)\\r\\n| where UPN_ contains \\\"#EXT#\\\"\\r\\n| project TimeGenerated, [\\\"Added By\\\"] = UserId, TeamName, DisplayName_, UPN_\\r\\n| sort by TimeGenerated desc \",\"size\":0,\"title\":\"External Users Added to Team\",\"timeContext\":{\"durationMs\":86400000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"filter\":true}},\"name\":\"query - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"OfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where CommunicationType == \\\"Team\\\"\\r\\n| where Operation == \\\"MemberRemoved\\\"\\r\\n| extend DisplayName_ = tostring(parse_json(Members)[0].DisplayName) \\r\\n| extend UPN_ = tostring(parse_json(Members)[0].UPN)\\r\\n| where UPN_ contains \\\"#EXT#\\\"\\r\\n| project TimeGenerated, [\\\"Removed By\\\"] = UserId, TeamName, DisplayName_, UPN_\\r\\n| sort by TimeGenerated desc \",\"size\":0,\"title\":\"External Users Removed from the Team\",\"timeContext\":{\"durationMs\":86400000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"filter\":true}},\"name\":\"query - 0 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"OfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where UserId contains \\\"#EXT#\\\"\\r\\n| project TimeGenerated, Operation, UserId\\r\\n| sort by TimeGenerated desc\",\"size\":0,\"title\":\"External Users Activity\",\"timeContext\":{\"durationMs\":86400000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"filter\":true}},\"name\":\"query - 0 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"OfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where UserId contains \\\"#EXT#\\\"\\r\\n| summarize count() by Operation, bin(TimeGenerated, 1d)\",\"size\":0,\"title\":\"External Activity, by Day\",\"timeContext\":{\"durationMs\":86400000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"timechart\",\"gridSettings\":{\"filter\":true}},\"name\":\"query - 0 - Copy - Copy - Copy\"}]},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"External User Activity\"},\"name\":\"External User Activity\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// If you want to look at user added further than 7 days ago adjust this value \\r\\nlet time_ago = 7d; \\r\\n// If you want to change the timeframe of how quickly accounts need to be added and removed change this value \\r\\nlet time_delta = 1h; \\r\\nOfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where TimeGenerated > ago(time_ago) \\r\\n| where Operation =~ \\\"MemberAdded\\\" \\r\\n| extend UPN = tostring(parse_json(Members)[0].UPN) \\r\\n| where UPN contains \\\"#EXT#\\\"\\r\\n| project TimeAdded=TimeGenerated, Operation, UPN, UserWhoAdded = UserId, TeamName, TeamGuid\\r\\n| join ( \\r\\nOfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where TimeGenerated > ago(time_ago) \\r\\n| where Operation =~ \\\"MemberRemoved\\\" \\r\\n| extend UPN = tostring(parse_json(Members)[0].UPN) \\r\\n| where UPN contains \\\"#EXT#\\\"\\r\\n| project TimeDeleted=TimeGenerated, Operation, UPN, UserWhoDeleted = UserId, TeamName, TeamGuid) on UPN, TeamGuid \\r\\n| where TimeDeleted < (TimeAdded + time_delta) \\r\\n| project TimeAdded, TimeDeleted, UPN, UserWhoAdded, UserWhoDeleted, TeamName, TeamGuid \\r\\n// Uncomment the following line to map query entities is you plan to use this as a detection query \\r\\n| extend timestamp = TimeAdded, AccountCustomEntity = UPN \\r\\n\",\"size\":0,\"title\":\"External Users Added and Removed\",\"timeContext\":{\"durationMs\":86400000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// If you have more than 14 days worth of Teams data change this value \\r\\nlet data_date = 14d; \\r\\n// If you want to look at users further back than the last day change this value \\r\\nlet lookback_data = 1d; \\r\\nlet known_orgs = ( \\r\\nOfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where TimeGenerated > ago(data_date) \\r\\n| where Operation =~ \\\"MemberAdded\\\" or Operation =~ \\\"TeamsSessionStarted\\\" \\r\\n// Extract the correct UPN and parse our external organization domain \\r\\n| extend UPN = iif(Operation == \\\"MemberAdded\\\", tostring(parse_json(Members)[0].UPN), UserId) \\r\\n| extend Organization = tostring(split(split(UPN, \\\"_\\\")[1], \\\"#\\\")[0]) \\r\\n| where isnotempty(Organization) \\r\\n| summarize by Organization); \\r\\nOfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where TimeGenerated > ago(lookback_data) \\r\\n| where Operation =~ \\\"MemberAdded\\\" \\r\\n| extend UPN = tostring(parse_json(Members)[0].UPN) \\r\\n| extend Organization = tostring(split(split(UPN, \\\"_\\\")[1], \\\"#\\\")[0]) \\r\\n| where isnotempty(Organization) \\r\\n| where Organization !in (known_orgs) \\r\\n// Uncomment the following line to map query entities is you plan to use this as a detection query \\r\\n| extend timestamp = TimeGenerated, AccountCustomEntity = UPN \\r\\n\",\"size\":0,\"timeContext\":{\"durationMs\":86400000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\" // Adjust this value to change how many Teams should be deleted before including\\r\\n let max_delete = 3;\\r\\n // Adjust this value to change the timewindow the query runs over\\r\\n let time_window = 1d;\\r\\n let deleting_users = (\\r\\nOfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n | where TimeGenerated > ago(time_window)\\r\\n | where Operation =~ \\\"TeamDeleted\\\"\\r\\n | summarize count() by UserId\\r\\n | where count_ > max_delete\\r\\n | project UserId);\\r\\nOfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n | where TimeGenerated > ago(time_window)\\r\\n | where Operation =~ \\\"TeamDeleted\\\"\\r\\n | where UserId in (deleting_users)\\r\\n | project-away Members\\r\\n // Uncomment the following line to map query entities is you plan to use this as a detection query\\r\\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserId\",\"size\":0,\"title\":\"Multiple Teams Deleted by a single user\",\"timeContext\":{\"durationMs\":86400000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let timeFrame = 1d;\\r\\nlet logonDiff = 10m;\\r\\nSigninLogs \\r\\n  | where TimeGenerated >= ago(timeFrame) \\r\\n  | where ResultType == \\\"0\\\" \\r\\n  | where AppDisplayName startswith \\\"Microsoft Teams\\\"\\r\\n  | project SuccessLogonTime = TimeGenerated, UserPrincipalName, SuccessIPAddress = IPAddress, AppDisplayName, SuccessIPBlock = strcat(split(IPAddress, \\\".\\\")[0], \\\".\\\", split(IPAddress, \\\".\\\")[1])\\r\\n  | join kind= inner (\\r\\n      SigninLogs \\r\\n      | where TimeGenerated >= ago(timeFrame) \\r\\n      | where ResultType !in (\\\"0\\\", \\\"50140\\\") \\r\\n      | where ResultDescription !~ \\\"Other\\\"  \\r\\n      | where AppDisplayName startswith \\\"Microsoft Teams\\\"\\r\\n      | project FailedLogonTime = TimeGenerated, UserPrincipalName, FailedIPAddress = IPAddress, AppDisplayName, ResultType, ResultDescription\\r\\n  ) on UserPrincipalName, AppDisplayName \\r\\n  | where SuccessLogonTime < FailedLogonTime and FailedLogonTime - SuccessLogonTime <= logonDiff and FailedIPAddress !startswith SuccessIPBlock\\r\\n  | summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime) by UserPrincipalName, SuccessIPAddress, AppDisplayName, FailedIPAddress, ResultType, ResultDescription \\r\\n  | extend timestamp = SuccessLogonTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = SuccessIPAddress\",\"size\":0,\"title\":\"Successful logon from IP and failure from a different IP (Teams Signins)\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// Adjust this value to change how many teams a user is made owner of before detecting \\r\\nlet max_owner_count = 3; \\r\\n// Change this value to adjust how larger timeframe the query is run over. \\r\\nlet time_window = 1d; \\r\\nlet high_owner_count = (OfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\" \\r\\n| where TimeGenerated > ago(time_window) \\r\\n| where Operation =~ \\\"MemberRoleChanged\\\" \\r\\n| extend Member = tostring(parse_json(Members)[0].UPN)  \\r\\n| extend NewRole = toint(parse_json(Members)[0].Role)  \\r\\n| where NewRole == 2 \\r\\n| summarize dcount(TeamName) by Member \\r\\n| where dcount_TeamName > max_owner_count \\r\\n| project Member); \\r\\nOfficeActivity\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n| where TimeGenerated > ago(time_window) \\r\\n| where Operation =~ \\\"MemberRoleChanged\\\" \\r\\n| extend Member = tostring(parse_json(Members)[0].UPN)  \\r\\n| extend NewRole = toint(parse_json(Members)[0].Role)  \\r\\n| where NewRole == 2 \\r\\n| where Member in (high_owner_count)  \",\"size\":0,\"title\":\"User is made owner\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let suspiciousExtensions = dynamic(['exe', 'msi', 'bin', 'dll']);\\r\\nOfficeActivity \\r\\n| where RecordType =~ \\\"SharePointFileOperation\\\" \\r\\n| where UserId !~ \\\"app@sharepoint\\\"\\r\\n| where SourceRelativeUrl has \\\"Microsoft Teams Chat Files\\\" \\r\\n| where Operation =~ \\\"FileUploaded\\\" \\r\\n| project TimeGenerated, UserId, ClientIP, Site_Url, OfficeObjectId, SourceFileName, SourceFileExtension\\r\\n| where SourceFileExtension has_any(suspiciousExtensions)\",\"size\":0,\"title\":\"Sharing - Suspicious FIle Extensions\",\"timeContext\":{\"durationMs\":86400000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"//The bigger the window the better the data sample size, as we use IP prevalence, more sample data is better.\\r\\n  let timeRange = 30d;\\r\\n  //The minimum number of countries that the account has been accessed from [default: 2]\\r\\n  let minimumCountries = 2;\\r\\n  //The delta (%) between the largest in-use IP and the smallest [default: 90]\\r\\n  let deltaThreshold = 95;\\r\\n  //The maximum (%) threshold that the country appears in login data [default: 10]\\r\\n  let countryPrevalenceThreshold = 10;\\r\\n  //The time to project forward after the last login activity [default: 60min]\\r\\n  let projectedEndTime = 60min; \\r\\n  //Get Teams successful signins globally\\r\\n  let signinData =\\r\\n    SigninLogs\\r\\n    | where TimeGenerated >= ago(timeRange)\\r\\n    | where AppDisplayName has \\\"Teams\\\"\\r\\n    | where ConditionalAccessStatus =~ \\\"success\\\"\\r\\n    | extend country = tostring(LocationDetails['countryOrRegion'])\\r\\n    | where isnotempty(country) and isnotempty(IPAddress);\\r\\n  // Collect successful signins to teams\\r\\n  let loginEvents = \\r\\n    signinData\\r\\n    | summarize count(), country=any(country), make_list(TimeGenerated) by IPAddress, UserPrincipalName;\\r\\n  //Calcualte delta between logins\\r\\n  let loginDelta =\\r\\n    loginEvents\\r\\n    | summarize max(count_), min(count_) by UserPrincipalName\\r\\n    | extend delta = toreal(max_count_ - min_count_) / max_count_ * 100\\r\\n    | where delta >= deltaThreshold;\\r\\n  //Count number of countries used to sign in\\r\\n  let countryCount =\\r\\n    loginEvents\\r\\n    | summarize Countries = dcount(country) by UserPrincipalName;\\r\\n  //Join delta and sign in counts to successful logins\\r\\n  loginDelta\\r\\n  | join kind=rightouter  (\\r\\n    loginEvents\\r\\n  ) on UserPrincipalName\\r\\n  | join kind=rightouter (\\r\\n    countryCount\\r\\n  ) on UserPrincipalName\\r\\n  //Check where the record meets the minimum required countries\\r\\n  | where Countries >= minimumCountries\\r\\n  | join kind=leftouter (\\r\\n        signinData\\r\\n        | summarize count() by country\\r\\n        | join (\\r\\n            //Now get the total number of logins from any country and join it to the previous count in a single table\\r\\n            signinData\\r\\n            | summarize count() by country\\r\\n            | summarize sum(count_), make_list(country)\\r\\n            | mv-expand list_country\\r\\n            | extend country = tostring(list_country)\\r\\n        ) on country\\r\\n        | summarize by country, count_, sum_count_\\r\\n        //Now calculate each countries prevalence within login events\\r\\n        | extend prevalence = toreal(count_) / toreal(sum_count_) * 100\\r\\n        | project-away sum_count_\\r\\n        | order by prevalence\\r\\n  ) on country\\r\\n  //The % that suspicious country is prevalent in data, this can be configured, less than 10% is uncommon\\r\\n  | where prevalence < countryPrevalenceThreshold\\r\\n  | where min_count_ == count_\\r\\n  //Login start and end times from the JSON object, this is the activity window the suspicious IP was active within\\r\\n  | extend EventTimes = list_TimeGenerated\\r\\n  | extend SuspiciousIP = IPAddress\\r\\n  | project UserPrincipalName, SuspiciousIP, UserIPDelta = delta, SuspiciousLoginCountry = country, SuspiciousCountryPrevalence = prevalence, EventTimes\\r\\n  //Teams join to collect operations the user account has performed within the given time range\\r\\n  | join kind=inner( \\r\\n    OfficeActivity\\r\\n    | where OfficeWorkload == \\\"MicrosoftTeams\\\"\\r\\n    | where TimeGenerated >= ago(timeRange)\\r\\n    | where Operation in~ (\\\"TeamsAdminAction\\\", \\\"MemberAdded\\\", \\\"MemberRemoved\\\", \\\"MemberRoleChanged\\\", \\\"AppInstalled\\\", \\\"BotAddedToTeam\\\")\\r\\n    | project Operation, UserId=tolower(UserId), OperationTime=TimeGenerated\\r\\n  ) on $left.UserPrincipalName == $right.UserId\\r\\n  | mv-expand StartTime = EventTimes\\r\\n  | extend StartTime = make_datetime(StartTime)\\r\\n  //The end time is projected 60 minutes forward, in case actions took place within the last hour of the final login for the suspicious IP\\r\\n  | extend ProjectedEndTime = make_datetime(StartTime + projectedEndTime)\\r\\n  //Limit to operations carried out by the user account in the timeframe the IP was active\\r\\n  | where OperationTime between (StartTime .. ProjectedEndTime)\\r\\n  | project UserPrincipalName, SuspiciousIP, StartTime, ProjectedEndTime, OperationTime, Operation, SuspiciousLoginCountry, SuspiciousCountryPrevalence\\r\\n  //Filter on suspicious actions\\r\\n  | extend activitySummary = pack(tostring(StartTime), pack(\\\"Operation\\\",tostring(Operation), \\\"OperationTime\\\", OperationTime))\\r\\n  | summarize make_bag(activitySummary) by UserPrincipalName, SuspiciousIP, SuspiciousLoginCountry, SuspiciousCountryPrevalence\\r\\n  | extend IPCustomEntity = SuspiciousIP, AccountCustomEntity = UserPrincipalName\",\"size\":0,\"title\":\"Anomalous login followed by Teams action\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"query - 6\"}]},\"name\":\"Hunting\"}],\"fromTemplateId\":\"sentinel-MicrosoftTeamsWorkbook\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId1'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=MicrorosftTeams; logoFileName=microsoftteams.svg; description=This workbook is intended to identify the activities on Microrsoft Teams.; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=1.0.0; title=Microsoft Teams; templateRelativePath=MicrosoftTeams.json; subtitle=; provider=Microsoft Sentinel Community}.description",
                "parentId": "[variables('workbookId1')]",
                "contentId": "[variables('_workbookContentId1')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Teams",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "operator": "AND",
                  "criteria": [
                    {
                      "contentId": "OfficeActivity",
                      "kind": "DataType"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_workbookContentId1')]",
        "contentKind": "Workbook",
        "displayName": "[parameters('workbook1-name')]",
        "contentProductId": "[variables('_workbookcontentProductId1')]",
        "id": "[variables('_workbookcontentProductId1')]",
        "version": "[variables('workbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Teams",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> <em>There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</em></p>\n<p>Microsoft Sentinel solution for Teams provides Teams security logs visibility and threat protection for communication and data sharing in the Microsoft 365 Cloud via Microsoft Teams. In order to get the logs, you should connect to the Microsoft 365 connector and choose the Teams application.<a href=\"https://docs.microsoft.com/microsoftteams/teams-sentinel-guide\">Please refer to this guide</a>. By connecting Teams activity logs into Microsoft Sentinel, you can view this data in workbooks, use it to create custom alerts, and improve your investigation process.<a href=\"https://techcommunity.microsoft.com/t5/microsoft-sentinel-blog/protecting-your-teams-with-azure-sentinel/ba-p/1265761\">This article</a>focuses on collecting Teams activity logs in Microsoft Sentinel.</p>\n<p><strong>Workbooks:</strong> 1, <strong>Playbooks:</strong> 2</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/Azure_Sentinel.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Teams",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com/"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Playbook",
              "contentId": "[variables('_Send-Teams-adaptive-card-on-incident-creation')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_Advanced-SNOW-Teams-Integration')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId1')]",
              "version": "[variables('workbookVersion1')]"
            }
          ]
        },
        "firstPublishDate": "2022-02-01",
        "providers": [
          "Microsoft"
        ],
        "categories": {
          "domains": [
            "Application"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
