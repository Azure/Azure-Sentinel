{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"metadata": {
		"title": "Advanced ServiceNow Teams Integration Playbook",
		"description": "This playbook showcases an example of triggering an incident within a targeted Teams channel and opening up a ticket within Service Now. Additionally The playbook will also list playbooks that can be initiated from teams using an adaptive card and callbacks that will take action upon certain entities identified in the incident.",
		"prerequisites": [
			"1. ServiceNow Instance URL, Username, and password.",
			"2. Access and authorization to enable API connectors",
			"3. Teams Group ID and Alert Channel ID where the messages are to be posted in."
		],
		"lastUpdateTime": "2022-08-04T10:00:00.000Z",
		"entities": [
			"Account",
			"Url",
			"Host"
		],
		"tags": [
			"Sync",
			"Notification",
			"Teams Response"
		],
		"support": {
			"tier": "community"
		},
		"author": {
			"name": "Jing Nghik"
		},
		"releaseNotes": [
		{
		  "version": "1.0.0",
		  "title": "Advanced ServiceNow Teams Integration Playbook",
		  "notes": [
			"Initial version"
		  ]
		}
		]
	},
	"parameters": {
		"PlaybookName": {
			"defaultValue": "ServiceNow-Teams-Integration",
			"type": "string",
			"metadata": {
				"description": "Name of the primary playbook that will be called from Microsoft Sentinel"
			}
		},
		"TeamsGroupId": {
			"defaultValue": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx",
			"type": "string",
			"metadata": {
				"description": "The Teams Group ID where the channel is located."
			}
		},
		"AlertChannelId": {
			"defaultValue": "xx:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@thread.skype",
			"type": "string",
			"metadata": {
				"description": "The particular Teams channel ID where the alert should go"
			}
		},
		"InvestigationChannelId": {
			"defaultValue": "xx:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@thread.skype",
			"type": "string",
			"metadata": {
				"description": "The particular Teams channel ID where the Investigation Playbook options should go."
			}
		}
	},
	"variables": {		
		"AzureSentinelConnectionName": "[concat(parameters('PlaybookName'),'-sentinel')]",
		"SNOWConnectionName": "[concat(parameters('PlaybookName'),'-snow')]",
		"ARMConnectionName": "[concat(parameters('PlaybookName'),'-arm')]",
		"TeamsConnectionName": "[concat(parameters('PlaybookName'),'-teams')]",		
		"VirusTotalConnectionName": "[concat(parameters('PlaybookName'),'-virusTotal')]"
	},
	"resources": [		
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('AzureSentinelConnectionName')]",
			"location": "[resourceGroup().location]",
			"kind": "V1",
			"properties": {
				"displayName": "[variables('AzureSentinelConnectionName')]",
				"customParameterValues": {},
				"parameterValueType": "Alternative",
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('ARMConnectionName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "[variables('ARMConnectionName')]",
				"customParameterValues": {},
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/arm')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('TeamsConnectionName')]",
			"location": "[resourceGroup().location]",
			"kind": "V1",
			"properties": {
				"displayName": "[variables('TeamsConnectionName')]",
				"customParameterValues": {},
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/teams')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('SNOWConnectionName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "[variables('SNOWConnectionName')]",
				"customParameterValues": {},
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/service-now')]"
				}
			}
		},		
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2018-07-01-preview",
			"location": "[resourceGroup().location]",
			"name": "[variables('VirusTotalConnectionName')]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('SNOWConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('ARMConnectionName'))]",
				"[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('PlaybookName'),'-fn-getListOfTaggedPlaybooks')]"
			],
			"properties": {
				"api": {
					"id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/virustotal')]"
				},
				"displayName": "[variables('VirusTotalConnectionName')]"
			}
		},
		{
			"type": "Microsoft.Logic/workflows",
			"apiVersion": "2017-07-01",
			"name": "[parameters('PlaybookName')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('SNOWConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('ARMConnectionName'))]",
				"[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('PlaybookName'),'-fn-getListOfTaggedPlaybooks')]"
			],
			"tags": {
				"LogicAppsCategory": "security",
				"hidden-SentinelTemplateName": "AdvancedSNOWTeamsIntegration",
				"hidden-SentinelTemplateVersion": "1.0"
			},
			"identity": {
				"type": "SystemAssigned"
			},
			"properties": {
				"state": "Enabled",
				"definition": {
					"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {
						"$connections": {
							"defaultValue": {},
							"type": "Object"
						},
						"AlertChannelId": {
							"defaultValue": "[parameters('AlertChannelId')]",
							"type": "String"
						},
						"InvestigationChannelId": {
							"defaultValue": "[parameters('InvestigationChannelId')]",
							"type": "String"
						},
						"TeamsGroupId": {
							"defaultValue": "[parameters('TeamsGroupId')]",
							"type": "String"
						}
					},
					"triggers": {
						"Microsoft_Sentinel_incident": {
							"type": "ApiConnectionWebhook",
							"inputs": {
								"body": {
									"callback_url": "@{listCallbackUrl()}"
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azuresentinel_2']['connectionId']"
									}
								},
								"path": "/incident-creation"
							}
						}
					},
					"actions": {
						"Check_to_see_if_ServiceNow_Incident_exists": {
							"actions": {
								"Set_the_ServiceNow_Variable_of_existing_Record": {
									"runAfter": {},
									"type": "SetVariable",
									"inputs": {
										"name": "ServiceNowSystemID",
										"value": "@{body('ServiceNow_-_Query_for_Sentinel_Incident_Number')?['result'][0]?['sys_id']}"
									}
								}
							},
							"runAfter": {
								"ServiceNow_-_Query_for_Sentinel_Incident_Number": [
									"Succeeded"
								]
							},
							"else": {
								"actions": {
									"ServiceNow_-_Create_Record_for_Incident": {
										"runAfter": {},
										"type": "ApiConnection",
										"inputs": {
											"body": {
												"short_description": "@{triggerBody()?['object']?['properties']?['incidentNumber']} - @{triggerBody()?['object']?['properties']?['title']}",
												"sys_tags": "Microsoft Sentinel"
											},
											"host": {
												"connection": {
													"name": "@parameters('$connections')['service-now']['connectionId']"
												}
											},
											"method": "post",
											"path": "/api/now/v2/table/@{encodeURIComponent('incident')}",
											"queries": {
												"sysparm_display_value": false,
												"sysparm_exclude_reference_link": true
											}
										}
									},
									"Set_the_ServiceNow_Variable_of_Created_Record": {
										"runAfter": {
											"ServiceNow_-_Create_Record_for_Incident": [
												"Succeeded"
											]
										},
										"type": "SetVariable",
										"inputs": {
											"name": "ServiceNowSystemID",
											"value": "@body('ServiceNow_-_Create_Record_for_Incident')?['result']?['sys_id']"
										}
									}
								}
							},
							"expression": {
								"and": [
									{
										"greater": [
											"@length(body('ServiceNow_-_Query_for_Sentinel_Incident_Number')?['result'])",
											0
										]
									}
								]
							},
							"type": "If"
						},
						"Compose_Teams_Incident_Alert_Card": {
							"runAfter": {
								"Check_to_see_if_ServiceNow_Incident_exists": [
									"Succeeded"
								]
							},
							"type": "Compose",
							"inputs": {
								"$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
								"actions": [
									{
										"title": "Open Incident in Sentinel",
										"type": "Action.OpenUrl",
										"url": "@{triggerBody()?['object']?['properties']?['incidentUrl']}"
									},
									{
										"style": "destructive",
										"title": "Open Service Now Incident",
										"type": "Action.OpenUrl",
										"url": "https://ven03842.service-now.com/nav_to.do?uri=/incident_list.do?sysparm_query=active=true"
									}
								],
								"body": [
									{
										"color": "accent",
										"size": "large",
										"text": "Microsoft Sentinel Alert - @{triggerBody()?['object']?['properties']?['incidentNumber']} - @{triggerBody()?['object']?['properties']?['title']} ",
										"type": "TextBlock",
										"wrap": true
									},
									{
										"items": "@variables('adaptiveCardItems')",
										"spacing": "padding",
										"style": "default",
										"type": "Container"
									}
								],
								"msTeams": {
									"width": "full"
								},
								"type": "AdaptiveCard",
								"version": "1.2"
							}
						},
						"Extract_entities_and_add_to_adaptive_card": {
							"actions": {
								"Entities_List": {
									"runAfter": {
										"LogicApp_-_Get_tagged_playbooks": [
											"Succeeded"
										]
									},
									"type": "Compose",
									"inputs": {}
								},
								"For_each_entity_type": {
									"foreach": "@body('Get_list_of_entity_types')",
									"actions": {
										"Append_to_array_variable": {
											"runAfter": {
												"Build_entity_json_payload": [
													"Succeeded"
												]
											},
											"type": "AppendToArrayVariable",
											"inputs": {
												"name": "adaptiveCardItems",
												"value": {
													"text": "**Related @{items('For_each_entity_type')['type']}(s)**: @{length(body('Filter_list_by_each_type_name'))}",
													"type": "TextBlock",
													"wrap": true
												}
											}
										},
										"Build_entity_json_payload": {
											"runAfter": {
												"Filter_list_by_each_type_name": [
													"Succeeded"
												]
											},
											"type": "Compose",
											"inputs": {
												"kind": "@items('For_each_entity_type')['type']",
												"list": "@body('Filter_list_by_each_type_name')"
											}
										},
										"Filter_list_by_each_type_name": {
											"runAfter": {},
											"type": "Query",
											"inputs": {
												"from": "@array(triggerBody()?['object']?['properties']?['relatedEntities'])",
												"where": "@equals(item()['kind'], items('For_each_entity_type')['type'])"
											}
										},
										"append_to_relatedEntities": {
											"runAfter": {
												"Append_to_array_variable": [
													"Succeeded"
												]
											},
											"type": "AppendToArrayVariable",
											"inputs": {
												"name": "RelatedEntities",
												"value": "@outputs('Build_entity_json_payload')"
											}
										}
									},
									"runAfter": {
										"Get_list_of_entity_types": [
											"Succeeded"
										]
									},
									"type": "Foreach"
								},
								"Get_list_of_entity_types": {
									"runAfter": {},
									"type": "Select",
									"inputs": {
										"from": "@triggerBody()?['object']?['properties']?['relatedEntities']",
										"select": {
											"type": "@item()['kind']"
										}
									}
								},
								"LogicApp_-_Get_tagged_playbooks": {
									"runAfter": {
										"For_each_entity_type": [
											"Succeeded"
										]
									},
									"type": "Workflow",
									"inputs": {
										"host": {
											"triggerName": "manual",
											"workflow": {
												"id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',parameters('PlaybookName'),'-fn-getListOfTaggedPlaybooks')]"
											}
										}
									},
									"description": "Gets any playbooks that are tagged with the key 'playbook' and values of (ip, user, device)"
								}
							},
							"runAfter": {
								"adaptiveCardItems": [
									"Succeeded"
								]
							},
							"type": "Scope"
						},
						"Grab_selected_playbooks_from_Investigation_Response": {
							"runAfter": {
								"ServiceNow_-_Update_Record_with_Response_from_User": [
									"Succeeded"
								]
							},
							"type": "SetVariable",
							"inputs": {
								"name": "playbooks",
								"value": "@split(body('Post_Actions_Required_in_Investigation_Requests_Channel')?['data']?['playbooks'],',')"
							}
						},
						"Initialize_Playbook_Variable": {
							"runAfter": {},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "playbooks",
										"type": "array"
									}
								]
							}
						},
						"Loop_through_each_playbook_and_run_it": {
							"foreach": "@variables('playbooks')",
							"actions": {
								"Azure_Sentinel_-_Add_comment_to_related_Incident": {
									"runAfter": {
										"ServiceNow_-_Add_additional_comments_in_ServiceNow_Ticket": [
											"Succeeded"
										]
									},
									"type": "ApiConnection",
									"inputs": {
										"body": {
											"incidentArmId": "@triggerBody()?['object']?['id']",
											"message": "<p>Playbook (@{items('Loop_through_each_playbook_and_run_it')}) executed with the following response.<br>\n<br>\n@{body('Call_the_playbook_and_pass_alert_to_playbook')}</p>"
										},
										"host": {
											"connection": {
												"name": "@parameters('$connections')['azuresentinel_2']['connectionId']"
											}
										},
										"method": "post",
										"path": "/Incidents/Comment"
									}
								},
								"Call_the_playbook_and_pass_alert_to_playbook": {
									"runAfter": {
										"Find_playbook_based_on_playbook_name_provided": [
											"Succeeded"
										]
									},
									"type": "Http",
									"inputs": {
										"body": "@{triggerBody()}",
										"headers": {
											"Content-Type": "application/json"
										},
										"method": "POST",
										"uri": "@{body('Find_playbook_based_on_playbook_name_provided')[0]?['callbackUrl']}"
									}
								},
								"Find_playbook_based_on_playbook_name_provided": {
									"runAfter": {},
									"type": "Query",
									"inputs": {
										"from": "@array(body('LogicApp_-_Get_tagged_playbooks'))",
										"where": "@equals(item()?['name'], items('Loop_through_each_playbook_and_run_it'))"
									}
								},
								"ServiceNow_-_Add_additional_comments_in_ServiceNow_Ticket": {
									"runAfter": {
										"Teams_-_Reply_to_Alert_Thread": [
											"Succeeded"
										]
									},
									"type": "ApiConnection",
									"inputs": {
										"body": {
											"comments": "Playbook (@{items('Loop_through_each_playbook_and_run_it')}) executed with the following response.\n@{body('Call_the_playbook_and_pass_alert_to_playbook')}\n"
										},
										"host": {
											"connection": {
												"name": "@parameters('$connections')['service-now']['connectionId']"
											}
										},
										"method": "put",
										"path": "/api/now/v2/table/@{encodeURIComponent('incident')}/@{encodeURIComponent(variables('ServiceNowSystemID'))}",
										"queries": {
											"sysparm_display_value": false,
											"sysparm_exclude_reference_link": true
										}
									}
								},
								"Teams_-_Reply_to_Alert_Thread": {
									"runAfter": {
										"Call_the_playbook_and_pass_alert_to_playbook": [
											"Succeeded"
										]
									},
									"type": "ApiConnection",
									"inputs": {
										"body": {
											"body": {
												"content": "<p>Playbook (@{items('Loop_through_each_playbook_and_run_it')}) executed with the following response.<br>\n<br>\n@{body('Call_the_playbook_and_pass_alert_to_playbook')}</p>",
												"contentType": "html"
											}
										},
										"host": {
											"connection": {
												"name": "@parameters('$connections')['teams']['connectionId']"
											}
										},
										"method": "post",
										"path": "/v2/beta/teams/@{encodeURIComponent(parameters('TeamsGroupId'))}/channels/@{encodeURIComponent(parameters('AlertChannelId'))}/messages/@{encodeURIComponent(body('Post_Incident_in_SOC_Alerts_Channel')?['id'])}/replies"
									}
								}
							},
							"runAfter": {
								"Grab_selected_playbooks_from_Investigation_Response": [
									"Succeeded"
								]
							},
							"type": "Foreach"
						},
						"Post_Actions_Required_in_Investigation_Requests_Channel": {
							"runAfter": {
								"Post_Incident_in_SOC_Alerts_Channel": [
									"Succeeded"
								]
							},
							"type": "ApiConnectionWebhook",
							"inputs": {
								"body": {
									"body": {
										"messageBody": "{\n    \"msTeams\": {\n        \"width\": \"full\"\n    },\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.2\",\n    \"body\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"TextBlock\",\n\t\t\t\t\t\t\"size\": \"large\",\n\t\t\t\t\t\t\"color\": \"accent\",\n\t\t\t\t\t\t\"text\": \"**Microsoft Sentinel Alert - **@{triggerBody()?['object']?['properties']?['incidentNumber']} - @{triggerBody()?['object']?['properties']?['title']}\",\n\t\t\t\t\t\t\"wrap\": true\n\t\t\t\t\t},\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Please Select the playbooks to run for the incident:\",\n            \"weight\": \"Bolder\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Available tagged Logic App playbooks\",\n            \"wrap\": true,\n            \"weight\": \"Bolder\",\n            \"color\": \"Accent\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{body('LogicApp_-_Get_tagged_playbooks')},\n            \"placeholder\": \"IP Playbooks\",\n            \"isMultiSelect\": true,\n            \"style\": \"expanded\",\n            \"id\": \"playbooks\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit\"\n        }\n    ]\n}",
										"recipient": {
											"channelId": "[parameters('InvestigationChannelId')]"
										},
										"shouldUpdateCard": true
									},
									"notificationUrl": "@{listCallbackUrl()}"
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['teams']['connectionId']"
									}
								},
								"path": "/flowbot/actions/flowcontinuation/recipienttypes/channel/$subscriptions",
								"queries": {
									"groupId": "[parameters('TeamsGroupId')]"
								}
							}
						},
						"Post_Incident_in_SOC_Alerts_Channel": {
							"runAfter": {
								"Compose_Teams_Incident_Alert_Card": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"body": {
									"messageBody": "@{outputs('Compose_Teams_Incident_Alert_Card')}",
									"recipient": {
										"channelId": "[parameters('AlertChannelId')]",
										"groupId": "[parameters('TeamsGroupId')]"
									}
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['teams']['connectionId']"
									}
								},
								"method": "post",
								"path": "/v1.0/teams/conversation/adaptivecard/poster/@{encodeURIComponent('User')}/location/@{encodeURIComponent('Channel')}"
							}
						},
						"ServiceNow_-_Query_for_Sentinel_Incident_Number": {
							"runAfter": {
								"Extract_entities_and_add_to_adaptive_card": [
									"Succeeded",
									"Failed",
									"Skipped",
									"TimedOut"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['service-now']['connectionId']"
									}
								},
								"method": "get",
								"path": "/api/now/v2/table/@{encodeURIComponent('incident')}",
								"queries": {
									"sysparm_display_value": false,
									"sysparm_exclude_reference_link": true,
									"sysparm_query": "123TEXTQUERY321=@{triggerBody()?['object']?['properties']?['incidentNumber']}^active=true"
								}
							}
						},
						"ServiceNow_-_Update_Record_with_Response_from_User": {
							"runAfter": {
								"Update_Incident_Thread_from_Investigation_Response": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"body": {
									"comments": "\n@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['responder']?['displayName']} <@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['responder']?['userPrincipalName']}> has ran the following playbooks:\n@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['data']?['playbooks']}"
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['service-now']['connectionId']"
									}
								},
								"method": "put",
								"path": "/api/now/v2/table/@{encodeURIComponent('incident')}/@{encodeURIComponent(variables('ServiceNowSystemID'))}",
								"queries": {
									"sysparm_display_value": false,
									"sysparm_exclude_reference_link": true
								}
							}
						},
						"Update_Incident_Thread_from_Investigation_Response": {
							"runAfter": {
								"Post_Actions_Required_in_Investigation_Requests_Channel": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"body": {
									"body": {
										"content": "<p><strong><br>\n</strong><strong>@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['responder']?['displayName']}</strong><strong> &lt;</strong><strong>@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['responder']?['userPrincipalName']}</strong><strong>&gt;</strong> has ran the following playbooks:<br>\n@{body('Post_Actions_Required_in_Investigation_Requests_Channel')?['data']?['playbooks']}</p>",
										"contentType": "html"
									}
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['teams']['connectionId']"
									}
								},
								"method": "post",
								"path": "/v2/beta/teams/@{encodeURIComponent(parameters('TeamsGroupId'))}/channels/@{encodeURIComponent(parameters('AlertChannelId'))}/messages/@{encodeURIComponent(body('Post_Incident_in_SOC_Alerts_Channel')?['id'])}/replies"
							}
						},
						"Variable_-_ServiceNow_Incident_Number": {
							"runAfter": {
								"Initialize_Playbook_Variable": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "ServiceNowSystemID",
										"type": "string"
									}
								]
							}
						},
						"adaptiveCardItems": {
							"runAfter": {
								"relatedEntities": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "adaptiveCardItems",
										"type": "array",
										"value": [
											{
												"text": "**Owner:** @{triggerBody()?['object']?['properties']?['owner']?['assignedTo']}",
												"type": "TextBlock"
											},
											{
												"spacing": "none",
												"text": "**Date:** @{triggerBody()?['object']?['properties']?['firstActivityTimeUtc']}",
												"type": "TextBlock",
												"wrap": true
											},
											{
												"spacing": "none",
												"text": "**ServiceNow ID#:**  @{variables('ServiceNowSystemID')}",
												"type": "TextBlock"
											},
											{
												"spacing": "none",
												"text": "**Incident Status:** @{triggerBody()?['object']?['properties']?['status']}",
												"type": "TextBlock"
											},
											{
												"spacing": "none",
												"text": "**Incident Severity:** @{triggerBody()?['object']?['properties']?['severity']}",
												"type": "TextBlock"
											},
											{
												"text": "**Description:** @{triggerBody()?['object']?['properties']?['description']}",
												"type": "TextBlock",
												"wrap": true
											}
										]
									}
								]
							}
						},
						"relatedEntities": {
							"runAfter": {
								"Variable_-_ServiceNow_Incident_Number": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "RelatedEntities",
										"type": "array"
									}
								]
							}
						}
					},
					"outputs": {}
				},
				"parameters": {
					"$connections": {
						"value": {
							"azuresentinel_2": {
								"id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
								"connectionName": "[variables('AzureSentinelConnectionName')]",
								"connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
								"connectionProperties": {
									"authentication": {
										"type": "ManagedServiceIdentity"
									}
								}
							},
							"service-now": {
								"connectionId": "[resourceId('Microsoft.Web/connections', variables('SNOWConnectionName'))]",
								"connectionName": "[variables('SNOWConnectionName')]",
								"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/service-now')]"
							},
							"teams": {
								"connectionId": "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
								"connectionName": "[variables('TeamsConnectionName')]",
								"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/teams')]"
							}
						}
					},
					"AlertChannelId": {
						"value": "[parameters('AlertChannelId')]"
					},
					"TeamsGroupId": {
						"value": "[parameters('TeamsGroupId')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Logic/workflows",
			"apiVersion": "2017-07-01",
			"name": "[concat(parameters('PlaybookName'),'-fn-getListOfTaggedPlaybooks')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('ARMConnectionName'))]"
			],
			"properties": {				
				"state": "Disabled",				
				"definition": {
					"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {
						"$connections": {
							"defaultValue": {},
							"type": "Object"
						}
					},
					"triggers": {
						"manual": {
							"type": "Request",
							"kind": "Http",
							"inputs": {
								"schema": {
									"properties": {
										"tagName": {
											"type": "string"
										},
										"tagValue": {
											"type": "string"
										}
									},
									"type": "object"
								}
							},
							"description": "This playbook receives an request to get a list of resources that match the playbook tag value and responds with JSON content"
						}
					},
					"actions": {
						"Compose": {
							"runAfter": {
								"For_each_subscription": [
									"Succeeded"
								]
							},
							"type": "Compose",
							"inputs": "@variables('playbooks')"
						},
						"For_each_subscription": {
							"foreach": "@body('List_subscriptions')?['value']",
							"actions": {
								"For_each_playbook": {
									"foreach": "@body('List_resources_by_subscription')?['value']",
									"actions": {
										"Append_to_array_variable": {
											"runAfter": {
												"Compose_new_object_including_callback_URL": [
													"Succeeded"
												]
											},
											"type": "AppendToArrayVariable",
											"inputs": {
												"name": "playbooks",
												"value": "@outputs('Compose_new_object_including_callback_URL')"
											}
										},
										"Compose_new_object_including_callback_URL": {
											"runAfter": {
												"Get_playbook_callback_URL": [
													"Succeeded"
												]
											},
											"type": "Compose",
											"inputs": {
												"callbackUrl": "@{body('Get_playbook_callback_URL')?['value']}",
												"id": "@{body('Read_a_resource')?['id']}",
												"name": "@{body('Read_a_resource')?['name']}",
												"resourceGroup": "@{outputs('split_the_resource_ID')[4]}",
												"subscription": "@{outputs('split_the_resource_ID')[2]}",
												"tags": "@{body('Read_a_resource')?['tags']}",
												"title": "@{items('For_each_playbook')?['name']}",
												"type": "@{items('For_each_playbook')?['type']}",
												"value": "@{items('For_each_playbook')?['name']}"
											}
										},
										"Get_playbook_callback_URL": {
											"runAfter": {
												"Get_resource_trigger_name": [
													"Succeeded"
												]
											},
											"type": "ApiConnection",
											"inputs": {
												"host": {
													"connection": {
														"name": "@parameters('$connections')['arm']['connectionId']"
													}
												},
												"method": "post",
												"path": "/subscriptions/@{encodeURIComponent(outputs('split_the_resource_ID')[2])}/resourcegroups/@{encodeURIComponent(outputs('split_the_resource_ID')[4])}/providers/@{encodeURIComponent('Microsoft.Logic')}/@{encodeURIComponent('workflows/',outputs('split_the_resource_ID')[8])}/@{encodeURIComponent('triggers/',body('Get_resource_trigger_name')?['value'][0]['name'],'/listCallbackUrl')}",
												"queries": {
													"x-ms-api-version": "2016-06-01"
												}
											}
										},
										"Get_resource_trigger_name": {
											"runAfter": {
												"Read_a_resource": [
													"Succeeded"
												]
											},
											"type": "ApiConnection",
											"inputs": {
												"host": {
													"connection": {
														"name": "@parameters('$connections')['arm']['connectionId']"
													}
												},
												"method": "get",
												"path": "/subscriptions/@{encodeURIComponent(outputs('split_the_resource_ID')[2])}/resourcegroups/@{encodeURIComponent(outputs('split_the_resource_ID')[4])}/providers/@{encodeURIComponent('Microsoft.Logic')}/@{encodeURIComponent('workflows/',outputs('split_the_resource_ID')[8],'/triggers')}",
												"queries": {
													"x-ms-api-version": "2016-06-01"
												}
											}
										},
										"Read_a_resource": {
											"runAfter": {
												"split_the_resource_ID": [
													"Succeeded"
												]
											},
											"type": "ApiConnection",
											"inputs": {
												"host": {
													"connection": {
														"name": "@parameters('$connections')['arm']['connectionId']"
													}
												},
												"method": "get",
												"path": "/subscriptions/@{encodeURIComponent(outputs('split_the_resource_ID')[2])}/resourcegroups/@{encodeURIComponent(outputs('split_the_resource_ID')[4])}/providers/@{encodeURIComponent('Microsoft.Logic')}/@{encodeURIComponent('workflows/',outputs('split_the_resource_ID')[8])}",
												"queries": {
													"x-ms-api-version": "2016-06-01"
												}
											}
										},
										"split_the_resource_ID": {
											"runAfter": {},
											"type": "Compose",
											"inputs": "@split(items('For_each_playbook')?['id'],'/')"
										}
									},
									"runAfter": {
										"List_resources_by_subscription": [
											"Succeeded"
										]
									},
									"type": "Foreach"
								},
								"List_resources_by_subscription": {
									"runAfter": {},
									"type": "ApiConnection",
									"inputs": {
										"host": {
											"connection": {
												"name": "@parameters('$connections')['arm']['connectionId']"
											}
										},
										"method": "get",
										"path": "/subscriptions/@{encodeURIComponent(item()?['subscriptionId'])}/resources",
										"queries": {
											"$filter": "tagName eq 'playbook'",
											"x-ms-api-version": "2016-06-01"
										}
									}
								}
							},
							"runAfter": {
								"List_subscriptions": [
									"Succeeded"
								]
							},
							"type": "Foreach"
						},
						"List_subscriptions": {
							"runAfter": {
								"Variable_-_playbooks": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['arm']['connectionId']"
									}
								},
								"method": "get",
								"path": "/subscriptions",
								"queries": {
									"x-ms-api-version": "2016-06-01"
								}
							}
						},
						"Response": {
							"runAfter": {
								"Compose": [
									"Succeeded"
								]
							},
							"type": "Response",
							"kind": "Http",
							"inputs": {
								"body": "@variables('playbooks')",
								"statusCode": 200
							}
						},
						"Variable_-_playbooks": {
							"runAfter": {},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "playbooks",
										"type": "array"
									}
								]
							}
						}
					},
					"outputs": {}
				},
				"parameters": {
					"$connections": {
						"value": {
							"arm": {
								"connectionId": "[resourceId('Microsoft.Web/connections', variables('armConnectionName'))]",
								"connectionName": "[variables('armConnectionName')]",
								"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/arm')]"
							}
						}
					}
				}
			
			}
		},
		{
			"type": "Microsoft.Logic/workflows",
			"apiVersion": "2017-07-01",
			"name": "[concat(parameters('PlaybookName'),'-checkIPOnVirusTotal')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('VirusTotalConnectionName'))]"
			],
			"tags": {
				"playbook": "ip"
			},
			"properties": {
				"state": "Disabled",
				"definition": {
					"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {
						"$connections": {
							"defaultValue": {},
							"type": "Object"
						}
					},
					"triggers": {
						"Microsoft_Sentinel_incident": {
							"type": "ApiConnectionWebhook",
							"inputs": {
								"body": {
									"callback_url": "@{listCallbackUrl()}"
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azuresentinel_2']['connectionId']"
									}
								},
								"path": "/incident-creation"
							}
						}
					},
					"actions": {
						"Filter_for_IP_Entities": {
							"runAfter": {
								"Initialize_variable": [
									"Succeeded"
								]
							},
							"type": "Query",
							"inputs": {
								"from": "@array(triggerBody()?['object']?['properties']?['relatedEntities'])",
								"where": "@equals(item()?['Kind'], 'Ip')"
							}
						},
						"For_each": {
							"foreach": "@body('Filter_for_IP_Entities')",
							"actions": {
								"Append_to_string_variable": {
									"runAfter": {
										"Get_an_IP_report": [
											"Succeeded"
										]
									},
									"type": "AppendToStringVariable",
									"inputs": {
										"name": "responseMessage",
										"value": "Virus Total scanned IP @{items('For_each')?['Address']} and came back @{body('Get_an_IP_report')?['data']?['attributes']?['total_votes']}<br>"
									}
								},
								"Get_an_IP_report": {
									"runAfter": {},
									"type": "ApiConnection",
									"inputs": {
										"host": {
											"connection": {
												"name": "@parameters('$connections')['virustotal']['connectionId']"
											}
										},
										"method": "get",
										"path": "/api/v3/ip_addresses/@{encodeURIComponent(items('For_each')?['properties']?['Address'])}"
									}
								}
							},
							"runAfter": {
								"Filter_for_IP_Entities": [
									"Succeeded"
								]
							},
							"type": "Foreach"
						},
						"Initialize_variable": {
							"runAfter": {},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "responseMessage",
										"type": "string"
									}
								]
							}
						},
						"Response": {
							"runAfter": {
								"For_each": [
									"Succeeded"
								]
							},
							"type": "Response",
							"kind": "Http",
							"inputs": {
								"body": "@variables('responseMessage')",
								"statusCode": 200
							}
						}
					},
					"outputs": {}
				},
				"parameters": {
					"$connections": {
						"value": {							
							"virustotal": {
								"id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/virustotal')]",
								"connectionName": "[variables('VirusTotalConnectionName')]",
								"connectionId": "[resourceId('Microsoft.Web/connections', variables('VirusTotalConnectionName'))]"
							}							
						}
					}
				}
			}
		}
	]
}