Parser:
  Title: Network Session ASIM parser for CrowdStrike Falcon Data Replicator
  Version: '0.1'
  LastUpdated: May 31, 2023
Product:
  Name: Falcon Data Replicator
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing CrowdStrike Falcon Data Replicator logs produced by the Microsoft Sentinel AWS S3 connector to the ASIM Network Session normalized schema.
ParserName: ASimNetworkSessionCrowdStrikeFalcon
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let NetworkDirectionLookup = parse_json('{0: "Outbound",1: "Inbound", 2: "Local", 3: "Outbound"}');
    let NetworkProtocolLookup = parse_json('{0:"HOPOPT", 1:"ICMP", 2:"IGMP", 3:"GGP", 4:"IPv4", 5:"ST", 6:"TCP", 7:"CBT", 8:"EGP", 9:"IGP", 10:"BBN-RCC-MON", 11:"NVP-II", 12:"PUP", 13:"ARGUS (deprecated)", 14:"EMCON", 15:"XNET", 16:"CHAOS", 17:"UDP", 18:"MUX", 19:"DCN-MEAS", 20:"HMP", 21:"PRM", 22:"XNS-IDP", 23:"TRUNK-1", 24:"TRUNK-2", 25:"LEAF-1", 26:"LEAF-2", 27:"RDP", 28:"IRTP", 29:"ISO-TP4", 30:"NETBLT", 31:"MFE-NSP", 32:"MERIT-INP", 33:"DCCP", 34:"3PC", 35:"IDPR", 36:"XTP", 37:"DDP", 38:"IDPR-CMTP", 39:"TP++", 40:"IL", 41:"IPv6", 42:"SDRP", 43:"IPv6-Route", 44:"IPv6-Frag", 45:"IDRP", 46:"RSVP", 47:"GRE", 48:"DSR", 49:"BNA", 50:"ESP", 51:"AH", 52:"I-NLSP", 53:"SWIPE (deprecated)", 54:"NARP", 55:"MOBILE", 56:"TLSP", 57:"SKIP", 58:"IPv6-ICMP", 59:"IPv6-NoNxt", 60:"IPv6-Opts", 61:"", 62:"CFTP", 63:"", 64:"SAT-EXPAK", 65:"KRYPTOLAN", 66:"RVD", 67:"IPPC", 68:"", 69:"SAT-MON", 70:"VISA", 71:"IPCV", 72:"CPNX", 73:"CPHB", 74:"WSN", 75:"PVP", 76:"BR-SAT-MON", 77:"SUN-ND", 78:"WB-MON", 79:"WB-EXPAK", 80:"ISO-IP", 81:"VMTP", 82:"SECURE-VMTP", 83:"VINES", 84:"TTP", 84:"IPTM", 85:"NSFNET-IGP", 86:"DGP", 87:"TCF", 88:"EIGRP", 89:"OSPFIGP", 90:"Sprite-RPC", 91:"LARP", 92:"MTP", 93:"AX.25", 94:"IPIP", 95:"MICP (deprecated)", 96:"SCC-SP", 97:"ETHERIP", 98:"ENCAP", 99:"", 100:"GMTP", 101:"IFMP", 102:"PNNI", 103:"PIM", 104:"ARIS", 105:"SCPS", 106:"QNX", 107:"A/N", 108:"IPComp", 109:"SNP", 110:"Compaq-Peer", 111:"IPX-in-IP", 112:"VRRP", 113:"PGM", 114:"", 115:"L2TP", 116:"DDX", 117:"IATP", 118:"STP", 119:"SRP", 120:"UTI", 121:"SMP", 122:"SM (deprecated)", 123:"PTP", 124:"ISIS over IPv4", 125:"FIRE", 126:"CRTP", 127:"CRUDP", 128:"SSCOPMCE", 129:"IPLT", 130:"SPS", 131:"PIPE", 132:"SCTP", 133:"FC", 134:"RSVP-E2E-IGNORE", 135:"Mobility Header", 136:"UDPLite", 137:"MPLS-in-IP", 138:"manet", 139:"HIP", 140:"Shim6", 141:"WESP", 142:"ROHC", 143:"Ethernet", 253:"", 254:"", 255:"Reserved"}');
    let DvcActionLookup = parse_json('{0: "", 1: "Allow", 2: "Deny"}');
    let EventResultLookup = parse_json('{"Allow": "Success", "Deny": "Failure"}');
    let EventSeverityLookup = parse_json('{"Allow": "Informational", "Deny": "Low"}');
    let EventSubTypeLookup = parse_json('{"NetworkConnectIP4": "Start", "NetworkConnectIP6": "Start","NetworkReceiveAcceptIP4": "Start", "NetworkReceiveAcceptIP6": "Start","NetworkCloseIP6": "End", "NetworkCloseIP4": "End"}');
    source
    | extend eventDatetime = datetime_add('Millisecond', tolong(timestamp), todatetime('1970-01-01')),
             contextDatetime = datetime_add('MilliSecond', tolong(todouble(ContextTimeStamp) * 1000), todatetime('1970-01-01'))
    | extend TimeGenerated = iff(isnotempty(eventDatetime), eventDatetime, now())
    | project-rename
        DvcIpAddr = aip,
        DvcId = aid,
        EventOriginalType = name,
        EventProductVersion = ConfigBuild,
        EventOriginalUid = id,
        NetworkIcmpType = IcmpType,
        NetworkRuleName = PolicyIdentifier
    | extend 
        EventStartTime = iff(isnotempty(contextDatetime),contextDatetime,TimeGenerated),
        NetworkDirection = tostring(NetworkDirectionLookup[ConnectionDirection]),
        NetworkProtocol = tostring(NetworkProtocolLookup[Protocol]),
        FirewallDvcAction = tostring(DvcActionLookup[FirewallAction]),
        RuleDvcAction = tostring(DvcActionLookup[RuleAction]),
        RemotePortNumber = case(
                          isnotempty(RemotePort),
                          toint(RemotePort),
                          toint(split(RemoteAddressString, ":", 1)[0])
                      ),
        DvcOs = case(
                event_platform == "Win",
                "Windows", 
                event_platform == "Mac",
                "Macintosh",
                event_platform == "Lin",
                "Linux", 
                ""
            ),
        LocalPortNumber = toint(LocalPort),
        LocalIpAddr = case(
                      isnotempty(LocalAddressIP6),
                      LocalAddressIP6,
                      isnotempty(LocalAddressIP4),
                      LocalAddressIP4,
                      NegateLocalAddress
                  ),
        RemoteIpAddr = case(
                      isnotempty(RemoteAddressIP6),
                      RemoteAddressIP6,
                      isnotempty(RemoteAddressIP4),
                      RemoteAddressIP4,
                      isnotempty(RemoteAddressString),
                      tostring(split(RemoteAddressString, ":", 0)[0]),
                      NegateRemoteAddress
                  ),
        LocalNatIpAddr = case(
                        isnotempty(LocalAddressMaskIP6),
                        LocalAddressMaskIP6,
                        LocalAddressMaskIP4
                    ),
        RemoteNatIpAddr = case(
                          isnotempty(RemoteAddressMaskIP6),
                          RemoteAddressMaskIP6,
                          RemoteAddressMaskIP4
                      )
    | extend
        SrcPortNumber = iff(NetworkDirection == "Inbound" or NetworkDirection == "Local", RemotePortNumber, LocalPortNumber),    
        DstPortNumber = iff(NetworkDirection == "Inbound" or NetworkDirection == "Local", LocalPortNumber, RemotePortNumber),
        SrcIpAddr = iff(NetworkDirection == "Inbound" or NetworkDirection == "Local", RemoteIpAddr, LocalIpAddr),    
        DstIpAddr = iff(NetworkDirection == "Inbound" or NetworkDirection == "Local", LocalIpAddr, RemoteIpAddr),
        SrcNatIpAddr = iff(NetworkDirection == "Inbound" or NetworkDirection == "Local", RemoteNatIpAddr, LocalNatIpAddr),    
        DstNatIpAddr = iff(NetworkDirection == "Inbound" or NetworkDirection == "Local", LocalNatIpAddr, RemoteNatIpAddr),    
        DstInterfaceName = iff(NetworkDirection == "Inbound" or NetworkDirection == "Local", InterfaceAlias, ""),    
        SrcInterfaceName = iff(NetworkDirection == "Inbound" or NetworkDirection == "Local", "", InterfaceAlias),
        DstMacAddr = iff(event_simpleName in ("LocalIpAddressIP4", "LocalIpAddressIP6"), PhysicalAddress, ""),
        NetworkIcmpCode = toint(IcmpCode),
        EventSubType = tostring(EventSubTypeLookup[event_simpleName]),
        AdditionalFields = todynamic(AdditionalFields),
        EventEndTime = EventStartTime,
        DvcAction = iff(isnotempty(FirewallDvcAction), FirewallDvcAction, RuleDvcAction),
        DvcOriginalAction = iff(isnotempty(FirewallAction), FirewallAction, RuleAction),
        EventType = "NetworkSession",
        NetworkProtocolVersion = iff(event_simpleName contains "IP4", "IPv4", "IPv6"),
        EventCount = toint(1),
        EventSchemaVersion = "0.2.6",
        EventVendor = "CrowdStrike",
        EventProduct = "Falcon Data Replicator"
    | extend
        EventResult = iff(isnotempty(EventResultLookup[DvcAction]), tostring(EventResultLookup[DvcAction]), "Success"),
        EventSeverity = iff(isnotempty(EventSeverityLookup[DvcAction]), tostring(EventSeverityLookup[DvcAction]), "Informational")