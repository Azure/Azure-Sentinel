[
  {
    "name": "CrowdStrikeVulnerabilities",
    "apiVersion": "2023-04-01-preview",
    "type": "Microsoft.SecurityInsights/dataConnectors",
    "location": "[parameters('workspace-location')]",
    "kind": "RestApiPoller",
    "properties": {
      "connectorDefinitionName": "CrowdStrikeAPICCPDefinition",
      "dataType": "CrowdStrikeVulnerabilities",
      "auth": {
        "type": "OAuth2",
        "ClientId": "[[parameters('clientId')]",
        "ClientSecret": "[[parameters('clientSecret')]",
        "GrantType": "client_credentials",
        "TokenEndpoint": "[[concat(parameters('apiUrl'),'/oauth2/token')]",
        "tokenEndpointHeaders": {
          "Accept": "application/json",
          "Content-Type": "application/x-www-form-urlencoded"
        }
      },
      "request": {
        "httpMethod": "Get",
        "apiEndpoint": "[[concat(parameters('apiUrl'),'/spotlight/queries/vulnerabilities/v1')]",
        "queryParameters": {
          "filter": "updated_timestamp:>'{_QueryWindowStartTime}'+updated_timestamp:<='{_QueryWindowEndTime}'",
          "sort": "updated_timestamp.asc"
        },
        "headers": {
          "Content-Type": "application/json",
          "Accept": "application/json",
          "User-Agent": "Scuba"
        },
        "queryTimeFormat": "yyyy-MM-ddTHH:mm:ssZ",
        "queryWindowInMin": 5
      },
      "response": {
        "eventsJsonPaths": [
          ""
        ]
      },
      "stepInfo": {
        "stepType": "Nested",
        "nextSteps": [
          {
            "stepId": "vuln_details",
            "stepPlaceholdersParsingKql": "source | project res = parse_json(data) | project resources = res['resources'] | mvexpand resources | summarize by Url_PlaceHolder = tostring(resources)"
          }
        ]
      },
      "stepCollectorConfigs": {
        "vuln_details": {
          "shouldJoinNestedData": false,
          "request": {
            "httpMethod": "Get",
            "apiEndpoint": "[[concat(parameters('apiUrl'),'/spotlight/entities/vulnerabilities/v2?ids=$Url_PlaceHolder$')]",
            "logResponseContent": true,
            "headers": {
              "Content-Type": "application/json",
              "Accept": "application/json",
              "User-Agent": "scuba"
            }
          },
          "response": {
            "eventsJsonPaths": [
              "$.resources"
            ]
          }
        }
      },
      "dcrConfig": {
        "streamName": "Custom-Crowdstrike-VULNERABILITIES",
        "dataCollectionEndpoint": "[[parameters('dcrConfig').dataCollectionEndpoint]",
        "dataCollectionRuleImmutableId": "[[parameters('dcrConfig').dataCollectionRuleImmutableId]"
      },
      "paging": {
        "pagingType": "PersistentToken",
        "nextPageParaName": "after",
        "nextPageTokenJsonPath": "$.meta.pagination.after",
        "pageSizeParameterName": "limit",
        "pageSize": 400
      }
    }
  },
  {
    "name": "CrowdStrikeAlerts",
    "apiVersion": "2023-04-01-preview",
    "type": "Microsoft.SecurityInsights/dataConnectors",
    "kind": "RestApiPoller",
    "location": "[parameters('workspace-location')]",
    "properties": {
      "connectorDefinitionName": "CrowdStrikeAPICCPDefinition",
      "dataType": "CrowdStrikeAlerts",
      "auth": {
        "type": "OAuth2",
        "ClientId": "[[parameters('clientId')]",
        "ClientSecret": "[[parameters('clientSecret')]",
        "GrantType": "client_credentials",
        "TokenEndpoint": "[[concat(parameters('apiUrl'),'/oauth2/token')]",
        "tokenEndpointHeaders": {
          "Accept": "application/json",
          "Content-Type": "application/x-www-form-urlencoded"
        }
      },
      "request": {
        "httpMethod": "Get",
        "apiEndpoint": "[[concat(parameters('apiUrl'),'/alerts/queries/alerts/v2')]",
        "headers": {
          "Content-Type": "application/json",
          "Accept": "application/json",
          "User-Agent": "Scuba"
        },
        "queryTimeFormat": "yyyy-MM-ddTHH:mm:ssZ",
        "queryWindowInMin": 5,
        "queryParameters": {
                    "filter": "created_timestamp:>'{_QueryWindowStartTime}'+created_timestamp:<='{_QueryWindowEndTime}'",
                    "sort": "created_timestamp.asc"
                  }
      },
      "response": {
        "eventsJsonPaths": [
          ""
        ]
      },
      "stepInfo": {
        "stepType": "Nested",
        "nextSteps": [
          {
            "stepId": "alerts_details",
            "stepPlaceholdersParsingKql": "source | project res = parse_json(data) | project composite_ids = res['resources'] | mvexpand composite_ids | project Url_PlaceHolder = composite_ids"
          }
        ]
      },
      "stepCollectorConfigs": {
        "alerts_details": {
          "shouldJoinNestedData": false,
          "request": {
            "httpMethod": "Post",
            "apiEndpoint": "[[concat(parameters('apiUrl'),'/alerts/entities/alerts/v2')]",
            "queryParametersTemplate": "{'composite_ids': ['$Url_PlaceHolder$']}",
            "logResponseContent": true,
            "isPostPayloadJson": true,
            "headers": {
              "Content-Type": "application/json",
              "Accept": "application/json",
              "User-Agent": "scuba"
            }
          },
          "response": {
            "eventsJsonPaths": [
              "$.resources"
            ]
          }
        }
      },
      "dcrConfig": {
        "streamName": "Custom-Crowdstrike-ALERTS",
        "dataCollectionEndpoint": "[[parameters('dcrConfig').dataCollectionEndpoint]",
        "dataCollectionRuleImmutableId": "[[parameters('dcrConfig').dataCollectionRuleImmutableId]"
      },
      "Paging": {
        "pagingType": "Offset",
        "offsetParaName": "offset",
        "PageSizeParameterName": "limit",
        "PageSize": 400
      }
    }
  },
  {
    "name": "CrowdStrikeIncidents",
    "apiVersion": "2023-04-01-preview",
    "type": "Microsoft.SecurityInsights/dataConnectors",
    "location": "[parameters('workspace-location')]",
    "kind": "RestApiPoller",
    "properties": {
      "connectorDefinitionName": "CrowdStrikeAPICCPDefinition",
      "dataType": "CrowdStrikeIncidents",
      "auth": {
        "type": "OAuth2",
        "ClientId": "[[parameters('clientId')]",
        "ClientSecret": "[[parameters('clientSecret')]",
        "GrantType": "client_credentials",
        "TokenEndpoint": "[[concat(parameters('apiUrl'),'/oauth2/token')]",
        "tokenEndpointHeaders": {
          "Accept": "application/json",
          "Content-Type": "application/x-www-form-urlencoded"
        }
      },
      "request": {
        "httpMethod": "Get",
        "apiEndpoint": "[[concat(parameters('apiUrl'),'/incidents/queries/incidents/v1')]",
        "headers": {
          "Content-Type": "application/json",
          "Accept": "application/json",
          "User-Agent": "Scuba"
        },
        "queryTimeFormat": "yyyy-MM-ddTHH:mm:ssZ",
        "queryWindowInMin": 5,
        "queryParameters": {
          "filter": "modified_timestamp:>'{_QueryWindowStartTime}'+modified_timestamp:<='{_QueryWindowEndTime}'",
          "sort": "modified_timestamp.asc"
        }
      },
      "response": {
        "eventsJsonPaths": [
          ""
        ]
      },
      "stepInfo": {
        "stepType": "Nested",
        "nextSteps": [
          {
            "stepId": "incidents_details",
            "stepPlaceholdersParsingKql": "source | project res = parse_json(data) | project resources = res['resources'] | mvexpand resources | project Url_PlaceHolder = resources"
          }
        ]
      },
      "stepCollectorConfigs": {
        "incidents_details": {
          "shouldJoinNestedData": false,
          "request": {
            "httpMethod": "Post",
            "apiEndpoint": "[[concat(parameters('apiUrl'),'/incidents/entities/incidents/GET/v1')]",
            "queryParametersTemplate": "{'ids': ['$Url_PlaceHolder$']}",
            "logResponseContent": true,
            "isPostPayloadJson": true,
            "headers": {
              "Content-Type": "application/json",
              "Accept": "application/json",
              "User-Agent": "scuba"
            }
          },
          "response": {
            "eventsJsonPaths": [
              "$.resources"
            ]
          }
        }
      },
      "dcrConfig": {
        "streamName": "Custom-Crowdstrike-INCIDENTS",
        "dataCollectionEndpoint": "[[parameters('dcrConfig').dataCollectionEndpoint]",
        "dataCollectionRuleImmutableId": "[[parameters('dcrConfig').dataCollectionRuleImmutableId]"
      },
      "Paging": {
        "pagingType": "Offset",
        "offsetParaName": "offset",
        "PageSizeParameterName": "limit",
        "PageSize": 400
      }
    }
  },
  {
    "name": "CrowdStrikeDetections",
    "apiVersion": "2023-04-01-preview",
    "type": "Microsoft.SecurityInsights/dataConnectors",
    "location": "[parameters('workspace-location')]",
    "kind": "RestApiPoller",
    "properties": {
      "connectorDefinitionName": "CrowdStrikeAPICCPDefinition",
      "dataType": "CrowdStrikeDetections",
      "auth": {
        "type": "OAuth2",
        "ClientId": "[[parameters('clientId')]",
        "ClientSecret": "[[parameters('clientSecret')]",
        "GrantType": "client_credentials",
        "TokenEndpoint": "[[concat(parameters('apiUrl'),'/oauth2/token')]",
        "tokenEndpointHeaders": {
          "Accept": "application/json",
          "Content-Type": "application/x-www-form-urlencoded"
        }
      },
      "request": {
        "httpMethod": "Get",
        "apiEndpoint": "[[concat(parameters('apiUrl'),'/detects/queries/detects/v1')]",
        "headers": {
          "Content-Type": "application/json",
          "Accept": "application/json",
          "User-Agent": "Scuba"
        },
        "queryTimeFormat": "yyyy-MM-ddTHH:mm:ssZ",
        "queryWindowInMin": 5,
        "queryParameters": {
          "filter": "first_behavior:>'{_QueryWindowStartTime}'+first_behavior:<='{_QueryWindowEndTime}'",
          "sort": "first_behavior.asc"
        }
      },
      "response": {
        "eventsJsonPaths": [
          ""
        ]
      },
      "stepInfo": {
        "stepType": "Nested",
        "nextSteps": [
          {
            "stepId": "detections_details",
            "stepPlaceholdersParsingKql": "source | project res = parse_json(data) | project resources = res['resources'] | mvexpand resources | project Url_PlaceHolder = resources"
          }
        ]
      },
      "stepCollectorConfigs": {
        "detections_details": {
          "shouldJoinNestedData": false,
          "request": {
            "httpMethod": "Post",
            "apiEndpoint": "[[concat(parameters('apiUrl'),'/detects/entities/summaries/GET/v1')]",
            "queryParametersTemplate": "{'ids': ['$Url_PlaceHolder$']}",
            "logResponseContent": true,
            "isPostPayloadJson": true,
            "headers": {
              "Content-Type": "application/json",
              "Accept": "application/json",
              "User-Agent": "scuba"
            }
          },
          "response": {
            "eventsJsonPaths": [
              "$.resources"
            ]
          }
        }
      },
      "dcrConfig": {
        "streamName": "Custom-Crowdstrike-DETECTIONS",
        "dataCollectionEndpoint": "[[parameters('dcrConfig').dataCollectionEndpoint]",
        "dataCollectionRuleImmutableId": "[[parameters('dcrConfig').dataCollectionRuleImmutableId]"
      },
      "Paging": {
        "pagingType": "Offset",
        "offsetParaName": "offset",
        "PageSizeParameterName": "limit",
        "PageSize": 400
      }
    }
  },
  {
    "name": "CrowdStrikeHosts",
    "apiVersion": "2023-04-01-preview",
    "type": "Microsoft.SecurityInsights/dataConnectors",
    "location": "[parameters('workspace-location')]",
    "kind": "RestApiPoller",
    "properties": {
      "connectorDefinitionName": "CrowdStrikeAPICCPDefinition",
      "dataType": "CrowdStrikeHosts",
      "auth": {
        "type": "OAuth2",
        "ClientId": "[[parameters('clientId')]",
        "ClientSecret": "[[parameters('clientSecret')]",
        "GrantType": "client_credentials",
        "TokenEndpoint": "[[concat(parameters('apiUrl'),'/oauth2/token')]",
        "tokenEndpointHeaders": {
          "Accept": "application/json",
          "Content-Type": "application/x-www-form-urlencoded"
        }
      },
      "request": {
        "httpMethod": "Get",
        "apiEndpoint": "[[concat(parameters('apiUrl'),'/devices/queries/devices/v1')]",
        "headers": {
          "Content-Type": "application/json",
          "Accept": "application/json",
          "User-Agent": "Scuba"
        },
        "queryTimeFormat": "yyyy-MM-ddTHH:mm:ssZ",
        "queryWindowInMin": 5,
        "queryParameters": {
          "filter": "last_seen:>'{_QueryWindowStartTime}'+last_seen:<='{_QueryWindowEndTime}'",
          "sort": "last_seen.asc"
        }
      },
      "response": {
        "eventsJsonPaths": [
          ""
        ]
      },
      "stepInfo": {
        "stepType": "Nested",
        "nextSteps": [
          {
            "stepId": "hosts_details",
            "stepPlaceholdersParsingKql": "source | project res = parse_json(data) | project resources = res['resources'] | mvexpand resources | project Url_PlaceHolder = resources"
          }
        ]
      },
      "stepCollectorConfigs": {
        "hosts_details": {
          "shouldJoinNestedData": false,
          "request": {
            "httpMethod": "Post",
            "apiEndpoint": "[[concat(parameters('apiUrl'),'/devices/entities/devices/v2')]",
            "queryParametersTemplate": "{'ids': ['$Url_PlaceHolder$']}",
            "logResponseContent": true,
            "isPostPayloadJson": true,
            "headers": {
              "Content-Type": "application/json",
              "Accept": "application/json",
              "User-Agent": "scuba"
            }
          },
          "response": {
            "eventsJsonPaths": [
              "$.resources"
            ]
          }
        }
      },
      "dcrConfig": {
        "streamName": "Custom-Crowdstrike-HOSTS",
        "dataCollectionEndpoint": "[[parameters('dcrConfig').dataCollectionEndpoint]",
        "dataCollectionRuleImmutableId": "[[parameters('dcrConfig').dataCollectionRuleImmutableId]"
      },
      "Paging": {
        "pagingType": "Offset",
        "offsetParaName": "offset",
        "PageSizeParameterName": "limit",
        "PageSize": 400
      }
    }
  }
]