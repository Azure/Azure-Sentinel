{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for AWS Systems Manager"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "support@microsoft.com",
    "_email": "[variables('email')]",
    "_solutionName": "AWS Systems Manager",
    "_solutionVersion": "3.0.1",
    "solutionId": "azuresentinel.azure-sentinel-solution-awssystemsmanager",
    "_solutionId": "[variables('solutionId')]",
    "AWS_SSM_FunctionAppConnector": "AWS_SSM_FunctionAppConnector",
    "_AWS_SSM_FunctionAppConnector": "[variables('AWS_SSM_FunctionAppConnector')]",
    "TemplateEmptyArray": "[json('[]')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "AWS_SSM_FunctionAppConnector",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-fa-',uniquestring(variables('_playbookContentId1'))))]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','fa','-', uniqueString(concat(variables('_solutionId'),'-','AzureFunction','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "AWS-SSM-GetInstancePatches": "AWS-SSM-GetInstancePatches",
    "_AWS-SSM-GetInstancePatches": "[variables('AWS-SSM-GetInstancePatches')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "AWS-SSM-GetInstancePatches",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "blanks": "[replace('b', 'b', '')]",
    "AWS-SSM-GetInstancePatches-HostEntityTrigger": "AWS-SSM-GetInstancePatches-HostEntityTrigger",
    "_AWS-SSM-GetInstancePatches-HostEntityTrigger": "[variables('AWS-SSM-GetInstancePatches-HostEntityTrigger')]",
    "playbookVersion3": "1.0",
    "playbookContentId3": "AWS-SSM-GetInstancePatches-HostEntityTrigger",
    "_playbookContentId3": "[variables('playbookContentId3')]",
    "playbookId3": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId3'))]",
    "playbookTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId3'))))]",
    "_playbookcontentProductId3": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId3'),'-', variables('playbookVersion3'))))]",
    "AWS-SSM-GetInstancePatches-IPEntityTrigger": "AWS-SSM-GetInstancePatches-IPEntityTrigger",
    "_AWS-SSM-GetInstancePatches-IPEntityTrigger": "[variables('AWS-SSM-GetInstancePatches-IPEntityTrigger')]",
    "playbookVersion4": "1.0",
    "playbookContentId4": "AWS-SSM-GetInstancePatches-IPEntityTrigger",
    "_playbookContentId4": "[variables('playbookContentId4')]",
    "playbookId4": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId4'))]",
    "playbookTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId4'))))]",
    "_playbookcontentProductId4": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId4'),'-', variables('playbookVersion4'))))]",
    "AWS-SSM-RunAutomationRunbook": "AWS-SSM-RunAutomationRunbook",
    "_AWS-SSM-RunAutomationRunbook": "[variables('AWS-SSM-RunAutomationRunbook')]",
    "playbookVersion5": "1.0",
    "playbookContentId5": "AWS-SSM-RunAutomationRunbook",
    "_playbookContentId5": "[variables('playbookContentId5')]",
    "playbookId5": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId5'))]",
    "playbookTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId5'))))]",
    "_playbookcontentProductId5": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId5'),'-', variables('playbookVersion5'))))]",
    "AWS-SSM-StopManagedInstance": "AWS-SSM-StopManagedInstance",
    "_AWS-SSM-StopManagedInstance": "[variables('AWS-SSM-StopManagedInstance')]",
    "playbookVersion6": "1.0",
    "playbookContentId6": "AWS-SSM-StopManagedInstance",
    "_playbookContentId6": "[variables('playbookContentId6')]",
    "playbookId6": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId6'))]",
    "playbookTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId6'))))]",
    "_playbookcontentProductId6": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId6'),'-', variables('playbookVersion6'))))]",
    "AWS-SSM-StopManagedInstance-HostEntityTrigger": "AWS-SSM-StopManagedInstance-HostEntityTrigger",
    "_AWS-SSM-StopManagedInstance-HostEntityTrigger": "[variables('AWS-SSM-StopManagedInstance-HostEntityTrigger')]",
    "playbookVersion7": "1.0",
    "playbookContentId7": "AWS-SSM-StopManagedInstance-HostEntityTrigger",
    "_playbookContentId7": "[variables('playbookContentId7')]",
    "playbookId7": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId7'))]",
    "playbookTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId7'))))]",
    "_playbookcontentProductId7": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId7'),'-', variables('playbookVersion7'))))]",
    "AWS-SSM-StopManagedInstance-IPEntityTrigger": "AWS-SSM-StopManagedInstance-IPEntityTrigger",
    "_AWS-SSM-StopManagedInstance-IPEntityTrigger": "[variables('AWS-SSM-StopManagedInstance-IPEntityTrigger')]",
    "playbookVersion8": "1.0",
    "playbookContentId8": "AWS-SSM-StopManagedInstance-IPEntityTrigger",
    "_playbookContentId8": "[variables('playbookContentId8')]",
    "playbookId8": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId8'))]",
    "playbookTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId8'))))]",
    "_playbookcontentProductId8": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId8'),'-', variables('playbookVersion8'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AWS_SSM_FunctionAppConnector Playbook with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "AWSAccessKeyID": {
              "type": "string"
            },
            "AWSSecretAccessKey": {
              "type": "securestring"
            },
            "AWSRegionName": {
              "defaultValue": "us-east-1",
              "type": "string"
            },
            "FunctionAppName": {
              "defaultValue": "awsssm",
              "type": "string"
            },
            "AppInsightsWorkspaceResourceID": {
              "type": "string",
              "metadata": {
                "description": "Migrate Classic Application Insights to Log Analytic Workspace which is retiring by 29 Febraury 2024. Use 'Log Analytic Workspace-->Properties' blade having 'Resource ID' property value. This is a fully qualified resourceId which is in format '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}'"
              }
            }
          },
          "variables": {
            "functionAppName": "[[concat(parameters('FunctionAppName'), uniqueString(resourceGroup().id))]",
            "hostingPlanName": "[[variables('functionAppName')]",
            "applicationInsightsName": "[[variables('functionAppName')]",
            "storageAccountName": "[[variables('functionAppName')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "playbookContentId1": "AWS_SSM_FunctionAppConnector",
            "playbookId1": "[[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[[variables('storageAccountName')]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "allowBlobPublicAccess": false,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": "[variables('TemplateEmptyArray')]",
                  "ipRules": "[variables('TemplateEmptyArray')]",
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                }
              }
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[[variables('hostingPlanName')]",
              "location": "[[variables('workspace-location-inline')]",
              "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y"
              },
              "properties": {
                "computeMode": "Dynamic",
                "reserved": true
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[[variables('applicationInsightsName')]",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "[[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('applicationInsightsName')))]": "Resource"
              },
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[[parameters('AppInsightsWorkspaceResourceID')]"
              },
              "kind": "web"
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-09-01",
              "name": "[[variables('functionAppName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "functionapp,linux",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
              ],
              "properties": {
                "reserved": true,
                "httpsOnly": true,
                "serverFarmId": "[[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "siteConfig": {
                  "linuxFxVersion": "python|3.9",
                  "appSettings": [
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[[reference(resourceId('Microsoft.Insights/components', variables('functionAppName')), '2020-02-02').InstrumentationKey]"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-05-01').keys[0].value)]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "python"
                    },
                    {
                      "name": "WEBSITE_RUN_FROM_PACKAGE",
                      "value": "https://aka.ms/sentinel-soar-aws-ssm-functionsapp"
                    },
                    {
                      "name": "AWSAccessKeyID",
                      "value": "[[parameters('AWSAccessKeyID')]"
                    },
                    {
                      "name": "AWSSecretAccessKey",
                      "value": "[[parameters('AWSSecretAccessKey')]"
                    },
                    {
                      "name": "AWSRegionName",
                      "value": "[[parameters('AWSRegionName')]"
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[[concat(variables('workspace-name'),'/Microsoft.SecurityInsights/',concat('AzureFunction-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "AzureFunction",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "AWS Systems Manager",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "AzureFunction",
        "displayName": "AWS_SSM_FunctionAppConnector",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AWS-SSM-GetInstancePatches Playbook with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "AWS-SSM-GetInstancePatches",
              "type": "string"
            },
            "FunctionsAppName": {
              "defaultValue": "awsssm",
              "type": "string"
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "FunctionsAppName": "[[concat(parameters('FunctionsAppName'), uniqueString(resourceGroup().id))]",
            "AWSSSMFuntionsAppId": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionsAppName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)": {
                      "runAfter": {
                        "Append_to_IncidentComment_on_error": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Condition_to_check_if_any_instanceid": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{variables('IncidentComment')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Append_to_IncidentComment_on_error": {
                      "runAfter": {
                        "GetInventory": [
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "IncidentComment",
                        "value": "Issue with Playbook exeution. Check the playbook for detailed error info. "
                      }
                    },
                    "Condition_to_check_if_any_instanceid": {
                      "actions": {
                        "For_each_InstanceId": {
                          "foreach": "@variables('InstanceIdList')",
                          "actions": {
                            "Append_to_IncidentComment2": {
                              "runAfter": {
                                "Create_HTML_table": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "IncidentComment",
                                "value": "AWS EC2 <strong>@{items('For_each_InstanceId')}</strong> has these missing patches.\n@{body('Create_HTML_table')}\n(Blank output signifies, no missing patches.)"
                              }
                            },
                            "Create_HTML_table": {
                              "runAfter": {
                                "Filter_Missing_Patches": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Table",
                              "inputs": {
                                "format": "HTML",
                                "from": "@actionBody('Filter_Missing_Patches')"
                              }
                            },
                            "DescribeInstancePatches": {
                              "type": "Function",
                              "inputs": {
                                "body": {
                                  "InstanceId": "@items('For_each_InstanceId')"
                                },
                                "function": {
                                  "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/DescribeInstancePatches')]"
                                }
                              }
                            },
                            "Filter_Missing_Patches": {
                              "runAfter": {
                                "Parse_JSON_-_DescribeInstancePatches": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Query",
                              "inputs": {
                                "from": "@body('Parse_JSON_-_DescribeInstancePatches')?['Patches']",
                                "where": "@equals(item()?['State'], 'Missing')"
                              }
                            },
                            "Parse_JSON_-_DescribeInstancePatches": {
                              "runAfter": {
                                "DescribeInstancePatches": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('DescribeInstancePatches')",
                                "schema": {
                                  "properties": {
                                    "Patches": {
                                      "items": {
                                        "properties": {
                                          "CVEIds": {
                                            "type": "string"
                                          },
                                          "Classification": {
                                            "type": "string"
                                          },
                                          "InstalledTime": {
                                            "type": "string"
                                          },
                                          "KBId": {
                                            "type": "string"
                                          },
                                          "Severity": {
                                            "type": "string"
                                          },
                                          "State": {
                                            "type": "string"
                                          },
                                          "Title": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "For_each_Incident_Hostname": [
                          "Succeeded"
                        ],
                        "For_each_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Append_to_IncidentComment": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "IncidentComment",
                              "value": "No matching EC2 instance found in AWS Systems Manager.\n"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('InstanceIdList'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Entities_-_Get_IPs": {
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "For_each_AWS_Instance_get_hostname_and_private_ip": {
                      "foreach": "@body('Parse_JSON_-_GetInventory')?['Entities']",
                      "actions": {
                        "For_each_Instance_Entity": {
                          "foreach": "@items('For_each_AWS_Instance_get_hostname_and_private_ip')['Data']['AWS:InstanceInformation']['Content']",
                          "actions": {
                            "Condition_to_skip_Terminated_Instances": {
                              "actions": {
                                "Append_to_array_HostnameList": {
                                  "runAfter": {
                                    "Compose_InstanceId_Hostname_Pair": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "HostnameList",
                                    "value": "@outputs('Compose_InstanceId_Hostname_Pair')"
                                  }
                                },
                                "Append_to_array_PrivateIPList": {
                                  "runAfter": {
                                    "Compose_InstanceId_PrivateIP_Pair": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "PrivateIPList",
                                    "value": "@outputs('Compose_InstanceId_PrivateIP_Pair')"
                                  }
                                },
                                "Compose_InstanceId_Hostname_Pair": {
                                  "type": "Compose",
                                  "inputs": {
                                    "Hostname": "@items('For_each_Instance_Entity')?['ComputerName']",
                                    "InstanceId": "@items('For_each_Instance_Entity')?['InstanceId']"
                                  }
                                },
                                "Compose_InstanceId_PrivateIP_Pair": {
                                  "runAfter": {
                                    "Append_to_array_HostnameList": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Compose",
                                  "inputs": {
                                    "InstanceId": "@items('For_each_Instance_Entity')?['InstanceId']",
                                    "PrivateIP": "@items('For_each_Instance_Entity')?['IpAddress']"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_Instance_Entity')?['InstanceStatus']",
                                        "Terminated"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_-_GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_Incident_Hostname": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "For_each_AWS_EC2_Hostname": {
                          "foreach": "@variables('HostnameList')",
                          "actions": {
                            "Condition_if_incident_Hostname_matches_AWS_EC2_hostname": {
                              "actions": {
                                "Append_to_array_-_InstanceIdList": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "InstanceIdList",
                                    "value": "@string(items('For_each_AWS_EC2_Hostname')?['InstanceId'])"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@{items('For_each_Incident_Hostname')?['hostName']}",
                                      "@{items('For_each_AWS_EC2_Hostname')?['Hostname']}"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_Instance_get_hostname_and_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_private_ip": {
                      "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                      "actions": {
                        "For_each_AWS_EC2_PrivateIP": {
                          "foreach": "@variables('PrivateIPList')",
                          "actions": {
                            "Condition_If_IP_matches_with_PrivateIP": {
                              "actions": {
                                "Append_to_array_variable_InstanceIdList": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "InstanceIdList",
                                    "value": "@string(items('For_each_AWS_EC2_PrivateIP')?['InstanceId'])"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@string(items('For_each_AWS_EC2_PrivateIP')?['PrivateIP'])",
                                      "@items('For_each_private_ip')?['address']"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_Instance_get_hostname_and_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "GetInventory": {
                      "runAfter": {
                        "Initialize_variable_-_IncidentComment": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "function": {
                          "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetInventory')]"
                        }
                      }
                    },
                    "Initialize_Array_-_HostnameList": {
                      "runAfter": {
                        "Entities_-_Get_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "HostnameList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_InstanceIdList": {
                      "runAfter": {
                        "Initialize_Array_-_PrivateIPList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "InstanceIdList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_PrivateIPList": {
                      "runAfter": {
                        "Initialize_Array_-_HostnameList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PrivateIPList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_IncidentComment": {
                      "runAfter": {
                        "Initialize_Array_-_InstanceIdList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentComment",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_-_GetInventory": {
                      "runAfter": {
                        "GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('GetInventory')",
                        "schema": {
                          "properties": {
                            "Entities": {
                              "items": {
                                "properties": {
                                  "Data": {
                                    "properties": {
                                      "AWS:InstanceInformation": {
                                        "properties": {
                                          "CaptureTime": {
                                            "type": "string"
                                          },
                                          "Content": {
                                            "items": {
                                              "properties": {
                                                "AgentType": {
                                                  "type": "string"
                                                },
                                                "AgentVersion": {
                                                  "type": "string"
                                                },
                                                "ComputerName": {
                                                  "type": "string"
                                                },
                                                "InstanceId": {
                                                  "type": "string"
                                                },
                                                "InstanceStatus": {
                                                  "type": "string"
                                                },
                                                "IpAddress": {
                                                  "type": "string"
                                                },
                                                "PlatformName": {
                                                  "type": "string"
                                                },
                                                "PlatformType": {
                                                  "type": "string"
                                                },
                                                "PlatformVersion": {
                                                  "type": "string"
                                                },
                                                "ResourceType": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "SchemaVersion": {
                                            "type": "string"
                                          },
                                          "TypeName": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "Id": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ResponseMetadata": {
                              "properties": {
                                "HTTPHeaders": {
                                  "properties": {
                                    "connection": {
                                      "type": "string"
                                    },
                                    "content-length": {
                                      "type": "string"
                                    },
                                    "content-type": {
                                      "type": "string"
                                    },
                                    "date": {
                                      "type": "string"
                                    },
                                    "server": {
                                      "type": "string"
                                    },
                                    "x-amzn-requestid": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "HTTPStatusCode": {
                                  "type": "integer"
                                },
                                "RequestId": {
                                  "type": "string"
                                },
                                "RetryAttempts": {
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "AWS-SSM-GetInstancePatches",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "AWS Systems Manager",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_AWS_SSM_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "AWS Systems Manager - Get Missing Patches for EC2 Instances",
            "description": "When an incident is created in Microsoft Sentinel, this playbook gets triggered and perform the following actions:\n 1. Get the Hostnames and Private IP addresses from incident entities.\n 2. Get the Instance IDs from AWS EC2 using the Hostnames and Private IP Addresses.\n 3. Get the missing patches for the Instance IDs.\n 4. Add the missing patches to the incident comment.",
            "prerequisites": [
              "1. Prior to the deployment of this playbook, AWS Systems Manager Custom Connector needs to be deployed under the same subscription.",
              "2. Refer to [AWS Systems Manager Logic App Custom Connector](../../CustomConnector/AWS_SSM_FunctionAppConnector/readme.md) documentation for deployment instructions."
            ],
            "postDeployment": [
              "1. Authorize each connection.",
              "2. Configure Playbook in Microsoft Sentinel Analytic Rule.",
              "3. Assign Microsoft Sentinel Responder Role to Playbook.",
              "4. Update Function App Settings with AWS Credentials.",
              "5. Check readme.md for detailed instructions."
            ],
            "lastUpdateTime": "2023-05-30T12:00:00Z",
            "entities": [
              "IP",
              "Host"
            ],
            "tags": [
              "AWS",
              "Systems Manager"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "AWS-SSM-GetInstancePatches",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AWS-SSM-GetInstancePatches-HostEntityTrigger Playbook with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion3')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "AWS-SSM-GetInstancePatches-HostEntityTrigger",
              "type": "string"
            },
            "FunctionsAppName": {
              "defaultValue": "awsssm",
              "type": "string"
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "FunctionsAppName": "[[concat(parameters('FunctionsAppName'), uniqueString(resourceGroup().id))]",
            "AWSSSMFuntionsAppId": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionsAppName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_entity": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/entity/@{encodeURIComponent('Host')}"
                      }
                    }
                  },
                  "actions": {
                    "Append_to_IncidentComment_on_error": {
                      "runAfter": {
                        "GetInventory": [
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "IncidentComment",
                        "value": "Issue with Playbook exeution. Check the playbook for detailed error info. "
                      }
                    },
                    "Condition_to_check_if_IncidentARMId_exist": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['IncidentArmID']",
                              "message": "<p>@{variables('IncidentComment')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "Append_to_IncidentComment_on_error": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Condition_to_check_if_any_instanceid": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@triggerBody()?['IncidentArmID']",
                                "@null"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_to_check_if_any_instanceid": {
                      "actions": {
                        "For_each_InstanceId": {
                          "foreach": "@variables('InstanceIdList')",
                          "actions": {
                            "Append_to_IncidentComment_on_success": {
                              "runAfter": {
                                "Create_HTML_table": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "IncidentComment",
                                "value": "AWS EC2 instance <strong>@{items('For_each_InstanceId')}</strong> with Hostname <strong>@{triggerBody()?['Entity']?['properties']?['HostName']}</strong> has these missing patches.\n@{body('Create_HTML_table')}\n(Blank output signifies, no missing patches.)"
                              }
                            },
                            "Create_HTML_table": {
                              "runAfter": {
                                "Filter_Missing_Patches": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Table",
                              "inputs": {
                                "format": "HTML",
                                "from": "@body('Filter_Missing_Patches')"
                              }
                            },
                            "DescribeInstancePatches": {
                              "type": "Function",
                              "inputs": {
                                "body": {
                                  "InstanceId": "@items('For_each_InstanceId')"
                                },
                                "function": {
                                  "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/DescribeInstancePatches')]"
                                }
                              }
                            },
                            "Filter_Missing_Patches": {
                              "runAfter": {
                                "Parse_JSON_-_DescribeInstancePatches": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Query",
                              "inputs": {
                                "from": "@body('Parse_JSON_-_DescribeInstancePatches')?['Patches']",
                                "where": "@equals(item()?['State'], 'Missing')"
                              }
                            },
                            "Parse_JSON_-_DescribeInstancePatches": {
                              "runAfter": {
                                "DescribeInstancePatches": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('DescribeInstancePatches')",
                                "schema": {
                                  "properties": {
                                    "Patches": {
                                      "items": {
                                        "properties": {
                                          "CVEIds": {
                                            "type": "string"
                                          },
                                          "Classification": {
                                            "type": "string"
                                          },
                                          "InstalledTime": {
                                            "type": "string"
                                          },
                                          "KBId": {
                                            "type": "string"
                                          },
                                          "Severity": {
                                            "type": "string"
                                          },
                                          "State": {
                                            "type": "string"
                                          },
                                          "Title": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_EC2_Hostname": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Append_to_IncidentComment": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "IncidentComment",
                              "value": "For Hostname <strong>@{triggerBody()?['Entity']?['properties']?['HostName']}</strong> no matching EC2 instance found in AWS Systems Manager.\n"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('InstanceIdList'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_each_AWS_EC2_Hostname": {
                      "foreach": "@variables('HostnameList')",
                      "actions": {
                        "Condition_if_incident_Hostname_matches_AWS_EC2_hostname": {
                          "actions": {
                            "Append_to_array_-_InstanceIdList": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "InstanceIdList",
                                "value": "@string(items('For_each_AWS_EC2_Hostname')?['InstanceId'])"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@triggerBody()?['Entity']?['properties']?['HostName']",
                                  "@{items('For_each_AWS_EC2_Hostname')?['Hostname']}"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_Instance_get_hostname_and_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_AWS_Instance_get_hostname_and_private_ip": {
                      "foreach": "@body('Parse_JSON_-_GetInventory')?['Entities']",
                      "actions": {
                        "For_each_Instance_Entity": {
                          "foreach": "@items('For_each_AWS_Instance_get_hostname_and_private_ip')['Data']['AWS:InstanceInformation']['Content']",
                          "actions": {
                            "Condition_to_skip_Terminated_Instances": {
                              "actions": {
                                "Append_to_array_HostnameList": {
                                  "runAfter": {
                                    "Compose_InstanceId_Hostname_Pair": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "HostnameList",
                                    "value": "@outputs('Compose_InstanceId_Hostname_Pair')"
                                  }
                                },
                                "Compose_InstanceId_Hostname_Pair": {
                                  "type": "Compose",
                                  "inputs": {
                                    "Hostname": "@items('For_each_Instance_Entity')?['ComputerName']",
                                    "InstanceId": "@items('For_each_Instance_Entity')?['InstanceId']"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_Instance_Entity')?['InstanceStatus']",
                                        "Terminated"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_-_GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "GetInventory": {
                      "runAfter": {
                        "Initialize_variable_-_IncidentComment": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "function": {
                          "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetInventory')]"
                        }
                      }
                    },
                    "Initialize_Array_-_HostnameList": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "HostnameList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_InstanceIdList": {
                      "runAfter": {
                        "Initialize_Array_-_PrivateIPList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "InstanceIdList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_PrivateIPList": {
                      "runAfter": {
                        "Initialize_Array_-_HostnameList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PrivateIPList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_IncidentComment": {
                      "runAfter": {
                        "Initialize_Array_-_InstanceIdList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentComment",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_-_GetInventory": {
                      "runAfter": {
                        "GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('GetInventory')",
                        "schema": {
                          "properties": {
                            "Entities": {
                              "items": {
                                "properties": {
                                  "Data": {
                                    "properties": {
                                      "AWS:InstanceInformation": {
                                        "properties": {
                                          "CaptureTime": {
                                            "type": "string"
                                          },
                                          "Content": {
                                            "items": {
                                              "properties": {
                                                "AgentType": {
                                                  "type": "string"
                                                },
                                                "AgentVersion": {
                                                  "type": "string"
                                                },
                                                "ComputerName": {
                                                  "type": "string"
                                                },
                                                "InstanceId": {
                                                  "type": "string"
                                                },
                                                "InstanceStatus": {
                                                  "type": "string"
                                                },
                                                "IpAddress": {
                                                  "type": "string"
                                                },
                                                "PlatformName": {
                                                  "type": "string"
                                                },
                                                "PlatformType": {
                                                  "type": "string"
                                                },
                                                "PlatformVersion": {
                                                  "type": "string"
                                                },
                                                "ResourceType": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "SchemaVersion": {
                                            "type": "string"
                                          },
                                          "TypeName": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "Id": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ResponseMetadata": {
                              "properties": {
                                "HTTPHeaders": {
                                  "properties": {
                                    "connection": {
                                      "type": "string"
                                    },
                                    "content-length": {
                                      "type": "string"
                                    },
                                    "content-type": {
                                      "type": "string"
                                    },
                                    "date": {
                                      "type": "string"
                                    },
                                    "server": {
                                      "type": "string"
                                    },
                                    "x-amzn-requestid": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "HTTPStatusCode": {
                                  "type": "integer"
                                },
                                "RequestId": {
                                  "type": "string"
                                },
                                "RetryAttempts": {
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "AWS-SSM-GetInstancePatches-HostEntityTrigger",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId3'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId3')]",
                "contentId": "[variables('_playbookContentId3')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "AWS Systems Manager",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_AWS_SSM_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "AWS Systems Manager - Get Missing Patches for EC2 Instances for given Hostname",
            "description": "The playbook can be triggered manually from a Host Entity to get the missing patches on a managed EC2 instance. This playbook performs the following actions:\n 1. Get the Hostname from the Host Entity.\n 2. Get the Instance ID from AWS EC2 for given Hostname.\n 3. Get the missing patches for the Instance ID.\n 4. Add the missing patches to the incident comment.",
            "prerequisites": [
              "1. Prior to the deployment of this playbook, AWS Systems Manager Functions App Custom Connector needs to be deployed under the same subscription.",
              "2. Refer to [AWS Systems Manager Functions App Custom Connector](../../CustomConnector/AWS_SSM_FunctionAppConnector/readme.md) documentation for deployment instructions."
            ],
            "postDeployment": [
              "1. Authorize each connection.",
              "2. Assign Microsoft Sentinel Responder Role to Playbook.",
              "3. Update Function App Settings with AWS Credentials.",
              "4. Check readme.md for detailed instructions."
            ],
            "lastUpdateTime": "2023-05-30T12:00:00Z",
            "entities": [
              "Host"
            ],
            "tags": [
              "AWS",
              "Systems Manager"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId3')]",
        "contentKind": "Playbook",
        "displayName": "AWS-SSM-GetInstancePatches-HostEntityTrigger",
        "contentProductId": "[variables('_playbookcontentProductId3')]",
        "id": "[variables('_playbookcontentProductId3')]",
        "version": "[variables('playbookVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AWS-SSM-GetInstancePatches-IPEntityTrigger Playbook with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion4')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "AWS-SSM-GetInstancePatches-IPEntityTrigger",
              "type": "string"
            },
            "FunctionsAppName": {
              "defaultValue": "awsssm",
              "type": "string"
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "FunctionsAppName": "[[concat(parameters('FunctionsAppName'), uniqueString(resourceGroup().id))]",
            "AWSSSMFuntionsAppId": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionsAppName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_entity": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/entity/@{encodeURIComponent('IP')}"
                      }
                    }
                  },
                  "actions": {
                    "Append_to_IncidentComment_on_error": {
                      "runAfter": {
                        "GetInventory": [
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "IncidentComment",
                        "value": "Issue with Playbook exeution. Check the playbook for detailed error info. "
                      }
                    },
                    "Condition_to_check_if_IncidentArmID_exist": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['IncidentArmID']",
                              "message": "<p>@{variables('IncidentComment')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "Append_to_IncidentComment_on_error": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Condition_to_check_if_any_instanceid": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@triggerBody()?['IncidentArmID']",
                                "@null"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_to_check_if_any_instanceid": {
                      "actions": {
                        "For_each_InstanceId": {
                          "foreach": "@variables('InstanceIdList')",
                          "actions": {
                            "Append_to_IncidentComment_on_success": {
                              "runAfter": {
                                "Create_HTML_table": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "IncidentComment",
                                "value": "AWS EC2 instance <strong>@{items('For_each_InstanceId')}</strong> with IP <strong>@{triggerBody()?['Entity']?['properties']?['Address']}</strong> has these missing patches.\n@{body('Create_HTML_table')}\n(Blank output signifies, no missing patches.)"
                              }
                            },
                            "Create_HTML_table": {
                              "runAfter": {
                                "Filter_Missing_Patches": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Table",
                              "inputs": {
                                "format": "HTML",
                                "from": "@body('Filter_Missing_Patches')"
                              }
                            },
                            "DescribeInstancePatches": {
                              "type": "Function",
                              "inputs": {
                                "body": {
                                  "InstanceId": "@items('For_each_InstanceId')"
                                },
                                "function": {
                                  "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/DescribeInstancePatches')]"
                                }
                              }
                            },
                            "Filter_Missing_Patches": {
                              "runAfter": {
                                "Parse_JSON_-_DescribeInstancePatches": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Query",
                              "inputs": {
                                "from": "@body('Parse_JSON_-_DescribeInstancePatches')?['Patches']",
                                "where": "@equals(item()?['State'], 'Missing')"
                              }
                            },
                            "Parse_JSON_-_DescribeInstancePatches": {
                              "runAfter": {
                                "DescribeInstancePatches": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('DescribeInstancePatches')",
                                "schema": {
                                  "properties": {
                                    "Patches": {
                                      "items": {
                                        "properties": {
                                          "CVEIds": {
                                            "type": "string"
                                          },
                                          "Classification": {
                                            "type": "string"
                                          },
                                          "InstalledTime": {
                                            "type": "string"
                                          },
                                          "KBId": {
                                            "type": "string"
                                          },
                                          "Severity": {
                                            "type": "string"
                                          },
                                          "State": {
                                            "type": "string"
                                          },
                                          "Title": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_EC2_PrivateIP": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Append_to_IncidentComment": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "IncidentComment",
                              "value": "For IPAddress <strong>@{triggerBody()?['Entity']?['properties']?['Address']}</strong>, no matching EC2 instance found in AWS Systems Manager.\n"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('InstanceIdList'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_each_AWS_EC2_PrivateIP": {
                      "foreach": "@variables('PrivateIPList')",
                      "actions": {
                        "Condition_If_IP_matches_with_PrivateIP": {
                          "actions": {
                            "Append_to_array_variable_InstanceIdList": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "InstanceIdList",
                                "value": "@string(items('For_each_AWS_EC2_PrivateIP')?['InstanceId'])"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@string(items('For_each_AWS_EC2_PrivateIP')?['PrivateIP'])",
                                  "@triggerBody()?['Entity']?['properties']?['Address']"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_Instance_get_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_AWS_Instance_get_private_ip": {
                      "foreach": "@body('Parse_JSON_-_GetInventory')?['Entities']",
                      "actions": {
                        "For_each_Instance_Entity": {
                          "foreach": "@items('For_each_AWS_Instance_get_private_ip')['Data']['AWS:InstanceInformation']['Content']",
                          "actions": {
                            "Condition_to_skip_Terminated_Instances": {
                              "actions": {
                                "Append_to_array_PrivateIPList": {
                                  "runAfter": {
                                    "Compose_InstanceId_PrivateIP_Pair": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "PrivateIPList",
                                    "value": "@outputs('Compose_InstanceId_PrivateIP_Pair')"
                                  }
                                },
                                "Compose_InstanceId_PrivateIP_Pair": {
                                  "type": "Compose",
                                  "inputs": {
                                    "InstanceId": "@items('For_each_Instance_Entity')?['InstanceId']",
                                    "PrivateIP": "@items('For_each_Instance_Entity')?['IpAddress']"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_Instance_Entity')?['InstanceStatus']",
                                        "Terminated"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_-_GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "GetInventory": {
                      "runAfter": {
                        "Initialize_variable_-_IncidentComment": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "function": {
                          "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetInventory')]"
                        }
                      }
                    },
                    "Initialize_Array_-_InstanceIdList": {
                      "runAfter": {
                        "Initialize_Array_-_PrivateIPList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "InstanceIdList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_PrivateIPList": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PrivateIPList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_IncidentComment": {
                      "runAfter": {
                        "Initialize_Array_-_InstanceIdList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentComment",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_-_GetInventory": {
                      "runAfter": {
                        "GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('GetInventory')",
                        "schema": {
                          "properties": {
                            "Entities": {
                              "items": {
                                "properties": {
                                  "Data": {
                                    "properties": {
                                      "AWS:InstanceInformation": {
                                        "properties": {
                                          "CaptureTime": {
                                            "type": "string"
                                          },
                                          "Content": {
                                            "items": {
                                              "properties": {
                                                "AgentType": {
                                                  "type": "string"
                                                },
                                                "AgentVersion": {
                                                  "type": "string"
                                                },
                                                "ComputerName": {
                                                  "type": "string"
                                                },
                                                "InstanceId": {
                                                  "type": "string"
                                                },
                                                "InstanceStatus": {
                                                  "type": "string"
                                                },
                                                "IpAddress": {
                                                  "type": "string"
                                                },
                                                "PlatformName": {
                                                  "type": "string"
                                                },
                                                "PlatformType": {
                                                  "type": "string"
                                                },
                                                "PlatformVersion": {
                                                  "type": "string"
                                                },
                                                "ResourceType": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "SchemaVersion": {
                                            "type": "string"
                                          },
                                          "TypeName": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "Id": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ResponseMetadata": {
                              "properties": {
                                "HTTPHeaders": {
                                  "properties": {
                                    "connection": {
                                      "type": "string"
                                    },
                                    "content-length": {
                                      "type": "string"
                                    },
                                    "content-type": {
                                      "type": "string"
                                    },
                                    "date": {
                                      "type": "string"
                                    },
                                    "server": {
                                      "type": "string"
                                    },
                                    "x-amzn-requestid": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "HTTPStatusCode": {
                                  "type": "integer"
                                },
                                "RequestId": {
                                  "type": "string"
                                },
                                "RetryAttempts": {
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "AWS-SSM-GetInstancePatches-IPEntityTrigger",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId4'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId4')]",
                "contentId": "[variables('_playbookContentId4')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "AWS Systems Manager",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_AWS_SSM_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "AWS Systems Manager - Get Missing Patches for EC2 Instances for given Private IP",
            "description": "The playbook can be triggered manually from an IP Entity to get the missing patches on a managed EC2 instance. This playbook performs the following actions:\n Get the Private IP from the IP Entity.\n 2. Get the Instance ID from AWS EC2 for given private IP.\n 3. Get the missing patches for the Instance ID.\n 4. Add the missing patches to the incident comment.",
            "prerequisites": [
              "1. Prior to the deployment of this playbook, AWS Systems Manager Functions App Custom Connector needs to be deployed under the same subscription.",
              "2. Refer to [AWS Systems Manager Functions App Custom Connector](../../CustomConnector/AWS_SSM_FunctionAppConnector/readme.md) documentation for deployment instructions."
            ],
            "postDeployment": [
              "1. Authorize each connection.",
              "2. Assign Microsoft Sentinel Responder Role to Playbook.",
              "3. Update Function App Settings with AWS Credentials.",
              "4. Check readme.md for detailed instructions."
            ],
            "lastUpdateTime": "2023-05-30T12:00:00Z",
            "entities": [
              "IP"
            ],
            "tags": [
              "AWS",
              "Systems Manager"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId4')]",
        "contentKind": "Playbook",
        "displayName": "AWS-SSM-GetInstancePatches-IPEntityTrigger",
        "contentProductId": "[variables('_playbookcontentProductId4')]",
        "id": "[variables('_playbookcontentProductId4')]",
        "version": "[variables('playbookVersion4')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AWS-SSM-RunAutomationRunbook Playbook with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion5')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "AWS-SSM-RunAutomationRunbook",
              "type": "string"
            },
            "RunbookName": {
              "type": "string",
              "metadata": {
                "description": "Enter the Runbook Name"
              }
            },
            "RunbookParameters": {
              "type": "string",
              "metadata": {
                "description": "Enter Runbook Parameters in JSON format."
              }
            },
            "FunctionsAppName": {
              "defaultValue": "awsssm",
              "type": "string"
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "FunctionsAppName": "[[concat(parameters('FunctionsAppName'), uniqueString(resourceGroup().id))]",
            "AWSSSMFuntionsAppId": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionsAppName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "RunbookName": {
                      "defaultValue": "[[parameters('RunbookName')]",
                      "type": "string"
                    },
                    "RunbookParameters": {
                      "defaultValue": "[[parameters('RunbookParameters')]",
                      "type": "string"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)": {
                      "runAfter": {
                        "Condition_to_check_if_execution_is_successful": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Set_variable_-_IncidentComment_on_error": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Set_variable_-_IncidentComment_on_error2": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{variables('IncidentComment')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Condition_to_check_if_execution_is_successful": {
                      "actions": {
                        "Set_variable_-_ExecutionStatus": {
                          "runAfter": {
                            "Set_variable_-_IsExecutionComplete": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ExecutionStatus",
                            "value": "@body('Parse_JSON_-_GetAutomationExecution')?['AutomationExecution']?['AutomationExecutionStatus']"
                          }
                        },
                        "Set_variable_-_IncidentComment_on_success": {
                          "runAfter": {
                            "Set_variable_-_ExecutionStatus": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "IncidentComment",
                            "value": "Runbook <strong>@{parameters('RunbookName')}</strong> execution complete.\nExecution ID: <strong>@{body('Parse_JSON_StartAutomationExecution')?['AutomationExecutionId']}</strong>\n"
                          }
                        },
                        "Set_variable_-_IsExecutionComplete": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "IsExecutionComplete",
                            "value": "@true"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_-_GetAutomationExecution": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Wait_Until_Execution_is_complete": {
                            "actions": {
                              "Condition_to_check_runbook_execution_status": {
                                "actions": {
                                  "Append_to_IncidentComment": {
                                    "runAfter": {
                                      "Reset_variable_-_IsExecutionComplete": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                      "name": "IncidentComment",
                                      "value": "Runbook <strong>@{parameters('RunbookName')}</strong> execution <strong>@{variables('ExecutionStatus')}</strong>.\nExecution ID: <strong>@{body('Parse_JSON_StartAutomationExecution')?['AutomationExecutionId']}</strong>\n"
                                    }
                                  },
                                  "Reset_variable_-_IsExecutionComplete": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "IsExecutionComplete",
                                      "value": "@true"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "Reset_variable_-_ExecutionStatus": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": {
                                  "or": [
                                    {
                                      "equals": [
                                        "@variables('ExecutionStatus')",
                                        "Cancelled"
                                      ]
                                    },
                                    {
                                      "equals": [
                                        "@variables('ExecutionStatus')",
                                        "Failed"
                                      ]
                                    },
                                    {
                                      "equals": [
                                        "@variables('ExecutionStatus')",
                                        "TimedOut"
                                      ]
                                    },
                                    {
                                      "equals": [
                                        "@variables('IsExecutionComplete')",
                                        "Success"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "GetAutomationExecution_status": {
                                "runAfter": {
                                  "Sleep_for_10_more_seconds": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Function",
                                "inputs": {
                                  "body": {
                                    "AutomationExecutionId": "@body('Parse_JSON_StartAutomationExecution')?['AutomationExecutionId']"
                                  },
                                  "function": {
                                    "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetAutomationExecution')]"
                                  }
                                }
                              },
                              "Parse_JSON_-_GetAutomationExecution_status": {
                                "runAfter": {
                                  "GetAutomationExecution_status": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('GetAutomationExecution_status')",
                                  "schema": {
                                    "properties": {
                                      "AutomationExecution": {
                                        "properties": {
                                          "AutomationExecutionId": {
                                            "type": "string"
                                          },
                                          "AutomationExecutionStatus": {
                                            "type": "string"
                                          },
                                          "DocumentName": {
                                            "type": "string"
                                          },
                                          "DocumentVersion": {
                                            "type": "string"
                                          },
                                          "ExecutedBy": {
                                            "type": "string"
                                          },
                                          "ExecutionEndTime": {
                                            "type": "string"
                                          },
                                          "ExecutionStartTime": {
                                            "type": "string"
                                          },
                                          "Mode": {
                                            "type": "string"
                                          },
                                          "Outputs": {
                                            "type": "object"
                                          },
                                          "Parameters": {
                                            "type": "object"
                                          },
                                          "ResolvedTargets": {
                                            "properties": {
                                              "ParameterValues": {
                                                "type": "array"
                                              },
                                              "Truncated": {
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "StepExecutions": {
                                            "items": {
                                              "properties": {
                                                "Action": {
                                                  "type": "string"
                                                },
                                                "ExecutionEndTime": {
                                                  "type": "string"
                                                },
                                                "ExecutionStartTime": {
                                                  "type": "string"
                                                },
                                                "Inputs": {
                                                  "type": "object"
                                                },
                                                "OverriddenParameters": {
                                                  "type": "object"
                                                },
                                                "StepExecutionId": {
                                                  "type": "string"
                                                },
                                                "StepName": {
                                                  "type": "string"
                                                },
                                                "StepStatus": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "StepName",
                                                "Action",
                                                "ExecutionStartTime",
                                                "ExecutionEndTime",
                                                "StepStatus",
                                                "Inputs",
                                                "StepExecutionId",
                                                "OverriddenParameters"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "StepExecutionsTruncated": {
                                            "type": "boolean"
                                          },
                                          "Targets": {
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              },
                              "Reset_variable_-_ExecutionStatus": {
                                "runAfter": {
                                  "Parse_JSON_-_GetAutomationExecution_status": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ExecutionStatus",
                                  "value": "@body('Parse_JSON_-_GetAutomationExecution_status')?['AutomationExecution']?['AutomationExecutionStatus']"
                                }
                              },
                              "Sleep_for_10_more_seconds": {
                                "type": "Wait",
                                "inputs": {
                                  "interval": {
                                    "count": 10,
                                    "unit": "Second"
                                  }
                                }
                              }
                            },
                            "expression": "@equals(variables('IsExecutionComplete'), true)",
                            "limit": {
                              "count": 15,
                              "timeout": "PT1M"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_JSON_-_GetAutomationExecution')?['AutomationExecution']?['AutomationExecutionStatus']",
                              "Success"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "GetAutomationExecution": {
                      "runAfter": {
                        "Wait_for_10_seconds_": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "body": {
                          "AutomationExecutionId": "@body('Parse_JSON_StartAutomationExecution')?['AutomationExecutionId']"
                        },
                        "function": {
                          "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetAutomationExecution')]"
                        }
                      }
                    },
                    "Initialize_variable_-_ExecutionStatus": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ExecutionStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_IncidentComment": {
                      "runAfter": {
                        "Initialize_variable_-_IsExecutionComplete": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentComment",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_IsExecutionComplete": {
                      "runAfter": {
                        "Initialize_variable_-_ExecutionStatus": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IsExecutionComplete",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_-_GetAutomationExecution": {
                      "runAfter": {
                        "GetAutomationExecution": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('GetAutomationExecution')",
                        "schema": {
                          "properties": {
                            "AutomationExecution": {
                              "properties": {
                                "AutomationExecutionId": {
                                  "type": "string"
                                },
                                "AutomationExecutionStatus": {
                                  "type": "string"
                                },
                                "DocumentName": {
                                  "type": "string"
                                },
                                "DocumentVersion": {
                                  "type": "string"
                                },
                                "ExecutedBy": {
                                  "type": "string"
                                },
                                "ExecutionEndTime": {
                                  "type": "string"
                                },
                                "ExecutionStartTime": {
                                  "type": "string"
                                },
                                "Mode": {
                                  "type": "string"
                                },
                                "Outputs": {
                                  "type": "object"
                                },
                                "Parameters": {
                                  "type": "object"
                                },
                                "ResolvedTargets": {
                                  "properties": {
                                    "ParameterValues": {
                                      "type": "array"
                                    },
                                    "Truncated": {
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "StepExecutions": {
                                  "items": {
                                    "properties": {
                                      "Action": {
                                        "type": "string"
                                      },
                                      "ExecutionEndTime": {
                                        "type": "string"
                                      },
                                      "ExecutionStartTime": {
                                        "type": "string"
                                      },
                                      "Inputs": {
                                        "type": "object"
                                      },
                                      "OverriddenParameters": {
                                        "type": "object"
                                      },
                                      "StepExecutionId": {
                                        "type": "string"
                                      },
                                      "StepName": {
                                        "type": "string"
                                      },
                                      "StepStatus": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "StepName",
                                      "Action",
                                      "ExecutionStartTime",
                                      "ExecutionEndTime",
                                      "StepStatus",
                                      "Inputs",
                                      "StepExecutionId",
                                      "OverriddenParameters"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "StepExecutionsTruncated": {
                                  "type": "boolean"
                                },
                                "Targets": {
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_JSON_StartAutomationExecution": {
                      "runAfter": {
                        "StartAutomationExecution": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('StartAutomationExecution')",
                        "schema": {
                          "properties": {
                            "AutomationExecutionId": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Set_variable_-_IncidentComment_on_error": {
                      "runAfter": {
                        "StartAutomationExecution": [
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "IncidentComment",
                        "value": "Issue with the StartAutomationExecution step in Runbook<strong>@{parameters('RunbookName')}</strong> execution. Check the Playbook for more details.\n"
                      }
                    },
                    "Set_variable_-_IncidentComment_on_error2": {
                      "runAfter": {
                        "GetAutomationExecution": [
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "IncidentComment",
                        "value": "Issue with the GetAutomationExecution step in Runbook<strong>@{parameters('RunbookName')}</strong> execution. Check the Playbook for more details.\n"
                      }
                    },
                    "StartAutomationExecution": {
                      "runAfter": {
                        "Initialize_variable_-_IncidentComment": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "body": {
                          "DocumentName": "@{parameters('RunbookName')}",
                          "Parameters": "@json(parameters('RunbookParameters'))"
                        },
                        "function": {
                          "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/StartAutomationExecution')]"
                        }
                      }
                    },
                    "Wait_for_10_seconds_": {
                      "runAfter": {
                        "Parse_JSON_StartAutomationExecution": [
                          "Succeeded"
                        ]
                      },
                      "type": "Wait",
                      "inputs": {
                        "interval": {
                          "count": 10,
                          "unit": "Second"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "AWS-SSM-RunAutomationRunbook",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId5'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId5')]",
                "contentId": "[variables('_playbookContentId5')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "AWS Systems Manager",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_AWS_SSM_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "AWS Systems Manager - Run Automation Runbook",
            "description": "When a new sentinel incident is created, this playbook gets triggered and runs the specified AWS Systems Manager Automation Runbook. The playbook will wait for the runbook execution to complete and then update the incident with the runbook execution status.",
            "prerequisites": [
              "1. Prior to the deployment of this playbook, AWS Systems Manager Functions App Custom Connector needs to be deployed under the same subscription.",
              "2. Refer to [AWS Systems Manager Functions App Custom Connector](../../CustomConnector/AWS_SSM_FunctionAppConnector/readme.md) documentation for deployment instructions."
            ],
            "postDeployment": [
              "1. Authorize each connection.",
              "2. Assign Microsoft Sentinel Responder Role to Playbook.",
              "3. Update Function App Settings with AWS Credentials.",
              "4. Check readme.md for detailed instructions."
            ],
            "lastUpdateTime": "2023-05-30T12:00:00Z",
            "tags": [
              "AWS",
              "Systems Manager"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId5')]",
        "contentKind": "Playbook",
        "displayName": "AWS-SSM-RunAutomationRunbook",
        "contentProductId": "[variables('_playbookcontentProductId5')]",
        "id": "[variables('_playbookcontentProductId5')]",
        "version": "[variables('playbookVersion5')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName6')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AWS-SSM-StopManagedInstance Playbook with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion6')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "AWS-SSM-StopManagedInstance",
              "type": "string"
            },
            "FunctionsAppName": {
              "defaultValue": "awsssm",
              "type": "string"
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "FunctionsAppName": "[[concat(parameters('FunctionsAppName'), uniqueString(resourceGroup().id))]",
            "AWSSSMFuntionsAppId": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionsAppName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_comment_to_incident_(V3)": {
                      "runAfter": {
                        "Append_to_IncidentComment_on_error": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Condition_to_check_if_any_instanceid": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{variables('IncidentComment')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Append_to_IncidentComment_on_error": {
                      "runAfter": {
                        "GetInventory": [
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "IncidentComment",
                        "value": "Issue with Playbook exeution. Check the playbook for detailed error info. "
                      }
                    },
                    "Condition_to_check_if_any_instanceid": {
                      "actions": {
                        "Append_to_IncidentComment_on_success": {
                          "runAfter": {
                            "DeleteDocument": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToStringVariable",
                          "inputs": {
                            "name": "IncidentComment",
                            "value": "<strong>@{variables('InstanceIdList')}</strong> These ec2 instances have been stopped.\n"
                          }
                        },
                        "Create_Automation_Shutdown_Document": {
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "Content": "{\r\n  \"description\": \"Stop EC2 instances(s)\",\r\n  \"schemaVersion\": \"0.3\",\r\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\r\n  \"parameters\": {\r\n    \"InstanceId\": {\r\n      \"type\": \"StringList\",\r\n      \"description\": \"(Required) EC2 Instance(s) to stop\"\r\n    },\r\n    \"AutomationAssumeRole\": {\r\n      \"type\": \"String\",\r\n      \"description\": \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\",\r\n      \"default\": \"\"\r\n    }\r\n  },\r\n  \"mainSteps\": [\r\n    {\r\n      \"name\": \"stopInstances\",\r\n      \"action\": \"aws:changeInstanceState\",\r\n      \"onFailure\": \"Continue\",\r\n      \"inputs\": {\r\n        \"InstanceIds\": \"{{ InstanceId }}\",\r\n        \"DesiredState\": \"stopped\"\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"forceStopInstances\",\r\n      \"action\": \"aws:changeInstanceState\",\r\n      \"inputs\": {\r\n        \"InstanceIds\": \"{{ InstanceId }}\",\r\n        \"CheckStateOnly\": false,\r\n        \"DesiredState\": \"stopped\",\r\n        \"Force\": true\r\n      }\r\n    }\r\n  ]\r\n}",
                              "DocumentFormat": "JSON",
                              "DocumentType": "Automation",
                              "Name": "@{concat('Sentinel-EC2-Shutdown-', string(rand(10000,99999)))}",
                              "VersionName": "1.0.0"
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/CreateDocument')]"
                            }
                          }
                        },
                        "DeleteDocument": {
                          "runAfter": {
                            "Wait_Until_Automation_Execution_is_complete": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "Force": "True",
                              "Name": "@{body('Parse_JSON_CreateDocument')?['DocumentDescription']?['Name']}"
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/DeleteDocument')]"
                            }
                          }
                        },
                        "GetAutomationExecution": {
                          "runAfter": {
                            "Sleep_for_10_seconds": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "AutomationExecutionId": "@{body('Parse_JSON_-_StartAutomationExecution')?['AutomationExecutionId']}"
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetAutomationExecution')]"
                            }
                          }
                        },
                        "Parse_JSON_-_GetAutomationExecution": {
                          "runAfter": {
                            "GetAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('GetAutomationExecution')",
                            "schema": {
                              "properties": {
                                "AutomationExecution": {
                                  "properties": {
                                    "AutomationExecutionId": {
                                      "type": "string"
                                    },
                                    "AutomationExecutionStatus": {
                                      "type": "string"
                                    },
                                    "DocumentName": {
                                      "type": "string"
                                    },
                                    "DocumentVersion": {
                                      "type": "string"
                                    },
                                    "ExecutedBy": {
                                      "type": "string"
                                    },
                                    "ExecutionEndTime": {
                                      "type": "string"
                                    },
                                    "ExecutionStartTime": {
                                      "type": "string"
                                    },
                                    "Mode": {
                                      "type": "string"
                                    },
                                    "Outputs": {
                                      "type": "object"
                                    },
                                    "Parameters": {
                                      "properties": {
                                        "InstanceId": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "ResolvedTargets": {
                                      "properties": {
                                        "ParameterValues": {
                                          "type": "array"
                                        },
                                        "Truncated": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "StepExecutionsTruncated": {
                                      "type": "boolean"
                                    },
                                    "Targets": {
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_JSON_-_StartAutomationExecution": {
                          "runAfter": {
                            "StartAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('StartAutomationExecution')",
                            "schema": {
                              "properties": {
                                "AutomationExecutionId": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_JSON_CreateDocument": {
                          "runAfter": {
                            "Create_Automation_Shutdown_Document": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Create_Automation_Shutdown_Document')",
                            "schema": {
                              "properties": {
                                "DocumentDescription": {
                                  "properties": {
                                    "CreatedDate": {
                                      "type": "string"
                                    },
                                    "DefaultVersion": {
                                      "type": "string"
                                    },
                                    "Description": {
                                      "type": "string"
                                    },
                                    "DocumentFormat": {
                                      "type": "string"
                                    },
                                    "DocumentType": {
                                      "type": "string"
                                    },
                                    "DocumentVersion": {
                                      "type": "string"
                                    },
                                    "Hash": {
                                      "type": "string"
                                    },
                                    "HashType": {
                                      "type": "string"
                                    },
                                    "LatestVersion": {
                                      "type": "string"
                                    },
                                    "Name": {
                                      "type": "string"
                                    },
                                    "Owner": {
                                      "type": "string"
                                    },
                                    "Parameters": {
                                      "items": {
                                        "properties": {
                                          "DefaultValue": {
                                            "type": "string"
                                          },
                                          "Description": {
                                            "type": "string"
                                          },
                                          "Name": {
                                            "type": "string"
                                          },
                                          "Type": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "Name",
                                          "Type",
                                          "Description"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "PlatformTypes": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "SchemaVersion": {
                                      "type": "string"
                                    },
                                    "Status": {
                                      "type": "string"
                                    },
                                    "Tags": {
                                      "type": "array"
                                    },
                                    "VersionName": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Set_variable_-_TempStatus": {
                          "runAfter": {
                            "Parse_JSON_-_GetAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "TempStatus",
                            "value": "@body('Parse_JSON_-_GetAutomationExecution')?['AutomationExecution']?['AutomationExecutionStatus']"
                          }
                        },
                        "Sleep_for_10_seconds": {
                          "runAfter": {
                            "Parse_JSON_-_StartAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "Wait",
                          "inputs": {
                            "interval": {
                              "count": 10,
                              "unit": "Second"
                            }
                          }
                        },
                        "StartAutomationExecution": {
                          "runAfter": {
                            "Parse_JSON_CreateDocument": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "DocumentName": "@{body('Parse_JSON_CreateDocument')?['DocumentDescription']?['Name']}",
                              "Parameters": {
                                "InstanceId": "@variables('InstanceIdList')"
                              }
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/StartAutomationExecution')]"
                            }
                          }
                        },
                        "Wait_Until_Automation_Execution_is_complete": {
                          "actions": {
                            "GetAutomationExecution_again": {
                              "type": "Function",
                              "inputs": {
                                "body": {
                                  "AutomationExecutionId": "@{body('Parse_JSON_-_StartAutomationExecution')?['AutomationExecutionId']}"
                                },
                                "function": {
                                  "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetAutomationExecution')]"
                                }
                              }
                            },
                            "Parse_JSON_-_GetAutomationExecution_again": {
                              "runAfter": {
                                "GetAutomationExecution_again": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('GetAutomationExecution_again')",
                                "schema": {
                                  "properties": {
                                    "AutomationExecution": {
                                      "properties": {
                                        "AutomationExecutionId": {
                                          "type": "string"
                                        },
                                        "AutomationExecutionStatus": {
                                          "type": "string"
                                        },
                                        "DocumentName": {
                                          "type": "string"
                                        },
                                        "DocumentVersion": {
                                          "type": "string"
                                        },
                                        "ExecutedBy": {
                                          "type": "string"
                                        },
                                        "ExecutionEndTime": {
                                          "type": "string"
                                        },
                                        "ExecutionStartTime": {
                                          "type": "string"
                                        },
                                        "Mode": {
                                          "type": "string"
                                        },
                                        "Outputs": {
                                          "type": "object"
                                        },
                                        "Parameters": {
                                          "properties": {
                                            "InstanceId": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "ResolvedTargets": {
                                          "properties": {
                                            "ParameterValues": {
                                              "type": "array"
                                            },
                                            "Truncated": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "StepExecutionsTruncated": {
                                          "type": "boolean"
                                        },
                                        "Targets": {
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Reset_variable_-_TempStatus": {
                              "runAfter": {
                                "Sleep_again_for_10_seconds": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "TempStatus",
                                "value": "@body('Parse_JSON_-_GetAutomationExecution_again')?['AutomationExecution']?['AutomationExecutionStatus']"
                              }
                            },
                            "Sleep_again_for_10_seconds": {
                              "runAfter": {
                                "Parse_JSON_-_GetAutomationExecution_again": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Wait",
                              "inputs": {
                                "interval": {
                                  "count": 10,
                                  "unit": "Second"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_TempStatus": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('TempStatus'), 'Success')",
                          "limit": {
                            "count": 60,
                            "timeout": "PT10M"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "For_each_Incident_Hostname": [
                          "Succeeded"
                        ],
                        "For_each_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Append_to_IncidentComment": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "IncidentComment",
                              "value": "No matching EC2 instance found in AWS Systems Manager.\n"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('InstanceIdList'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "Entities_-_Get_IPs": {
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/ip"
                      }
                    },
                    "For_each_AWS_Instance_get_hostname_and_private_ip": {
                      "foreach": "@body('Parse_JSON_-_GetInventory')?['Entities']",
                      "actions": {
                        "For_each_Instance_Entity": {
                          "foreach": "@items('For_each_AWS_Instance_get_hostname_and_private_ip')['Data']['AWS:InstanceInformation']['Content']",
                          "actions": {
                            "Condition_to_skip_Terminated_Instances": {
                              "actions": {
                                "Append_to_array_HostnameList": {
                                  "runAfter": {
                                    "Compose_InstanceId_Hostname_Pair": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "HostnameList",
                                    "value": "@outputs('Compose_InstanceId_Hostname_Pair')"
                                  }
                                },
                                "Append_to_array_PrivateIPList": {
                                  "runAfter": {
                                    "Compose_InstanceId_PrivateIP_Pair": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "PrivateIPList",
                                    "value": "@outputs('Compose_InstanceId_PrivateIP_Pair')"
                                  }
                                },
                                "Compose_InstanceId_Hostname_Pair": {
                                  "type": "Compose",
                                  "inputs": {
                                    "Hostname": "@items('For_each_Instance_Entity')?['ComputerName']",
                                    "InstanceId": "@items('For_each_Instance_Entity')?['InstanceId']"
                                  }
                                },
                                "Compose_InstanceId_PrivateIP_Pair": {
                                  "runAfter": {
                                    "Append_to_array_HostnameList": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Compose",
                                  "inputs": {
                                    "InstanceId": "@items('For_each_Instance_Entity')?['InstanceId']",
                                    "PrivateIP": "@items('For_each_Instance_Entity')?['IpAddress']"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_Instance_Entity')?['InstanceStatus']",
                                        "Terminated"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_-_GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_Incident_Hostname": {
                      "foreach": "@body('Entities_-_Get_Hosts')?['Hosts']",
                      "actions": {
                        "For_each_AWS_EC2_Hostname": {
                          "foreach": "@variables('HostnameList')",
                          "actions": {
                            "Condition_if_incident_Hostname_matches_AWS_EC2_hostname": {
                              "actions": {
                                "Append_to_array_-_InstanceIdList": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "InstanceIdList",
                                    "value": "@string(items('For_each_AWS_EC2_Hostname')?['InstanceId'])"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@{items('For_each_Incident_Hostname')?['hostName']}",
                                      "@{items('For_each_AWS_EC2_Hostname')?['Hostname']}"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_Instance_get_hostname_and_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_private_ip": {
                      "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                      "actions": {
                        "For_each_AWS_EC2_PrivateIP": {
                          "foreach": "@variables('PrivateIPList')",
                          "actions": {
                            "Condition_If_IP_matches_with_PrivateIP": {
                              "actions": {
                                "Append_to_array_variable_InstanceIdList": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "InstanceIdList",
                                    "value": "@string(items('For_each_AWS_EC2_PrivateIP')?['InstanceId'])"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@string(items('For_each_AWS_EC2_PrivateIP')?['PrivateIP'])",
                                      "@items('For_each_private_ip')?['address']"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_Instance_get_hostname_and_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "GetInventory": {
                      "runAfter": {
                        "Initialize_variable_-_IncidentComment": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "function": {
                          "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetInventory')]"
                        }
                      }
                    },
                    "Initialize_Array_-_HostnameList": {
                      "runAfter": {
                        "Entities_-_Get_IPs": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "HostnameList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_InstanceIdList": {
                      "runAfter": {
                        "Initialize_Array_-_PrivateIPList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "InstanceIdList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_PrivateIPList": {
                      "runAfter": {
                        "Initialize_Array_-_HostnameList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PrivateIPList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_IncidentComment": {
                      "runAfter": {
                        "Initialize_variable_-_TempStatus": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentComment",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TempStatus": {
                      "runAfter": {
                        "Initialize_Array_-_InstanceIdList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TempStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_-_GetInventory": {
                      "runAfter": {
                        "GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('GetInventory')",
                        "schema": {
                          "properties": {
                            "Entities": {
                              "items": {
                                "properties": {
                                  "Data": {
                                    "properties": {
                                      "AWS:InstanceInformation": {
                                        "properties": {
                                          "CaptureTime": {
                                            "type": "string"
                                          },
                                          "Content": {
                                            "items": {
                                              "properties": {
                                                "AgentType": {
                                                  "type": "string"
                                                },
                                                "AgentVersion": {
                                                  "type": "string"
                                                },
                                                "ComputerName": {
                                                  "type": "string"
                                                },
                                                "InstanceId": {
                                                  "type": "string"
                                                },
                                                "InstanceStatus": {
                                                  "type": "string"
                                                },
                                                "IpAddress": {
                                                  "type": "string"
                                                },
                                                "PlatformName": {
                                                  "type": "string"
                                                },
                                                "PlatformType": {
                                                  "type": "string"
                                                },
                                                "PlatformVersion": {
                                                  "type": "string"
                                                },
                                                "ResourceType": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "SchemaVersion": {
                                            "type": "string"
                                          },
                                          "TypeName": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "Id": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ResponseMetadata": {
                              "properties": {
                                "HTTPHeaders": {
                                  "properties": {
                                    "connection": {
                                      "type": "string"
                                    },
                                    "content-length": {
                                      "type": "string"
                                    },
                                    "content-type": {
                                      "type": "string"
                                    },
                                    "date": {
                                      "type": "string"
                                    },
                                    "server": {
                                      "type": "string"
                                    },
                                    "x-amzn-requestid": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "HTTPStatusCode": {
                                  "type": "integer"
                                },
                                "RequestId": {
                                  "type": "string"
                                },
                                "RetryAttempts": {
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "AWS-SSM-StopManagedInstance",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId6'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId6')]",
                "contentId": "[variables('_playbookContentId6')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion6')]",
                "source": {
                  "kind": "Solution",
                  "name": "AWS Systems Manager",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_AWS_SSM_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "AWS Systems Manager - Stop Managed EC2 Instances",
            "description": "This playbook can be used by SOC Analysts to stop malicious or compromised EC2 instances in AWS. This playbook uses AWS Systems Manager API to stop the EC2 instances. The playbook can be triggered from an incident in Microsoft Sentinel. The playbook takes the Hostnames and Private IP addresses from the incident entities and stops the EC2 instances using the Instance IDs. The playbook also adds a comment to the incident with the list of instances that were stopped.",
            "prerequisites": [
              "1. Prior to the deployment of this playbook, AWS Systems Manager Custom Connector needs to be deployed under the same subscription.",
              "2. Refer to [AWS Systems Manager Logic App Custom Connector](../../CustomConnector/AWS_SSM_FunctionAppConnector/readme.md) documentation for deployment instructions."
            ],
            "postDeployment": [
              "1. Authorize each connection.",
              "2. Configure Playbook in Microsoft Sentinel Analytic Rule.",
              "3. Assign Microsoft Sentinel Responder Role to Playbook.",
              "4. Update Function App Settings with AWS Credentials.",
              "5. Check readme.md for detailed instructions."
            ],
            "lastUpdateTime": "2023-05-30T12:00:00Z",
            "entities": [
              "IP",
              "Host"
            ],
            "tags": [
              "AWS",
              "Systems Manager"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId6')]",
        "contentKind": "Playbook",
        "displayName": "AWS-SSM-StopManagedInstance",
        "contentProductId": "[variables('_playbookcontentProductId6')]",
        "id": "[variables('_playbookcontentProductId6')]",
        "version": "[variables('playbookVersion6')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName7')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AWS-SSM-StopManagedInstance-HostEntityTrigger Playbook with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion7')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "AWS-SSM-StopManagedInstance-HostEntityTrigger",
              "type": "string"
            },
            "FunctionsAppName": {
              "defaultValue": "awsssm",
              "type": "string"
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "FunctionsAppName": "[[concat(parameters('FunctionsAppName'), uniqueString(resourceGroup().id))]",
            "AWSSSMFuntionsAppId": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionsAppName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_entity": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/entity/@{encodeURIComponent('Host')}"
                      }
                    }
                  },
                  "actions": {
                    "Append_to_IncidentComment_on_error": {
                      "runAfter": {
                        "GetInventory": [
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "IncidentComment",
                        "value": "Issue with Playbook exeution. Check the playbook for detailed error info. "
                      }
                    },
                    "Condition_to_check_if_IncidentARMId_exist": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['IncidentArmID']",
                              "message": "<p>@{variables('IncidentComment')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "Append_to_IncidentComment_on_error": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Condition_to_check_if_any_instanceid": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@triggerBody()?['IncidentArmID']",
                                "@null"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_to_check_if_any_instanceid": {
                      "actions": {
                        "Append_to_IncidentComment_on_success": {
                          "runAfter": {
                            "DeleteDocument": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToStringVariable",
                          "inputs": {
                            "name": "IncidentComment",
                            "value": "AWS EC2 instance <strong>@{variables('InstanceIdList')}</strong> has been stopped.\n"
                          }
                        },
                        "Create_Automation_Shutdown_Document": {
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "Content": "{\r\n  \"description\": \"Stop EC2 instances(s)\",\r\n  \"schemaVersion\": \"0.3\",\r\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\r\n  \"parameters\": {\r\n    \"InstanceId\": {\r\n      \"type\": \"StringList\",\r\n      \"description\": \"(Required) EC2 Instance(s) to stop\"\r\n    },\r\n    \"AutomationAssumeRole\": {\r\n      \"type\": \"String\",\r\n      \"description\": \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\",\r\n      \"default\": \"\"\r\n    }\r\n  },\r\n  \"mainSteps\": [\r\n    {\r\n      \"name\": \"stopInstances\",\r\n      \"action\": \"aws:changeInstanceState\",\r\n      \"onFailure\": \"Continue\",\r\n      \"inputs\": {\r\n        \"InstanceIds\": \"{{ InstanceId }}\",\r\n        \"DesiredState\": \"stopped\"\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"forceStopInstances\",\r\n      \"action\": \"aws:changeInstanceState\",\r\n      \"inputs\": {\r\n        \"InstanceIds\": \"{{ InstanceId }}\",\r\n        \"CheckStateOnly\": false,\r\n        \"DesiredState\": \"stopped\",\r\n        \"Force\": true\r\n      }\r\n    }\r\n  ]\r\n}",
                              "DocumentFormat": "JSON",
                              "DocumentType": "Automation",
                              "Name": "@{concat('Sentinel-EC2-Shutdown-', string(rand(10000,99999)))}",
                              "VersionName": "1.0.0"
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/CreateDocument')]"
                            }
                          }
                        },
                        "DeleteDocument": {
                          "runAfter": {
                            "Wait_Until_Automation_Execution_is_complete": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "Force": "True",
                              "Name": "@{body('Parse_JSON_CreateDocument')?['DocumentDescription']?['Name']}"
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/DeleteDocument')]"
                            }
                          }
                        },
                        "GetAutomationExecution": {
                          "runAfter": {
                            "Sleep_for_10_seconds": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "AutomationExecutionId": "@{body('Parse_JSON_-_StartAutomationExecution')?['AutomationExecutionId']}"
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetAutomationExecution')]"
                            }
                          }
                        },
                        "Parse_JSON_-_GetAutomationExecution": {
                          "runAfter": {
                            "GetAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('GetAutomationExecution')",
                            "schema": {
                              "properties": {
                                "AutomationExecution": {
                                  "properties": {
                                    "AutomationExecutionId": {
                                      "type": "string"
                                    },
                                    "AutomationExecutionStatus": {
                                      "type": "string"
                                    },
                                    "DocumentName": {
                                      "type": "string"
                                    },
                                    "DocumentVersion": {
                                      "type": "string"
                                    },
                                    "ExecutedBy": {
                                      "type": "string"
                                    },
                                    "ExecutionEndTime": {
                                      "type": "string"
                                    },
                                    "ExecutionStartTime": {
                                      "type": "string"
                                    },
                                    "Mode": {
                                      "type": "string"
                                    },
                                    "Outputs": {
                                      "type": "object"
                                    },
                                    "Parameters": {
                                      "properties": {
                                        "InstanceId": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "ResolvedTargets": {
                                      "properties": {
                                        "ParameterValues": {
                                          "type": "array"
                                        },
                                        "Truncated": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "StepExecutionsTruncated": {
                                      "type": "boolean"
                                    },
                                    "Targets": {
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_JSON_-_StartAutomationExecution": {
                          "runAfter": {
                            "StartAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('StartAutomationExecution')",
                            "schema": {
                              "properties": {
                                "AutomationExecutionId": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_JSON_CreateDocument": {
                          "runAfter": {
                            "Create_Automation_Shutdown_Document": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Create_Automation_Shutdown_Document')",
                            "schema": {
                              "properties": {
                                "DocumentDescription": {
                                  "properties": {
                                    "CreatedDate": {
                                      "type": "string"
                                    },
                                    "DefaultVersion": {
                                      "type": "string"
                                    },
                                    "Description": {
                                      "type": "string"
                                    },
                                    "DocumentFormat": {
                                      "type": "string"
                                    },
                                    "DocumentType": {
                                      "type": "string"
                                    },
                                    "DocumentVersion": {
                                      "type": "string"
                                    },
                                    "Hash": {
                                      "type": "string"
                                    },
                                    "HashType": {
                                      "type": "string"
                                    },
                                    "LatestVersion": {
                                      "type": "string"
                                    },
                                    "Name": {
                                      "type": "string"
                                    },
                                    "Owner": {
                                      "type": "string"
                                    },
                                    "Parameters": {
                                      "items": {
                                        "properties": {
                                          "DefaultValue": {
                                            "type": "string"
                                          },
                                          "Description": {
                                            "type": "string"
                                          },
                                          "Name": {
                                            "type": "string"
                                          },
                                          "Type": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "Name",
                                          "Type",
                                          "Description"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "PlatformTypes": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "SchemaVersion": {
                                      "type": "string"
                                    },
                                    "Status": {
                                      "type": "string"
                                    },
                                    "Tags": {
                                      "type": "array"
                                    },
                                    "VersionName": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Set_variable_-_TempStatus": {
                          "runAfter": {
                            "Parse_JSON_-_GetAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "TempStatus",
                            "value": "@body('Parse_JSON_-_GetAutomationExecution')?['AutomationExecution']?['AutomationExecutionStatus']"
                          }
                        },
                        "Sleep_for_10_seconds": {
                          "runAfter": {
                            "Parse_JSON_-_StartAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "Wait",
                          "inputs": {
                            "interval": {
                              "count": 10,
                              "unit": "Second"
                            }
                          }
                        },
                        "StartAutomationExecution": {
                          "runAfter": {
                            "Parse_JSON_CreateDocument": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "DocumentName": "@{body('Parse_JSON_CreateDocument')?['DocumentDescription']?['Name']}",
                              "Parameters": {
                                "InstanceId": "@variables('InstanceIdList')"
                              }
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/StartAutomationExecution')]"
                            }
                          }
                        },
                        "Wait_Until_Automation_Execution_is_complete": {
                          "actions": {
                            "GetAutomationExecution_again": {
                              "type": "Function",
                              "inputs": {
                                "body": {
                                  "AutomationExecutionId": "@{body('Parse_JSON_-_StartAutomationExecution')?['AutomationExecutionId']}"
                                },
                                "function": {
                                  "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetAutomationExecution')]"
                                }
                              }
                            },
                            "Parse_JSON_-_GetAutomationExecution_again": {
                              "runAfter": {
                                "GetAutomationExecution_again": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('GetAutomationExecution_again')",
                                "schema": {
                                  "properties": {
                                    "AutomationExecution": {
                                      "properties": {
                                        "AutomationExecutionId": {
                                          "type": "string"
                                        },
                                        "AutomationExecutionStatus": {
                                          "type": "string"
                                        },
                                        "DocumentName": {
                                          "type": "string"
                                        },
                                        "DocumentVersion": {
                                          "type": "string"
                                        },
                                        "ExecutedBy": {
                                          "type": "string"
                                        },
                                        "ExecutionEndTime": {
                                          "type": "string"
                                        },
                                        "ExecutionStartTime": {
                                          "type": "string"
                                        },
                                        "Mode": {
                                          "type": "string"
                                        },
                                        "Outputs": {
                                          "type": "object"
                                        },
                                        "Parameters": {
                                          "properties": {
                                            "InstanceId": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "ResolvedTargets": {
                                          "properties": {
                                            "ParameterValues": {
                                              "type": "array"
                                            },
                                            "Truncated": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "StepExecutionsTruncated": {
                                          "type": "boolean"
                                        },
                                        "Targets": {
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Reset_variable_-_TempStatus": {
                              "runAfter": {
                                "Sleep_again_for_10_seconds": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "TempStatus",
                                "value": "@body('Parse_JSON_-_GetAutomationExecution_again')?['AutomationExecution']?['AutomationExecutionStatus']"
                              }
                            },
                            "Sleep_again_for_10_seconds": {
                              "runAfter": {
                                "Parse_JSON_-_GetAutomationExecution_again": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Wait",
                              "inputs": {
                                "interval": {
                                  "count": 10,
                                  "unit": "Second"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_TempStatus": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('TempStatus'), 'Success')",
                          "limit": {
                            "count": 60,
                            "timeout": "PT10M"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_EC2_Hostname": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Append_to_IncidentComment": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "IncidentComment",
                              "value": "For Hostname <strong>@{triggerBody()?['Entity']?['properties']?['HostName']}</strong> no matching EC2 instance found in AWS Systems Manager.\n"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('InstanceIdList'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_each_AWS_EC2_Hostname": {
                      "foreach": "@variables('HostnameList')",
                      "actions": {
                        "Condition_if_incident_Hostname_matches_AWS_EC2_hostname": {
                          "actions": {
                            "Append_to_array_-_InstanceIdList": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "InstanceIdList",
                                "value": "@string(items('For_each_AWS_EC2_Hostname')?['InstanceId'])"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@triggerBody()?['Entity']?['properties']?['HostName']",
                                  "@{items('For_each_AWS_EC2_Hostname')?['Hostname']}"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_Instance_get_hostname_and_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_AWS_Instance_get_hostname_and_private_ip": {
                      "foreach": "@body('Parse_JSON_-_GetInventory')?['Entities']",
                      "actions": {
                        "For_each_Instance_Entity": {
                          "foreach": "@items('For_each_AWS_Instance_get_hostname_and_private_ip')['Data']['AWS:InstanceInformation']['Content']",
                          "actions": {
                            "Condition_to_skip_Terminated_Instances": {
                              "actions": {
                                "Append_to_array_HostnameList": {
                                  "runAfter": {
                                    "Compose_InstanceId_Hostname_Pair": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "HostnameList",
                                    "value": "@outputs('Compose_InstanceId_Hostname_Pair')"
                                  }
                                },
                                "Compose_InstanceId_Hostname_Pair": {
                                  "type": "Compose",
                                  "inputs": {
                                    "Hostname": "@items('For_each_Instance_Entity')?['ComputerName']",
                                    "InstanceId": "@items('For_each_Instance_Entity')?['InstanceId']"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_Instance_Entity')?['InstanceStatus']",
                                        "Terminated"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_-_GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "GetInventory": {
                      "runAfter": {
                        "Initialize_variable_-_IncidentComment": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "function": {
                          "id": "/subscriptions/4383ac89-7cd1-48c1-8061-b0b3c5ccfd97/resourceGroups/awssystemsmanager/providers/Microsoft.Web/sites/AWSSystemsManager/functions/GetInventory"
                        }
                      }
                    },
                    "Initialize_Array_-_HostnameList": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "HostnameList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_InstanceIdList": {
                      "runAfter": {
                        "Initialize_Array_-_PrivateIPList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "InstanceIdList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_PrivateIPList": {
                      "runAfter": {
                        "Initialize_Array_-_HostnameList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PrivateIPList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_IncidentComment": {
                      "runAfter": {
                        "Initialize_variable_-_TempStatus": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentComment",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TempStatus": {
                      "runAfter": {
                        "Initialize_Array_-_InstanceIdList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TempStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_-_GetInventory": {
                      "runAfter": {
                        "GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('GetInventory')",
                        "schema": {
                          "properties": {
                            "Entities": {
                              "items": {
                                "properties": {
                                  "Data": {
                                    "properties": {
                                      "AWS:InstanceInformation": {
                                        "properties": {
                                          "CaptureTime": {
                                            "type": "string"
                                          },
                                          "Content": {
                                            "items": {
                                              "properties": {
                                                "AgentType": {
                                                  "type": "string"
                                                },
                                                "AgentVersion": {
                                                  "type": "string"
                                                },
                                                "ComputerName": {
                                                  "type": "string"
                                                },
                                                "InstanceId": {
                                                  "type": "string"
                                                },
                                                "InstanceStatus": {
                                                  "type": "string"
                                                },
                                                "IpAddress": {
                                                  "type": "string"
                                                },
                                                "PlatformName": {
                                                  "type": "string"
                                                },
                                                "PlatformType": {
                                                  "type": "string"
                                                },
                                                "PlatformVersion": {
                                                  "type": "string"
                                                },
                                                "ResourceType": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "SchemaVersion": {
                                            "type": "string"
                                          },
                                          "TypeName": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "Id": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ResponseMetadata": {
                              "properties": {
                                "HTTPHeaders": {
                                  "properties": {
                                    "connection": {
                                      "type": "string"
                                    },
                                    "content-length": {
                                      "type": "string"
                                    },
                                    "content-type": {
                                      "type": "string"
                                    },
                                    "date": {
                                      "type": "string"
                                    },
                                    "server": {
                                      "type": "string"
                                    },
                                    "x-amzn-requestid": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "HTTPStatusCode": {
                                  "type": "integer"
                                },
                                "RequestId": {
                                  "type": "string"
                                },
                                "RetryAttempts": {
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "AWS-SSM-StopManagedInstance-HostEntityTrigger",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId7'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId7')]",
                "contentId": "[variables('_playbookContentId7')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion7')]",
                "source": {
                  "kind": "Solution",
                  "name": "AWS Systems Manager",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_AWS_SSM_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "AWS Systems Manager - Stop Managed EC2 Instances Host Entity Trigger",
            "description": "This playbook can be used by SOC Analysts to stop malicious or compromised EC2 instances in AWS. The playbook can be triggered from a Host entity context in an incident. The playbook takes the Hostname and stops the managed EC2 instances using the Instance ID. The playbook also adds a comment to the incident with instance that was stopped.",
            "prerequisites": [
              "1. Prior to the deployment of this playbook, AWS Systems Manager Custom Connector needs to be deployed under the same subscription.",
              "2. Refer to [AWS Systems Manager Logic App Custom Connector](../../CustomConnector/AWS_SSM_FunctionAppConnector/readme.md) documentation for deployment instructions."
            ],
            "postDeployment": [
              "1. Authorize each connection.",
              "2. Assign Microsoft Sentinel Responder Role to Playbook.",
              "3. Update Function App Settings with AWS Credentials.",
              "4. Check readme.md for detailed instructions."
            ],
            "lastUpdateTime": "2023-05-30T12:00:00Z",
            "entities": [
              "Host"
            ],
            "tags": [
              "AWS",
              "Systems Manager"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId7')]",
        "contentKind": "Playbook",
        "displayName": "AWS-SSM-StopManagedInstance-HostEntityTrigger",
        "contentProductId": "[variables('_playbookcontentProductId7')]",
        "id": "[variables('_playbookcontentProductId7')]",
        "version": "[variables('playbookVersion7')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName8')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AWS-SSM-StopManagedInstance-IPEntityTrigger Playbook with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion8')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "AWS-SSM-StopManagedInstance-IPEntityTrigger",
              "type": "string"
            },
            "FunctionsAppName": {
              "defaultValue": "awsssm",
              "type": "string"
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
            "FunctionsAppName": "[[concat(parameters('FunctionsAppName'), uniqueString(resourceGroup().id))]",
            "AWSSSMFuntionsAppId": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('FunctionsAppName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_entity": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/entity/@{encodeURIComponent('IP')}"
                      }
                    }
                  },
                  "actions": {
                    "Append_to_IncidentComment_on_error": {
                      "runAfter": {
                        "GetInventory": [
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "IncidentComment",
                        "value": "Issue with Playbook exeution. Check the playbook for detailed error info. "
                      }
                    },
                    "Condition_to_check_if_IncidentArmID_exist": {
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['IncidentArmID']",
                              "message": "<p>@{variables('IncidentComment')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        }
                      },
                      "runAfter": {
                        "Append_to_IncidentComment_on_error": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ],
                        "Condition_to_check_if_any_instanceid": [
                          "Succeeded",
                          "TimedOut",
                          "Skipped",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@triggerBody()?['IncidentArmID']",
                                "@null"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_to_check_if_any_instanceid": {
                      "actions": {
                        "Append_to_IncidentComment_on_success": {
                          "runAfter": {
                            "DeleteDocument": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToStringVariable",
                          "inputs": {
                            "name": "IncidentComment",
                            "value": "AWS EC2 instance<strong>@{variables('InstanceIdList')}</strong> has been stopped.\n"
                          }
                        },
                        "Create_Automation_Shutdown_Document": {
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "Content": "{\r\n  \"description\": \"Stop EC2 instances(s)\",\r\n  \"schemaVersion\": \"0.3\",\r\n  \"assumeRole\": \"{{ AutomationAssumeRole }}\",\r\n  \"parameters\": {\r\n    \"InstanceId\": {\r\n      \"type\": \"StringList\",\r\n      \"description\": \"(Required) EC2 Instance(s) to stop\"\r\n    },\r\n    \"AutomationAssumeRole\": {\r\n      \"type\": \"String\",\r\n      \"description\": \"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\",\r\n      \"default\": \"\"\r\n    }\r\n  },\r\n  \"mainSteps\": [\r\n    {\r\n      \"name\": \"stopInstances\",\r\n      \"action\": \"aws:changeInstanceState\",\r\n      \"onFailure\": \"Continue\",\r\n      \"inputs\": {\r\n        \"InstanceIds\": \"{{ InstanceId }}\",\r\n        \"DesiredState\": \"stopped\"\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"forceStopInstances\",\r\n      \"action\": \"aws:changeInstanceState\",\r\n      \"inputs\": {\r\n        \"InstanceIds\": \"{{ InstanceId }}\",\r\n        \"CheckStateOnly\": false,\r\n        \"DesiredState\": \"stopped\",\r\n        \"Force\": true\r\n      }\r\n    }\r\n  ]\r\n}",
                              "DocumentFormat": "JSON",
                              "DocumentType": "Automation",
                              "Name": "@{concat('Sentinel-EC2-Shutdown-', string(rand(10000,99999)))}",
                              "VersionName": "1.0.0"
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/CreateDocument')]"
                            }
                          }
                        },
                        "DeleteDocument": {
                          "runAfter": {
                            "Wait_Until_Automation_Execution_is_complete": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "Force": "True",
                              "Name": "@{body('Parse_JSON_CreateDocument')?['DocumentDescription']?['Name']}"
                            },
                            "function": {
                              "id": "/subscriptions/4383ac89-7cd1-48c1-8061-b0b3c5ccfd97/resourceGroups/awssystemsmanager/providers/Microsoft.Web/sites/AWSSystemsManager/functions/DeleteDocument"
                            }
                          }
                        },
                        "GetAutomationExecution": {
                          "runAfter": {
                            "Sleep_for_10_seconds": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "AutomationExecutionId": "@{body('Parse_JSON_-_StartAutomationExecution')?['AutomationExecutionId']}"
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetAutomationExecution')]"
                            }
                          }
                        },
                        "Parse_JSON_-_GetAutomationExecution": {
                          "runAfter": {
                            "GetAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('GetAutomationExecution')",
                            "schema": {
                              "properties": {
                                "AutomationExecution": {
                                  "properties": {
                                    "AutomationExecutionId": {
                                      "type": "string"
                                    },
                                    "AutomationExecutionStatus": {
                                      "type": "string"
                                    },
                                    "DocumentName": {
                                      "type": "string"
                                    },
                                    "DocumentVersion": {
                                      "type": "string"
                                    },
                                    "ExecutedBy": {
                                      "type": "string"
                                    },
                                    "ExecutionEndTime": {
                                      "type": "string"
                                    },
                                    "ExecutionStartTime": {
                                      "type": "string"
                                    },
                                    "Mode": {
                                      "type": "string"
                                    },
                                    "Outputs": {
                                      "type": "object"
                                    },
                                    "Parameters": {
                                      "properties": {
                                        "InstanceId": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "ResolvedTargets": {
                                      "properties": {
                                        "ParameterValues": {
                                          "type": "array"
                                        },
                                        "Truncated": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "StepExecutionsTruncated": {
                                      "type": "boolean"
                                    },
                                    "Targets": {
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_JSON_-_StartAutomationExecution": {
                          "runAfter": {
                            "StartAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('StartAutomationExecution')",
                            "schema": {
                              "properties": {
                                "AutomationExecutionId": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Parse_JSON_CreateDocument": {
                          "runAfter": {
                            "Create_Automation_Shutdown_Document": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Create_Automation_Shutdown_Document')",
                            "schema": {
                              "properties": {
                                "DocumentDescription": {
                                  "properties": {
                                    "CreatedDate": {
                                      "type": "string"
                                    },
                                    "DefaultVersion": {
                                      "type": "string"
                                    },
                                    "Description": {
                                      "type": "string"
                                    },
                                    "DocumentFormat": {
                                      "type": "string"
                                    },
                                    "DocumentType": {
                                      "type": "string"
                                    },
                                    "DocumentVersion": {
                                      "type": "string"
                                    },
                                    "Hash": {
                                      "type": "string"
                                    },
                                    "HashType": {
                                      "type": "string"
                                    },
                                    "LatestVersion": {
                                      "type": "string"
                                    },
                                    "Name": {
                                      "type": "string"
                                    },
                                    "Owner": {
                                      "type": "string"
                                    },
                                    "Parameters": {
                                      "items": {
                                        "properties": {
                                          "DefaultValue": {
                                            "type": "string"
                                          },
                                          "Description": {
                                            "type": "string"
                                          },
                                          "Name": {
                                            "type": "string"
                                          },
                                          "Type": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "Name",
                                          "Type",
                                          "Description"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "PlatformTypes": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "SchemaVersion": {
                                      "type": "string"
                                    },
                                    "Status": {
                                      "type": "string"
                                    },
                                    "Tags": {
                                      "type": "array"
                                    },
                                    "VersionName": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "Set_variable_-_TempStatus": {
                          "runAfter": {
                            "Parse_JSON_-_GetAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "TempStatus",
                            "value": "@body('Parse_JSON_-_GetAutomationExecution')?['AutomationExecution']?['AutomationExecutionStatus']"
                          }
                        },
                        "Sleep_for_10_seconds": {
                          "runAfter": {
                            "Parse_JSON_-_StartAutomationExecution": [
                              "Succeeded"
                            ]
                          },
                          "type": "Wait",
                          "inputs": {
                            "interval": {
                              "count": 10,
                              "unit": "Second"
                            }
                          }
                        },
                        "StartAutomationExecution": {
                          "runAfter": {
                            "Parse_JSON_CreateDocument": [
                              "Succeeded"
                            ]
                          },
                          "type": "Function",
                          "inputs": {
                            "body": {
                              "DocumentName": "@{body('Parse_JSON_CreateDocument')?['DocumentDescription']?['Name']}",
                              "Parameters": {
                                "InstanceId": "@variables('InstanceIdList')"
                              }
                            },
                            "function": {
                              "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/StartAutomationExecution')]"
                            }
                          }
                        },
                        "Wait_Until_Automation_Execution_is_complete": {
                          "actions": {
                            "GetAutomationExecution_again": {
                              "type": "Function",
                              "inputs": {
                                "body": {
                                  "AutomationExecutionId": "@{body('Parse_JSON_-_StartAutomationExecution')?['AutomationExecutionId']}"
                                },
                                "function": {
                                  "id": "[[concat(variables('AWSSSMFuntionsAppId') ,'/functions/GetAutomationExecution')]"
                                }
                              }
                            },
                            "Parse_JSON_-_GetAutomationExecution_again": {
                              "runAfter": {
                                "GetAutomationExecution_again": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('GetAutomationExecution_again')",
                                "schema": {
                                  "properties": {
                                    "AutomationExecution": {
                                      "properties": {
                                        "AutomationExecutionId": {
                                          "type": "string"
                                        },
                                        "AutomationExecutionStatus": {
                                          "type": "string"
                                        },
                                        "DocumentName": {
                                          "type": "string"
                                        },
                                        "DocumentVersion": {
                                          "type": "string"
                                        },
                                        "ExecutedBy": {
                                          "type": "string"
                                        },
                                        "ExecutionEndTime": {
                                          "type": "string"
                                        },
                                        "ExecutionStartTime": {
                                          "type": "string"
                                        },
                                        "Mode": {
                                          "type": "string"
                                        },
                                        "Outputs": {
                                          "type": "object"
                                        },
                                        "Parameters": {
                                          "properties": {
                                            "InstanceId": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "ResolvedTargets": {
                                          "properties": {
                                            "ParameterValues": {
                                              "type": "array"
                                            },
                                            "Truncated": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "StepExecutionsTruncated": {
                                          "type": "boolean"
                                        },
                                        "Targets": {
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Reset_variable_-_TempStatus": {
                              "runAfter": {
                                "Sleep_again_for_10_seconds": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "TempStatus",
                                "value": "@body('Parse_JSON_-_GetAutomationExecution_again')?['AutomationExecution']?['AutomationExecutionStatus']"
                              }
                            },
                            "Sleep_again_for_10_seconds": {
                              "runAfter": {
                                "Parse_JSON_-_GetAutomationExecution_again": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Wait",
                              "inputs": {
                                "interval": {
                                  "count": 10,
                                  "unit": "Second"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_TempStatus": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('TempStatus'), 'Success')",
                          "limit": {
                            "count": 60,
                            "timeout": "PT10M"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_EC2_PrivateIP": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Append_to_IncidentComment": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "IncidentComment",
                              "value": "For IPAddress <strong>@{triggerBody()?['Entity']?['properties']?['Address']}</strong>, no matching EC2 instance found in AWS Systems Manager.\n"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@length(variables('InstanceIdList'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_each_AWS_EC2_PrivateIP": {
                      "foreach": "@variables('PrivateIPList')",
                      "actions": {
                        "Condition_If_IP_matches_with_PrivateIP": {
                          "actions": {
                            "Append_to_array_variable_InstanceIdList": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "InstanceIdList",
                                "value": "@string(items('For_each_AWS_EC2_PrivateIP')?['InstanceId'])"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@string(items('For_each_AWS_EC2_PrivateIP')?['PrivateIP'])",
                                  "@triggerBody()?['Entity']?['properties']?['Address']"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "For_each_AWS_Instance_get_private_ip": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_each_AWS_Instance_get_private_ip": {
                      "foreach": "@body('Parse_JSON_-_GetInventory')?['Entities']",
                      "actions": {
                        "For_each_Instance_Entity": {
                          "foreach": "@items('For_each_AWS_Instance_get_private_ip')['Data']['AWS:InstanceInformation']['Content']",
                          "actions": {
                            "Condition_to_skip_Terminated_Instances": {
                              "actions": {
                                "Append_to_array_PrivateIPList": {
                                  "runAfter": {
                                    "Compose_InstanceId_PrivateIP_Pair": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "PrivateIPList",
                                    "value": "@outputs('Compose_InstanceId_PrivateIP_Pair')"
                                  }
                                },
                                "Compose_InstanceId_PrivateIP_Pair": {
                                  "type": "Compose",
                                  "inputs": {
                                    "InstanceId": "@items('For_each_Instance_Entity')?['InstanceId']",
                                    "PrivateIP": "@items('For_each_Instance_Entity')?['IpAddress']"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_Instance_Entity')?['InstanceStatus']",
                                        "Terminated"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_-_GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "GetInventory": {
                      "runAfter": {
                        "Initialize_variable_-_IncidentComment": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "function": {
                          "id": "[[concat(variables('AWSSSMFuntionsAppId'), '/functions/GetInventory')]"
                        }
                      }
                    },
                    "Initialize_Array_-_InstanceIdList": {
                      "runAfter": {
                        "Initialize_Array_-_PrivateIPList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "InstanceIdList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Array_-_PrivateIPList": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "PrivateIPList",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_IncidentComment": {
                      "runAfter": {
                        "Initialize_variable_-_TempStatus": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IncidentComment",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TempStatus": {
                      "runAfter": {
                        "Initialize_Array_-_InstanceIdList": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TempStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_-_GetInventory": {
                      "runAfter": {
                        "GetInventory": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('GetInventory')",
                        "schema": {
                          "properties": {
                            "Entities": {
                              "items": {
                                "properties": {
                                  "Data": {
                                    "properties": {
                                      "AWS:InstanceInformation": {
                                        "properties": {
                                          "CaptureTime": {
                                            "type": "string"
                                          },
                                          "Content": {
                                            "items": {
                                              "properties": {
                                                "AgentType": {
                                                  "type": "string"
                                                },
                                                "AgentVersion": {
                                                  "type": "string"
                                                },
                                                "ComputerName": {
                                                  "type": "string"
                                                },
                                                "InstanceId": {
                                                  "type": "string"
                                                },
                                                "InstanceStatus": {
                                                  "type": "string"
                                                },
                                                "IpAddress": {
                                                  "type": "string"
                                                },
                                                "PlatformName": {
                                                  "type": "string"
                                                },
                                                "PlatformType": {
                                                  "type": "string"
                                                },
                                                "PlatformVersion": {
                                                  "type": "string"
                                                },
                                                "ResourceType": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "SchemaVersion": {
                                            "type": "string"
                                          },
                                          "TypeName": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "Id": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ResponseMetadata": {
                              "properties": {
                                "HTTPHeaders": {
                                  "properties": {
                                    "connection": {
                                      "type": "string"
                                    },
                                    "content-length": {
                                      "type": "string"
                                    },
                                    "content-type": {
                                      "type": "string"
                                    },
                                    "date": {
                                      "type": "string"
                                    },
                                    "server": {
                                      "type": "string"
                                    },
                                    "x-amzn-requestid": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "HTTPStatusCode": {
                                  "type": "integer"
                                },
                                "RequestId": {
                                  "type": "string"
                                },
                                "RetryAttempts": {
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "AWS-SSM-StopManagedInstance-IPEntityTrigger",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId8'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId8')]",
                "contentId": "[variables('_playbookContentId8')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion8')]",
                "source": {
                  "kind": "Solution",
                  "name": "AWS Systems Manager",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "tier": "Microsoft",
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "link": "https://support.microsoft.com/"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "kind": "AzureFunction",
                      "contentId": "[variables('_AWS_SSM_FunctionAppConnector')]",
                      "version": "[variables('playbookVersion1')]"
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "title": "AWS Systems Manager - Stop Managed EC2 Instances IP Entity Trigger",
            "description": "This playbook can be used by SOC Analysts to stop malicious or compromised EC2 instances in AWS. The playbook can be triggered from an IP entity context in an incident. The playbook takes the private IP and stops the managed EC2 instances using the Instance ID. The playbook also adds a comment to the incident with instance that was stopped.",
            "prerequisites": [
              "1. Prior to the deployment of this playbook, AWS Systems Manager Custom Connector needs to be deployed under the same subscription.",
              "2. Refer to [AWS Systems Manager Logic App Custom Connector](../../CustomConnector/AWS_SSM_FunctionAppConnector/readme.md) documentation for deployment instructions."
            ],
            "postDeployment": [
              "1. Authorize each connection.",
              "2. Assign Microsoft Sentinel Responder Role to Playbook.",
              "3. Update Function App Settings with AWS Credentials.",
              "4. Check readme.md for detailed instructions."
            ],
            "lastUpdateTime": "2023-05-30T12:00:00Z",
            "entities": [
              "IP"
            ],
            "tags": [
              "AWS",
              "Systems Manager"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId8')]",
        "contentKind": "Playbook",
        "displayName": "AWS-SSM-StopManagedInstance-IPEntityTrigger",
        "contentProductId": "[variables('_playbookcontentProductId8')]",
        "id": "[variables('_playbookcontentProductId8')]",
        "version": "[variables('playbookVersion8')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.1",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "AWS Systems Manager",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> <em>There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</em></p>\n<p><a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html\">AWS Systems Manager</a> is the operations hub for your AWS applications and resources and a secure end-to-end management solution for <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/operating-systems-and-machine-types.html#supported-machine-types\">hybrid and multicloud</a> environments that enables secure operations at scale. This solution helps to enhance your SOAR capabilities by integrating Sentinel with AWS manager.</p>\n<p><strong>Function Apps:</strong> 1, <strong>Playbooks:</strong> 7</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Solutions/AWS%20Systems%20Manager/Playbooks/aws-logo.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "AWS Systems Manager",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com/"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "AzureFunction",
              "contentId": "[variables('_AWS_SSM_FunctionAppConnector')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_AWS-SSM-GetInstancePatches')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_AWS-SSM-GetInstancePatches-HostEntityTrigger')]",
              "version": "[variables('playbookVersion3')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_AWS-SSM-GetInstancePatches-IPEntityTrigger')]",
              "version": "[variables('playbookVersion4')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_AWS-SSM-RunAutomationRunbook')]",
              "version": "[variables('playbookVersion5')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_AWS-SSM-StopManagedInstance')]",
              "version": "[variables('playbookVersion6')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_AWS-SSM-StopManagedInstance-HostEntityTrigger')]",
              "version": "[variables('playbookVersion7')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_AWS-SSM-StopManagedInstance-IPEntityTrigger')]",
              "version": "[variables('playbookVersion8')]"
            }
          ]
        },
        "providers": [
          "Amazon Web Services"
        ],
        "categories": {
          "domains": [
            "Security - Automation (SOAR)"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
