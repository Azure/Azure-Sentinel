{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Vectra Dynamic Resolve Assignment",
        "description": "When an incident is closed, This playbook will prompt the operator to select an outcome from a predefined list, choose detections to triage from associated detection IDs and name list, provide a resolution note, and label the triaged detections. Based on the provided input playbook will resolve the open assignment.",
        "prerequisites": [
            "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
            "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
            "a. Create a Key Vault with unique name",
            "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
            "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
            "3. Obtain Teams GroupId and ChannelId",
            "a. Create a Team with public channel.",
            "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
            "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
            "d. copy the text of groupId parameter from link to use as groupId. ",
            "4. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraDynamicResolveAssignment playbook."
        ],
        "postDeployment": [
            "**a. Authorize connections**",
            "Once deployment is complete, authorize each connection.",
            "1. Go to your logic app → API connections → Select keyvault connection resource",
            "2. Go to General → edit API connection",
            "3. Click Authorize",
            "4. Sign in",
            "5. Click Save",
            "6. Repeat steps for other connections",
            "**b. Add Access policy in Keyvault**",
            "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
            "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
            "2. Go to keyvaults → <your keyvault> → Access policies → create.",
            "3. Select all keys & secrets permissions. Click next.",
            "4. In the principal section, search by copied object ID. Click next.",
            "5. Click review + create.",
            "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
            "**c. Configurations in Microsoft Sentinel**",
            "1. In Microsoft Sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
            "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
            "a. Go to Microsoft Sentinel → <your workspace> → Automation",
            "b. Click on Create → Automation rule",
            "c. Provide name for your rule",
            "d. Select Trigger as When incident is updated.",
            "e. In Conditions, select Status Equals 'Closed'.",
            "f. In Actions dropdown select Run playbook",
            "g. In second dropdown select your deployed playbook",
            "h. Click on Apply",
            "i. Save the Automation rule.",
            "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
            "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
            "b. Select an incident.",
            "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
            "d. click on the Run button beside this playbook."
        ],
        "entities": ["Account", "Host"],
        "tags": ["Vectra", "Dynamic", "Resolve", "Assignment", "Triage", "Active", "Detections"],
        "support": {
            "tier": "community",
            "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author": {
            "name": "Vectra"
        },
        "lastUpdateTime": "2024-09-02T00:00:00.000Z"
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "VectraDynamicResolveAssignment",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
            }
        },
        "KeyVaultName": {
            "type": "string",
            "minLength": 1
        },
        "TenantId": {
            "type": "string",
            "minLength": 1
        },
        "BaseURL": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
            }
        },
        "TeamsGroupId": {
            "type": "string",
            "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
            }
        },
        "TeamsChannelId": {
            "type": "string",
            "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
            }
        },
        "GenerateAccessCredPlaybookName": {
            "type": "string",
            "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
            }
        }
    },
    "variables": {
        "MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
        "KeyvaultConnectionName": "[concat('Keyvault-', trim(parameters('PlaybookName')))]",
        "TeamsConnectionName": "[concat('Teams-', trim(parameters('PlaybookName')))]"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Condition_To_Decide_Adaptive_Card_Schema_Based_On_Number_Of_Active_Detections": {
                            "actions": {
                                "Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs": {
                                    "runAfter": {},
                                    "type": "ApiConnectionWebhook",
                                    "inputs": {
                                        "body": {
                                            "body": {
                                                "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"style\": \"positive\",\n            \"id\": \"submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Dynamic Resolve Assignment in Vectra\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"No Active Detections Found Associated With An Entity To Traige\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"attention\",\n            \"separator\": true,\n            \"id\": \"detection-choice\"\n        },\n        {\n            \"id\": \"outcome-choice\",\n            \"choices\": [{\n                \"title\": \"1\",\n                \"value\": \"1\"\n            }],\n            \"type\": \"Input.ChoiceSet\",\n            \"isRequired\": true,\n            \"label\": \"Please select any outcome.\",\n            \"errorMessage\": \"Please select any outcome first.\"\n        },\n        {\n            \"id\": \"note-text\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter resolution note\",\n            \"isRequired\": true,\n            \"label\": \"Please add resolution note.\",\n            \"errorMessage\": \"Please enter resolution note.\",\n            \"isMultiline\": true\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                                "recipient": {
                                                    "channelId": "[trim(parameters('TeamsChannelId'))]",
                                                    "groupId": "[trim(parameters('TeamsGroupId'))]"
                                                },
                                                "updateMessage": "Thanks for your response!"
                                            },
                                            "notificationUrl": "@{listCallbackUrl()}"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['teams']['connectionId']"
                                            }
                                        },
                                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                    }
                                },
                                "Set_Label_From_User_Input_For_No_Active_Detections_Found_To_Triage": {
                                    "runAfter": {
                                        "Set_Outcome_From_User_Selection_For_No_Active_Detections_Found_To_Triage": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "triage_as",
                                        "value": "@{body('Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs')?['data']?['label-text']}"
                                    }
                                },
                                "Set_Outcome_From_User_Selection_For_No_Active_Detections_Found_To_Triage": {
                                    "runAfter": {
                                        "Set_Resolution_Note_From_User_Input_For_No_Active_Detections_Found_To_Triage": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "user_outcome",
                                        "value": "@int(body('Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs')?['data']?['outcome-choice'])"
                                    }
                                },
                                "Set_Resolution_Note_From_User_Input_For_No_Active_Detections_Found_To_Triage": {
                                    "runAfter": {
                                        "Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "note",
                                        "value": "@{body('Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs')?['data']?['note-text']}"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_Any_Entity_Data_Fetch_Error": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Condition_To_Not_Update_Detection_ID_Array_If_User_Provided_Detections_To_Triage": {
                                        "actions": {
                                            "Set_Detection_ID_Array_Empty": {
                                                "runAfter": {},
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "detections",
                                                    "value": []
                                                }
                                            }
                                        },
                                        "runAfter": {
                                            "Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment": [
                                                "Succeeded"
                                            ]
                                        },
                                        "else": {
                                            "actions": {
                                                "Set_Detections_ID_Array_From_User_Selection": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "detections",
                                                        "value": "@split(body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['detections-choice'], ',')"
                                                    }
                                                }
                                            }
                                        },
                                        "expression": {
                                            "and": [
                                                {
                                                    "equals": [
                                                        "@body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['detections-choice']",
                                                        "@null"
                                                    ]
                                                }
                                            ]
                                        },
                                        "type": "If"
                                    },
                                    "Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment": {
                                        "runAfter": {},
                                        "type": "ApiConnectionWebhook",
                                        "inputs": {
                                            "body": {
                                                "body": {
                                                    "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"style\": \"positive\",\n            \"id\": \"submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Dynamic Resolve Assignment in Vectra\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"id\": \"detections-choice\",\n            \"choices\": @{variables('detections')},\n            \"type\": \"Input.ChoiceSet\",\n            \"isMultiSelect\": true,\n            \"label\": \"Please select detections to triage.\",\n            \"separator\": true\n        },\n        {\n            \"id\": \"outcome-choice\",\n            \"choices\": @{variables('outcome_list')},\n            \"type\": \"Input.ChoiceSet\",\n            \"isRequired\": true,\n            \"label\": \"Please select any outcome.\",\n            \"errorMessage\": \"Please select any outcome first.\"\n        },\n        {\n            \"id\": \"note-text\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter resolution note\",\n            \"isRequired\": true,\n            \"label\": \"Please add resolution note.\",\n            \"errorMessage\": \"Please enter resolution note.\",\n            \"isMultiline\": true\n        },\n        {\n            \"id\": \"label-text\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter label for triaged detections\",\n            \"isRequired\": true,\n            \"label\": \"Please add label for triaged detections.\",\n            \"errorMessage\": \"Please enter label for triaged detections.\",\n            \"isMultiline\": true\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                                    "recipient": {
                                                        "channelId": "[trim(parameters('TeamsChannelId'))]",
                                                        "groupId": "[trim(parameters('TeamsGroupId'))]"
                                                    },
                                                    "updateMessage": "Thanks for your response!"
                                                },
                                                "notificationUrl": "@{listCallbackUrl()}"
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['teams']['connectionId']"
                                                }
                                            },
                                            "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                        }
                                    },
                                    "Set_Label_For_Triaged_Detections_From_User_Input": {
                                        "runAfter": {
                                            "Set_Outcome_From_User_Selection": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "triage_as",
                                            "value": "@{body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['label-text']}"
                                        }
                                    },
                                    "Set_Outcome_From_User_Selection": {
                                        "runAfter": {
                                            "Set_Resolution_Note_From_User_Input": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "user_outcome",
                                            "value": "@int(body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['outcome-choice'])"
                                        }
                                    },
                                    "Set_Resolution_Note_From_User_Input": {
                                        "runAfter": {
                                            "Condition_To_Not_Update_Detection_ID_Array_If_User_Provided_Detections_To_Triage": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "note",
                                            "value": "@{body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['note-text']}"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@length(variables('detections'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Decide_Body_For_Resolve_Assignment_Operation_Based_On_Detections": {
                            "actions": {
                                "Set_Resolve_Request_Body_For_Empty_Detections": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "resolve_request_body",
                                        "value": {
                                            "note": "@variables('note')",
                                            "outcome": "@variables('user_outcome')"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Set_Retry_Count_For_Resolve_Assignment": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Set_Resolve_Request_Body_For_User_Selected_Detections": {
                                        "runAfter": {},
                                        "type": "SetVariable",
                                        "inputs": {
                                            "name": "resolve_request_body",
                                            "value": {
                                                "detection_ids": "@variables('detections')",
                                                "note": "@variables('note')",
                                                "outcome": "@variables('user_outcome')",
                                                "triage_as": "@variables('triage_as')"
                                            }
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@empty(variables('detections'))",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Perform_Next_Actions_Based_On_Entity_Type": {
                            "actions": {
                                "Until_Retry_Count_is_Zero_For_Host_Entity": {
                                    "actions": {
                                        "Condition_To_Verify_Host_Entity_Data_Fetched_Succcessfully": {
                                            "actions": {
                                                "Condition_To_Verify_If_No_Open_Assignment_Found_For_Host_Entity": {
                                                    "actions": {
                                                        "Set_No_Open_Assignment_Found_True": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "no_open_assignment",
                                                                "value": "@true"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Parse_JSON_For_Associated_Host_Entity_Data": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "else": {
                                                        "actions": {
                                                            "Set_Assignment_ID_For_Host_Entity": {
                                                                "runAfter": {},
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "assignment_id",
                                                                    "value": "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']?['id']"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "equals": [
                                                                    "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']",
                                                                    "@null"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "Parse_JSON_For_Associated_Host_Entity_Data": {
                                                    "runAfter": {},
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@body('HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity')",
                                                        "schema": {
                                                            "properties": {
                                                                "account_access_history": {
                                                                    "items": {
                                                                        "properties": {},
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "active_traffic": {
                                                                    "type": "boolean"
                                                                },
                                                                "assigned_date": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "assigned_to": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "assignment": {
                                                                    "properties": {
                                                                        "account_id": {
                                                                            "type": [
                                                                                "integer",
                                                                                "null"
                                                                            ]
                                                                        },
                                                                        "assigned_by": {
                                                                            "properties": {
                                                                                "id": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "username": {
                                                                                    "type": [
                                                                                        "string",
                                                                                        "null"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        },
                                                                        "assigned_to": {
                                                                            "properties": {
                                                                                "id": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "username": {
                                                                                    "type": [
                                                                                        "string",
                                                                                        "null"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            "type": [
                                                                                "object",
                                                                                "null"
                                                                            ]
                                                                        },
                                                                        "date_assigned": {
                                                                            "type": "string"
                                                                        },
                                                                        "date_resolved": {
                                                                            "type": [
                                                                                "string",
                                                                                "null"
                                                                            ]
                                                                        },
                                                                        "events": {
                                                                            "items": {
                                                                                "properties": {
                                                                                    "actor": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "assignment_id": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "context": {
                                                                                        "properties": {
                                                                                            "entity_c_score": {
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "entity_t_score": {
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "from": {
                                                                                                "type": "integer"
                                                                                            },
                                                                                            "to": {
                                                                                                "type": "integer"
                                                                                            }
                                                                                        },
                                                                                        "type": [
                                                                                            "object",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "datetime": {
                                                                                        "type": [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "event_type": {
                                                                                        "type": [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "assignment_id",
                                                                                    "actor",
                                                                                    "event_type",
                                                                                    "datetime",
                                                                                    "context"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": [
                                                                                "array",
                                                                                "null"
                                                                            ]
                                                                        },
                                                                        "host_id": {
                                                                            "type": [
                                                                                "integer"
                                                                            ]
                                                                        },
                                                                        "id": {
                                                                            "type": "integer"
                                                                        },
                                                                        "outcome": {
                                                                            "type": "null"
                                                                        },
                                                                        "resolved_by": {
                                                                            "type": "null"
                                                                        },
                                                                        "triaged_detections": {
                                                                            "properties": {},
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": [
                                                                        "object",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "c_score": {
                                                                    "type": "integer"
                                                                },
                                                                "campaign_summaries": {},
                                                                "certainty": {
                                                                    "type": "integer"
                                                                },
                                                                "detection_profile": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "detection_set": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "detection_summaries": {
                                                                    "items": {
                                                                        "properties": {},
                                                                        "type": "object"
                                                                    },
                                                                    "type": [
                                                                        "array",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "edrs": {},
                                                                "groups": {
                                                                    "items": {
                                                                        "properties": {},
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "has_active_traffic": {
                                                                    "type": "boolean"
                                                                },
                                                                "has_custom_model": {
                                                                    "type": "boolean"
                                                                },
                                                                "has_shell_knocker_learnings": {
                                                                    "type": "boolean"
                                                                },
                                                                "host_artifact_set": {},
                                                                "host_luid": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "host_session_luids": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": [
                                                                        "array",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "id": {
                                                                    "type": "integer"
                                                                },
                                                                "ip": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "is_key_asset": {
                                                                    "type": "boolean"
                                                                },
                                                                "is_targeting_key_asset": {
                                                                    "type": "boolean"
                                                                },
                                                                "key_asset": {
                                                                    "type": "boolean"
                                                                },
                                                                "last_detection_timestamp": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "last_modified": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "last_seen": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "last_source": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "name": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "note": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "note_modified_by": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "note_modified_timestamp": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "notes": {
                                                                    "items": {
                                                                        "properties": {},
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "past_assignments": {
                                                                    "items": {
                                                                        "properties": {},
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "previous_ips": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": [
                                                                        "array",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "privilege_category": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "privilege_level": {
                                                                    "type": [
                                                                        "integer",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "probable_owner": {},
                                                                "roles": {},
                                                                "sensor": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "sensor_name": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "service_access_history": {
                                                                    "items": {
                                                                        "properties": {},
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "severity": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "shell_knocker": {},
                                                                "state": {
                                                                    "type": [
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "suspicious_admin_learnings": {
                                                                    "properties": {},
                                                                    "type": "object"
                                                                },
                                                                "t_score": {
                                                                    "type": "integer"
                                                                },
                                                                "tags": {
                                                                    "items": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": [
                                                                        "array",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "targets_key_asset": {
                                                                    "type": "boolean"
                                                                },
                                                                "threat": {
                                                                    "type": "integer"
                                                                },
                                                                "url": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "Set_Retry_Count_As_Zero_For_Host_Entity_Data": {
                                                    "runAfter": {
                                                        "Condition_To_Verify_If_No_Open_Assignment_Found_For_Host_Entity": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "retry_count",
                                                        "value": 0
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity": [
                                                    "Succeeded",
                                                    "TimedOut",
                                                    "Failed"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Condition_To_Generate_New_Access_Token_For_Host_Entity": {
                                                        "actions": {
                                                            "Condition_To_Verify_Access_Token_Generated_Successfully_For_Host_Entity": {
                                                                "actions": {
                                                                    "Decrement_Retry_Count_For_Host_Entity": {
                                                                        "runAfter": {},
                                                                        "type": "DecrementVariable",
                                                                        "inputs": {
                                                                            "name": "retry_count",
                                                                            "value": 1
                                                                        }
                                                                    }
                                                                },
                                                                "runAfter": {
                                                                    "GenerateAccessTokenVectra_3": [
                                                                        "Succeeded",
                                                                        "TimedOut",
                                                                        "Failed"
                                                                    ]
                                                                },
                                                                "else": {
                                                                    "actions": {
                                                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Host_Entity": {
                                                                            "runAfter": {
                                                                                "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "DecrementVariable",
                                                                            "inputs": {
                                                                                "name": "retry_count",
                                                                                "value": 1
                                                                            }
                                                                        },
                                                                        "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": {
                                                                            "runAfter": {},
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "access_token_generate_error",
                                                                                "value": "@true"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "expression": {
                                                                    "and": [
                                                                        {
                                                                            "equals": [
                                                                                "@body('GenerateAccessTokenVectra_3')?['status']",
                                                                                "success"
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "type": "If"
                                                            },
                                                            "GenerateAccessTokenVectra_3": {
                                                                "runAfter": {},
                                                                "type": "Workflow",
                                                                "inputs": {
                                                                    "host": {
                                                                        "triggerName": "manual",
                                                                        "workflow": {
                                                                            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "else": {
                                                            "actions": {
                                                                "Set_Host_Entity_Data_Fetch_Error_True": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "fetch_error",
                                                                        "value": "@true"
                                                                    }
                                                                },
                                                                "Set_Retry_Count_As_Zero_For_Host_Entity_Data_Fetch_Error": {
                                                                    "runAfter": {
                                                                        "Set_Host_Entity_Data_Fetch_Error_True": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "retry_count",
                                                                        "value": 0
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@outputs('HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity')['statusCode']",
                                                                        401
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@outputs('HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity')['statusCode']",
                                                            200
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Get_Access_Token_For_Host_Entity": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                            },
                                            "runtimeConfiguration": {
                                                "secureData": {
                                                    "properties": [
                                                        "inputs",
                                                        "outputs"
                                                    ]
                                                }
                                            }
                                        },
                                        "HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity": {
                                            "runAfter": {
                                                "Get_Access_Token_For_Host_Entity": [
                                                    "Succeeded",
                                                    "Failed"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "Bearer @{body('Get_Access_Token_For_Host_Entity')?['value']}"
                                                },
                                                "method": "GET",
                                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/hosts/@{int(variables('entity_id'))}"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": "@equals(variables('retry_count'), 0)",
                                    "limit": {
                                        "timeout": "PT1H"
                                    },
                                    "type": "Until"
                                }
                            },
                            "runAfter": {
                                "Set_Retry_Count_For_Associated_Entity_Data_Fetch": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Until_Retry_Count_is_Zero_For_Account_Entity": {
                                        "actions": {
                                            "Condition_To_Verify_Account_Data_Fetched_Successfully": {
                                                "actions": {
                                                    "Condition_To_Verify_If_No_Open_Assignment_Found_For_Account_Entity": {
                                                        "actions": {
                                                            "Set_No_Open_Assignment_True_For_Account_Entity": {
                                                                "runAfter": {},
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "no_open_assignment",
                                                                    "value": "@true"
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Parse_JSON_For_Associated_Account_Entity_Data": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Set_Assignment_ID_For_Account_Entity": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "assignment_id",
                                                                        "value": "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']?['id']"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']",
                                                                        "@null"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "Parse_JSON_For_Associated_Account_Entity_Data": {
                                                        "runAfter": {},
                                                        "type": "ParseJson",
                                                        "inputs": {
                                                            "content": "@body('HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity')",
                                                            "schema": {
                                                                "properties": {
                                                                    "account_type": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "assignment": {
                                                                        "properties": {
                                                                            "account_id": {
                                                                                "type": [
                                                                                    "integer",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "assigned_by": {
                                                                                "properties": {
                                                                                    "id": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "username": {
                                                                                        "type": [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                "type": [
                                                                                    "object",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "assigned_to": {
                                                                                "properties": {
                                                                                    "id": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "username": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": [
                                                                                    "object",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "date_assigned": {
                                                                                "type": "string"
                                                                            },
                                                                            "date_resolved": {
                                                                                "type": [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "events": {
                                                                                "items": {
                                                                                    "properties": {},
                                                                                    "type": "object"
                                                                                },
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "host_id": {
                                                                                "items": {
                                                                                    "type": "integer"
                                                                                },
                                                                                "type": [
                                                                                    "array",
                                                                                    "integer",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "id": {
                                                                                "type": "integer"
                                                                            },
                                                                            "outcome": {
                                                                                "type": "null"
                                                                            },
                                                                            "resolved_by": {
                                                                                "type": "null"
                                                                            },
                                                                            "triaged_detections": {
                                                                                "properties": {},
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": [
                                                                            "object",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "certainty": {
                                                                        "type": "integer"
                                                                    },
                                                                    "data_source": {
                                                                        "properties": {},
                                                                        "type": [
                                                                            "object",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "detection_set": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "detection_summaries": {
                                                                        "items": {
                                                                            "properties": {},
                                                                            "type": "object"
                                                                        },
                                                                        "type": [
                                                                            "array",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "id": {
                                                                        "type": "integer"
                                                                    },
                                                                    "last_detection_timestamp": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "note": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "note_modified_by": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "note_modified_timestamp": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "notes": {
                                                                        "items": {
                                                                            "properties": {},
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "past_assignments": {
                                                                        "items": {
                                                                            "properties": {},
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "privilege_category": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "privilege_level": {
                                                                        "type": [
                                                                            "integer",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "probable_home": {},
                                                                    "sensors": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": [
                                                                            "array",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "severity": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "state": {
                                                                        "type": "string"
                                                                    },
                                                                    "subaccounts": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": [
                                                                            "array",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "tags": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "threat": {
                                                                        "type": "integer"
                                                                    },
                                                                    "url": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        }
                                                    },
                                                    "Set_Retry_Count_As_Zero_For_Account_Entity_Data": {
                                                        "runAfter": {
                                                            "Condition_To_Verify_If_No_Open_Assignment_Found_For_Account_Entity": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "retry_count",
                                                            "value": 0
                                                        }
                                                    }
                                                },
                                                "runAfter": {
                                                    "HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity": [
                                                        "Succeeded",
                                                        "TimedOut",
                                                        "Failed"
                                                    ]
                                                },
                                                "else": {
                                                    "actions": {
                                                        "Condition_To_Generate_Access_Token_For_Account_Entity": {
                                                            "actions": {
                                                                "Condition_To_Verify_Access_Token_Generated_Successfully_For_Account_Entity": {
                                                                    "actions": {
                                                                        "Decrement_Retry_Count_For_Account_Entity": {
                                                                            "runAfter": {},
                                                                            "type": "DecrementVariable",
                                                                            "inputs": {
                                                                                "name": "retry_count",
                                                                                "value": 1
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "GenerateAccessTokenVectra_4": [
                                                                            "Succeeded",
                                                                            "TimedOut",
                                                                            "Failed"
                                                                        ]
                                                                    },
                                                                    "else": {
                                                                        "actions": {
                                                                            "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Account_Entity": {
                                                                                "runAfter": {
                                                                                    "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": [
                                                                                        "Succeeded"
                                                                                    ]
                                                                                },
                                                                                "type": "DecrementVariable",
                                                                                "inputs": {
                                                                                    "name": "retry_count",
                                                                                    "value": 1
                                                                                }
                                                                            },
                                                                            "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": {
                                                                                "runAfter": {},
                                                                                "type": "SetVariable",
                                                                                "inputs": {
                                                                                    "name": "access_token_generate_error",
                                                                                    "value": "@true"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "equals": [
                                                                                    "@body('GenerateAccessTokenVectra_4')?['status']",
                                                                                    "success"
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "GenerateAccessTokenVectra_4": {
                                                                    "runAfter": {},
                                                                    "type": "Workflow",
                                                                    "inputs": {
                                                                        "host": {
                                                                            "triggerName": "manual",
                                                                            "workflow": {
                                                                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {},
                                                            "else": {
                                                                "actions": {
                                                                    "Set_Account_Entity_Data_Fetch_Error_True": {
                                                                        "runAfter": {},
                                                                        "type": "SetVariable",
                                                                        "inputs": {
                                                                            "name": "fetch_error",
                                                                            "value": "@true"
                                                                        }
                                                                    },
                                                                    "Set_Retry_Count_As_Zero_For_Account_Entity_Data_Fetch_Error": {
                                                                        "runAfter": {
                                                                            "Set_Account_Entity_Data_Fetch_Error_True": [
                                                                                "Succeeded"
                                                                            ]
                                                                        },
                                                                        "type": "SetVariable",
                                                                        "inputs": {
                                                                            "name": "retry_count",
                                                                            "value": 0
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "expression": {
                                                                "and": [
                                                                    {
                                                                        "equals": [
                                                                            "@outputs('HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity')['statusCode']",
                                                                            401
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "type": "If"
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "equals": [
                                                                "@outputs('HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity')['statusCode']",
                                                                200
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            },
                                            "Get_Access_Token_For_Account_Entity": {
                                                "runAfter": {},
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                                        }
                                                    },
                                                    "method": "get",
                                                    "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                                },
                                                "runtimeConfiguration": {
                                                    "secureData": {
                                                        "properties": [
                                                            "inputs",
                                                            "outputs"
                                                        ]
                                                    }
                                                }
                                            },
                                            "HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity": {
                                                "runAfter": {
                                                    "Get_Access_Token_For_Account_Entity": [
                                                        "Succeeded",
                                                        "Failed"
                                                    ]
                                                },
                                                "type": "Http",
                                                "inputs": {
                                                    "headers": {
                                                        "Authorization": "Bearer @{body('Get_Access_Token_For_Account_Entity')?['value']}"
                                                    },
                                                    "method": "GET",
                                                    "uri": "@{variables('base_url')}/api/@{variables('api_version')}/accounts/@{int(variables('entity_id'))}"
                                                }
                                            }
                                        },
                                        "runAfter": {},
                                        "expression": "@equals(variables('retry_count'), 0)",
                                        "limit": {
                                            "timeout": "PT1H"
                                        },
                                        "type": "Until"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('entity_type')",
                                            "host"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_Execution_If_Any_Active_Detections_Data_Fetch_Error": {
                            "actions": {
                                "Terminate_Due_To_Error_While_Fetching_Active_Detections": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "@{outputs('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')['statusCode']}",
                                            "message": "@{body('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')}"
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Active_Detections": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                            "actions": {
                                "Terminate_Due_To_No_Alerts_Found": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "No Alerts found associated with this Incident."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_No_Open_Assignment_Found_As_False": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_Execution_If_No_Assignment_Outcomes_Found": {
                            "actions": {
                                "Post_Message_For_No_Assignment_Outcomes_Found": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "messageBody": "<p><strong>No Assignment Outcomes found.</strong></p>",
                                            "recipient": {
                                                "channelId": "[trim(parameters('TeamsChannelId'))]",
                                                "groupId": "[trim(parameters('TeamsGroupId'))]"
                                            }
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['teams']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                                    }
                                },
                                "Terminate_Due_To_No_Assignment_Outcomes_Found": {
                                    "runAfter": {
                                        "Post_Message_For_No_Assignment_Outcomes_Found": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Succeeded"
                                    }
                                }
                            },
                            "runAfter": {
                                "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Assignment_Outcomes": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('data_count')",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Any_Assignment_Outcomes_Data_Fetch_Error": {
                            "actions": {
                                "Terminate_Due_To_Failure_While_Fetching_Assignment_Outcomes": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "@{outputs('HTTP_Request_To_Fetch_Assignment_Outcomes')['statusCode']}",
                                            "message": "@{body('HTTP_Request_To_Fetch_Assignment_Outcomes')}"
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_Execution_If_No_Assignment_Outcomes_Found": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Any_Entity_Data_Fetch_Error": {
                            "actions": {
                                "Terminate_Due_To_Failure_While_Fetching_Associated_Entity": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "Error occurred while fetching associated host entity data."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Any_Error_Occurred_While_Resolving_Assignment": {
                            "actions": {
                                "Terminate_Due_To_Error_Occurred_While_Resolving_Assignment": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "@{outputs('HTTP_Request_To_Resolve_Assignment')['statusCode']}",
                                            "message": "@{body('HTTP_Request_To_Resolve_Assignment')}"
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Until_Retry_Count_is_Zero_For_Resolve_Assignment": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Detections": {
                            "actions": {
                                "Terminate_Due_To_Failure_While_Generating_Access_Token_For_Detections": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "Error occurred while generating access token for active detections."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_Execution_If_Any_Active_Detections_Data_Fetch_Error": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('access_token_generate_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": {
                            "actions": {
                                "Terminate_Due_To_Failure_While_Generating_Token_For_Associated_Entity_Data": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "Error occurred while generating access token for associated entity."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_No_Open_Assignment_Found": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('access_token_generate_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Outcomes": {
                            "actions": {
                                "Terminate_Due_To_Error_Occurred_While_Generating_Token_For_Outcomes": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "Error occurred while generating access token for assignment outcomes."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_Any_Assignment_Outcomes_Data_Fetch_Error": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('access_token_generate_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Resolve": {
                            "actions": {
                                "Terminate_Due_To_Error_While_Generating_Token_For_Resolving_Assignment": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "Error occurred while generating access token for resolving assignment."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_Any_Error_Occurred_While_Resolving_Assignment": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('access_token_generate_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_No_Open_Assignment_Found": {
                            "actions": {
                                "Post_Message_For_No_Open_Assignment_Found_For_Associated_Account_Entity": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "messageBody": "<p><strong>No Open Assignment found</strong> for Entity ID: @{variables('entity_id')} and Type: @{variables('entity_type')}.</p>",
                                            "recipient": {
                                                "channelId": "[trim(parameters('TeamsChannelId'))]",
                                                "groupId": "[trim(parameters('TeamsGroupId'))]"
                                            }
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['teams']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                                    }
                                },
                                "Terminate_Due_To_No_Open_Assignment_Found_For_Associated_Entity": {
                                    "runAfter": {
                                        "Post_Message_For_No_Open_Assignment_Found_For_Associated_Account_Entity": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Succeeded"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Perform_Next_Actions_Based_On_Entity_Type": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('no_open_assignment')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_API_Version": {
                            "runAfter": {
                                "Initialize_Base_URL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api_version",
                                        "type": "string",
                                        "value": "v3.3"
                                    }
                                ]
                            }
                        },
                        "Initialize_Assignment_ID": {
                            "runAfter": {
                                "Initialize_Resolve_Request_Body": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "assignment_id",
                                        "type": "integer"
                                    }
                                ]
                            }
                        },
                        "Initialize_Assignment_Outcome_Count": {
                            "runAfter": {
                                "Initialize_Retry_Count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "data_count",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "Initialize_Base_URL": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "base_url",
                                        "type": "string",
                                        "value": "[trim(parameters('BaseURL'))]"
                                    }
                                ]
                            }
                        },
                        "Initialize_Break_Loop": {
                            "runAfter": {
                                "Initialize_Page_Number": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "break_loop",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Data_Fetch_Error_False": {
                            "runAfter": {
                                "Initialize_User_Selected_Outcome": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "fetch_error",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Detection_Object": {
                            "runAfter": {
                                "Initialize_Entity_ID": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "detection_id",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "Initialize_Detections_Array": {
                            "runAfter": {
                                "Initialize_Detection_Object": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "detections",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_Entity_ID": {
                            "runAfter": {
                                "Initialize_Entity_Type": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "entity_id",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Entity_Type": {
                            "runAfter": {
                                "Initialize_API_Version": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "entity_type",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Error_False_While_Generating_Access_Token": {
                            "runAfter": {
                                "Initialize_Data_Fetch_Error_False": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "access_token_generate_error",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Label_For_Triaged_Detections": {
                            "runAfter": {
                                "Initialize_Resolution_Note": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "triage_as",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_No_Open_Assignment_Found_As_False": {
                            "runAfter": {
                                "Initialize_Error_False_While_Generating_Access_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "no_open_assignment",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Outcome": {
                            "runAfter": {
                                "Initialize_Break_Loop": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "outcome",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "Initialize_Outcome_List": {
                            "runAfter": {
                                "Initialize_Outcome": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "outcome_list",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_Page_Number": {
                            "runAfter": {
                                "Initialize_Assignment_ID": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "page",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "Initialize_Resolution_Note": {
                            "runAfter": {
                                "Initialize_Assignment_Outcome_Count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "note",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Resolve_Request_Body": {
                            "runAfter": {
                                "Initialize_Detections_Array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "resolve_request_body",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "Initialize_Retry_Count": {
                            "runAfter": {
                                "Initialize_Outcome_List": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "retry_count",
                                        "type": "integer",
                                        "value": 2
                                    }
                                ]
                            }
                        },
                        "Initialize_User_Selected_Outcome": {
                            "runAfter": {
                                "Initialize_Label_For_Triaged_Detections": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "user_outcome",
                                        "type": "integer"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                            "runAfter": {
                                "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                                "schema": {
                                    "properties": {
                                        "entity_id": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "entity_type": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "tags": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "attack_profile": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "entity_importance": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "ip_address": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "detection_id": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "mitre_techniques": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "entity_id",
                                        "entity_type"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "Set_Break_Loop_False_For_Assignment_Outcomes": {
                            "runAfter": {
                                "Set_Page_Number_For_Assignment_Outcomes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "break_loop",
                                "value": "@false"
                            }
                        },
                        "Set_Data_Fetch_Error_False_For_Assignment_Outcomes": {
                            "runAfter": {
                                "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Detections": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "fetch_error",
                                "value": "@false"
                            }
                        },
                        "Set_Data_Fetch_Error_False_For_Associated_Entity_Data_Fetch": {
                            "runAfter": {
                                "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Outcomes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "fetch_error",
                                "value": "@false"
                            }
                        },
                        "Set_Data_Fetch_Error_False_For_Resolve_Assignment": {
                            "runAfter": {
                                "Condition_To_Decide_Adaptive_Card_Schema_Based_On_Number_Of_Active_Detections": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "fetch_error",
                                "value": "@false"
                            }
                        },
                        "Set_Entity_ID": {
                            "runAfter": {
                                "Set_Entity_Type": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "entity_id",
                                "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                            }
                        },
                        "Set_Entity_Type": {
                            "runAfter": {
                                "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "entity_type",
                                "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                            }
                        },
                        "Set_Page_Number_For_Assignment_Outcomes": {
                            "runAfter": {
                                "Set_Retry_Count_For_Assignment_Outcomes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "page",
                                "value": 1
                            }
                        },
                        "Set_Retry_Count_For_Assignment_Outcomes": {
                            "runAfter": {
                                "Set_Data_Fetch_Error_False_For_Assignment_Outcomes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "retry_count",
                                "value": 2
                            }
                        },
                        "Set_Retry_Count_For_Associated_Entity_Data_Fetch": {
                            "runAfter": {
                                "Set_Data_Fetch_Error_False_For_Associated_Entity_Data_Fetch": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "retry_count",
                                "value": 2
                            }
                        },
                        "Set_Retry_Count_For_Resolve_Assignment": {
                            "runAfter": {
                                "Set_Data_Fetch_Error_False_For_Resolve_Assignment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "retry_count",
                                "value": 2
                            }
                        },
                        "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                            "runAfter": {
                                "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                                    "Failed"
                                ]
                            },
                            "type": "Terminate",
                            "inputs": {
                                "runError": {
                                    "message": "Playbook is triggered on wrong incident."
                                },
                                "runStatus": "Failed"
                            }
                        },
                        "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Active_Detections": {
                            "actions": {
                                "Condition_To_Verify_Active_Detections_Data_Fetched_Successfully": {
                                    "actions": {
                                        "Condition_To_Check_If_Count_is_Zero_For_Active_Detections": {
                                            "actions": {
                                                "Set_Break_Loop_True_For_Count_Zero_For_Active_Detections": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "break_loop",
                                                        "value": "@true"
                                                    }
                                                },
                                                "Set_Retry_Count_As_Zero_For_Active_Detections": {
                                                    "runAfter": {
                                                        "Set_Break_Loop_True_For_Count_Zero_For_Active_Detections": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "retry_count",
                                                        "value": 0
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_For_Active_Detections_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Condition_To_Check_Next_is_Null_For_Active_Detections": {
                                                        "actions": {
                                                            "Set_Break_Loop_True_For_Next_is_Null_For_Active_Detections": {
                                                                "runAfter": {},
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "break_loop",
                                                                    "value": "@true"
                                                                }
                                                            },
                                                            "Set_Retry_Count_As_Zero_For_Next_is_Null_For_Active_Detections": {
                                                                "runAfter": {
                                                                    "Set_Break_Loop_True_For_Next_is_Null_For_Active_Detections": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "retry_count",
                                                                    "value": 0
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "For_Each_Detection": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Increment_Page_Number_For_Active_Detections": {
                                                                    "runAfter": {},
                                                                    "type": "IncrementVariable",
                                                                    "inputs": {
                                                                        "name": "page",
                                                                        "value": 1
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('Parse_JSON_For_Active_Detections_Data')?['next']",
                                                                        "@null"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "For_Each_Detection": {
                                                        "foreach": "@body('Parse_JSON_For_Active_Detections_Data')?['results']",
                                                        "actions": {
                                                            "Append_Detection_Object_To_Detections_Array": {
                                                                "runAfter": {
                                                                    "Set_Detection_Object": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "AppendToArrayVariable",
                                                                "inputs": {
                                                                    "name": "detections",
                                                                    "value": "@variables('detection_id')"
                                                                }
                                                            },
                                                            "Set_Detection_Object": {
                                                                "runAfter": {},
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "detection_id",
                                                                    "value": {
                                                                        "title": "@{items('For_Each_Detection')?['id']} - @{items('For_Each_Detection')?['detection']}",
                                                                        "value": "@items('For_Each_Detection')?['id']"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "type": "Foreach",
                                                        "runtimeConfiguration": {
                                                            "concurrency": {
                                                                "repetitions": 1
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@body('Parse_JSON_For_Active_Detections_Data')?['count']",
                                                            0
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Parse_JSON_For_Active_Detections_Data": {
                                            "runAfter": {},
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')",
                                                "schema": {
                                                    "properties": {
                                                        "count": {
                                                            "type": "integer"
                                                        },
                                                        "next": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "previous": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "results": {
                                                            "items": {
                                                                "properties": {
                                                                    "assigned_date": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "assigned_to": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "c_score": {
                                                                        "type": "integer"
                                                                    },
                                                                    "category": {
                                                                        "type": "string"
                                                                    },
                                                                    "certainty": {
                                                                        "type": "integer"
                                                                    },
                                                                    "created_timestamp": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "custom_detection": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "data_source": {
                                                                        "properties": {},
                                                                        "type": "object"
                                                                    },
                                                                    "description": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "detection": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "detection_category": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "detection_type": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "detection_url": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "filtered_by_ai": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "filtered_by_rule": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "filtered_by_user": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "first_timestamp": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "grouped_details": {
                                                                        "items": {
                                                                            "properties": {},
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "groups": {
                                                                        "items": {
                                                                            "properties": {},
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "id": {
                                                                        "type": "integer"
                                                                    },
                                                                    "is_custom_model": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "is_marked_custom": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "is_targeting_key_asset": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "is_triaged": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "last_timestamp": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "note": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "note_modified_by": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "note_modified_timestamp": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "notes": {
                                                                        "items": {
                                                                            "properties": {},
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "sensor": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "sensor_name": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "src_account": {
                                                                        "properties": {},
                                                                        "type": [
                                                                            "object",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "src_host": {
                                                                        "properties": {},
                                                                        "type": [
                                                                            "object",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "src_ip": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "state": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "summary": {
                                                                        "properties": {},
                                                                        "type": "object"
                                                                    },
                                                                    "t_score": {
                                                                        "type": "integer"
                                                                    },
                                                                    "tags": {
                                                                        "items": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "targets_key_asset": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "threat": {
                                                                        "type": "integer"
                                                                    },
                                                                    "triage_rule_id": {
                                                                        "type": [
                                                                            "integer",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "type": {
                                                                        "type": "string"
                                                                    },
                                                                    "url": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    }
                                                                },
                                                                "required": [
                                                                    "summary",
                                                                    "data_source",
                                                                    "sensor",
                                                                    "detection",
                                                                    "filtered_by_ai",
                                                                    "filtered_by_user",
                                                                    "is_custom_model",
                                                                    "custom_detection",
                                                                    "is_targeting_key_asset",
                                                                    "c_score",
                                                                    "note_modified_timestamp",
                                                                    "note",
                                                                    "description",
                                                                    "note_modified_by",
                                                                    "triage_rule_id",
                                                                    "filtered_by_rule",
                                                                    "assigned_date",
                                                                    "category",
                                                                    "src_account",
                                                                    "src_ip",
                                                                    "targets_key_asset",
                                                                    "is_marked_custom",
                                                                    "notes",
                                                                    "groups",
                                                                    "tags",
                                                                    "sensor_name",
                                                                    "last_timestamp",
                                                                    "detection_url",
                                                                    "detection_category",
                                                                    "assigned_to",
                                                                    "t_score",
                                                                    "state",
                                                                    "detection_type",
                                                                    "first_timestamp",
                                                                    "id",
                                                                    "created_timestamp",
                                                                    "certainty",
                                                                    "url",
                                                                    "threat",
                                                                    "is_triaged",
                                                                    "src_host",
                                                                    "type",
                                                                    "grouped_details"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Condition_To_Generate_New_Access_Token_For_Active_Detections": {
                                                "actions": {
                                                    "Condition_To_Verify_Access_Token_Generated_Successfully_For_Active_Detections": {
                                                        "actions": {
                                                            "Decrement_Retry_Count_For_Active_Detections": {
                                                                "runAfter": {},
                                                                "type": "DecrementVariable",
                                                                "inputs": {
                                                                    "name": "retry_count",
                                                                    "value": 1
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "GenerateAccessTokenVectra": [
                                                                "Succeeded",
                                                                "TimedOut",
                                                                "Failed"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Detections": {
                                                                    "runAfter": {
                                                                        "Set_Error_True_While_Generating_Access_Token_For_Active_Detections": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "DecrementVariable",
                                                                    "inputs": {
                                                                        "name": "retry_count",
                                                                        "value": 1
                                                                    }
                                                                },
                                                                "Set_Error_True_While_Generating_Access_Token_For_Active_Detections": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "access_token_generate_error",
                                                                        "value": "@true"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('GenerateAccessTokenVectra')?['status']",
                                                                        "success"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "GenerateAccessTokenVectra": {
                                                        "runAfter": {},
                                                        "type": "Workflow",
                                                        "inputs": {
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "else": {
                                                    "actions": {
                                                        "Set_Active_Detections_Data_Fetch_Error_True": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "fetch_error",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Break_Loop_True_For_Active_Detections_Data_Fetch_Error": {
                                                            "runAfter": {
                                                                "Set_Retry_Count_As_Zero_For_Active_Detections_Data_Fetch_Error": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "break_loop",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Retry_Count_As_Zero_For_Active_Detections_Data_Fetch_Error": {
                                                            "runAfter": {
                                                                "Set_Active_Detections_Data_Fetch_Error_True": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "retry_count",
                                                                "value": 0
                                                            }
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "equals": [
                                                                "@outputs('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')['statusCode']",
                                                                401
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Access_Token_For_Active_Detections": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs",
                                                "outputs"
                                            ]
                                        }
                                    }
                                },
                                "HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity": {
                                    "runAfter": {
                                        "Get_Access_Token_For_Active_Detections": [
                                            "Succeeded",
                                            "Failed"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Authorization": "Bearer @{body('Get_Access_Token_For_Active_Detections')?['value']}"
                                        },
                                        "method": "GET",
                                        "queries": {
                                            "entity_id": "@{int(variables('entity_id'))}",
                                            "is_triaged": "false",
                                            "page": "@{variables('page')}",
                                            "state": "active",
                                            "type": "@variables('entity_type')"
                                        },
                                        "uri": "@{variables('base_url')}/api/@{variables('api_version')}/detections"
                                    }
                                }
                            },
                            "runAfter": {
                                "Set_Entity_ID": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                            "limit": {
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Assignment_Outcomes": {
                            "actions": {
                                "Condition_To_Verify_Assignment_Outcomes_Fetched_Successfully": {
                                    "actions": {
                                        "Condition_To_Check_Count_is_Zero_For_Assignment_Outcomes": {
                                            "actions": {
                                                "Set_Assignment_Outcomes_Count_As_Zero_For_Assignment_Outcomes": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "data_count",
                                                        "value": 0
                                                    }
                                                },
                                                "Set_Break_Loop_True_For_Count_Zero_For_Assignment_Outcomes": {
                                                    "runAfter": {
                                                        "Set_Assignment_Outcomes_Count_As_Zero_For_Assignment_Outcomes": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "break_loop",
                                                        "value": "@true"
                                                    }
                                                },
                                                "Set_Retry_Count_As_Zero_For_Assignment_Outcomes": {
                                                    "runAfter": {
                                                        "Set_Break_Loop_True_For_Count_Zero_For_Assignment_Outcomes": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "retry_count",
                                                        "value": 0
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_For_Assignment_Outcomes_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Condition_To_Check_Next_is_Null_For_Assignment_Outcomes": {
                                                        "actions": {
                                                            "Set_Break_Loop_True_For_Next_is_Null_For_Assignment_Outcomes": {
                                                                "runAfter": {},
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "break_loop",
                                                                    "value": "@true"
                                                                }
                                                            },
                                                            "Set_Retry_Count_As_Zero__For_Next_is_Null_For_Assignment_Outcomes": {
                                                                "runAfter": {
                                                                    "Set_Break_Loop_True_For_Next_is_Null_For_Assignment_Outcomes": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "retry_count",
                                                                    "value": 0
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "For_Each_Outcome": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Increment_Page_Number_For_Assignment_Outcomes": {
                                                                    "runAfter": {},
                                                                    "type": "IncrementVariable",
                                                                    "inputs": {
                                                                        "name": "page",
                                                                        "value": 1
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('Parse_JSON_For_Assignment_Outcomes_Data')?['next']",
                                                                        "@null"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "For_Each_Outcome": {
                                                        "foreach": "@body('Parse_JSON_For_Assignment_Outcomes_Data')?['results']",
                                                        "actions": {
                                                            "Append_Outcome_To_Outcome_List": {
                                                                "runAfter": {
                                                                    "Set_Outcome_Object": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "AppendToArrayVariable",
                                                                "inputs": {
                                                                    "name": "outcome_list",
                                                                    "value": "@variables('outcome')"
                                                                }
                                                            },
                                                            "Set_Outcome_Object": {
                                                                "runAfter": {},
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "outcome",
                                                                    "value": {
                                                                        "title": "@{items('For_Each_Outcome')?['id']} - @{items('For_Each_Outcome')?['title']}",
                                                                        "value": "@items('For_Each_Outcome')?['id']"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "type": "Foreach",
                                                        "runtimeConfiguration": {
                                                            "concurrency": {
                                                                "repetitions": 1
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@body('Parse_JSON_For_Assignment_Outcomes_Data')?['count']",
                                                            0
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Parse_JSON_For_Assignment_Outcomes_Data": {
                                            "runAfter": {},
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_Request_To_Fetch_Assignment_Outcomes')",
                                                "schema": {
                                                    "properties": {
                                                        "count": {
                                                            "type": "integer"
                                                        },
                                                        "next": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "previous": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "results": {
                                                            "items": {
                                                                "properties": {
                                                                    "builtin": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "category": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "id": {
                                                                        "type": "integer"
                                                                    },
                                                                    "title": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "user_selectable": {
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id",
                                                                    "builtin",
                                                                    "user_selectable",
                                                                    "title",
                                                                    "category"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP_Request_To_Fetch_Assignment_Outcomes": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Condition_To_Generate_New_Access_Token_For_Assignment_Outcomes": {
                                                "actions": {
                                                    "Condition_To_Verify_Access_Token_Generated_Successfully_For_Assignment_Outcomes": {
                                                        "actions": {
                                                            "Decrement_Retry_Count_For_Assignment_Outcomes": {
                                                                "runAfter": {},
                                                                "type": "DecrementVariable",
                                                                "inputs": {
                                                                    "name": "retry_count",
                                                                    "value": 1
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "GenerateAccessTokenVectra_2": [
                                                                "Succeeded",
                                                                "TimedOut",
                                                                "Failed"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Assignment_Outcomes": {
                                                                    "runAfter": {
                                                                        "Set_Error_True_While_Generating_Access_Token_For_Assignment_Outcomes": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "DecrementVariable",
                                                                    "inputs": {
                                                                        "name": "retry_count",
                                                                        "value": 1
                                                                    }
                                                                },
                                                                "Set_Error_True_While_Generating_Access_Token_For_Assignment_Outcomes": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "access_token_generate_error",
                                                                        "value": "@true"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('GenerateAccessTokenVectra_2')?['status']",
                                                                        "success"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "GenerateAccessTokenVectra_2": {
                                                        "runAfter": {},
                                                        "type": "Workflow",
                                                        "inputs": {
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "else": {
                                                    "actions": {
                                                        "Set_Assignment_Outcomes_Data_Fetch_Error_True": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "fetch_error",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Break_Loop_True_For_Assignment_Outcomes_Data_Fetch_Error": {
                                                            "runAfter": {
                                                                "Set_Retry_Count_As_Zero_For_Assignment_Outcomes_Data_Fetch_Error": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "break_loop",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Retry_Count_As_Zero_For_Assignment_Outcomes_Data_Fetch_Error": {
                                                            "runAfter": {
                                                                "Set_Assignment_Outcomes_Data_Fetch_Error_True": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "retry_count",
                                                                "value": 0
                                                            }
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "equals": [
                                                                "@outputs('HTTP_Request_To_Fetch_Assignment_Outcomes')['statusCode']",
                                                                401
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('HTTP_Request_To_Fetch_Assignment_Outcomes')['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Access_Token_For_Assignment_Outcomes": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs",
                                                "outputs"
                                            ]
                                        }
                                    }
                                },
                                "HTTP_Request_To_Fetch_Assignment_Outcomes": {
                                    "runAfter": {
                                        "Get_Access_Token_For_Assignment_Outcomes": [
                                            "Succeeded",
                                            "Failed"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Authorization": "Bearer @{body('Get_Access_Token_For_Assignment_Outcomes')?['value']}"
                                        },
                                        "method": "GET",
                                        "queries": {
                                            "page": "@{variables('page')}"
                                        },
                                        "uri": "@{variables('base_url')}/api/@{variables('api_version')}/assignment_outcomes"
                                    }
                                }
                            },
                            "runAfter": {
                                "Set_Break_Loop_False_For_Assignment_Outcomes": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                            "limit": {
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "Until_Retry_Count_is_Zero_For_Resolve_Assignment": {
                            "actions": {
                                "Condition_To_Verify_Assignment_Resolved_Successfully": {
                                    "actions": {
                                        "Set_Retry_Count_As_Zero_For_Resolve_Assignment": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "retry_count",
                                                "value": 0
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP_Request_To_Resolve_Assignment": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Condition_To_Generate_New_Access_Token": {
                                                "actions": {
                                                    "Condition_To_Verify_Access_Token_Generated_Successfully_For_Resolve_Assignment": {
                                                        "actions": {
                                                            "Decrement_Retry_Count_For_Resolve_Assignment": {
                                                                "runAfter": {},
                                                                "type": "DecrementVariable",
                                                                "inputs": {
                                                                    "name": "retry_count",
                                                                    "value": 1
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "GenerateAccessTokenVectra_5": [
                                                                "Succeeded",
                                                                "TimedOut",
                                                                "Failed"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Resolve_Assignment": {
                                                                    "runAfter": {
                                                                        "Set_Error_True_While_Generating_Access_Token_For_Resolve_Assignment": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "DecrementVariable",
                                                                    "inputs": {
                                                                        "name": "retry_count",
                                                                        "value": 1
                                                                    }
                                                                },
                                                                "Set_Error_True_While_Generating_Access_Token_For_Resolve_Assignment": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "access_token_generate_error",
                                                                        "value": "@true"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('GenerateAccessTokenVectra_5')?['status']",
                                                                        "success"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "GenerateAccessTokenVectra_5": {
                                                        "runAfter": {},
                                                        "type": "Workflow",
                                                        "inputs": {
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "else": {
                                                    "actions": {
                                                        "Set_Error_True_While_Resolving_Assignment": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "fetch_error",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Retry_Count_As_Zero_For_Error_While_Resolving_Assignment": {
                                                            "runAfter": {
                                                                "Set_Error_True_While_Resolving_Assignment": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "retry_count",
                                                                "value": 0
                                                            }
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "equals": [
                                                                "@outputs('HTTP_Request_To_Resolve_Assignment')['statusCode']",
                                                                401
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('HTTP_Request_To_Resolve_Assignment')['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Access_Token_For_Resolve_Assignment": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs",
                                                "outputs"
                                            ]
                                        }
                                    }
                                },
                                "HTTP_Request_To_Resolve_Assignment": {
                                    "runAfter": {
                                        "Get_Access_Token_For_Resolve_Assignment": [
                                            "Succeeded",
                                            "Failed"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "body": "@variables('resolve_request_body')",
                                        "headers": {
                                            "Authorization": "Bearer @{body('Get_Access_Token_For_Resolve_Assignment')?['value']}",
                                            "Content-Type": "application/json"
                                        },
                                        "method": "PUT",
                                        "uri": "@{variables('base_url')}/api/@{variables('api_version')}/assignments/@{variables('assignment_id')}/resolve"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Decide_Body_For_Resolve_Assignment_Operation_Based_On_Detections": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(variables('retry_count'), 0)",
                            "limit": {
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "keyvault_3": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                                "connectionName": "[variables('KeyvaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                            },
                            "teams": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                                "connectionName": "[variables('TeamsConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "hidden-SentinelTemplateName": "VectraDynamicResolveAssignment",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('MicrosoftSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('KeyvaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('KeyvaultConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                },
                "parameterValues": {
                    "token:TenantId": "[trim(parameters('TenantId'))]",
                    "token:grantType": "code",
                    "vaultName": "[trim(parameters('KeyVaultName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('TeamsConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('TeamsConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
                }
            }
        }
    ]
}
