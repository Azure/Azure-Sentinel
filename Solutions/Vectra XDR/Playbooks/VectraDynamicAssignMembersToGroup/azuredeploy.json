{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Vectra Dynamic Assign Member To Group",
        "description": "This playbook allows users to filter the group list by providing a group type and a description. From the filtered list, users can choose a group and provide member details to add members to the group dynamically.",
        "prerequisites": [
            "1. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
            "a. Create a Key Vault with unique name",
            "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
            "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
            "2. Obtain Teams GroupId and ChannelId",
            "a. Create a Team with public channel.",
            "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
            "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
            "d. copy the text of groupId parameter from link to use as groupId. ",
            "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraAssignDynamicMemberToGroup playbook."
        ],
        "postDeployment": [
            "**a. Authorize connections**",
            "Once deployment is complete, authorize each connection.",
            "1. Go to your logic app → API connections → Select keyvault connection resource",
            "2. Go to General → edit API connection",
            "3. Click Authorize",
            "4. Sign in",
            "5. Click Save",
            "6. Repeat steps for other connections",
            "**b. Add Access policy in Keyvault**",
            "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
            "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
            "2. Go to keyvaults → <your keyvault> → Access policies → create.",
            "3. Select all keys & secrets permissions. Click next.",
            "4. In the principal section, search by copied object ID. Click next.",
            "5. Click review + create.",
            "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized."
        ],
        "entities": ["Account", "Host"],
        "tags": ["Vectra", "Assign", "Dynamic", "Member", "Group"],
        "support": {
            "tier": "community",
            "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author": {
            "name": "Vectra"
        },
        "lastUpdateTime": "2024-09-02T00:00:00.000Z"
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "VectraDynamicAssignMemberToGroup",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
            }
        },
        "KeyVaultName": {
            "type": "string",
            "minLength": 1
        },
        "TenantId": {
            "type": "string",
            "minLength": 1
        },
        "BaseURL": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
            }
        },
        "TeamsGroupId": {
            "type": "string",
            "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
            }
        },
        "TeamsChannelId": {
            "type": "string",
            "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
            }
        },
        "GenerateAccessCredPlaybookName": {
            "type": "string",
            "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
            }
        }
    },
    "variables": {
        "KeyvaultConnectionName": "[concat('Keyvault-', trim(parameters('PlaybookName')))]",
        "TeamsConnectionName": "[concat('Teams-', trim(parameters('PlaybookName')))]"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {}
                        }
                    },
                    "actions": {
                        "Condition_To_Terminate_Execution_If_Error_Occurred_While_Fetching_Groups_Data": {
                            "actions": {
                                "Terminate_Due_To_Error_While_Fetching_Groups": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "@{outputs('HTTP_Request_To_Fetch_Available_Groups')['statusCode']}",
                                            "message": "@{body('HTTP_Request_To_Fetch_Available_Groups')}"
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_Execution_If_No_Groups_Found": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_Execution_If_No_Groups_Found": {
                            "actions": {
                                "Post_Message_For_No_Groups_Found": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "messageBody": "<p><span style=\"font-size: 12px\"><strong>No Groups found</strong></span> for Group Type: @{variables('group_type')} and Group Description: @{variables('group_description')}</p>",
                                            "recipient": {
                                                "channelId": "[trim(parameters('TeamsChannelId'))]",
                                                "groupId": "[trim(parameters('TeamsGroupId'))]"
                                            }
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['teams']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                                    }
                                },
                                "Terminate_Due_To_No_Groups_Found": {
                                    "runAfter": {
                                        "Post_Message_For_No_Groups_Found": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Succeeded"
                                    }
                                }
                            },
                            "runAfter": {
                                "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_For_Groups_Data": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('group_count')",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Assigning_Members_To_Group": {
                            "actions": {
                                "Terminate_Due_To_Error_While_Assigning_Members_To_Group": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "@{outputs('HTTP_Request_To_Assign_Members_To_Group')['statusCode']}",
                                            "message": "@{body('HTTP_Request_To_Assign_Members_To_Group')}"
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Until_Retry_Count_is_Zero_For_Assign_Members_To_Group": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Groups_Data": {
                            "actions": {
                                "Terminate_Due_To_Error_Occurred_While_Generating_Token_For_Groups_Data": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "Error occurred while generating access token while fetching groups data."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_Execution_If_Error_Occurred_While_Fetching_Groups_Data": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('access_token_generate_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_While_Generating_Token_For_Assigning_Members": {
                            "actions": {
                                "Terminate_Due_To_Error_While_Generating_Token_For_Assign_Members_To_Group": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "Error occurred while generating access token for assign members to group."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_Error_Occurred_While_Assigning_Members_To_Group": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('access_token_generate_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_API_Version": {
                            "runAfter": {
                                "Initialize_Base_URL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api_version",
                                        "type": "string",
                                        "value": "v3.3"
                                    }
                                ]
                            }
                        },
                        "Initialize_Base_URL": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "base_url",
                                        "type": "string",
                                        "value": "[trim(parameters('BaseURL'))]"
                                    }
                                ]
                            }
                        },
                        "Initialize_Break_Loop": {
                            "runAfter": {
                                "Initialize_Retry_Count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "break_loop",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Data_Fetch_Error_False": {
                            "runAfter": {
                                "Initialize_Members": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "fetch_error",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Error_False_While_Generating_Access_Token": {
                            "runAfter": {
                                "Initialize_Data_Fetch_Error_False": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "access_token_generate_error",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Group_Count": {
                            "runAfter": {
                                "Initialize_User_Selected_Group": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "group_count",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "Initialize_Group_Description": {
                            "runAfter": {
                                "Initialize_Group_Type": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "group_description",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Group_List": {
                            "runAfter": {
                                "Initialize_Group_Object": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "group_list",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_Group_Object": {
                            "runAfter": {
                                "Initialize_Break_Loop": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "group",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "Initialize_Group_Type": {
                            "runAfter": {
                                "Initialize_Group_List": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "group_type",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Members": {
                            "runAfter": {
                                "Initialize_Group_Count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "members",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_Page_Number": {
                            "runAfter": {
                                "Initialize_API_Version": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "page",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "Initialize_Retry_Count": {
                            "runAfter": {
                                "Initialize_Page_Number": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "retry_count",
                                        "type": "integer",
                                        "value": 2
                                    }
                                ]
                            }
                        },
                        "Initialize_User_Selected_Group": {
                            "runAfter": {
                                "Initialize_Group_Description": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "selected_group",
                                        "type": "integer"
                                    }
                                ]
                            }
                        },
                        "Post_Adaptive_Card_For_Group_Type_And_Group_Description_Input": {
                            "runAfter": {
                                "Initialize_Error_False_While_Generating_Access_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "body": {
                                        "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"title\": \"Submit Answer\",\n            \"type\": \"Action.Submit\",\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\",\n            \"text\": \"Dynamic Assign Members To Group in Vectra\"\n        },\n        {\n            \"id\": \"group-type\",\n            \"type\": \"Input.Text\",\n            \"separator\": true,\n            \"placeholder\": \"Enter Group Type\",\n            \"isRequired\": true,\n            \"label\": \"Please provide group type to fetch groups data.(case-sensitive)(e.g. account, ip, domain, host)\",\n            \"errorMessage\": \"Please enter group type.\"\n        },\n        {\n            \"id\": \"group-description\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter Group Description\",\n            \"isRequired\": false,\n            \"label\": \"Please provide group description to filter groups data.(case-insensitive)\",\n            \"errorMessage\": \"Please enter group description.\"\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                        "recipient": {
                                            "channelId": "[trim(parameters('TeamsChannelId'))]",
                                            "groupId": "[trim(parameters('TeamsGroupId'))]"
                                        },
                                        "updateMessage": "Thanks for your response!"
                                    },
                                    "notificationUrl": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['teams']['connectionId']"
                                    }
                                },
                                "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                            }
                        },
                        "Post_Adaptive_Card_For_Groups_List_And_Members_Input": {
                            "runAfter": {
                                "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Groups_Data": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "body": {
                                        "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"title\": \"Submit Answer\",\n            \"type\": \"Action.Submit\",\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\",\n            \"text\": \"Assign Dynamic Members To Group in Vectra\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Group Type =  @{variables('group_type')}\\n\\nGroup Description= @{variables('group_description')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"id\": \"group-choice\",\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{variables('group_list')},\n            \"isRequired\": true,\n            \"separator\": true,\n            \"label\": \"Please select one group to add members to it\",\n            \"errorMessage\": \"Please select one group first.\"\n        },\n        {\n            \"id\": \"member-input\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter members eg. member1,member2,member3,...\",\n            \"isRequired\": true,\n            \"label\": \"Please provide members to add into group\",\n            \"errorMessage\": \"Please enter atlease one member to add into group.\"\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                        "recipient": {
                                            "channelId": "[trim(parameters('TeamsChannelId'))]",
                                            "groupId": "[trim(parameters('TeamsGroupId'))]"
                                        },
                                        "updateMessage": "Thanks for your response!"
                                    },
                                    "notificationUrl": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['teams']['connectionId']"
                                    }
                                },
                                "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                            }
                        },
                        "Set_Data_Fetch_Error_False_For_Assign_Members": {
                            "runAfter": {
                                "Set_Retry_Count_For_Assign_Members_Request": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "fetch_error",
                                "value": "@false"
                            }
                        },
                        "Set_Group_Description_From_User_Input": {
                            "runAfter": {
                                "Set_Group_Type_From_User_Input": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "group_description",
                                "value": "@{body('Post_Adaptive_Card_For_Group_Type_And_Group_Description_Input')?['data']?['group-description']}"
                            }
                        },
                        "Set_Group_Type_From_User_Input": {
                            "runAfter": {
                                "Post_Adaptive_Card_For_Group_Type_And_Group_Description_Input": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "group_type",
                                "value": "@{body('Post_Adaptive_Card_For_Group_Type_And_Group_Description_Input')?['data']?['group-type']}"
                            }
                        },
                        "Set_Members_From_User_Input": {
                            "runAfter": {
                                "Set_User_Selected_Group": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "members",
                                "value": "@split(body('Post_Adaptive_Card_For_Groups_List_And_Members_Input')?['data']?['member-input'], ',')"
                            }
                        },
                        "Set_Retry_Count_For_Assign_Members_Request": {
                            "runAfter": {
                                "Set_Members_From_User_Input": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "retry_count",
                                "value": 2
                            }
                        },
                        "Set_User_Selected_Group": {
                            "runAfter": {
                                "Post_Adaptive_Card_For_Groups_List_And_Members_Input": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "selected_group",
                                "value": "@int(body('Post_Adaptive_Card_For_Groups_List_And_Members_Input')?['data']?['group-choice'])"
                            }
                        },
                        "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_For_Groups_Data": {
                            "actions": {
                                "Condition_To_Verify_Groups_Details_Fetched_Successfully": {
                                    "actions": {
                                        "Condition_To_Check_Count_Zero_For_Groups_Data": {
                                            "actions": {
                                                "Set_Break_Loop_True_For_Count_Zero_For_Groups_Data": {
                                                    "runAfter": {
                                                        "Set_Fetched_Groups_Count_As_Zero": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "break_loop",
                                                        "value": "@true"
                                                    }
                                                },
                                                "Set_Fetched_Groups_Count_As_Zero": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "group_count",
                                                        "value": 0
                                                    }
                                                },
                                                "Set_Retry_Count_As_Zero_For_No_Groups_Found": {
                                                    "runAfter": {
                                                        "Set_Break_Loop_True_For_Count_Zero_For_Groups_Data": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "retry_count",
                                                        "value": 0
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_For_Groups_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Condition_To_Check_Next_is_Null_For_Groups_Data": {
                                                        "actions": {
                                                            "Set_Break_Loop_True_For_Next_is_Null_For_Groups_Data": {
                                                                "runAfter": {},
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "break_loop",
                                                                    "value": "@true"
                                                                }
                                                            },
                                                            "Set_Retry_Count_As_Zero_For_Next_is_Null": {
                                                                "runAfter": {
                                                                    "Set_Break_Loop_True_For_Next_is_Null_For_Groups_Data": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "retry_count",
                                                                    "value": 0
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "For_Each_Group": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Increment_Page_Number_For_Groups_Data": {
                                                                    "runAfter": {},
                                                                    "type": "IncrementVariable",
                                                                    "inputs": {
                                                                        "name": "page",
                                                                        "value": 1
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('Parse_JSON_For_Groups_Data')?['next']",
                                                                        "@null"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "For_Each_Group": {
                                                        "foreach": "@body('Parse_JSON_For_Groups_Data')?['results']",
                                                        "actions": {
                                                            "Append_Group_To_Group_List": {
                                                                "runAfter": {
                                                                    "Set_Group_Object": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "AppendToArrayVariable",
                                                                "inputs": {
                                                                    "name": "group_list",
                                                                    "value": "@variables('group')"
                                                                }
                                                            },
                                                            "Set_Group_Object": {
                                                                "runAfter": {},
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "group",
                                                                    "value": {
                                                                        "title": "@{items('For_Each_Group')?['id']}-@{items('For_Each_Group')?['type']}-@{items('For_Each_Group')?['name']}-@{items('For_Each_Group')?['description']}",
                                                                        "value": "@items('For_Each_Group')?['id']"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "type": "Foreach",
                                                        "runtimeConfiguration": {
                                                            "concurrency": {
                                                                "repetitions": 1
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@body('Parse_JSON_For_Groups_Data')?['count']",
                                                            0
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Parse_JSON_For_Groups_Data": {
                                            "runAfter": {},
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_Request_To_Fetch_Available_Groups')",
                                                "schema": {
                                                    "properties": {
                                                        "count": {
                                                            "type": "integer"
                                                        },
                                                        "next": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "previous": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "results": {
                                                            "items": {
                                                                "properties": {
                                                                    "cognito_managed": {},
                                                                    "description": {
                                                                        "type": "string"
                                                                    },
                                                                    "id": {
                                                                        "type": "integer"
                                                                    },
                                                                    "importance": {},
                                                                    "last_modified": {},
                                                                    "last_modified_by": {},
                                                                    "members": {
                                                                        "items": {},
                                                                        "type": [
                                                                            "array",
                                                                            "object"
                                                                        ]
                                                                    },
                                                                    "name": {
                                                                        "type": "string"
                                                                    },
                                                                    "rules": {
                                                                        "items": {},
                                                                        "type": "array"
                                                                    },
                                                                    "type": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id",
                                                                    "name",
                                                                    "description",
                                                                    "last_modified",
                                                                    "last_modified_by",
                                                                    "type",
                                                                    "members",
                                                                    "rules",
                                                                    "importance"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP_Request_To_Fetch_Available_Groups": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Condition_To_Generate_New_Access_Token_For_Groups_Data": {
                                                "actions": {
                                                    "Condition_To_Verify_Access_Token_Generated_Successfully_For_Groups_Data": {
                                                        "actions": {
                                                            "Decrement_Retry_Count_For_Groups_Data": {
                                                                "runAfter": {},
                                                                "type": "DecrementVariable",
                                                                "inputs": {
                                                                    "name": "retry_count",
                                                                    "value": 1
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "GenerateAccessTokenVectra": [
                                                                "Succeeded",
                                                                "TimedOut",
                                                                "Failed"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Groups_Data": {
                                                                    "runAfter": {
                                                                        "Set_Error_True_While_Generating_Access_Token_For_Groups_Data": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "DecrementVariable",
                                                                    "inputs": {
                                                                        "name": "retry_count",
                                                                        "value": 1
                                                                    }
                                                                },
                                                                "Set_Error_True_While_Generating_Access_Token_For_Groups_Data": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "access_token_generate_error",
                                                                        "value": "@true"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('GenerateAccessTokenVectra')?['status']",
                                                                        "success"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "GenerateAccessTokenVectra": {
                                                        "runAfter": {},
                                                        "type": "Workflow",
                                                        "inputs": {
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "else": {
                                                    "actions": {
                                                        "Set_Break_Loop_True_For_Groups_Data_Fetch_Error": {
                                                            "runAfter": {
                                                                "Set_Groups_Data_Fetch_Error_True": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "break_loop",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Groups_Data_Fetch_Error_True": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "fetch_error",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Groups_Data": {
                                                            "runAfter": {
                                                                "Set_Break_Loop_True_For_Groups_Data_Fetch_Error": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "retry_count",
                                                                "value": 0
                                                            }
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "equals": [
                                                                "@outputs('HTTP_Request_To_Fetch_Available_Groups')['statusCode']",
                                                                401
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('HTTP_Request_To_Fetch_Available_Groups')['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Access_Token_For_Groups_Data": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs",
                                                "outputs"
                                            ]
                                        }
                                    }
                                },
                                "HTTP_Request_To_Fetch_Available_Groups": {
                                    "runAfter": {
                                        "Get_Access_Token_For_Groups_Data": [
                                            "Succeeded",
                                            "Failed"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Authorization": "Bearer @{body('Get_Access_Token_For_Groups_Data')?['value']}"
                                        },
                                        "method": "GET",
                                        "queries": {
                                            "description": "@variables('group_description')",
                                            "page": "@{variables('page')}",
                                            "type": "@variables('group_type')"
                                        },
                                        "uri": "@{variables('base_url')}/api/@{variables('api_version')}/groups"
                                    }
                                }
                            },
                            "runAfter": {
                                "Set_Group_Description_From_User_Input": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                            "limit": {
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "Until_Retry_Count_is_Zero_For_Assign_Members_To_Group": {
                            "actions": {
                                "Condition_To_Verify_Members_Assigned_To_Group_Successfully": {
                                    "actions": {
                                        "Set_Retry_Count_As_Zero_For_Assign_Members_To_Group": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "retry_count",
                                                "value": 0
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP_Request_To_Assign_Members_To_Group": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Condition_To_Generate_New_Access_Token_For_Assign_Members": {
                                                "actions": {
                                                    "Condition_To_Verify_Access_Token_Generated_Successfully_For_Assign_Members": {
                                                        "actions": {
                                                            "Decrement_Retry_Count_For_Assign_Members": {
                                                                "runAfter": {},
                                                                "type": "DecrementVariable",
                                                                "inputs": {
                                                                    "name": "retry_count",
                                                                    "value": 1
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "GenerateAccessTokenVectra_2": [
                                                                "Succeeded",
                                                                "TimedOut",
                                                                "Failed"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Assign_Members": {
                                                                    "runAfter": {
                                                                        "Set_Error_True_While_Generating_Access_Token_For_Assig_Members_To_Group": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "DecrementVariable",
                                                                    "inputs": {
                                                                        "name": "retry_count",
                                                                        "value": 1
                                                                    }
                                                                },
                                                                "Set_Error_True_While_Generating_Access_Token_For_Assig_Members_To_Group": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "access_token_generate_error",
                                                                        "value": "@true"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('GenerateAccessTokenVectra_2')?['status']",
                                                                        "success"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "GenerateAccessTokenVectra_2": {
                                                        "runAfter": {},
                                                        "type": "Workflow",
                                                        "inputs": {
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "else": {
                                                    "actions": {
                                                        "Set_Error_True_While_Assigning_Members_To_Group": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "fetch_error",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Retry_Count_As_Zero_For_Error_While_Assigning_Members_To_Group": {
                                                            "runAfter": {
                                                                "Set_Error_True_While_Assigning_Members_To_Group": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "retry_count",
                                                                "value": 0
                                                            }
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "equals": [
                                                                "@outputs('HTTP_Request_To_Assign_Members_To_Group')['statusCode']",
                                                                401
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('HTTP_Request_To_Assign_Members_To_Group')['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Access_Token_For_Assign_Members_To_Group": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs",
                                                "outputs"
                                            ]
                                        }
                                    }
                                },
                                "HTTP_Request_To_Assign_Members_To_Group": {
                                    "runAfter": {
                                        "Get_Access_Token_For_Assign_Members_To_Group": [
                                            "Succeeded",
                                            "Failed"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "body": {
                                            "members": "@variables('members')"
                                        },
                                        "headers": {
                                            "Authorization": "Bearer @{body('Get_Access_Token_For_Assign_Members_To_Group')?['value']}",
                                            "Content-Type": "application/json"
                                        },
                                        "method": "PATCH",
                                        "queries": {
                                            "membership_action": "append"
                                        },
                                        "uri": "@{variables('base_url')}/api/@{variables('api_version')}/groups/@{variables('selected_group')}"
                                    }
                                }
                            },
                            "runAfter": {
                                "Set_Data_Fetch_Error_False_For_Assign_Members": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(variables('retry_count'), 0)",
                            "limit": {
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "keyvault_3": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                                "connectionName": "[variables('KeyvaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                            },
                            "teams": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                                "connectionName": "[variables('TeamsConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "hidden-SentinelTemplateName": "VectraDynamicAssignMemberToGroup",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('KeyvaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('KeyvaultConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                },
                "parameterValues": {
                    "token:TenantId": "[trim(parameters('TenantId'))]",
                    "token:grantType": "code",
                    "vaultName": "[trim(parameters('KeyVaultName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('TeamsConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('TeamsConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
                }
            }
        }
    ]
}
