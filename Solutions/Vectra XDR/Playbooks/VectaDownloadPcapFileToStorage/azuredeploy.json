{
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion":  "1.0.0.0",
    "metadata":  {
        "title":  "Vectra Download Pcap File To Storage",
        "description":  "This playbook enables user to download pcap file of any detections associated with a Vectra Entity to default file share of storage account. Users can provide detection ids via MS Teams AdaptiveCard.",
        "prerequisites":  ["1. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
            "a. Create a Key Vault with unique name",
            "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
            "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
            "2. Obtain Teams GroupId and ChannelId",
            "a. Create a Team with public channel.",
            "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
            "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
            "d. copy the text of groupId parameter from link to use as groupId.",
            "3. Obtain Storage Account Name where Pcap files will be downloaded.",
            "4. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectaDownloadPcapFileToStorage playbook."
        ],
        "postDeployment":  [
           "**a. Authorize connections**",
            "Once deployment is complete, authorize each connection.",
            "1. Go to your logic app → API connections → Select keyvault connection resource",
            "2. Go to General → edit API connection",
            "3. Click Authorize",
            "4. Sign in",
            "5. Click Save",
            "6. Repeat steps for other connections",
            "**To authorize the Storage Account API connection, you will need the access key:**",
            "1. Go to Azure Portal → Storage Accounts → <your storage account>.",
            "2. In the left pane, select Access keys under Security + networking.",
            "3. Copy the value of key1 or key2.",
            "4. Go to your logic app → API connections → Select the storage account connection resource.",
            "5. Go to General → Edit API connection.",
            "6. Paste the copied access key in the required field.",
            "7. Click Save.",
            "**b. Add Access policy in Keyvault**",
            "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
            "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
            "2. Go to keyvaults → <your keyvault> → Access policies → create.",
            "3. Select all keys & secrets permissions. Click next.",
            "4. In the principal section, search by copied object ID. Click next.",
            "5. Click review + create.",
            "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
            "**c. Assign Role to update incident**",
            "After authorizing each connection, assign role to this playbook.",
            "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
            "2. Add role assignment",
            "3. Assignment type: Job function roles",
            "4. Role: Microsoft Sentinel Contributor",
            "5. Members: select managed identity for assigned access to and add your logic app as member",
            "6. Click on review+assign",
            "**d. Configurations in Microsoft Sentinel**",
            "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
            "2. To manually run the playbook on a particular incident follow the below steps:",
            "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
            "b. Select an incident.",
            "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
            "d. click on the Run button beside this playbook."
        ],
        "lastUpdateTime":  "2025-09-12T00:00:00.000Z",
        "entities":  ["Account", "Host"],
        "tags":  ["Vectra", "Entity", "Detections", "PCAP", "Storage"],
        "support":  {
            "tier":  "community",
            "armtemplate":  "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author":  {
            "name":  "Vectra"
        }
    },
    "parameters":  {
        "PlaybookName": {
            "defaultValue": "VectaDownloadPcapFileToStorage",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
            }
        },
        "KeyVaultName": {
            "type": "string",
            "minLength": 1
        },
        "TenantId": {
            "type": "string",
            "minLength": 1
        },
        "BaseURL": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
            }
        },
        "TeamsGroupId": {
            "type": "string",
            "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
            }
        },
        "TeamsChannelId": {
            "type": "string",
            "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
            }
        },
        "StorageAccountName": {
            "type": "string",
            "metadata": {
                "description": "Enter name of the Storage Account where pcap files will be downloaded"
            }
        },
        "GenerateAccessCredPlaybookName": {
            "type": "string",
            "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
            }
        }
    },
    "variables":  {
        "MicrosoftSentinelConnectionName":  "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
        "KeyvaultConnectionName":  "[concat('Keyvault-', parameters('PlaybookName'))]",
        "TeamsConnectionName":  "[concat('Teams-', parameters('PlaybookName'))]",
        "AzurefileConnectionName":  "[concat('Azurefile-', parameters('PlaybookName'))]"
    },
    "resources":  [
        {
            "properties":  {
                "provisioningState":  "Succeeded",
                "state":  "Enabled",
                "definition":  {
                    "$schema":  "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion":  "1.0.0.0",
                    "parameters":  {
                        "$connections":  {
                            "defaultValue":  {
                            },
                            "type":  "Object"
                        }
                    },
                    "triggers":  {
                        "Microsoft_Sentinel_incident":  {
                            "type":  "ApiConnectionWebhook",
                            "inputs":  {
                                "host":  {
                                    "connection":  {
                                        "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "body":  {
                                    "callback_url":  "@{listCallbackUrl()}"
                                },
                                "path":  "/incident-creation"
                            }
                        }
                    },
                    "actions":  {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found":  {
                            "actions":  {
                                "Terminate_Due_To_No_Alerts_Found":  {
                                    "type":  "Terminate",
                                    "inputs":  {
                                        "runStatus":  "Failed",
                                        "runError":  {
                                            "code":  "400",
                                            "message":  "No Alerts Found associated with this Incident."
                                        }
                                    }
                                }
                            },
                            "runAfter":  {
                                "Initialize_Retry_Count":  [
                                    "Succeeded"
                                ]
                            },
                            "else":  {
                                "actions":  {
                                }
                            },
                            "expression":  {
                                "and":  [
                                    {
                                        "equals":  [
                                            "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type":  "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Detections_Data":  {
                            "actions":  {
                                "Terminate_Due_To_Error_While_Fetching_Detections_Data_Associated_With_Entity":  {
                                    "type":  "Terminate",
                                    "inputs":  {
                                        "runStatus":  "Failed",
                                        "runError":  {
                                            "code":  "@{outputs('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')['statusCode']}",
                                            "message":  "@{body('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')}"
                                        }
                                    }
                                }
                            },
                            "runAfter":  {
                                "Condition_To_Post_Adaptive_Card_To_Get_Seleted_Detection_IDs":  [
                                    "Succeeded"
                                ]
                            },
                            "else":  {
                                "actions":  {
                                }
                            },
                            "expression":  {
                                "and":  [
                                    {
                                        "equals":  [
                                            "@variables('fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type":  "If"
                        },
                        "Condition_To_Terminate_If_Error_While_Generating_Token_For_Detections_Data":  {
                            "actions":  {
                                "Terminate_Due_To_Error_While_Generating_Access_Token_For_Detections_Data":  {
                                    "type":  "Terminate",
                                    "inputs":  {
                                        "runStatus":  "Failed",
                                        "runError":  {
                                            "code":  "400",
                                            "message":  "Error occurred while generating access token for detections data."
                                        }
                                    }
                                }
                            },
                            "runAfter":  {
                                "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Detections_Data":  [
                                    "Succeeded"
                                ]
                            },
                            "else":  {
                                "actions":  {
                                }
                            },
                            "expression":  {
                                "and":  [
                                    {
                                        "equals":  [
                                            "@variables('access_token_generate_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type":  "If"
                        },
                        "Initialize_API_Information":  {
                            "runAfter":  {
                            },
                            "type":  "InitializeVariable",
                            "inputs":  {
                                "variables":  [
                                    {
                                        "name":  "base_url",
                                        "type":  "string",
                                        "value":  "https://308714519558.cc1.portal.vectra.ai"
                                    },
                                    {
                                        "name":  "api_version",
                                        "type":  "string",
                                        "value":  "v3.4"
                                    }
                                ]
                            }
                        },
                        "Initialize_Break_Loop":  {
                            "runAfter":  {
                                "Initialize_Detections":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "InitializeVariable",
                            "inputs":  {
                                "variables":  [
                                    {
                                        "name":  "break_loop",
                                        "type":  "boolean",
                                        "value":  "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Detections":  {
                            "runAfter":  {
                                "Initialize_Entity_Information":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "InitializeVariable",
                            "inputs":  {
                                "variables":  [
                                    {
                                        "name":  "detections",
                                        "type":  "array",
                                        "value":  [
                                            {
                                                "title":  "Select All",
                                                "value":  "All"
                                            }
                                        ]
                                    },
                                    {
                                        "name":  "detection_ids",
                                        "type":  "array"
                                    },
                                    {
                                        "name":  "pcap_downloaded_detections",
                                        "type":  "array"
                                    },
                                    {
                                        "name":  "pcap_failed_detections",
                                        "type":  "array"
                                    },
                                    {
                                        "name":  "pcap_401_detections",
                                        "type":  "array"
                                    },
                                    {
                                        "name":  "temp_detection_id",
                                        "type":  "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Entity_Information":  {
                            "runAfter":  {
                                "Initialize_Storage_Account_Name":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "InitializeVariable",
                            "inputs":  {
                                "variables":  [
                                    {
                                        "name":  "entity_id",
                                        "type":  "string"
                                    },
                                    {
                                        "name":  "entity_type",
                                        "type":  "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Flags":  {
                            "runAfter":  {
                                "Initialize_Page_Number":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "InitializeVariable",
                            "inputs":  {
                                "variables":  [
                                    {
                                        "name":  "tag_add_error",
                                        "type":  "boolean"
                                    },
                                    {
                                        "name":  "wrong_structure_comment",
                                        "type":  "boolean",
                                        "value":  false
                                    },
                                    {
                                        "name":  "fetch_error",
                                        "type":  "boolean",
                                        "value":  false
                                    },
                                    {
                                        "name":  "access_token_generate_error",
                                        "type":  "boolean",
                                        "value":  false
                                    },
                                    {
                                        "name":  "pcap_fetch_error",
                                        "type":  "boolean",
                                        "value":  false
                                    }
                                ]
                            }
                        },
                        "Initialize_Page_Number":  {
                            "runAfter":  {
                                "Initialize_Break_Loop":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "InitializeVariable",
                            "inputs":  {
                                "variables":  [
                                    {
                                        "name":  "page",
                                        "type":  "integer",
                                        "value":  1
                                    }
                                ]
                            }
                        },
                        "Initialize_Retry_Count":  {
                            "runAfter":  {
                                "Initialize_Flags":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "InitializeVariable",
                            "inputs":  {
                                "variables":  [
                                    {
                                        "name":  "retry_count",
                                        "type":  "integer",
                                        "value":  2
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_For_Custom_Entities_Mapping_Data":  {
                            "runAfter":  {
                                "Condition_To_Terminate_Execution_If_No_Alerts_Found":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "ParseJson",
                            "inputs":  {
                                "content":  "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                                "schema":  {
                                    "properties":  {
                                        "entity_id":  {
                                            "items":  {
                                                "type":  "string"
                                            },
                                            "type":  "array"
                                        },
                                        "entity_type":  {
                                            "items":  {
                                                "type":  "string"
                                            },
                                            "type":  "array"
                                        },
                                        "tags":  {
                                            "items":  {
                                                "type":  "string"
                                            },
                                            "type":  "array"
                                        },
                                        "attack_profile":  {
                                            "items":  {
                                                "type":  "string"
                                            },
                                            "type":  "array"
                                        },
                                        "entity_importance":  {
                                            "items":  {
                                                "type":  "string"
                                            },
                                            "type":  "array"
                                        },
                                        "ip_address":  {
                                            "items":  {
                                                "type":  "string"
                                            },
                                            "type":  "array"
                                        },
                                        "detection_id":  {
                                            "items":  {
                                                "type":  "string"
                                            },
                                            "type":  "array"
                                        },
                                        "mitre_techniques":  {
                                            "items":  {
                                                "type":  "string"
                                            },
                                            "type":  "array"
                                        }
                                    },
                                    "required":  [
                                        "entity_id",
                                        "entity_type"
                                    ],
                                    "type":  "object"
                                }
                            }
                        },
                        "Set_Entity_ID":  {
                            "runAfter":  {
                                "Set_Entity_Type":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "SetVariable",
                            "inputs":  {
                                "name":  "entity_id",
                                "value":  "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                            }
                        },
                        "Set_Entity_Type":  {
                            "runAfter":  {
                                "Parse_JSON_For_Custom_Entities_Mapping_Data":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "SetVariable",
                            "inputs":  {
                                "name":  "entity_type",
                                "value":  "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                            }
                        },
                        "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident":  {
                            "runAfter":  {
                                "Parse_JSON_For_Custom_Entities_Mapping_Data":  [
                                    "Failed"
                                ]
                            },
                            "type":  "Terminate",
                            "inputs":  {
                                "runStatus":  "Failed",
                                "runError":  {
                                    "message":  "Playbook Triggered from Wrong Incident."
                                }
                            }
                        },
                        "Condition_To_Fetch_Detection_IDs":  {
                            "actions":  {
                                "Until_Retry_Count_is_Zero_Or_Next_is_Null_For_Detections":  {
                                    "actions":  {
                                        "Condition_to_Verify_Detections_Data_Fetched_Successfully":  {
                                            "actions":  {
                                                "Condition_To_Check_If_Count_is_Zero_For_Detections_Data":  {
                                                    "actions":  {
                                                        "Set_Break_Loop_For_Count_is_Zero":  {
                                                            "type":  "SetVariable",
                                                            "inputs":  {
                                                                "name":  "break_loop",
                                                                "value":  "@true"
                                                            }
                                                        },
                                                        "Set_Retry_Count_As_Zero_For_Count_is_Zero_For_Detections_Data":  {
                                                            "runAfter":  {
                                                                "Set_Break_Loop_For_Count_is_Zero":  [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type":  "SetVariable",
                                                            "inputs":  {
                                                                "name":  "retry_count",
                                                                "value":  0
                                                            }
                                                        }
                                                    },
                                                    "runAfter":  {
                                                        "Parse_JSON_For_Detections_Data":  [
                                                            "Succeeded",
                                                            "Failed"
                                                        ]
                                                    },
                                                    "else":  {
                                                        "actions":  {
                                                            "Condition_To_Verify_If_Next_is_Null":  {
                                                                "actions":  {
                                                                    "Set_Break_Loop_For_Next_is_Null":  {
                                                                        "type":  "SetVariable",
                                                                        "inputs":  {
                                                                            "name":  "break_loop",
                                                                            "value":  "@true"
                                                                        }
                                                                    },
                                                                    "Set_Retry_Count_As_Zero_For_Next_is_Null":  {
                                                                        "runAfter":  {
                                                                            "Set_Break_Loop_For_Next_is_Null":  [
                                                                                "Succeeded"
                                                                            ]
                                                                        },
                                                                        "type":  "SetVariable",
                                                                        "inputs":  {
                                                                            "name":  "retry_count",
                                                                            "value":  0
                                                                        }
                                                                    }
                                                                },
                                                                "runAfter":  {
                                                                    "For_Each_Detection":  [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "else":  {
                                                                    "actions":  {
                                                                        "Increment_Page_Number":  {
                                                                            "type":  "IncrementVariable",
                                                                            "inputs":  {
                                                                                "name":  "page",
                                                                                "value":  1
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "expression":  {
                                                                    "and":  [
                                                                        {
                                                                            "equals":  [
                                                                                "@body('Parse_JSON_For_Detections_Data')?['next']",
                                                                                "@null"
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "type":  "If"
                                                            },
                                                            "For_Each_Detection":  {
                                                                "foreach":  "@body('Parse_JSON_For_Detections_Data')?['results']",
                                                                "actions":  {
                                                                    "Append_Detection_ID_To_Detections":  {
                                                                        "type":  "AppendToArrayVariable",
                                                                        "inputs":  {
                                                                            "name":  "detections",
                                                                            "value":  {
                                                                                "title":  "@items('For_Each_Detection')?['id']",
                                                                                "value":  "@items('For_Each_Detection')?['id']"
                                                                            }
                                                                        }
                                                                    },
                                                                    "Append_Detection_IDs_To_Detection_IDs_List":  {
                                                                        "runAfter":  {
                                                                            "Append_Detection_ID_To_Detections":  [
                                                                                "Succeeded"
                                                                            ]
                                                                        },
                                                                        "type":  "AppendToArrayVariable",
                                                                        "inputs":  {
                                                                            "name":  "detection_ids",
                                                                            "value":  "@items('For_Each_Detection')?['id']"
                                                                        }
                                                                    }
                                                                },
                                                                "type":  "Foreach"
                                                            }
                                                        }
                                                    },
                                                    "expression":  {
                                                        "and":  [
                                                            {
                                                                "equals":  [
                                                                    "@body('Parse_JSON_For_Detections_Data')?['count']",
                                                                    0
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type":  "If"
                                                },
                                                "Parse_JSON_For_Detections_Data":  {
                                                    "type":  "ParseJson",
                                                    "inputs":  {
                                                        "content":  "@body('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')",
                                                        "schema":  {
                                                            "type":  "object",
                                                            "properties":  {
                                                                "count":  {
                                                                    "type":  [
                                                                        "integer",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "next":  {
                                                                    "type":  [
                                                                        "object",
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "previous":  {
                                                                    "type":  [
                                                                        "object",
                                                                        "string",
                                                                        "null"
                                                                    ]
                                                                },
                                                                "results":  {
                                                                    "type":  [
                                                                        "array",
                                                                        "null"
                                                                    ],
                                                                    "items":  {
                                                                        "type":  "object",
                                                                        "properties":  {
                                                                            "summary":  {
                                                                                "type":  [
                                                                                    "object",
                                                                                    "null"
                                                                                ],
                                                                                "properties":  {
                                                                                    "operations":  {
                                                                                        "type":  [
                                                                                            "array",
                                                                                            "null",
                                                                                            "string"
                                                                                        ],
                                                                                        "items":  {
                                                                                            "type":  [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "target_list":  {
                                                                                        "type":  [
                                                                                            "array",
                                                                                            "null"
                                                                                        ],
                                                                                        "items":  {
                                                                                            "type":  [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "src_ips":  {
                                                                                        "type":  [
                                                                                            "array",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "description":  {
                                                                                        "type":  [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            },
                                                                            "last_timestamp":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "is_targeting_key_asset":  {
                                                                                "type":  [
                                                                                    "boolean",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "note_modified_timestamp":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "filtered_by_rule":  {
                                                                                "type":  [
                                                                                    "boolean",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "filtered_by_ai":  {
                                                                                "type":  [
                                                                                    "boolean",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "state":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "detection":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "assigned_date":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "is_custom_model":  {
                                                                                "type":  [
                                                                                    "boolean",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "first_timestamp":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "is_marked_custom":  {
                                                                                "type":  [
                                                                                    "boolean",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "src_host":  {
                                                                                "type":  [
                                                                                    "object",
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "type":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "note":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "object",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "custom_detection":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "id":  {
                                                                                "type":  [
                                                                                    "integer",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "certainty":  {
                                                                                "type":  [
                                                                                    "integer",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "triage_rule_id":  {
                                                                                "type":  [
                                                                                    "integer",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "url":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "groups":  {
                                                                                "type":  [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "threat":  {
                                                                                "type":  [
                                                                                    "integer",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "note_modified_by":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "object",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "assigned_to":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "object",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "detection_type":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "data_source":  {
                                                                                "type":  [
                                                                                    "object",
                                                                                    "null"
                                                                                ],
                                                                                "properties":  {
                                                                                    "type":  {
                                                                                        "type":  [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "connection_name":  {
                                                                                        "type":  [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "connection_id":  {
                                                                                        "type":  [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            },
                                                                            "is_triaged":  {
                                                                                "type":  [
                                                                                    "boolean",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "notes":  {
                                                                                "type":  [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "src_ip":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "object",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "sensor":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "filtered_by_user":  {
                                                                                "type":  [
                                                                                    "boolean",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "detection_category":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "src_account":  {
                                                                                "type":  [
                                                                                    "object",
                                                                                    "null"
                                                                                ],
                                                                                "properties":  {
                                                                                    "id":  {
                                                                                        "type":  [
                                                                                            "integer",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "name":  {
                                                                                        "type":  [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "url":  {
                                                                                        "type":  [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "threat":  {
                                                                                        "type":  [
                                                                                            "integer",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "certainty":  {
                                                                                        "type":  [
                                                                                            "integer",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "privilege_level":  {
                                                                                        "type":  [
                                                                                            "string",
                                                                                            "integer",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "privilege_category":  {
                                                                                        "type":  [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            },
                                                                            "created_timestamp":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "sensor_name":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "detection_url":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "tags":  {
                                                                                "type":  [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "description":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "reason":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "investigation_pivot_link":  {
                                                                                "type":  [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "grouped_details":  {
                                                                                "type":  [
                                                                                    "array",
                                                                                    "null"
                                                                                ],
                                                                                "items":  {
                                                                                    "type":  "object",
                                                                                    "properties":  {
                                                                                        "operation":  {
                                                                                            "type":  [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        },
                                                                                        "target":  {
                                                                                            "type":  [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        },
                                                                                        "change":  {
                                                                                            "type":  [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        },
                                                                                        "results":  {
                                                                                            "type":  [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        },
                                                                                        "last_timestamp":  {
                                                                                            "type":  [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        },
                                                                                        "src_ip":  {
                                                                                            "type":  [
                                                                                                "string",
                                                                                                "object",
                                                                                                "null"
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        "required":  [
                                                                            "id"
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter":  {
                                                "HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity":  [
                                                    "Succeeded",
                                                    "Failed"
                                                ]
                                            },
                                            "else":  {
                                                "actions":  {
                                                    "Condition_To_Generate_New_Access_Token_For_Fetch_Detections_Data":  {
                                                        "actions":  {
                                                            "Condition_To_Verify_Access_Token_Generated_Successfully_For_Detections_Data":  {
                                                                "actions":  {
                                                                    "Decrement_Retry_Count_For_Detections_Data":  {
                                                                        "type":  "DecrementVariable",
                                                                        "inputs":  {
                                                                            "name":  "retry_count",
                                                                            "value":  1
                                                                        }
                                                                    }
                                                                },
                                                                "runAfter":  {
                                                                    "GenerateAccessTokenVectra_2":  [
                                                                        "Succeeded",
                                                                        "TimedOut",
                                                                        "Failed"
                                                                    ]
                                                                },
                                                                "else":  {
                                                                    "actions":  {
                                                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Detections_Data":  {
                                                                            "runAfter":  {
                                                                                "Set_Error_True_While_Generating_Token_For_Detections_Data":  [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type":  "DecrementVariable",
                                                                            "inputs":  {
                                                                                "name":  "retry_count",
                                                                                "value":  1
                                                                            }
                                                                        },
                                                                        "Set_Error_True_While_Generating_Token_For_Detections_Data":  {
                                                                            "type":  "SetVariable",
                                                                            "inputs":  {
                                                                                "name":  "access_token_generate_error",
                                                                                "value":  "@true"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "expression":  {
                                                                    "and":  [
                                                                        {
                                                                            "equals":  [
                                                                                "@body('GenerateAccessTokenVectra_2')?['status']",
                                                                                "success"
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "type":  "If"
                                                            },
                                                            "GenerateAccessTokenVectra_2":  {
                                                                "type":  "Workflow",
                                                                "inputs":  {
                                                                    "host":  {
                                                                        "workflow":  {
                                                                            "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                        },
                                                                        "triggerName":  "manual"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "else":  {
                                                            "actions":  {
                                                                "Set_Break_Loop_True_While_Fetching_Detections_Data":  {
                                                                    "runAfter":  {
                                                                        "Set_Error_True_While_Fetching_Detections":  [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type":  "SetVariable",
                                                                    "inputs":  {
                                                                        "name":  "break_loop",
                                                                        "value":  "@true"
                                                                    }
                                                                },
                                                                "Set_Error_True_While_Fetching_Detections":  {
                                                                    "type":  "SetVariable",
                                                                    "inputs":  {
                                                                        "name":  "fetch_error",
                                                                        "value":  "@true"
                                                                    }
                                                                },
                                                                "Set_Retry_Count_As_Zero_For_Other_Type_of_Error_While_Fetching_Detections":  {
                                                                    "runAfter":  {
                                                                        "Set_Break_Loop_True_While_Fetching_Detections_Data":  [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type":  "SetVariable",
                                                                    "inputs":  {
                                                                        "name":  "retry_count",
                                                                        "value":  0
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression":  {
                                                            "and":  [
                                                                {
                                                                    "equals":  [
                                                                        "@outputs('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')['statusCode']",
                                                                        401
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type":  "If"
                                                    }
                                                }
                                            },
                                            "expression":  {
                                                "and":  [
                                                    {
                                                        "equals":  [
                                                            "@outputs('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')['statusCode']",
                                                            200
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type":  "If"
                                        },
                                        "Get_Access_Token_For_Detections_Data":  {
                                            "type":  "ApiConnection",
                                            "inputs":  {
                                                "host":  {
                                                    "connection":  {
                                                        "name":  "@parameters('$connections')['keyvault']['connectionId']"
                                                    }
                                                },
                                                "method":  "get",
                                                "path":  "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                            },
                                            "runtimeConfiguration":  {
                                                "secureData":  {
                                                    "properties":  [
                                                        "inputs",
                                                        "outputs"
                                                    ]
                                                }
                                            }
                                        },
                                        "HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity":  {
                                            "runAfter":  {
                                                "Get_Access_Token_For_Detections_Data":  [
                                                    "Succeeded",
                                                    "Failed"
                                                ]
                                            },
                                            "type":  "Http",
                                            "inputs":  {
                                                "uri":  "@{variables('base_url')}/api/@{variables('api_version')}/detections",
                                                "method":  "GET",
                                                "headers":  {
                                                    "Authorization":  "Bearer @{body('Get_Access_Token_For_Detections_Data')?['value']}"
                                                },
                                                "queries":  {
                                                    "entity_id":  "@variables('entity_id')",
                                                    "page":  "@{variables('page')}"
                                                }
                                            }
                                        }
                                    },
                                    "expression":  "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                                    "limit":  {
                                        "timeout":  "PT1H"
                                    },
                                    "type":  "Until"
                                }
                            },
                            "runAfter":  {
                                "Set_Entity_ID":  [
                                    "Succeeded"
                                ]
                            },
                            "else":  {
                                "actions":  {
                                }
                            },
                            "expression":  {
                                "or":  [
                                    {
                                        "equals":  [
                                            "@empty(variables('entity_id'))",
                                            "@false"
                                        ]
                                    }
                                ]
                            },
                            "type":  "If"
                        },
                        "Condition_To_Post_Adaptive_Card_To_Get_Seleted_Detection_IDs":  {
                            "actions":  {
                                "Post_Adaptive_Card_To_Get_Selected_Detection_IDs_From_User_Input":  {
                                    "limit":  {
                                        "timeout":  "PT1H"
                                    },
                                    "type":  "ApiConnectionWebhook",
                                    "inputs":  {
                                        "host":  {
                                            "connection":  {
                                                "name":  "@parameters('$connections')['teams']['connectionId']"
                                            }
                                        },
                                        "body":  {
                                            "notificationUrl":  "@{listCallbackUrl()}",
                                            "body":  {
                                                "messageBody":  "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"style\": \"positive\",\n            \"id\": \"submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Select Detections To Download Pcap File\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n{\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID = @{variables('entity_id')}\\n\\nEntity Type = @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"id\": \"detection-choice\",\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{variables('detections')},\n            \"isRequired\": true,\n            \"label\": \"Please select detections to download pcap.\",\n            \"isMultiSelect\": true,\n            \"separator\": true,\n            \"errorMessage\": \"Select atleast one detection.\"\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                                "updateMessage":  "Thanks for your response!",
                                                "recipient":  {
                                                    "groupId":  "96a69975-817a-4f0b-aa8f-71ed76502590",
                                                    "channelId":  "19:2ZKaKGdv-lKrL26GZRwUppKDlkMdU4UGhBj4uRQjcnI1@thread.tacv2"
                                                }
                                            }
                                        },
                                        "path":  "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                    }
                                },
                                "Condition_If_User_Selected_All_or_Not":  {
                                    "actions":  {
                                    },
                                    "runAfter":  {
                                        "Post_Adaptive_Card_To_Get_Selected_Detection_IDs_From_User_Input":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "else":  {
                                        "actions":  {
                                            "Set_Detection_IDs_From_User_Input":  {
                                                "type":  "SetVariable",
                                                "inputs":  {
                                                    "name":  "detection_ids",
                                                    "value":  "@split(body('Post_Adaptive_Card_To_Get_Selected_Detection_IDs_From_User_Input')?['data']?['detection-choice'], ',')"
                                                }
                                            }
                                        }
                                    },
                                    "expression":  {
                                        "and":  [
                                            {
                                                "contains":  [
                                                    "@body('Post_Adaptive_Card_To_Get_Selected_Detection_IDs_From_User_Input')?['data']?['detection-choice']",
                                                    "All"
                                                ]
                                            }
                                        ]
                                    },
                                    "type":  "If"
                                }
                            },
                            "runAfter":  {
                                "Condition_To_Fetch_Detection_IDs":  [
                                    "Succeeded"
                                ]
                            },
                            "else":  {
                                "actions":  {
                                    "Terminate_Due_To_No_Detections_Found":  {
                                        "type":  "Terminate",
                                        "inputs":  {
                                            "runStatus":  "Failed",
                                            "runError":  {
                                                "code":  "400",
                                                "message":  "Terminate Due To No Detections Found"
                                            }
                                        }
                                    }
                                }
                            },
                            "expression":  {
                                "and":  [
                                    {
                                        "equals":  [
                                            "@empty(variables('detection_ids'))",
                                            "@false"
                                        ]
                                    }
                                ]
                            },
                            "type":  "If"
                        },
                        "Condition_To_Terminate_If_Error_While_Generating_Token_While_Fetching_Pcap":  {
                            "actions":  {
                                "Terminate_Due_To_Failure_While_Generating_Access_Token":  {
                                    "type":  "Terminate",
                                    "inputs":  {
                                        "runStatus":  "Failed",
                                        "runError":  {
                                            "code":  "400",
                                            "message":  "Error occurred while generating access token for fetching pcap file for detections."
                                        }
                                    }
                                }
                            },
                            "runAfter":  {
                                "Condition_To_Verify_If_Successfully_Pcap_Files_Fetched_or_Not":  [
                                    "Succeeded"
                                ]
                            },
                            "else":  {
                                "actions":  {
                                }
                            },
                            "expression":  {
                                "and":  [
                                    {
                                        "equals":  [
                                            "@variables('access_token_generate_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type":  "If"
                        },
                        "For_Each_Selected_Detections":  {
                            "foreach":  "@variables('detection_ids')",
                            "actions":  {
                                "Set_Retry_Count_For_Fetching_Pcap_File":  {
                                    "type":  "SetVariable",
                                    "inputs":  {
                                        "name":  "retry_count",
                                        "value":  2
                                    }
                                },
                                "Set_Temp_Detection_ID_With_Removing_Quotes_1":  {
                                    "runAfter":  {
                                        "Set_Retry_Count_For_Fetching_Pcap_File":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "type":  "SetVariable",
                                    "inputs":  {
                                        "name":  "temp_detection_id",
                                        "value":  "@replace(string(items('For_Each_Selected_Detections')),'\"','')"
                                    }
                                },
                                "HTTP_Request_To_Fetch_Pcap_File_for_Detection":  {
                                    "runAfter":  {
                                        "Set_Temp_Detection_ID_With_Removing_Quotes_1":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "type":  "Http",
                                    "inputs":  {
                                        "uri":  "@{variables('base_url')}/api/@{variables('api_version')}/detections/@{variables('temp_detection_id')}/pcap",
                                        "method":  "GET",
                                        "headers":  {
                                            "Authorization":  "Bearer @{body('Get_Access_Token_For_Fetch_Pcap_File')?['value']}"
                                        }
                                    }
                                },
                                "Condition_To_Verify_Pcap_Fetched_Successfully_or_Not":  {
                                    "actions":  {
                                        "Create_Pcap_File_In_Azure_Storage":  {
                                            "type":  "ApiConnection",
                                            "inputs":  {
                                                "host":  {
                                                    "connection":  {
                                                        "name":  "@parameters('$connections')['azurefile']['connectionId']"
                                                    }
                                                },
                                                "method":  "post",
                                                "body":  "@body('HTTP_Request_To_Fetch_Pcap_File_for_Detection')",
                                                "headers":  {
                                                    "ReadFileMetadataFromServer":  true
                                                },
                                                "path":  "/datasets/default/files",
                                                "queries":  {
                                                    "folderPath":  "@variables('storage_account_name')",
                                                    "name":  "@replace(split(string(outputs('HTTP_Request_To_Fetch_Pcap_File_for_Detection')?['headers']?['Content-Disposition']),'filename=')[1],'\"','')",
                                                    "queryParametersSingleEncoded":  true
                                                }
                                            },
                                            "runtimeConfiguration":  {
                                                "contentTransfer":  {
                                                    "transferMode":  "Chunked"
                                                }
                                            }
                                        },
                                        "Append_Detection_ID_To_Pcap_Download_Success_Detections_List":  {
                                            "runAfter":  {
                                                "Create_Pcap_File_In_Azure_Storage":  [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type":  "AppendToArrayVariable",
                                            "inputs":  {
                                                "name":  "pcap_downloaded_detections",
                                                "value":  "@variables('temp_detection_id')"
                                            }
                                        }
                                    },
                                    "runAfter":  {
                                        "HTTP_Request_To_Fetch_Pcap_File_for_Detection":  [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "else":  {
                                        "actions":  {
                                            "Condition_to_Check_Unauthorized_Error":  {
                                                "actions":  {
                                                    "Append_Detection_ID_To_Pcap_Download_401_Detections_List_":  {
                                                        "type":  "AppendToArrayVariable",
                                                        "inputs":  {
                                                            "name":  "pcap_401_detections",
                                                            "value":  "@variables('temp_detection_id')"
                                                        }
                                                    }
                                                },
                                                "else":  {
                                                    "actions":  {
                                                        "Condition_To_Check_Pcap_Available_or_Not":  {
                                                            "actions":  {
                                                                "Append_Detection_ID_To_Pcap_Download_Failed_Detections_List_":  {
                                                                    "type":  "AppendToArrayVariable",
                                                                    "inputs":  {
                                                                        "name":  "pcap_failed_detections",
                                                                        "value":  "@variables('temp_detection_id')"
                                                                    }
                                                                }
                                                            },
                                                            "else":  {
                                                                "actions":  {
                                                                    "Set_Error_True_For_Error_in_Pcap_Fetching":  {
                                                                        "type":  "SetVariable",
                                                                        "inputs":  {
                                                                            "name":  "pcap_fetch_error",
                                                                            "value":  true
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "expression":  {
                                                                "and":  [
                                                                    {
                                                                        "equals":  [
                                                                            "@outputs('HTTP_Request_To_Fetch_Pcap_File_for_Detection')?['statusCode']",
                                                                            404
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "type":  "If"
                                                        }
                                                    }
                                                },
                                                "expression":  {
                                                    "and":  [
                                                        {
                                                            "equals":  [
                                                                "@outputs('HTTP_Request_To_Fetch_Pcap_File_for_Detection')?['statusCode']",
                                                                401
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type":  "If"
                                            }
                                        }
                                    },
                                    "expression":  {
                                        "and":  [
                                            {
                                                "equals":  [
                                                    "@outputs('HTTP_Request_To_Fetch_Pcap_File_for_Detection')?['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type":  "If"
                                }
                            },
                            "runAfter":  {
                                "Get_Access_Token_For_Fetch_Pcap_File":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "Foreach",
                            "runtimeConfiguration":  {
                                "concurrency":  {
                                    "repetitions":  50
                                }
                            }
                        },
                        "Condition_To_Verify_If_Successfully_Pcap_Files_Fetched_or_Not":  {
                            "actions":  {
                                "Terminate_Due_To_Failure_While_Pcap_Fetching_From_Detections":  {
                                    "type":  "Terminate",
                                    "inputs":  {
                                        "runStatus":  "Failed",
                                        "runError":  {
                                            "message":  "Error occurred while fetching pcap for detections"
                                        }
                                    }
                                }
                            },
                            "runAfter":  {
                                "Condition_To_Check_Pcap_Download_List_Is_Empty_or_Not_":  [
                                    "Succeeded"
                                ]
                            },
                            "else":  {
                                "actions":  {
                                }
                            },
                            "expression":  {
                                "and":  [
                                    {
                                        "equals":  [
                                            "@variables('pcap_fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type":  "If"
                        },
                        "Get_Access_Token_For_Fetch_Pcap_File":  {
                            "runAfter":  {
                                "Condition_To_Terminate_If_Error_While_Generating_Token_For_Detections_Data":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "ApiConnection",
                            "inputs":  {
                                "host":  {
                                    "connection":  {
                                        "name":  "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method":  "get",
                                "path":  "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                            },
                            "runtimeConfiguration":  {
                                "secureData":  {
                                    "properties":  [
                                        "inputs",
                                        "outputs"
                                    ]
                                }
                            }
                        },
                        "Initialize_Storage_Account_Name":  {
                            "runAfter":  {
                                "Initialize_API_Information":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "InitializeVariable",
                            "inputs":  {
                                "variables":  [
                                    {
                                        "name":  "storage_account_name",
                                        "type":  "string",
                                        "value":  "[trim(parameters('StorageAccountName'))]"
                                    }
                                ]
                            }
                        },
                        "Condition_To_Check_Pcap_Download_List_Is_Empty_or_Not_":  {
                            "actions":  {
                                "Add_Comment_List_Of_Detection_IDs_For_Which_Pcap_File_Downloaded":  {
                                    "type":  "ApiConnection",
                                    "inputs":  {
                                        "host":  {
                                            "connection":  {
                                                "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method":  "post",
                                        "body":  {
                                            "incidentArmId":  "@triggerBody()?['object']?['id']",
                                            "message":  "\u003cp class=\"editor-paragraph\"\u003e\u003cb\u003e\u003cstrong class=\"editor-text-bold\"\u003eSuccessfully Downloaded PCAP File For Detection IDs : \u003c/strong\u003e\u003c/b\u003e@{replace(replace(replace(replace(string(variables('pcap_downloaded_detections')),',',', '),'[',''),']',''),'\"','')}\u003c/p\u003e"
                                        },
                                        "path":  "/Incidents/Comment"
                                    }
                                }
                            },
                            "runAfter":  {
                                "Condition_To_Fetch_Pcap_File_Required_Due_to_401_":  [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "else":  {
                                "actions":  {
                                    "Comment_For_No_Pcap_File_Found_For_Any_Detection_of_Entity":  {
                                        "type":  "ApiConnection",
                                        "inputs":  {
                                            "host":  {
                                                "connection":  {
                                                    "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                                }
                                            },
                                            "method":  "post",
                                            "body":  {
                                                "incidentArmId":  "@triggerBody()?['object']?['id']",
                                                "message":  "\u003cp class=\"editor-paragraph\"\u003eNo PCAP file was found for any detection associated with the entity.\u003c/p\u003e"
                                            },
                                            "path":  "/Incidents/Comment"
                                        }
                                    }
                                }
                            },
                            "expression":  {
                                "and":  [
                                    {
                                        "equals":  [
                                            "@empty(variables('pcap_downloaded_detections'))",
                                            "@false"
                                        ]
                                    }
                                ]
                            },
                            "type":  "If"
                        },
                        "Condition_To_Fetch_Pcap_File_Required_Due_to_401_":  {
                            "actions":  {
                                "GenerateAccessTokenVectra":  {
                                    "type":  "Workflow",
                                    "inputs":  {
                                        "host":  {
                                            "workflow":  {
                                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            },
                                            "triggerName":  "manual"
                                        }
                                    }
                                },
                                "Condition_To_Verify_Access_Token_Generated_Successfully_For_Fetch_Pcap":  {
                                    "actions":  {
                                        "Get_Access_Token_For_Fetch_Pcap_File_Again":  {
                                            "type":  "ApiConnection",
                                            "inputs":  {
                                                "host":  {
                                                    "connection":  {
                                                        "name":  "@parameters('$connections')['keyvault']['connectionId']"
                                                    }
                                                },
                                                "method":  "get",
                                                "path":  "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                            },
                                            "runtimeConfiguration":  {
                                                "secureData":  {
                                                    "properties":  [
                                                        "inputs",
                                                        "outputs"
                                                    ]
                                                }
                                            }
                                        },
                                        "For_Each_Failed-401_Detections":  {
                                            "foreach":  "@variables('pcap_401_detections')",
                                            "actions":  {
                                                "Set_Temp_Detection_ID_With_Removing_Quotes_2":  {
                                                    "type":  "SetVariable",
                                                    "inputs":  {
                                                        "name":  "temp_detection_id",
                                                        "value":  "@replace(string(items('For_Each_Failed-401_Detections')),'\"','')"
                                                    }
                                                },
                                                "HTTP_Request_To_Fetch_Pcap_File_Again_for_Detection_Failed_Detections":  {
                                                    "runAfter":  {
                                                        "Set_Temp_Detection_ID_With_Removing_Quotes_2":  [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type":  "Http",
                                                    "inputs":  {
                                                        "uri":  "@{variables('base_url')}/api/@{variables('api_version')}/detections/@{variables('temp_detection_id')}/pcap",
                                                        "method":  "GET",
                                                        "headers":  {
                                                            "Authorization":  "Bearer @{body('Get_Access_Token_For_Fetch_Pcap_File')?['value']}"
                                                        }
                                                    }
                                                },
                                                "Condition_To_Verify_Pcap_Fetched_Successfully_or_Not_1":  {
                                                    "actions":  {
                                                        "Create_Pcap_File_In_Azure_Storage_For_Failed_Detections":  {
                                                            "type":  "ApiConnection",
                                                            "inputs":  {
                                                                "host":  {
                                                                    "connection":  {
                                                                        "name":  "@parameters('$connections')['azurefile']['connectionId']"
                                                                    }
                                                                },
                                                                "method":  "post",
                                                                "body":  "@body('HTTP_Request_To_Fetch_Pcap_File_Again_for_Detection_Failed_Detections')",
                                                                "headers":  {
                                                                    "ReadFileMetadataFromServer":  true
                                                                },
                                                                "path":  "/datasets/default/files",
                                                                "queries":  {
                                                                    "folderPath":  "@{variables('storage_account_name')}",
                                                                    "name":  "@replace(split(string(outputs('HTTP_Request_To_Fetch_Pcap_File_Again_for_Detection_Failed_Detections')?['headers']?['Content-Disposition']),'filename=')[1],'\"','')",
                                                                    "queryParametersSingleEncoded":  true
                                                                }
                                                            },
                                                            "runtimeConfiguration":  {
                                                                "contentTransfer":  {
                                                                    "transferMode":  "Chunked"
                                                                }
                                                            }
                                                        },
                                                        "Append_Detection_ID_To_Pcap_Download_Success_Detections_List_1":  {
                                                            "runAfter":  {
                                                                "Create_Pcap_File_In_Azure_Storage_For_Failed_Detections":  [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type":  "AppendToArrayVariable",
                                                            "inputs":  {
                                                                "name":  "pcap_downloaded_detections",
                                                                "value":  "@variables('temp_detection_id')"
                                                            }
                                                        }
                                                    },
                                                    "runAfter":  {
                                                        "HTTP_Request_To_Fetch_Pcap_File_Again_for_Detection_Failed_Detections":  [
                                                            "Succeeded",
                                                            "TimedOut",
                                                            "Failed"
                                                        ]
                                                    },
                                                    "else":  {
                                                        "actions":  {
                                                            "Condition_to_Check_Unauthorized_Error_1":  {
                                                                "actions":  {
                                                                    "Append_Detection_ID_To_Pcap_Download_401_Detections_List__1":  {
                                                                        "type":  "AppendToArrayVariable",
                                                                        "inputs":  {
                                                                            "name":  "pcap_401_detections",
                                                                            "value":  "@variables('temp_detection_id')"
                                                                        }
                                                                    }
                                                                },
                                                                "else":  {
                                                                    "actions":  {
                                                                        "Condition_To_Check_Pcap_Available_or_Not_1":  {
                                                                            "actions":  {
                                                                                "Append_Detection_ID_To_Pcap_Download_Failed_Detections_List__1":  {
                                                                                    "type":  "AppendToArrayVariable",
                                                                                    "inputs":  {
                                                                                        "name":  "pcap_failed_detections",
                                                                                        "value":  "@variables('temp_detection_id')"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "else":  {
                                                                                "actions":  {
                                                                                    "Set_Error_True_For_Error_in_Pcap_Fetching_1":  {
                                                                                        "type":  "SetVariable",
                                                                                        "inputs":  {
                                                                                            "name":  "pcap_fetch_error",
                                                                                            "value":  true
                                                                                        }
                                                                                    }
                                                                                }
                                                                            },
                                                                            "expression":  {
                                                                                "and":  [
                                                                                    {
                                                                                        "equals":  [
                                                                                            "@outputs('HTTP_Request_To_Fetch_Pcap_File_Again_for_Detection_Failed_Detections')?['statusCode']",
                                                                                            404
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "type":  "If"
                                                                        }
                                                                    }
                                                                },
                                                                "expression":  {
                                                                    "and":  [
                                                                        {
                                                                            "equals":  [
                                                                                "@outputs('HTTP_Request_To_Fetch_Pcap_File_Again_for_Detection_Failed_Detections')?['statusCode']",
                                                                                401
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "type":  "If"
                                                            }
                                                        }
                                                    },
                                                    "expression":  {
                                                        "and":  [
                                                            {
                                                                "equals":  [
                                                                    "@outputs('HTTP_Request_To_Fetch_Pcap_File_Again_for_Detection_Failed_Detections')?['statusCode']",
                                                                    200
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type":  "If"
                                                }
                                            },
                                            "runAfter":  {
                                                "Get_Access_Token_For_Fetch_Pcap_File_Again":  [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type":  "Foreach",
                                            "runtimeConfiguration":  {
                                                "concurrency":  {
                                                    "repetitions":  50
                                                }
                                            }
                                        }
                                    },
                                    "runAfter":  {
                                        "GenerateAccessTokenVectra":  [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "else":  {
                                        "actions":  {
                                        }
                                    },
                                    "expression":  {
                                        "and":  [
                                            {
                                                "equals":  [
                                                    "@body('GenerateAccessTokenVectra')?['status']",
                                                    "success"
                                                ]
                                            }
                                        ]
                                    },
                                    "type":  "If"
                                }
                            },
                            "runAfter":  {
                                "For_Each_Selected_Detections":  [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "else":  {
                                "actions":  {
                                }
                            },
                            "expression":  {
                                "and":  [
                                    {
                                        "equals":  [
                                            "@empty(variables('pcap_401_detections'))",
                                            "@false"
                                        ]
                                    }
                                ]
                            },
                            "type":  "If"
                        }
                    },
                    "outputs":  {
                    }
                },
                "parameters":  {
                    "$connections":  {
                        "value":  {
                            "azuresentinel":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName":  "[variables('MicrosoftSentinelConnectionName')]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties":  {
                                    "authentication":  {
                                        "type":  "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "keyvault":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                                "connectionName":  "[variables('KeyvaultConnectionName')]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                            },
                            "teams":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                                "connectionName":  "[variables('TeamsConnectionName')]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
                            },
                            "azurefile":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('AzurefileConnectionName'))]",
                                "connectionName":  "[variables('AzurefileConnectionName')]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azurefile')]"
                            }
                        }
                    }
                }
            },
            "name":  "[parameters('PlaybookName')]",
            "type":  "Microsoft.Logic/workflows",
            "location":  "[resourceGroup().location]",
            "tags":  {
                "environment":  "Production",
                "hidden-SentinelTemplateName":  "VectaDownloadPcapFileToStorage",
                "hidden-SentinelTemplateVersion":  "1.0"
            },
            "identity":  {
                "type":  "SystemAssigned"
            },
            "apiVersion":  "2017-07-01",
            "dependsOn":  [
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzurefileConnectionName'))]"
            ]
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('MicrosoftSentinelConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues":  {
                },
                "parameterValueType":  "Alternative",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('KeyvaultConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('KeyvaultConnectionName')]",
                "customParameterValues":  {
                },
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                },
                "parameterValues": {
                    "token:TenantId": "[trim(parameters('TenantId'))]",
                    "token:grantType": "code",
                    "vaultName": "[trim(parameters('KeyVaultName'))]"
                }
            }
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('TeamsConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('TeamsConnectionName')]",
                "customParameterValues":  {
                },
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
                }
            }
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('AzurefileConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('AzurefileConnectionName')]",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azurefile')]"
                },
                "parameterValues": {
                    "accountName": "[trim(parameters('StorageAccountName'))]"
                }
            }
        }
    ]
}
