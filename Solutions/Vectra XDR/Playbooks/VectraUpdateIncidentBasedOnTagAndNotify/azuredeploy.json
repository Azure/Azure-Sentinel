{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Vectra Update Incident Based on Tag And Notify",
        "description": "This playbook runs hourly to identify entities with Medium severity incidents, checks for user-defined tags in Vectra, and if found, upgrades the incident severity to High, adds a comment, and sends a notification to a specified MS Teams channel.",
        "prerequisites": [
            "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
            "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
            "a. Create a Key Vault with unique name",
            "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
            "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
            "3. User must have a Microsoft Teams account.",
            "4. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraUpdateIncidentBasedOnTagAndNotify playbook."
        ],
        "postDeployment": [
            "**a. Authorize connections**",
            "Once deployment is complete, authorize each connection.",
            "1. Go to your logic app → API connections → Select keyvault connection resource",
            "2. Go to General → edit API connection",
            "3. Click Authorize",
            "4. Sign in",
            "5. Click Save",
            "6. Repeat steps for other connections",
            "**b. Add Access policy in Keyvault**",
            "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
            "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
            "2. Go to keyvaults → <your keyvault> → Access policies ? create.",
            "3. Select all keys & secrets permissions. Click next.",
            "4. In the principal section, search by copied object ID. Click next.",
            "5. Click review + create.",
            "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
            "**c. Assign Role to add comment in incident**",
            "Assign role to this playbook.",
            "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
            "2.Add role assignment",
            "3.Assignment type: Job function roles",
            "4.Role: Microsoft Sentinel Contributor",
            "5.Members: select managed identity for assigned access to and add your logic app as member",
            "6.Click on review+assign",
            "**d. Configurations in Microsoft Sentinel**",
            "1. In Microsoft sentinel, below analytical rules should be configured to trigger an incident.",
            "a. Vectra Create Incident Based On Tag For Entity Type Account",
            "b. Vectra Create Incident Based On Tag For Entity Type Host",
            "c. Vectra Priority Account Incidents",
            "d. Vectra Priority Host Incidents"
        ],
        "entities": ["Account", "Host"],
        "tags": ["Vectra", "Incident", "Update", "Tags", "Comment", "Notification"],
        "support": {
            "tier": "community",
            "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author": {
            "name": "Vectra"
        },
        "lastUpdateTime": "2024-09-02T00:00:00.000Z"
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "VectraUpdateIncidentBasedOnTagAndNotify",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
            }
        },
        "KeyVaultName": {
            "type": "string",
            "minLength": 1
        },
        "TenantId": {
            "type": "string",
            "minLength": 1
        },
        "BaseURL": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Enter baseurl of your vectra account.(e.g. https://host.portal.vectra.ai)"
            }
        },
        "Tag": {
            "metadata": {
                "description": "Enter Tag value based on which incident will be updated(e.g. MDR - Customer Escalation)"
            },
            "type": "string",
            "defaultValue": "MDR - Customer Escalation"
        },
        "TeamsGroupId": {
            "type": "string",
            "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
            }
        },
        "TeamsChannelId": {
            "type": "string",
            "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
            }
        },
        "IncidentComment": {
            "type": "string",
            "defaultValue": "Incident has been updated with High Severity.",
            "metadata": {
                "description": "Enter comment you want to add in incident which will be updated based on tag."
            }
        },
        "WorkspaceName": {
            "type": "string",
            "metadata": {
                "description": "Enter name of the log analytics workspace where incidents are available using generated using analytic rule."
            }
        },
        "GenerateAccessCredPlaybookName": {
            "type": "string",
            "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
            }
        }
    },
    "variables": {
        "AzuremonitorlogsConnectionName": "[concat('Azuremonitorlogs-', trim(parameters('PlaybookName')))]",
        "MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
        "KeyvaultConnectionName": "[concat('Keyvault-', trim(parameters('PlaybookName')))]",
        "TeamsConnectionName": "[concat('Teams-', trim(parameters('PlaybookName')))]"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "Tag": {
                            "type": "String",
                            "defaultValue": "[trim(parameters('Tag'))]"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 1
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Hour",
                                "interval": 1
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Combine_Account_And_Host_Entity_IDs_To_Entity_IDs_Array_": {
                            "runAfter": {
                                "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Entity_Data": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "entity_id",
                                "value": "@union(variables('entity_ids_host'),variables('entity_ids_account'))"
                            }
                        },
                        "Compose_Account_Entity_ID_List": {
                            "runAfter": {
                                "For_Each_Query_Result": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@join(variables('entity_ids_account'),',')"
                        },
                        "Compose_Host_Entity_ID_List": {
                            "runAfter": {
                                "Compose_Account_Entity_ID_List": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@join(variables('entity_ids_host'),',')"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Entity_Data": {
                            "actions": {
                                "Terminate_Due_To_Error_Occurred_While_Fetching_Entity_Data": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "message": "Error in fetching account data: @{body('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')}, Error in fetching host data:@{body('HTTP_Request_To_Fetch_Host_Entity_Data')}"
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_Error_Occurred_While_Generating_Access_Token": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('account_data_fetch_error')",
                                            "@true"
                                        ]
                                    },
                                    {
                                        "equals": [
                                            "@variables('host_data_fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Access_Token": {
                            "actions": {
                                "Terminate": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "Error Occurred While Generating Access Token."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Verify_Incident_With_Account_Entities_Found": [
                                    "Succeeded"
                                ],
                                "Condition_To_Verify_Incident_With_Host_Entities_Found": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('access_token_generate_error_account')",
                                            "@true"
                                        ]
                                    },
                                    {
                                        "equals": [
                                            "@variables('access_token_generate_error_host')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_No_Matching_Entities_Found_With_Provided_Tags": {
                            "actions": {
                                "Terminate_As_No_Matching_Entities_Found_With_Provided_Tags": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Succeeded"
                                    }
                                }
                            },
                            "runAfter": {
                                "Combine_Account_And_Host_Entity_IDs_To_Entity_IDs_Array_": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@length(variables('entity_id'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Verify_Incident_With_Account_Entities_Found": {
                            "actions": {
                                "Reset_Account_Entity_ID_List": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "entity_ids_account",
                                        "value": "@null"
                                    }
                                },
                                "Until_Retry_Count_is_Zero_For_Account_Entity": {
                                    "actions": {
                                        "Condition_To_Verify_Account_Data_Fetched_Successfully": {
                                            "actions": {
                                                "Condition_To_Check_Whether_Next_is_Null_": {
                                                    "actions": {
                                                        "Set_Break_Loop_True_For_Account_Entity": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "break_loop_account_entity",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Retry_Account_Count_As_Zero_For_Account_Entity_API": {
                                                            "runAfter": {
                                                                "Set_Break_Loop_True_For_Account_Entity": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "retry_count_account",
                                                                "value": 0
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "For_Each_Account_Entity": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "else": {
                                                        "actions": {
                                                            "Increment_Page_For_Account_Entity": {
                                                                "runAfter": {},
                                                                "type": "IncrementVariable",
                                                                "inputs": {
                                                                    "name": "page_account",
                                                                    "value": 1
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "equals": [
                                                                    "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['next']",
                                                                    "@null"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "For_Each_Account_Entity": {
                                                    "foreach": "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['results']",
                                                    "actions": {
                                                        "Append_Matched_Entity_ID_To_Account_Entity_IDs": {
                                                            "runAfter": {},
                                                            "type": "AppendToArrayVariable",
                                                            "inputs": {
                                                                "name": "entity_ids_account",
                                                                "value": "@items('For_Each_Account_Entity')?['id']"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Parse_JSON_For_Associated_Account_Entity_Data": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Foreach",
                                                    "runtimeConfiguration": {
                                                        "concurrency": {
                                                            "repetitions": 1
                                                        }
                                                    }
                                                },
                                                "Parse_JSON_For_Associated_Account_Entity_Data": {
                                                    "runAfter": {},
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@body('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')",
                                                        "schema": {
                                                            "properties": {
                                                                "count": {
                                                                    "type": "integer"
                                                                },
                                                                "next": {},
                                                                "previous": {},
                                                                "results": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "account_type": {},
                                                                            "attack_profile": {},
                                                                            "attack_rating": {
                                                                                "type": "integer"
                                                                            },
                                                                            "breadth_contrib": {
                                                                                "type": "integer"
                                                                            },
                                                                            "detection_set": {
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "entity_importance": {
                                                                                "type": "integer"
                                                                            },
                                                                            "entity_type": {
                                                                                "type": "string"
                                                                            },
                                                                            "host_type": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "id": {
                                                                                "type": "integer"
                                                                            },
                                                                            "importance": {
                                                                                "type": "integer"
                                                                            },
                                                                            "ip": {
                                                                                "type": [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "is_prioritized": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "last_detection_timestamp": {},
                                                                            "last_modified_timestamp": {
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "notes": {
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "privilege_category": {},
                                                                            "privilege_level": {},
                                                                            "sensors": {
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "severity": {
                                                                                "type": "string"
                                                                            },
                                                                            "state": {
                                                                                "type": "string"
                                                                            },
                                                                            "tags": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "type": {
                                                                                "type": "string"
                                                                            },
                                                                            "urgency_score": {
                                                                                "type": "integer"
                                                                            },
                                                                            "url": {
                                                                                "type": "string"
                                                                            },
                                                                            "velocity_contrib": {
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "id"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "HTTP_Request_To_Fetch_Associated_Account_Entity_Data": [
                                                    "Succeeded",
                                                    "Failed"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Condition_To_Generate_New_Access_Token_For_Associated_Account_Entity": {
                                                        "actions": {
                                                            "Condition_To_Verify_Token_Generated_Successfully_For_Associated_Account_Entity": {
                                                                "actions": {
                                                                    "Decrement_Retry_Account_Count": {
                                                                        "runAfter": {},
                                                                        "type": "DecrementVariable",
                                                                        "inputs": {
                                                                            "name": "retry_count_account",
                                                                            "value": 1
                                                                        }
                                                                    }
                                                                },
                                                                "runAfter": {
                                                                    "GenerateAccessTokenVectra_2": [
                                                                        "Succeeded",
                                                                        "Failed"
                                                                    ]
                                                                },
                                                                "else": {
                                                                    "actions": {
                                                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Account_Entity": {
                                                                            "runAfter": {},
                                                                            "type": "DecrementVariable",
                                                                            "inputs": {
                                                                                "name": "retry_count_account",
                                                                                "value": 1
                                                                            }
                                                                        },
                                                                        "Set_Error_True_While_Generating_Token_For_Associated_Account_Entity": {
                                                                            "runAfter": {
                                                                                "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Account_Entity": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "access_token_generate_error_account",
                                                                                "value": "@true"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "expression": {
                                                                    "and": [
                                                                        {
                                                                            "equals": [
                                                                                "@body('GenerateAccessTokenVectra_2')?['status']",
                                                                                "success"
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "type": "If"
                                                            },
                                                            "GenerateAccessTokenVectra_2": {
                                                                "runAfter": {},
                                                                "type": "Workflow",
                                                                "inputs": {
                                                                    "host": {
                                                                        "triggerName": "manual",
                                                                        "workflow": {
                                                                            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "else": {
                                                            "actions": {
                                                                "Set_Error_True_While_Fetching_Associated_Account_Data": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "account_data_fetch_error",
                                                                        "value": "@true"
                                                                    }
                                                                },
                                                                "Set_Retry_Account_As_Zero_For_Error_While_Fetching_Account_Entity_Data": {
                                                                    "runAfter": {
                                                                        "Set_Error_True_While_Fetching_Associated_Account_Data": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "retry_count_account",
                                                                        "value": 0
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@outputs('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')['statusCode']",
                                                                        401
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@outputs('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')['statusCode']",
                                                            200
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Get_Vectra_Access_Token_For_Account": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                            },
                                            "runtimeConfiguration": {
                                                "secureData": {
                                                    "properties": [
                                                        "outputs"
                                                    ]
                                                }
                                            }
                                        },
                                        "HTTP_Request_To_Fetch_Associated_Account_Entity_Data": {
                                            "runAfter": {
                                                "Get_Vectra_Access_Token_For_Account": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "Bearer @{body('Get_Vectra_Access_Token_For_Account')?['value']}",
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "GET",
                                                "queries": {
                                                    "id": "@{outputs('Compose_Account_Entity_ID_List')}",
                                                    "page": "@{variables('page_account')}",
                                                    "tags": "@variables('tag')",
                                                    "type": "account"
                                                },
                                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Reset_Account_Entity_ID_List": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": "@equals(or(equals(variables('retry_count_account'), 0), equals(variables('break_loop_account_entity'), true)), true)",
                                    "limit": {
                                        "timeout": "PT1H"
                                    },
                                    "type": "Until"
                                }
                            },
                            "runAfter": {
                                "Compose_Host_Entity_ID_List": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@empty(variables('entity_ids_account'))",
                                            "@false"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Verify_Incident_With_Host_Entities_Found": {
                            "actions": {
                                "Reset_Host_Entity_ID_List": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "entity_ids_host",
                                        "value": "@null"
                                    }
                                },
                                "Until_Retry_Account_is_Zero_For_Host_Entity": {
                                    "actions": {
                                        "Condition_To_Verify_Host_Data_Fetched_Successfully": {
                                            "actions": {
                                                "Condition_To_Check_Whether_Next_is_Null_For_Host_Entity": {
                                                    "actions": {
                                                        "Set_Break_Loop_True_For_Host_Entity": {
                                                            "runAfter": {
                                                                "Set_Retry_Account_Count_As_Zero_For_Host_Entity_API": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "break_loop_host_entity",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Retry_Account_Count_As_Zero_For_Host_Entity_API": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "retry_count_host",
                                                                "value": 0
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "For_Each_Host_Entity": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "else": {
                                                        "actions": {
                                                            "Increment_Page_For_Host_Entity": {
                                                                "runAfter": {},
                                                                "type": "IncrementVariable",
                                                                "inputs": {
                                                                    "name": "page_host",
                                                                    "value": 1
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "equals": [
                                                                    "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['next']",
                                                                    "@null"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "For_Each_Host_Entity": {
                                                    "foreach": "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['results']",
                                                    "actions": {
                                                        "Append_Matched_Entity_ID_To_Host_Entity_IDs": {
                                                            "runAfter": {},
                                                            "type": "AppendToArrayVariable",
                                                            "inputs": {
                                                                "name": "entity_ids_host",
                                                                "value": "@items('For_Each_Host_Entity')?['id']"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Parse_JSON_For_Associated_Host_Entity_Data": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Foreach",
                                                    "runtimeConfiguration": {
                                                        "concurrency": {
                                                            "repetitions": 1
                                                        }
                                                    }
                                                },
                                                "Parse_JSON_For_Associated_Host_Entity_Data": {
                                                    "runAfter": {},
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@body('HTTP_Request_To_Fetch_Host_Entity_Data')",
                                                        "schema": {
                                                            "properties": {
                                                                "count": {
                                                                    "type": "integer"
                                                                },
                                                                "next": {},
                                                                "previous": {},
                                                                "results": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "account_type": {},
                                                                            "attack_profile": {},
                                                                            "attack_rating": {
                                                                                "type": "integer"
                                                                            },
                                                                            "breadth_contrib": {
                                                                                "type": "integer"
                                                                            },
                                                                            "detection_set": {
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "entity_importance": {
                                                                                "type": "integer"
                                                                            },
                                                                            "entity_type": {
                                                                                "type": "string"
                                                                            },
                                                                            "host_type": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "id": {
                                                                                "type": "integer"
                                                                            },
                                                                            "importance": {
                                                                                "type": "integer"
                                                                            },
                                                                            "ip": {
                                                                                "type": [
                                                                                    "string",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "is_prioritized": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "last_detection_timestamp": {},
                                                                            "last_modified_timestamp": {
                                                                                "type": "string"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "notes": {
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "privilege_category": {},
                                                                            "privilege_level": {},
                                                                            "sensors": {
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "severity": {
                                                                                "type": "string"
                                                                            },
                                                                            "state": {
                                                                                "type": "string"
                                                                            },
                                                                            "tags": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "type": {
                                                                                "type": "string"
                                                                            },
                                                                            "urgency_score": {
                                                                                "type": "integer"
                                                                            },
                                                                            "url": {
                                                                                "type": "string"
                                                                            },
                                                                            "velocity_contrib": {
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "id"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "HTTP_Request_To_Fetch_Host_Entity_Data": [
                                                    "Succeeded",
                                                    "Failed"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Condition_To_Generate_New_Access_Token_For_Associated_Host_Entity": {
                                                        "actions": {
                                                            "Condition_To_Verify_Token_Generated_Successfully_For_Associated_Host_Entity": {
                                                                "actions": {
                                                                    "Decrement_Retry_Host_Count": {
                                                                        "runAfter": {},
                                                                        "type": "DecrementVariable",
                                                                        "inputs": {
                                                                            "name": "retry_count_host",
                                                                            "value": 1
                                                                        }
                                                                    }
                                                                },
                                                                "runAfter": {
                                                                    "GenerateAccessTokenVectra": [
                                                                        "Succeeded",
                                                                        "Failed"
                                                                    ]
                                                                },
                                                                "else": {
                                                                    "actions": {
                                                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Host_Entity": {
                                                                            "runAfter": {
                                                                                "Set_Error_True_While_Generating_Token_For_Associated_Host_Entity": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "DecrementVariable",
                                                                            "inputs": {
                                                                                "name": "retry_count_host",
                                                                                "value": 1
                                                                            }
                                                                        },
                                                                        "Set_Error_True_While_Generating_Token_For_Associated_Host_Entity": {
                                                                            "runAfter": {},
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "access_token_generate_error_host",
                                                                                "value": "@true"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "expression": {
                                                                    "and": [
                                                                        {
                                                                            "equals": [
                                                                                "@body('GenerateAccessTokenVectra')?['status']",
                                                                                "success"
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "type": "If"
                                                            },
                                                            "GenerateAccessTokenVectra": {
                                                                "runAfter": {},
                                                                "type": "Workflow",
                                                                "inputs": {
                                                                    "host": {
                                                                        "triggerName": "manual",
                                                                        "workflow": {
                                                                            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "else": {
                                                            "actions": {
                                                                "Set_Error_True_While_Fetching_Associated_Host_Data": {
                                                                    "runAfter": {
                                                                        "Set_Retry_Account_As_Zero_For_Error_While_Fetching_Host_Entity_Data": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "host_data_fetch_error",
                                                                        "value": "@true"
                                                                    }
                                                                },
                                                                "Set_Retry_Account_As_Zero_For_Error_While_Fetching_Host_Entity_Data": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "retry_count_host",
                                                                        "value": 0
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@outputs('HTTP_Request_To_Fetch_Host_Entity_Data')['statusCode']",
                                                                        401
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@outputs('HTTP_Request_To_Fetch_Host_Entity_Data')['statusCode']",
                                                            200
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Get_Vectra_Access_Token_For_Host": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                            },
                                            "runtimeConfiguration": {
                                                "secureData": {
                                                    "properties": [
                                                        "outputs"
                                                    ]
                                                }
                                            }
                                        },
                                        "HTTP_Request_To_Fetch_Host_Entity_Data": {
                                            "runAfter": {
                                                "Get_Vectra_Access_Token_For_Host": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "Bearer @{body('Get_Vectra_Access_Token_For_Host')?['value']}"
                                                },
                                                "method": "GET",
                                                "queries": {
                                                    "entity_type": "host",
                                                    "id": "@{outputs('Compose_Host_Entity_ID_List')}",
                                                    "page": "@{variables('page_host')}",
                                                    "tags": "@variables('tag')"
                                                },
                                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Reset_Host_Entity_ID_List": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": "@equals(or(equals(variables('retry_count_host'), 0), equals(variables('break_loop_host_entity'), true)), true)",
                                    "limit": {
                                        "timeout": "PT1H"
                                    },
                                    "type": "Until"
                                }
                            },
                            "runAfter": {
                                "Compose_Host_Entity_ID_List": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@empty(variables('entity_ids_host'))",
                                            "@false"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "For_Each_Matched_Entity_ID_Array": {
                            "foreach": "@variables('entity_id')",
                            "actions": {
                                "Add_comment_to_incident_(V3)": {
                                    "runAfter": {
                                        "Update_Incident_Severity_To_High": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['incident_url']}",
                                            "message": "<p>@{variables('comment')}</p>"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                    }
                                },
                                "Filter_Entity_From_Entity_Incident_Mapping": {
                                    "runAfter": {},
                                    "type": "Query",
                                    "inputs": {
                                        "from": "@variables('entity_incident_mapping')",
                                        "where": "@equals(item()?['entity_id'], items('For_Each_Matched_Entity_ID_Array'))"
                                    }
                                },
                                "Sent_Notification_Message_To_MS_Teams": {
                                    "runAfter": {
                                        "Set_Teams_Notification_For_An_Entity": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "messageBody": "<p>@{variables('teams_message')}</p>",
                                            "recipient": {
                                                "channelId": "[trim(parameters('TeamsChannelId'))]",
                                                "groupId": "[trim(parameters('TeamsGroupId'))]"
                                            }
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['teams']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                                    }
                                },
                                "Set_Teams_Notification_For_An_Entity": {
                                    "runAfter": {
                                        "Add_comment_to_incident_(V3)": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "teams_message",
                                        "value": "<strong>Entity ID: @{items('For_Each_Matched_Entity_ID_Array')}, Entity Type: @{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['entity_type']}</strong><br><br>\nIncident has been updated with High Severity in Microsoft Sentinel.<br>\n<strong>Link to the incident is:</strong><a href=@{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['incident_link']}>@{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['incident_link']}</a></p>"
                                    }
                                },
                                "Update_Incident_Severity_To_High": {
                                    "runAfter": {
                                        "Filter_Entity_From_Entity_Incident_Mapping": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "incidentArmId": "@{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['incident_url']}",
                                            "severity": "High"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                                            }
                                        },
                                        "method": "put",
                                        "path": "/Incidents"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_No_Matching_Entities_Found_With_Provided_Tags": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_Each_Query_Result": {
                            "foreach": "@body('Parse_JSON_For_Query_Results')",
                            "actions": {
                                "Append_Entity_ID_Incident_Link_And_Incident_URL_To_Entity_Incident_Mapping": {
                                    "runAfter": {
                                        "Condition_To_Verify_Entity_Type_is_Account": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "entity_incident_mapping",
                                        "value": {
                                            "entity_id": "@outputs('Compose_Entity_ID_To_Integer')",
                                            "entity_type": "@outputs('Compose_Entity_Type_To_JSON')",
                                            "incident_link": "@items('For_Each_Query_Result')?['IncidentUrl']",
                                            "incident_url": "@split(items('For_Each_Query_Result')?['IncidentUrl'], 'Microsoft_Azure_Security_Insights/Incident')[1]"
                                        }
                                    }
                                },
                                "Compose_Entity_ID_To_Integer": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "@int(json(items('For_Each_Query_Result')?['entity_id'])[0])"
                                },
                                "Compose_Entity_Type_To_JSON": {
                                    "runAfter": {
                                        "Compose_Entity_ID_To_Integer": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@json(items('For_Each_Query_Result')?['entity_type'])[0]"
                                },
                                "Condition_To_Verify_Entity_Type_is_Account": {
                                    "actions": {
                                        "Append_Entity_ID_To_Account_Entity_IDs": {
                                            "runAfter": {},
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "entity_ids_account",
                                                "value": "@outputs('Compose_Entity_ID_To_Integer')"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Compose_Entity_Type_To_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Append_Entity_ID_To_Host_Entity_IDs": {
                                                "runAfter": {},
                                                "type": "AppendToArrayVariable",
                                                "inputs": {
                                                    "name": "entity_ids_host",
                                                    "value": "@outputs('Compose_Entity_ID_To_Integer')"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('Compose_Entity_Type_To_JSON')",
                                                    "account"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Parse_JSON_For_Query_Results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_API_Version": {
                            "runAfter": {
                                "Initialize_Base_URL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api_version",
                                        "type": "string",
                                        "value": "v3.3"
                                    }
                                ]
                            }
                        },
                        "Initialize_Access_Token_Generate_Error_For_Account": {
                            "runAfter": {
                                "Initialize_Access_Token_Generate_Error_For_Host": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "access_token_generate_error_account",
                                        "type": "boolean"
                                    }
                                ]
                            }
                        },
                        "Initialize_Access_Token_Generate_Error_For_Host": {
                            "runAfter": {
                                "Initialize_Account_Data_Fetch_Error": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "access_token_generate_error_host",
                                        "type": "boolean"
                                    }
                                ]
                            }
                        },
                        "Initialize_Account_Data_Fetch_Error": {
                            "runAfter": {
                                "Initialize_Host_Data_Fetch_Error": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "account_data_fetch_error",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Account_Entity_IDs": {
                            "runAfter": {
                                "Initialize_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "entity_ids_account",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_Base_URL": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "base_url",
                                        "type": "string",
                                        "value": "[trim(parameters('BaseURL'))]"
                                    }
                                ]
                            }
                        },
                        "Initialize_Comment": {
                            "runAfter": {
                                "Initialize_Tag": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "comment",
                                        "type": "string",
                                        "value": "[trim(parameters('IncidentComment'))]"
                                    }
                                ]
                            }
                        },
                        "Initialize_Entity_ID": {
                            "runAfter": {
                                "Initialize_Entity_Incident_Mapping": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "entity_id",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_Entity_Incident_Mapping": {
                            "runAfter": {
                                "Initialize_Host_Entity_IDs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "entity_incident_mapping",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_Host_Data_Fetch_Error": {
                            "runAfter": {
                                "Initialize_Page_For_Host": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "host_data_fetch_error",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Host_Entity_IDs": {
                            "runAfter": {
                                "Initialize_Account_Entity_IDs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "entity_ids_host",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_Loop_Break_For_Account_Entity": {
                            "runAfter": {
                                "Initialize_Retry_Count_For_Host": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "break_loop_account_entity",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Loop_Break_For_Host_Entity": {
                            "runAfter": {
                                "Initialize_Loop_Break_For_Account_Entity": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "break_loop_host_entity",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Page_For_Account": {
                            "runAfter": {
                                "Initialize_Loop_Break_For_Host_Entity": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "page_account",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "Initialize_Page_For_Host": {
                            "runAfter": {
                                "Initialize_Page_For_Account": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "page_host",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "Initialize_Retry_Count_For_Account": {
                            "runAfter": {
                                "Initialize_Entity_ID": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "retry_count_account",
                                        "type": "integer",
                                        "value": 2
                                    }
                                ]
                            }
                        },
                        "Initialize_Retry_Count_For_Host": {
                            "runAfter": {
                                "Initialize_Retry_Count_For_Account": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "retry_count_host",
                                        "type": "integer",
                                        "value": 2
                                    }
                                ]
                            }
                        },
                        "Initialize_Tag": {
                            "runAfter": {
                                "Initialize_API_Version": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "tag",
                                        "type": "string",
                                        "value": "@{if(empty(parameters('Tag')), 'MDR - Customer Escalation', parameters('Tag'))}"
                                    }
                                ]
                            }
                        },
                        "Initialize_Teams_Message": {
                            "runAfter": {
                                "Initialize_Access_Token_Generate_Error_For_Account": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "teams_message",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_For_Query_Results": {
                            "runAfter": {
                                "Run_Query_And_List_Incidents_V2_(Preview)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Run_Query_And_List_Incidents_V2_(Preview)')?['value']",
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "Entities": {
                                                "type": "string"
                                            },
                                            "IncidentName": {
                                                "type": "string"
                                            },
                                            "IncidentUrl": {
                                                "type": "string"
                                            },
                                            "SystemAlertId": {
                                                "type": "string"
                                            },
                                            "entity_id": {
                                                "type": "string"
                                            },
                                            "entity_type": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "IncidentName",
                                            "IncidentUrl",
                                            "SystemAlertId",
                                            "entity_id",
                                            "entity_type",
                                            "Entities"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "Run_Query_And_List_Incidents_V2_(Preview)": {
                            "runAfter": {
                                "Initialize_Teams_Message": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "query": "SecurityIncident\n| summarize arg_max(TimeGenerated, *) by IncidentName\n| where Severity == \"Medium\" and Status != \"Deleted\"\n| mv-expand AlertIds\n| extend AlertIds = tostring(AlertIds)\n| join kind=inner(SecurityAlert) on $left.AlertIds == $right.SystemAlertId\n| extend customdetails = todynamic(ExtendedProperties).[\"Custom Details\"]\n| parse-kv customdetails as (entity_id: string, entity_Id: string, entity_type: string) with(pair_delimiter=\",\",kv_delimiter=\":\",quote='\"')\n| summarize arg_max(TimeGenerated, *) by IncidentName\n| project IncidentName, IncidentUrl, SystemAlertId, entity_id, entity_type, Entities",
                                    "timerange": {
                                        "relativeTimeRange": "Last hour"
                                    },
                                    "timerangetype": "2"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/queryDataV2",
                                "queries": {
                                    "resourcegroups": "[resourceGroup().name]",
                                    "resourcename": "[trim(parameters('WorkspaceName'))]",
                                    "resourcetype": "Log Analytics Workspace",
                                    "subscriptions": "[subscription().subscriptionId]"
                                }
                            }
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                                "connectionName": "[variables('AzuremonitorlogsConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuremonitorlogs')]"
                            },
                            "azuresentinel_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "keyvault_3": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                                "connectionName": "[variables('KeyvaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                            },
                            "teams": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                                "connectionName": "[variables('TeamsConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "hidden-SentinelTemplateName": "VectraUpdateIncidentBasedOnTagAndNotify",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzuremonitorlogsConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzuremonitorlogsConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuremonitorlogs')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('MicrosoftSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('KeyvaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('KeyvaultConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                },
                "parameterValues": {
                    "token:TenantId": "[trim(parameters('TenantId'))]",
                    "token:grantType": "code",
                    "vaultName": "[trim(parameters('KeyVaultName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('TeamsConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('TeamsConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Teams')]"
                }
            }
        }
    ]
}
