{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Vectra Operate On Entity Source IP",
        "description": "This Playbook will extract the ip from entities associated with an incident on which playbook is triggered.",
        "prerequisites": [
            "1. The Vectra XDR data connector should be configured to create alerts and generate an incident.",
            "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
            "a. Create a Key Vault with unique name",
            "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
            "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
            "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraOperateOnEntitySourceIP playbook."
        ],
        "postDeployment": [
            "**a. Authorize connections**",
            "Once deployment is complete, authorize each connection.",
            "1. Go to your logic app → API connections → Select keyvault connection resource",
            "2. Go to General → edit API connection",
            "3. Click Authorize",
            "4. Sign in",
            "5. Click Save",
            "6. Repeat steps for other connections",
            "**b. Add Access policy in Keyvault**",
            "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
            "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
            "2. Go to keyvaults → <your keyvault> → Access policies → create.",
            "3. Select all keys & secrets permissions. Click next.",
            "4. In the principal section, search by copied object ID. Click next.",
            "5. Click review + create.",
            "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
            "**c. Configurations in Sentinel**",
            "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident which has Host Entity mapped.",
            "2. To manually run the playbook on a particular incident follow the below steps:",
            "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
            "b. Select an incident.",
            "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
            "d. click on the Run button beside this playbook."
        ],
        "entities": [ "Account", "Host" ],
        "tags": [ "Vectra", "IP" ],
        "support": {
            "tier": "community",
            "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author": {
            "name": "Vectra"
        },
        "lastUpdateTime": "2024-09-02T00:00:00.000Z"
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "VectraOperateOnEntitySourceIP",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
            }
        },
        "KeyVaultName": {
            "type": "string",
            "minLength": 1
        },
        "TenantId": {
            "type": "string",
            "minLength": 1
        },
        "BaseURL": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Enter baseurl for your Vectra account.(e.g. https://host.portal.vectra.ai)"
            }
        },
        "GenerateAccessCredPlaybookName": {
            "type": "string",
            "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
            }
        }
    },
    "variables": {
        "MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
        "KeyvaultConnectionName": "[concat('Keyvault-', trim(parameters('PlaybookName')))]"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                            "actions": {
                                "Terminate_Due_To_No_Alerts_Found": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "No Alerts found associated with this Incident."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_Data_Fetch_Error_False": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_For_Entity_Type_Account_As_IP_is_Null": {
                            "actions": {
                                "Terminate_Due_To_IP_is_Null_For_Type_Account": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "422",
                                            "message": "IP got null for entity ID: @{variables('entity_id')} and Type: @{variables('entity_type')}"
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@empty(variables('ip'))",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Associated_Entity_Data": {
                            "actions": {
                                "Terminate_Due_To_Error_While_Fetching_Associated_Entity_Data": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "@{outputs('HTTP_Request_To_Fetch_Associated_Entity_Data')['statusCode']}",
                                            "message": "@{body('HTTP_Request_To_Fetch_Associated_Entity_Data')}"
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Until_Retry_Count_is_Zero_For_Associated_Entity_Data": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('fetch_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": {
                            "actions": {
                                "Terminate_Due_To_Error_While_Generating_Access_Token": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "code": "400",
                                            "message": "Error occurred while generating access token."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Associated_Entity_Data": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('access_token_generate_error')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_API_Version": {
                            "runAfter": {
                                "Initialize_Entity_ID": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "api_version",
                                        "type": "string",
                                        "value": "v3.3"
                                    }
                                ]
                            }
                        },
                        "Initialize_Base_URL": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "base_url",
                                        "type": "string",
                                        "value": "[trim(parameters('BaseURL'))]"
                                    }
                                ]
                            }
                        },
                        "Initialize_Data_Fetch_Error_False": {
                            "runAfter": {
                                "Initialize_Error_False_While_Generating_Access_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "fetch_error",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_Entity_ID": {
                            "runAfter": {
                                "Initialize_Entity_Type": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "entity_id",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Entity_Type": {
                            "runAfter": {
                                "Initialize_IP": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "entity_type",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Error_False_While_Generating_Access_Token": {
                            "runAfter": {
                                "Initialize_API_Version": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "access_token_generate_error",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        },
                        "Initialize_IP": {
                            "runAfter": {
                                "Initialize_Retry_Count": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ip",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Retry_Count": {
                            "runAfter": {
                                "Initialize_Base_URL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "retry_count",
                                        "type": "integer",
                                        "value": 2
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                            "runAfter": {
                                "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                                "schema": {
                                    "properties": {
                                        "entity_id": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "entity_type": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "tags": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "attack_profile": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "entity_importance": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "ip_address": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "detection_id": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "mitre_techniques": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "entity_id",
                                        "entity_type"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "Set_Entity_ID": {
                            "runAfter": {
                                "Set_Entity_Type": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "entity_id",
                                "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                            }
                        },
                        "Set_Entity_Type": {
                            "runAfter": {
                                "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "entity_type",
                                "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                            }
                        },
                        "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                            "runAfter": {
                                "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                                    "Failed"
                                ]
                            },
                            "type": "Terminate",
                            "inputs": {
                                "runError": {
                                    "message": "Playbook is triggered on wrong incident."
                                },
                                "runStatus": "Failed"
                            }
                        },
                        "Until_Retry_Count_is_Zero_For_Associated_Entity_Data": {
                            "actions": {
                                "Condition_To_Verify_Entities_Data_Fetched_Successfully": {
                                    "actions": {
                                        "Condition_To_Perform_Actions_Based_On_Entity_Type": {
                                            "actions": {
                                                "Set_IP_Address_For_Host": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "ip",
                                                        "value": "@{body('Parse_JSON_For_Entity_Data')?['ip']}"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_For_Entity_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@variables('entity_type')",
                                                            "host"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Parse_JSON_For_Entity_Data": {
                                            "runAfter": {},
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_Request_To_Fetch_Associated_Entity_Data')",
                                                "schema": {
                                                    "properties": {
                                                        "account_type": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": [
                                                                "array",
                                                                "null"
                                                            ]
                                                        },
                                                        "attack_profile": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "attack_rating": {
                                                            "type": "integer"
                                                        },
                                                        "breadth_contrib": {
                                                            "type": "integer"
                                                        },
                                                        "detection_set": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "entity_importance": {
                                                            "type": "integer"
                                                        },
                                                        "entity_type": {
                                                            "type": "string"
                                                        },
                                                        "host_type": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": [
                                                                "array",
                                                                "null"
                                                            ]
                                                        },
                                                        "id": {
                                                            "type": "integer"
                                                        },
                                                        "importance": {
                                                            "type": "integer"
                                                        },
                                                        "ip": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "is_prioritized": {
                                                            "type": "boolean"
                                                        },
                                                        "last_detection_timestamp": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "last_modified_timestamp": {
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "notes": {
                                                            "items": {
                                                                "properties": {
                                                                    "created_by": {
                                                                        "type": "string"
                                                                    },
                                                                    "date_created": {
                                                                        "type": "string"
                                                                    },
                                                                    "date_modified": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "id": {
                                                                        "type": "integer"
                                                                    },
                                                                    "modified_by": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "note": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "id",
                                                                    "date_created",
                                                                    "date_modified",
                                                                    "created_by",
                                                                    "modified_by",
                                                                    "note"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "privilege_category": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "privilege_level": {
                                                            "type": [
                                                                "integer",
                                                                "null"
                                                            ]
                                                        },
                                                        "sensors": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "severity": {
                                                            "type": "string"
                                                        },
                                                        "state": {
                                                            "type": "string"
                                                        },
                                                        "tags": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "type": {
                                                            "type": "string"
                                                        },
                                                        "urgency_score": {
                                                            "type": "integer"
                                                        },
                                                        "url": {
                                                            "type": "string"
                                                        },
                                                        "velocity_contrib": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Set_Retry_Count_As_Zero": {
                                            "runAfter": {
                                                "Condition_To_Perform_Actions_Based_On_Entity_Type": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "retry_count",
                                                "value": 0
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP_Request_To_Fetch_Associated_Entity_Data": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Condition_To_Generate_New_Access_Token": {
                                                "actions": {
                                                    "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                                        "actions": {
                                                            "Decrement_Retry_Count": {
                                                                "runAfter": {},
                                                                "type": "DecrementVariable",
                                                                "inputs": {
                                                                    "name": "retry_count",
                                                                    "value": 1
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "GenerateAccessTokenVectra": [
                                                                "Succeeded",
                                                                "Failed",
                                                                "TimedOut"
                                                            ]
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Decrement_Retry_Count_For_Error_While_Generating_Access_Token": {
                                                                    "runAfter": {
                                                                        "Set_Error_True_While_Generating_Access_Token": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "DecrementVariable",
                                                                    "inputs": {
                                                                        "name": "retry_count",
                                                                        "value": 1
                                                                    }
                                                                },
                                                                "Set_Error_True_While_Generating_Access_Token": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "access_token_generate_error",
                                                                        "value": "@true"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@body('GenerateAccessTokenVectra')?['status']",
                                                                        "success"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "GenerateAccessTokenVectra": {
                                                        "runAfter": {},
                                                        "type": "Workflow",
                                                        "inputs": {
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "else": {
                                                    "actions": {
                                                        "Set_Error_True_While_Fetching_Data_For_Associated_Entity": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "fetch_error",
                                                                "value": "@true"
                                                            }
                                                        },
                                                        "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Data_Of_Associated_Entity": {
                                                            "runAfter": {
                                                                "Set_Error_True_While_Fetching_Data_For_Associated_Entity": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "retry_count",
                                                                "value": 0
                                                            }
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "equals": [
                                                                "@outputs('HTTP_Request_To_Fetch_Associated_Entity_Data')['statusCode']",
                                                                401
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('HTTP_Request_To_Fetch_Associated_Entity_Data')['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_Access_Token": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                    },
                                    "runtimeConfiguration": {
                                        "secureData": {
                                            "properties": [
                                                "inputs",
                                                "outputs"
                                            ]
                                        }
                                    }
                                },
                                "HTTP_Request_To_Fetch_Associated_Entity_Data": {
                                    "runAfter": {
                                        "Get_Access_Token": [
                                            "Succeeded",
                                            "Failed"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Authorization": "Bearer @{body('Get_Access_Token')?['value']}"
                                        },
                                        "method": "GET",
                                        "queries": {
                                            "type": "@variables('entity_type')"
                                        },
                                        "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities/@{int(variables('entity_id'))}"
                                    }
                                }
                            },
                            "runAfter": {
                                "Set_Entity_ID": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(variables('retry_count'), 0)",
                            "limit": {
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                                "connectionName": "[variables('KeyvaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "hidden-SentinelTemplateName": "VectraOperateOnEntitySourceIP",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('MicrosoftSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('KeyvaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('KeyvaultConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
                },
                "parameterValues": {
                    "token:TenantId": "[trim(parameters('TenantId'))]",
                    "token:grantType": "code",
                    "vaultName": "[trim(parameters('KeyVaultName'))]"
                }
            }
        }
    ]
}
