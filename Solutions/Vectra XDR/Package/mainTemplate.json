{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "TME - tme@vetcra.ai",
    "comments": "Solution template for Vectra XDR"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "Vectra XDR",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    }
  },
  "variables": {
    "email": "tme@vetcra.ai",
    "_email": "[variables('email')]",
    "_solutionName": "Vectra XDR",
    "_solutionVersion": "3.2.0",
    "solutionId": "vectraaiinc.vectra-xdr-for-microsoft-sentinel",
    "_solutionId": "[variables('solutionId')]",
    "uiConfigId1": "VectraXDR",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "VectraXDR",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "_dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "parserObject1": {
      "_parserName1": "[concat(parameters('workspace'),'/','VectraDetections')]",
      "_parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraDetections')]",
      "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('VectraDetections-Parser')))]",
      "parserVersion1": "1.0.1",
      "parserContentId1": "VectraDetections-Parser"
    },
    "parserObject2": {
      "_parserName2": "[concat(parameters('workspace'),'/','VectraAudits')]",
      "_parserId2": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraAudits')]",
      "parserTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('VectraAudits-Parser')))]",
      "parserVersion2": "1.0.0",
      "parserContentId2": "VectraAudits-Parser"
    },
    "parserObject3": {
      "_parserName3": "[concat(parameters('workspace'),'/','VectraEntityScoring')]",
      "_parserId3": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraEntityScoring')]",
      "parserTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('VectraEntityScoring-Parser')))]",
      "parserVersion3": "1.0.0",
      "parserContentId3": "VectraEntityScoring-Parser"
    },
    "parserObject4": {
      "_parserName4": "[concat(parameters('workspace'),'/','VectraHealth')]",
      "_parserId4": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraHealth')]",
      "parserTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('VectraHealth-Parser')))]",
      "parserVersion4": "1.0.0",
      "parserContentId4": "VectraHealth-Parser"
    },
    "parserObject5": {
      "_parserName5": "[concat(parameters('workspace'),'/','VectraLockdown')]",
      "_parserId5": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraLockdown')]",
      "parserTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('VectraLockdown-Parser')))]",
      "parserVersion5": "1.0.0",
      "parserContentId5": "VectraLockdown-Parser"
    },
    "analyticRuleObject1": {
      "analyticRuleVersion1": "1.0.0",
      "_analyticRulecontentId1": "87325835-dd8c-41e7-b686-fd5adbbd0aee",
      "analyticRuleId1": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '87325835-dd8c-41e7-b686-fd5adbbd0aee')]",
      "analyticRuleTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('87325835-dd8c-41e7-b686-fd5adbbd0aee')))]",
      "_analyticRulecontentProductId1": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','87325835-dd8c-41e7-b686-fd5adbbd0aee','-', '1.0.0')))]"
    },
    "analyticRuleObject2": {
      "analyticRuleVersion2": "1.0.0",
      "_analyticRulecontentId2": "8b7a1a64-8ef2-4000-b8c9-9bca3b93aace",
      "analyticRuleId2": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '8b7a1a64-8ef2-4000-b8c9-9bca3b93aace')]",
      "analyticRuleTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('8b7a1a64-8ef2-4000-b8c9-9bca3b93aace')))]",
      "_analyticRulecontentProductId2": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','8b7a1a64-8ef2-4000-b8c9-9bca3b93aace','-', '1.0.0')))]"
    },
    "analyticRuleObject3": {
      "analyticRuleVersion3": "1.0.1",
      "_analyticRulecontentId3": "9b51b0fb-0419-4450-9ea0-0a48751c4902",
      "analyticRuleId3": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '9b51b0fb-0419-4450-9ea0-0a48751c4902')]",
      "analyticRuleTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('9b51b0fb-0419-4450-9ea0-0a48751c4902')))]",
      "_analyticRulecontentProductId3": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','9b51b0fb-0419-4450-9ea0-0a48751c4902','-', '1.0.1')))]"
    },
    "analyticRuleObject4": {
      "analyticRuleVersion4": "1.0.1",
      "_analyticRulecontentId4": "af6f2812-0187-4cc9-822a-952f8b5b6b7e",
      "analyticRuleId4": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'af6f2812-0187-4cc9-822a-952f8b5b6b7e')]",
      "analyticRuleTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('af6f2812-0187-4cc9-822a-952f8b5b6b7e')))]",
      "_analyticRulecontentProductId4": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','af6f2812-0187-4cc9-822a-952f8b5b6b7e','-', '1.0.1')))]"
    },
    "analyticRuleObject5": {
      "analyticRuleVersion5": "1.0.1",
      "_analyticRulecontentId5": "fb861539-da19-4266-831f-99459b8e7605",
      "analyticRuleId5": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'fb861539-da19-4266-831f-99459b8e7605')]",
      "analyticRuleTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('fb861539-da19-4266-831f-99459b8e7605')))]",
      "_analyticRulecontentProductId5": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','fb861539-da19-4266-831f-99459b8e7605','-', '1.0.1')))]"
    },
    "analyticRuleObject6": {
      "analyticRuleVersion6": "1.0.1",
      "_analyticRulecontentId6": "e796701f-6b39-4c54-bf8a-1d543a990784",
      "analyticRuleId6": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'e796701f-6b39-4c54-bf8a-1d543a990784')]",
      "analyticRuleTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('e796701f-6b39-4c54-bf8a-1d543a990784')))]",
      "_analyticRulecontentProductId6": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','e796701f-6b39-4c54-bf8a-1d543a990784','-', '1.0.1')))]"
    },
    "workbookVersion1": "2.0.0",
    "workbookContentId1": "VectraXDR",
    "workbookId1": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId1'))]",
    "workbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId1'))))]",
    "_workbookContentId1": "[variables('workbookContentId1')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_workbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','wb','-', uniqueString(concat(variables('_solutionId'),'-','Workbook','-',variables('_workbookContentId1'),'-', variables('workbookVersion1'))))]",
    "VectraAddNoteToEntity": "VectraAddNoteToEntity",
    "_VectraAddNoteToEntity": "[variables('VectraAddNoteToEntity')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "VectraAddNoteToEntity",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1'))))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "blanks": "[replace('b', 'b', '')]",
    "VectraAddTagToEntityAllDetections": "VectraAddTagToEntityAllDetections",
    "_VectraAddTagToEntityAllDetections": "[variables('VectraAddTagToEntityAllDetections')]",
    "TemplateEmptyArray": "[json('[]')]",
    "playbookVersion2": "1.0",
    "playbookContentId2": "VectraAddTagToEntityAllDetections",
    "_playbookContentId2": "[variables('playbookContentId2')]",
    "playbookId2": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId2'))]",
    "playbookTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId2'))))]",
    "_playbookcontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId2'),'-', variables('playbookVersion2'))))]",
    "VectraAddTagToEntity": "VectraAddTagToEntity",
    "_VectraAddTagToEntity": "[variables('VectraAddTagToEntity')]",
    "playbookVersion3": "1.0",
    "playbookContentId3": "VectraAddTagToEntity",
    "_playbookContentId3": "[variables('playbookContentId3')]",
    "playbookId3": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId3'))]",
    "playbookTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId3'))))]",
    "_playbookcontentProductId3": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId3'),'-', variables('playbookVersion3'))))]",
    "VectraAddTagToEntitySelectedDetections": "VectraAddTagToEntitySelectedDetections",
    "_VectraAddTagToEntitySelectedDetections": "[variables('VectraAddTagToEntitySelectedDetections')]",
    "playbookVersion4": "1.0",
    "playbookContentId4": "VectraAddTagToEntitySelectedDetections",
    "_playbookContentId4": "[variables('playbookContentId4')]",
    "playbookId4": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId4'))]",
    "playbookTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId4'))))]",
    "_playbookcontentProductId4": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId4'),'-', variables('playbookVersion4'))))]",
    "VectraDynamicAssignMembersToGroup": "VectraDynamicAssignMembersToGroup",
    "_VectraDynamicAssignMembersToGroup": "[variables('VectraDynamicAssignMembersToGroup')]",
    "playbookVersion5": "1.0",
    "playbookContentId5": "VectraDynamicAssignMembersToGroup",
    "_playbookContentId5": "[variables('playbookContentId5')]",
    "playbookId5": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId5'))]",
    "playbookTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId5'))))]",
    "_playbookcontentProductId5": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId5'),'-', variables('playbookVersion5'))))]",
    "VectraAssignDynamicUserToEntity": "VectraAssignDynamicUserToEntity",
    "_VectraAssignDynamicUserToEntity": "[variables('VectraAssignDynamicUserToEntity')]",
    "playbookVersion6": "1.0",
    "playbookContentId6": "VectraAssignDynamicUserToEntity",
    "_playbookContentId6": "[variables('playbookContentId6')]",
    "playbookId6": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId6'))]",
    "playbookTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId6'))))]",
    "_playbookcontentProductId6": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId6'),'-', variables('playbookVersion6'))))]",
    "VectraStaticAssignMembersToGroup": "VectraStaticAssignMembersToGroup",
    "_VectraStaticAssignMembersToGroup": "[variables('VectraStaticAssignMembersToGroup')]",
    "playbookVersion7": "1.0",
    "playbookContentId7": "VectraStaticAssignMembersToGroup",
    "_playbookContentId7": "[variables('playbookContentId7')]",
    "playbookId7": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId7'))]",
    "playbookTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId7'))))]",
    "_playbookcontentProductId7": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId7'),'-', variables('playbookVersion7'))))]",
    "VectraAssignStaticUserToEntity": "VectraAssignStaticUserToEntity",
    "_VectraAssignStaticUserToEntity": "[variables('VectraAssignStaticUserToEntity')]",
    "playbookVersion8": "1.0",
    "playbookContentId8": "VectraAssignStaticUserToEntity",
    "_playbookContentId8": "[variables('playbookContentId8')]",
    "playbookId8": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId8'))]",
    "playbookTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId8'))))]",
    "_playbookcontentProductId8": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId8'),'-', variables('playbookVersion8'))))]",
    "VectraDecorateIncidentBasedOnTag": "VectraDecorateIncidentBasedOnTag",
    "_VectraDecorateIncidentBasedOnTag": "[variables('VectraDecorateIncidentBasedOnTag')]",
    "playbookVersion9": "1.0",
    "playbookContentId9": "VectraDecorateIncidentBasedOnTag",
    "_playbookContentId9": "[variables('playbookContentId9')]",
    "playbookId9": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId9'))]",
    "playbookTemplateSpecName9": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId9'))))]",
    "_playbookcontentProductId9": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId9'),'-', variables('playbookVersion9'))))]",
    "VectraDecorateIncidentBasedOnTagAndNotify": "VectraDecorateIncidentBasedOnTagAndNotify",
    "_VectraDecorateIncidentBasedOnTagAndNotify": "[variables('VectraDecorateIncidentBasedOnTagAndNotify')]",
    "playbookVersion10": "1.0",
    "playbookContentId10": "VectraDecorateIncidentBasedOnTagAndNotify",
    "_playbookContentId10": "[variables('playbookContentId10')]",
    "playbookId10": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId10'))]",
    "playbookTemplateSpecName10": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId10'))))]",
    "_playbookcontentProductId10": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId10'),'-', variables('playbookVersion10'))))]",
    "VectraDynamicResolveAssignment": "VectraDynamicResolveAssignment",
    "_VectraDynamicResolveAssignment": "[variables('VectraDynamicResolveAssignment')]",
    "playbookVersion11": "1.0",
    "playbookContentId11": "VectraDynamicResolveAssignment",
    "_playbookContentId11": "[variables('playbookContentId11')]",
    "playbookId11": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId11'))]",
    "playbookTemplateSpecName11": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId11'))))]",
    "_playbookcontentProductId11": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId11'),'-', variables('playbookVersion11'))))]",
    "VectraGenerateAccessToken": "VectraGenerateAccessToken",
    "_VectraGenerateAccessToken": "[variables('VectraGenerateAccessToken')]",
    "playbookVersion12": "1.0",
    "playbookContentId12": "VectraGenerateAccessToken",
    "_playbookContentId12": "[variables('playbookContentId12')]",
    "playbookId12": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId12'))]",
    "playbookTemplateSpecName12": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId12'))))]",
    "_playbookcontentProductId12": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId12'),'-', variables('playbookVersion12'))))]",
    "VectraIncidentTimelineUpdate": "VectraIncidentTimelineUpdate",
    "_VectraIncidentTimelineUpdate": "[variables('VectraIncidentTimelineUpdate')]",
    "playbookVersion13": "1.0",
    "playbookContentId13": "VectraIncidentTimelineUpdate",
    "_playbookContentId13": "[variables('playbookContentId13')]",
    "playbookId13": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId13'))]",
    "playbookTemplateSpecName13": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId13'))))]",
    "_playbookcontentProductId13": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId13'),'-', variables('playbookVersion13'))))]",
    "VectraMarkDetectionsAsFixed": "VectraMarkDetectionsAsFixed",
    "_VectraMarkDetectionsAsFixed": "[variables('VectraMarkDetectionsAsFixed')]",
    "playbookVersion14": "1.0",
    "playbookContentId14": "VectraMarkDetectionsAsFixed",
    "_playbookContentId14": "[variables('playbookContentId14')]",
    "playbookId14": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId14'))]",
    "playbookTemplateSpecName14": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId14'))))]",
    "_playbookcontentProductId14": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId14'),'-', variables('playbookVersion14'))))]",
    "VectraOperateOnEntitySourceIP": "VectraOperateOnEntitySourceIP",
    "_VectraOperateOnEntitySourceIP": "[variables('VectraOperateOnEntitySourceIP')]",
    "playbookVersion15": "1.0",
    "playbookContentId15": "VectraOperateOnEntitySourceIP",
    "_playbookContentId15": "[variables('playbookContentId15')]",
    "playbookId15": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId15'))]",
    "playbookTemplateSpecName15": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId15'))))]",
    "_playbookcontentProductId15": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId15'),'-', variables('playbookVersion15'))))]",
    "VectraStaticResolveAssignment": "VectraStaticResolveAssignment",
    "_VectraStaticResolveAssignment": "[variables('VectraStaticResolveAssignment')]",
    "playbookVersion16": "1.0",
    "playbookContentId16": "VectraStaticResolveAssignment",
    "_playbookContentId16": "[variables('playbookContentId16')]",
    "playbookId16": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId16'))]",
    "playbookTemplateSpecName16": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId16'))))]",
    "_playbookcontentProductId16": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId16'),'-', variables('playbookVersion16'))))]",
    "VectraUpdateIncidentBasedOnTagAndNotify": "VectraUpdateIncidentBasedOnTagAndNotify",
    "_VectraUpdateIncidentBasedOnTagAndNotify": "[variables('VectraUpdateIncidentBasedOnTagAndNotify')]",
    "playbookVersion17": "1.0",
    "playbookContentId17": "VectraUpdateIncidentBasedOnTagAndNotify",
    "_playbookContentId17": "[variables('playbookContentId17')]",
    "playbookId17": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId17'))]",
    "playbookTemplateSpecName17": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId17'))))]",
    "_playbookcontentProductId17": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId17'),'-', variables('playbookVersion17'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]",
    "id_d": "id_d",
    "_id_d": "[variables('id_d')]",
    "entityid": "entity_id",
    "_entity_id": "[variables('entityid')]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Vectra XDR data connector with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "Vectra XDR (using Azure Functions)",
                  "publisher": "Vectra",
                  "descriptionMarkdown": "The [Vectra XDR](https://www.vectra.ai/) connector gives the capability to ingest Vectra Detections, Audits, Entity Scoring, Lockdown, Health and Entities data into Microsoft Sentinel through the Vectra REST API. Refer to the API documentation: `https://support.vectra.ai/s/article/KB-VS-1666` for more information.",
                  "additionalRequirementBanner": "These queries and workbooks are dependent on a parser based on Kusto to work as expected. Follow the steps to use this Kusto functions alias **VectraDetections** in queries and workbooks [Follow steps to get this VectraDetections Kusto functions>](https://aka.ms/sentinel-VectraDetections-parser), **VectraAudits** in queries and workbooks [Follow steps to get this VectraAudits Kusto functions>](https://aka.ms/sentinel-VectraAudits-parser) and **VectraEntityScoring** in queries and workbooks [Follow steps to get this VectraEntityScoring Kusto functions>](https://aka.ms/sentinel-VectraEntityScoring-parser).",
                  "graphQueries": [
                    {
                      "metricName": "Total Detections data received",
                      "legend": "Detections_Data_CL",
                      "baseQuery": "Detections_Data_CL"
                    },
                    {
                      "metricName": "Total Audits data received",
                      "legend": "Audits_Data_CL",
                      "baseQuery": "Audits_Data_CL"
                    },
                    {
                      "metricName": "Total Entity Scoring data received",
                      "legend": "Entity_Scoring_Data_CL",
                      "baseQuery": "Entity_Scoring_Data_CL"
                    },
                    {
                      "metricName": "Total Lockdown data received",
                      "legend": "Lockdown_Data_CL",
                      "baseQuery": "Lockdown_Data_CL"
                    },
                    {
                      "metricName": "Total Health data received",
                      "legend": "Health_Data_CL",
                      "baseQuery": "Health_Data_CL"
                    },
                    {
                      "metricName": "Total Entities data received",
                      "legend": "Entities_Data_CL",
                      "baseQuery": "Entities_Data_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Vectra Detections Events - All Detections Events.",
                      "query": "Detections_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Vectra Audits Events - All Audits Events.",
                      "query": "Audits_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Vectra Entity Scoring Events - All Entity Scoring Events.",
                      "query": "Entity_Scoring_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Vectra Lockdown Events - All Lockdown Events.",
                      "query": "Lockdown_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Vectra Health Events - All Health Events.",
                      "query": "Health_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Vectra Entities Events - All Entities Events.",
                      "query": "Entities_Data_CL\n | sort by TimeGenerated desc"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "Detections_Data_CL",
                      "lastDataReceivedQuery": "Detections_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Audits_Data_CL",
                      "lastDataReceivedQuery": "Audits_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Entity_Scoring_Data_CL",
                      "lastDataReceivedQuery": "Entity_Scoring_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Lockdown_Data_CL",
                      "lastDataReceivedQuery": "Lockdown_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Health_Data_CL",
                      "lastDataReceivedQuery": "Health_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Entities_Data_CL",
                      "lastDataReceivedQuery": "Entities_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Detections_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Audits_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Entity_Scoring_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Lockdown_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Health_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Entities_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions on the workspace are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Microsoft.Web/sites permissions",
                        "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
                      },
                      {
                        "name": "REST API Credentials/permissions",
                        "description": "**Vectra Client ID** and **Client Secret**  is required for Health, Entity Scoring, Entities, Detections, Lockdown and Audit data collection.  See the documentation to learn more about API on the `https://support.vectra.ai/s/article/KB-VS-1666`."
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This connector uses Azure Functions to connect to the Vectra API to pull its logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
                    },
                    {
                      "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
                    },
                    {
                      "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected. Follow these steps for [Detections Parser](https://aka.ms/sentinel-VectraDetections-parser), [Audits Parser](https://aka.ms/sentinel-VectraAudits-parser), [Entity Scoring Parser](https://aka.ms/sentinel-VectraEntityScoring-parser), [Lockdown Parser](https://aka.ms/sentinel-VectraLockdown-parser) and [Health Parser](https://aka.ms/sentinel-VectraHealth-parser) to create the Kusto functions alias, **VectraDetections**, **VectraAudits**, **VectraEntityScoring**, **VectraLockdown** and **VectraHealth**."
                    },
                    {
                      "description": "**STEP 1 - Configuration steps for the Vectra API Credentials**\n\n Follow these instructions to create a Vectra Client ID and Client Secret.\n 1. Log into your Vectra portal\n 2. Navigate to Manage -> API Clients\n 3. From the API Clients page, select 'Add API Client' to create a new client.\n 4. Add Client Name, select Role and click on Generate Credentials to obtain your client credentials. \n 5. Be sure to record your Client ID and Secret Key for safekeeping. You will need these two pieces of information to obtain an access token from the Vectra API. An access token is required to make requests to all of the Vectra API endpoints."
                    },
                    {
                      "description": "**STEP 2 - App Registration steps for the Application in Microsoft Entra ID**\n\n This integration requires an App registration in the Azure portal. Follow the steps in this section to create a new application in Microsoft Entra ID:\n 1. Sign in to the [Azure portal](https://portal.azure.com/).\n 2. Search for and select **Microsoft Entra ID**.\n 3. Under **Manage**, select **App registrations > New registration**.\n 4. Enter a display **Name** for your application.\n 5. Select **Register** to complete the initial app registration.\n 6. When registration finishes, the Azure portal displays the app registration's Overview pane. You see the **Application (client) ID** and **Tenant ID**. The client ID and Tenant ID is required as configuration parameters for the execution of Vectra Data Connector. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app)"
                    },
                    {
                      "description": "**STEP 3 - Add a client secret for application in Microsoft Entra ID**\n\n Sometimes called an application password, a client secret is a string value required for the execution of Vectra Data Connector. Follow the steps in this section to create a new Client Secret:\n 1. In the Azure portal, in **App registrations**, select your application.\n 2. Select **Certificates & secrets > Client secrets > New client secret**.\n 3. Add a description for your client secret.\n 4. Select an expiration for the secret or specify a custom lifetime. Limit is 24 months.\n 5. Select **Add**. \n 6. *Record the secret's value for use in your client application code. This secret value is never displayed again after you leave this page.* The secret value is required as configuration parameter for the execution of Vectra Data Connector. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret)"
                    },
                    {
                      "description": "**STEP 4 - Assign role of Contributor to application in Microsoft Entra ID**\n\n Follow the steps in this section to assign the role:\n 1. In the Azure portal, Go to **Resource Group** and select your resource group.\n 2. Go to **Access control (IAM)** from left panel.\n 3. Click on **Add**, and then select **Add role assignment**.\n 4. Select **Contributor** as role and click on next.\n 5. In **Assign access to**, select `User, group, or service principal`.\n 6. Click on **add members** and type **your app name** that you have created and select it.\n 7. Now click on **Review + assign** and then again click on **Review + assign**. \n\n> **Reference link:** [https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal](https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal)"
                    },
                    {
                      "description": "**STEP 5 - Create a Keyvault**\n\n Follow these instructions to create a new Keyvault.\n 1. In the Azure portal, Go to **Key vaults** and click on Create.\n 2. Select Subsciption, Resource Group and provide unique name of keyvault."
                    },
                    {
                      "description": "**STEP 6 - Create Access Policy in Keyvault**\n\n Follow these instructions to create access policy in Keyvault.\n 1. Go to keyvaults, select your keyvault, go to Access policies on left side panel, click on create.\n 2. Select all keys & secrets permissions. Click next.\n 3. In the principal section, search by application name which was generated in STEP - 2. Click next.\n\n **Note: **Ensure the Permission model in the Access Configuration of Key Vault is set to **'Vault access policy'**"
                    },
                    {
                      "description": "**STEP 7 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Vectra data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available.., as well as the Vectra API Authorization Credentials",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Primary Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ]
                    },
                    {
                      "description": "Use this method for automated deployment of the Vectra connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-VectraXDRAPI-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tFunction Name \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tVectra Base URL (https://<vectra-portal-url>) \n\t\tVectra Client Id - Health \n\t\tVectra Client Secret Key - Health \n\t\tVectra Client Id - Entity Scoring \n\t\tVectra Client Secret - Entity Scoring \n\t\tVectra Client Id - Detections \n\t\tVectra Client Secret - Detections \n\t\tVectra Client Id - Audits \n\t\tVectra Client Secret - Audits \n\t\tVectra Client Id - Lockdown \n\t\tVectra Client Secret - Lockdown \n\t\tVectra Client Id - Host-Entity \n\t\tVectra Client Secret - Host-Entity \n\t\tVectra Client Id - Account-Entity \n\t\tVectra Client Secret - Account-Entity \n\t\tKey Vault Name \n\t\tAzure Client Id \n\t\tAzure Client Secret \n\t\tTenant Id \n\t\tStartTime (in MM/DD/YYYY HH:MM:SS Format) \n\t\tInclude Score Decrease \n\t\tAudits Table Name \n\t\tDetections Table Name \n\t\tEntity Scoring Table Name \n\t\tLockdown Table Name \n\t\tHealth Table Name \n\t\tEntities Table Name \n\t\tLog Level (Default: INFO) \n\t\tLockdown Schedule \n\t\tHealth Schedule \n\t\tDetections Schedule \n\t\tAudits Schedule \n\t\tEntity Scoring Schedule \n\t\tEntities Schedule \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
                      "title": "Option 1 - Azure Resource Manager (ARM) Template"
                    },
                    {
                      "description": "Use the following step-by-step instructions to deploy the Vectra data connector manually with Azure Functions (Deployment via Visual Studio Code).",
                      "title": "Option 2 - Manual Deployment of Azure Functions"
                    },
                    {
                      "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-VectraXDR-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. VECTRAXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8 or above.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
                    },
                    {
                      "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective values (case-sensitive): \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tVectra Base URL (https://<vectra-portal-url>) \n\t\tVectra Client Id - Health \n\t\tVectra Client Secret Key - Health \n\t\tVectra Client Id - Entity Scoring \n\t\tVectra Client Secret - Entity Scoring \n\t\tVectra Client Id - Detections \n\t\tVectra Client Secret - Detections \n\t\tVectra Client Id - Audits \n\t\tVectra Client Secret - Audits \n\t\tVectra Client Id - Lockdown \n\t\tVectra Client Secret - Lockdown \n\t\tVectra Client Id - Host-Entity \n\t\tVectra Client Secret - Host-Entity \n\t\tVectra Client Id - Account-Entity \n\t\tVectra Client Secret - Account-Entity \n\t\tKey Vault Name \n\t\tAzure Client Id \n\t\tAzure Client Secret \n\t\tTenant Id \n\t\tStartTime (in MM/DD/YYYY HH:MM:SS Format) \n\t\tInclude Score Decrease \n\t\tAudits Table Name \n\t\tDetections Table Name \n\t\tEntity Scoring Table Name \n\t\tLockdown Table Name \n\t\tHealth Table Name \n\t\tEntities Table Name \n\t\tLog Level (Default: INFO) \n\t\tLockdown Schedule \n\t\tHealth Schedule \n\t\tDetections Schedule \n\t\tAudits Schedule \n\t\tEntity Scoring Schedule \n\t\tEntities Schedule \n\t\tlogAnalyticsUri (optional) \n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://<CustomerId>.ods.opinsights.azure.us`.\n4. Once all application settings have been entered, click **Save**."
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "Vectra XDR (using Azure Functions)",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Vectra XDR (using Azure Functions)",
          "publisher": "Vectra",
          "descriptionMarkdown": "The [Vectra XDR](https://www.vectra.ai/) connector gives the capability to ingest Vectra Detections, Audits, Entity Scoring, Lockdown, Health and Entities data into Microsoft Sentinel through the Vectra REST API. Refer to the API documentation: `https://support.vectra.ai/s/article/KB-VS-1666` for more information.",
          "graphQueries": [
            {
              "metricName": "Total Detections data received",
              "legend": "Detections_Data_CL",
              "baseQuery": "Detections_Data_CL"
            },
            {
              "metricName": "Total Audits data received",
              "legend": "Audits_Data_CL",
              "baseQuery": "Audits_Data_CL"
            },
            {
              "metricName": "Total Entity Scoring data received",
              "legend": "Entity_Scoring_Data_CL",
              "baseQuery": "Entity_Scoring_Data_CL"
            },
            {
              "metricName": "Total Lockdown data received",
              "legend": "Lockdown_Data_CL",
              "baseQuery": "Lockdown_Data_CL"
            },
            {
              "metricName": "Total Health data received",
              "legend": "Health_Data_CL",
              "baseQuery": "Health_Data_CL"
            },
            {
              "metricName": "Total Entities data received",
              "legend": "Entities_Data_CL",
              "baseQuery": "Entities_Data_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "Detections_Data_CL",
              "lastDataReceivedQuery": "Detections_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Audits_Data_CL",
              "lastDataReceivedQuery": "Audits_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Entity_Scoring_Data_CL",
              "lastDataReceivedQuery": "Entity_Scoring_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Lockdown_Data_CL",
              "lastDataReceivedQuery": "Lockdown_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Health_Data_CL",
              "lastDataReceivedQuery": "Health_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Entities_Data_CL",
              "lastDataReceivedQuery": "Entities_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "Detections_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Audits_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Entity_Scoring_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Lockdown_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Health_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Entities_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Vectra Detections Events - All Detections Events.",
              "query": "Detections_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Vectra Audits Events - All Audits Events.",
              "query": "Audits_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Vectra Entity Scoring Events - All Entity Scoring Events.",
              "query": "Entity_Scoring_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Vectra Lockdown Events - All Lockdown Events.",
              "query": "Lockdown_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Vectra Health Events - All Health Events.",
              "query": "Health_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Vectra Entities Events - All Entities Events.",
              "query": "Entities_Data_CL\n | sort by TimeGenerated desc"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
              },
              {
                "name": "REST API Credentials/permissions",
                "description": "**Vectra Client ID** and **Client Secret**  is required for Health, Entity Scoring, Entities, Detections, Lockdown and Audit data collection.  See the documentation to learn more about API on the `https://support.vectra.ai/s/article/KB-VS-1666`."
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This connector uses Azure Functions to connect to the Vectra API to pull its logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
            },
            {
              "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
            },
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected. Follow these steps for [Detections Parser](https://aka.ms/sentinel-VectraDetections-parser), [Audits Parser](https://aka.ms/sentinel-VectraAudits-parser), [Entity Scoring Parser](https://aka.ms/sentinel-VectraEntityScoring-parser), [Lockdown Parser](https://aka.ms/sentinel-VectraLockdown-parser) and [Health Parser](https://aka.ms/sentinel-VectraHealth-parser) to create the Kusto functions alias, **VectraDetections**, **VectraAudits**, **VectraEntityScoring**, **VectraLockdown** and **VectraHealth**."
            },
            {
              "description": "**STEP 1 - Configuration steps for the Vectra API Credentials**\n\n Follow these instructions to create a Vectra Client ID and Client Secret.\n 1. Log into your Vectra portal\n 2. Navigate to Manage -> API Clients\n 3. From the API Clients page, select 'Add API Client' to create a new client.\n 4. Add Client Name, select Role and click on Generate Credentials to obtain your client credentials. \n 5. Be sure to record your Client ID and Secret Key for safekeeping. You will need these two pieces of information to obtain an access token from the Vectra API. An access token is required to make requests to all of the Vectra API endpoints."
            },
            {
              "description": "**STEP 2 - App Registration steps for the Application in Microsoft Entra ID**\n\n This integration requires an App registration in the Azure portal. Follow the steps in this section to create a new application in Microsoft Entra ID:\n 1. Sign in to the [Azure portal](https://portal.azure.com/).\n 2. Search for and select **Microsoft Entra ID**.\n 3. Under **Manage**, select **App registrations > New registration**.\n 4. Enter a display **Name** for your application.\n 5. Select **Register** to complete the initial app registration.\n 6. When registration finishes, the Azure portal displays the app registration's Overview pane. You see the **Application (client) ID** and **Tenant ID**. The client ID and Tenant ID is required as configuration parameters for the execution of Vectra Data Connector. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app)"
            },
            {
              "description": "**STEP 3 - Add a client secret for application in Microsoft Entra ID**\n\n Sometimes called an application password, a client secret is a string value required for the execution of Vectra Data Connector. Follow the steps in this section to create a new Client Secret:\n 1. In the Azure portal, in **App registrations**, select your application.\n 2. Select **Certificates & secrets > Client secrets > New client secret**.\n 3. Add a description for your client secret.\n 4. Select an expiration for the secret or specify a custom lifetime. Limit is 24 months.\n 5. Select **Add**. \n 6. *Record the secret's value for use in your client application code. This secret value is never displayed again after you leave this page.* The secret value is required as configuration parameter for the execution of Vectra Data Connector. \n\n> **Reference link:** [https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret](https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app#add-a-client-secret)"
            },
            {
              "description": "**STEP 4 - Assign role of Contributor to application in Microsoft Entra ID**\n\n Follow the steps in this section to assign the role:\n 1. In the Azure portal, Go to **Resource Group** and select your resource group.\n 2. Go to **Access control (IAM)** from left panel.\n 3. Click on **Add**, and then select **Add role assignment**.\n 4. Select **Contributor** as role and click on next.\n 5. In **Assign access to**, select `User, group, or service principal`.\n 6. Click on **add members** and type **your app name** that you have created and select it.\n 7. Now click on **Review + assign** and then again click on **Review + assign**. \n\n> **Reference link:** [https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal](https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal)"
            },
            {
              "description": "**STEP 5 - Create a Keyvault**\n\n Follow these instructions to create a new Keyvault.\n 1. In the Azure portal, Go to **Key vaults** and click on Create.\n 2. Select Subsciption, Resource Group and provide unique name of keyvault."
            },
            {
              "description": "**STEP 6 - Create Access Policy in Keyvault**\n\n Follow these instructions to create access policy in Keyvault.\n 1. Go to keyvaults, select your keyvault, go to Access policies on left side panel, click on create.\n 2. Select all keys & secrets permissions. Click next.\n 3. In the principal section, search by application name which was generated in STEP - 2. Click next.\n\n **Note: **Ensure the Permission model in the Access Configuration of Key Vault is set to **'Vault access policy'**"
            },
            {
              "description": "**STEP 7 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Vectra data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available.., as well as the Vectra API Authorization Credentials",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Primary Key"
                  },
                  "type": "CopyableLabel"
                }
              ]
            },
            {
              "description": "Use this method for automated deployment of the Vectra connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-VectraXDRAPI-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tFunction Name \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tVectra Base URL (https://<vectra-portal-url>) \n\t\tVectra Client Id - Health \n\t\tVectra Client Secret Key - Health \n\t\tVectra Client Id - Entity Scoring \n\t\tVectra Client Secret - Entity Scoring \n\t\tVectra Client Id - Detections \n\t\tVectra Client Secret - Detections \n\t\tVectra Client Id - Audits \n\t\tVectra Client Secret - Audits \n\t\tVectra Client Id - Lockdown \n\t\tVectra Client Secret - Lockdown \n\t\tVectra Client Id - Host-Entity \n\t\tVectra Client Secret - Host-Entity \n\t\tVectra Client Id - Account-Entity \n\t\tVectra Client Secret - Account-Entity \n\t\tKey Vault Name \n\t\tAzure Client Id \n\t\tAzure Client Secret \n\t\tTenant Id \n\t\tStartTime (in MM/DD/YYYY HH:MM:SS Format) \n\t\tInclude Score Decrease \n\t\tAudits Table Name \n\t\tDetections Table Name \n\t\tEntity Scoring Table Name \n\t\tLockdown Table Name \n\t\tHealth Table Name \n\t\tEntities Table Name \n\t\tLog Level (Default: INFO) \n\t\tLockdown Schedule \n\t\tHealth Schedule \n\t\tDetections Schedule \n\t\tAudits Schedule \n\t\tEntity Scoring Schedule \n\t\tEntities Schedule \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
              "title": "Option 1 - Azure Resource Manager (ARM) Template"
            },
            {
              "description": "Use the following step-by-step instructions to deploy the Vectra data connector manually with Azure Functions (Deployment via Visual Studio Code).",
              "title": "Option 2 - Manual Deployment of Azure Functions"
            },
            {
              "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-VectraXDR-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. VECTRAXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8 or above.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
            },
            {
              "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective values (case-sensitive): \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tVectra Base URL (https://<vectra-portal-url>) \n\t\tVectra Client Id - Health \n\t\tVectra Client Secret Key - Health \n\t\tVectra Client Id - Entity Scoring \n\t\tVectra Client Secret - Entity Scoring \n\t\tVectra Client Id - Detections \n\t\tVectra Client Secret - Detections \n\t\tVectra Client Id - Audits \n\t\tVectra Client Secret - Audits \n\t\tVectra Client Id - Lockdown \n\t\tVectra Client Secret - Lockdown \n\t\tVectra Client Id - Host-Entity \n\t\tVectra Client Secret - Host-Entity \n\t\tVectra Client Id - Account-Entity \n\t\tVectra Client Secret - Account-Entity \n\t\tKey Vault Name \n\t\tAzure Client Id \n\t\tAzure Client Secret \n\t\tTenant Id \n\t\tStartTime (in MM/DD/YYYY HH:MM:SS Format) \n\t\tInclude Score Decrease \n\t\tAudits Table Name \n\t\tDetections Table Name \n\t\tEntity Scoring Table Name \n\t\tLockdown Table Name \n\t\tHealth Table Name \n\t\tEntities Table Name \n\t\tLog Level (Default: INFO) \n\t\tLockdown Schedule \n\t\tHealth Schedule \n\t\tDetections Schedule \n\t\tAudits Schedule \n\t\tEntity Scoring Schedule \n\t\tEntities Schedule \n\t\tlogAnalyticsUri (optional) \n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://<CustomerId>.ods.opinsights.azure.us`.\n4. Once all application settings have been entered, click **Save**."
            }
          ],
          "id": "[variables('_uiConfigId1')]",
          "additionalRequirementBanner": "These queries and workbooks are dependent on a parser based on Kusto to work as expected. Follow the steps to use this Kusto functions alias **VectraDetections** in queries and workbooks [Follow steps to get this VectraDetections Kusto functions>](https://aka.ms/sentinel-VectraDetections-parser), **VectraAudits** in queries and workbooks [Follow steps to get this VectraAudits Kusto functions>](https://aka.ms/sentinel-VectraAudits-parser) and **VectraEntityScoring** in queries and workbooks [Follow steps to get this VectraEntityScoring Kusto functions>](https://aka.ms/sentinel-VectraEntityScoring-parser)."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject1').parserTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraDetections Data Parser with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject1').parserVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject1')._parserName1]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for VectraDetections",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "VectraDetections",
                "query": "let VectraDetections_view  = view () { \n    Detections_Data_CL\n    | extend \n        EventVendor=\"VectraDetections\",\n        EventProduct=\"VectraDetections\",\n        ID = column_ifexists('id_d', ''),\n        [\"Detection Category\"] = column_ifexists('Category', ''),\n        [\"Is Triaged\"] = column_ifexists('triaged_b', ''),\n        [\"Detection Name\"] = column_ifexists('detection_type_s', ''),\n        [\"Type\"] = column_ifexists('type_s', ''),\n        [\"Entity Type\"] = column_ifexists('entity_type_s', ''),\n        [\"D Type Vname\"] = column_ifexists('d_type_vname_s', ''),\n        [\"Detection ID\"] = column_ifexists('detection_id_d', ''),\n        [\"Temp Pivot\"] = column_ifexists('detection_href_s', ''),\n        [\"Entity ID\"] = toint(column_ifexists('entity_id_d', '')),\n        URL = column_ifexists('url_s', ''),\n        [\"Entity UID\"] = column_ifexists('entity_uid_s', ''),\n        [\"Last Updated\"] = column_ifexists('event_timestamp_t', ''),\n        [\"Details\"] = column_ifexists('detail_s', ''),\n        Severity = column_ifexists('Severity', ''),\n        [\"Source IP\"] = column_ifexists('src_ip_s', ''),\n        [\"Detection Details\"] = column_ifexists('d_detection_details_s', ''),\n        [\"Normal Domains\"] = column_ifexists('normal_domains_s', ''),\n        [\"Is Targeting Key Asset\"] = column_ifexists('is_targeting_key_asset_s', ''),\n        [\"Source Host\"] = column_ifexists('src_host_s', ''),\n        Summary = column_ifexists('summary_s', ''),\n        [\"Grouped Details\"] = column_ifexists('grouped_details_s', ''),\n        Mitre = column_ifexists('mitre_s', ''),\n        Tags = column_ifexists('tags_s', '')\n    |extend \n        [\"Vectra Pivot\"] = case(isnotempty(['Temp Pivot']), strcat(split(['Temp Pivot'], '?detail_id=')[0], \"?pivot=Vectra-Sentinel-2.0.0\"), ['Temp Pivot']),\n        URL = case(isnotempty(URL), strcat(URL, \"?pivot=Vectra-Sentinel-2.0.0\"), URL)\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        ID,\n        [\"Detection Category\"],\n        [\"Is Triaged\"],\n        [\"Detection Name\"],\n        [\"Type\"],\n        [\"Entity Type\"],\n        [\"D Type Vname\"],\n        [\"Detection ID\"],\n        [\"Vectra Pivot\"],\n        [\"Entity ID\"],\n        URL,\n        [\"Entity UID\"],\n        [\"Last Updated\"],\n        [\"Details\"],\n        Severity,\n        [\"Source IP\"],\n        [\"Detection Details\"],\n        [\"Normal Domains\"],\n        [\"Is Targeting Key Asset\"],\n        [\"Source Host\"],\n        Summary,\n        [\"Grouped Details\"],\n        Mitre,\n        Tags\n};\nVectraDetections_view\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
              "dependsOn": [
                "[variables('parserObject1')._parserId1]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraDetections')]",
                "contentId": "[variables('parserObject1').parserContentId1]",
                "kind": "Parser",
                "version": "[variables('parserObject1').parserVersion1]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "contentKind": "Parser",
        "displayName": "Parser for VectraDetections",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.1')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.1')))]",
        "version": "[variables('parserObject1').parserVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject1')._parserName1]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for VectraDetections",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "VectraDetections",
        "query": "let VectraDetections_view  = view () { \n    Detections_Data_CL\n    | extend \n        EventVendor=\"VectraDetections\",\n        EventProduct=\"VectraDetections\",\n        ID = column_ifexists('id_d', ''),\n        [\"Detection Category\"] = column_ifexists('Category', ''),\n        [\"Is Triaged\"] = column_ifexists('triaged_b', ''),\n        [\"Detection Name\"] = column_ifexists('detection_type_s', ''),\n        [\"Type\"] = column_ifexists('type_s', ''),\n        [\"Entity Type\"] = column_ifexists('entity_type_s', ''),\n        [\"D Type Vname\"] = column_ifexists('d_type_vname_s', ''),\n        [\"Detection ID\"] = column_ifexists('detection_id_d', ''),\n        [\"Temp Pivot\"] = column_ifexists('detection_href_s', ''),\n        [\"Entity ID\"] = toint(column_ifexists('entity_id_d', '')),\n        URL = column_ifexists('url_s', ''),\n        [\"Entity UID\"] = column_ifexists('entity_uid_s', ''),\n        [\"Last Updated\"] = column_ifexists('event_timestamp_t', ''),\n        [\"Details\"] = column_ifexists('detail_s', ''),\n        Severity = column_ifexists('Severity', ''),\n        [\"Source IP\"] = column_ifexists('src_ip_s', ''),\n        [\"Detection Details\"] = column_ifexists('d_detection_details_s', ''),\n        [\"Normal Domains\"] = column_ifexists('normal_domains_s', ''),\n        [\"Is Targeting Key Asset\"] = column_ifexists('is_targeting_key_asset_s', ''),\n        [\"Source Host\"] = column_ifexists('src_host_s', ''),\n        Summary = column_ifexists('summary_s', ''),\n        [\"Grouped Details\"] = column_ifexists('grouped_details_s', ''),\n        Mitre = column_ifexists('mitre_s', ''),\n        Tags = column_ifexists('tags_s', '')\n    |extend \n        [\"Vectra Pivot\"] = case(isnotempty(['Temp Pivot']), strcat(split(['Temp Pivot'], '?detail_id=')[0], \"?pivot=Vectra-Sentinel-2.0.0\"), ['Temp Pivot']),\n        URL = case(isnotempty(URL), strcat(URL, \"?pivot=Vectra-Sentinel-2.0.0\"), URL)\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        ID,\n        [\"Detection Category\"],\n        [\"Is Triaged\"],\n        [\"Detection Name\"],\n        [\"Type\"],\n        [\"Entity Type\"],\n        [\"D Type Vname\"],\n        [\"Detection ID\"],\n        [\"Vectra Pivot\"],\n        [\"Entity ID\"],\n        URL,\n        [\"Entity UID\"],\n        [\"Last Updated\"],\n        [\"Details\"],\n        Severity,\n        [\"Source IP\"],\n        [\"Detection Details\"],\n        [\"Normal Domains\"],\n        [\"Is Targeting Key Asset\"],\n        [\"Source Host\"],\n        Summary,\n        [\"Grouped Details\"],\n        Mitre,\n        Tags\n};\nVectraDetections_view\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
      "dependsOn": [
        "[variables('parserObject1')._parserId1]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraDetections')]",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "kind": "Parser",
        "version": "[variables('parserObject1').parserVersion1]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject2').parserTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraAudits Data Parser with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject2').parserVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject2')._parserName2]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for VectraAudits",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "VectraAudits",
                "query": "let VectraAudits_view  = view () { \n    Audits_Data_CL\n    | extend \n        EventVendor=\"VectraAudits\",\n        EventProduct=\"VectraAudits\",\n        ID = column_ifexists('id_d', ''),\n        [\"User ID\"] = column_ifexists('user_id_d', ''),\n        Username = column_ifexists('username_s', ''),\n        [\"User Type\"] = column_ifexists('user_type_s', ''),\n        [\"User Role\"] = column_ifexists('user_role_s', ''),\n        Version = column_ifexists('version_s', ''),\n        [\"Source IP\"] = column_ifexists('source_ip_s', ''),\n        [\"Event Timestamp\"] = column_ifexists('event_timestamp_t', ''),\n        Message = column_ifexists('Message', ''),\n        Status = column_ifexists('result_status_s', ''),\n        [\"Event Data\"] = column_ifexists('event_data_s', ''),\n        [\"Event Object\"] = column_ifexists('event_object_s', ''),\n        [\"Event Action\"] = column_ifexists('event_action_s', ''),\n        [\"API Client ID\"] = column_ifexists('api_client_id_g', '')\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        ID,\n        ['User ID'],\n        Username,\n        ['User Type'],\n        [\"User Role\"],\n        Version,\n        ['Source IP'],\n        ['Event Timestamp'],\n        Message,\n        Status,\n        [\"Event Data\"],\n        ['Event Object'],\n        ['Event Action'],\n        ['API Client ID']\n};\nVectraAudits_view\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
              "dependsOn": [
                "[variables('parserObject2')._parserId2]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraAudits')]",
                "contentId": "[variables('parserObject2').parserContentId2]",
                "kind": "Parser",
                "version": "[variables('parserObject2').parserVersion2]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "contentKind": "Parser",
        "displayName": "Parser for VectraAudits",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "version": "[variables('parserObject2').parserVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject2')._parserName2]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for VectraAudits",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "VectraAudits",
        "query": "let VectraAudits_view  = view () { \n    Audits_Data_CL\n    | extend \n        EventVendor=\"VectraAudits\",\n        EventProduct=\"VectraAudits\",\n        ID = column_ifexists('id_d', ''),\n        [\"User ID\"] = column_ifexists('user_id_d', ''),\n        Username = column_ifexists('username_s', ''),\n        [\"User Type\"] = column_ifexists('user_type_s', ''),\n        [\"User Role\"] = column_ifexists('user_role_s', ''),\n        Version = column_ifexists('version_s', ''),\n        [\"Source IP\"] = column_ifexists('source_ip_s', ''),\n        [\"Event Timestamp\"] = column_ifexists('event_timestamp_t', ''),\n        Message = column_ifexists('Message', ''),\n        Status = column_ifexists('result_status_s', ''),\n        [\"Event Data\"] = column_ifexists('event_data_s', ''),\n        [\"Event Object\"] = column_ifexists('event_object_s', ''),\n        [\"Event Action\"] = column_ifexists('event_action_s', ''),\n        [\"API Client ID\"] = column_ifexists('api_client_id_g', '')\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        ID,\n        ['User ID'],\n        Username,\n        ['User Type'],\n        [\"User Role\"],\n        Version,\n        ['Source IP'],\n        ['Event Timestamp'],\n        Message,\n        Status,\n        [\"Event Data\"],\n        ['Event Object'],\n        ['Event Action'],\n        ['API Client ID']\n};\nVectraAudits_view\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
      "dependsOn": [
        "[variables('parserObject2')._parserId2]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraAudits')]",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "kind": "Parser",
        "version": "[variables('parserObject2').parserVersion2]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject3').parserTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraEntityScoring Data Parser with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject3').parserVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject3')._parserName3]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for VectraEntityScoring",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "VectraEntityScoring",
                "query": "let VectraEntityScoring_view  = view () { \n    Entity_Scoring_Data_CL\n    | extend \n        EventVendor=\"VectraEntityScoring\",\n        EventProduct=\"VectraEntityScoring\",\n        ID = column_ifexists('id_d', ''),\n        [\"Entity ID\"] = column_ifexists('entity_id_d', ''),\n        [\"Active Detection Types\"] = column_ifexists('active_detection_types_s', ''),\n        [\"Breadth Contrib\"] = column_ifexists('breadth_contrib_d', ''),\n        Category = column_ifexists('Category', ''),\n        Importance = column_ifexists('importance_d', ''),\n        Type = column_ifexists('type_s', ''),\n        [\"Last Updated\"] = column_ifexists('event_timestamp_t', ''),\n        [\"Is Prioritized\"] = column_ifexists('is_prioritized_b', ''),\n        [\"Last Detection ID\"] = column_ifexists('last_detection_id_d', ''),\n        [\"Last Detection Type\"] = column_ifexists('last_detection_type_s', ''),\n        [\"Last Detection URL\"] = column_ifexists('last_detection_url_s', ''),\n        [\"Last Detection\"] = column_ifexists('last_detection_s', ''),\n        Name = column_ifexists('name_s', ''),\n        Severity = column_ifexists('severity_s', ''),\n        [\"Urgency Score\"] = column_ifexists('urgency_score_d', ''),\n        [\"Vectra Pivot\"] = column_ifexists('url_s', ''),\n        Velocity = column_ifexists('velocity_contrib_d', ''),\n        [\"Attack Rating\"] =  column_ifexists('attack_rating_d', '')\n    | extend [\"Vectra Pivot\"] = case(isnotempty(['Vectra Pivot']), strcat(['Vectra Pivot'], \"?pivot=Vectra-Sentinel-2.0.0\"), ['Vectra Pivot'])\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        ID,\n        [\"Entity ID\"],\n        Name,\n        Importance,\n        Type,\n        [\"Is Prioritized\"],\n        Severity,\n        [\"Urgency Score\"],\n        [\"Vectra Pivot\"],\n        Category,\n        [\"Last Detection URL\"],\n        [\"Last Detection Type\"],\n        [\"Last Detection ID\"],\n        [\"Last Detection\"],\n        [\"Active Detection Types\"],\n        [\"Last Updated\"],\n        [\"Breadth Contrib\"],\n        Velocity,\n        [\"Attack Rating\"]\n};\nVectraEntityScoring_view\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
              "dependsOn": [
                "[variables('parserObject3')._parserId3]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraEntityScoring')]",
                "contentId": "[variables('parserObject3').parserContentId3]",
                "kind": "Parser",
                "version": "[variables('parserObject3').parserVersion3]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "contentKind": "Parser",
        "displayName": "Parser for VectraEntityScoring",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "version": "[variables('parserObject3').parserVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject3')._parserName3]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for VectraEntityScoring",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "VectraEntityScoring",
        "query": "let VectraEntityScoring_view  = view () { \n    Entity_Scoring_Data_CL\n    | extend \n        EventVendor=\"VectraEntityScoring\",\n        EventProduct=\"VectraEntityScoring\",\n        ID = column_ifexists('id_d', ''),\n        [\"Entity ID\"] = column_ifexists('entity_id_d', ''),\n        [\"Active Detection Types\"] = column_ifexists('active_detection_types_s', ''),\n        [\"Breadth Contrib\"] = column_ifexists('breadth_contrib_d', ''),\n        Category = column_ifexists('Category', ''),\n        Importance = column_ifexists('importance_d', ''),\n        Type = column_ifexists('type_s', ''),\n        [\"Last Updated\"] = column_ifexists('event_timestamp_t', ''),\n        [\"Is Prioritized\"] = column_ifexists('is_prioritized_b', ''),\n        [\"Last Detection ID\"] = column_ifexists('last_detection_id_d', ''),\n        [\"Last Detection Type\"] = column_ifexists('last_detection_type_s', ''),\n        [\"Last Detection URL\"] = column_ifexists('last_detection_url_s', ''),\n        [\"Last Detection\"] = column_ifexists('last_detection_s', ''),\n        Name = column_ifexists('name_s', ''),\n        Severity = column_ifexists('severity_s', ''),\n        [\"Urgency Score\"] = column_ifexists('urgency_score_d', ''),\n        [\"Vectra Pivot\"] = column_ifexists('url_s', ''),\n        Velocity = column_ifexists('velocity_contrib_d', ''),\n        [\"Attack Rating\"] =  column_ifexists('attack_rating_d', '')\n    | extend [\"Vectra Pivot\"] = case(isnotempty(['Vectra Pivot']), strcat(['Vectra Pivot'], \"?pivot=Vectra-Sentinel-2.0.0\"), ['Vectra Pivot'])\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        ID,\n        [\"Entity ID\"],\n        Name,\n        Importance,\n        Type,\n        [\"Is Prioritized\"],\n        Severity,\n        [\"Urgency Score\"],\n        [\"Vectra Pivot\"],\n        Category,\n        [\"Last Detection URL\"],\n        [\"Last Detection Type\"],\n        [\"Last Detection ID\"],\n        [\"Last Detection\"],\n        [\"Active Detection Types\"],\n        [\"Last Updated\"],\n        [\"Breadth Contrib\"],\n        Velocity,\n        [\"Attack Rating\"]\n};\nVectraEntityScoring_view\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
      "dependsOn": [
        "[variables('parserObject3')._parserId3]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraEntityScoring')]",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "kind": "Parser",
        "version": "[variables('parserObject3').parserVersion3]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject4').parserTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraHealth Data Parser with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject4').parserVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject4')._parserName4]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for VectraHealth",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "VectraHealth",
                "query": "let VectraHealth_view  = view () { \n    Health_Data_CL\n    | summarize arg_max(TimeGenerated, *) by system_serial_number_s\n    | extend\n        EventVendor=\"VectraHealth\",\n        EventProduct=\"VectraHealth\",\n        ['Last Updated'] = column_ifexists('system_version_last_update_s', ''),\n        ['CPU Usage - User (%)'] = column_ifexists('cpu_user_percent_d', ''),\n        ['CPU Usage - System (%)'] = column_ifexists('cpu_system_percent_d', ''),\n        ['CPU Usage - Idle (%)'] = column_ifexists('cpu_idle_percent_d', ''),\n        ['Disk Utilization (%)'] = column_ifexists('disk_disk_utilization_usage_percent_d', ''),\n        ['Memory Utilization (%)'] = column_ifexists('memory_usage_percent_d', ''),\n        ['Power Status'] = column_ifexists('power_status_s', ''),\n        ['Power Error'] = column_ifexists('power_error_s', ''),\n        Network = column_ifexists('network_s', ''),\n        Sensors = column_ifexists('sensors_s', ''),\n        Connectivity_Sensors = column_ifexists('connectivity_sensors_s', ''),\n        System_Version_Last_Update = column_ifexists('system_version_last_update_s', ''),\n        Trafficdrop_Sensors = column_ifexists('trafficdrop_sensors_s', ''),\n        System_Serial_Number = column_ifexists('system_serial_number_s', ''),\n        System_Vectra_Version = column_ifexists('system_version_vectra_version_s', '')\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        System_Version_Last_Update,\n        ['Last Updated'],\n        ['CPU Usage - User (%)'],\n        ['CPU Usage - System (%)'],\n        ['CPU Usage - Idle (%)'],\n        ['Disk Utilization (%)'],\n        ['Memory Utilization (%)'],\n        ['Power Status'],\n        ['Power Error'],\n        Network,\n        Sensors,\n        Connectivity_Sensors,\n        Trafficdrop_Sensors,\n        System_Serial_Number,\n        System_Vectra_Version\n};\nVectraHealth_view()\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject4')._parserId4,'/'))))]",
              "dependsOn": [
                "[variables('parserObject4')._parserId4]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraHealth')]",
                "contentId": "[variables('parserObject4').parserContentId4]",
                "kind": "Parser",
                "version": "[variables('parserObject4').parserVersion4]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject4').parserContentId4]",
        "contentKind": "Parser",
        "displayName": "Parser for VectraHealth",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject4').parserContentId4,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject4').parserContentId4,'-', '1.0.0')))]",
        "version": "[variables('parserObject4').parserVersion4]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject4')._parserName4]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for VectraHealth",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "VectraHealth",
        "query": "let VectraHealth_view  = view () { \n    Health_Data_CL\n    | summarize arg_max(TimeGenerated, *) by system_serial_number_s\n    | extend\n        EventVendor=\"VectraHealth\",\n        EventProduct=\"VectraHealth\",\n        ['Last Updated'] = column_ifexists('system_version_last_update_s', ''),\n        ['CPU Usage - User (%)'] = column_ifexists('cpu_user_percent_d', ''),\n        ['CPU Usage - System (%)'] = column_ifexists('cpu_system_percent_d', ''),\n        ['CPU Usage - Idle (%)'] = column_ifexists('cpu_idle_percent_d', ''),\n        ['Disk Utilization (%)'] = column_ifexists('disk_disk_utilization_usage_percent_d', ''),\n        ['Memory Utilization (%)'] = column_ifexists('memory_usage_percent_d', ''),\n        ['Power Status'] = column_ifexists('power_status_s', ''),\n        ['Power Error'] = column_ifexists('power_error_s', ''),\n        Network = column_ifexists('network_s', ''),\n        Sensors = column_ifexists('sensors_s', ''),\n        Connectivity_Sensors = column_ifexists('connectivity_sensors_s', ''),\n        System_Version_Last_Update = column_ifexists('system_version_last_update_s', ''),\n        Trafficdrop_Sensors = column_ifexists('trafficdrop_sensors_s', ''),\n        System_Serial_Number = column_ifexists('system_serial_number_s', ''),\n        System_Vectra_Version = column_ifexists('system_version_vectra_version_s', '')\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        System_Version_Last_Update,\n        ['Last Updated'],\n        ['CPU Usage - User (%)'],\n        ['CPU Usage - System (%)'],\n        ['CPU Usage - Idle (%)'],\n        ['Disk Utilization (%)'],\n        ['Memory Utilization (%)'],\n        ['Power Status'],\n        ['Power Error'],\n        Network,\n        Sensors,\n        Connectivity_Sensors,\n        Trafficdrop_Sensors,\n        System_Serial_Number,\n        System_Vectra_Version\n};\nVectraHealth_view()\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject4')._parserId4,'/'))))]",
      "dependsOn": [
        "[variables('parserObject4')._parserId4]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraHealth')]",
        "contentId": "[variables('parserObject4').parserContentId4]",
        "kind": "Parser",
        "version": "[variables('parserObject4').parserVersion4]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject5').parserTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraLockdown Data Parser with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject5').parserVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject5')._parserName5]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Parser for VectraLockdown",
                "category": "Microsoft Sentinel Parser",
                "functionAlias": "VectraLockdown",
                "query": "let VectraLockdown_view  = view () { \n    Lockdown_Data_CL\n    | extend\n        EventVendor=\"VectraLockdown\",\n        EventProduct=\"VectraLockdown\",\n        ID = column_ifexists('id_d', ''),\n        [\"Entity ID\"] = column_ifexists('entity_id_d', ''),\n        [\"Entity Name\"] = column_ifexists('entity_name_s', ''),\n        [\"Entity Type\"] = column_ifexists('entity_type_s ', ''),\n        Type = column_ifexists('type_s', ''),\n        [\"Locked Date\"] = column_ifexists('lock_event_timestamp_t', ''),\n        [\"Unlock Date\"] = column_ifexists('unlock_event_timestamp_t', ''),\n        [\"Locked By\"] = column_ifexists('locked_by_s', '')\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        ID,\n        [\"Entity ID\"],\n        [\"Entity Name\"],\n        [\"Entity Type\"],\n        Type,\n        [\"Locked Date\"],\n        [\"Unlock Date\"],\n        [\"Locked By\"]\n};\nVectraLockdown_view()\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject5')._parserId5,'/'))))]",
              "dependsOn": [
                "[variables('parserObject5')._parserId5]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraLockdown')]",
                "contentId": "[variables('parserObject5').parserContentId5]",
                "kind": "Parser",
                "version": "[variables('parserObject5').parserVersion5]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject5').parserContentId5]",
        "contentKind": "Parser",
        "displayName": "Parser for VectraLockdown",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject5').parserContentId5,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject5').parserContentId5,'-', '1.0.0')))]",
        "version": "[variables('parserObject5').parserVersion5]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject5')._parserName5]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "Parser for VectraLockdown",
        "category": "Microsoft Sentinel Parser",
        "functionAlias": "VectraLockdown",
        "query": "let VectraLockdown_view  = view () { \n    Lockdown_Data_CL\n    | extend\n        EventVendor=\"VectraLockdown\",\n        EventProduct=\"VectraLockdown\",\n        ID = column_ifexists('id_d', ''),\n        [\"Entity ID\"] = column_ifexists('entity_id_d', ''),\n        [\"Entity Name\"] = column_ifexists('entity_name_s', ''),\n        [\"Entity Type\"] = column_ifexists('entity_type_s ', ''),\n        Type = column_ifexists('type_s', ''),\n        [\"Locked Date\"] = column_ifexists('lock_event_timestamp_t', ''),\n        [\"Unlock Date\"] = column_ifexists('unlock_event_timestamp_t', ''),\n        [\"Locked By\"] = column_ifexists('locked_by_s', '')\n    | project\n        TimeGenerated,\n        EventVendor,\n        EventProduct,\n        ID,\n        [\"Entity ID\"],\n        [\"Entity Name\"],\n        [\"Entity Type\"],\n        Type,\n        [\"Locked Date\"],\n        [\"Unlock Date\"],\n        [\"Locked By\"]\n};\nVectraLockdown_view()\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject5')._parserId5,'/'))))]",
      "dependsOn": [
        "[variables('parserObject5')._parserId5]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'VectraLockdown')]",
        "contentId": "[variables('parserObject5').parserContentId5]",
        "kind": "Parser",
        "version": "[variables('parserObject5').parserVersion5]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject1').analyticRuleTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Create_Incident_Based_On_Tag_For_Account_Entity_AnalyticalRules Analytics Rule with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject1').analyticRuleVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Create an incident when the account entity presents a specific tag. If the tag is present, an incident should be created and marked with highest priority.",
                "displayName": "Vectra Create Incident Based on Tag for Accounts",
                "enabled": false,
                "query": "Entities_Data_CL\n| where type_s == \"account\"\n| extend Tags = todynamic(tags_s)\n| where set_has_element(Tags, \"MDR - Customer Escalation\")\n| summarize arg_max(['last_modified_timestamp_t'], *) by ['name_s']\n",
                "queryFrequency": "PT10M",
                "queryPeriod": "PT10M",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "Entities_Data_CL"
                    ],
                    "connectorId": "VectraXDR"
                  }
                ],
                "tactics": [
                  "Persistence"
                ],
                "techniques": [
                  "T1546"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "name_s"
                      }
                    ],
                    "entityType": "Account"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "tags": "tags_s",
                  "attack_profile": "attack_profile_s",
                  "entity_importance": "entity_importance_d",
                  "entity_type": "type_s",
                  "ip_address": "ip_s",
                  "entity_id": "[variables('_id_d')]"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Vectra AI Incident- {{name_s}}",
                  "alertDescriptionFormat": "An incident has been escalated for Vectra AI entity {{name_s}} that is presenting an urgency score of {{urgency_score_d}}"
                },
                "incidentConfiguration": {
                  "createIncident": true,
                  "groupingConfiguration": {
                    "reopenClosedIncident": false,
                    "groupByAlertDetails": [
                      "DisplayName"
                    ],
                    "groupByEntities": [
                      "Account"
                    ],
                    "matchingMethod": "AllEntities",
                    "enabled": true,
                    "lookbackDuration": "P7D"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject1').analyticRuleId1,'/'))))]",
              "properties": {
                "description": "Vectra XDR Analytics Rule 1",
                "parentId": "[variables('analyticRuleObject1').analyticRuleId1]",
                "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject1').analyticRuleVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
        "contentKind": "AnalyticsRule",
        "displayName": "Vectra Create Incident Based on Tag for Accounts",
        "contentProductId": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "id": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject2').analyticRuleTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Create_Incident_Based_On_Tag_For_Host_Entity_AnalyticalRules Analytics Rule with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject2').analyticRuleVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Create an incident when the host entity presents a specific tag. If the tag is present, an incident should be created and marked with highest priority.",
                "displayName": "Vectra Create Incident Based on Tag for Hosts",
                "enabled": false,
                "query": "Entities_Data_CL\n| where type_s == \"host\"\n| extend Tags = todynamic(tags_s)\n| where set_has_element(Tags, \"MDR - Customer Escalation\")\n| summarize arg_max(['last_modified_timestamp_t'], *) by ['name_s']\n",
                "queryFrequency": "PT10M",
                "queryPeriod": "PT10M",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "Entities_Data_CL"
                    ],
                    "connectorId": "VectraXDR"
                  }
                ],
                "tactics": [
                  "Persistence"
                ],
                "techniques": [
                  "T1546"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "name_s"
                      }
                    ],
                    "entityType": "Host"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "tags": "tags_s",
                  "attack_profile": "attack_profile_s",
                  "entity_importance": "entity_importance_d",
                  "entity_type": "type_s",
                  "ip_address": "ip_s",
                  "entity_id": "[variables('_id_d')]"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Vectra AI Incident- {{name_s}}",
                  "alertDynamicProperties": [
                    {
                      "alertProperty": "AlertLink",
                      "value": "url_s"
                    }
                  ],
                  "alertDescriptionFormat": "An incident has been escalated for Vectra AI entity {{name_s}} that is presenting an urgency score of {{urgency_score_d}}"
                },
                "incidentConfiguration": {
                  "createIncident": true,
                  "groupingConfiguration": {
                    "reopenClosedIncident": false,
                    "groupByAlertDetails": [
                      "DisplayName"
                    ],
                    "groupByEntities": [
                      "Host"
                    ],
                    "matchingMethod": "AllEntities",
                    "enabled": true,
                    "lookbackDuration": "P7D"
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject2').analyticRuleId2,'/'))))]",
              "properties": {
                "description": "Vectra XDR Analytics Rule 2",
                "parentId": "[variables('analyticRuleObject2').analyticRuleId2]",
                "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject2').analyticRuleVersion2]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
        "contentKind": "AnalyticsRule",
        "displayName": "Vectra Create Incident Based on Tag for Hosts",
        "contentProductId": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "id": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject3').analyticRuleTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Priority_Host_AnalyticalRules Analytics Rule with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject3').analyticRuleVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Create an incident when an identity is suspected to be compromised. Vectra is using AI to prioritize an entity based on multiple factors (attack rating, velocity, breadth, importance.etc.). This layer of aggregation at the entity level provides a greater signal-to-noise ratio and help analyst focus on what matters.",
                "displayName": "Vectra Create Incident Based on Priority for Hosts",
                "enabled": false,
                "query": "Entities_Data_CL\n| where type_s == \"host\" and is_prioritized_b == true\n| summarize arg_max(['last_modified_timestamp_t'], *) by ['name_s']\n",
                "queryFrequency": "PT10M",
                "queryPeriod": "PT10M",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "Entities_Data_CL"
                    ],
                    "connectorId": "VectraXDR"
                  }
                ],
                "tactics": [
                  "Persistence"
                ],
                "techniques": [
                  "T1546"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "name_s"
                      }
                    ],
                    "entityType": "Host"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "tags": "tags_s",
                  "attack_profile": "attack_profile_s",
                  "entity_importance": "entity_importance_d",
                  "entity_type": "type_s",
                  "ip_address": "ip_s",
                  "entity_id": "[variables('_id_d')]"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Vectra AI Incident- {{name_s}}",
                  "alertDynamicProperties": [
                    {
                      "alertProperty": "AlertLink",
                      "value": "url_s"
                    }
                  ],
                  "alertDescriptionFormat": "An incident has been generated for Vectra AI entity {{name_s}} that is presenting an urgency score of {{urgency_score_d}}."
                },
                "incidentConfiguration": {
                  "createIncident": true,
                  "groupingConfiguration": {
                    "enabled": true,
                    "lookbackDuration": "P7D",
                    "matchingMethod": "AllEntities",
                    "reopenClosedIncident": true
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject3').analyticRuleId3,'/'))))]",
              "properties": {
                "description": "Vectra XDR Analytics Rule 3",
                "parentId": "[variables('analyticRuleObject3').analyticRuleId3]",
                "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject3').analyticRuleVersion3]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
        "contentKind": "AnalyticsRule",
        "displayName": "Vectra Create Incident Based on Priority for Hosts",
        "contentProductId": "[variables('analyticRuleObject3')._analyticRulecontentProductId3]",
        "id": "[variables('analyticRuleObject3')._analyticRulecontentProductId3]",
        "version": "[variables('analyticRuleObject3').analyticRuleVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject4').analyticRuleTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Priority_Account_AnalyticalRules Analytics Rule with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject4').analyticRuleVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Create an incident when an identity is suspected to be compromised. Vectra is using AI to prioritize an entity based on multiple factors (attack rating, velocity, breadth, importance.etc.). This layer of aggregation at the entity level provides a greater signal-to-noise ratio and help analyst focus on what matters.",
                "displayName": "Vectra Create Incident Based on Priority for Accounts",
                "enabled": false,
                "query": "Entities_Data_CL\n| where type_s == \"account\" and is_prioritized_b == true\n| summarize arg_max(['last_modified_timestamp_t'], *) by ['name_s']\n",
                "queryFrequency": "PT10M",
                "queryPeriod": "PT10M",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "Entities_Data_CL"
                    ],
                    "connectorId": "VectraXDR"
                  }
                ],
                "tactics": [
                  "Persistence"
                ],
                "techniques": [
                  "T1546"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "name_s"
                      }
                    ],
                    "entityType": "Account"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "tags": "tags_s",
                  "attack_profile": "attack_profile_s",
                  "entity_importance": "entity_importance_d",
                  "entity_type": "type_s",
                  "ip_address": "ip_s",
                  "entity_id": "[variables('_id_d')]"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Vectra AI Incident- {{name_s}}",
                  "alertDynamicProperties": [
                    {
                      "alertProperty": "AlertLink",
                      "value": "url_s"
                    }
                  ],
                  "alertDescriptionFormat": "An incident has been generated for Vectra AI entity {{name_s}} that is presenting an urgency score of {{urgency_score_d}}."
                },
                "incidentConfiguration": {
                  "createIncident": true,
                  "groupingConfiguration": {
                    "enabled": true,
                    "lookbackDuration": "P7D",
                    "matchingMethod": "AllEntities",
                    "reopenClosedIncident": true
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject4').analyticRuleId4,'/'))))]",
              "properties": {
                "description": "Vectra XDR Analytics Rule 4",
                "parentId": "[variables('analyticRuleObject4').analyticRuleId4]",
                "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject4').analyticRuleVersion4]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
        "contentKind": "AnalyticsRule",
        "displayName": "Vectra Create Incident Based on Priority for Accounts",
        "contentProductId": "[variables('analyticRuleObject4')._analyticRulecontentProductId4]",
        "id": "[variables('analyticRuleObject4')._analyticRulecontentProductId4]",
        "version": "[variables('analyticRuleObject4').analyticRuleVersion4]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject5').analyticRuleTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection_Host_AnalyticalRules Analytics Rule with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject5').analyticRuleVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This analytic rule is looking for new attacker behaviors observed by the Vectra Platform. The intent is to create entries in the SecurityAlert table for every new detection attached to an entity monitored by the Vectra Platform",
                "displayName": "Vectra Create Detection Alert for Hosts",
                "enabled": false,
                "query": "VectraDetections\n| where Type == \"host\"\n| extend\n    entity_uid = ['Entity UID'],\n    entity_id = ['Entity ID'],\n    entity_type = ['Entity Type'],\n    detection_id = ['Detection ID'],\n    detection = ['Detection Name'],\n    category = ['Detection Category'],\n    detection_url = ['Vectra Pivot'],\n    mitre = Mitre,\n    tags = Tags\n| summarize arg_max(TimeGenerated, *) by ['Detection ID'], entity_uid\n",
                "queryFrequency": "PT10M",
                "queryPeriod": "PT10M",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "Detections_Data_CL"
                    ],
                    "connectorId": "VectraXDR"
                  }
                ],
                "tactics": [
                  "Persistence"
                ],
                "techniques": [
                  "T1546"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "entity_uid"
                      }
                    ],
                    "entityType": "Host"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "tags": "tags",
                  "mitre_techniques": "mitre",
                  "entity_id": "[variables('_entity_id')]",
                  "detection_id": "detection_id",
                  "entity_type": "entity_type"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Vectra AI Detection- {{detection}}",
                  "alertDynamicProperties": [
                    {
                      "alertProperty": "AlertLink",
                      "value": "detection_url"
                    }
                  ],
                  "alertDescriptionFormat": "Vectra AI has detected {{category}} - {{detection}} on entity {{entity_uid}}."
                },
                "incidentConfiguration": {
                  "createIncident": false,
                  "groupingConfiguration": {
                    "enabled": false,
                    "lookbackDuration": "PT5H",
                    "matchingMethod": "AllEntities",
                    "reopenClosedIncident": false
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject5').analyticRuleId5,'/'))))]",
              "properties": {
                "description": "Vectra XDR Analytics Rule 5",
                "parentId": "[variables('analyticRuleObject5').analyticRuleId5]",
                "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject5').analyticRuleVersion5]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
        "contentKind": "AnalyticsRule",
        "displayName": "Vectra Create Detection Alert for Hosts",
        "contentProductId": "[variables('analyticRuleObject5')._analyticRulecontentProductId5]",
        "id": "[variables('analyticRuleObject5')._analyticRulecontentProductId5]",
        "version": "[variables('analyticRuleObject5').analyticRuleVersion5]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject6').analyticRuleTemplateSpecName6]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Detection_Account_AnalyticalRules Analytics Rule with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject6').analyticRuleVersion6]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This analytic rule is looking for new attacker behaviors observed by the Vectra Platform. The intent is to create entries in the SecurityAlert table for every new detection attached to an entity monitored by the Vectra Platform",
                "displayName": "Vectra Create Detection Alert for Accounts",
                "enabled": false,
                "query": "VectraDetections\n| where Type == \"account\"\n| extend\n    entity_uid = ['Entity UID'],\n    entity_id = ['Entity ID'],\n    entity_type = ['Entity Type'],\n    detection_id = ['Detection ID'],\n    detection = ['Detection Name'],\n    category = ['Detection Category'],\n    detection_url = ['Vectra Pivot'],\n    mitre = Mitre,\n    tags = Tags\n| summarize arg_max(TimeGenerated, *) by ['Detection ID'], entity_uid\n",
                "queryFrequency": "PT10M",
                "queryPeriod": "PT10M",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "Detections_Data_CL"
                    ],
                    "connectorId": "VectraXDR"
                  }
                ],
                "tactics": [
                  "Persistence"
                ],
                "techniques": [
                  "T1546"
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Name",
                        "columnName": "entity_uid"
                      }
                    ],
                    "entityType": "Account"
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "tags": "tags",
                  "mitre_techniques": "mitre",
                  "entity_id": "[variables('_entity_id')]",
                  "detection_id": "detection_id",
                  "entity_type": "entity_type"
                },
                "alertDetailsOverride": {
                  "alertDisplayNameFormat": "Vectra AI Detection-  {{detection}}",
                  "alertDynamicProperties": [
                    {
                      "alertProperty": "AlertLink",
                      "value": "detection_url"
                    }
                  ],
                  "alertDescriptionFormat": "Vectra AI has detected {{category}} - {{detection} on entity {{entity_uid}}."
                },
                "incidentConfiguration": {
                  "createIncident": false,
                  "groupingConfiguration": {
                    "enabled": false,
                    "lookbackDuration": "PT5H",
                    "matchingMethod": "AllEntities",
                    "reopenClosedIncident": false
                  }
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject6').analyticRuleId6,'/'))))]",
              "properties": {
                "description": "Vectra XDR Analytics Rule 6",
                "parentId": "[variables('analyticRuleObject6').analyticRuleId6]",
                "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject6').analyticRuleVersion6]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
        "contentKind": "AnalyticsRule",
        "displayName": "Vectra Create Detection Alert for Accounts",
        "contentProductId": "[variables('analyticRuleObject6')._analyticRulecontentProductId6]",
        "id": "[variables('analyticRuleObject6')._analyticRulecontentProductId6]",
        "version": "[variables('analyticRuleObject6').analyticRuleVersion6]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('workbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraXDR Workbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId1')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "This workbook provides visualization of Audit, Detections, Entity Scoring, Lockdown and Health data."
              },
              "properties": {
                "displayName": "[parameters('workbook1-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"67d14413-6eca-4803-b447-c9c7f744ce43\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Entity\",\"subTarget\":\"Entity\",\"style\":\"link\"},{\"id\":\"cbc93b75-3cc9-4191-b334-0d44c7652ce0\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Detections\",\"subTarget\":\"Detections\",\"style\":\"link\"},{\"id\":\"919866f6-87e0-479f-969f-eedc7d970251\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Lockdown\",\"subTarget\":\"Lockdown\",\"style\":\"link\"},{\"id\":\"ce743dcd-55b5-42f7-8553-a9d120b1d74b\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Audit\",\"subTarget\":\"Audit\",\"style\":\"link\"},{\"id\":\"2a426647-ce0b-44ef-8603-bae6bd8e2343\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Health\",\"subTarget\":\"Health\",\"style\":\"link\"}]},\"name\":\"links - 0\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"c2e47223-15df-44b3-8040-0bfc72eeab0a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"timerange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000}},{\"id\":\"f909ea8d-ce5f-41a1-8b26-d2e34169f149\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"View\",\"label\":\"Prioritized\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"true\\\", \\\"label\\\":\\\"Yes\\\" },\\r\\n    { \\\"value\\\":\\\"false\\\", \\\"label\\\":\\\"No\\\" }\\r\\n]\",\"timeContext\":{\"durationMs\":86400000},\"value\":[\"true\"]},{\"id\":\"732ba446-ecc2-49fd-be25-53ee45d3f9c2\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DataSource\",\"label\":\"Data Source Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    {\\\"value\\\":\\\"AWS\\\", \\\"label\\\":\\\"AWS\\\"},\\r\\n    {\\\"value\\\":\\\"M365/AAD\\\",\\\"label\\\":\\\"Microsoft 365/Azure AD\\\"},\\r\\n    {\\\"value\\\":\\\"Network\\\",\\\"label\\\":\\\"Network\\\"}\\r\\n]\",\"defaultValue\":\"value::all\",\"value\":[\"value::all\"]},{\"id\":\"e2fa7c64-c20c-4e7b-9557-81c64f2c5b58\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EntityType\",\"label\":\"Entity Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraEntityScoring\\r\\n| where ['Last Updated'] {timerange} \\r\\n| summarize arg_max(['Last Updated'],*) by ['Entity ID'], Type\\r\\n| where ('*' in ({View}) or [\\\"Is Prioritized\\\"] in ({View}))\\r\\n| extend source = tostring(split(Name,\\\":\\\")[0])\\r\\n| extend source2 = iff(isempty(source),\\\"NA\\\",source)\\r\\n| where ('*' in ({DataSource}) or source2 in ({DataSource}))\\r\\n| summarize arg_max(TimeGenerated, *) by Type\\r\\n| distinct ID, ['Type']\\r\\n| extend splitted_entity_type = split(['Type'],\\\"_\\\")\\r\\n| mv-expand splitted_entity_type = splitted_entity_type\\r\\n| extend cap = toupper(substring(splitted_entity_type,0,1)), rest_string = substring(splitted_entity_type,1)\\r\\n| extend joined_str = strcat(cap,rest_string)\\r\\n| distinct joined_str,ID,['Type']\\r\\n| summarize joined_array = make_list(todynamic(joined_str)) by ID, ['Type']\\r\\n| extend capitalized_Category = strcat_array(joined_array, \\\" \\\")\\r\\n| distinct ['Type'], capitalized_Category\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraEntityScoring\\r\\n| where ['Last Updated'] {timerange}\\r\\n| summarize arg_max(['Last Updated'],*) by ['Entity ID'], Type\\r\\n| where ('*' in ({View}) or [\\\"Is Prioritized\\\"] in ({View})) and ('*' in ({EntityType}) or Type in ({EntityType}))\\r\\n| extend ['Data Source Type'] = case(Name startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        Name startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        Name startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| extend priority = case(\\r\\n    ['Is Prioritized'] == true, \\\"Prioritized\\\",\\r\\n    ['Is Prioritized'] == false, \\\"Not Prioritized\\\",\\r\\n    \\\"Unknown\\\"\\r\\n)\\r\\n| summarize count() by priority\\r\\n| order by priority desc\",\"size\":3,\"title\":\"Entity Count by Priority\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"priority\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Prioritized\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Not Prioritized\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},\"showBorder\":true,\"size\":\"auto\"}},\"name\":\"query - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraEntityScoring\\r\\n| where ['Last Updated'] {timerange} \\r\\n| summarize arg_max(['Last Updated'],*) by ['Entity ID'], Type\\r\\n| where ('*' in ({View}) or [\\\"Is Prioritized\\\"] in ({View})) and ('*' in ({EntityType}) or Type in ({EntityType}))\\r\\n| extend ['Data Source Type'] = case(Name startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        Name startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        Name startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| extend ['Entity Name'] = extract(\\\"^(AWS:|SAML:|O365:|M365:|Azure:)?(.*)$\\\",2, Name)\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| sort by ['Urgency Score'] desc, Importance desc\\r\\n| extend Importance = case(\\r\\n    Importance == 0, \\\"Low\\\",\\r\\n    Importance == 1, \\\"Medium\\\",\\r\\n    Importance == 2, \\\"High\\\",\\r\\n    \\\"Unknown\\\"\\r\\n), Velocity = case(\\r\\n    Velocity == 0, \\\"Low\\\",\\r\\n    Velocity == 1, \\\"Medium\\\",\\r\\n    Velocity == 2, \\\"High\\\",\\r\\n    \\\"Unknown\\\"\\r\\n)\\r\\n| project ['Urgency Score'], ['Attack Rating'], ['Entity Name'], ['Vectra Pivot'], Prioritized = ['Is Prioritized'], ['Data Source Type'], Importance, Velocity, ['Last Updated']\",\"size\":0,\"showAnalytics\":true,\"title\":\"Entity View\",\"showRefreshButton\":true,\"exportFieldName\":\"Vectra Pivot\",\"exportParameterName\":\"P_deep_url\",\"exportDefaultValue\":\"None\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Pivot to Vectra\"}},{\"columnMatch\":\"Prioritized\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"true\",\"representation\":\"red\",\"text\":\"true\"},{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Deep Link\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 3\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 _Click on a row in the above Entity View grid to view more details_\"},\"name\":\"text - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraEntityScoring\\r\\n| where ['Last Updated'] {timerange} \\r\\n| summarize arg_max(['Last Updated'],*) by ['Entity ID'], Type\\r\\n| where ('*' in ({View}) or [\\\"Is Prioritized\\\"] in ({View})) and ('*' in ({EntityType}) or Type in ({EntityType}))\\r\\n| extend ['Data Source Type'] = case(Name startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        Name startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        Name startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| extend ['Entity Name'] = extract(\\\"^(AWS:|SAML:|O365:|M365:|Azure:)?(.*)$\\\",2, Name)\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource})) and ['Vectra Pivot'] == '{P_deep_url}'\\r\\n| project ID, ['Entity ID'], ['Data Source Type'], ['Entity Name'], Name, Importance, ['Type'], ['Is Prioritized'], Severity, [\\\"Urgency Score\\\"], ['Vectra Pivot'], Category, ['Last Detection URL'], ['Last Detection Type'], [\\\"Last Detection ID\\\"], ['Active Detection Types'], ['Last Updated'], ['Breadth Contrib'], Velocity, ['Attack Rating']\",\"size\":4,\"showAnalytics\":true,\"title\":\"Selected Entity View data\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"Last Detection URL\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"P_deep_url\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},\"name\":\"query - 7\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraDetections\\r\\n| where ['Last Updated'] > ago(90d) and URL == '{P_deep_url}'\\r\\n| summarize arg_max(['Last Updated'],*) by ['Detection ID']\\r\\n| extend ['Data Source Type'] = case(['Entity UID'] startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        ['Entity UID'] startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        ['Entity UID'] startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| extend ['Entity Name'] = extract(\\\"^(AWS:|SAML:|O365:|M365:|Azure:)?(.*)$\\\",2,['Entity UID'])\\r\\n| extend ['Detection Category'] = case(['Detection Category']==\\\"botnet\\\",\\\"Botnet\\\",['Detection Category']==\\\"command_and_control\\\",\\\"Command and Control\\\",['Detection Category']==\\\"reconnaissance\\\",\\\"Reconnaissance\\\",['Detection Category']==\\\"lateral_movement\\\",\\\"Lateral Movement\\\",['Detection Category']==\\\"exfiltration\\\",\\\"Exfiltration\\\",\\\"Unknown\\\")\\r\\n| extend [\\\"Detection Details\\\"] = parse_json([\\\"Detection Details\\\"])[0]\\r\\n| extend [\\\"Detection Details\\\"] = case(isnotempty([\\\"Detection Details\\\"]), [\\\"Detection Details\\\"], \\\"Details too large to display.\\\")\\r\\n| extend [\\\"Source IP\\\"] = case(isnotempty([\\\"Source IP\\\"]), [\\\"Source IP\\\"], \\\"Not Applicable\\\")\\r\\n| project ['Entity Name'], ['Detection Category'], Behavior=[\\\"Detection Name\\\"], ['Vectra Pivot'], ['Data Source Type'],  ['Source IP'], ['Last Updated'], [\\\"Detection Details\\\"], [\\\"Detection ID\\\"]\\r\\n| sort by ['Last Updated'] desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Detection List\",\"showRefreshButton\":true,\"exportFieldName\":\"Detection ID\",\"exportParameterName\":\"P_detection_id\",\"exportDefaultValue\":\"None\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Pivot to Vectra\",\"linkIsContextBlade\":false}},{\"columnMatch\":\"Detection Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Detection ID\",\"formatter\":5},{\"columnMatch\":\"Deep Link\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}}],\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"P_deep_url\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 _Click on a row in the above Detection List grid to view more details_\"},\"conditionalVisibility\":{\"parameterName\":\"P_deep_url\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},\"name\":\"text - 9\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraDetections\\r\\n| where ['Last Updated'] > ago(90d) and URL == '{P_deep_url}'\\r\\n| where ['Detection ID'] == '{P_detection_id}'\\r\\n| extend ['Detection Category'] = case(['Detection Category']==\\\"botnet\\\",\\\"Botnet\\\",['Detection Category']==\\\"command_and_control\\\",\\\"Command and Control\\\",['Detection Category']==\\\"reconnaissance\\\",\\\"Reconnaissance\\\",['Detection Category']==\\\"lateral_movement\\\",\\\"Lateral Movement\\\",['Detection Category']==\\\"exfiltration\\\",\\\"Exfiltration\\\",\\\"Unknown\\\")\\r\\n| extend [\\\"Detection Details\\\"] = parse_json([\\\"Detection Details\\\"])[0]\\r\\n| extend [\\\"Detection Details\\\"] = case(isnotempty([\\\"Detection Details\\\"]), [\\\"Detection Details\\\"], \\\"Details too large to display.\\\")\\r\\n| extend [\\\"Source Host\\\"] = parse_json([\\\"Source Host\\\"])[0]\\r\\n| extend [\\\"Grouped Details\\\"] = parse_json([\\\"Grouped Details\\\"])[0]\\r\\n| extend Summary = parse_json(Summary)[0]\\r\\n| extend Details = parse_json(Details)[0]\\r\\n| project ID, ['Detection Category'], ['Is Triaged'], Behavior=[\\\"Detection Name\\\"], [\\\"Detection ID\\\"], [\\\"Vectra Pivot\\\"], [\\\"Entity ID\\\"], URL, [\\\"Entity UID\\\"], [\\\"Last Updated\\\"], [\\\"Detection Details\\\"], [\\\"Details\\\"], Severity, ['Source IP'], [\\\"Normal Domains\\\"], [\\\"Is Targeting Key Asset\\\"], [\\\"Source Host\\\"], Summary, [\\\"Grouped Details\\\"]\",\"size\":4,\"showAnalytics\":true,\"title\":\"Selected Detection List Data\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"URL\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"Detection Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Source Host\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Summary\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Grouped Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}]}},\"conditionalVisibilities\":[{\"parameterName\":\"P_deep_url\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},{\"parameterName\":\"P_detection_id\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"}],\"name\":\"query - 7\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 8\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Entity\"},\"name\":\"Entity\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"8ba900f4-2667-4651-87ee-866de79ed08f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000}},{\"id\":\"41b0ee6f-04db-423c-a0fd-babfda10e619\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DataSource\",\"label\":\"Data Source Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    {\\\"value\\\":\\\"AWS\\\", \\\"label\\\":\\\"AWS\\\"},\\r\\n    {\\\"value\\\":\\\"M365/AAD\\\",\\\"label\\\":\\\"Microsoft 365/Azure AD\\\"},\\r\\n    {\\\"value\\\":\\\"Network\\\",\\\"label\\\":\\\"Network\\\"}\\r\\n]\",\"defaultValue\":\"value::all\",\"value\":[\"value::all\"]},{\"id\":\"bd9a1ea9-0bec-457d-a24b-f84e15e1af42\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DetectionCategory\",\"label\":\"Detection Category\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    {\\\"value\\\":\\\"botnet\\\", \\\"label\\\":\\\"Botnet\\\"},\\r\\n    {\\\"value\\\":\\\"command_and_control\\\",\\\"label\\\":\\\"Command and Control\\\"},\\r\\n    {\\\"value\\\":\\\"reconnaissance\\\",\\\"label\\\":\\\"Reconnaissance\\\"},\\r\\n    {\\\"value\\\":\\\"lateral_movement\\\",\\\"label\\\":\\\"Lateral Movement\\\"},\\r\\n    {\\\"value\\\":\\\"exfiltration\\\",\\\"label\\\":\\\"Exfiltration\\\"},\\r\\n    {\\\"value\\\":\\\"botnet_activity\\\", \\\"label\\\":\\\"Botnet Activity\\\"}\\r\\n]\",\"defaultValue\":\"value::all\",\"value\":[\"value::all\"]},{\"id\":\"1144f1b6-24e0-422c-bc8c-9bd87f6d258e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DetectionType\",\"label\":\"Behavior\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraDetections\\r\\n| where ['Last Updated'] {TimeRange}\\r\\n| summarize arg_max(['Last Updated'],*) by ['Detection ID']\\r\\n| extend source = tostring(split(['Entity UID'],\\\":\\\")[0])\\r\\n| where ('*' in ({DataSource}) or source in ({DataSource})) and ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory}))\\r\\n| distinct ['Detection Name']\\r\\n| sort by ['Detection Name'] asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"0a0026bb-e21f-45b0-9678-f3650317ce61\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Mitre\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraDetections\\r\\n| where ['Last Updated'] {TimeRange}\\r\\n| mv-expand todynamic(Mitre)\\r\\n| distinct tostring(Mitre)\\r\\n| sort by Mitre asc\\r\\n\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"datatable (Count:long, ['Detection Category']:string, category_count:long) [0,\\\"Botnet Activity\\\",1, 0,\\\"Command and Control\\\",2, 0,\\\"Reconnaissance\\\",3, 0,\\\"Lateral Movement\\\",4, 0,\\\"Exfiltration\\\",5]\\r\\n|union\\r\\n(\\r\\nVectraDetections\\r\\n| where ['Last Updated'] {TimeRange}\\r\\n| mv-expand todynamic(Mitre)\\r\\n| where ('*' == ('{Mitre:escapejson}') or Mitre in ({Mitre}))\\r\\n| summarize arg_max(['Last Updated'],*) by ['Detection ID']\\r\\n| extend ['Data Source Type'] = case(['Entity UID'] startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        ['Entity UID'] startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        ['Entity UID'] startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| where ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory})) and ('*' in ({DetectionType}) or ['Detection Name'] in ({DetectionType}))\\r\\n| extend ['Detection Category'] = case(['Detection Category']==\\\"botnet\\\" or ['Detection Category']==\\\"botnet_activity\\\",\\\"Botnet Activity\\\",['Detection Category']==\\\"command_and_control\\\",\\\"Command and Control\\\",['Detection Category']==\\\"reconnaissance\\\",\\\"Reconnaissance\\\",['Detection Category']==\\\"lateral_movement\\\",\\\"Lateral Movement\\\",['Detection Category']==\\\"exfiltration\\\",\\\"Exfiltration\\\",\\\"Other\\\")\\r\\n| extend category_count=case(['Detection Category']==\\\"Botnet Activity\\\",1,['Detection Category']==\\\"Command and Control\\\",2,['Detection Category']==\\\"Reconnaissance\\\",3,['Detection Category']==\\\"Lateral Movement\\\",4,['Detection Category']==\\\"Exfiltration\\\",5,6)\\r\\n| summarize Count=count() by ['Detection Category'], category_count\\r\\n)\\r\\n| summarize Count=sum(Count) by ['Detection Category'], category_count\\r\\n| sort by category_count asc\",\"size\":3,\"title\":\"Detection Category Count\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Detection Category\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Command and Control\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Exfiltration\",\"representation\":\"purple\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Lateral Movement\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Reconnaissance\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"}},\"showBorder\":true,\"size\":\"auto\"}},\"name\":\"query - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Mitre_List = \\r\\n    VectraDetections\\r\\n    | where ['Last Updated'] {TimeRange}\\r\\n    | summarize arg_max(['Last Updated'], *) by ['Detection ID']\\r\\n    | extend ['Data Source Type'] = case(\\r\\n        ['Entity UID'] startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n        ['Entity UID'] startswith \\\"SAML\\\", \\\"AWS\\\", \\r\\n        ['Entity UID'] startswith \\\"O365\\\", \\\"M365/AAD\\\", \\r\\n        ['Entity UID'] startswith \\\"M365\\\", \\\"M365/AAD\\\", \\r\\n        ['Entity UID'] startswith \\\"Azure\\\", \\\"M365/AAD\\\", \\r\\n        \\\"Network\\\"\\r\\n    )\\r\\n    | where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n    | where ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory})) and ('*' in ({DetectionType}) or ['Detection Name'] in ({DetectionType}))\\r\\n    | mv-expand todynamic(Mitre)\\r\\n    | where ('*' == ('{Mitre:escapejson}') or Mitre in ({Mitre}))\\r\\n    | summarize Mitre_Numbers = make_list(Mitre) by ['Detection ID'];\\r\\nVectraDetections\\r\\n| where ['Last Updated'] {TimeRange}\\r\\n| summarize arg_max(['Last Updated'], *) by ['Detection ID']\\r\\n| extend ['Data Source Type'] = case(\\r\\n    ['Entity UID'] startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n    ['Entity UID'] startswith \\\"SAML\\\", \\\"AWS\\\", \\r\\n    ['Entity UID'] startswith \\\"O365\\\", \\\"M365/AAD\\\", \\r\\n    ['Entity UID'] startswith \\\"M365\\\", \\\"M365/AAD\\\", \\r\\n    ['Entity UID'] startswith \\\"Azure\\\", \\\"M365/AAD\\\", \\r\\n    \\\"Network\\\"\\r\\n)\\r\\n| extend ['Entity Name'] = extract(\\\"^(AWS:|SAML:|O365:|M365:|Azure:)?(.*)$\\\", 2, ['Entity UID'])\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| where ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory})) and ('*' in ({DetectionType}) or ['Detection Name'] in ({DetectionType}))\\r\\n| extend ['Detection Category'] = case(\\r\\n    ['Detection Category'] == \\\"botnet\\\", \\\"Botnet\\\",\\r\\n    ['Detection Category'] == \\\"command_and_control\\\", \\\"Command and Control\\\",\\r\\n    ['Detection Category'] == \\\"reconnaissance\\\", \\\"Reconnaissance\\\",\\r\\n    ['Detection Category'] == \\\"lateral_movement\\\", \\\"Lateral Movement\\\",\\r\\n    ['Detection Category'] == \\\"exfiltration\\\", \\\"Exfiltration\\\",\\r\\n    ['Detection Category'] == \\\"botnet_activity\\\", \\\"Botnet Activity\\\",\\r\\n    \\\"Other\\\"\\r\\n)\\r\\n| extend [\\\"Detection Details\\\"] = parse_json([\\\"Detection Details\\\"])[0]\\r\\n| extend [\\\"Detection Details\\\"] = case(isnotempty([\\\"Detection Details\\\"]), [\\\"Detection Details\\\"], \\\"Details too large to display.\\\")\\r\\n| extend [\\\"Source IP\\\"] = case(isnotempty([\\\"Source IP\\\"]), [\\\"Source IP\\\"], \\\"Not Applicable\\\")\\r\\n| join kind=inner (Mitre_List) on ['Detection ID']\\r\\n| project\\r\\n    ['Entity Name'],\\r\\n    ['Detection Category'],\\r\\n    Behavior=[\\\"Detection Name\\\"],\\r\\n    ['Vectra Pivot'],\\r\\n    ['Data Source Type'],\\r\\n    ['Source IP'],\\r\\n    ['Last Updated'],\\r\\n    [\\\"Detection Details\\\"],\\r\\n    [\\\"Detection ID\\\"],\\r\\n    Mitre\\r\\n| sort by ['Last Updated'] desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Detection View\",\"showRefreshButton\":true,\"exportFieldName\":\"Detection ID\",\"exportParameterName\":\"P_detection_id\",\"exportDefaultValue\":\"None\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Pivot to Vectra\"}},{\"columnMatch\":\"Detection Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Detection ID\",\"formatter\":5}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 2\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 _Click on a row in the above Detection View grid to view more details_\"},\"name\":\"text - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Mitre_List = \\r\\n    VectraDetections\\r\\n    | where ['Last Updated'] {TimeRange}\\r\\n    | summarize arg_max(['Last Updated'], *) by ['Detection ID']\\r\\n    | extend ['Data Source Type'] = case(\\r\\n        ['Entity UID'] startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n        ['Entity UID'] startswith \\\"SAML\\\", \\\"AWS\\\", \\r\\n        ['Entity UID'] startswith \\\"O365\\\", \\\"M365/AAD\\\", \\r\\n        ['Entity UID'] startswith \\\"M365\\\", \\\"M365/AAD\\\", \\r\\n        ['Entity UID'] startswith \\\"Azure\\\", \\\"M365/AAD\\\", \\r\\n        \\\"Network\\\"\\r\\n    )\\r\\n    | where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n    | where ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory})) and ('*' in ({DetectionType}) or ['Detection Name'] in ({DetectionType}))     and [\\\"Detection ID\\\"] == '{P_detection_id}'\\r\\n    | mv-expand todynamic(Mitre)\\r\\n    | where ('*' == ('{Mitre:escapejson}') or Mitre in ({Mitre}))\\r\\n    | summarize Mitre_Numbers = make_list(Mitre) by ['Detection ID'];\\r\\nVectraDetections\\r\\n| where ['Last Updated'] {TimeRange}\\r\\n| summarize arg_max(['Last Updated'], *) by ['Detection ID']\\r\\n| extend ['Data Source Type'] = case(['Entity UID'] startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        ['Entity UID'] startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        ['Entity UID'] startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| where ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory})) and ('*' in ({DetectionType}) or ['Detection Name'] in ({DetectionType})) and [\\\"Detection ID\\\"] == '{P_detection_id}'\\r\\n| extend ['Detection Category'] = case(['Detection Category']==\\\"botnet\\\",\\\"Botnet\\\",['Detection Category']==\\\"command_and_control\\\",\\\"Command and Control\\\",['Detection Category']==\\\"reconnaissance\\\",\\\"Reconnaissance\\\",['Detection Category']==\\\"lateral_movement\\\",\\\"Lateral Movement\\\",['Detection Category']==\\\"exfiltration\\\",\\\"Exfiltration\\\",['Detection Category'] == \\\"botnet_activity\\\", \\\"Botnet Activity\\\",\\\"Other\\\")\\r\\n| extend [\\\"Detection Details\\\"] = parse_json([\\\"Detection Details\\\"])[0]\\r\\n| extend [\\\"Detection Details\\\"] = case(isnotempty([\\\"Detection Details\\\"]), [\\\"Detection Details\\\"], \\\"Details too large to display.\\\")\\r\\n| extend [\\\"Source Host\\\"] = parse_json([\\\"Source Host\\\"])[0]\\r\\n| extend [\\\"Grouped Details\\\"] = parse_json([\\\"Grouped Details\\\"])[0]\\r\\n| extend Summary = parse_json(Summary)[0]\\r\\n| join kind=inner (Mitre_List) on ['Detection ID']\\r\\n| project ID, ['Detection Category'], ['Is Triaged'], Behavior=[\\\"Detection Name\\\"], [\\\"Detection ID\\\"], [\\\"Vectra Pivot\\\"], [\\\"Entity ID\\\"], URL, [\\\"Entity UID\\\"], [\\\"Last Updated\\\"], [\\\"Detection Details\\\"], [\\\"Details\\\"], Severity, ['Source IP'], [\\\"Normal Domains\\\"], [\\\"Is Targeting Key Asset\\\"], [\\\"Source Host\\\"], Summary, [\\\"Grouped Details\\\"], Mitre\",\"size\":4,\"showAnalytics\":true,\"title\":\"Selected Detection View Data\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"URL\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"Detection Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Source Host\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Summary\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Grouped Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}]}},\"conditionalVisibility\":{\"parameterName\":\"P_detection_id\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 5\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"Detections\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"ea3f10f3-aa7e-481c-9d4f-7939d1a463a1\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000}},{\"id\":\"7df89745-bea2-4a36-9c0a-4e64a01a0423\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EntityType\",\"label\":\"Entity Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraLockdown\\r\\n| where [\\\"Locked Date\\\"] {TimeRange} or [\\\"Unlock Date\\\"] {TimeRange}\\r\\n| distinct Type\\r\\n| extend cap = toupper(substring(Type,0,1)), rest_string = substring(Type,1)\\r\\n| extend Captilized_type = strcat(cap,rest_string)\\r\\n| distinct ['Type'], Captilized_type\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"90c8487a-b24b-420e-8a70-73baad8d3301\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EntityLocked\",\"label\":\"Entity Locked\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"True\\\", \\\"label\\\":\\\"True\\\", \\\"selected\\\":true },\\r\\n    { \\\"value\\\":\\\"False\\\", \\\"label\\\":\\\"False\\\", \\\"selected\\\":true}\\r\\n]\",\"value\":[\"False\",\"True\"]}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraLockdown\\r\\n| where case('{TimeRange}' contains 'ago', [\\\"Locked Date\\\"] {TimeRange} or ([\\\"Unlock Date\\\"] {TimeRange} and [\\\"Unlock Date\\\"] <= now()), [\\\"Locked Date\\\"] {TimeRange} or [\\\"Unlock Date\\\"] {TimeRange})\\r\\n| summarize arg_max(TimeGenerated, *) by [\\\"Entity Name\\\"], Type, [\\\"Locked Date\\\"], [\\\"Unlock Date\\\"]\\r\\n| where ('*' in ({EntityType}) or Type in ({EntityType}))\\r\\n| extend current_status = case([\\\"Locked Date\\\"] <= now() and now() < [\\\"Unlock Date\\\"], \\\"True\\\", \\\"False\\\")\\r\\n| where ('*' in ({EntityLocked}) or current_status in ({EntityLocked}))\\r\\n| sort by [\\\"Locked Date\\\"] desc\\r\\n| project [\\\"Entity Name\\\"], [\\\"Entity Type\\\"] = Type, [\\\"Entity Locked\\\"] = current_status, [\\\"Locked By\\\"], [\\\"Locked Date\\\"], [\\\"Unlock Date\\\"]\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lockdown View\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Entity Locked\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"True\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 1\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 2\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Lockdown\"},\"name\":\"lockdown\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"9b914837-bb6a-4932-92ce-9671341c2e55\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000}},{\"id\":\"faf02ab6-e28d-4d11-84d7-3039ae73bb37\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ResultStatus\",\"label\":\"Result Status\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"success\\\", \\\"label\\\":\\\"Success\\\" },\\r\\n    { \\\"value\\\":\\\"failure\\\", \\\"label\\\":\\\"Failure\\\" },\\r\\n    {\\\"value\\\":\\\"\\\",\\\"label\\\":\\\"N/A\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"value\":[\"value::all\"]},{\"id\":\"a5e78ed7-0bde-4116-90fc-c37bdc106d19\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Username\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraAudits\\r\\n| where ['Event Timestamp'] {TimeRange} and isnotempty(Username)\\r\\n| distinct Username\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraAudits\\r\\n| where ['Event Timestamp'] {TimeRange}\\r\\n| summarize arg_max(TimeGenerated,*) by ID\\r\\n| where ('*' in ({ResultStatus}) or Status in ({ResultStatus}))\\r\\n| where ('*' in ({Username}) or Username in ({Username}))\\r\\n| extend Status = tolower(Status)\\r\\n| extend Result_status = case(\\r\\n    Status == \\\"success\\\", \\\"Success\\\",\\r\\n    Status == \\\"failure\\\", \\\"Failure\\\",\\r\\n    Status == \\\"\\\",\\\"N/A\\\"\\r\\n    ,\\\"Unknown\\\"\\r\\n)\\r\\n| extend importance = case(\\r\\n    Result_status == \\\"Success\\\", 0,\\r\\n    Result_status == \\\"Failure\\\", 1,\\r\\n    Result_status == \\\"NA\\\",2\\r\\n    ,3\\r\\n)\\r\\n| summarize count() by Result_status, importance\\r\\n| sort by importance asc\",\"size\":3,\"title\":\"Audit Logs Count\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Result_status\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Success\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Failure\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"NA\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"}},\"showBorder\":true,\"size\":\"auto\"}},\"name\":\"query - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraAudits\\r\\n| where ['Event Timestamp'] {TimeRange}\\r\\n| summarize arg_max(TimeGenerated,*) by ID\\r\\n| where ('*' in ({ResultStatus}) or Status in ({ResultStatus}))\\r\\n| where ('*' in ({Username}) or Username in ({Username}))\\r\\n| extend Status = case(isnotempty(Status), Status, '-')\\r\\n| extend ['Event Data'] = parse_json(['Event Data'])[0]\\r\\n| project-rename Role = ['User Role']\\r\\n| project ['Event Timestamp'], Username, Role, Status, Message, ['Event Data']\\r\\n| sort by ['Event Timestamp'] desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Audit View\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Status\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"failure\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Event Data\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 3\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 3\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Audit\"},\"name\":\"audit\",\"styleSettings\":{\"margin\":\"10px\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"9ec409ef-a68f-486e-93ae-602d614ff45f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Search\",\"type\":1,\"timeContext\":{\"durationMs\":86400000},\"value\":\"*\"},{\"id\":\"155d2a3f-1d3a-4a0f-9839-bd5a1f89c96c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"System\",\"type\":2,\"description\":\"Select system to display particular system's data\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraHealth\\r\\n| distinct System_Serial_Number\\r\\n\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"timeContext\":{\"durationMs\":2592000000},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraHealth\\r\\n| where ('*' == ('{System:escapejson}') or System_Serial_Number in ({System}))\\r\\n| extend Network = parse_json(Network)\\r\\n| extend ['Aggregated Peak Traffic (Mbps)'] = Network[0].traffic.brain.aggregated_peak_traffic_mbps\\r\\n| where (\\\"*\\\" == '{Search}' or ['Last Updated'] contains '{Search}') or (\\\"*\\\" == '{Search}' or tostring(['CPU Usage - User (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['CPU Usage - System (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['CPU Usage - Idle (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Disk Utilization (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Memory Utilization (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Power Status']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Power Error']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Aggregated Peak Traffic (Mbps)']) contains '{Search}')\\r\\n| project ['Last Updated'], ['CPU Usage - User (%)'], ['CPU Usage - System (%)'], ['CPU Usage - Idle (%)'], ['Disk Utilization (%)'], ['Memory Utilization (%)'], ['Aggregated Peak Traffic (Mbps)'], ['Power Status'], ['Power Error']\\r\\n| sort by ['Last Updated'] desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"System View\",\"timeContext\":{\"durationMs\":2592000000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"name\":\"System View\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraHealth\\r\\n| where ('*' == ('{System:escapejson}') or System_Serial_Number in ({System}))\\r\\n| extend Sensors = parse_json(Sensors)\\r\\n| mvapply Sensors on (project Sensors.name, Sensors.ip_address, Sensors.d_link_status, Sensors.d_aggregated_peak_traffic, Sensors.d_connectivity_status, Sensors.d_connectivity_error, Sensors.d_trafficdrop_status, Sensors.d_trafficdrop_error)\\r\\n| where (\\\"*\\\" == '{Search}' or tostring(Sensors_name) contains '{Search}') or (\\\"*\\\" == '{Search}' or tostring(Sensors_ip_address) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_link_status) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_connectivity_status) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_connectivity_error) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_trafficdrop_status) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_trafficdrop_error) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_aggregated_peak_traffic) contains '{Search}')\\r\\n| project Name = Sensors_name, ['IP Address'] = Sensors_ip_address, ['Connectivity Status'] = Sensors_d_connectivity_status, ['Connectivity Error'] = Sensors_d_connectivity_error, ['Traffic Drop Status'] = Sensors_d_trafficdrop_status, ['Traffic Drop Error'] = Sensors_d_trafficdrop_error, ['Aggregated Peak Traffic (Mbps)'] =  Sensors_d_aggregated_peak_traffic, ['Interface Link Status'] = Sensors_d_link_status\",\"size\":0,\"showAnalytics\":true,\"title\":\"Sensors View\",\"timeContext\":{\"durationMs\":2592000000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Interface Link Status\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Degraded\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"Sensor View\",\"styleSettings\":{\"showBorder\":true}}]},\"name\":\"group - 1\"},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 0\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Health\"},\"name\":\"health\"}]},\"name\":\"main\"}],\"fromTemplateId\":\"sentinel-VectraXDR\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId1'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=VectraXDR; logoFileName=; description=This workbook provides visualization of Audit, Detections, Entity Scoring, Lockdown and Health data.; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=2.0.0; title=Vectra XDR; templateRelativePath=VectraXDR.json; subtitle=; provider=Vectra}.description",
                "parentId": "[variables('workbookId1')]",
                "contentId": "[variables('_workbookContentId1')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                },
                "dependencies": {
                  "operator": "AND",
                  "criteria": [
                    {
                      "contentId": "Audits_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Detections_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Entity_Scoring_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Lockdown_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Health_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "VectraDataConnector",
                      "kind": "DataConnector"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_workbookContentId1')]",
        "contentKind": "Workbook",
        "displayName": "[parameters('workbook1-name')]",
        "contentProductId": "[variables('_workbookcontentProductId1')]",
        "id": "[variables('_workbookcontentProductId1')]",
        "version": "[variables('workbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraAddNoteToEntity Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraAddNoteToEntity",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl of your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Send_Adaptive_Card_If_No_Comment_Found_With_Proper_Structure": {
                      "actions": {
                        "Append_To_Entity_Note_From_User_Input_For_No_Note_Extracted": {
                          "runAfter": {
                            "Post_Adaptive_Card_For_No_Structured_Comment_Found_And_Wait_For_Response": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "entity_note",
                            "value": "@body('Post_Adaptive_Card_For_No_Structured_Comment_Found_And_Wait_For_Response')?['data']?['note']"
                          }
                        },
                        "Post_Adaptive_Card_For_No_Structured_Comment_Found_And_Wait_For_Response": {
                          "type": "ApiConnectionWebhook",
                          "inputs": {
                            "body": {
                              "body": {
                                "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Add Note To Vectra Entity\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"No Comment found with proper structure, enter a value of note to add into Vectra Entity explicitly.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"warning\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"label\": \"Enter a note you want to add to the Vectra entity\",\n            \"style\": \"text\",\n            \"id\": \"note\",\n            \"isRequired\": true,\n            \"errorMessage\": \"Note is required\",\n            \"placeholder\": \"Enter a note\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"id\": \"submit\",\n            \"style\": \"positive\"\n        }\n    ]\n}\n",
                                "recipient": {
                                  "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                  "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                },
                                "updateMessage": "Thanks for your response!"
                              },
                              "notificationUrl": "@{listCallbackUrl()}"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Verify_That_Comments_Exist_Which_Contains_Note": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('entity_note'))",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts Found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Adding_Note_To_Vectra_Entity": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Adding_Note_To_Vectra_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Error occurred while adding note to vectra entity ID: @{variables('entity_id')} and Type: @{variables('entity_type')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "For_Each_Available_Note_To_Add_In_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('note_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Note_To_Vectra_Entity": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Fetching_Notes": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_to_Retrieve_Notes_For_an_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_to_Retrieve_Notes_For_an_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_Zero_For_Fetching_Notes_For_An_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('note_fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for adding note to vectra entity."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Adding_Note_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_While_Fetching_Notes": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Token_For_Fetching_Available_Notes": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error while generating access token"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Note_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_Any_Note_Available_To_Add_Or_Not": {
                      "actions": {
                        "Condition_To_Verify_Whether_User_Entered_Any_Value_For_Note_Or_Not": {
                          "actions": {
                            "Append_To_Notes_To_Add_From_User_Input": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "notes_to_add",
                                "value": "@body('Post_Adaptive_Card_For_No_Note_Available_To_Add_And_Wait_For_Response')?['data']?['note']"
                              }
                            }
                          },
                          "runAfter": {
                            "Post_Adaptive_Card_For_No_Note_Available_To_Add_And_Wait_For_Response": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Post_Adaptive_Card_For_No_Note_Available_To_Add_And_Wait_For_Response')?['data']?['note']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Post_Adaptive_Card_For_No_Note_Available_To_Add_And_Wait_For_Response": {
                          "type": "ApiConnectionWebhook",
                          "inputs": {
                            "body": {
                              "body": {
                                "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Add Note To Vectra  Entity\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"All Notes are already available, please provide note if you want to add explicitly.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"warning\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"label\": \"Enter a note you want to add into Vectra Entity\",\n            \"style\": \"text\",\n            \"id\": \"note\",\n            \"placeholder\": \"Enter a note\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"id\": \"submit\",\n            \"style\": \"positive\"\n        }\n    ]\n}",
                                "recipient": {
                                  "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                  "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                },
                                "updateMessage": "Thanks for your response!"
                              },
                              "notificationUrl": "@{listCallbackUrl()}"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                          }
                        }
                      },
                      "runAfter": {
                        "For_Each_Note_Extracted_From_Comment": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('notes_to_add'))",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_That_Comments_Exist_Which_Contains_Note": {
                      "actions": {
                        "For_Each_Loop_To_Extract_Comment_Values": {
                          "foreach": "@body('Filter_Comments_That_Contains_Note')",
                          "actions": {
                            "Condition_To_Check_That_Note_Is_Extracted_For_Curly_Braces": {
                              "actions": {
                                "Append_Extracted_Note_To_Array": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "entity_note",
                                    "value": "@outputs('Extract_Note_Written_In_Curly_Braces')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Extract_Note_Written_In_Curly_Braces": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Check_That_Note_Is_Extracted_For_Square_Braces": {
                                    "actions": {
                                      "Append_to_array_variable": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "entity_note",
                                          "value": "@outputs('Extract_Note_Written_In_Square_Braces')"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "not": {
                                            "equals": [
                                              "@outputs('Extract_Note_Written_In_Square_Braces')",
                                              "@null"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@outputs('Extract_Note_Written_In_Curly_Braces')",
                                        "@null"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Extract_Note_Written_In_Curly_Braces": {
                              "runAfter": {
                                "Extract_Note_Written_In_Square_Braces": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": "@if(and(startsWith(variables('incident_note'),'{'),contains(variables('incident_note'),'}')),split(string(split(variables('incident_note'),'{')[1]),'}')[0],null)"
                            },
                            "Extract_Note_Written_In_Square_Braces": {
                              "runAfter": {
                                "Set_Incident_Note": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": "@if(and(startsWith(variables('incident_note'),'['),contains(variables('incident_note'),']')),split(string(split(variables('incident_note'),'[')[1]),']')[0],null)"
                            },
                            "Set_Incident_Note": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "incident_note",
                                "value": "@{string(split(string(items('For_Each_Loop_To_Extract_Comment_Values')?['properties']?['message']), 'note: ')[1])}"
                              }
                            }
                          },
                          "type": "Foreach",
                          "runtimeConfiguration": {
                            "concurrency": {
                              "repetitions": 1
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Filter_Comments_That_Contains_Note": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Append_To_Entity_Note_Array_From_User_Input": {
                            "runAfter": {
                              "Post_Adaptive_Card_to_Get_Note_Value_From_User_And_Wait_For_A_Response": [
                                "Succeeded"
                              ]
                            },
                            "type": "AppendToArrayVariable",
                            "inputs": {
                              "name": "entity_note",
                              "value": "@body('Post_Adaptive_Card_to_Get_Note_Value_From_User_And_Wait_For_A_Response')?['data']?['Note']"
                            }
                          },
                          "Post_Adaptive_Card_to_Get_Note_Value_From_User_And_Wait_For_A_Response": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                              "body": {
                                "body": {
                                  "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Add Note To Vectra Entity\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"label\": \"Enter a note you want to add to the Vectra entity\",\n            \"style\": \"text\",\n            \"id\": \"Note\",\n            \"separator\": true,\n            \"isRequired\": true,\n            \"errorMessage\": \"Note is required\",\n            \"placeholder\": \"Enter a note\"\n        }\n    ],\n    \"actions\": [\n        {\n           \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"id\": \"submit\",\n            \"style\": \"positive\"\n        }\n    ]\n}",
                                  "recipient": {
                                    "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                    "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                  },
                                  "updateMessage": "Thanks for your response!"
                                },
                                "notificationUrl": "@{listCallbackUrl()}"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['teams']['connectionId']"
                                }
                              },
                              "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(body('Filter_Comments_That_Contains_Note'))",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Filter_Comments_That_Contains_Note": {
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@triggerBody()?['object']?['properties']?['Comments']",
                        "where": "@contains(item()?['properties']?['message'], 'note: ')"
                      }
                    },
                    "For_Each_Available_Note_To_Add_In_Vectra_Entity": {
                      "foreach": "@variables('notes_to_add')",
                      "actions": {
                        "Set_Retry_Count_For_Notes_To_Add_In_Vectra_Entity": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "retry_count",
                            "value": 2
                          }
                        },
                        "Until_Retry_Count_is_Zero": {
                          "actions": {
                            "Condition_To_Verify_Note_Added_To_Vectra_Entity_Successfully": {
                              "actions": {
                                "Set_Retry_Count_As_Zero": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Add_Note_To_Vectra_Entity": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token": {
                                    "actions": {
                                      "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                        "actions": {
                                          "Decrement_Retry_Count": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Access_Token": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Access_Token": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Access_Token": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Error_True_While_Adding_Note_To_Vectra_Entity": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "note_add_error",
                                            "value": "@true"
                                          }
                                        },
                                        "Set_Retry_Count_As_Zero_For_Error_While_Adding_Note_To_Vectra_Entity": {
                                          "runAfter": {
                                            "Set_Error_True_While_Adding_Note_To_Vectra_Entity": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']",
                                      201
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Access_Token": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs",
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Add_Note_To_Vectra_Entity": {
                              "runAfter": {
                                "Get_Access_Token": [
                                  "Succeeded",
                                  "Failed",
                                  "TimedOut"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "note": "@items('For_Each_Available_Note_To_Add_In_Vectra_Entity')"
                                },
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Access_Token')?['value']}",
                                  "Content-Type": "application/json"
                                },
                                "method": "POST",
                                "queries": {
                                  "type": "@variables('entity_type')"
                                },
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities/@{int(variables('entity_id'))}/notes"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_Retry_Count_For_Notes_To_Add_In_Vectra_Entity": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('retry_count'), 0)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Condition_To_Verify_Any_Note_Available_To_Add_Or_Not": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "For_Each_Note_Extracted_From_Comment": {
                      "foreach": "@variables('entity_note')",
                      "actions": {
                        "Condition_To_Check_Whether_Note_is_Already_Available": {
                          "runAfter": {
                            "Filter_Note_From_Existing_Note_Array": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_Note_To_Notes_To_Add_In_Vectra_Entity": {
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "notes_to_add",
                                  "value": "@items('For_Each_Note_Extracted_From_Comment')"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@empty(body('Filter_Note_From_Existing_Note_Array'))",
                                  "@false"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Filter_Note_From_Existing_Note_Array": {
                          "type": "Query",
                          "inputs": {
                            "from": "@body('Parse_JSON_For_Notes_Data')",
                            "where": "@equals(item()?['note'], items('For_Each_Note_Extracted_From_Comment'))"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_While_Generating_Token_While_Fetching_Notes": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Notes_To_Add_In_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Note": {
                      "runAfter": {
                        "Initialize_Incident_Note": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_note",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Error_While_Adding_Note_To_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_While_Adding_Note_To_Entity": {
                      "runAfter": {
                        "Initialize_Error_While_Fetching_Notes": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "note_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_While_Fetching_Notes": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "note_fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Incident_Note": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_note",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Notes_To_Add_In_Vectra_Entity": {
                      "runAfter": {
                        "Initialize_Entity_Note": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "notes_to_add",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook Triggered from Wrong Incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Retry_Count_Zero_For_Fetching_Notes_For_An_Entity": {
                      "actions": {
                        "Condition_to_Verify_Notes_Data_Fetched_Successfully": {
                          "actions": {
                            "Parse_JSON_For_Notes_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_to_Retrieve_Notes_For_an_Entity')",
                                "schema": {
                                  "items": {
                                    "properties": {
                                      "created_by": {
                                        "type": "string"
                                      },
                                      "date_created": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "integer"
                                      },
                                      "note": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              }
                            },
                            "Set_Retry_Count_To_Zero_For_Notes_Data": {
                              "runAfter": {
                                "Parse_JSON_For_Notes_Data": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_to_Retrieve_Notes_For_an_Entity": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Notes_Data": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Notes_Data": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Notes_Data": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra_2": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Notes_Data": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Token_For_Notes_Data": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Token_For_Notes_Data": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra_2')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra_2": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Fetching_Notes_Data": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "note_fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Notes_Data": {
                                      "runAfter": {
                                        "Set_Error_True_While_Fetching_Notes_Data": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_to_Retrieve_Notes_For_an_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_to_Retrieve_Notes_For_an_Entity')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_To_Retrieve_Available_Notes": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_to_Retrieve_Notes_For_an_Entity": {
                          "runAfter": {
                            "Get_Access_Token_To_Retrieve_Available_Notes": [
                              "Succeeded",
                              "Failed",
                              "TimedOut"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_To_Retrieve_Available_Notes')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "type": "@variables('entity_type')"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities/@{int(variables('entity_id'))}/notes"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Send_Adaptive_Card_If_No_Comment_Found_With_Proper_Structure": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraAddNoteToEntity",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Add Note To Entity",
            "description": "This playbook extracts notes from incident comments and adds them to Vectra Entity if comment added in proper structure, otherwise it prompts the user for input to add note to the Vectra Entity.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId. ",
              "4. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraAddNoteToEntity playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Add",
              "Note",
              "Entity"
            ],
            "lastUpdateTime": "2024-08-30T15:13:27.932Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "Playbook",
        "displayName": "VectraAddNoteToEntity",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraAddTagToEntityAllDetections Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion2')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraAddTagToEntityAllDetections",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_Send_Adaptive_Card_For_Comment_With_Wrong_Structure_Found": {
                      "actions": {
                        "Post_Adaptive_Card_For_No_Structured_Comment_Found_And_Wait_For_Response": {
                          "type": "ApiConnectionWebhook",
                          "inputs": {
                            "body": {
                              "body": {
                                "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Vectra Add Tags To Entity All Detections\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"No comments found with proper structure, please add tag values to add explicitly.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"warning\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"label\": \"Enter tags to add to vectra entity all detections.\",\n            \"style\": \"text\",\n            \"id\": \"tag_dets\",\n            \"isRequired\": true,\n            \"separator\": true,\n            \"errorMessage\": \"Please enter atleast one tag\",\n            \"placeholder\": \"Enter tags ex: tag1,tag2,tag3,...\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"style\": \"positive\",\n            \"id\": \"submit\"\n        }\n    ]\n}",
                                "recipient": {
                                  "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                  "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                },
                                "updateMessage": "Thanks for your response!"
                              },
                              "notificationUrl": "@{listCallbackUrl()}"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                          }
                        },
                        "Set_Entity_Tags_For_No_Structured_Comment_Found": {
                          "runAfter": {
                            "Post_Adaptive_Card_For_No_Structured_Comment_Found_And_Wait_For_Response": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "entity_tags",
                            "value": "@split(body('Post_Adaptive_Card_For_No_Structured_Comment_Found_And_Wait_For_Response')?['data']?['tag_dets'], ',')"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Verify_That_Comments_Exist_With_Predefined_Structure_Or_Not": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(variables('entity_tags'))",
                              0
                            ]
                          },
                          {
                            "equals": [
                              "@variables('wrong_structure_comment')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts Found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Tags_Which_Will_Be_Updated_To_Detections": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Detections_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Fetching_Detections_Data_Associated_With_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero_Or_Next_is_Null_For_Detections": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_For_Detections_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Generating_Access_Token_For_Detections_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for detections data."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Detections_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_While_Adding_Tags": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for adding tags to detection associated with vectra entity."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Verify_Tag_Added_To_All_Detections_Successfully": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_Tag_Added_To_All_Detections_Successfully": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Adding_Tags_To_Detection": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Error occurred while adding tags to detection associated with vectra entity."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "For_Each_Loop_To_Add_Tag_To_Detection": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('tag_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_That_Comments_Exist_With_Predefined_Structure_Or_Not": {
                      "actions": {
                        "For_Each_Loop_To_Extract_Comment_Values": {
                          "foreach": "@body('Filter_Comments_That_Contains_Tags')",
                          "actions": {
                            "Condition_To_Verify_Comment_Structure": {
                              "actions": {
                                "Append_Tag_Value_To_Entity_Tags": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "entity_tags",
                                    "value": "@split(string(split(variables('incident_tag'), '{')[1]), '}')[0]"
                                  }
                                }
                              },
                              "runAfter": {
                                "Set_Incident_Tag": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Verify_Comment_Structure_2": {
                                    "actions": {
                                      "Append_Tag_Value_To_Entity_Tags_2": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "entity_tags",
                                          "value": "@split(string(split(variables('incident_tag'), '[')[1]), ']')[0]"
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Error_True_For_Comment_With_Wrong_Structure_Found": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "wrong_structure_comment",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@startsWith(variables('incident_tag'), '[')",
                                            "@true"
                                          ]
                                        },
                                        {
                                          "equals": [
                                            "@endsWith(variables('incident_tag'), ']')",
                                            "@true"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@startsWith(variables('incident_tag'), '{')",
                                      "@true"
                                    ]
                                  },
                                  {
                                    "equals": [
                                      "@endsWith(variables('incident_tag'), '}')",
                                      "@true"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Set_Incident_Tag": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "incident_tag",
                                "value": "@{split(string(split(string(items('For_Each_Loop_To_Extract_Comment_Values')?['properties']?['message']), 'tag_dets: ')[1]), '<')[0]}"
                              }
                            }
                          },
                          "type": "Foreach",
                          "runtimeConfiguration": {
                            "concurrency": {
                              "repetitions": 1
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Filter_Comments_That_Contains_Tags": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Post_Adaptive_Card_To_Get_Tag_Value_From_User_And_Wait_For_Response": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                              "body": {
                                "body": {
                                  "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Add Tag To Vectra Entity All Detections\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"label\": \"Enter tags to add to vectra entity all detections.\",\n            \"style\": \"text\",\n            \"id\": \"tag_dets\",\n            \"isRequired\": true,\n            \"errorMessage\": \"Please enter atleast one tag\",\n            \"placeholder\": \"Enter Tags ex: tag1,tag2,tag3,...\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"style\": \"positive\",\n            \"id\": \"submit\"\n        }\n    ]\n}",
                                  "recipient": {
                                    "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                    "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                  },
                                  "updateMessage": "Thanks for your response!"
                                },
                                "notificationUrl": "@{listCallbackUrl()}"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['teams']['connectionId']"
                                }
                              },
                              "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                            }
                          },
                          "Set_Entity_Tags_From_User_Input": {
                            "runAfter": {
                              "Post_Adaptive_Card_To_Get_Tag_Value_From_User_And_Wait_For_Response": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "entity_tags",
                              "value": "@split(body('Post_Adaptive_Card_To_Get_Tag_Value_From_User_And_Wait_For_Response')?['data']?['tag_dets'], ',')"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(body('Filter_Comments_That_Contains_Tags'))",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Filter_Comments_That_Contains_Tags": {
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@triggerBody()?['object']?['properties']?['Comments']",
                        "where": "@contains(item()?['properties']?['message'], 'tag_dets: ')"
                      }
                    },
                    "For_Each_Loop_To_Add_Tag_To_Detection": {
                      "foreach": "@variables('detections')",
                      "actions": {
                        "Condition_To_Skip_Tag_Add_If_Any_Error_Occurred_While_Fetching_Tags": {
                          "actions": {
                            "Set_Tag_Add_Error_True_For_Error_While_Fetching_Tags": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "tag_add_error",
                                "value": "@true"
                              }
                            }
                          },
                          "runAfter": {
                            "Until_Retry_Count_is_Zero_For_Fetching_Tags_Of_Detection": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_Retry_Count_For_Adding_Tags_To_Each_Detection": {
                                "runAfter": {
                                  "Set_Tags_Which_Will_Be_Updated_To_Detections": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "retry_count",
                                  "value": 2
                                }
                              },
                              "Set_Tags_Which_Will_Be_Updated_To_Detections": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "new_tags",
                                  "value": "@union(variables('present_tags'), variables('entity_tags'))"
                                }
                              },
                              "Until_Retry_Count_is_Zero_For_Adding_Tags_To_Detection": {
                                "actions": {
                                  "Condition_To_Verify_Tags_Added_To_Detection_Successfully": {
                                    "actions": {
                                      "Set_Retry_Count_As_Zero": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "HTTP_Request_To_Add_Tags_To_Detection_Associated_With_Vectra_Entity": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Condition_To_Generate_New_Access_Token_For_Adding_Tags_To_Each_Detection": {
                                          "actions": {
                                            "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                              "actions": {
                                                "Decrement_Retry_Count": {
                                                  "type": "DecrementVariable",
                                                  "inputs": {
                                                    "name": "retry_count",
                                                    "value": 1
                                                  }
                                                }
                                              },
                                              "runAfter": {
                                                "GenerateAccessTokenVectra": [
                                                  "Succeeded",
                                                  "TimedOut",
                                                  "Failed"
                                                ]
                                              },
                                              "else": {
                                                "actions": {
                                                  "Decrement_Retry_Count_For_Error_While_Generating_Access_Token": {
                                                    "runAfter": {
                                                      "Set_Error_True_While_Generating_Access_Token": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "DecrementVariable",
                                                    "inputs": {
                                                      "name": "retry_count",
                                                      "value": 1
                                                    }
                                                  },
                                                  "Set_Error_True_While_Generating_Access_Token": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "access_token_generate_error",
                                                      "value": "@true"
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@body('GenerateAccessTokenVectra')?['status']",
                                                      "success"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "GenerateAccessTokenVectra": {
                                              "type": "Workflow",
                                              "inputs": {
                                                "host": {
                                                  "triggerName": "manual",
                                                  "workflow": {
                                                    "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "else": {
                                            "actions": {
                                              "Set_Error_True_While_Adding_Tags_To_Detection": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "tag_add_error",
                                                  "value": "@true"
                                                }
                                              },
                                              "Set_Retry_Count_As_Zero_For_Error_While_Adding_Tags_To_Detection": {
                                                "runAfter": {
                                                  "Set_Error_True_While_Adding_Tags_To_Detection": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "retry_count",
                                                  "value": 0
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@outputs('HTTP_Request_To_Add_Tags_To_Detection_Associated_With_Vectra_Entity')['statusCode']",
                                                  401
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Add_Tags_To_Detection_Associated_With_Vectra_Entity')['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Get_Access_Token_For_Adding_Tags_To_Each_Detection": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['keyvault']['connectionId']"
                                        }
                                      },
                                      "method": "get",
                                      "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                    },
                                    "runtimeConfiguration": {
                                      "secureData": {
                                        "properties": [
                                          "inputs",
                                          "outputs"
                                        ]
                                      }
                                    }
                                  },
                                  "HTTP_Request_To_Add_Tags_To_Detection_Associated_With_Vectra_Entity": {
                                    "runAfter": {
                                      "Get_Access_Token_For_Adding_Tags_To_Each_Detection": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                      "body": {
                                        "tags": "@variables('new_tags')"
                                      },
                                      "headers": {
                                        "Authorization": "Bearer @{body('Get_Access_Token_For_Adding_Tags_To_Each_Detection')?['value']}",
                                        "Content-Type": "application/json"
                                      },
                                      "method": "PATCH",
                                      "uri": "@{variables('base_url')}/api/@{variables('api_version')}/tagging/detection/@{items('For_Each_Loop_To_Add_Tag_To_Detection')}"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "Set_Retry_Count_For_Adding_Tags_To_Each_Detection": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": "@equals(variables('retry_count'), 0)",
                                "limit": {
                                  "timeout": "PT1H"
                                },
                                "type": "Until"
                              }
                            }
                          },
                          "expression": {
                            "or": [
                              {
                                "equals": [
                                  "@variables('fetch_error')",
                                  "@true"
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('access_token_generate_error')",
                                  "@true"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Set_Retry_Count_For_Fetching_Tags": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "retry_count",
                            "value": 2
                          }
                        },
                        "Until_Retry_Count_is_Zero_For_Fetching_Tags_Of_Detection": {
                          "actions": {
                            "Condition_To_Verify_Tags_Fetched_Successfully": {
                              "actions": {
                                "Condition_To_Set_Available_Detection_Tags_If_Any_Available": {
                                  "actions": {
                                    "Set_Available_Tags": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "present_tags",
                                        "value": "@body('Parse_JSON_For_Detection_Tags')?['tags']"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Parse_JSON_For_Detection_Tags": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_Available_Tags_For_No_Tags_Found": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "present_tags",
                                          "value": "[variables('TemplateEmptyArray')]"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@length(body('Parse_JSON_For_Detection_Tags')?['tags'])",
                                            0
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Parse_JSON_For_Detection_Tags": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@body('HTTP_Request_To_Fetch_Detection_Tags')",
                                    "schema": {
                                      "properties": {
                                        "status": {
                                          "type": "string"
                                        },
                                        "tag_id": {
                                          "type": "string"
                                        },
                                        "tags": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Successfull_Data_Fetch": {
                                  "runAfter": {
                                    "Condition_To_Set_Available_Detection_Tags_If_Any_Available": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Fetch_Detection_Tags": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Fetching_Tags": {
                                    "actions": {
                                      "Condition_To_Verify_Access_Token_Generated_Successfully_For_Fetching_Tags": {
                                        "actions": {
                                          "Decrement_Retry_Count_For_Successfull_Token_Generation_For_Fetching_Tags": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra_3": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Fetching_Tags": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Token_For_Fetching_Tags": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Token_For_Fetching_Tags": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra_3')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra_3": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Retry_Count_As_Zero_For_Data_Fetch_Error": {
                                          "runAfter": {
                                            "Set_Tags_Fetch_Error_True": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 0
                                          }
                                        },
                                        "Set_Tags_Fetch_Error_True": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "fetch_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Fetch_Detection_Tags')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Fetch_Detection_Tags')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Access_Token_For_Fetching_Tags": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs",
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Fetch_Detection_Tags": {
                              "runAfter": {
                                "Get_Access_Token_For_Fetching_Tags": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Access_Token_For_Fetching_Tags')?['value']}"
                                },
                                "method": "GET",
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/tagging/detection/@{items('For_Each_Loop_To_Add_Tag_To_Detection')}"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_Retry_Count_For_Fetching_Tags": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('retry_count'), 0)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_While_Generating_Token_For_Detections_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Available_Tags_For_Detection": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "present_tags",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Break_Loop": {
                      "runAfter": {
                        "Initialize_Detections": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "break_loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Detections": {
                      "runAfter": {
                        "Initialize_Entity_Tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "detections",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Tags": {
                      "runAfter": {
                        "Initialize_Incident_Tag": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_tags",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_For_Comment_With_Wrong_Structure": {
                      "runAfter": {
                        "Initialize_Error_False_While_Fetching_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "wrong_structure_comment",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Adding_Tags_To_Detections": {
                      "runAfter": {
                        "Initialize_Page_Number": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tag_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Fetching_Data": {
                      "runAfter": {
                        "Initialize_Error_False_While_Adding_Tags_To_Detections": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Error_False_For_Comment_With_Wrong_Structure": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Incident_Tag": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_tag",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Page_Number": {
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "page",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_Tags_Which_Will_Be_Updated_To_Detections": {
                      "runAfter": {
                        "Initialize_Available_Tags_For_Detection": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "new_tags",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook Triggered from Wrong Incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Retry_Count_is_Zero_Or_Next_is_Null_For_Detections": {
                      "actions": {
                        "Condition_to_Verify_Detections_Data_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_If_Count_is_Zero_For_Detections_Data": {
                              "actions": {
                                "Set_Break_Loop_For_Count_is_Zero": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "break_loop",
                                    "value": "@true"
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Count_is_Zero_For_Detections_Data": {
                                  "runAfter": {
                                    "Set_Break_Loop_For_Count_is_Zero": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Detections_Data": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Verify_If_Next_is_Null": {
                                    "actions": {
                                      "Set_Break_Loop_For_Next_is_Null": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "break_loop",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_Retry_Count_As_Zero_For_Next_is_Null": {
                                        "runAfter": {
                                          "Set_Break_Loop_For_Next_is_Null": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "For_Each_Detection": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Increment_Page_Number": {
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "page",
                                            "value": 1
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Detections_Data')?['next']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "For_Each_Detection": {
                                    "foreach": "@body('Parse_JSON_For_Detections_Data')?['results']",
                                    "actions": {
                                      "Append_Detection_ID_To_Detections": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "detections",
                                          "value": "@items('For_Each_Detection')?['id']"
                                        }
                                      }
                                    },
                                    "type": "Foreach"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_JSON_For_Detections_Data')?['count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Detections_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')",
                                "schema": {
                                  "properties": {
                                    "count": {
                                      "type": "integer"
                                    },
                                    "next": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "previous": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "results": {
                                      "items": {
                                        "properties": {
                                          "assigned_date": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "assigned_to": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "c_score": {
                                            "type": "integer"
                                          },
                                          "category": {
                                            "type": "string"
                                          },
                                          "certainty": {
                                            "type": "integer"
                                          },
                                          "created_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "custom_detection": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "data_source": {
                                            "type": "object"
                                          },
                                          "description": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection": {
                                            "type": "string"
                                          },
                                          "detection_category": {
                                            "type": "string"
                                          },
                                          "detection_type": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "filtered_by_ai": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_rule": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_user": {
                                            "type": "boolean"
                                          },
                                          "first_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "grouped_details": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "groups": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "is_custom_model": {
                                            "type": "boolean"
                                          },
                                          "is_marked_custom": {
                                            "type": "boolean"
                                          },
                                          "is_targeting_key_asset": {
                                            "type": "boolean"
                                          },
                                          "is_triaged": {
                                            "type": "boolean"
                                          },
                                          "last_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "notes": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "sensor": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "sensor_name": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "src_account": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_host": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_ip": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "state": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "summary": {
                                            "type": "object"
                                          },
                                          "t_score": {
                                            "type": "integer"
                                          },
                                          "tags": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "targets_key_asset": {
                                            "type": "boolean"
                                          },
                                          "threat": {
                                            "type": "integer"
                                          },
                                          "triage_rule_id": {
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "summary",
                                          "data_source",
                                          "sensor",
                                          "detection",
                                          "filtered_by_ai",
                                          "filtered_by_user",
                                          "is_custom_model",
                                          "custom_detection",
                                          "is_targeting_key_asset",
                                          "c_score",
                                          "note_modified_timestamp",
                                          "note",
                                          "description",
                                          "note_modified_by",
                                          "triage_rule_id",
                                          "filtered_by_rule",
                                          "assigned_date",
                                          "category",
                                          "src_account",
                                          "src_ip",
                                          "targets_key_asset",
                                          "is_marked_custom",
                                          "notes",
                                          "groups",
                                          "tags",
                                          "sensor_name",
                                          "last_timestamp",
                                          "detection_url",
                                          "detection_category",
                                          "assigned_to",
                                          "t_score",
                                          "state",
                                          "detection_type",
                                          "first_timestamp",
                                          "id",
                                          "created_timestamp",
                                          "certainty",
                                          "url",
                                          "threat",
                                          "is_triaged",
                                          "src_host",
                                          "type",
                                          "grouped_details"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Detections_Data": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Detections_Data": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Detections_Data": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra_2": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Detections_Data": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Token_For_Detections_Data": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Token_For_Detections_Data": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra_2')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra_2": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Break_Loop_True_While_Fetching_Detections_Data": {
                                      "runAfter": {
                                        "Set_Error_True_While_Fetching_Detections_Data": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Error_True_While_Fetching_Detections_Data": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Detections_Data": {
                                      "runAfter": {
                                        "Set_Break_Loop_True_While_Fetching_Detections_Data": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Detections_Data": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Detections_Data_Associated_With_Entity": {
                          "runAfter": {
                            "Get_Access_Token_For_Detections_Data": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Detections_Data')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "entity_id": "@variables('entity_id')",
                              "page": "@{variables('page')}"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/detections"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_Send_Adaptive_Card_For_Comment_With_Wrong_Structure_Found": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraAddTagToEntityAllDetections",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId2'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId2')]",
                "contentId": "[variables('_playbookContentId2')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion2')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Add Tag To Entity All Detections",
            "description": "This playbook enables user to add tags to all detections associated with a Vectra Entity. Tags can be fetched from comments of the associated incident else if no comments found, users can provide comments via MS Teams.",
            "prerequisites": [
              "1. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "2. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId.",
              "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraAddTagToEntityAllDetections playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Tag",
              "Entity",
              "All",
              "Detections"
            ],
            "lastUpdateTime": "2024-08-30T15:13:29.488Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId2')]",
        "contentKind": "Playbook",
        "displayName": "VectraAddTagToEntityAllDetections",
        "contentProductId": "[variables('_playbookcontentProductId2')]",
        "id": "[variables('_playbookcontentProductId2')]",
        "version": "[variables('playbookVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraAddTagToEntity Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion3')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraAddTagToEntity",
              "type": "string"
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Check_Tag_is_Not_Extracted_From_Comment": {
                      "actions": {
                        "Post_Adaptive_Card_For_Tags_For_No_Structured_Comment_Found": {
                          "type": "ApiConnectionWebhook",
                          "inputs": {
                            "body": {
                              "body": {
                                "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Vectra Add Tag To Entity\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"No comments found with proper structure, please add tag values to add explicitly.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"warning\",\n            \"separator\": true,\n            \"id\": \"info\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"label\": \"Enter tags you want to add to the Vectra Entity\",\n            \"style\": \"text\",\n            \"id\": \"tags\",\n            \"separator\": true,\n            \"isRequired\": true,\n            \"errorMessage\": \"Tags are required\",\n            \"placeholder\": \"Enter tags ex: tag1,tag2,tag3,...\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"id\": \"submit\",\n            \"style\": \"positive\"\n        }\n    ]\n}",
                                "recipient": {
                                  "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                  "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                },
                                "updateMessage": "Thanks for your response!"
                              },
                              "notificationUrl": "@{listCallbackUrl()}"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                          }
                        },
                        "Set_Entity_Tags_From_User_Input_For_No_Structured_Comment_Found": {
                          "runAfter": {
                            "Post_Adaptive_Card_For_Tags_For_No_Structured_Comment_Found": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "entity_tags",
                            "value": "@split(body('Post_Adaptive_Card_For_Tags_For_No_Structured_Comment_Found')?['data']?['tags'], ',')"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Verify_That_Comments_Exist_With_Tag": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('entity_tags'))",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts Found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Tags_Which_Will_Be_Updated_To_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Any_Error_Occurred_While_Fetching_Tags": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Fetching_Tags": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Tags_Of_An_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Tags_Of_An_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Any_Error_Occurred_While_Generating_Token_For_Tags": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('tag_not_found')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Any_Error_Occurred_While_Generating_Token_For_Tags": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Generating_Token_For_Tags": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for fetching entity tags."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero_For_Fetching_Tags": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Adding_Tag": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Adding_Tag_To_Vectra_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Add_Tag_To_Vectra_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Add_Tag_To_Vectra_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('tag_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Adding_Tag": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_That_Comments_Exist_With_Tag": {
                      "actions": {
                        "For_Each_Loop_To_Extract_Tag_Values_From_Comment": {
                          "foreach": "@body('Filter_Comments_That_Contain_Tag')",
                          "actions": {
                            "Condition_To_Verify_That_Tag_In_Curly_Braces_Is_Extracted_From_Comment": {
                              "actions": {
                                "Append_Curly_Braces_Extracted_Tag_To_Array": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "entity_tags",
                                    "value": "@outputs('Extract_Tag_Written_In_Curly_Braces')"
                                  }
                                }
                              },
                              "runAfter": {
                                "Extract_Tag_Written_In_Curly_Braces": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Verify_That_Tag_In_Square_Braces_Is_Extracted_From_Comment": {
                                    "actions": {
                                      "Append_Square_Braces_Extracted_Tag_To_Array": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "entity_tags",
                                          "value": "@outputs('Extract_Tag_Written_In_Square_Braces')"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "not": {
                                            "equals": [
                                              "@outputs('Extract_Tag_Written_In_Square_Braces')",
                                              "@null"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "or": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@outputs('Extract_Tag_Written_In_Curly_Braces')",
                                        "@null"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Extract_Tag_Written_In_Curly_Braces": {
                              "runAfter": {
                                "Extract_Tag_Written_In_Square_Braces": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": "@if(and(startsWith(variables('incident_tag'),'{'),contains(variables('incident_tag'),'}')),split(string(split(variables('incident_tag'),'{')[1]),'}')[0],null)"
                            },
                            "Extract_Tag_Written_In_Square_Braces": {
                              "runAfter": {
                                "Set_Incident_Tag": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": "@if(and(startsWith(variables('incident_tag'),'['),contains(variables('incident_tag'),']')),split(string(split(variables('incident_tag'),'[')[1]),']')[0],null)"
                            },
                            "Set_Incident_Tag": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "incident_tag",
                                "value": "@{split(string(items('For_Each_Loop_To_Extract_Tag_Values_From_Comment')?['properties']?['message']), 'tag: ')[1]}"
                              }
                            }
                          },
                          "type": "Foreach",
                          "runtimeConfiguration": {
                            "concurrency": {
                              "repetitions": 1
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Filter_Comments_That_Contain_Tag": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Post_Adaptive_Card_To_Get_Tag_Value_From_User_And_Wait_For_A_Response": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                              "body": {
                                "body": {
                                  "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Vectra Add Tag To Entity\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"Input.Text\",\n            \"label\": \"Enter tags you want to add to the Vectra Entity\",\n            \"style\": \"text\",\n            \"id\": \"tags\",\n            \"separator\": true,\n            \"isRequired\": true,\n            \"errorMessage\": \"Tags are required\",\n            \"placeholder\": \"Enter tags ex: tag1,tag2,tag3,...\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"id\": \"submit\",\n            \"style\": \"positive\"\n        }\n    ]\n}",
                                  "recipient": {
                                    "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                    "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                  },
                                  "updateMessage": "Thanks for your response!"
                                },
                                "notificationUrl": "@{listCallbackUrl()}"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['teams']['connectionId']"
                                }
                              },
                              "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                            }
                          },
                          "Set_Tags_From_User_Input": {
                            "runAfter": {
                              "Post_Adaptive_Card_To_Get_Tag_Value_From_User_And_Wait_For_A_Response": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "entity_tags",
                              "value": "@split(body('Post_Adaptive_Card_To_Get_Tag_Value_From_User_And_Wait_For_A_Response')?['data']?['tags'], ',')"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(body('Filter_Comments_That_Contain_Tag'))",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Filter_Comments_That_Contain_Tag": {
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@triggerBody()?['object']?['properties']?['Comments']",
                        "where": "@contains(item()?['properties']?['message'], 'tag: ')"
                      }
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Tags": {
                      "runAfter": {
                        "Initialize_Incident_Tag": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_tags",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Adding_Tag_To_Entity": {
                      "runAfter": {
                        "Initialize_Tag_Not_Found_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tag_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Error_False_While_Adding_Tag_To_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Incident_Tag": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_tag",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_Tag_Not_Found_False": {
                      "runAfter": {
                        "Initialize_Entity_Tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tag_not_found",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Tags_Which_Are_Available_On_Entity": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "present_tags",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Tags_Which_Will_Be_Updated_To_Entity": {
                      "runAfter": {
                        "Initialize_Tags_Which_Are_Available_On_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "new_tags",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Set_Tags_To_Be_Added_To_Entity": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Any_Error_Occurred_While_Fetching_Tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "new_tags",
                        "value": "@union(variables('present_tags'),variables('entity_tags'))"
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook Triggered From Another Incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Retry_Count_is_Zero": {
                      "actions": {
                        "Condition_To_Verify_Tag_Added_To_Vectra_Entity_Successfully": {
                          "actions": {
                            "Set_Retry_Count_As_Zero": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Add_Tag_To_Vectra_Entity": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                    "actions": {
                                      "Decrement_Retry_Count": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Access_Token": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Adding_Tag_To_Vectra_Entity": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "tag_add_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Adding_Tag_To_Vectra_Entity": {
                                      "runAfter": {
                                        "Set_Error_True_While_Adding_Tag_To_Vectra_Entity": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Add_Tag_To_Vectra_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Add_Tag_To_Vectra_Entity')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Add_Tag_To_Vectra_Entity": {
                          "runAfter": {
                            "Get_Access_Token": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "tags": "@variables('new_tags')"
                            },
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token')?['value']}",
                              "Content-Type": "application/json"
                            },
                            "method": "PATCH",
                            "queries": {
                              "type": "@variables('entity_type')"
                            },
                            "uri": "@{variables('base_url')}/api/v3.3/tagging/entity/@{int(variables('entity_id'))}"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Tags_To_Be_Added_To_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Retry_Count_is_Zero_For_Fetching_Tags": {
                      "actions": {
                        "Condition_To_Verify_Tags_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Set_Tags_To_An_Variable_If_Available": {
                              "actions": {
                                "Set_Tags_Which_Are_Available_On_Entity": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "present_tags",
                                    "value": "@body('Parse_JSON_For_Entity_Tags')?['tags']"
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Entity_Tags": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@length(body('Parse_JSON_For_Entity_Tags')?['tags'])",
                                        0
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Entity_Tags": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Tags_Of_An_Entity')",
                                "schema": {
                                  "properties": {
                                    "status": {
                                      "type": "string"
                                    },
                                    "tag_id": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Set_Retry_Count_As_Zero_For_Successfull_Tags_Fetch": {
                              "runAfter": {
                                "Condition_To_Set_Tags_To_An_Variable_If_Available": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Tags_Of_An_Entity": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Fetching_Tags": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Fetching_Tags": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Successfull_Access_Token_Generation": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra_3": [
                                        "Succeeded",
                                        "Failed",
                                        "TimedOut"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Fetching_Tags": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Fetching_Tags_Of_Entity": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Fetching_Tags_Of_Entity": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra_3')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra_3": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Data_Fetch_Error_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "tag_not_found",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Data_Fetch_Error_True": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Tags_Of_An_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Tags_Of_An_Entity')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Fetching_Token": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Tags_Of_An_Entity": {
                          "runAfter": {
                            "Get_Access_Token_For_Fetching_Token": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Fetching_Token')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "type": "@variables('entity_type')"
                            },
                            "uri": "@{variables('base_url')}/api/v3.3/tagging/entity/@{int(variables('entity_id'))}"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Check_Tag_is_Not_Extracted_From_Comment": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraAddTagToEntity",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId3'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId3')]",
                "contentId": "[variables('_playbookContentId3')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion3')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Add Tag To Entity",
            "description": "This playbook extracts tags from incident comments and adds them to the entity if comment found with proper structure, otherwise it prompts the user for tags input to add them to the Vectra Entity.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId.",
              "4. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraAddTagToEntity playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. Click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Add",
              "Tag",
              "Entity"
            ],
            "lastUpdateTime": "2024-08-30T15:13:30.716Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId3')]",
        "contentKind": "Playbook",
        "displayName": "VectraAddTagToEntity",
        "contentProductId": "[variables('_playbookcontentProductId3')]",
        "id": "[variables('_playbookcontentProductId3')]",
        "version": "[variables('playbookVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraAddTagToEntitySelectedDetections Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion4')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraAddTagToEntitySelectedDetections",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Tags_Which_Will_Be_Updated_To_Detections": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Adding_Tags_To_Detections_": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Adding_Tag_To_Detection": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Error occurred while adding tag to any Detection."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "For_Each_Detections": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('tag_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Detections_Data": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Fetching_Detections_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Detections_Data_For_Associated_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Detections_Data_For_Associated_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero_For_Detections_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_While_Adding_Tag": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Token_While_Adding_Tag_To_Detections": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Error occurred while generating access token while adding tag to detections."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Adding_Tags_To_Detections_": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_No_Detections_Found_For_Entity": {
                      "actions": {
                        "Post_Message_in_Chat_For_No_Detections_Found": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "messageBody": "<p><strong>No Detections Found</strong> for entity ID: @{variables('entity_id')} and type: @{variables('entity_type')}.</p>",
                              "recipient": {
                                "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                "groupId": "[[trim(parameters('TeamsGroupId'))]"
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                          }
                        },
                        "Terminate_Due_To_No_Detections_Found_For_Entity": {
                          "runAfter": {
                            "Post_Message_in_Chat_For_No_Detections_Found": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Detections_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('detections'))",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_Each_Detections": {
                      "foreach": "@variables('detections')",
                      "actions": {
                        "Condition_To_Skip_Tag_Add_If_Any_Error_Occurred_While_Fetching_Tags": {
                          "actions": {
                            "Set_Tag_Add_Error_True_For_Error_While_Fetching_Tags": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "tag_add_error",
                                "value": "@true"
                              }
                            }
                          },
                          "runAfter": {
                            "Until_Retry_Count_is_Zero_For_Fetching_Tags_For_Each_Detection": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Set_Retry_Count_For_Each_Detection": {
                                "runAfter": {
                                  "Set_Tags_Which_Will_Be_Updated_To_Detection": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "retry_count",
                                  "value": 2
                                }
                              },
                              "Set_Tags_Which_Will_Be_Updated_To_Detection": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "new_tags",
                                  "value": "@union(variables('present_tags'), variables('tags'))"
                                }
                              },
                              "Until_Retry_Count_is_Zero_For_Each_Detection": {
                                "actions": {
                                  "Condition_To_Verify_Tags_Added_To_Detection_Successfully": {
                                    "actions": {
                                      "Set_Retry_Count_As_Zero_For_Each_Detection": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "HTTP_Request_To_Add_Tags_To_Detection": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Condition_To_Generate_New_Access_Token_For_Each_Detection": {
                                          "actions": {
                                            "Condition_To_Verify_Access_Token_Generated_Successfully_For_Each_Detection": {
                                              "actions": {
                                                "Decrement_Retry_Count_For_Each_Detection": {
                                                  "type": "DecrementVariable",
                                                  "inputs": {
                                                    "name": "retry_count",
                                                    "value": 1
                                                  }
                                                }
                                              },
                                              "runAfter": {
                                                "GenerateAccessTokenVectra_2": [
                                                  "Succeeded",
                                                  "TimedOut",
                                                  "Failed"
                                                ]
                                              },
                                              "else": {
                                                "actions": {
                                                  "Decrement_Retry_Count_For_Error_While_Generating_Access_Token_For_Each_Detection": {
                                                    "runAfter": {
                                                      "Set_Error_True_While_Generating_Access_Token_For_Each_Detection": [
                                                        "Succeeded"
                                                      ]
                                                    },
                                                    "type": "DecrementVariable",
                                                    "inputs": {
                                                      "name": "retry_count",
                                                      "value": 1
                                                    }
                                                  },
                                                  "Set_Error_True_While_Generating_Access_Token_For_Each_Detection": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "access_token_generate_error",
                                                      "value": "@false"
                                                    }
                                                  }
                                                }
                                              },
                                              "expression": {
                                                "and": [
                                                  {
                                                    "equals": [
                                                      "@body('GenerateAccessTokenVectra_2')?['status']",
                                                      "success"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "type": "If"
                                            },
                                            "GenerateAccessTokenVectra_2": {
                                              "type": "Workflow",
                                              "inputs": {
                                                "host": {
                                                  "triggerName": "manual",
                                                  "workflow": {
                                                    "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "else": {
                                            "actions": {
                                              "Set_Error_True_While_Adding_Tag_To_Detection": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "tag_add_error",
                                                  "value": "@true"
                                                }
                                              },
                                              "Set_Retry_Count_As_Zero_While_Adding_Tag_To_Detection": {
                                                "runAfter": {
                                                  "Set_Error_True_While_Adding_Tag_To_Detection": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "retry_count",
                                                  "value": 0
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@outputs('HTTP_Request_To_Add_Tags_To_Detection')['statusCode']",
                                                  401
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Add_Tags_To_Detection')['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Get_Access_Token_For_Each_Detection": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['keyvault']['connectionId']"
                                        }
                                      },
                                      "method": "get",
                                      "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                    },
                                    "runtimeConfiguration": {
                                      "secureData": {
                                        "properties": [
                                          "inputs",
                                          "outputs"
                                        ]
                                      }
                                    }
                                  },
                                  "HTTP_Request_To_Add_Tags_To_Detection": {
                                    "runAfter": {
                                      "Get_Access_Token_For_Each_Detection": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                      "body": {
                                        "tags": "@variables('new_tags')"
                                      },
                                      "headers": {
                                        "Authorization": "Bearer @{body('Get_Access_Token_For_Each_Detection')?['value']}",
                                        "Content-Type": "application/json"
                                      },
                                      "method": "PATCH",
                                      "uri": "@{variables('base_url')}/api/@{variables('api_version')}/tagging/detection/@{int(items('For_Each_Detections'))}"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "Set_Retry_Count_For_Each_Detection": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": "@equals(variables('retry_count'), 0)",
                                "limit": {
                                  "count": 60,
                                  "timeout": "PT1H"
                                },
                                "type": "Until"
                              }
                            }
                          },
                          "expression": {
                            "or": [
                              {
                                "equals": [
                                  "@variables('fetch_error')",
                                  "@true"
                                ]
                              },
                              {
                                "equals": [
                                  "@variables('access_token_generate_error')",
                                  "@true"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Set_Retry_Count_For_Fetching_Tags": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "retry_count",
                            "value": 0
                          }
                        },
                        "Until_Retry_Count_is_Zero_For_Fetching_Tags_For_Each_Detection": {
                          "actions": {
                            "Condition_To_Verify_Tags_Fetched_Successfully": {
                              "actions": {
                                "Condition_To_Set_Available_Detection_Tags_If_Any_Available": {
                                  "actions": {
                                    "Set_Available_Tags_For_Detection": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "present_tags",
                                        "value": "@body('Parse_JSON_For_Detection_Tags')?['tags']"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Parse_JSON_For_Detection_Tags": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_Available_Tags_For_No_Tags_Found_In_Detection": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "present_tags",
                                          "value": "[variables('TemplateEmptyArray')]"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@length(body('Parse_JSON_For_Detection_Tags')?['tags'])",
                                            0
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Parse_JSON_For_Detection_Tags": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@body('HTTP_Request_To_Fetch_Detection_Tags')",
                                    "schema": {
                                      "properties": {
                                        "status": {
                                          "type": "string"
                                        },
                                        "tag_id": {
                                          "type": "string"
                                        },
                                        "tags": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Successfull_Data_Fetch": {
                                  "runAfter": {
                                    "Condition_To_Set_Available_Detection_Tags_If_Any_Available": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Fetch_Detection_Tags": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Fetching_Tags": {
                                    "actions": {
                                      "Condition_To_Verify_Access_Token_Generated_Successfully_For_Fetching_Tags": {
                                        "actions": {
                                          "Decrement_Retry_Count_For_Generating_Token_Successfully": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra_3": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_In_Generating_Access_Token_For_Fetching_Tags": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Token_For_Fetching_Tags": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Token_For_Fetching_Tags": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra_3')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra_3": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Tags": {
                                          "runAfter": {
                                            "Set_Tags_Fetch_Error_True": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 0
                                          }
                                        },
                                        "Set_Tags_Fetch_Error_True": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "fetch_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Fetch_Detection_Tags')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Fetch_Detection_Tags')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Access_Token_For_Fetching_Tags": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs",
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Fetch_Detection_Tags": {
                              "runAfter": {
                                "Get_Access_Token_For_Fetching_Tags": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Access_Token_For_Fetching_Tags')?['value']}"
                                },
                                "method": "GET",
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/tagging/detection/@{items('For_Each_Detections')}"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_Retry_Count_For_Fetching_Tags": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('retry_count'), 0)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Set_Tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Detection_ID_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Available_Tags_For_Detection": {
                      "runAfter": {
                        "Initialize_Page_Number": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "present_tags",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Break_Loop": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "break_loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Data_Fetch_Error_False": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Detection_ID_Array": {
                      "runAfter": {
                        "Initialize_Detection_Object": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "detections",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Detection_Object": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "detection",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Adding_Tag_To_Entity": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tag_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Error_False_While_Adding_Tag_To_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Page_Number": {
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "page",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_Tags": {
                      "runAfter": {
                        "Initialize_Data_Fetch_Error_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tags",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Tags_Which_Will_Be_Updated_To_Detections": {
                      "runAfter": {
                        "Initialize_Available_Tags_For_Detection": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "new_tags",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Post_Detections_List_And_Tags_Input_And_Wait_For_Response": {
                      "runAfter": {
                        "Condition_To_Terminate_If_No_Detections_Found_For_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"style\": \"positive\",\n            \"id\": \"submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Vectra Add Tag To Selected Detections\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n{\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"id\": \"detection-choice\",\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{variables('detections')},\n            \"isRequired\": true,\n            \"label\": \"Please select detections to add tag values in it.\",\n            \"isMultiSelect\": true,\n            \"separator\": true,\n            \"errorMessage\": \"Please select atleast one detection.\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Please provide tag values to add into above selected detections.\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"id\": \"info-tag\"\n        },\n        {\n            \"id\": \"tag-text\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter Tags ex: tag1,tag2,tag3,...\"\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                            "recipient": {
                              "channelId": "[[trim(parameters('TeamsChannelId'))]",
                              "groupId": "[[trim(parameters('TeamsGroupId'))]"
                            },
                            "updateMessage": "Thanks for your response!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Set_Detection_ID_Array_From_User_Input": {
                      "runAfter": {
                        "Post_Detections_List_And_Tags_Input_And_Wait_For_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "detections",
                        "value": "@split(body('Post_Detections_List_And_Tags_Input_And_Wait_For_Response')?['data']?['detection-choice'], ',')"
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Set_Tags": {
                      "runAfter": {
                        "Set_Detection_ID_Array_From_User_Input": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "tags",
                        "value": "@split(body('Post_Detections_List_And_Tags_Input_And_Wait_For_Response')?['data']?['tag-text'], ',')"
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook Triggered from Wrong Incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Retry_Count_is_Zero_For_Detections_Data": {
                      "actions": {
                        "Condition_To_Verify_Detections_Associated_With_Entity_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_If_Count_is_Zero": {
                              "actions": {
                                "Set_Break_Loop_True_For_Count_is_Zero": {
                                  "runAfter": {
                                    "Set_Retry_Count_As_Zero": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "break_loop",
                                    "value": "@true"
                                  }
                                },
                                "Set_Retry_Count_As_Zero": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Detections_Data": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Verify_If_Next_is_Null": {
                                    "actions": {
                                      "Set_Break_Loop_True_For_Next_is_Null": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "break_loop",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_Retry_Count_As_Zero_For_Next_is_Null": {
                                        "runAfter": {
                                          "Set_Break_Loop_True_For_Next_is_Null": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "For_Each_Detection_in_Detections_Data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Increment_Page_Number": {
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "page",
                                            "value": 1
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Detections_Data')?['next']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "For_Each_Detection_in_Detections_Data": {
                                    "foreach": "@body('Parse_JSON_For_Detections_Data')?['results']",
                                    "actions": {
                                      "Append_Detection_To_Detections_Array": {
                                        "runAfter": {
                                          "Set_Detection_Object": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "detections",
                                          "value": "@variables('detection')"
                                        }
                                      },
                                      "Set_Detection_Object": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "detection",
                                          "value": {
                                            "title": "@{items('For_Each_Detection_in_Detections_Data')?['id']} - @{items('For_Each_Detection_in_Detections_Data')?['detection']} - @{items('For_Each_Detection_in_Detections_Data')?['detection_category']}",
                                            "value": "@items('For_Each_Detection_in_Detections_Data')?['id']"
                                          }
                                        }
                                      }
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_JSON_For_Detections_Data')?['count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Detections_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Detections_Data_For_Associated_Entity')",
                                "schema": {
                                  "properties": {
                                    "count": {
                                      "type": "integer"
                                    },
                                    "next": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "previous": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "results": {
                                      "items": {
                                        "properties": {
                                          "assigned_date": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "assigned_to": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "c_score": {
                                            "type": "integer"
                                          },
                                          "category": {
                                            "type": "string"
                                          },
                                          "certainty": {
                                            "type": "integer"
                                          },
                                          "created_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "custom_detection": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "data_source": {
                                            "type": "object"
                                          },
                                          "description": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection": {
                                            "type": "string"
                                          },
                                          "detection_category": {
                                            "type": "string"
                                          },
                                          "detection_type": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "filtered_by_ai": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_rule": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_user": {
                                            "type": "boolean"
                                          },
                                          "first_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "grouped_details": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "groups": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "is_custom_model": {
                                            "type": "boolean"
                                          },
                                          "is_marked_custom": {
                                            "type": "boolean"
                                          },
                                          "is_targeting_key_asset": {
                                            "type": "boolean"
                                          },
                                          "is_triaged": {
                                            "type": "boolean"
                                          },
                                          "last_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "notes": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "sensor": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "sensor_name": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "src_account": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_host": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_ip": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "state": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "summary": {
                                            "type": "object"
                                          },
                                          "t_score": {
                                            "type": "integer"
                                          },
                                          "tags": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "targets_key_asset": {
                                            "type": "boolean"
                                          },
                                          "threat": {
                                            "type": "integer"
                                          },
                                          "triage_rule_id": {
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "summary",
                                          "data_source",
                                          "sensor",
                                          "detection",
                                          "filtered_by_ai",
                                          "filtered_by_user",
                                          "is_custom_model",
                                          "custom_detection",
                                          "is_targeting_key_asset",
                                          "c_score",
                                          "note_modified_timestamp",
                                          "note",
                                          "description",
                                          "note_modified_by",
                                          "triage_rule_id",
                                          "filtered_by_rule",
                                          "assigned_date",
                                          "category",
                                          "src_account",
                                          "src_ip",
                                          "targets_key_asset",
                                          "is_marked_custom",
                                          "notes",
                                          "groups",
                                          "tags",
                                          "sensor_name",
                                          "last_timestamp",
                                          "detection_url",
                                          "detection_category",
                                          "assigned_to",
                                          "t_score",
                                          "state",
                                          "detection_type",
                                          "first_timestamp",
                                          "id",
                                          "created_timestamp",
                                          "certainty",
                                          "url",
                                          "threat",
                                          "is_triaged",
                                          "src_host",
                                          "type",
                                          "grouped_details"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Detections_Data_For_Associated_Entity": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                    "actions": {
                                      "Decrement_Retry_Count": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Access_Token": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Break_Loop_True_For_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Retry_Count_As_Zero_For_Data_Fetch_Error": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Data_Fetch_Error_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Data_Fetch_Error_True": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Detections_Data_For_Associated_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Detections_Data_For_Associated_Entity')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Detections_Data_For_Associated_Entity": {
                          "runAfter": {
                            "Get_Access_Token": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "entity_id": "@{int(variables('entity_id'))}",
                              "page": "@{variables('page')}"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/detections"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "VectraAddTagToEntitySelectedDetections",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId4'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId4')]",
                "contentId": "[variables('_playbookContentId4')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion4')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Add Tag To Entity Selected Detections",
            "description": "This playbook enables users to add tags to selected detections associated with an entity. Users can provide inputs of detections selection and tags value via Microsoft Teams.",
            "prerequisites": [
              "1. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "2. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId.",
              "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraAddTagToEntitySelectedDetections playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Tag",
              "Entity",
              "Selected",
              "Detections"
            ],
            "lastUpdateTime": "2024-08-30T15:13:32.266Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId4')]",
        "contentKind": "Playbook",
        "displayName": "VectraAddTagToEntitySelectedDetections",
        "contentProductId": "[variables('_playbookcontentProductId4')]",
        "id": "[variables('_playbookcontentProductId4')]",
        "version": "[variables('playbookVersion4')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraDynamicAssignMemberToGroup Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion5')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraDynamicAssignMemberToGroup",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http"
                    }
                  },
                  "actions": {
                    "Condition_To_Terminate_Execution_If_Error_Occurred_While_Fetching_Groups_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Fetching_Groups": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Available_Groups')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Available_Groups')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Groups_Found": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Groups_Found": {
                      "actions": {
                        "Post_Message_For_No_Groups_Found": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "messageBody": "<p><span style=\"font-size: 12px\"><strong>No Groups found</strong></span> for Group Type: @{variables('group_type')} and Group Description: @{variables('group_description')}</p>",
                              "recipient": {
                                "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                "groupId": "[[trim(parameters('TeamsGroupId'))]"
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                          }
                        },
                        "Terminate_Due_To_No_Groups_Found": {
                          "runAfter": {
                            "Post_Message_For_No_Groups_Found": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_For_Groups_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('group_count')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Assigning_Members_To_Group": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Assigning_Members_To_Group": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Assign_Members_To_Group')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Assign_Members_To_Group')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero_For_Assign_Members_To_Group": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Groups_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Generating_Token_For_Groups_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token while fetching groups data."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_Error_Occurred_While_Fetching_Groups_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_For_Assigning_Members": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Generating_Token_For_Assign_Members_To_Group": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for assign members to group."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Assigning_Members_To_Group": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Break_Loop": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "break_loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Data_Fetch_Error_False": {
                      "runAfter": {
                        "Initialize_Members": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Data_Fetch_Error_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Group_Count": {
                      "runAfter": {
                        "Initialize_User_Selected_Group": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "group_count",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Group_Description": {
                      "runAfter": {
                        "Initialize_Group_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "group_description",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Group_List": {
                      "runAfter": {
                        "Initialize_Group_Object": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "group_list",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Group_Object": {
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "group",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Group_Type": {
                      "runAfter": {
                        "Initialize_Group_List": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "group_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Members": {
                      "runAfter": {
                        "Initialize_Group_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "members",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Page_Number": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "page",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Page_Number": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_User_Selected_Group": {
                      "runAfter": {
                        "Initialize_Group_Description": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "selected_group",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Post_Adaptive_Card_For_Group_Type_And_Group_Description_Input": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"title\": \"Submit Answer\",\n            \"type\": \"Action.Submit\",\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\",\n            \"text\": \"Dynamic Assign Members To Group in Vectra\"\n        },\n        {\n            \"id\": \"group-type\",\n            \"type\": \"Input.Text\",\n            \"separator\": true,\n            \"placeholder\": \"Enter Group Type\",\n            \"isRequired\": true,\n            \"label\": \"Please provide group type to fetch groups data.(case-sensitive)(e.g. account, ip, domain, host)\",\n            \"errorMessage\": \"Please enter group type.\"\n        },\n        {\n            \"id\": \"group-description\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter Group Description\",\n            \"isRequired\": false,\n            \"label\": \"Please provide group description to filter groups data.(case-insensitive)\",\n            \"errorMessage\": \"Please enter group description.\"\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                            "recipient": {
                              "channelId": "[[trim(parameters('TeamsChannelId'))]",
                              "groupId": "[[trim(parameters('TeamsGroupId'))]"
                            },
                            "updateMessage": "Thanks for your response!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Post_Adaptive_Card_For_Groups_List_And_Members_Input": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Groups_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"title\": \"Submit Answer\",\n            \"type\": \"Action.Submit\",\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\",\n            \"text\": \"Assign Dynamic Members To Group in Vectra\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Group Type =  @{variables('group_type')}\\n\\nGroup Description= @{variables('group_description')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"id\": \"group-choice\",\n            \"type\": \"Input.ChoiceSet\",\n            \"choices\": @{variables('group_list')},\n            \"isRequired\": true,\n            \"separator\": true,\n            \"label\": \"Please select one group to add members to it\",\n            \"errorMessage\": \"Please select one group first.\"\n        },\n        {\n            \"id\": \"member-input\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter members eg. member1,member2,member3,...\",\n            \"isRequired\": true,\n            \"label\": \"Please provide members to add into group\",\n            \"errorMessage\": \"Please enter atlease one member to add into group.\"\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                            "recipient": {
                              "channelId": "[[trim(parameters('TeamsChannelId'))]",
                              "groupId": "[[trim(parameters('TeamsGroupId'))]"
                            },
                            "updateMessage": "Thanks for your response!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Set_Data_Fetch_Error_False_For_Assign_Members": {
                      "runAfter": {
                        "Set_Retry_Count_For_Assign_Members_Request": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "fetch_error",
                        "value": "@false"
                      }
                    },
                    "Set_Group_Description_From_User_Input": {
                      "runAfter": {
                        "Set_Group_Type_From_User_Input": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "group_description",
                        "value": "@{body('Post_Adaptive_Card_For_Group_Type_And_Group_Description_Input')?['data']?['group-description']}"
                      }
                    },
                    "Set_Group_Type_From_User_Input": {
                      "runAfter": {
                        "Post_Adaptive_Card_For_Group_Type_And_Group_Description_Input": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "group_type",
                        "value": "@{body('Post_Adaptive_Card_For_Group_Type_And_Group_Description_Input')?['data']?['group-type']}"
                      }
                    },
                    "Set_Members_From_User_Input": {
                      "runAfter": {
                        "Set_User_Selected_Group": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "members",
                        "value": "@split(body('Post_Adaptive_Card_For_Groups_List_And_Members_Input')?['data']?['member-input'], ',')"
                      }
                    },
                    "Set_Retry_Count_For_Assign_Members_Request": {
                      "runAfter": {
                        "Set_Members_From_User_Input": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Set_User_Selected_Group": {
                      "runAfter": {
                        "Post_Adaptive_Card_For_Groups_List_And_Members_Input": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "selected_group",
                        "value": "@int(body('Post_Adaptive_Card_For_Groups_List_And_Members_Input')?['data']?['group-choice'])"
                      }
                    },
                    "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_For_Groups_Data": {
                      "actions": {
                        "Condition_To_Verify_Groups_Details_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_Count_Zero_For_Groups_Data": {
                              "actions": {
                                "Set_Break_Loop_True_For_Count_Zero_For_Groups_Data": {
                                  "runAfter": {
                                    "Set_Fetched_Groups_Count_As_Zero": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "break_loop",
                                    "value": "@true"
                                  }
                                },
                                "Set_Fetched_Groups_Count_As_Zero": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "group_count",
                                    "value": 0
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_No_Groups_Found": {
                                  "runAfter": {
                                    "Set_Break_Loop_True_For_Count_Zero_For_Groups_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Groups_Data": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Check_Next_is_Null_For_Groups_Data": {
                                    "actions": {
                                      "Set_Break_Loop_True_For_Next_is_Null_For_Groups_Data": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "break_loop",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_Retry_Count_As_Zero_For_Next_is_Null": {
                                        "runAfter": {
                                          "Set_Break_Loop_True_For_Next_is_Null_For_Groups_Data": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "For_Each_Group": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Increment_Page_Number_For_Groups_Data": {
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "page",
                                            "value": 1
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Groups_Data')?['next']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "For_Each_Group": {
                                    "foreach": "@body('Parse_JSON_For_Groups_Data')?['results']",
                                    "actions": {
                                      "Append_Group_To_Group_List": {
                                        "runAfter": {
                                          "Set_Group_Object": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "group_list",
                                          "value": "@variables('group')"
                                        }
                                      },
                                      "Set_Group_Object": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "group",
                                          "value": {
                                            "title": "@{items('For_Each_Group')?['id']}-@{items('For_Each_Group')?['type']}-@{items('For_Each_Group')?['name']}-@{items('For_Each_Group')?['description']}",
                                            "value": "@items('For_Each_Group')?['id']"
                                          }
                                        }
                                      }
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_JSON_For_Groups_Data')?['count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Groups_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Available_Groups')",
                                "schema": {
                                  "properties": {
                                    "count": {
                                      "type": "integer"
                                    },
                                    "next": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "previous": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "results": {
                                      "items": {
                                        "properties": {
                                          "description": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "members": {
                                            "type": [
                                              "array",
                                              "object"
                                            ]
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "rules": {
                                            "type": "array"
                                          },
                                          "type": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "name",
                                          "description",
                                          "last_modified",
                                          "last_modified_by",
                                          "type",
                                          "members",
                                          "rules",
                                          "importance"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Available_Groups": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Groups_Data": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Groups_Data": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Groups_Data": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Groups_Data": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Groups_Data": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Groups_Data": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Break_Loop_True_For_Groups_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Groups_Data_Fetch_Error_True": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Groups_Data_Fetch_Error_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Groups_Data": {
                                      "runAfter": {
                                        "Set_Break_Loop_True_For_Groups_Data_Fetch_Error": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Available_Groups')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Available_Groups')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Groups_Data": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Available_Groups": {
                          "runAfter": {
                            "Get_Access_Token_For_Groups_Data": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Groups_Data')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "description": "@variables('group_description')",
                              "page": "@{variables('page')}",
                              "type": "@variables('group_type')"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/groups"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Group_Description_From_User_Input": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Retry_Count_is_Zero_For_Assign_Members_To_Group": {
                      "actions": {
                        "Condition_To_Verify_Members_Assigned_To_Group_Successfully": {
                          "actions": {
                            "Set_Retry_Count_As_Zero_For_Assign_Members_To_Group": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Assign_Members_To_Group": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Assign_Members": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Assign_Members": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Assign_Members": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra_2": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Assign_Members": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Assig_Members_To_Group": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Assig_Members_To_Group": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra_2')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra_2": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Assigning_Members_To_Group": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Assigning_Members_To_Group": {
                                      "runAfter": {
                                        "Set_Error_True_While_Assigning_Members_To_Group": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Assign_Members_To_Group')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Assign_Members_To_Group')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Assign_Members_To_Group": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Assign_Members_To_Group": {
                          "runAfter": {
                            "Get_Access_Token_For_Assign_Members_To_Group": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "members": "@variables('members')"
                            },
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Assign_Members_To_Group')?['value']}",
                              "Content-Type": "application/json"
                            },
                            "method": "PATCH",
                            "queries": {
                              "membership_action": "append"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/groups/@{variables('selected_group')}"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Data_Fetch_Error_False_For_Assign_Members": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "keyvault_3": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraDynamicAssignMemberToGroup",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId5'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId5')]",
                "contentId": "[variables('_playbookContentId5')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion5')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Dynamic Assign Member To Group",
            "description": "This playbook allows users to filter the group list by providing a group type and a description. From the filtered list, users can choose a group and provide member details to add members to the group dynamically.",
            "prerequisites": [
              "1. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "2. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId. ",
              "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraAssignDynamicMemberToGroup playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Assign",
              "Dynamic",
              "Member",
              "Group"
            ],
            "lastUpdateTime": "2024-08-30T15:13:33.282Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId5')]",
        "contentKind": "Playbook",
        "displayName": "VectraDynamicAssignMemberToGroup",
        "contentProductId": "[variables('_playbookcontentProductId5')]",
        "id": "[variables('_playbookcontentProductId5')]",
        "version": "[variables('playbookVersion5')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName6')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraAssignDynamicUserToEntity Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion6')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraAssignDynamicUserToEntity",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Decide_Assign_Entity_Type": {
                      "actions": {
                        "Set_Assign_Entity_Type_For_Host": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "assign_entity_type",
                            "value": "assign_host_id"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_Assign_Entity_Type_For_Account": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "assign_entity_type",
                              "value": "assign_account_id"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('entity_type')",
                              "host"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Decide_Assign_Or_Reassign_User_To_Vectra_Entity": {
                      "actions": {
                        "Until_Retry_Count_is_Zero_For_Assigning_User_To_Vectra_Entity": {
                          "actions": {
                            "Condition_To_Verify_User_Assigned_To_Vectra_Entity_Successfully": {
                              "actions": {
                                "Set_Retry_Count_As_Zero_For_Assigning_User": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Assign_User_To_Vectra_Entity": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Assigning_User_To_Vectra_Entity": {
                                    "actions": {
                                      "Condition_To_Verify_Access_Token_Generated_Successfully_For_Assigning_User": {
                                        "actions": {
                                          "Decrement_Retry_Count_For_Assigning_User": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra_2": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Assigning_User": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Access_Token_For_Assigning_User": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Access_Token_For_Assigning_User": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra_2')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra_2": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Error_True_While_Assigning_User_To_Vectra_Entity": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "user_add_error",
                                            "value": "@true"
                                          }
                                        },
                                        "Set_Retry_Count_As_Zero_For_Assigning_User_To_Vectra_Entity": {
                                          "runAfter": {
                                            "Set_Error_True_While_Assigning_User_To_Vectra_Entity": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Assign_User_To_Vectra_Entity')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Assign_User_To_Vectra_Entity')['statusCode']",
                                      201
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Access_Token_For_Assign_User_To_Vectra_Entity": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs",
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Assign_User_To_Vectra_Entity": {
                              "runAfter": {
                                "Get_Access_Token_For_Assign_User_To_Vectra_Entity": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "@variables('assign_entity_type')": "@int(variables('entity_id'))",
                                  "assign_to_user_id": "@variables('user_id')"
                                },
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Access_Token_For_Assign_User_To_Vectra_Entity')?['value']}",
                                  "Content-Type": "application/json"
                                },
                                "method": "POST",
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/assignments"
                              }
                            }
                          },
                          "expression": "@equals(variables('retry_count'), 0)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Set_Retry_Count_For_Assigning_Or_Reassigning_User": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Until_Retry_Count_is_Zero_For_Reassigning_User_To_Vectra_Entity": {
                            "actions": {
                              "Condition_To_Verify_User_Reassigned_To_Vectra_Entity_Successfully": {
                                "actions": {
                                  "Set_Retry_Count_As_Zero_For_Reassigning_User": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "retry_count",
                                      "value": 0
                                    }
                                  }
                                },
                                "runAfter": {
                                  "HTTP_Request_To_Reassign_User_To_Vectra_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Condition_To_Generate_New_Access_Token_For_Reassigning_User_To_Vectra_Entity": {
                                      "actions": {
                                        "Condition_To_Verify_Access_Token_Generated_Successfully_For_Reassigning_User": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Reassigning_User": {
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "GenerateAccessTokenVectra_5": [
                                              "Succeeded",
                                              "TimedOut",
                                              "Failed"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Reassigning_User": {
                                                "runAfter": {
                                                  "Set_Error_True_While_Generating_Access_Token_For_Reassigning_User": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "DecrementVariable",
                                                "inputs": {
                                                  "name": "retry_count",
                                                  "value": 1
                                                }
                                              },
                                              "Set_Error_True_While_Generating_Access_Token_For_Reassigning_User": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "access_token_generate_error",
                                                  "value": "@true"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@body('GenerateAccessTokenVectra_5')?['status']",
                                                  "success"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "GenerateAccessTokenVectra_5": {
                                          "type": "Workflow",
                                          "inputs": {
                                            "host": {
                                              "triggerName": "manual",
                                              "workflow": {
                                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_Error_True_While_Reassigning_User_To_Vectra_Entity": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "user_add_error",
                                              "value": "@true"
                                            }
                                          },
                                          "Set_Retry_Count_As_Zero_For_Error_While_Reassigning_User_To_Vectra_Entity": {
                                            "runAfter": {
                                              "Set_Error_True_While_Reassigning_User_To_Vectra_Entity": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 0
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@outputs('HTTP_Request_To_Reassign_User_To_Vectra_Entity')['statusCode']",
                                              401
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Reassign_User_To_Vectra_Entity')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Get_Access_Token_For_Reassigning_User_To_Vectra_Entity": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                    }
                                  },
                                  "method": "get",
                                  "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                },
                                "runtimeConfiguration": {
                                  "secureData": {
                                    "properties": [
                                      "inputs",
                                      "outputs"
                                    ]
                                  }
                                }
                              },
                              "HTTP_Request_To_Reassign_User_To_Vectra_Entity": {
                                "runAfter": {
                                  "Get_Access_Token_For_Reassigning_User_To_Vectra_Entity": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "body": {
                                    "@variables('assign_entity_type')": "@int(variables('entity_id'))",
                                    "assign_to_user_id": "@variables('user_id')"
                                  },
                                  "headers": {
                                    "Authorization": "Bearer @{body('Get_Access_Token_For_Reassigning_User_To_Vectra_Entity')?['value']}",
                                    "Content-Type": "application/json"
                                  },
                                  "method": "PUT",
                                  "uri": "@{variables('base_url')}/api/@{variables('api_version')}/assignments/@{variables('assignment_id')}"
                                }
                              }
                            },
                            "expression": "@equals(variables('retry_count'), 0)",
                            "limit": {
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('assignment_id')",
                              -1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Fetch_Associated_Entity_Data_Based_On_Entity_Type": {
                      "actions": {
                        "Until_Retry_Count_is_Zero_For_Fetching_Associated_Host_Data": {
                          "actions": {
                            "Condition_To_Verify_Host_Data_Fetched_Successfully": {
                              "actions": {
                                "Condition_To_Verify_If_The_Host_Entity_Does_Not_Have_An_Open_Assignment": {
                                  "runAfter": {
                                    "Parse_JSON_For_Associated_Host_Entity_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_Assignment_ID_For_Host_Entity": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "assignment_id",
                                          "value": "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']?['id']"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']",
                                          "@null"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Parse_JSON_For_Associated_Host_Entity_Data": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@body('HTTP_Request_To_Fetch_Associated_Host_Entity_Data')",
                                    "schema": {
                                      "properties": {
                                        "account_access_history": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "active_traffic": {
                                          "type": "boolean"
                                        },
                                        "assigned_date": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "assigned_to": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "assignment": {
                                          "properties": {
                                            "account_id": {
                                              "type": [
                                                "integer",
                                                "null"
                                              ]
                                            },
                                            "assigned_by": {
                                              "properties": {
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "username": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "assigned_to": {
                                              "properties": {
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "username": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": [
                                                "object",
                                                "null"
                                              ]
                                            },
                                            "date_assigned": {
                                              "type": "string"
                                            },
                                            "date_resolved": {
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            },
                                            "events": {
                                              "items": {
                                                "properties": {
                                                  "actor": {
                                                    "type": "integer"
                                                  },
                                                  "assignment_id": {
                                                    "type": "integer"
                                                  },
                                                  "context": {
                                                    "properties": {
                                                      "entity_c_score": {
                                                        "type": "integer"
                                                      },
                                                      "entity_t_score": {
                                                        "type": "integer"
                                                      },
                                                      "from": {
                                                        "type": "integer"
                                                      },
                                                      "to": {
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "type": [
                                                      "object",
                                                      "null"
                                                    ]
                                                  },
                                                  "datetime": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  },
                                                  "event_type": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "assignment_id",
                                                  "actor",
                                                  "event_type",
                                                  "datetime",
                                                  "context"
                                                ],
                                                "type": "object"
                                              },
                                              "type": [
                                                "array",
                                                "null"
                                              ]
                                            },
                                            "host_id": {
                                              "type": [
                                                "integer"
                                              ]
                                            },
                                            "id": {
                                              "type": "integer"
                                            },
                                            "outcome": {
                                              "type": "null"
                                            },
                                            "resolved_by": {
                                              "type": "null"
                                            },
                                            "triaged_detections": {
                                              "type": "object"
                                            }
                                          },
                                          "type": [
                                            "object",
                                            "null"
                                          ]
                                        },
                                        "c_score": {
                                          "type": "integer"
                                        },
                                        "certainty": {
                                          "type": "integer"
                                        },
                                        "detection_profile": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "detection_set": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "detection_summaries": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "groups": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "has_active_traffic": {
                                          "type": "boolean"
                                        },
                                        "has_custom_model": {
                                          "type": "boolean"
                                        },
                                        "has_shell_knocker_learnings": {
                                          "type": "boolean"
                                        },
                                        "host_luid": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "host_session_luids": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "ip": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "is_key_asset": {
                                          "type": "boolean"
                                        },
                                        "is_targeting_key_asset": {
                                          "type": "boolean"
                                        },
                                        "key_asset": {
                                          "type": "boolean"
                                        },
                                        "last_detection_timestamp": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "last_modified": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "last_seen": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "last_source": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "name": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note_modified_by": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note_modified_timestamp": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "notes": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "past_assignments": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "previous_ips": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "privilege_category": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "privilege_level": {
                                          "type": [
                                            "integer",
                                            "null"
                                          ]
                                        },
                                        "sensor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "sensor_name": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "service_access_history": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "severity": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "state": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "suspicious_admin_learnings": {
                                          "type": "object"
                                        },
                                        "t_score": {
                                          "type": "integer"
                                        },
                                        "tags": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "targets_key_asset": {
                                          "type": "boolean"
                                        },
                                        "threat": {
                                          "type": "integer"
                                        },
                                        "url": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Host_Entity": {
                                  "runAfter": {
                                    "Condition_To_Verify_If_The_Host_Entity_Does_Not_Have_An_Open_Assignment": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Fetch_Associated_Host_Entity_Data": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Associated_Host_Entity": {
                                    "actions": {
                                      "Condition_To_Verify_Access_Token_Generated_Successfully_For_Host_Entity": {
                                        "actions": {
                                          "Decrement_Retry_Count_For_Host_Entity": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra_3": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Host_Entity": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra_3')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra_3": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Host_Entity_Data_Fetch_Error_True": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "fetch_error",
                                            "value": "@true"
                                          }
                                        },
                                        "Set_Retry_Count_As_Zero_For_Host_Entity_Data_Fetch_Error": {
                                          "runAfter": {
                                            "Set_Host_Entity_Data_Fetch_Error_True": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Fetch_Associated_Host_Entity_Data')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Fetch_Associated_Host_Entity_Data')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Access_Token_For_Host_Entity": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs",
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Fetch_Associated_Host_Entity_Data": {
                              "runAfter": {
                                "Get_Access_Token_For_Host_Entity": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Access_Token_For_Host_Entity')?['value']}"
                                },
                                "method": "GET",
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/hosts/@{int(variables('entity_id'))}"
                              }
                            }
                          },
                          "expression": "@equals(variables('retry_count'), 0)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Set_Fetch_Error_False_For_Fetching_Associated_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Until_Retry_Count_is_Zero_For_Fetching_Associated_Account_Data": {
                            "actions": {
                              "Condition_To_Verify_Account_Data_Fetched_Successfully": {
                                "actions": {
                                  "Condition_To_Verify_If_The_Account_Entity_Does_Not_Have_An_Open_Assignment": {
                                    "runAfter": {
                                      "Parse_JSON_For_Associated_Account_Entity_Data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Assignment_ID_For_Account_Entity": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "assignment_id",
                                            "value": "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']?['id']"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_JSON_For_Associated_Account_Entity_Data": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')",
                                      "schema": {
                                        "properties": {
                                          "account_type": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "assignment": {
                                            "properties": {
                                              "account_id": {
                                                "type": [
                                                  "integer",
                                                  "null"
                                                ]
                                              },
                                              "assigned_by": {
                                                "properties": {
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "username": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  }
                                                },
                                                "type": [
                                                  "object",
                                                  "null"
                                                ]
                                              },
                                              "assigned_to": {
                                                "properties": {
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "username": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": [
                                                  "object",
                                                  "null"
                                                ]
                                              },
                                              "date_assigned": {
                                                "type": "string"
                                              },
                                              "date_resolved": {
                                                "type": [
                                                  "string",
                                                  "null"
                                                ]
                                              },
                                              "events": {
                                                "items": {
                                                  "type": "object"
                                                },
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "host_id": {
                                                "items": {
                                                  "type": "integer"
                                                },
                                                "type": [
                                                  "array",
                                                  "integer",
                                                  "null"
                                                ]
                                              },
                                              "id": {
                                                "type": "integer"
                                              },
                                              "outcome": {
                                                "type": "null"
                                              },
                                              "resolved_by": {
                                                "type": "null"
                                              },
                                              "triaged_detections": {
                                                "type": "object"
                                              }
                                            },
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "certainty": {
                                            "type": "integer"
                                          },
                                          "data_source": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "detection_set": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "detection_summaries": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "last_detection_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "note": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "notes": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "past_assignments": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "privilege_category": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "privilege_level": {
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          },
                                          "sensors": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "severity": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "state": {
                                            "type": "string"
                                          },
                                          "subaccounts": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "tags": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "threat": {
                                            "type": "integer"
                                          },
                                          "url": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Set_Retry_Count_As_Zero_For_Account_Entity": {
                                    "runAfter": {
                                      "Condition_To_Verify_If_The_Account_Entity_Does_Not_Have_An_Open_Assignment": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "retry_count",
                                      "value": 0
                                    }
                                  }
                                },
                                "runAfter": {
                                  "HTTP_Request_To_Fetch_Associated_Account_Entity_Data": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Condition_To_Generate_New_Access_Token_For_Associated_Account_Entity": {
                                      "actions": {
                                        "Condition_To_Verify_Access_Token_Generated_Successfully_For_Account_Entity": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Account_Entity": {
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "GenerateAccessTokenVectra_4": [
                                              "Succeeded",
                                              "TimedOut",
                                              "Failed"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Account_Entity": {
                                                "runAfter": {
                                                  "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "DecrementVariable",
                                                "inputs": {
                                                  "name": "retry_count",
                                                  "value": 1
                                                }
                                              },
                                              "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "access_token_generate_error",
                                                  "value": "@true"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@body('GenerateAccessTokenVectra_4')?['status']",
                                                  "success"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "GenerateAccessTokenVectra_4": {
                                          "type": "Workflow",
                                          "inputs": {
                                            "host": {
                                              "triggerName": "manual",
                                              "workflow": {
                                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_Account_Entity_Data_Fetch_Error_True": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "fetch_error",
                                              "value": "@true"
                                            }
                                          },
                                          "Set_Retry_Count_As_Zero_For_Account_Entity_Data_Fetch_Error": {
                                            "runAfter": {
                                              "Set_Account_Entity_Data_Fetch_Error_True": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 0
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@outputs('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')['statusCode']",
                                              401
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Get_Access_Token_For_Account_Entity": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                    }
                                  },
                                  "method": "get",
                                  "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                },
                                "runtimeConfiguration": {
                                  "secureData": {
                                    "properties": [
                                      "inputs",
                                      "outputs"
                                    ]
                                  }
                                }
                              },
                              "HTTP_Request_To_Fetch_Associated_Account_Entity_Data": {
                                "runAfter": {
                                  "Get_Access_Token_For_Account_Entity": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "headers": {
                                    "Authorization": "Bearer @{body('Get_Access_Token_For_Account_Entity')?['value']}"
                                  },
                                  "method": "GET",
                                  "uri": "@{variables('base_url')}/api/@{variables('api_version')}/accounts/@{int(variables('entity_id'))}"
                                }
                              }
                            },
                            "expression": "@equals(variables('retry_count'), 0)",
                            "limit": {
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('entity_type')",
                              "host"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Error_False_While_Adding_User_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Any_Error_Occurred_While_Fetching_Users_Data": {
                      "actions": {
                        "Terminate_Due_To_Users_Data_Fetch_Error": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Available_Users')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Available_Users')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_No_Users_Found": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Assigning_User_To_Entity": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Assigning_User_To_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Error occurred while assigning or reassigning user to vectra entity."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Decide_Assign_Or_Reassign_User_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('user_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Associated_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Fetching_Associated_Entity_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while fetching associated entity data."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Fetch_Associated_Entity_Data_Based_On_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Any_Error_Occurred_While_Fetching_Users_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token_For_Associated_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating token for associated entity data fetch."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Associated_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_For_Reassigning_User": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token_For_Reassigning_User": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Assigning_User_To_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_No_Users_Found": {
                      "actions": {
                        "Post_Message_in_Chat_For_No_Users_Found": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "messageBody": "<p><strong>No Users Found.</strong></p>",
                              "recipient": {
                                "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                "groupId": "[[trim(parameters('TeamsGroupId'))]"
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                          }
                        },
                        "Terminate_Due_To_No_Users_Found": {
                          "runAfter": {
                            "Post_Message_in_Chat_For_No_Users_Found": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_For_Users_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('user_count_zero')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Assign_Entity_Type": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "assign_entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Assignment_ID": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "assignment_id",
                            "type": "integer",
                            "value": -1
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Break_Loop": {
                      "runAfter": {
                        "Initialize_Assignment_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "break_loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Data_Fetch_Error": {
                      "runAfter": {
                        "Initialize_User_ID_For_Selected_User_Option": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Assign_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Adding_User_To_Vectra_Entity": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "user_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Data_Fetch_Error": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Page_Number": {
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "page",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_User_Count_Zero": {
                      "runAfter": {
                        "Initialize_User_List": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "user_count_zero",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_User_ID_For_Selected_User_Option": {
                      "runAfter": {
                        "Initialize_User_Count_Zero": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "user_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_User_List": {
                      "runAfter": {
                        "Initialize_User_Object": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "user_list",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_User_Object": {
                      "runAfter": {
                        "Initialize_Page_Number": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "user",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Post_Adaptive_Card_For_User_List_And_Wait_For_Response": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n  \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n  \"actions\": [\n    {\n      \"title\": \"Submit Answer\",\n      \"type\": \"Action.Submit\",\n      \"style\": \"positive\",\n      \"id\": \"Submit\"\n    }\n  ],\n  \"body\": [\n    {\n      \"text\": \"Assign Dynamic User To Vectra Entity\",\n      \"type\": \"TextBlock\",\n      \"wrap\": true,\n      \"size\": \"large\",\n      \"weight\": \"bolder\",\n      \"horizontalAlignment\": \"center\",\n      \"style\": \"heading\",\n      \"color\": \"accent\",\n      \"id\": \"heading\"\n    },\n    {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n     },\n    {\n      \"id\": \"user-choice\",\n      \"choices\": @{variables('user_list')},\n      \"type\": \"Input.ChoiceSet\",\n      \"separator\": true,\n            \"isRequired\": true,\n      \"label\": \"Select Any Option To Add User To Entity in Vectra\",\n      \"errorMessage\": \"Please select one user before submit\"\n    }\n  ],\n  \"type\": \"AdaptiveCard\",\n  \"version\": \"1.3\"\n}",
                            "recipient": {
                              "channelId": "[[trim(parameters('TeamsChannelId'))]",
                              "groupId": "[[trim(parameters('TeamsGroupId'))]"
                            },
                            "updateMessage": "Thanks for your response!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Set_Fetch_Error_False_For_Fetching_Associated_Entity_Data": {
                      "runAfter": {
                        "Set_Retry_Count_For_Fetching_Associated_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "fetch_error",
                        "value": "@false"
                      }
                    },
                    "Set_Retry_Count_For_Assigning_Or_Reassigning_User": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Set_Retry_Count_For_Fetching_Associated_Entity_Data": {
                      "runAfter": {
                        "Set_User_ID_From_Selected_User_Option": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Set_User_ID_From_Selected_User_Option": {
                      "runAfter": {
                        "Post_Adaptive_Card_For_User_List_And_Wait_For_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "user_id",
                        "value": "@{body('Post_Adaptive_Card_For_User_List_And_Wait_For_Response')?['data']?['user-choice']}"
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook is triggered on wrong incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_For_Users_Data": {
                      "actions": {
                        "Condition_To_Verify_Available_Users_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Verify_Count_is_Zero": {
                              "actions": {
                                "Set_Break_Loop_True_For_Count_Zero": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "break_loop",
                                    "value": "@true"
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Count_Zero": {
                                  "runAfter": {
                                    "Set_User_Count_Zero_True_For_Count_Zero": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                },
                                "Set_User_Count_Zero_True_For_Count_Zero": {
                                  "runAfter": {
                                    "Set_Break_Loop_True_For_Count_Zero": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "user_count_zero",
                                    "value": "@true"
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Users_Data": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Verify_Next_is_Null": {
                                    "actions": {
                                      "Set_Break_Loop_True_For_Next_is_Null": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "break_loop",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_Retry_Count_As_Zero_For_Next_is_Null": {
                                        "runAfter": {
                                          "Set_Break_Loop_True_For_Next_is_Null": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "For_Each_User": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Increment_Page_Number": {
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "page",
                                            "value": 1
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Users_Data')?['next']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "For_Each_User": {
                                    "foreach": "@body('Parse_JSON_For_Users_Data')?['results']",
                                    "actions": {
                                      "Append_User_To_User_List": {
                                        "runAfter": {
                                          "Set_User_Object": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "user_list",
                                          "value": "@variables('user')"
                                        }
                                      },
                                      "Set_User_Object": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "user",
                                          "value": {
                                            "title": "@{items('For_Each_User')?['id']} - @{items('For_Each_User')?['username']} - @{items('For_Each_User')?['role']}",
                                            "value": "@items('For_Each_User')?['id']"
                                          }
                                        }
                                      }
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_JSON_For_Users_Data')?['count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Users_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Available_Users')",
                                "schema": {
                                  "properties": {
                                    "count": {
                                      "type": "integer"
                                    },
                                    "next": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "previous": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "results": {
                                      "items": {
                                        "properties": {
                                          "email": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "last_login": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "last_login_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "role": {
                                            "type": "string"
                                          },
                                          "username": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "username",
                                          "email",
                                          "role",
                                          "last_login_timestamp",
                                          "last_login"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Available_Users": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Users": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Users": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Access_Token_For_Users": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Users": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Users": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Break_Loop_True_For_Users_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Users_Data": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Users_Data": {
                                      "runAfter": {
                                        "Set_Users_Data_Fetch_Error_True": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    },
                                    "Set_Users_Data_Fetch_Error_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Available_Users')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Available_Users')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Users": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Available_Users": {
                          "runAfter": {
                            "Get_Access_Token_For_Users": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Users')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "page": "@{variables('page')}"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/users"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Decide_Assign_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault_3": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "VectraAssignDynamicUserToEntity",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId6'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId6')]",
                "contentId": "[variables('_playbookContentId6')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion6')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Assign Dynamic User To Entity",
            "description": "This playbook will assign a user selected by user from teams adpative card to an entity in Vectra when the status of an incident changes from 'New' to 'Active'.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraAssignDynamicUserToEntity playbook.",
              "4. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId. "
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
              "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
              "a. Go to Microsoft Sentinel → <your workspace> → Automation",
              "b. Click on Create → Automation rule",
              "c. Provide name for your rule",
              "d. Select Trigger as When incident is updated.",
              "e. In Conditions, select Status changed from 'New' and status changed to 'Active'.",
              "f. In Actions dropdown select Run playbook",
              "g. In second dropdown select your deployed playbook",
              "h. Click on Apply",
              "i. Save the Automation rule.",
              "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Assign",
              "Dynamic",
              "User"
            ],
            "lastUpdateTime": "2024-08-30T15:13:35.393Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId6')]",
        "contentKind": "Playbook",
        "displayName": "VectraAssignDynamicUserToEntity",
        "contentProductId": "[variables('_playbookcontentProductId6')]",
        "id": "[variables('_playbookcontentProductId6')]",
        "version": "[variables('playbookVersion6')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName7')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraStaticAssignMemberToGroup Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion7')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraStaticAssignMemberToGroup",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your Vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http"
                    }
                  },
                  "actions": {
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Verify_Members_Assigned_Successfully": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_Members_Assigned_Successfully": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Assigning_Members_To_Vectra_Group": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Add_Member_To_Group')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Add_Member_To_Group')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('member_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_For_Assign_Members_To_Group": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "member_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Group_ID": {
                      "runAfter": {
                        "Initialize_Members": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "group_id",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_Members": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "members",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Group_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Post_Adaptive_Card_For_User_ID_And_Members_Details_And_Wait_For_Response": {
                      "runAfter": {
                        "Initialize_Error_False_For_Assign_Members_To_Group": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"title\": \"Submit Answer\",\n            \"type\": \"Action.Submit\",\n            \"style\": \"positive\",\n            \"id\": \"Submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\",\n            \"text\": \"Static Assign Members To Group in Vectra\"\n        },\n        {\n            \"id\": \"group-id\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter Group ID To Add Members\",\n            \"isRequired\": true,\n            \"label\": \"Please provide group id to add members to it\",\n            \"errorMessage\": \"Please enter members details.\",\n            \"separator\": true\n        },\n        {\n            \"id\": \"member-details\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter members eg. member1,member2,member3,...\",\n            \"isRequired\": true,\n            \"label\": \"Please provide members details to add in group\",\n            \"errorMessage\": \"Please enter members details.\"\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                            "recipient": {
                              "channelId": "[[trim(parameters('TeamsChannelId'))]",
                              "groupId": "[[trim(parameters('TeamsGroupId'))]"
                            },
                            "updateMessage": "Thanks for your response!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Set_Group_ID_From_User_Input": {
                      "runAfter": {
                        "Set_Members_From_User_Input": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "group_id",
                        "value": "@int(body('Post_Adaptive_Card_For_User_ID_And_Members_Details_And_Wait_For_Response')?['data']?['group-id'])"
                      }
                    },
                    "Set_Members_From_User_Input": {
                      "runAfter": {
                        "Post_Adaptive_Card_For_User_ID_And_Members_Details_And_Wait_For_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "members",
                        "value": "@split(body('Post_Adaptive_Card_For_User_ID_And_Members_Details_And_Wait_For_Response')?['data']?['member-details'], ',')"
                      }
                    },
                    "Until_Retry_Count_is_Zero": {
                      "actions": {
                        "Condition_To_Verify_Assignment_Of_Members_To_Group_Successfully": {
                          "actions": {
                            "Set_Retry_Count_As_Zero": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Add_Member_To_Group": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                    "actions": {
                                      "Decrement_Retry_Count": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Access_Token": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Assigning_Members_To_Vectra_Group": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "member_add_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Assigning_Members_To_Group": {
                                      "runAfter": {
                                        "Set_Error_True_While_Assigning_Members_To_Vectra_Group": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Add_Member_To_Group')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Add_Member_To_Group')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Add_Member_To_Group": {
                          "runAfter": {
                            "Get_Access_Token": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "members": "@variables('members')"
                            },
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token')?['value']}",
                              "Content-Type": "application/json"
                            },
                            "method": "PATCH",
                            "queries": {
                              "membership_action": "append"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/groups/@{variables('group_id')}"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Group_ID_From_User_Input": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "keyvault_3": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraStaticAssignMemberToGroup",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId7'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId7')]",
                "contentId": "[variables('_playbookContentId7')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion7')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Static Assign Member To Group",
            "description": "This playbook will take input of group id and members from user via MS teams and assign members to the provided group.",
            "prerequisites": [
              "1. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "2. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId.",
              "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraStaticAssignMemberToGroup playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Assign",
              "Member",
              "Group"
            ],
            "lastUpdateTime": "2024-08-30T15:13:36.030Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId7')]",
        "contentKind": "Playbook",
        "displayName": "VectraStaticAssignMemberToGroup",
        "contentProductId": "[variables('_playbookcontentProductId7')]",
        "id": "[variables('_playbookcontentProductId7')]",
        "version": "[variables('playbookVersion7')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName8')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraAssignStaticUserToEntity Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion8')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraAssignStaticUserToEntity",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "UserId": {
              "type": "int",
              "metadata": {
                "description": "Enter a user id which will be assign to entity "
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Decide_Assign_Entity_Type": {
                      "actions": {
                        "Set_Assign_Entity_Type_for_Host": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "assign_entity_type",
                            "value": "assign_host_id"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_Assign_Entity_Type_for_Account": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "assign_entity_type",
                              "value": "assign_account_id"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('entity_type')",
                              "host"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Decide_Assign_Or_Reassign_User_To_Vectra_Entity": {
                      "actions": {
                        "Until_Retry_Count_is_Zero_For_Assigning_User_To_Vectra_Entity": {
                          "actions": {
                            "Condition_To_Verify_User_Assigned_To_Entity_Successfully": {
                              "actions": {
                                "Set_Retry_Count_As_Zero_For_Assigning_User_To_Entity": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Assign_Static_User_To_Entity_In_Vectra": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Assigning_User": {
                                    "actions": {
                                      "Condition_To_Verify_Access_Token_Generated_Successfully_For_Assigning_User": {
                                        "actions": {
                                          "Decrement_Retry_Count_For_Assigning_User": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Access_Token_For_Assigning_User": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Access_Token_For_Assigning_User": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Access_Token_For_Assigning_User": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Error_True_While_Assigning_User_To_Vectra_Entity": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "user_add_error",
                                            "value": "@true"
                                          }
                                        },
                                        "Set_Retry_Count_As_Zero_For_Error_While_Assigning_User_To_Vectra_Entity": {
                                          "runAfter": {
                                            "Set_Error_True_While_Assigning_User_To_Vectra_Entity": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Assign_Static_User_To_Entity_In_Vectra')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Assign_Static_User_To_Entity_In_Vectra')['statusCode']",
                                      201
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Access_Token_For_Assigning_User_To_Entity": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs",
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Assign_Static_User_To_Entity_In_Vectra": {
                              "runAfter": {
                                "Get_Access_Token_For_Assigning_User_To_Entity": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "@variables('assign_entity_type')": "@int(variables('entity_id'))",
                                  "assign_to_user_id": "@variables('user_id')"
                                },
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Access_Token_For_Assigning_User_To_Entity')?['value']}",
                                  "Content-Type": "application/json"
                                },
                                "method": "POST",
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/assignments"
                              }
                            }
                          },
                          "expression": "@equals(variables('retry_count'), 0)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Set_Retry_Count_For_Assigning_User_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Until_Retry_Count_is_Zero_For_Reassigning_User_To_Vectra_Entity": {
                            "actions": {
                              "Condition_To_Verify_User_Reassigned_To_Entity_Successfully": {
                                "actions": {
                                  "Set_Retry_Count_As_Zero_For_Reassigning_User_To_Entity": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "retry_count",
                                      "value": 0
                                    }
                                  }
                                },
                                "runAfter": {
                                  "HTTP_Request_To_Reassign_Static_User_To_Entity_In_Vectra": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Condition_To_Generate_New_Access_Token_For_Reassigning_User": {
                                      "actions": {
                                        "Condition_To_Verify_Access_Token_Generated_Successfully_For_Reassigning_User": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Reassigning_User": {
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "GenerateAccessTokenVectra_4": [
                                              "Succeeded",
                                              "TimedOut",
                                              "Failed"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Reassigning_User": {
                                                "runAfter": {
                                                  "Set_Error_True_While_Generating_Access_Token_For_Reassigning_User": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "DecrementVariable",
                                                "inputs": {
                                                  "name": "retry_count",
                                                  "value": 1
                                                }
                                              },
                                              "Set_Error_True_While_Generating_Access_Token_For_Reassigning_User": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "access_token_generate_error",
                                                  "value": "@true"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@body('GenerateAccessTokenVectra_4')?['status']",
                                                  "success"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "GenerateAccessTokenVectra_4": {
                                          "type": "Workflow",
                                          "inputs": {
                                            "host": {
                                              "triggerName": "manual",
                                              "workflow": {
                                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_Error_True_While_Reassigning_User_To_Vectra_Entity": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "user_add_error",
                                              "value": "@true"
                                            }
                                          },
                                          "Set_Retry_Count_As_Zero_For_Error_While_Reassigning_User_To_Vectra_Entity": {
                                            "runAfter": {
                                              "Set_Error_True_While_Reassigning_User_To_Vectra_Entity": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 0
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@outputs('HTTP_Request_To_Reassign_Static_User_To_Entity_In_Vectra')['statusCode']",
                                              401
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Reassign_Static_User_To_Entity_In_Vectra')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Get_Access_Token_For_Reassigning_User_To_Entity": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                  },
                                  "method": "get",
                                  "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                },
                                "runtimeConfiguration": {
                                  "secureData": {
                                    "properties": [
                                      "inputs",
                                      "outputs"
                                    ]
                                  }
                                }
                              },
                              "HTTP_Request_To_Reassign_Static_User_To_Entity_In_Vectra": {
                                "runAfter": {
                                  "Get_Access_Token_For_Reassigning_User_To_Entity": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "body": {
                                    "@variables('assign_entity_type')": "@int(variables('entity_id'))",
                                    "assign_to_user_id": "@variables('user_id')"
                                  },
                                  "headers": {
                                    "Authorization": "Bearer @{body('Get_Access_Token_For_Reassigning_User_To_Entity')?['value']}",
                                    "Content-Type": "application/json"
                                  },
                                  "method": "PUT",
                                  "uri": "@{variables('base_url')}/api/@{variables('api_version')}/assignments/@{variables('assignment_id')}"
                                }
                              }
                            },
                            "expression": "@equals(variables('retry_count'), 0)",
                            "limit": {
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('assignment_id')",
                              -1
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Fetch_Associated_Entity_Data_Based_On_Entity_Type": {
                      "actions": {
                        "Until_Retry_Count_is_Zero_For_Fetching_Associated_Host_Data": {
                          "actions": {
                            "Condition_To_Verify_Host_Data_Fetched_Successfully": {
                              "actions": {
                                "Condition_To_Verify_If_The_Host_Entity_Does_Not_Have_An_Open_Assignment": {
                                  "runAfter": {
                                    "Parse_JSON_For_Associated_Host_Entity_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_Assignment_ID_For_Host_Entity": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "assignment_id",
                                          "value": "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']?['id']"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']",
                                          "@null"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Parse_JSON_For_Associated_Host_Entity_Data": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@body('HTTP_Request_To_Fetch_Associated_Host_Entity_Data')",
                                    "schema": {
                                      "properties": {
                                        "account_access_history": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "active_traffic": {
                                          "type": "boolean"
                                        },
                                        "assigned_date": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "assigned_to": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "assignment": {
                                          "properties": {
                                            "account_id": {
                                              "type": [
                                                "integer",
                                                "null"
                                              ]
                                            },
                                            "assigned_by": {
                                              "properties": {
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "username": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "assigned_to": {
                                              "properties": {
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "username": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": [
                                                "object",
                                                "null"
                                              ]
                                            },
                                            "date_assigned": {
                                              "type": "string"
                                            },
                                            "date_resolved": {
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            },
                                            "events": {
                                              "items": {
                                                "properties": {
                                                  "actor": {
                                                    "type": "integer"
                                                  },
                                                  "assignment_id": {
                                                    "type": "integer"
                                                  },
                                                  "context": {
                                                    "properties": {
                                                      "entity_c_score": {
                                                        "type": "integer"
                                                      },
                                                      "entity_t_score": {
                                                        "type": "integer"
                                                      },
                                                      "from": {
                                                        "type": "integer"
                                                      },
                                                      "to": {
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "type": [
                                                      "object",
                                                      "null"
                                                    ]
                                                  },
                                                  "datetime": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  },
                                                  "event_type": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "assignment_id",
                                                  "actor",
                                                  "event_type",
                                                  "datetime",
                                                  "context"
                                                ],
                                                "type": "object"
                                              },
                                              "type": [
                                                "array",
                                                "null"
                                              ]
                                            },
                                            "host_id": {
                                              "type": [
                                                "integer"
                                              ]
                                            },
                                            "id": {
                                              "type": "integer"
                                            },
                                            "outcome": {
                                              "type": "null"
                                            },
                                            "resolved_by": {
                                              "type": "null"
                                            },
                                            "triaged_detections": {
                                              "type": "object"
                                            }
                                          },
                                          "type": [
                                            "object",
                                            "null"
                                          ]
                                        },
                                        "c_score": {
                                          "type": "integer"
                                        },
                                        "certainty": {
                                          "type": "integer"
                                        },
                                        "detection_profile": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "detection_set": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "detection_summaries": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "groups": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "has_active_traffic": {
                                          "type": "boolean"
                                        },
                                        "has_custom_model": {
                                          "type": "boolean"
                                        },
                                        "has_shell_knocker_learnings": {
                                          "type": "boolean"
                                        },
                                        "host_luid": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "host_session_luids": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "ip": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "is_key_asset": {
                                          "type": "boolean"
                                        },
                                        "is_targeting_key_asset": {
                                          "type": "boolean"
                                        },
                                        "key_asset": {
                                          "type": "boolean"
                                        },
                                        "last_detection_timestamp": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "last_modified": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "last_seen": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "last_source": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "name": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note_modified_by": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note_modified_timestamp": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "notes": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "past_assignments": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "previous_ips": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "privilege_category": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "privilege_level": {
                                          "type": [
                                            "integer",
                                            "null"
                                          ]
                                        },
                                        "sensor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "sensor_name": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "service_access_history": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "severity": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "state": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "suspicious_admin_learnings": {
                                          "type": "object"
                                        },
                                        "t_score": {
                                          "type": "integer"
                                        },
                                        "tags": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "targets_key_asset": {
                                          "type": "boolean"
                                        },
                                        "threat": {
                                          "type": "integer"
                                        },
                                        "url": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Host_Entity": {
                                  "runAfter": {
                                    "Condition_To_Verify_If_The_Host_Entity_Does_Not_Have_An_Open_Assignment": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Fetch_Associated_Host_Entity_Data": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Associated_Host_Entity": {
                                    "actions": {
                                      "Condition_To_Verify_Access_Token_Generated_Successfully_For_Host_Entity": {
                                        "actions": {
                                          "Decrement_Retry_Count_For_Host_Entity": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra_2": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Host_Entity": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra_2')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra_2": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Host_Entity_Data_Fetch_Error_True": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "fetch_error",
                                            "value": "@true"
                                          }
                                        },
                                        "Set_Retry_Count_As_Zero_For_Host_Entity_Data_Fetch_Error": {
                                          "runAfter": {
                                            "Set_Host_Entity_Data_Fetch_Error_True": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Fetch_Associated_Host_Entity_Data')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Fetch_Associated_Host_Entity_Data')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Access_Token_For_Host_Entity": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs",
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Fetch_Associated_Host_Entity_Data": {
                              "runAfter": {
                                "Get_Access_Token_For_Host_Entity": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Access_Token_For_Host_Entity')?['value']}"
                                },
                                "method": "GET",
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/hosts/@{int(variables('entity_id'))}"
                              }
                            }
                          },
                          "expression": "@equals(variables('retry_count'), 0)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Condition_To_Decide_Assign_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Until_Retry_Count_is_Zero_For_Fetching_Associated_Account_Data": {
                            "actions": {
                              "Condition_To_Verify_Account_Data_Fetched_Successfully": {
                                "actions": {
                                  "Condition_To_Verify_If_The_Account_Entity_Does_Not_Have_An_Open_Assignment": {
                                    "runAfter": {
                                      "Parse_JSON_For_Associated_Account_Entity_Data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Assignment_ID_For_Account_Entity": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "assignment_id",
                                            "value": "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']?['id']"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_JSON_For_Associated_Account_Entity_Data": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')",
                                      "schema": {
                                        "properties": {
                                          "account_type": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "assignment": {
                                            "properties": {
                                              "account_id": {
                                                "type": [
                                                  "integer",
                                                  "null"
                                                ]
                                              },
                                              "assigned_by": {
                                                "properties": {
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "username": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  }
                                                },
                                                "type": [
                                                  "object",
                                                  "null"
                                                ]
                                              },
                                              "assigned_to": {
                                                "properties": {
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "username": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": [
                                                  "object",
                                                  "null"
                                                ]
                                              },
                                              "date_assigned": {
                                                "type": "string"
                                              },
                                              "date_resolved": {
                                                "type": [
                                                  "string",
                                                  "null"
                                                ]
                                              },
                                              "events": {
                                                "items": {
                                                  "type": "object"
                                                },
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "host_id": {
                                                "items": {
                                                  "type": "integer"
                                                },
                                                "type": [
                                                  "array",
                                                  "integer",
                                                  "null"
                                                ]
                                              },
                                              "id": {
                                                "type": "integer"
                                              },
                                              "outcome": {
                                                "type": "null"
                                              },
                                              "resolved_by": {
                                                "type": "null"
                                              },
                                              "triaged_detections": {
                                                "type": "object"
                                              }
                                            },
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "certainty": {
                                            "type": "integer"
                                          },
                                          "data_source": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "detection_set": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "detection_summaries": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "last_detection_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "note": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "notes": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "past_assignments": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "privilege_category": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "privilege_level": {
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          },
                                          "sensors": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "severity": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "state": {
                                            "type": "string"
                                          },
                                          "subaccounts": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "tags": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "threat": {
                                            "type": "integer"
                                          },
                                          "url": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Set_Retry_Count_As_Zero_For_Account_Entity": {
                                    "runAfter": {
                                      "Condition_To_Verify_If_The_Account_Entity_Does_Not_Have_An_Open_Assignment": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "retry_count",
                                      "value": 0
                                    }
                                  }
                                },
                                "runAfter": {
                                  "HTTP_Request_To_Fetch_Associated_Account_Entity_Data": [
                                    "Succeeded",
                                    "Failed",
                                    "TimedOut"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Condition_To_Generate_New_Access_Token_For_Associated_Account_Entity": {
                                      "actions": {
                                        "Condition_To_Verify_Access_Token_Generated_Successfully_For_Account_Entity": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Account_Entity": {
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "GenerateAccessTokenVectra_3": [
                                              "Succeeded",
                                              "TimedOut",
                                              "Failed"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Account_Entity": {
                                                "runAfter": {
                                                  "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "DecrementVariable",
                                                "inputs": {
                                                  "name": "retry_count",
                                                  "value": 1
                                                }
                                              },
                                              "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "access_token_generate_error",
                                                  "value": "@true"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@body('GenerateAccessTokenVectra_3')?['status']",
                                                  "success"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "GenerateAccessTokenVectra_3": {
                                          "type": "Workflow",
                                          "inputs": {
                                            "host": {
                                              "triggerName": "manual",
                                              "workflow": {
                                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_Account_Entity_Data_Fetch_Error_True": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "fetch_error",
                                              "value": "@true"
                                            }
                                          },
                                          "Set_Retry_Count_As_Zero_For_Account_Entity_Data_Fetch_Error": {
                                            "runAfter": {
                                              "Set_Account_Entity_Data_Fetch_Error_True": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 0
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@outputs('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')['statusCode']",
                                              401
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Get_Access_Token_For_Account_Entity": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                  },
                                  "method": "get",
                                  "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                },
                                "runtimeConfiguration": {
                                  "secureData": {
                                    "properties": [
                                      "inputs",
                                      "outputs"
                                    ]
                                  }
                                }
                              },
                              "HTTP_Request_To_Fetch_Associated_Account_Entity_Data": {
                                "runAfter": {
                                  "Get_Access_Token_For_Account_Entity": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "headers": {
                                    "Authorization": "Bearer @{body('Get_Access_Token_For_Account_Entity')?['value']}"
                                  },
                                  "method": "GET",
                                  "uri": "@{variables('base_url')}/api/@{variables('api_version')}/accounts/@{int(variables('entity_id'))}"
                                }
                              }
                            },
                            "expression": "@equals(variables('retry_count'), 0)",
                            "limit": {
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('entity_type')",
                              "host"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Error_False_While_Adding_User_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Assigning_User_To_Vectra_Entity": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Assigning_User_To_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Error occurred while creating or updating assignment."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Decide_Assign_Or_Reassign_User_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('user_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Associated_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Fetching_Associated_Entity_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Error occurred while fetching data of associated entity."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Fetch_Associated_Entity_Data_Based_On_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Access_Token": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Assigning_User_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token_For_Associated_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for associated entity."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Associated_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Assign_Entity_Type": {
                      "runAfter": {
                        "Initialize_User_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "assign_entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Assignment_ID": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "assignment_id",
                            "type": "integer",
                            "value": -1
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Data_Fetch_Error_False": {
                      "runAfter": {
                        "Initialize_Assignment_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Assign_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Adding_User_To_Vectra_Entity": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "user_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Data_Fetch_Error_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_User_ID": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "user_id",
                            "type": "integer",
                            "value": "[[parameters('UserId')]"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Set_Retry_Count_For_Assigning_User_To_Vectra_Entity": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook Triggered from Wrong Incident."
                        },
                        "runStatus": "Failed"
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraAssignStaticUserToEntity",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId8'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId8')]",
                "contentId": "[variables('_playbookContentId8')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion8')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Assign Static User To Entity",
            "description": "This playbook will assign a predefined user to an entity in Vectra when the status of an incident changes from 'New' to 'Active'.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraAssignStaticUserToEntity playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
              "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
              "a. Go to Microsoft Sentinel → <your workspace> → Automation",
              "b. Click on Create → Automation rule",
              "c. Provide name for your rule",
              "d. Select Trigger as When incident is updated.",
              "e. In Conditions, select Status changed from 'New' and status changed to 'Active'.",
              "f. In Actions dropdown select Run playbook",
              "g. In second dropdown select your deployed playbook",
              "h. Click on Apply",
              "i. Save the Automation rule.",
              "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Assign",
              "Static",
              "User"
            ],
            "lastUpdateTime": "2024-08-30T15:13:37.447Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId8')]",
        "contentKind": "Playbook",
        "displayName": "VectraAssignStaticUserToEntity",
        "contentProductId": "[variables('_playbookcontentProductId8')]",
        "id": "[variables('_playbookcontentProductId8')]",
        "version": "[variables('playbookVersion8')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName9')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraDecorateIncidentBasedOnTag Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion9')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraDecorateIncidentBasedOnTag",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your Vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "IncidentComment": {
              "type": "string",
              "defaultValue": "Incident has been created and escalated.",
              "metadata": {
                "description": "Enter comment you want to add in incident create based on tag. NOTE: Entity id, type and tag will be added by default for incident comment"
              }
            },
            "EntityNote": {
              "type": "string",
              "defaultValue": "Incident is being tracked in Sentinel with link:",
              "metadata": {
                "description": "Enter a note you want to add in Vectra Entity. NOTE: Incident link will be added by default to note"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_Comment_To_Incident_(V3)": {
                      "runAfter": {
                        "Parse_JSON_For_Human_Readable_Tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{variables('Comment')}<br>\nEntity ID: @{variables('entity_id')}, type: @{variables('entity_type')} and tags: @{body('Parse_JSON_For_Human_Readable_Tags')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Error_False_While_Adding_Note_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Adding_Note_to_Vectra_Entity": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Adding_Note_To_Vectra_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Add_Note_To_Vectra_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('note_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Adding_Note_to_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Comment": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Comment",
                            "type": "string",
                            "value": "[[trim(parameters('IncidentComment'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Note": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Adding_Note_To_Vectra_Entity": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "note_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Note": {
                      "runAfter": {
                        "Initialize_Comment": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Note",
                            "type": "string",
                            "value": "[[trim(parameters('EntityNote'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Parse_JSON_For_Human_Readable_Tags": {
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['tags'][0]",
                        "schema": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook is triggered on wrong incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Retry_Count_is_Zero": {
                      "actions": {
                        "Condition_To_Verify_Note_Added_To_Vectra_Entity_Successfully": {
                          "actions": {
                            "Set_Retry_Count_As_Zero": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Add_Note_To_Vectra_Entity": [
                              "Succeeded",
                              "Failed",
                              "TimedOut"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                    "actions": {
                                      "Decrement_Retry_Count": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "Failed",
                                        "TimedOut"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Access_Token": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Adding_Note_To_Vectra_Entity": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "note_add_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Adding_Note_To_Vectra_Entity": {
                                      "runAfter": {
                                        "Set_Error_True_While_Adding_Note_To_Vectra_Entity": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']",
                                  201
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Add_Note_To_Vectra_Entity": {
                          "runAfter": {
                            "Get_Access_Token": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "note": "@{variables('Note')}@{triggerBody()?['object']?['properties']?['incidentUrl']}"
                            },
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_token')?['value']}",
                              "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "queries": {
                              "entity_type": "@variables('entity_type')"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities/@{int(variables('entity_id'))}/notes"
                          }
                        }
                      },
                      "runAfter": {
                        "Add_Comment_To_Incident_(V3)": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault_3": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "VectraDecorateIncidentBasedOnTag",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId9'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId9')]",
                "contentId": "[variables('_playbookContentId9')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion9')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Decorate Incident Based On Tag",
            "description": "This playbook will add pre-defined or user customizable comment to an incident generated based on tags and add pre-defined or user customizable note to associated Vectra Entity.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraDecorateIncidentBasedOnTag playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Assign Role to add comment in incident**",
              "Assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2.Add role assignment",
              "3.Assignment type: Job function roles",
              "4.Role: Microsoft Sentinel Contributor",
              "5.Members: select managed identity for assigned access to and add your logic app as member",
              "6.Click on review+assign",
              "**d. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, below analytical rules should be configured to trigger an incident.",
              "a. Vectra Create Incident Based On Tag For Entity Type Account",
              "b. Vectra Create Incident Based On Tag For Entity Type Host",
              "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
              "a. Go to Microsoft Sentinel → <your workspace> → Automation",
              "b. Click on Create → Automation rule",
              "c. Provide name for your rule",
              "d. In Analytic rule name condition, select analytic rule which you have created.",
              "e. In Actions dropdown select Run playbook",
              "f. In second dropdown select your deployed playbook",
              "g. Click on Apply",
              "h. Save the Automation rule.",
              "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Incident",
              "Tags",
              "Comment",
              "Note"
            ],
            "lastUpdateTime": "2024-08-30T15:13:37.944Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId9')]",
        "contentKind": "Playbook",
        "displayName": "VectraDecorateIncidentBasedOnTag",
        "contentProductId": "[variables('_playbookcontentProductId9')]",
        "id": "[variables('_playbookcontentProductId9')]",
        "version": "[variables('playbookVersion9')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName10')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraDecorateIncidentBasedOnTagAndNotify Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion10')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraDecorateIncidentBasedOnTagAndNotify",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your Vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "IncidentComment": {
              "type": "string",
              "defaultValue": "Incident has been created and escalated.",
              "metadata": {
                "description": "Enter comment you want to add in incident create based on tag. NOTE: Entity id, type and tag will be added by default for incident comment"
              }
            },
            "EntityNote": {
              "type": "string",
              "defaultValue": "Incident is being tracked in Sentinel with link:",
              "metadata": {
                "description": "Enter a note you want to add in Vectra Entity. NOTE: Incident link will be added by default to note"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_Comment_To_Incident_(V3)": {
                      "runAfter": {
                        "Parse_JSON_For_Human_Readable_Tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>Entity ID: @{variables('entity_id')}, type: @{variables('entity_type')} and tags: @{body('Parse_JSON_For_Human_Readable_Tags')}<br>\n@{variables('Comment')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Error_False_While_Adding_Note_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Adding_Note_to_Vectra_Entity": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Adding_Note_To_Vectra_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Add_Note_To_Vectra_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('note_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Adding_Note_to_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Comment": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Comment",
                            "type": "string",
                            "value": "[[trim(parameters('IncidentComment'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Note": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Adding_Note_To_Vectra_Entity": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "note_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Note": {
                      "runAfter": {
                        "Initialize_Comment": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Note",
                            "type": "string",
                            "value": "[[trim(parameters('EntityNote'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_Teams_Message": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "teams_message",
                            "type": "string",
                            "value": "<p><strong>Entity ID: </strong><strong>@{variables('entity_id')}</strong><strong>, Type: </strong><strong>@{variables('entity_type')}</strong><strong>, Tags: </strong><strong>@{body('Parse_JSON_For_Human_Readable_Tags')}</strong><strong></strong><br>\n<br>\nIncident has been created and escalated in Microsoft Sentinel.<br>\n<strong>Link to the incident is: </strong><a href=@{triggerBody()?['object']?['properties']?['incidentUrl']}>@{triggerBody()?['object']?['properties']?['incidentUrl']}</a></p>"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Parse_JSON_For_Human_Readable_Tags": {
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['tags'][0]",
                        "schema": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "Post_Message_in_Teams": {
                      "runAfter": {
                        "Initialize_Teams_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "messageBody": "<p>@{variables('teams_message')}</p>",
                          "recipient": {
                            "channelId": "[[trim(parameters('TeamsChannelId'))]",
                            "groupId": "[[trim(parameters('TeamsGroupId'))]"
                          }
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook is triggered on wrong incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Retry_Count_is_Zero": {
                      "actions": {
                        "Condition_To_Verify_Note_Added_To_Vectra_Entity_Successfully": {
                          "actions": {
                            "Set_Retry_Count_As_Zero": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Add_Note_To_Vectra_Entity": [
                              "Succeeded",
                              "Failed",
                              "TimedOut"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                    "actions": {
                                      "Decrement_Retry_Count": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "Failed",
                                        "TimedOut"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Access_Token": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Adding_Note_To_Vectra_Entity": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "note_add_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Adding_Note_To_Vectra_Entity": {
                                      "runAfter": {
                                        "Set_Error_True_While_Adding_Note_To_Vectra_Entity": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']",
                                  201
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Add_Note_To_Vectra_Entity": {
                          "runAfter": {
                            "Get_Access_Token": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "note": "@{variables('Note')}@{triggerBody()?['object']?['properties']?['incidentUrl']}"
                            },
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_token')?['value']}",
                              "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "queries": {
                              "entity_type": "@variables('entity_type')"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities/@{int(variables('entity_id'))}/notes"
                          }
                        }
                      },
                      "runAfter": {
                        "Add_Comment_To_Incident_(V3)": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault_3": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "VectraDecorateIncidentBasedOnTagAndNotify",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId10'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId10')]",
                "contentId": "[variables('_playbookContentId10')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion10')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Decorate Incident Based On Tags And Notify",
            "description": "This playbook will add pre-defined or user customizable comment to an incident generated based on tags, add pre-defined or user customizable note to associated Vectra Entity and notify to Microsoft Teams.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. User must have a Microsoft Teams account.",
              "4. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraDecorateIncidentBasedOnTagAndNotify playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Assign Role to add comment in incident**",
              "Assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2.Add role assignment",
              "3.Assignment type: Job function roles",
              "4.Role: Microsoft Sentinel Contributor",
              "5.Members: select managed identity for assigned access to and add your logic app as member",
              "6.Click on review+assign",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, below analytical rules should be configured to trigger an incident.",
              "a. Vectra Create Incident Based On Tag For Entity Type Account",
              "b. Vectra Create Incident Based On Tag For Entity Type Host",
              "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
              "a. Go to Microsoft Sentinel → <your workspace> → Automation",
              "b. Click on Create → Automation rule",
              "c. Provide name for your rule",
              "d. In Analytic rule name condition, select analytic rule which you have created.",
              "e. In Actions dropdown select Run playbook",
              "f. In second dropdown select your deployed playbook",
              "g. Click on Apply",
              "h. Save the Automation rule.",
              "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Incident",
              "Tags",
              "Comment",
              "Note",
              "Notification",
              "Teams"
            ],
            "lastUpdateTime": "2024-08-30T15:13:38.610Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId10')]",
        "contentKind": "Playbook",
        "displayName": "VectraDecorateIncidentBasedOnTagAndNotify",
        "contentProductId": "[variables('_playbookcontentProductId10')]",
        "id": "[variables('_playbookcontentProductId10')]",
        "version": "[variables('playbookVersion10')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName11')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraDynamicResolveAssignment Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion11')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraDynamicResolveAssignment",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Decide_Adaptive_Card_Schema_Based_On_Number_Of_Active_Detections": {
                      "actions": {
                        "Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs": {
                          "type": "ApiConnectionWebhook",
                          "inputs": {
                            "body": {
                              "body": {
                                "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"style\": \"positive\",\n            \"id\": \"submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Dynamic Resolve Assignment in Vectra\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"No Active Detections Found Associated With An Entity To Traige\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"attention\",\n            \"separator\": true,\n            \"id\": \"detection-choice\"\n        },\n        {\n            \"id\": \"outcome-choice\",\n            \"choices\": [{\n                \"title\": \"1\",\n                \"value\": \"1\"\n            }],\n            \"type\": \"Input.ChoiceSet\",\n            \"isRequired\": true,\n            \"label\": \"Please select any outcome.\",\n            \"errorMessage\": \"Please select any outcome first.\"\n        },\n        {\n            \"id\": \"note-text\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter resolution note\",\n            \"isRequired\": true,\n            \"label\": \"Please add resolution note.\",\n            \"errorMessage\": \"Please enter resolution note.\",\n            \"isMultiline\": true\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                "recipient": {
                                  "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                  "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                },
                                "updateMessage": "Thanks for your response!"
                              },
                              "notificationUrl": "@{listCallbackUrl()}"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                          }
                        },
                        "Set_Label_From_User_Input_For_No_Active_Detections_Found_To_Triage": {
                          "runAfter": {
                            "Set_Outcome_From_User_Selection_For_No_Active_Detections_Found_To_Triage": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "triage_as",
                            "value": "@{body('Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs')?['data']?['label-text']}"
                          }
                        },
                        "Set_Outcome_From_User_Selection_For_No_Active_Detections_Found_To_Triage": {
                          "runAfter": {
                            "Set_Resolution_Note_From_User_Input_For_No_Active_Detections_Found_To_Triage": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "user_outcome",
                            "value": "@int(body('Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs')?['data']?['outcome-choice'])"
                          }
                        },
                        "Set_Resolution_Note_From_User_Input_For_No_Active_Detections_Found_To_Triage": {
                          "runAfter": {
                            "Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "note",
                            "value": "@{body('Post_Adaptive_Card_For_No_Detections_Found_And_Wait_For_User_Inputs')?['data']?['note-text']}"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Any_Entity_Data_Fetch_Error": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Condition_To_Not_Update_Detection_ID_Array_If_User_Provided_Detections_To_Triage": {
                            "actions": {
                              "Set_Detection_ID_Array_Empty": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "detections",
                                  "value": "[variables('TemplateEmptyArray')]"
                                }
                              }
                            },
                            "runAfter": {
                              "Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment": [
                                "Succeeded"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Set_Detections_ID_Array_From_User_Selection": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "detections",
                                    "value": "@split(body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['detections-choice'], ',')"
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['detections-choice']",
                                    "@null"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                              "body": {
                                "body": {
                                  "messageBody": "{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"actions\": [\n        {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Submit Answer\",\n            \"style\": \"positive\",\n            \"id\": \"submit\"\n        }\n    ],\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"large\",\n            \"weight\": \"bolder\",\n            \"text\": \"Dynamic Resolve Assignment in Vectra\",\n            \"horizontalAlignment\": \"center\",\n            \"style\": \"heading\",\n            \"color\": \"accent\",\n            \"fontType\": \"Default\",\n            \"wrap\": true,\n            \"id\": \"heading\"\n        },\n       {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"id\": \"detections-choice\",\n            \"choices\": @{variables('detections')},\n            \"type\": \"Input.ChoiceSet\",\n            \"isMultiSelect\": true,\n            \"label\": \"Please select detections to triage.\",\n            \"separator\": true\n        },\n        {\n            \"id\": \"outcome-choice\",\n            \"choices\": @{variables('outcome_list')},\n            \"type\": \"Input.ChoiceSet\",\n            \"isRequired\": true,\n            \"label\": \"Please select any outcome.\",\n            \"errorMessage\": \"Please select any outcome first.\"\n        },\n        {\n            \"id\": \"note-text\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter resolution note\",\n            \"isRequired\": true,\n            \"label\": \"Please add resolution note.\",\n            \"errorMessage\": \"Please enter resolution note.\",\n            \"isMultiline\": true\n        },\n        {\n            \"id\": \"label-text\",\n            \"type\": \"Input.Text\",\n            \"placeholder\": \"Enter label for triaged detections\",\n            \"isRequired\": true,\n            \"label\": \"Please add label for triaged detections.\",\n            \"errorMessage\": \"Please enter label for triaged detections.\",\n            \"isMultiline\": true\n        }\n    ],\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.3\"\n}",
                                  "recipient": {
                                    "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                    "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                  },
                                  "updateMessage": "Thanks for your response!"
                                },
                                "notificationUrl": "@{listCallbackUrl()}"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['teams']['connectionId']"
                                }
                              },
                              "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                            }
                          },
                          "Set_Label_For_Triaged_Detections_From_User_Input": {
                            "runAfter": {
                              "Set_Outcome_From_User_Selection": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "triage_as",
                              "value": "@{body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['label-text']}"
                            }
                          },
                          "Set_Outcome_From_User_Selection": {
                            "runAfter": {
                              "Set_Resolution_Note_From_User_Input": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "user_outcome",
                              "value": "@int(body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['outcome-choice'])"
                            }
                          },
                          "Set_Resolution_Note_From_User_Input": {
                            "runAfter": {
                              "Condition_To_Not_Update_Detection_ID_Array_If_User_Provided_Detections_To_Triage": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "note",
                              "value": "@{body('Post_Adaptive_Card_For_User_Inputs_To_Resolve_Assignment')?['data']?['note-text']}"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(variables('detections'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Decide_Body_For_Resolve_Assignment_Operation_Based_On_Detections": {
                      "actions": {
                        "Set_Resolve_Request_Body_For_Empty_Detections": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "resolve_request_body",
                            "value": {
                              "note": "@variables('note')",
                              "outcome": "@variables('user_outcome')"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Retry_Count_For_Resolve_Assignment": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Set_Resolve_Request_Body_For_User_Selected_Detections": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "resolve_request_body",
                              "value": {
                                "detection_ids": "@variables('detections')",
                                "note": "@variables('note')",
                                "outcome": "@variables('user_outcome')",
                                "triage_as": "@variables('triage_as')"
                              }
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('detections'))",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Perform_Next_Actions_Based_On_Entity_Type": {
                      "actions": {
                        "Until_Retry_Count_is_Zero_For_Host_Entity": {
                          "actions": {
                            "Condition_To_Verify_Host_Entity_Data_Fetched_Succcessfully": {
                              "actions": {
                                "Condition_To_Verify_If_No_Open_Assignment_Found_For_Host_Entity": {
                                  "actions": {
                                    "Set_No_Open_Assignment_Found_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "no_open_assignment",
                                        "value": "@true"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Parse_JSON_For_Associated_Host_Entity_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_Assignment_ID_For_Host_Entity": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "assignment_id",
                                          "value": "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']?['id']"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']",
                                          "@null"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Parse_JSON_For_Associated_Host_Entity_Data": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@body('HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity')",
                                    "schema": {
                                      "properties": {
                                        "account_access_history": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "active_traffic": {
                                          "type": "boolean"
                                        },
                                        "assigned_date": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "assigned_to": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "assignment": {
                                          "properties": {
                                            "account_id": {
                                              "type": [
                                                "integer",
                                                "null"
                                              ]
                                            },
                                            "assigned_by": {
                                              "properties": {
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "username": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "assigned_to": {
                                              "properties": {
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "username": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": [
                                                "object",
                                                "null"
                                              ]
                                            },
                                            "date_assigned": {
                                              "type": "string"
                                            },
                                            "date_resolved": {
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            },
                                            "events": {
                                              "items": {
                                                "properties": {
                                                  "actor": {
                                                    "type": "integer"
                                                  },
                                                  "assignment_id": {
                                                    "type": "integer"
                                                  },
                                                  "context": {
                                                    "properties": {
                                                      "entity_c_score": {
                                                        "type": "integer"
                                                      },
                                                      "entity_t_score": {
                                                        "type": "integer"
                                                      },
                                                      "from": {
                                                        "type": "integer"
                                                      },
                                                      "to": {
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "type": [
                                                      "object",
                                                      "null"
                                                    ]
                                                  },
                                                  "datetime": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  },
                                                  "event_type": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "assignment_id",
                                                  "actor",
                                                  "event_type",
                                                  "datetime",
                                                  "context"
                                                ],
                                                "type": "object"
                                              },
                                              "type": [
                                                "array",
                                                "null"
                                              ]
                                            },
                                            "host_id": {
                                              "type": [
                                                "integer"
                                              ]
                                            },
                                            "id": {
                                              "type": "integer"
                                            },
                                            "outcome": {
                                              "type": "null"
                                            },
                                            "resolved_by": {
                                              "type": "null"
                                            },
                                            "triaged_detections": {
                                              "type": "object"
                                            }
                                          },
                                          "type": [
                                            "object",
                                            "null"
                                          ]
                                        },
                                        "c_score": {
                                          "type": "integer"
                                        },
                                        "certainty": {
                                          "type": "integer"
                                        },
                                        "detection_profile": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "detection_set": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "detection_summaries": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "groups": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "has_active_traffic": {
                                          "type": "boolean"
                                        },
                                        "has_custom_model": {
                                          "type": "boolean"
                                        },
                                        "has_shell_knocker_learnings": {
                                          "type": "boolean"
                                        },
                                        "host_luid": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "host_session_luids": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "ip": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "is_key_asset": {
                                          "type": "boolean"
                                        },
                                        "is_targeting_key_asset": {
                                          "type": "boolean"
                                        },
                                        "key_asset": {
                                          "type": "boolean"
                                        },
                                        "last_detection_timestamp": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "last_modified": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "last_seen": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "last_source": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "name": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note_modified_by": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note_modified_timestamp": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "notes": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "past_assignments": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "previous_ips": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "privilege_category": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "privilege_level": {
                                          "type": [
                                            "integer",
                                            "null"
                                          ]
                                        },
                                        "sensor": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "sensor_name": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "service_access_history": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "severity": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "state": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "suspicious_admin_learnings": {
                                          "type": "object"
                                        },
                                        "t_score": {
                                          "type": "integer"
                                        },
                                        "tags": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "targets_key_asset": {
                                          "type": "boolean"
                                        },
                                        "threat": {
                                          "type": "integer"
                                        },
                                        "url": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Host_Entity_Data": {
                                  "runAfter": {
                                    "Condition_To_Verify_If_No_Open_Assignment_Found_For_Host_Entity": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Host_Entity": {
                                    "actions": {
                                      "Condition_To_Verify_Access_Token_Generated_Successfully_For_Host_Entity": {
                                        "actions": {
                                          "Decrement_Retry_Count_For_Host_Entity": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra_3": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Host_Entity": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra_3')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra_3": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Host_Entity_Data_Fetch_Error_True": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "fetch_error",
                                            "value": "@true"
                                          }
                                        },
                                        "Set_Retry_Count_As_Zero_For_Host_Entity_Data_Fetch_Error": {
                                          "runAfter": {
                                            "Set_Host_Entity_Data_Fetch_Error_True": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Access_Token_For_Host_Entity": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs",
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Fetch_Data_For_Associated_Host_Entity": {
                              "runAfter": {
                                "Get_Access_Token_For_Host_Entity": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Access_Token_For_Host_Entity')?['value']}"
                                },
                                "method": "GET",
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/hosts/@{int(variables('entity_id'))}"
                              }
                            }
                          },
                          "expression": "@equals(variables('retry_count'), 0)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Set_Retry_Count_For_Associated_Entity_Data_Fetch": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Until_Retry_Count_is_Zero_For_Account_Entity": {
                            "actions": {
                              "Condition_To_Verify_Account_Data_Fetched_Successfully": {
                                "actions": {
                                  "Condition_To_Verify_If_No_Open_Assignment_Found_For_Account_Entity": {
                                    "actions": {
                                      "Set_No_Open_Assignment_True_For_Account_Entity": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "no_open_assignment",
                                          "value": "@true"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_JSON_For_Associated_Account_Entity_Data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Assignment_ID_For_Account_Entity": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "assignment_id",
                                            "value": "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']?['id']"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_JSON_For_Associated_Account_Entity_Data": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity')",
                                      "schema": {
                                        "properties": {
                                          "account_type": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "assignment": {
                                            "properties": {
                                              "account_id": {
                                                "type": [
                                                  "integer",
                                                  "null"
                                                ]
                                              },
                                              "assigned_by": {
                                                "properties": {
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "username": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  }
                                                },
                                                "type": [
                                                  "object",
                                                  "null"
                                                ]
                                              },
                                              "assigned_to": {
                                                "properties": {
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "username": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": [
                                                  "object",
                                                  "null"
                                                ]
                                              },
                                              "date_assigned": {
                                                "type": "string"
                                              },
                                              "date_resolved": {
                                                "type": [
                                                  "string",
                                                  "null"
                                                ]
                                              },
                                              "events": {
                                                "items": {
                                                  "type": "object"
                                                },
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "host_id": {
                                                "items": {
                                                  "type": "integer"
                                                },
                                                "type": [
                                                  "array",
                                                  "integer",
                                                  "null"
                                                ]
                                              },
                                              "id": {
                                                "type": "integer"
                                              },
                                              "outcome": {
                                                "type": "null"
                                              },
                                              "resolved_by": {
                                                "type": "null"
                                              },
                                              "triaged_detections": {
                                                "type": "object"
                                              }
                                            },
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "certainty": {
                                            "type": "integer"
                                          },
                                          "data_source": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "detection_set": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "detection_summaries": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "last_detection_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "note": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "notes": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "past_assignments": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "privilege_category": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "privilege_level": {
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          },
                                          "sensors": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "severity": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "state": {
                                            "type": "string"
                                          },
                                          "subaccounts": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "tags": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "threat": {
                                            "type": "integer"
                                          },
                                          "url": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Set_Retry_Count_As_Zero_For_Account_Entity_Data": {
                                    "runAfter": {
                                      "Condition_To_Verify_If_No_Open_Assignment_Found_For_Account_Entity": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "retry_count",
                                      "value": 0
                                    }
                                  }
                                },
                                "runAfter": {
                                  "HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Condition_To_Generate_Access_Token_For_Account_Entity": {
                                      "actions": {
                                        "Condition_To_Verify_Access_Token_Generated_Successfully_For_Account_Entity": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Account_Entity": {
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "GenerateAccessTokenVectra_4": [
                                              "Succeeded",
                                              "TimedOut",
                                              "Failed"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Account_Entity": {
                                                "runAfter": {
                                                  "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "DecrementVariable",
                                                "inputs": {
                                                  "name": "retry_count",
                                                  "value": 1
                                                }
                                              },
                                              "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "access_token_generate_error",
                                                  "value": "@true"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@body('GenerateAccessTokenVectra_4')?['status']",
                                                  "success"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "GenerateAccessTokenVectra_4": {
                                          "type": "Workflow",
                                          "inputs": {
                                            "host": {
                                              "triggerName": "manual",
                                              "workflow": {
                                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_Account_Entity_Data_Fetch_Error_True": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "fetch_error",
                                              "value": "@true"
                                            }
                                          },
                                          "Set_Retry_Count_As_Zero_For_Account_Entity_Data_Fetch_Error": {
                                            "runAfter": {
                                              "Set_Account_Entity_Data_Fetch_Error_True": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 0
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@outputs('HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity')['statusCode']",
                                              401
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Get_Access_Token_For_Account_Entity": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                    }
                                  },
                                  "method": "get",
                                  "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                },
                                "runtimeConfiguration": {
                                  "secureData": {
                                    "properties": [
                                      "inputs",
                                      "outputs"
                                    ]
                                  }
                                }
                              },
                              "HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity": {
                                "runAfter": {
                                  "Get_Access_Token_For_Account_Entity": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "headers": {
                                    "Authorization": "Bearer @{body('Get_Access_Token_For_Account_Entity')?['value']}"
                                  },
                                  "method": "GET",
                                  "uri": "@{variables('base_url')}/api/@{variables('api_version')}/accounts/@{int(variables('entity_id'))}"
                                }
                              }
                            },
                            "expression": "@equals(variables('retry_count'), 0)",
                            "limit": {
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('entity_type')",
                              "host"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_Any_Active_Detections_Data_Fetch_Error": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Fetching_Active_Detections": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Active_Detections": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_No_Open_Assignment_Found_As_False": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Assignment_Outcomes_Found": {
                      "actions": {
                        "Post_Message_For_No_Assignment_Outcomes_Found": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "messageBody": "<p><strong>No Assignment Outcomes found.</strong></p>",
                              "recipient": {
                                "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                "groupId": "[[trim(parameters('TeamsGroupId'))]"
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                          }
                        },
                        "Terminate_Due_To_No_Assignment_Outcomes_Found": {
                          "runAfter": {
                            "Post_Message_For_No_Assignment_Outcomes_Found": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Assignment_Outcomes": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('data_count')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Any_Assignment_Outcomes_Data_Fetch_Error": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Fetching_Assignment_Outcomes": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Assignment_Outcomes')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Assignment_Outcomes')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Assignment_Outcomes_Found": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Any_Entity_Data_Fetch_Error": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Fetching_Associated_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while fetching associated host entity data."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Any_Error_Occurred_While_Resolving_Assignment": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Resolving_Assignment": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Resolve_Assignment')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Resolve_Assignment')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero_For_Resolve_Assignment": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Detections": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token_For_Detections": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for active detections."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_Any_Active_Detections_Data_Fetch_Error": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Token_For_Associated_Entity_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for associated entity."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_No_Open_Assignment_Found": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Outcomes": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Generating_Token_For_Outcomes": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for assignment outcomes."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Any_Assignment_Outcomes_Data_Fetch_Error": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Resolve": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Generating_Token_For_Resolving_Assignment": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token for resolving assignment."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Any_Error_Occurred_While_Resolving_Assignment": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_No_Open_Assignment_Found": {
                      "actions": {
                        "Post_Message_For_No_Open_Assignment_Found_For_Associated_Account_Entity": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "messageBody": "<p><strong>No Open Assignment found</strong> for Entity ID: @{variables('entity_id')} and Type: @{variables('entity_type')}.</p>",
                              "recipient": {
                                "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                "groupId": "[[trim(parameters('TeamsGroupId'))]"
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                          }
                        },
                        "Terminate_Due_To_No_Open_Assignment_Found_For_Associated_Entity": {
                          "runAfter": {
                            "Post_Message_For_No_Open_Assignment_Found_For_Associated_Account_Entity": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Perform_Next_Actions_Based_On_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('no_open_assignment')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Assignment_ID": {
                      "runAfter": {
                        "Initialize_Resolve_Request_Body": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "assignment_id",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_Assignment_Outcome_Count": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "data_count",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Break_Loop": {
                      "runAfter": {
                        "Initialize_Page_Number": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "break_loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Data_Fetch_Error_False": {
                      "runAfter": {
                        "Initialize_User_Selected_Outcome": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Detection_Object": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "detection_id",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Detections_Array": {
                      "runAfter": {
                        "Initialize_Detection_Object": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "detections",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Data_Fetch_Error_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Label_For_Triaged_Detections": {
                      "runAfter": {
                        "Initialize_Resolution_Note": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "triage_as",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_No_Open_Assignment_Found_As_False": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "no_open_assignment",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Outcome": {
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "outcome",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Outcome_List": {
                      "runAfter": {
                        "Initialize_Outcome": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "outcome_list",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Page_Number": {
                      "runAfter": {
                        "Initialize_Assignment_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "page",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Resolution_Note": {
                      "runAfter": {
                        "Initialize_Assignment_Outcome_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "note",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Resolve_Request_Body": {
                      "runAfter": {
                        "Initialize_Detections_Array": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "resolve_request_body",
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Outcome_List": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_User_Selected_Outcome": {
                      "runAfter": {
                        "Initialize_Label_For_Triaged_Detections": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "user_outcome",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Set_Break_Loop_False_For_Assignment_Outcomes": {
                      "runAfter": {
                        "Set_Page_Number_For_Assignment_Outcomes": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "break_loop",
                        "value": "@false"
                      }
                    },
                    "Set_Data_Fetch_Error_False_For_Assignment_Outcomes": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Detections": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "fetch_error",
                        "value": "@false"
                      }
                    },
                    "Set_Data_Fetch_Error_False_For_Associated_Entity_Data_Fetch": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Outcomes": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "fetch_error",
                        "value": "@false"
                      }
                    },
                    "Set_Data_Fetch_Error_False_For_Resolve_Assignment": {
                      "runAfter": {
                        "Condition_To_Decide_Adaptive_Card_Schema_Based_On_Number_Of_Active_Detections": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "fetch_error",
                        "value": "@false"
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Set_Page_Number_For_Assignment_Outcomes": {
                      "runAfter": {
                        "Set_Retry_Count_For_Assignment_Outcomes": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "page",
                        "value": 1
                      }
                    },
                    "Set_Retry_Count_For_Assignment_Outcomes": {
                      "runAfter": {
                        "Set_Data_Fetch_Error_False_For_Assignment_Outcomes": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Set_Retry_Count_For_Associated_Entity_Data_Fetch": {
                      "runAfter": {
                        "Set_Data_Fetch_Error_False_For_Associated_Entity_Data_Fetch": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Set_Retry_Count_For_Resolve_Assignment": {
                      "runAfter": {
                        "Set_Data_Fetch_Error_False_For_Resolve_Assignment": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook is triggered on wrong incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Active_Detections": {
                      "actions": {
                        "Condition_To_Verify_Active_Detections_Data_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_If_Count_is_Zero_For_Active_Detections": {
                              "actions": {
                                "Set_Break_Loop_True_For_Count_Zero_For_Active_Detections": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "break_loop",
                                    "value": "@true"
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Active_Detections": {
                                  "runAfter": {
                                    "Set_Break_Loop_True_For_Count_Zero_For_Active_Detections": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Active_Detections_Data": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Check_Next_is_Null_For_Active_Detections": {
                                    "actions": {
                                      "Set_Break_Loop_True_For_Next_is_Null_For_Active_Detections": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "break_loop",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_Retry_Count_As_Zero_For_Next_is_Null_For_Active_Detections": {
                                        "runAfter": {
                                          "Set_Break_Loop_True_For_Next_is_Null_For_Active_Detections": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "For_Each_Detection": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Increment_Page_Number_For_Active_Detections": {
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "page",
                                            "value": 1
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Active_Detections_Data')?['next']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "For_Each_Detection": {
                                    "foreach": "@body('Parse_JSON_For_Active_Detections_Data')?['results']",
                                    "actions": {
                                      "Append_Detection_Object_To_Detections_Array": {
                                        "runAfter": {
                                          "Set_Detection_Object": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "detections",
                                          "value": "@variables('detection_id')"
                                        }
                                      },
                                      "Set_Detection_Object": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "detection_id",
                                          "value": {
                                            "title": "@{items('For_Each_Detection')?['id']} - @{items('For_Each_Detection')?['detection']}",
                                            "value": "@items('For_Each_Detection')?['id']"
                                          }
                                        }
                                      }
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_JSON_For_Active_Detections_Data')?['count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Active_Detections_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')",
                                "schema": {
                                  "properties": {
                                    "count": {
                                      "type": "integer"
                                    },
                                    "next": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "previous": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "results": {
                                      "items": {
                                        "properties": {
                                          "assigned_date": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "assigned_to": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "c_score": {
                                            "type": "integer"
                                          },
                                          "category": {
                                            "type": "string"
                                          },
                                          "certainty": {
                                            "type": "integer"
                                          },
                                          "created_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "custom_detection": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "data_source": {
                                            "type": "object"
                                          },
                                          "description": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_category": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_type": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "filtered_by_ai": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_rule": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_user": {
                                            "type": "boolean"
                                          },
                                          "first_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "grouped_details": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "groups": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "is_custom_model": {
                                            "type": "boolean"
                                          },
                                          "is_marked_custom": {
                                            "type": "boolean"
                                          },
                                          "is_targeting_key_asset": {
                                            "type": "boolean"
                                          },
                                          "is_triaged": {
                                            "type": "boolean"
                                          },
                                          "last_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "notes": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "sensor": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "sensor_name": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "src_account": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_host": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_ip": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "state": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "summary": {
                                            "type": "object"
                                          },
                                          "t_score": {
                                            "type": "integer"
                                          },
                                          "tags": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "targets_key_asset": {
                                            "type": "boolean"
                                          },
                                          "threat": {
                                            "type": "integer"
                                          },
                                          "triage_rule_id": {
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "summary",
                                          "data_source",
                                          "sensor",
                                          "detection",
                                          "filtered_by_ai",
                                          "filtered_by_user",
                                          "is_custom_model",
                                          "custom_detection",
                                          "is_targeting_key_asset",
                                          "c_score",
                                          "note_modified_timestamp",
                                          "note",
                                          "description",
                                          "note_modified_by",
                                          "triage_rule_id",
                                          "filtered_by_rule",
                                          "assigned_date",
                                          "category",
                                          "src_account",
                                          "src_ip",
                                          "targets_key_asset",
                                          "is_marked_custom",
                                          "notes",
                                          "groups",
                                          "tags",
                                          "sensor_name",
                                          "last_timestamp",
                                          "detection_url",
                                          "detection_category",
                                          "assigned_to",
                                          "t_score",
                                          "state",
                                          "detection_type",
                                          "first_timestamp",
                                          "id",
                                          "created_timestamp",
                                          "certainty",
                                          "url",
                                          "threat",
                                          "is_triaged",
                                          "src_host",
                                          "type",
                                          "grouped_details"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Active_Detections": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Active_Detections": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Active_Detections": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Detections": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Active_Detections": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Active_Detections": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Active_Detections_Data_Fetch_Error_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Break_Loop_True_For_Active_Detections_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Retry_Count_As_Zero_For_Active_Detections_Data_Fetch_Error": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Active_Detections_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Active_Detections_Data_Fetch_Error_True": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Active_Detections": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Active_Detections_Associated_With_Entity": {
                          "runAfter": {
                            "Get_Access_Token_For_Active_Detections": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Active_Detections')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "entity_id": "@{int(variables('entity_id'))}",
                              "is_triaged": "false",
                              "page": "@{variables('page')}",
                              "state": "active",
                              "type": "@variables('entity_type')"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/detections"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Assignment_Outcomes": {
                      "actions": {
                        "Condition_To_Verify_Assignment_Outcomes_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_Count_is_Zero_For_Assignment_Outcomes": {
                              "actions": {
                                "Set_Assignment_Outcomes_Count_As_Zero_For_Assignment_Outcomes": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "data_count",
                                    "value": 0
                                  }
                                },
                                "Set_Break_Loop_True_For_Count_Zero_For_Assignment_Outcomes": {
                                  "runAfter": {
                                    "Set_Assignment_Outcomes_Count_As_Zero_For_Assignment_Outcomes": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "break_loop",
                                    "value": "@true"
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Assignment_Outcomes": {
                                  "runAfter": {
                                    "Set_Break_Loop_True_For_Count_Zero_For_Assignment_Outcomes": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Assignment_Outcomes_Data": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Check_Next_is_Null_For_Assignment_Outcomes": {
                                    "actions": {
                                      "Set_Break_Loop_True_For_Next_is_Null_For_Assignment_Outcomes": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "break_loop",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_Retry_Count_As_Zero__For_Next_is_Null_For_Assignment_Outcomes": {
                                        "runAfter": {
                                          "Set_Break_Loop_True_For_Next_is_Null_For_Assignment_Outcomes": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "For_Each_Outcome": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Increment_Page_Number_For_Assignment_Outcomes": {
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "page",
                                            "value": 1
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Assignment_Outcomes_Data')?['next']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "For_Each_Outcome": {
                                    "foreach": "@body('Parse_JSON_For_Assignment_Outcomes_Data')?['results']",
                                    "actions": {
                                      "Append_Outcome_To_Outcome_List": {
                                        "runAfter": {
                                          "Set_Outcome_Object": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "outcome_list",
                                          "value": "@variables('outcome')"
                                        }
                                      },
                                      "Set_Outcome_Object": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "outcome",
                                          "value": {
                                            "title": "@{items('For_Each_Outcome')?['id']} - @{items('For_Each_Outcome')?['title']}",
                                            "value": "@items('For_Each_Outcome')?['id']"
                                          }
                                        }
                                      }
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_JSON_For_Assignment_Outcomes_Data')?['count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Assignment_Outcomes_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Assignment_Outcomes')",
                                "schema": {
                                  "properties": {
                                    "count": {
                                      "type": "integer"
                                    },
                                    "next": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "previous": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "results": {
                                      "items": {
                                        "properties": {
                                          "builtin": {
                                            "type": "boolean"
                                          },
                                          "category": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "title": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "user_selectable": {
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "builtin",
                                          "user_selectable",
                                          "title",
                                          "category"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Assignment_Outcomes": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Assignment_Outcomes": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Assignment_Outcomes": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Assignment_Outcomes": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra_2": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Assignment_Outcomes": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Assignment_Outcomes": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Assignment_Outcomes": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra_2')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra_2": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Assignment_Outcomes_Data_Fetch_Error_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Break_Loop_True_For_Assignment_Outcomes_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Retry_Count_As_Zero_For_Assignment_Outcomes_Data_Fetch_Error": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Assignment_Outcomes_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Assignment_Outcomes_Data_Fetch_Error_True": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Assignment_Outcomes')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Assignment_Outcomes')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Assignment_Outcomes": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Assignment_Outcomes": {
                          "runAfter": {
                            "Get_Access_Token_For_Assignment_Outcomes": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Assignment_Outcomes')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "page": "@{variables('page')}"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/assignment_outcomes"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Break_Loop_False_For_Assignment_Outcomes": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Retry_Count_is_Zero_For_Resolve_Assignment": {
                      "actions": {
                        "Condition_To_Verify_Assignment_Resolved_Successfully": {
                          "actions": {
                            "Set_Retry_Count_As_Zero_For_Resolve_Assignment": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Resolve_Assignment": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Resolve_Assignment": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Resolve_Assignment": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra_5": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Resolve_Assignment": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Resolve_Assignment": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Resolve_Assignment": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra_5')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra_5": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Resolving_Assignment": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Resolving_Assignment": {
                                      "runAfter": {
                                        "Set_Error_True_While_Resolving_Assignment": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Resolve_Assignment')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Resolve_Assignment')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Resolve_Assignment": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Resolve_Assignment": {
                          "runAfter": {
                            "Get_Access_Token_For_Resolve_Assignment": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": "@variables('resolve_request_body')",
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Resolve_Assignment')?['value']}",
                              "Content-Type": "application/json"
                            },
                            "method": "PUT",
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/assignments/@{variables('assignment_id')}/resolve"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Decide_Body_For_Resolve_Assignment_Operation_Based_On_Detections": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault_3": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraDynamicResolveAssignment",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId11'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId11')]",
                "contentId": "[variables('_playbookContentId11')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion11')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Dynamic Resolve Assignment",
            "description": "When an incident is closed, This playbook will prompt the operator to select an outcome from a predefined list, choose detections to triage from associated detection IDs and name list, provide a resolution note, and label the triaged detections. Based on the provided input playbook will resolve the open assignment.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId. ",
              "4. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraDynamicResolveAssignment playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft Sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
              "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
              "a. Go to Microsoft Sentinel → <your workspace> → Automation",
              "b. Click on Create → Automation rule",
              "c. Provide name for your rule",
              "d. Select Trigger as When incident is updated.",
              "e. In Conditions, select Status Equals 'Closed'.",
              "f. In Actions dropdown select Run playbook",
              "g. In second dropdown select your deployed playbook",
              "h. Click on Apply",
              "i. Save the Automation rule.",
              "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Dynamic",
              "Resolve",
              "Assignment",
              "Triage",
              "Active",
              "Detections"
            ],
            "lastUpdateTime": "2024-08-30T15:13:40.898Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId11')]",
        "contentKind": "Playbook",
        "displayName": "VectraDynamicResolveAssignment",
        "contentProductId": "[variables('_playbookcontentProductId11')]",
        "id": "[variables('_playbookcontentProductId11')]",
        "version": "[variables('playbookVersion11')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName12')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraGenerateAccessToken Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion12')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraGenerateAccessToken",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "azure key vault": {
              "type": "string",
              "defaultValue": "vault.azure",
              "metadata": {
                "description": "Enter value for azure key vault"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your Vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            }
          },
          "variables": {
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-2": "[[variables('connection-2')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "azure key vault": {
                      "type": "string",
                      "defaultValue": "[[trim(parameters('azure key vault'))]"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http"
                    }
                  },
                  "actions": {
                    "Condition_To_Generate_New_Access_Token_If_Refresh_Token_Is_Empty": {
                      "runAfter": {
                        "Initialize_Refresh_Token": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Condition_To_Verify_Successful_Token_Generation_Via_Refresh_Token": {
                            "actions": {
                              "Condition_To_Verify_Token_Updated_In_Key_Vault_Successfully_Via_Refresh_Token": {
                                "actions": {
                                  "Response_to_Indicate_Success_While_Updating_Token_In_Vault_Via_Refresh_Token": {
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                      "body": {
                                        "message": "New access code has been generated via refresh token and successfully updated in key vault.",
                                        "status": "success"
                                      },
                                      "statusCode": "@outputs('HTTP_Request_To_Update_Access_Token_In_Key_Vault_Via_Refresh_Token')['statusCode']"
                                    }
                                  },
                                  "Terminate_Due_To_Access_Token_Updated_Successfully": {
                                    "runAfter": {
                                      "Response_to_Indicate_Success_While_Updating_Token_In_Vault_Via_Refresh_Token": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                      "runStatus": "Succeeded"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "HTTP_Request_To_Update_Access_Token_In_Key_Vault_Via_Refresh_Token": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Response_To_Indicate_Failure_While_Updating_Token_In_Vault_Via_Refresh_Token": {
                                      "type": "Response",
                                      "kind": "Http",
                                      "inputs": {
                                        "body": {
                                          "message": "Error occurred while updating new access token generated via refresh token with status code: @{outputs('HTTP_Request_To_Update_Access_Token_In_Key_Vault_Via_Refresh_Token')['statusCode']}",
                                          "status": "failure"
                                        },
                                        "statusCode": "@outputs('HTTP_Request_To_Update_Access_Token_In_Key_Vault_Via_Refresh_Token')['statusCode']"
                                      }
                                    },
                                    "Terminate_Due_To_Failure_While_Updating_Access_Token_Via_Refresh_Token": {
                                      "runAfter": {
                                        "Response_To_Indicate_Failure_While_Updating_Token_In_Vault_Via_Refresh_Token": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Terminate",
                                      "inputs": {
                                        "runError": {
                                          "code": "@{outputs('HTTP_Request_To_Update_Access_Token_In_Key_Vault_Via_Refresh_Token')['statusCode']}",
                                          "message": "@{body('HTTP_Request_To_Update_Access_Token_In_Key_Vault_Via_Refresh_Token')}"
                                        },
                                        "runStatus": "Failed"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Update_Access_Token_In_Key_Vault_Via_Refresh_Token')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "HTTP_Request_To_Update_Access_Token_In_Key_Vault_Via_Refresh_Token": {
                                "runAfter": {
                                  "Parse_JSON_For_Authentication_Data_Via_Refresh_Token": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "authentication": {
                                    "audience": "[[concat('https://',trim(parameters('azure key vault')),'.net')]",
                                    "type": "ManagedServiceIdentity"
                                  },
                                  "body": {
                                    "value": "@body('Parse_JSON_For_Authentication_Data_Via_Refresh_Token')?['access_token']"
                                  },
                                  "method": "PUT",
                                  "uri": "@{concat('https://',variables('key_vault_name'),'.',parameters('azure key vault'),'.net/secrets/',variables('access_token_secret_name'),'?api-version=7.4')}"
                                },
                                "runtimeConfiguration": {
                                  "secureData": {
                                    "properties": [
                                      "outputs"
                                    ]
                                  }
                                }
                              },
                              "Parse_JSON_For_Authentication_Data_Via_Refresh_Token": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token')",
                                  "schema": {
                                    "properties": {
                                      "access_token": {
                                        "type": "string"
                                      },
                                      "expires_in": {
                                        "type": "integer"
                                      },
                                      "token_type": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              }
                            },
                            "runAfter": {
                              "HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token": [
                                "Succeeded",
                                "TimedOut",
                                "Failed"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Condition_To_Verify_Unauthorized_Attempt": {
                                  "else": {
                                    "actions": {
                                      "Response_To_Indicate_Unknown_Error_While_Generating_Token": {
                                        "type": "Response",
                                        "kind": "Http",
                                        "inputs": {
                                          "body": {
                                            "message": "Unknown error occurred while generating new access token via refresh token with status code: @{outputs('HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token')['statusCode']}.",
                                            "status": "failure"
                                          },
                                          "statusCode": "@outputs('HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token')['statusCode']"
                                        }
                                      },
                                      "Terminate_Due_To_Error_Occurred_While_Generating_Access_Token_Via_Refresh_Token": {
                                        "runAfter": {
                                          "Response_To_Indicate_Unknown_Error_While_Generating_Token": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Terminate",
                                        "inputs": {
                                          "runError": {
                                            "code": "@{outputs('HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token')['statusCode']}",
                                            "message": "@{body('HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token')}"
                                          },
                                          "runStatus": "Failed"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "or": [
                                      {
                                        "equals": [
                                          "@outputs('HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token')['statusCode']",
                                          400
                                        ]
                                      },
                                      {
                                        "equals": [
                                          "@outputs('HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token')['statusCode']",
                                          401
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@outputs('HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token')['statusCode']",
                                    200
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "HTTP_Request_To_Generate_Access_Token_Via_Refresh_Token": {
                            "runAfter": {
                              "Set_Grant_Type_For_Refresh_Token": [
                                "Succeeded"
                              ]
                            },
                            "type": "Http",
                            "inputs": {
                              "authentication": {
                                "password": "@variables('client_secret')",
                                "type": "Basic",
                                "username": "@variables('client_id')"
                              },
                              "body": "grant_type=@{variables('grant_type')}&refresh_token=@{variables('refresh_token')}",
                              "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                              },
                              "method": "POST",
                              "uri": "@{variables('base_url')}/oauth2/token"
                            },
                            "runtimeConfiguration": {
                              "secureData": {
                                "properties": [
                                  "outputs"
                                ]
                              }
                            }
                          },
                          "Set_Grant_Type_For_Refresh_Token": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "grant_type",
                              "value": "refresh_token"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('refresh_token'))",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_Both_Tokens_Updated_Successfully": {
                      "actions": {
                        "Response_To_Indicate_Success_While_Updating_Token_In_Vault": {
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": {
                              "message": "New access token and refresh token has been generated and updated in key vault.",
                              "status": "success"
                            },
                            "statusCode": 200
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Verify_Successful_Token_Generation": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Response_To_Indicate_Failure_While_Updating_Token_In_Vault": {
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": {
                                "message": "Error occured while updating tokens in key vault.",
                                "status": "failure"
                              },
                              "statusCode": "@outputs('HTTP_Request_To_Update_Access_Token_In_Key_Vault')['statusCode']"
                            }
                          },
                          "Terminate_Due_To_Failure_While_Updating_Tokens_in_Key_Vault": {
                            "runAfter": {
                              "Response_To_Indicate_Failure_While_Updating_Token_In_Vault": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "message": "Unknown Error Occurred While Updating Tokens.\nRefreshToken Body: @{body('HTTP_Request_To_Update_Refresh_Token_in_Key_Vault')}\nAccessToken Body:@{body('HTTP_Request_To_Update_Access_Token_In_Key_Vault')}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('set_access_token')",
                              "@true"
                            ]
                          },
                          {
                            "equals": [
                              "@variables('set_refresh_token')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_Successful_Token_Generation": {
                      "actions": {
                        "Condition_To_Verify_Access_Token_Updated_Successfully": {
                          "actions": {
                            "Set_Is_Access_Token_Updated_True": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "set_access_token",
                                "value": "@true"
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Update_Access_Token_In_Key_Vault": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Update_Access_Token_In_Key_Vault')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Condition_To_Verify_Refresh_Token_Updated_Successfully": {
                          "actions": {
                            "Set_Is_Refresh_Token_Updated_True": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "set_refresh_token",
                                "value": "@true"
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Update_Refresh_Token_in_Key_Vault": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Update_Refresh_Token_in_Key_Vault')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP_Request_To_Update_Access_Token_In_Key_Vault": {
                          "runAfter": {
                            "Parse_JSON_For_Authentication_Data": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "authentication": {
                              "audience": "[[concat('https://',trim(parameters('azure key vault')),'.net')]",
                              "type": "ManagedServiceIdentity"
                            },
                            "body": {
                              "value": "@body('Parse_JSON_For_Authentication_Data')?['access_token']"
                            },
                            "method": "PUT",
                            "uri": "@{concat('https://',variables('key_vault_name'),'.',parameters('azure key vault'),'.net/secrets/',variables('access_token_secret_name'),'?api-version=7.4')}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Update_Refresh_Token_in_Key_Vault": {
                          "runAfter": {
                            "Parse_JSON_For_Authentication_Data": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "authentication": {
                              "audience": "[[concat('https://',trim(parameters('azure key vault')),'.net')]",
                              "type": "ManagedServiceIdentity"
                            },
                            "body": {
                              "value": "@body('Parse_JSON_For_Authentication_Data')?['refresh_token']"
                            },
                            "method": "PUT",
                            "uri": "@{concat('https://',variables('key_vault_name'),'.',parameters('azure key vault'),'.net/secrets/',variables('refresh_token_secret_name'),'?api-version=7.4')}"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "outputs"
                              ]
                            }
                          }
                        },
                        "Parse_JSON_For_Authentication_Data": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('HTTP_Request_To_Generate_Access_Token')",
                            "schema": {
                              "properties": {
                                "access_token": {
                                  "type": "string"
                                },
                                "expires_in": {
                                  "type": "integer"
                                },
                                "refresh_expires_in": {
                                  "type": "integer"
                                },
                                "refresh_token": {
                                  "type": "string"
                                },
                                "token_type": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "HTTP_Request_To_Generate_Access_Token": [
                          "Succeeded",
                          "Failed",
                          "TimedOut"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Response_For_Indicating_Failure_While_Generating_Token": {
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                              "body": {
                                "message": "Error occurred while generating new access token with status code @{outputs('HTTP_Request_To_Generate_Access_Token')['statusCode']}.",
                                "status": "failure"
                              },
                              "statusCode": "@outputs('HTTP_Request_To_Generate_Access_Token')['statusCode']"
                            }
                          },
                          "Terminate_Due_To_Failure_While_Generating_Token": {
                            "runAfter": {
                              "Response_For_Indicating_Failure_While_Generating_Token": [
                                "Succeeded"
                              ]
                            },
                            "type": "Terminate",
                            "inputs": {
                              "runError": {
                                "code": "@{outputs('HTTP_Request_To_Generate_Access_Token')['statusCode']}",
                                "message": "@{body('HTTP_Request_To_Generate_Access_Token')}"
                              },
                              "runStatus": "Failed"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('HTTP_Request_To_Generate_Access_Token')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Get_Refresh_Token": {
                      "runAfter": {
                        "Get_Vectra_Client_Secret": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Vectra-Refresh-Token')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_Vectra_Client_ID": {
                      "runAfter": {
                        "Initialize_Vectra_Refresh_Token_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Vectra-Client-ID')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_Vectra_Client_Secret": {
                      "runAfter": {
                        "Get_Vectra_Client_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent('Vectra-Client-Secret')}/value"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "HTTP_Request_To_Generate_Access_Token": {
                      "runAfter": {
                        "Set_Grant_Type_For_New_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "password": "@variables('client_secret')",
                          "type": "Basic",
                          "username": "@variables('client_id')"
                        },
                        "body": "grant_type=@{variables('grant_type')}",
                        "headers": {
                          "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "method": "POST",
                        "retryPolicy": {
                          "type": "none"
                        },
                        "uri": "@{variables('base_url')}/oauth2/token"
                      },
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Grant_Type": {
                      "runAfter": {
                        "Initialize_Key_Vault_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "grant_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Is_Access_Token_Updated_False": {
                      "runAfter": {
                        "Initialize_Grant_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "set_access_token",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Is_Refresh_Token_Updated_False": {
                      "runAfter": {
                        "Initialize_Is_Access_Token_Updated_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "set_refresh_token",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Key_Vault_Name": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "key_vault_name",
                            "type": "string",
                            "value": "[[trim(parameters('KeyVaultName'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Refresh_Token": {
                      "runAfter": {
                        "Initialize_Vectra_Client_Secret": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "refresh_token",
                            "type": "string",
                            "value": "@body('Get_Refresh_Token')?['value']"
                          }
                        ]
                      }
                    },
                    "Initialize_Vectra_Access_Token_Name": {
                      "runAfter": {
                        "Initialize_Is_Refresh_Token_Updated_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_secret_name",
                            "type": "string",
                            "value": "Vectra-Access-Token"
                          }
                        ]
                      }
                    },
                    "Initialize_Vectra_Client_ID": {
                      "runAfter": {
                        "Get_Refresh_Token": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "client_id",
                            "type": "string",
                            "value": "@body('Get_Vectra_Client_ID')?['value']"
                          }
                        ]
                      }
                    },
                    "Initialize_Vectra_Client_Secret": {
                      "runAfter": {
                        "Initialize_Vectra_Client_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "client_secret",
                            "type": "string",
                            "value": "@body('Get_Vectra_Client_Secret')?['value']"
                          }
                        ]
                      }
                    },
                    "Initialize_Vectra_Refresh_Token_Name": {
                      "runAfter": {
                        "Initialize_Vectra_Access_Token_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "refresh_token_secret_name",
                            "type": "string",
                            "value": "Vectra-Refresh-Token"
                          }
                        ]
                      }
                    },
                    "Set_Grant_Type_For_New_Access_Token": {
                      "runAfter": {
                        "Condition_To_Generate_New_Access_Token_If_Refresh_Token_Is_Empty": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "grant_type",
                        "value": "client_credentials"
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraGenerateAccessToken",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId12'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId12')]",
                "contentId": "[variables('_playbookContentId12')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion12')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Generate Access Token",
            "description": "This playbook will generate access token and refresh token for another playbooks.",
            "prerequisites": [
              "1. Users must have a valid pair of Vectra API Client ID and Client secret credentials.",
              "2. Store Vectra API Client credentials in Key Vault and obtain keyvault name and tenantId",
              "a. Create a Key Vault with a unique name",
              "b. Go to KeyVault → secrets, click on Generate/import and create 'Vectra-Client-ID' & 'Vectra-Client-Secret' for storing client_id and client_secret respectively",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'"
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Access-Token",
              "Refresh-Token"
            ],
            "lastUpdateTime": "2024-08-30T15:13:41.390Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId12')]",
        "contentKind": "Playbook",
        "displayName": "VectraGenerateAccessToken",
        "contentProductId": "[variables('_playbookcontentProductId12')]",
        "id": "[variables('_playbookcontentProductId12')]",
        "version": "[variables('playbookVersion12')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName13')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraIncidentTimelineUpdate Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion13')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraIncidentTimelineUpdate",
              "type": "string"
            },
            "WorkSpaceName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter Log Analytics Workspace name in which you have deployed Data Connector."
              }
            }
          },
          "variables": {
            "AzuremonitorlogsConnectionName": "[[concat('Azuremonitorlogs-', trim(parameters('PlaybookName')))]",
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_to_check_Response_of_Query": {
                      "actions": {
                        "Iterate_to_add_alerts_in_the_incident_timeline": {
                          "foreach": "@body('Run_query_and_list_most_recent_Alerts_to_keep_in_Incident_Timeline')?['value']",
                          "actions": {
                            "Add_alert_to_incident": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                  "relatedResourceId": "@{items('Iterate_to_add_alerts_in_the_incident_timeline')?['SystemAlertId']}"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/Incidents/Relation/Create"
                              }
                            }
                          },
                          "runAfter": {
                            "Iterate_to_remove_alerts_from_incident_other_then_most_recent_alerts": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach",
                          "runtimeConfiguration": {
                            "concurrency": {
                              "repetitions": 1
                            }
                          }
                        },
                        "Iterate_to_remove_alerts_from_incident_other_then_most_recent_alerts": {
                          "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
                          "actions": {
                            "Remove_alert_from_incident": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "incidentArmId": "@triggerBody()?['object']?['id']",
                                  "relatedResourceId": "@items('Iterate_to_remove_alerts_from_incident_other_then_most_recent_alerts')['properties']['systemAlertId']"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/Incidents/Relation/Delete"
                              }
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "Run_query_and_list_most_recent_Alerts_to_keep_in_Incident_Timeline": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@empty(body('Run_query_and_list_most_recent_Alerts_to_keep_in_Incident_Timeline')?['value'])",
                                "@true"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_to_do_action_on_host_or_account_entity_available_or_not": {
                      "actions": {
                        "Terminate": {
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Iterate_to_find_host_or_account_entity_value": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('IsEntityHostAvailable')",
                              "@false"
                            ]
                          },
                          {
                            "equals": [
                              "@variables('IsEntityAccountAvailable')",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_detection_filter_variable": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "DetectionNameStartsWith",
                            "type": "string",
                            "value": "Vectra AI Detection"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_Incident_ARM_Name": {
                      "runAfter": {
                        "Initialize_variable_is_entity_account_available_or_not": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ARM Name",
                            "type": "string",
                            "value": "@triggerBody()?['object']?['name']"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_alert_ids_to_add_in_incident": {
                      "runAfter": {
                        "Initialize_detection_filter_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "AlertIdsToAddInIncident",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_entity": {
                      "runAfter": {
                        "Initialize_variable_alert_ids_to_add_in_incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Entity",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_is_entity_account_available_or_not": {
                      "runAfter": {
                        "Initialize_variable_is_entity_host_available_or_not": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IsEntityAccountAvailable",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_is_entity_host_available_or_not": {
                      "runAfter": {
                        "Initialize_variable_entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "IsEntityHostAvailable",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Iterate_to_find_host_or_account_entity_value": {
                      "foreach": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                      "actions": {
                        "Condition_to_check_entity_kind_to_Host": {
                          "actions": {
                            "Append_to_string_variable_host_value": {
                              "runAfter": {
                                "Set_variable_flag_to_true_if_entity_host_is_available": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "Entity",
                                "value": "@{items('Iterate_to_find_host_or_account_entity_value')?['properties']?['hostName']}"
                              }
                            },
                            "Set_variable_flag_to_true_if_entity_host_is_available": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "IsEntityHostAvailable",
                                "value": "@true"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Condition_to_check_entity_kind_to_Account": {
                                "actions": {
                                  "Append_to_string_variable_account_value": {
                                    "runAfter": {
                                      "Set_variable_flag_to_true_if_entity_account_is_available": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                      "name": "Entity",
                                      "value": "@concat(items('Iterate_to_find_host_or_account_entity_value')?['properties']?['accountName'],'@',items('Iterate_to_find_host_or_account_entity_value')?['properties']?['upnSuffix'])"
                                    }
                                  },
                                  "Set_variable_flag_to_true_if_entity_account_is_available": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "IsEntityAccountAvailable",
                                      "value": "@true"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@items('Iterate_to_find_host_or_account_entity_value')?['kind']",
                                        "Account"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@items('Iterate_to_find_host_or_account_entity_value')?['kind']",
                                  "Host"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_Incident_ARM_Name": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Run_query_and_list_most_recent_Alerts_to_keep_in_Incident_Timeline": {
                      "runAfter": {
                        "Condition_to_do_action_on_host_or_account_entity_available_or_not": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "let alertIds = SecurityIncident\n| where TimeGenerated >= ago(30d)\n| where IncidentName == \"@{variables('ARM Name')}\"\n| top 1 by TimeGenerated desc\n| parse RelatedAnalyticRuleIds with '[\"' ruleId:string '\"]'\n| extend IncidentAlertType = ruleId\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind=inner(SecurityAlert) on $left.AlertId == $right.SystemAlertId;\nlet newalerts = SecurityAlert\n| where TimeGenerated >= ago(30d)\n| where SystemAlertId !in (alertIds)\n| where DisplayName startswith \"@{variables('DetectionNameStartsWith')}\"\n| parse-kv Entities as (HostName:string,Name:string) with (pair_delimiter=\",\", kv_delimiter=\":\", quote='\"')\n| where (HostName == \"@{variables('Entity')}\" and @{variables('IsEntityHostAvailable')} == @{true}) or (Name == \"@{variables('Entity')}\" and @{variables('IsEntityAccountAvailable')} == @{true}) ;\nlet detections = union alertIds, newalerts\n| where DisplayName startswith \"Vectra AI Detection\"\n| extend timetosort = iff(AlertType contains IncidentAlertType , StartTime, TimeGenerated)\n| summarize arg_max(timetosort, *) by DisplayName\n| project SystemAlertId;\nlet incidentalerts = union alertIds, newalerts\n| where DisplayName !startswith \"Vectra AI Detection\"\n| top 1 by StartTime\n| project SystemAlertId;\nunion detections, incidentalerts",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryData",
                        "queries": {
                          "resourcegroups": "[[resourceGroup().name]",
                          "resourcename": "[[trim(parameters('WorkSpaceName'))]",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "[[subscription().subscriptionId]",
                          "timerange": "Set in query"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuremonitorlogs": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                        "connectionName": "[[variables('AzuremonitorlogsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]"
                      },
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "VectraIncidentTimelineUpdate",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzuremonitorlogsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzuremonitorlogsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId13'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId13')]",
                "contentId": "[variables('_playbookContentId13')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion13')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "VectraIncidentTimelineUpdate",
            "description": "This playbook will update the incident timeline by keeping most recent alerts and adding most recent detections from entities timeline to the incident timeline.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to send appropriate alerts to Microsoft Sentinel."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select AzureMonitorLogs connection resource",
              "2. Go to General → edit API connection",
              "5. Click Authorize",
              "6. Sign in",
              "7. Click Save",
              "8. Repeat steps for other connections",
              "**b. Assign Role to update incident**",
              "After authorizing each connection, assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2. Add role assignment",
              "3. Assignment type: Job function roles",
              "4. Role: Microsoft Sentinel Contributor",
              "5. Members: select managed identity for assigned access to and add your logic app as member",
              "6. Click on review+assign",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, below analytical rules should be configured to trigger an incident.",
              "a. Vectra Detection Account Alerts",
              "b. Vectra Detection Host Alerts",
              "c. Vectra Priority Account Incidents",
              "d. Vectra Priority Host Incidents",
              "e. Vectra Create Incident Based On Tag For Entity Type Account.",
              "f. Vectra Create Incident Based On Tag For Entity Type Host.",
              "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
              "a. Go to Microsoft Sentinel → <your workspace> → Automation",
              "b. Click on Create → Automation rule",
              "c. Provide name for your rule",
              "d. In Analytic rule name condition, select analytic rule which you have created.",
              "e. In Actions dropdown select Run playbook",
              "f. In second dropdown select your deployed playbook",
              "g. Click on Apply",
              "h. Save the Automation rule.",
              "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "IncidentTimeline",
              "Entities",
              "Detections"
            ],
            "lastUpdateTime": "2024-08-30T15:13:41.794Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId13')]",
        "contentKind": "Playbook",
        "displayName": "VectraIncidentTimelineUpdate",
        "contentProductId": "[variables('_playbookcontentProductId13')]",
        "id": "[variables('_playbookcontentProductId13')]",
        "version": "[variables('playbookVersion13')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName14')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraMarkDetectionsAsFixed Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion14')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraMarkDetectionsAsFixed",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "IncidentComment": {
              "type": "string",
              "defaultValue": "Active Detections associated with an Entity has been fixed successfully.",
              "metadata": {
                "description": "Enter comment you want to add in incident."
              }
            },
            "EntityNote": {
              "type": "string",
              "defaultValue": "Active Detections associated with an Entity has been fixed successfully.",
              "metadata": {
                "description": "Enter a note you want to add in Vectra Entity."
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Add_Comment_To_Incident_(V3)": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_While_Generating_Token_For_Mark_Detections_Fixed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{variables('comment')}<br>\n<strong>Detections Marked As Fixed: </strong>@{variables('detection_ids')}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Condition_To_Perform_Next_Action_Based_On_User_Choice": {
                      "runAfter": {
                        "Post_Adaptive_Card_For_Choice_Of_Detections_To_Be_Fixed": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Post_Detection_List_And_Wait_For_Response": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                              "body": {
                                "body": {
                                  "messageBody": "{\n    \"type\": \"AdaptiveCard\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Vectra Mark Detections As Fixed\",\n            \"style\": \"heading\",\n            \"horizontalAlignment\": \"center\",\n            \"color\": \"accent\",\n            \"size\": \"medium\",\n            \"weight\": \"bolder\",\n            \"id\": \"title\",\n            \"wrap\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"detection-choice\",\n            \"choices\": @{variables('detection_choice')},\n            \"isRequired\": true,\n            \"label\": \"Please select detections to mark fixed.\",\n            \"isMultiSelect\": true,\n            \"separator\": true,\n            \"errorMessage\": \"Please select atleast one detection.\"\n        },\n        {\n            \"type\": \"ActionSet\",\n            \"actions\": [\n                {\n                    \"type\": \"Action.Submit\",\n                    \"title\": \"Submit Answer\",\n                    \"id\": \"submit\",\n                    \"style\": \"positive\"\n                }\n            ]\n        }\n    ],\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"version\": \"1.3\"\n}",
                                  "recipient": {
                                    "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                    "groupId": "[[trim(parameters('TeamsGroupId'))]"
                                  },
                                  "updateMessage": "Thanks for your response!"
                                },
                                "notificationUrl": "@{listCallbackUrl()}"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['teams']['connectionId']"
                                }
                              },
                              "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                            }
                          },
                          "Set_Detection_IDs_From_User_Input": {
                            "runAfter": {
                              "Post_Detection_List_And_Wait_For_Response": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "detection_ids",
                              "value": "@split(body('Post_Detection_List_And_Wait_For_Response')?['data']?['detection-choice'], ',')"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Post_Adaptive_Card_For_Choice_Of_Detections_To_Be_Fixed')?['data']?['choice']",
                              "all"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_Any_Active_Detections_Data_Fetch_Error": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Fetching_Active_Detections": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Active_Detections_For_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Active_Detections_For_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate__Execution_If_No_Active_Detections_Found": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No alerts found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Detections_Count_Zero_As_False": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_For_Mark_Detections_As_Fixed": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_For_Mark_Detections_As_Fixed": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Mark_Detections_As_Fixed_For_Associated_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Mark_Detections_As_Fixed_For_Associated_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero_For_Mark_Detections_As_Fixed": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('mark_fixed_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Adding_Note_To_Vectra_Entity": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Adding_Note_To_Vectra_Entity": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Add_Note_To_Vectra_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero_For_Add_Note_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('note_add_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_For_Active_Detections": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Generating_Token_For_Active_Detections": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating token for active detections."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_Any_Active_Detections_Data_Fetch_Error": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_For_Add_Note_To_Entity": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_While_Adding_Note_To_Vectra_Entity": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_For_Mark_Detections_Fixed": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Generating_Access_Token_For_Mark_Detections": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_For_Mark_Detections_As_Fixed": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate__Execution_If_No_Active_Detections_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Active_Detections_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Active_Detections": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('detection_count_zero')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Break_Loop": {
                      "runAfter": {
                        "Initialize_Detection_Choice_To_Send": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "break_loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Comment": {
                      "runAfter": {
                        "Initialize_Note": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "comment",
                            "type": "string",
                            "value": "[[trim(parameters('IncidentComment'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Data_Fetch_Error_False": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Detection_Choice_To_Send": {
                      "runAfter": {
                        "Initialize_Detection_IDs": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "detection_choice",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Detection_IDs": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "detection_ids",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Detections_Count_Zero_As_False": {
                      "runAfter": {
                        "Initialize_Error_False_While_Adding_Note_To_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "detection_count_zero",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Comment": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Adding_Note_To_Entity": {
                      "runAfter": {
                        "Initialize_Error_False_While_Marking_Detections_As_Fixed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "note_add_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Data_Fetch_Error_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Marking_Detections_As_Fixed": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "mark_fixed_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Note": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "note",
                            "type": "string",
                            "value": "[[trim(parameters('EntityNote'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Page_Number": {
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "page",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Page_Number": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Post_Adaptive_Card_For_Choice_Of_Detections_To_Be_Fixed": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_While_Generating_Token_For_Active_Detections": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "body": {
                            "messageBody": "{\n    \"type\": \"AdaptiveCard\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Vectra Mark Detections As Fixed\",\n            \"style\": \"heading\",\n            \"horizontalAlignment\": \"center\",\n            \"color\": \"accent\",\n            \"size\": \"medium\",\n            \"weight\": \"bolder\",\n            \"id\": \"title\",\n            \"wrap\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Entity ID =  @{variables('entity_id')}\\n\\nEntity Type= @{variables('entity_type')}\",\n            \"wrap\": true,\n            \"style\": \"default\",\n            \"color\": \"accent\",\n            \"separator\": true,\n            \"id\": \"x\"\n        },\n        {\n            \"type\": \"Input.ChoiceSet\",\n            \"id\": \"choice\",\n            \"choices\": [\n                {\n                    \"title\": \"ALL\",\n                    \"value\": \"all\"\n                },\n                {\n                    \"title\": \"Selected Detections\",\n                    \"value\": \"selected\"\n                }\n            ],\n            \"isRequired\": true,\n            \"label\": \"Please select option for detections to mark them fixed.\",\n            \"separator\": true,\n            \"errorMessage\": \"Please select atleast one option.\"\n        },\n        {\n            \"type\": \"ActionSet\",\n            \"actions\": [\n                {\n                    \"type\": \"Action.Submit\",\n                    \"title\": \"Submit Answer\",\n                    \"id\": \"submit\",\n                    \"style\": \"positive\"\n                }\n            ]\n        }\n    ],\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"version\": \"1.3\"\n}",
                            "recipient": {
                              "channelId": "[[trim(parameters('TeamsChannelId'))]",
                              "groupId": "[[trim(parameters('TeamsGroupId'))]"
                            },
                            "updateMessage": "Thanks for your response!"
                          },
                          "notificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                      }
                    },
                    "Set_Data_Fetch_Error_False_For_Mark_Detections_Fixed": {
                      "runAfter": {
                        "Set_Retry_Count_For_Mark_Detections_Fixed": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "fetch_error",
                        "value": "@false"
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Set_Retry_Count_For_Mark_Detections_Fixed": {
                      "runAfter": {
                        "Condition_To_Perform_Next_Action_Based_On_User_Choice": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook is triggered on wrong incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Active_Detections": {
                      "actions": {
                        "Condition_To_Verify_Active_Detections_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_If_Count_is_Zero_For_Active_Detections": {
                              "actions": {
                                "Set_Break_Loop_True_For_Count_Zero_For_Active_Detections": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "break_loop",
                                    "value": "@true"
                                  }
                                },
                                "Set_Detection_Count_Zero_True": {
                                  "runAfter": {
                                    "Set_Break_Loop_True_For_Count_Zero_For_Active_Detections": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "detection_count_zero",
                                    "value": "@true"
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Active_Detections": {
                                  "runAfter": {
                                    "Set_Detection_Count_Zero_True": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Active_Detections_Data": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Check_Next_is_Null_For_Active_Detections": {
                                    "actions": {
                                      "Set_Break_Loop_True_For_Next_is_Null": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "break_loop",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_Retry_Count_As_Zero_For_Next_is_Null": {
                                        "runAfter": {
                                          "Set_Break_Loop_True_For_Next_is_Null": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "For_Each_Detections": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Increment_Page_Number": {
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "page",
                                            "value": 1
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Active_Detections_Data')?['next']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "For_Each_Detections": {
                                    "foreach": "@body('Parse_JSON_For_Active_Detections_Data')?['results']",
                                    "actions": {
                                      "Append_Detection_ID_to_Detection_ID_Array": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "detection_ids",
                                          "value": "@items('For_Each_Detections')?['id']"
                                        }
                                      },
                                      "Append_To_Detection_Choice_Array": {
                                        "runAfter": {
                                          "Append_Detection_ID_to_Detection_ID_Array": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "detection_choice",
                                          "value": {
                                            "title": "@{items('For_Each_Detections')?['id']} - @{items('For_Each_Detections')?['detection']}",
                                            "value": "@{items('For_Each_Detections')?['id']}"
                                          }
                                        }
                                      }
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_JSON_For_Active_Detections_Data')?['count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Active_Detections_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Active_Detections_For_Entity')",
                                "schema": {
                                  "properties": {
                                    "count": {
                                      "type": "integer"
                                    },
                                    "next": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "previous": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "results": {
                                      "items": {
                                        "properties": {
                                          "assigned_date": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "assigned_to": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "c_score": {
                                            "type": "integer"
                                          },
                                          "category": {
                                            "type": "string"
                                          },
                                          "certainty": {
                                            "type": "integer"
                                          },
                                          "created_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "custom_detection": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "data_source": {
                                            "type": "object"
                                          },
                                          "description": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_category": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_type": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "filtered_by_ai": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_rule": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_user": {
                                            "type": "boolean"
                                          },
                                          "first_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "grouped_details": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "groups": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "is_custom_model": {
                                            "type": "boolean"
                                          },
                                          "is_marked_custom": {
                                            "type": "boolean"
                                          },
                                          "is_targeting_key_asset": {
                                            "type": "boolean"
                                          },
                                          "is_triaged": {
                                            "type": "boolean"
                                          },
                                          "last_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "notes": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "sensor": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "sensor_name": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "src_account": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_host": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_ip": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "state": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "summary": {
                                            "type": "object"
                                          },
                                          "t_score": {
                                            "type": "integer"
                                          },
                                          "tags": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "targets_key_asset": {
                                            "type": "boolean"
                                          },
                                          "threat": {
                                            "type": "integer"
                                          },
                                          "triage_rule_id": {
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "summary",
                                          "data_source",
                                          "sensor",
                                          "detection",
                                          "filtered_by_ai",
                                          "filtered_by_user",
                                          "is_custom_model",
                                          "custom_detection",
                                          "is_targeting_key_asset",
                                          "c_score",
                                          "note_modified_timestamp",
                                          "note",
                                          "description",
                                          "note_modified_by",
                                          "triage_rule_id",
                                          "filtered_by_rule",
                                          "assigned_date",
                                          "category",
                                          "src_account",
                                          "src_ip",
                                          "targets_key_asset",
                                          "is_marked_custom",
                                          "notes",
                                          "groups",
                                          "tags",
                                          "sensor_name",
                                          "last_timestamp",
                                          "detection_url",
                                          "detection_category",
                                          "assigned_to",
                                          "t_score",
                                          "state",
                                          "detection_type",
                                          "first_timestamp",
                                          "id",
                                          "created_timestamp",
                                          "certainty",
                                          "url",
                                          "threat",
                                          "is_triaged",
                                          "src_host",
                                          "type",
                                          "grouped_details"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Active_Detections_For_Entity": [
                              "Succeeded",
                              "Failed",
                              "TimedOut"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_for_Active_Detection": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Active_Detections": {
                                    "actions": {
                                      "Decrement_Retry_Count_for_Active_Detection": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra_2": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_for_Active_Detection": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_for_Active_Detection": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra_2')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra_2": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Active_Detections_Data_Fetch_Error_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Break_Loop_True_For_Active_Detections_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Active_Detection": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Active_Detection": {
                                      "runAfter": {
                                        "Set_Active_Detections_Data_Fetch_Error_True": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Active_Detections_For_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Active_Detections_For_Entity')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Active_Detections": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Active_Detections_For_Entity": {
                          "runAfter": {
                            "Get_Access_Token_For_Active_Detections": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Active_Detections')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "entity_id": "@{int(variables('entity_id'))}",
                              "page": "@{variables('page')}",
                              "state": "active"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/detections"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Retry_Count_is_Zero_For_Add_Note_To_Vectra_Entity": {
                      "actions": {
                        "Condition_To_Verify_Note_Added_To_Vectra_Entity_Successfully": {
                          "actions": {
                            "Set_Retry_Count_As_Zero_For_Add_Note_To_Vectra_Entity": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Add_Note_To_Vectra_Entity": [
                              "Succeeded",
                              "Failed",
                              "TimedOut"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Add_Note_To_Vectra_Entity": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Add_Note_To_Entity": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Add_Note_To_Vectra_Entity": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Add_Note_To_Entity": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Add_Note_To_Vectra_Entity": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Add_Note_To_Vectra_Entity": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Adding_Note_To_Vectra_Entity": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "note_add_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Adding_Note_To_Vectra_Entity": {
                                      "runAfter": {
                                        "Set_Error_True_While_Adding_Note_To_Vectra_Entity": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Add_Note_To_Vectra_Entity')['statusCode']",
                                  201
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Add_Note_To_Vectra_Entity": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Add_Note_To_Vectra_Entity": {
                          "runAfter": {
                            "Get_Access_Token_For_Add_Note_To_Vectra_Entity": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "note": "@variables('note')"
                            },
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Add_Note_To_Vectra_Entity')?['value']}",
                              "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "queries": {
                              "type": "@variables('entity_type')"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities/@{variables('entity_id')}/notes"
                          }
                        }
                      },
                      "runAfter": {
                        "Add_Comment_To_Incident_(V3)": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Retry_Count_is_Zero_For_Mark_Detections_As_Fixed": {
                      "actions": {
                        "Condition_To_Verify_Detections_Are_Marked_As_Fixed_Successfully": {
                          "actions": {
                            "Set_Retry_Count_For_Mark_Detections_As_Fixed": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Mark_Detections_As_Fixed_For_Associated_Entity": [
                              "Succeeded",
                              "Failed",
                              "TimedOut"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Mark_Detections_Fixed": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_Detections": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Mark_Detections_As_Fixed": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra_3": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Mark_Fixed": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Mark_Detections_Fixed": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Mark_Detections_Fixed": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra_3')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra_3": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Mark_Detections_Fixed_Error_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "mark_fixed_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Mark_Detections_As_Fixed": {
                                      "runAfter": {
                                        "Set_Mark_Detections_Fixed_Error_True": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Mark_Detections_As_Fixed_For_Associated_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Mark_Detections_As_Fixed_For_Associated_Entity')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Mark_Detections_As_Fixed": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Mark_Detections_As_Fixed_For_Associated_Entity": {
                          "runAfter": {
                            "Get_Access_Token_For_Mark_Detections_As_Fixed": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "detectionIdList": "@variables('detection_ids')",
                              "mark_as_fixed": "True"
                            },
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Mark_Detections_As_Fixed')?['value']}",
                              "Content-Type": "application/json"
                            },
                            "method": "PATCH",
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/detections"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Data_Fetch_Error_False_For_Mark_Detections_Fixed": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraMarkDetectionsAsFixed",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId14'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId14')]",
                "contentId": "[variables('_playbookContentId14')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion14')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Mark Detections As Fixed",
            "description": "This playbook will mark active detection as fixed associated with an entity based on choice of user provided over MS Teams. Also it adds a pre-defined but user customizable comment to an incident and also adds a pre-defined but user customizable note to Vectra Entity.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraMarkDetectionsAsFixed playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Assign Role to add comment in incident**",
              "Assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2.Add role assignment",
              "3.Assignment type: Job function roles",
              "4.Role: Microsoft Sentinel Contributor",
              "5.Members: select managed identity for assigned access to and add your logic app as member",
              "6.Click on review+assign",
              "**d. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident based on data ingested from Vectra. Incident should have Entity mapping.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Detection",
              "Fixed",
              "Comment"
            ],
            "lastUpdateTime": "2024-08-30T15:13:43.103Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId14')]",
        "contentKind": "Playbook",
        "displayName": "VectraMarkDetectionsAsFixed",
        "contentProductId": "[variables('_playbookcontentProductId14')]",
        "id": "[variables('_playbookcontentProductId14')]",
        "version": "[variables('playbookVersion14')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName15')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraOperateOnEntitySourceIP Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion15')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraOperateOnEntitySourceIP",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your Vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No Alerts found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Data_Fetch_Error_False": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_For_Entity_Type_Account_As_IP_is_Null": {
                      "actions": {
                        "Terminate_Due_To_IP_is_Null_For_Type_Account": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "422",
                              "message": "IP got null for entity ID: @{variables('entity_id')} and Type: @{variables('entity_type')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('ip'))",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Associated_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Fetching_Associated_Entity_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Associated_Entity_Data')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Associated_Entity_Data')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero_For_Associated_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Generating_Access_Token": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Associated_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Data_Fetch_Error_False": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_IP": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_IP": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ip",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook is triggered on wrong incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Retry_Count_is_Zero_For_Associated_Entity_Data": {
                      "actions": {
                        "Condition_To_Verify_Entities_Data_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Perform_Actions_Based_On_Entity_Type": {
                              "actions": {
                                "Set_IP_Address_For_Host": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "ip",
                                    "value": "@{body('Parse_JSON_For_Entity_Data')?['ip']}"
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Entity_Data": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@variables('entity_type')",
                                      "host"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Entity_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Associated_Entity_Data')",
                                "schema": {
                                  "properties": {
                                    "account_type": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    },
                                    "attack_profile": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "attack_rating": {
                                      "type": "integer"
                                    },
                                    "breadth_contrib": {
                                      "type": "integer"
                                    },
                                    "detection_set": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "entity_importance": {
                                      "type": "integer"
                                    },
                                    "entity_type": {
                                      "type": "string"
                                    },
                                    "host_type": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "importance": {
                                      "type": "integer"
                                    },
                                    "ip": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "is_prioritized": {
                                      "type": "boolean"
                                    },
                                    "last_detection_timestamp": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "last_modified_timestamp": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "notes": {
                                      "items": {
                                        "properties": {
                                          "created_by": {
                                            "type": "string"
                                          },
                                          "date_created": {
                                            "type": "string"
                                          },
                                          "date_modified": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "date_created",
                                          "date_modified",
                                          "created_by",
                                          "modified_by",
                                          "note"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "privilege_category": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "privilege_level": {
                                      "type": [
                                        "integer",
                                        "null"
                                      ]
                                    },
                                    "sensors": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "severity": {
                                      "type": "string"
                                    },
                                    "state": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "type": {
                                      "type": "string"
                                    },
                                    "urgency_score": {
                                      "type": "integer"
                                    },
                                    "url": {
                                      "type": "string"
                                    },
                                    "velocity_contrib": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Set_Retry_Count_As_Zero": {
                              "runAfter": {
                                "Condition_To_Perform_Actions_Based_On_Entity_Type": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Associated_Entity_Data": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully": {
                                    "actions": {
                                      "Decrement_Retry_Count": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "Failed",
                                        "TimedOut"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Access_Token": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Fetching_Data_For_Associated_Entity": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Data_Of_Associated_Entity": {
                                      "runAfter": {
                                        "Set_Error_True_While_Fetching_Data_For_Associated_Entity": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Associated_Entity_Data')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Associated_Entity_Data')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Associated_Entity_Data": {
                          "runAfter": {
                            "Get_Access_Token": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "type": "@variables('entity_type')"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities/@{int(variables('entity_id'))}"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraOperateOnEntitySourceIP",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId15'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId15')]",
                "contentId": "[variables('_playbookContentId15')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion15')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Operate On Entity Source IP",
            "description": "This Playbook will extract the ip from entities associated with an incident on which playbook is triggered.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraOperateOnEntitySourceIP playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Configurations in Sentinel**",
              "1. In Microsoft sentinel, analytical rule should be configured to trigger an incident which has Host Entity mapped.",
              "2. To manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "IP"
            ],
            "lastUpdateTime": "2024-08-30T15:13:43.857Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId15')]",
        "contentKind": "Playbook",
        "displayName": "VectraOperateOnEntitySourceIP",
        "contentProductId": "[variables('_playbookcontentProductId15')]",
        "id": "[variables('_playbookcontentProductId15')]",
        "version": "[variables('playbookVersion15')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName16')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraStaticResolveAssignment Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion16')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraStaticResolveAssignment",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl for your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "EntityNote": {
              "type": "string",
              "defaultValue": "Assignment has been resolved.",
              "metadata": {
                "description": "Enter a note you want to add in Vectra Entity for assignment."
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-4": "[[variables('connection-4')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Microsoft_Sentinel_incident": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "actions": {
                    "Condition_To_Perform_Next_Actions_Based_On_Entity_Type": {
                      "actions": {
                        "Until_Retry_Count_is_Zero_For_Account_Entity_Data": {
                          "actions": {
                            "Condition_To_Verify_Account_Entity_Data_Fetched_Successfully": {
                              "actions": {
                                "Condition_To_Verify_No_Open_Assignment_Found_For_Account_Entity": {
                                  "actions": {
                                    "Set_No_Open_Assignment_Found_As_True_For_Account_Entity_Data": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "no_open_assignment",
                                        "value": "@true"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Parse_JSON_For_Associated_Account_Entity_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_Assignment_ID_For_Account_Entity": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "assignment_id",
                                          "value": "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']?['id']"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['assignment']",
                                          "@null"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Parse_JSON_For_Associated_Account_Entity_Data": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@body('HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity')",
                                    "schema": {
                                      "properties": {
                                        "account_type": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "assignment": {
                                          "properties": {
                                            "account_id": {
                                              "type": [
                                                "integer",
                                                "null"
                                              ]
                                            },
                                            "assigned_by": {
                                              "properties": {
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "username": {
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "type": [
                                                "object",
                                                "null"
                                              ]
                                            },
                                            "assigned_to": {
                                              "properties": {
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "username": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": [
                                                "object",
                                                "null"
                                              ]
                                            },
                                            "date_assigned": {
                                              "type": "string"
                                            },
                                            "date_resolved": {
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            },
                                            "events": {
                                              "items": {
                                                "type": "object"
                                              },
                                              "type": [
                                                "array",
                                                "null"
                                              ]
                                            },
                                            "host_id": {
                                              "items": {
                                                "type": "integer"
                                              },
                                              "type": [
                                                "array",
                                                "integer",
                                                "null"
                                              ]
                                            },
                                            "id": {
                                              "type": "integer"
                                            },
                                            "outcome": {
                                              "type": "null"
                                            },
                                            "resolved_by": {
                                              "type": "null"
                                            },
                                            "triaged_detections": {
                                              "type": "object"
                                            }
                                          },
                                          "type": [
                                            "object",
                                            "null"
                                          ]
                                        },
                                        "certainty": {
                                          "type": "integer"
                                        },
                                        "data_source": {
                                          "type": [
                                            "object",
                                            "null"
                                          ]
                                        },
                                        "detection_set": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "detection_summaries": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "id": {
                                          "type": "integer"
                                        },
                                        "last_detection_timestamp": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "note": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note_modified_by": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "note_modified_timestamp": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "notes": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "past_assignments": {
                                          "items": {
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "privilege_category": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "privilege_level": {
                                          "type": [
                                            "integer",
                                            "null"
                                          ]
                                        },
                                        "sensors": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "severity": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "state": {
                                          "type": "string"
                                        },
                                        "subaccounts": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": [
                                            "array",
                                            "null"
                                          ]
                                        },
                                        "tags": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "threat": {
                                          "type": "integer"
                                        },
                                        "url": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Account_Entity_Data": {
                                  "runAfter": {
                                    "Condition_To_Verify_No_Open_Assignment_Found_For_Account_Entity": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity": [
                                  "Succeeded",
                                  "TimedOut",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Account_Entity": {
                                    "actions": {
                                      "Condition_To_Verify_Access_Token_Generated_Successfully_For_Account_Entity_Data": {
                                        "actions": {
                                          "Decrement_Retry_Count_For_Account_Entity": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra_2": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Access_Token_For_Account_Entity": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Access_Token_For_Account_Entity": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra_2')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra_2": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Account_Entity_Data_Fetch_Error_True": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "fetch_error",
                                            "value": "@true"
                                          }
                                        },
                                        "Set_Retry_Count_As_Zero_For_Account_Entity_Data_Fetch_Error": {
                                          "runAfter": {
                                            "Set_Account_Entity_Data_Fetch_Error_True": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Access_Token_For_Account_Entity": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "inputs",
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Fetch_Data_Of_Associated_Account_Entity": {
                              "runAfter": {
                                "Get_Access_Token_For_Account_Entity": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Access_Token_For_Account_Entity')?['value']}"
                                },
                                "method": "GET",
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/accounts/@{int(variables('entity_id'))}"
                              }
                            }
                          },
                          "expression": "@equals(variables('retry_count'), 0)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Set_Data_Fetch_Error_False_For_Associated_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Until_Retry_Count_is_Zero_For_Host_Entity_Data": {
                            "actions": {
                              "Condition_To_Verify_Host_Data_Fetched_Successfully": {
                                "actions": {
                                  "Condition_To_Terminate_Execution_If_No_Open_Assignment_Found_For_Host_Entity": {
                                    "actions": {
                                      "Set_No_Open_Assignment_Found_For_Host_Entity_Data": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "no_open_assignment",
                                          "value": "@true"
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Parse_JSON_For_Associated_Host_Entity_Data": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Assignment_ID_For_Host_Entity": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "assignment_id",
                                            "value": "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']?['id']"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['assignment']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Parse_JSON_For_Associated_Host_Entity_Data": {
                                    "type": "ParseJson",
                                    "inputs": {
                                      "content": "@body('HTTP_Request_To_Fetch_Data_Of_Associated_Host_Entity')",
                                      "schema": {
                                        "properties": {
                                          "account_access_history": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "active_traffic": {
                                            "type": "boolean"
                                          },
                                          "assigned_date": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "assigned_to": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "assignment": {
                                            "properties": {
                                              "account_id": {
                                                "type": [
                                                  "integer",
                                                  "null"
                                                ]
                                              },
                                              "assigned_by": {
                                                "properties": {
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "username": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "assigned_to": {
                                                "properties": {
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "username": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ]
                                                  }
                                                },
                                                "type": [
                                                  "object",
                                                  "null"
                                                ]
                                              },
                                              "date_assigned": {
                                                "type": "string"
                                              },
                                              "date_resolved": {
                                                "type": [
                                                  "string",
                                                  "null"
                                                ]
                                              },
                                              "events": {
                                                "items": {
                                                  "properties": {
                                                    "actor": {
                                                      "type": "integer"
                                                    },
                                                    "assignment_id": {
                                                      "type": "integer"
                                                    },
                                                    "context": {
                                                      "properties": {
                                                        "entity_c_score": {
                                                          "type": "integer"
                                                        },
                                                        "entity_t_score": {
                                                          "type": "integer"
                                                        },
                                                        "from": {
                                                          "type": "integer"
                                                        },
                                                        "to": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": [
                                                        "object",
                                                        "null"
                                                      ]
                                                    },
                                                    "datetime": {
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ]
                                                    },
                                                    "event_type": {
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ]
                                                    }
                                                  },
                                                  "required": [
                                                    "assignment_id",
                                                    "actor",
                                                    "event_type",
                                                    "datetime",
                                                    "context"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "host_id": {
                                                "type": [
                                                  "integer"
                                                ]
                                              },
                                              "id": {
                                                "type": "integer"
                                              },
                                              "outcome": {
                                                "type": "null"
                                              },
                                              "resolved_by": {
                                                "type": "null"
                                              },
                                              "triaged_detections": {
                                                "type": "object"
                                              }
                                            },
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "c_score": {
                                            "type": "integer"
                                          },
                                          "certainty": {
                                            "type": "integer"
                                          },
                                          "detection_profile": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_set": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "detection_summaries": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "groups": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "has_active_traffic": {
                                            "type": "boolean"
                                          },
                                          "has_custom_model": {
                                            "type": "boolean"
                                          },
                                          "has_shell_knocker_learnings": {
                                            "type": "boolean"
                                          },
                                          "host_luid": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "host_session_luids": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "ip": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "is_key_asset": {
                                            "type": "boolean"
                                          },
                                          "is_targeting_key_asset": {
                                            "type": "boolean"
                                          },
                                          "key_asset": {
                                            "type": "boolean"
                                          },
                                          "last_detection_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "last_modified": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "last_seen": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "last_source": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "name": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "notes": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "past_assignments": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "previous_ips": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "privilege_category": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "privilege_level": {
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          },
                                          "sensor": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "sensor_name": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "service_access_history": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "severity": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "state": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "suspicious_admin_learnings": {
                                            "type": "object"
                                          },
                                          "t_score": {
                                            "type": "integer"
                                          },
                                          "tags": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": [
                                              "array",
                                              "null"
                                            ]
                                          },
                                          "targets_key_asset": {
                                            "type": "boolean"
                                          },
                                          "threat": {
                                            "type": "integer"
                                          },
                                          "url": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    }
                                  },
                                  "Set_Retry_Count_As_Zero_For_Host_Entity": {
                                    "runAfter": {
                                      "Condition_To_Terminate_Execution_If_No_Open_Assignment_Found_For_Host_Entity": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "retry_count",
                                      "value": 0
                                    }
                                  }
                                },
                                "runAfter": {
                                  "HTTP_Request_To_Fetch_Data_Of_Associated_Host_Entity": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Condition_To_Generate_New_Access_Token_For_Host_Entity": {
                                      "actions": {
                                        "Condition_To_Verify_Access_Token_Generated_Successfully_For_Host_Entity": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Host_Entity": {
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count",
                                                "value": 1
                                              }
                                            }
                                          },
                                          "runAfter": {
                                            "GenerateAccessTokenVectra_4": [
                                              "Succeeded",
                                              "Failed",
                                              "TimedOut"
                                            ]
                                          },
                                          "else": {
                                            "actions": {
                                              "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Host_Entity": {
                                                "runAfter": {
                                                  "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "DecrementVariable",
                                                "inputs": {
                                                  "name": "retry_count",
                                                  "value": 1
                                                }
                                              },
                                              "Set_Error_True_While_Generating_Access_Token_For_Host_Entity": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "access_token_generate_error",
                                                  "value": "@true"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "equals": [
                                                  "@body('GenerateAccessTokenVectra_4')?['status']",
                                                  "success"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        },
                                        "GenerateAccessTokenVectra_4": {
                                          "type": "Workflow",
                                          "inputs": {
                                            "host": {
                                              "triggerName": "manual",
                                              "workflow": {
                                                "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_Associated_Host_Entity_Data_Fetch_Error": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "fetch_error",
                                              "value": "@true"
                                            }
                                          },
                                          "Set_Retry_Count_As_Zero_For_Error_While_Fetching_Host_Entity_Data": {
                                            "runAfter": {
                                              "Set_Associated_Host_Entity_Data_Fetch_Error": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "retry_count",
                                              "value": 0
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@outputs('HTTP_Request_To_Fetch_Data_Of_Associated_Host_Entity')['statusCode']",
                                              401
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Data_Of_Associated_Host_Entity')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Get_Access_Token_For_Host_Entity": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                  },
                                  "method": "get",
                                  "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                                },
                                "runtimeConfiguration": {
                                  "secureData": {
                                    "properties": [
                                      "inputs",
                                      "outputs"
                                    ]
                                  }
                                }
                              },
                              "HTTP_Request_To_Fetch_Data_Of_Associated_Host_Entity": {
                                "runAfter": {
                                  "Get_Access_Token_For_Host_Entity": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "headers": {
                                    "Authorization": "Bearer @{body('Get_Access_Token_For_Host_Entity')?['value']}"
                                  },
                                  "method": "GET",
                                  "uri": "@{variables('base_url')}/api/@{variables('api_version')}/hosts/@{int(variables('entity_id'))}"
                                }
                              }
                            },
                            "expression": "@equals(variables('retry_count'), 0)",
                            "limit": {
                              "timeout": "PT1H"
                            },
                            "type": "Until"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('entity_type')",
                              "account"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_Any_Active_Detections_Data_Fetch_Error": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Fetching_Active_Detections": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Fetch_Active_Detections_For_Associated_Entity')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Fetch_Active_Detections_For_Associated_Entity')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Active_Detections": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Alerts_Found": {
                      "actions": {
                        "Terminate_Due_To_No_Alerts_Found": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "No alerts found associated with this Incident."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_No_Open_Assignment_Found_False": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(triggerBody()?['object']?['properties']?['Alerts'])",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_Execution_If_No_Open_Assignment_Found": {
                      "actions": {
                        "Post_Message_For_No_Open_Assignment_Found_For_Associated_Entity": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "messageBody": "<p><strong>No Open Assignment found</strong> for Entity ID: @{variables('entity_id')} and Type: @{variables('entity_type')}.</p>",
                              "recipient": {
                                "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                "groupId": "[[trim(parameters('TeamsGroupId'))]"
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                          }
                        },
                        "Terminate_Due_To_No_Open_Assignment_Found": {
                          "runAfter": {
                            "Post_Message_For_No_Open_Assignment_Found_For_Associated_Entity": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Perform_Next_Actions_Based_On_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('no_open_assignment')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Detections": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token_For_Active_Detections": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_Any_Active_Detections_Data_Fetch_Error": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Generating_Access_Token_For_Entity_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating access token while fetching associated entity data."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Verify_Any_Error_While_Fetching_Associated_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Generating_Token_For_Resolve_Assignment": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Generating_Token_For_Resolve_Assignment": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error occurred while generating token for resolving assignment."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_While_Resolving_Assignment": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_While_Resolving_Assignment": {
                      "actions": {
                        "Terminate_Due_To_Error_While_Resolving_Assignment": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('HTTP_Request_To_Resolve_Assignment')['statusCode']}",
                              "message": "@{body('HTTP_Request_To_Resolve_Assignment')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Retry_Count_is_Zero_For_Resolve_Assignment": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_Any_Error_While_Fetching_Associated_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Failure_While_Fetching_Associated_Entity_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Error occurred while fetching associated entity data."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Open_Assignment_Found": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Incident_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Assignment_ID": {
                      "runAfter": {
                        "Initialize_Page_Number": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "assignment_id",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Break_Loop": {
                      "runAfter": {
                        "Initialize_Detection_IDs": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "break_loop",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Data_Fetch_Error_False": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Detection_IDs": {
                      "runAfter": {
                        "Initialize_Outcome": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "detection_ids",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Type": {
                      "runAfter": {
                        "Initialize_Note": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_type",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_Error_False_While_Generating_Access_Token": {
                      "runAfter": {
                        "Initialize_Data_Fetch_Error_False": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Incident_URL": {
                      "runAfter": {
                        "Initialize_Retry_Count": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "incident_url",
                            "type": "string",
                            "value": "@triggerBody()?['object']?['properties']?['incidentUrl']"
                          }
                        ]
                      }
                    },
                    "Initialize_No_Open_Assignment_Found_False": {
                      "runAfter": {
                        "Initialize_Error_False_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "no_open_assignment",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Note": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "note",
                            "type": "string",
                            "value": "[[trim(parameters('EntityNote'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Outcome": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "outcome",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_Page_Number": {
                      "runAfter": {
                        "Initialize_Break_Loop": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "page",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count": {
                      "runAfter": {
                        "Initialize_Assignment_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Custom_Entities_Mapping_Data": {
                      "runAfter": {
                        "Condition_To_Terminate_Execution_If_No_Alerts_Found": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()?['object']?['properties']?['Alerts'][0]?['properties']?['additionalData']?['Custom Details']",
                        "schema": {
                          "properties": {
                            "entity_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_type": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "attack_profile": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "entity_importance": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "ip_address": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "detection_id": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "mitre_techniques": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "entity_id",
                            "entity_type"
                          ],
                          "type": "object"
                        }
                      }
                    },
                    "Set_Data_Fetch_Error_False_For_Associated_Entity_Data": {
                      "runAfter": {
                        "Set_Retry_Count_For_Associated_Entity_Data_Fetch": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "fetch_error",
                        "value": "@false"
                      }
                    },
                    "Set_Data_Fetch_Error_False_For_Resolve_Assignment": {
                      "runAfter": {
                        "Set_Retry_Count_For_Resolve_Assignment": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "fetch_error",
                        "value": "@false"
                      }
                    },
                    "Set_Entity_ID": {
                      "runAfter": {
                        "Set_Entity_Type": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@{split(body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_id'][0], '.')[0]}"
                      }
                    },
                    "Set_Entity_Type": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_type",
                        "value": "@{body('Parse_JSON_For_Custom_Entities_Mapping_Data')?['entity_type'][0]}"
                      }
                    },
                    "Set_Retry_Count_For_Associated_Entity_Data_Fetch": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Detections": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Set_Retry_Count_For_Resolve_Assignment": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Token_For_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "retry_count",
                        "value": 2
                      }
                    },
                    "Switch_Values_For_Outcome_Based_On_Incident_Classfication": {
                      "runAfter": {
                        "Set_Data_Fetch_Error_False_For_Resolve_Assignment": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_For_Benign_Positive_-_Suspicious_but_expected_Incident_Classification": {
                          "case": "BenignPositive",
                          "actions": {
                            "Set_Outcome_For_Benign_True_Positive": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "outcome",
                                "value": 1
                              }
                            }
                          }
                        },
                        "Case_For_False_Positive_Incident_Classification": {
                          "case": "FalsePositive",
                          "actions": {
                            "Set_Outcome_For_False_Positive_2": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "outcome",
                                "value": 3
                              }
                            }
                          }
                        },
                        "Case_For_True_Positive_-_Suspicious_activity_Incident_Classification": {
                          "case": "TruePositive",
                          "actions": {
                            "Set_Outcome_For_True_Malicious_Positive": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "outcome",
                                "value": 2
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "Set_Outcome_For_Undetermined": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "outcome",
                              "value": 6
                            }
                          }
                        }
                      },
                      "expression": "@triggerBody()?['object']?['properties']?['classification']",
                      "type": "Switch"
                    },
                    "Terminate_Due_To_Playbook_Triggered_From_Wrong_Incident": {
                      "runAfter": {
                        "Parse_JSON_For_Custom_Entities_Mapping_Data": [
                          "Failed"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "Playbook is triggered on wrong incident."
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until_Next_is_Null_Or_Count_Zero_Or_Any_Error_in_Active_Detections": {
                      "actions": {
                        "Condition_To_Verify_Active_Detections_Fetched_Successfully": {
                          "actions": {
                            "Condition_To_Check_If_Count_is_Zero_For_Active_Detections": {
                              "actions": {
                                "Set_Break_Loop_True_For_Count_Zero_For_Active_Detections": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "break_loop",
                                    "value": "@true"
                                  }
                                },
                                "Set_Retry_Count_As_Zero_For_Count_Zero_For_Active_Detections": {
                                  "runAfter": {
                                    "Set_Break_Loop_True_For_Count_Zero_For_Active_Detections": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "retry_count",
                                    "value": 0
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_For_Active_Detections_Data": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Check_Next_is_Null_For_Active_Detections": {
                                    "actions": {
                                      "Set_Break_Loop_True_For_Next_is_Null": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "break_loop",
                                          "value": "@true"
                                        }
                                      },
                                      "Set_Retry_Count_As_Zero_For_Next_is_Null": {
                                        "runAfter": {
                                          "Set_Break_Loop_True_For_Next_is_Null": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 0
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "For_Each_Detections": [
                                        "Succeeded"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Increment_Page_Number": {
                                          "type": "IncrementVariable",
                                          "inputs": {
                                            "name": "page",
                                            "value": 1
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('Parse_JSON_For_Active_Detections_Data')?['next']",
                                            "@null"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "For_Each_Detections": {
                                    "foreach": "@body('Parse_JSON_For_Active_Detections_Data')?['results']",
                                    "actions": {
                                      "Append_Detection_ID_to_Detection_IDs_List": {
                                        "type": "AppendToArrayVariable",
                                        "inputs": {
                                          "name": "detection_ids",
                                          "value": "@items('For_Each_Detections')?['id']"
                                        }
                                      }
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                      "concurrency": {
                                        "repetitions": 1
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Parse_JSON_For_Active_Detections_Data')?['count']",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_JSON_For_Active_Detections_Data": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_Request_To_Fetch_Active_Detections_For_Associated_Entity')",
                                "schema": {
                                  "properties": {
                                    "count": {
                                      "type": "integer"
                                    },
                                    "next": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "previous": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "results": {
                                      "items": {
                                        "properties": {
                                          "assigned_date": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "assigned_to": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "c_score": {
                                            "type": "integer"
                                          },
                                          "category": {
                                            "type": "string"
                                          },
                                          "certainty": {
                                            "type": "integer"
                                          },
                                          "created_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "custom_detection": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "data_source": {
                                            "type": "object"
                                          },
                                          "description": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_category": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_type": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "detection_url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "filtered_by_ai": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_rule": {
                                            "type": "boolean"
                                          },
                                          "filtered_by_user": {
                                            "type": "boolean"
                                          },
                                          "first_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "grouped_details": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "groups": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "id": {
                                            "type": "integer"
                                          },
                                          "is_custom_model": {
                                            "type": "boolean"
                                          },
                                          "is_marked_custom": {
                                            "type": "boolean"
                                          },
                                          "is_targeting_key_asset": {
                                            "type": "boolean"
                                          },
                                          "is_triaged": {
                                            "type": "boolean"
                                          },
                                          "last_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_by": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "note_modified_timestamp": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "notes": {
                                            "items": {
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "sensor": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "sensor_name": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "src_account": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_host": {
                                            "type": [
                                              "object",
                                              "null"
                                            ]
                                          },
                                          "src_ip": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "state": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "summary": {
                                            "type": "object"
                                          },
                                          "t_score": {
                                            "type": "integer"
                                          },
                                          "tags": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "targets_key_asset": {
                                            "type": "boolean"
                                          },
                                          "threat": {
                                            "type": "integer"
                                          },
                                          "triage_rule_id": {
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "url": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "summary",
                                          "data_source",
                                          "sensor",
                                          "detection",
                                          "filtered_by_ai",
                                          "filtered_by_user",
                                          "is_custom_model",
                                          "custom_detection",
                                          "is_targeting_key_asset",
                                          "c_score",
                                          "note_modified_timestamp",
                                          "note",
                                          "description",
                                          "note_modified_by",
                                          "triage_rule_id",
                                          "filtered_by_rule",
                                          "assigned_date",
                                          "category",
                                          "src_account",
                                          "src_ip",
                                          "targets_key_asset",
                                          "is_marked_custom",
                                          "notes",
                                          "groups",
                                          "tags",
                                          "sensor_name",
                                          "last_timestamp",
                                          "detection_url",
                                          "detection_category",
                                          "assigned_to",
                                          "t_score",
                                          "state",
                                          "detection_type",
                                          "first_timestamp",
                                          "id",
                                          "created_timestamp",
                                          "certainty",
                                          "url",
                                          "threat",
                                          "is_triaged",
                                          "src_host",
                                          "type",
                                          "grouped_details"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Fetch_Active_Detections_For_Associated_Entity": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token_For_Active_Detection": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Active_Detection": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Active_Detection": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Active_Detection": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Active_Detection": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Active_Detection": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Active_Detections_Data_Fetch_Error_True": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Break_Loop_True_For_Active_Detections_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Retry_Count_As_Zero_For_Active_Detection_Data_Fetch_Error": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Active_Detection_Data_Fetch_Error": {
                                      "runAfter": {
                                        "Set_Active_Detections_Data_Fetch_Error_True": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Fetch_Active_Detections_For_Associated_Entity')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Fetch_Active_Detections_For_Associated_Entity')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Active_Detection": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Fetch_Active_Detections_For_Associated_Entity": {
                          "runAfter": {
                            "Get_Access_Token_For_Active_Detection": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Active_Detection')?['value']}"
                            },
                            "method": "GET",
                            "queries": {
                              "entity_id": "@{int(variables('entity_id'))}",
                              "is_triaged": "false",
                              "page": "@{variables('page')}",
                              "state": "active"
                            },
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/detections"
                          }
                        }
                      },
                      "runAfter": {
                        "Set_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(if(or(if(equals(variables('break_loop'), true), true, false), if(equals(variables('retry_count'), 0), true, false)), true, false), true)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Retry_Count_is_Zero_For_Resolve_Assignment": {
                      "actions": {
                        "Condition_To_Verify_Successfully_Resolve_Assignment": {
                          "actions": {
                            "Set_Retry_Count_As_Zero_For_Resolve_Assignment": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "retry_count",
                                "value": 0
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_Request_To_Resolve_Assignment": [
                              "Succeeded",
                              "TimedOut",
                              "Failed"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Condition_To_Generate_New_Access_Token": {
                                "actions": {
                                  "Condition_To_Verify_Access_Token_Generated_Successfully_For_Resolve_Assignment": {
                                    "actions": {
                                      "Decrement_Retry_Count_For_Resolve_Assignment": {
                                        "type": "DecrementVariable",
                                        "inputs": {
                                          "name": "retry_count",
                                          "value": 1
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "GenerateAccessTokenVectra_3": [
                                        "Succeeded",
                                        "TimedOut",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Decrement_Retry_Count_For_Error_in_Generating_Token_For_Resolve_Assignment": {
                                          "runAfter": {
                                            "Set_Error_True_While_Generating_Access_Token_For_Resolve_Assignment": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "DecrementVariable",
                                          "inputs": {
                                            "name": "retry_count",
                                            "value": 1
                                          }
                                        },
                                        "Set_Error_True_While_Generating_Access_Token_For_Resolve_Assignment": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "access_token_generate_error",
                                            "value": "@true"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@body('GenerateAccessTokenVectra_3')?['status']",
                                            "success"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "GenerateAccessTokenVectra_3": {
                                    "type": "Workflow",
                                    "inputs": {
                                      "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                          "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_Error_True_While_Resolving_Assignment": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "fetch_error",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Count_As_Zero_For_Error_While_Resolving_Assignment": {
                                      "runAfter": {
                                        "Set_Error_True_While_Resolving_Assignment": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_Request_To_Resolve_Assignment')['statusCode']",
                                        401
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Request_To_Resolve_Assignment')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Access_Token_For_Resolve_Assignment": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                          },
                          "runtimeConfiguration": {
                            "secureData": {
                              "properties": [
                                "inputs",
                                "outputs"
                              ]
                            }
                          }
                        },
                        "HTTP_Request_To_Resolve_Assignment": {
                          "runAfter": {
                            "Get_Access_Token_For_Resolve_Assignment": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "body": {
                              "detection_ids": "@variables('detection_ids')",
                              "note": "@variables('note')",
                              "outcome": "@{variables('outcome')}",
                              "triage_as": "@split(variables('incident_url'), 'Incidents/')[1]"
                            },
                            "headers": {
                              "Authorization": "Bearer @{body('Get_Access_Token_For_Resolve_Assignment')?['value']}",
                              "Content-Type": "application/json"
                            },
                            "method": "PUT",
                            "uri": "@{variables('base_url')}/api/@{variables('api_version')}/assignments/@{variables('assignment_id')}/resolve"
                          }
                        }
                      },
                      "runAfter": {
                        "Switch_Values_For_Outcome_Based_On_Incident_Classfication": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('retry_count'), 0)",
                      "limit": {
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "VectraStaticResolveAssignment",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId16'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId16')]",
                "contentId": "[variables('_playbookContentId16')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion16')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Static Resolve Assignment",
            "description": "This playbook resolves the assignment for an entity in Vectra and adds a note for the assignment when the status of an incident is changed to 'closed', and also it triages all active detections associated with the entity while applying the Microsoft Sentinel incident ID as the triage label.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. Obtain Teams GroupId and ChannelId",
              "a. Create a Team with public channel.",
              "b. Click on three dots (...) present on right side of the your newly created teams channel and Get link to the channel.",
              "c. copy the text from the link between /channel and /, decode it using online url decoder and copy it to use as channelId.",
              "d. copy the text of groupId parameter from link to use as groupId.",
              "4. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraStaticResolveAssignment playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies → create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, below analytical rules should be configured to trigger an incident.",
              "a. Vectra Create Incident Based On Tag For Entity Type Account",
              "b. Vectra Create Incident Based On Tag For Entity Type Host",
              "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
              "a. Go to Microsoft Sentinel → <your workspace> → Automation",
              "b. Click on Create → Automation rule",
              "c. Provide name for your rule",
              "d. Select Trigger as When incident is updated.",
              "e. In Incident Status condition, select Status changed to 'Closed'.",
              "f. In Actions dropdown select Run playbook",
              "g. In second dropdown select your deployed playbook",
              "h. Click on Apply",
              "i. Save the Automation rule.",
              "NOTE: If you want to manually run the playbook on a particular incident follow the below steps:",
              "a. Go to Microsoft Sentinel → <your workspace> → Incidents",
              "b. Select an incident.",
              "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
              "d. click on the Run button beside this playbook."
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Static",
              "Resolve",
              "Assignment",
              "Triage",
              "Active",
              "Detections"
            ],
            "lastUpdateTime": "2024-08-30T15:13:45.571Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId16')]",
        "contentKind": "Playbook",
        "displayName": "VectraStaticResolveAssignment",
        "contentProductId": "[variables('_playbookcontentProductId16')]",
        "id": "[variables('_playbookcontentProductId16')]",
        "version": "[variables('playbookVersion16')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName17')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraUpdateIncidentBasedOnTagAndNotify Playbook with template version 3.2.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion17')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "VectraUpdateIncidentBasedOnTagAndNotify",
              "minLength": 1,
              "type": "string",
              "metadata": {
                "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
              }
            },
            "KeyVaultName": {
              "type": "string",
              "minLength": 1
            },
            "TenantId": {
              "type": "string",
              "minLength": 1
            },
            "BaseURL": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Enter baseurl of your vectra account.(e.g. https://host.portal.vectra.ai)"
              }
            },
            "Tag": {
              "metadata": {
                "description": "Enter Tag value based on which incident will be updated(e.g. MDR - Customer Escalation)"
              },
              "type": "string",
              "defaultValue": "MDR - Customer Escalation"
            },
            "TeamsGroupId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Group where the adaptive card will be posted"
              }
            },
            "TeamsChannelId": {
              "type": "string",
              "metadata": {
                "description": "Enter Id of the Teams Channel where the adaptive card will be posted"
              }
            },
            "IncidentComment": {
              "type": "string",
              "defaultValue": "Incident has been updated with High Severity.",
              "metadata": {
                "description": "Enter comment you want to add in incident which will be updated based on tag."
              }
            },
            "WorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Enter name of the log analytics workspace where incidents are available using generated using analytic rule."
              }
            },
            "GenerateAccessCredPlaybookName": {
              "type": "string",
              "metadata": {
                "description": "Playbook name that you have given while deployment of playbook VectraGenerateAccessToken(e.g.VectraGenerateAccessToken)"
              }
            }
          },
          "variables": {
            "AzuremonitorlogsConnectionName": "[[concat('Azuremonitorlogs-', trim(parameters('PlaybookName')))]",
            "MicrosoftSentinelConnectionName": "[[concat('MicrosoftSentinel-', trim(parameters('PlaybookName')))]",
            "KeyvaultConnectionName": "[[concat('Keyvault-', trim(parameters('PlaybookName')))]",
            "TeamsConnectionName": "[[concat('Teams-', trim(parameters('PlaybookName')))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
            "_connection-3": "[[variables('connection-3')]",
            "connection-4": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]",
            "_connection-4": "[[variables('connection-4')]",
            "connection-5": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]",
            "_connection-5": "[[variables('connection-5')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "Tag": {
                      "type": "String",
                      "defaultValue": "[[trim(parameters('Tag'))]"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Hour",
                        "interval": 1
                      },
                      "evaluatedRecurrence": {
                        "frequency": "Hour",
                        "interval": 1
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "Combine_Account_And_Host_Entity_IDs_To_Entity_IDs_Array_": {
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Entity_Data": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "entity_id",
                        "value": "@union(variables('entity_ids_host'),variables('entity_ids_account'))"
                      }
                    },
                    "Compose_Account_Entity_ID_List": {
                      "runAfter": {
                        "For_Each_Query_Result": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": "@join(variables('entity_ids_account'),',')"
                    },
                    "Compose_Host_Entity_ID_List": {
                      "runAfter": {
                        "Compose_Account_Entity_ID_List": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": "@join(variables('entity_ids_host'),',')"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Fetching_Entity_Data": {
                      "actions": {
                        "Terminate_Due_To_Error_Occurred_While_Fetching_Entity_Data": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "message": "Error in fetching account data: @{body('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')}, Error in fetching host data:@{body('HTTP_Request_To_Fetch_Host_Entity_Data')}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_Error_Occurred_While_Generating_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('account_data_fetch_error')",
                              "@true"
                            ]
                          },
                          {
                            "equals": [
                              "@variables('host_data_fetch_error')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_Error_Occurred_While_Generating_Access_Token": {
                      "actions": {
                        "Terminate": {
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "400",
                              "message": "Error Occurred While Generating Access Token."
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Verify_Incident_With_Account_Entities_Found": [
                          "Succeeded"
                        ],
                        "Condition_To_Verify_Incident_With_Host_Entities_Found": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('access_token_generate_error_account')",
                              "@true"
                            ]
                          },
                          {
                            "equals": [
                              "@variables('access_token_generate_error_host')",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Terminate_If_No_Matching_Entities_Found_With_Provided_Tags": {
                      "actions": {
                        "Terminate_As_No_Matching_Entities_Found_With_Provided_Tags": {
                          "type": "Terminate",
                          "inputs": {
                            "runStatus": "Succeeded"
                          }
                        }
                      },
                      "runAfter": {
                        "Combine_Account_And_Host_Entity_IDs_To_Entity_IDs_Array_": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@length(variables('entity_id'))",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_Incident_With_Account_Entities_Found": {
                      "actions": {
                        "Reset_Account_Entity_ID_List": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "entity_ids_account",
                            "value": "@null"
                          }
                        },
                        "Until_Retry_Count_is_Zero_For_Account_Entity": {
                          "actions": {
                            "Condition_To_Verify_Account_Data_Fetched_Successfully": {
                              "actions": {
                                "Condition_To_Check_Whether_Next_is_Null_": {
                                  "actions": {
                                    "Set_Break_Loop_True_For_Account_Entity": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop_account_entity",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Account_Count_As_Zero_For_Account_Entity_API": {
                                      "runAfter": {
                                        "Set_Break_Loop_True_For_Account_Entity": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count_account",
                                        "value": 0
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "For_Each_Account_Entity": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Increment_Page_For_Account_Entity": {
                                        "type": "IncrementVariable",
                                        "inputs": {
                                          "name": "page_account",
                                          "value": 1
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['next']",
                                          "@null"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "For_Each_Account_Entity": {
                                  "foreach": "@body('Parse_JSON_For_Associated_Account_Entity_Data')?['results']",
                                  "actions": {
                                    "Append_Matched_Entity_ID_To_Account_Entity_IDs": {
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "entity_ids_account",
                                        "value": "@items('For_Each_Account_Entity')?['id']"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Parse_JSON_For_Associated_Account_Entity_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Foreach",
                                  "runtimeConfiguration": {
                                    "concurrency": {
                                      "repetitions": 1
                                    }
                                  }
                                },
                                "Parse_JSON_For_Associated_Account_Entity_Data": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@body('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')",
                                    "schema": {
                                      "properties": {
                                        "count": {
                                          "type": "integer"
                                        },
                                        "results": {
                                          "items": {
                                            "properties": {
                                              "attack_rating": {
                                                "type": "integer"
                                              },
                                              "breadth_contrib": {
                                                "type": "integer"
                                              },
                                              "detection_set": {
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "entity_importance": {
                                                "type": "integer"
                                              },
                                              "entity_type": {
                                                "type": "string"
                                              },
                                              "host_type": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "id": {
                                                "type": "integer"
                                              },
                                              "importance": {
                                                "type": "integer"
                                              },
                                              "ip": {
                                                "type": [
                                                  "string",
                                                  "null"
                                                ]
                                              },
                                              "is_prioritized": {
                                                "type": "boolean"
                                              },
                                              "last_modified_timestamp": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "notes": {
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "sensors": {
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "severity": {
                                                "type": "string"
                                              },
                                              "state": {
                                                "type": "string"
                                              },
                                              "tags": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "type": {
                                                "type": "string"
                                              },
                                              "urgency_score": {
                                                "type": "integer"
                                              },
                                              "url": {
                                                "type": "string"
                                              },
                                              "velocity_contrib": {
                                                "type": "integer"
                                              }
                                            },
                                            "required": [
                                              "id"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Fetch_Associated_Account_Entity_Data": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Associated_Account_Entity": {
                                    "actions": {
                                      "Condition_To_Verify_Token_Generated_Successfully_For_Associated_Account_Entity": {
                                        "actions": {
                                          "Decrement_Retry_Account_Count": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count_account",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra_2": [
                                            "Succeeded",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Account_Entity": {
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count_account",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Token_For_Associated_Account_Entity": {
                                              "runAfter": {
                                                "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Account_Entity": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error_account",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra_2')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra_2": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Error_True_While_Fetching_Associated_Account_Data": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "account_data_fetch_error",
                                            "value": "@true"
                                          }
                                        },
                                        "Set_Retry_Account_As_Zero_For_Error_While_Fetching_Account_Entity_Data": {
                                          "runAfter": {
                                            "Set_Error_True_While_Fetching_Associated_Account_Data": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count_account",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Fetch_Associated_Account_Entity_Data')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Vectra_Access_Token_For_Account": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Fetch_Associated_Account_Entity_Data": {
                              "runAfter": {
                                "Get_Vectra_Access_Token_For_Account": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Vectra_Access_Token_For_Account')?['value']}",
                                  "Content-Type": "application/json"
                                },
                                "method": "GET",
                                "queries": {
                                  "id": "@{outputs('Compose_Account_Entity_ID_List')}",
                                  "page": "@{variables('page_account')}",
                                  "tags": "@variables('tag')",
                                  "type": "account"
                                },
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities"
                              }
                            }
                          },
                          "runAfter": {
                            "Reset_Account_Entity_ID_List": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(or(equals(variables('retry_count_account'), 0), equals(variables('break_loop_account_entity'), true)), true)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Compose_Host_Entity_ID_List": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('entity_ids_account'))",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_To_Verify_Incident_With_Host_Entities_Found": {
                      "actions": {
                        "Reset_Host_Entity_ID_List": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "entity_ids_host",
                            "value": "@null"
                          }
                        },
                        "Until_Retry_Account_is_Zero_For_Host_Entity": {
                          "actions": {
                            "Condition_To_Verify_Host_Data_Fetched_Successfully": {
                              "actions": {
                                "Condition_To_Check_Whether_Next_is_Null_For_Host_Entity": {
                                  "actions": {
                                    "Set_Break_Loop_True_For_Host_Entity": {
                                      "runAfter": {
                                        "Set_Retry_Account_Count_As_Zero_For_Host_Entity_API": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "break_loop_host_entity",
                                        "value": "@true"
                                      }
                                    },
                                    "Set_Retry_Account_Count_As_Zero_For_Host_Entity_API": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "retry_count_host",
                                        "value": 0
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "For_Each_Host_Entity": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Increment_Page_For_Host_Entity": {
                                        "type": "IncrementVariable",
                                        "inputs": {
                                          "name": "page_host",
                                          "value": 1
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['next']",
                                          "@null"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "For_Each_Host_Entity": {
                                  "foreach": "@body('Parse_JSON_For_Associated_Host_Entity_Data')?['results']",
                                  "actions": {
                                    "Append_Matched_Entity_ID_To_Host_Entity_IDs": {
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "entity_ids_host",
                                        "value": "@items('For_Each_Host_Entity')?['id']"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Parse_JSON_For_Associated_Host_Entity_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Foreach",
                                  "runtimeConfiguration": {
                                    "concurrency": {
                                      "repetitions": 1
                                    }
                                  }
                                },
                                "Parse_JSON_For_Associated_Host_Entity_Data": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@body('HTTP_Request_To_Fetch_Host_Entity_Data')",
                                    "schema": {
                                      "properties": {
                                        "count": {
                                          "type": "integer"
                                        },
                                        "results": {
                                          "items": {
                                            "properties": {
                                              "attack_rating": {
                                                "type": "integer"
                                              },
                                              "breadth_contrib": {
                                                "type": "integer"
                                              },
                                              "detection_set": {
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "entity_importance": {
                                                "type": "integer"
                                              },
                                              "entity_type": {
                                                "type": "string"
                                              },
                                              "host_type": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "id": {
                                                "type": "integer"
                                              },
                                              "importance": {
                                                "type": "integer"
                                              },
                                              "ip": {
                                                "type": [
                                                  "string",
                                                  "null"
                                                ]
                                              },
                                              "is_prioritized": {
                                                "type": "boolean"
                                              },
                                              "last_modified_timestamp": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "notes": {
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "sensors": {
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "severity": {
                                                "type": "string"
                                              },
                                              "state": {
                                                "type": "string"
                                              },
                                              "tags": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": [
                                                  "array",
                                                  "null"
                                                ]
                                              },
                                              "type": {
                                                "type": "string"
                                              },
                                              "urgency_score": {
                                                "type": "integer"
                                              },
                                              "url": {
                                                "type": "string"
                                              },
                                              "velocity_contrib": {
                                                "type": "integer"
                                              }
                                            },
                                            "required": [
                                              "id"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_Request_To_Fetch_Host_Entity_Data": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Condition_To_Generate_New_Access_Token_For_Associated_Host_Entity": {
                                    "actions": {
                                      "Condition_To_Verify_Token_Generated_Successfully_For_Associated_Host_Entity": {
                                        "actions": {
                                          "Decrement_Retry_Host_Count": {
                                            "type": "DecrementVariable",
                                            "inputs": {
                                              "name": "retry_count_host",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "runAfter": {
                                          "GenerateAccessTokenVectra": [
                                            "Succeeded",
                                            "Failed"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Decrement_Retry_Count_For_Error_While_Generating_Token_For_Host_Entity": {
                                              "runAfter": {
                                                "Set_Error_True_While_Generating_Token_For_Associated_Host_Entity": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "DecrementVariable",
                                              "inputs": {
                                                "name": "retry_count_host",
                                                "value": 1
                                              }
                                            },
                                            "Set_Error_True_While_Generating_Token_For_Associated_Host_Entity": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "access_token_generate_error_host",
                                                "value": "@true"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@body('GenerateAccessTokenVectra')?['status']",
                                                "success"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "GenerateAccessTokenVectra": {
                                        "type": "Workflow",
                                        "inputs": {
                                          "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                              "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Logic/workflows/',trim(parameters('GenerateAccessCredPlaybookName')))]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Set_Error_True_While_Fetching_Associated_Host_Data": {
                                          "runAfter": {
                                            "Set_Retry_Account_As_Zero_For_Error_While_Fetching_Host_Entity_Data": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "host_data_fetch_error",
                                            "value": "@true"
                                          }
                                        },
                                        "Set_Retry_Account_As_Zero_For_Error_While_Fetching_Host_Entity_Data": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "retry_count_host",
                                            "value": 0
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('HTTP_Request_To_Fetch_Host_Entity_Data')['statusCode']",
                                            401
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('HTTP_Request_To_Fetch_Host_Entity_Data')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Vectra_Access_Token_For_Host": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['keyvault_3']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent('Vectra-Access-Token')}/value"
                              },
                              "runtimeConfiguration": {
                                "secureData": {
                                  "properties": [
                                    "outputs"
                                  ]
                                }
                              }
                            },
                            "HTTP_Request_To_Fetch_Host_Entity_Data": {
                              "runAfter": {
                                "Get_Vectra_Access_Token_For_Host": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "headers": {
                                  "Authorization": "Bearer @{body('Get_Vectra_Access_Token_For_Host')?['value']}"
                                },
                                "method": "GET",
                                "queries": {
                                  "entity_type": "host",
                                  "id": "@{outputs('Compose_Host_Entity_ID_List')}",
                                  "page": "@{variables('page_host')}",
                                  "tags": "@variables('tag')"
                                },
                                "uri": "@{variables('base_url')}/api/@{variables('api_version')}/entities"
                              }
                            }
                          },
                          "runAfter": {
                            "Reset_Host_Entity_ID_List": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(or(equals(variables('retry_count_host'), 0), equals(variables('break_loop_host_entity'), true)), true)",
                          "limit": {
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Compose_Host_Entity_ID_List": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@empty(variables('entity_ids_host'))",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "For_Each_Matched_Entity_ID_Array": {
                      "foreach": "@variables('entity_id')",
                      "actions": {
                        "Add_comment_to_incident_(V3)": {
                          "runAfter": {
                            "Update_Incident_Severity_To_High": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['incident_url']}",
                              "message": "<p>@{variables('comment')}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Filter_Entity_From_Entity_Incident_Mapping": {
                          "type": "Query",
                          "inputs": {
                            "from": "@variables('entity_incident_mapping')",
                            "where": "@equals(item()?['entity_id'], items('For_Each_Matched_Entity_ID_Array'))"
                          }
                        },
                        "Sent_Notification_Message_To_MS_Teams": {
                          "runAfter": {
                            "Set_Teams_Notification_For_An_Entity": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "messageBody": "<p>@{variables('teams_message')}</p>",
                              "recipient": {
                                "channelId": "[[trim(parameters('TeamsChannelId'))]",
                                "groupId": "[[trim(parameters('TeamsGroupId'))]"
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                          }
                        },
                        "Set_Teams_Notification_For_An_Entity": {
                          "runAfter": {
                            "Add_comment_to_incident_(V3)": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "teams_message",
                            "value": "<strong>Entity ID: @{items('For_Each_Matched_Entity_ID_Array')}, Entity Type: @{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['entity_type']}</strong><br><br>\nIncident has been updated with High Severity in Microsoft Sentinel.<br>\n<strong>Link to the incident is:</strong><a href=@{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['incident_link']}>@{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['incident_link']}</a></p>"
                          }
                        },
                        "Update_Incident_Severity_To_High": {
                          "runAfter": {
                            "Filter_Entity_From_Entity_Incident_Mapping": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@{body('Filter_Entity_From_Entity_Incident_Mapping')[0]?['incident_url']}",
                              "severity": "High"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel_1']['connectionId']"
                              }
                            },
                            "method": "put",
                            "path": "/Incidents"
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_To_Terminate_If_No_Matching_Entities_Found_With_Provided_Tags": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "For_Each_Query_Result": {
                      "foreach": "@body('Parse_JSON_For_Query_Results')",
                      "actions": {
                        "Append_Entity_ID_Incident_Link_And_Incident_URL_To_Entity_Incident_Mapping": {
                          "runAfter": {
                            "Condition_To_Verify_Entity_Type_is_Account": [
                              "Succeeded"
                            ]
                          },
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "entity_incident_mapping",
                            "value": {
                              "entity_id": "@outputs('Compose_Entity_ID_To_Integer')",
                              "entity_type": "@outputs('Compose_Entity_Type_To_JSON')",
                              "incident_link": "@items('For_Each_Query_Result')?['IncidentUrl']",
                              "incident_url": "@split(items('For_Each_Query_Result')?['IncidentUrl'], 'Microsoft_Azure_Security_Insights/Incident')[1]"
                            }
                          }
                        },
                        "Compose_Entity_ID_To_Integer": {
                          "type": "Compose",
                          "inputs": "@int(json(items('For_Each_Query_Result')?['entity_id'])[0])"
                        },
                        "Compose_Entity_Type_To_JSON": {
                          "runAfter": {
                            "Compose_Entity_ID_To_Integer": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": "@json(items('For_Each_Query_Result')?['entity_type'])[0]"
                        },
                        "Condition_To_Verify_Entity_Type_is_Account": {
                          "actions": {
                            "Append_Entity_ID_To_Account_Entity_IDs": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "entity_ids_account",
                                "value": "@outputs('Compose_Entity_ID_To_Integer')"
                              }
                            }
                          },
                          "runAfter": {
                            "Compose_Entity_Type_To_JSON": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_Entity_ID_To_Host_Entity_IDs": {
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "entity_ids_host",
                                  "value": "@outputs('Compose_Entity_ID_To_Integer')"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Compose_Entity_Type_To_JSON')",
                                  "account"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_For_Query_Results": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "Initialize_API_Version": {
                      "runAfter": {
                        "Initialize_Base_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "api_version",
                            "type": "string",
                            "value": "v3.3"
                          }
                        ]
                      }
                    },
                    "Initialize_Access_Token_Generate_Error_For_Account": {
                      "runAfter": {
                        "Initialize_Access_Token_Generate_Error_For_Host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error_account",
                            "type": "boolean"
                          }
                        ]
                      }
                    },
                    "Initialize_Access_Token_Generate_Error_For_Host": {
                      "runAfter": {
                        "Initialize_Account_Data_Fetch_Error": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "access_token_generate_error_host",
                            "type": "boolean"
                          }
                        ]
                      }
                    },
                    "Initialize_Account_Data_Fetch_Error": {
                      "runAfter": {
                        "Initialize_Host_Data_Fetch_Error": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "account_data_fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Account_Entity_IDs": {
                      "runAfter": {
                        "Initialize_Comment": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_ids_account",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Base_URL": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "base_url",
                            "type": "string",
                            "value": "[[trim(parameters('BaseURL'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Comment": {
                      "runAfter": {
                        "Initialize_Tag": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "comment",
                            "type": "string",
                            "value": "[[trim(parameters('IncidentComment'))]"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_ID": {
                      "runAfter": {
                        "Initialize_Entity_Incident_Mapping": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_id",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Entity_Incident_Mapping": {
                      "runAfter": {
                        "Initialize_Host_Entity_IDs": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_incident_mapping",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Host_Data_Fetch_Error": {
                      "runAfter": {
                        "Initialize_Page_For_Host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "host_data_fetch_error",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Host_Entity_IDs": {
                      "runAfter": {
                        "Initialize_Account_Entity_IDs": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "entity_ids_host",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_Loop_Break_For_Account_Entity": {
                      "runAfter": {
                        "Initialize_Retry_Count_For_Host": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "break_loop_account_entity",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Loop_Break_For_Host_Entity": {
                      "runAfter": {
                        "Initialize_Loop_Break_For_Account_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "break_loop_host_entity",
                            "type": "boolean",
                            "value": "@false"
                          }
                        ]
                      }
                    },
                    "Initialize_Page_For_Account": {
                      "runAfter": {
                        "Initialize_Loop_Break_For_Host_Entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "page_account",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Page_For_Host": {
                      "runAfter": {
                        "Initialize_Page_For_Account": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "page_host",
                            "type": "integer",
                            "value": 1
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count_For_Account": {
                      "runAfter": {
                        "Initialize_Entity_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count_account",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_Retry_Count_For_Host": {
                      "runAfter": {
                        "Initialize_Retry_Count_For_Account": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "retry_count_host",
                            "type": "integer",
                            "value": 2
                          }
                        ]
                      }
                    },
                    "Initialize_Tag": {
                      "runAfter": {
                        "Initialize_API_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "tag",
                            "type": "string",
                            "value": "@{if(empty(parameters('Tag')), 'MDR - Customer Escalation', parameters('Tag'))}"
                          }
                        ]
                      }
                    },
                    "Initialize_Teams_Message": {
                      "runAfter": {
                        "Initialize_Access_Token_Generate_Error_For_Account": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "teams_message",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Parse_JSON_For_Query_Results": {
                      "runAfter": {
                        "Run_Query_And_List_Incidents_V2_(Preview)": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Run_Query_And_List_Incidents_V2_(Preview)')?['value']",
                        "schema": {
                          "items": {
                            "properties": {
                              "Entities": {
                                "type": "string"
                              },
                              "IncidentName": {
                                "type": "string"
                              },
                              "IncidentUrl": {
                                "type": "string"
                              },
                              "SystemAlertId": {
                                "type": "string"
                              },
                              "entity_id": {
                                "type": "string"
                              },
                              "entity_type": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "IncidentName",
                              "IncidentUrl",
                              "SystemAlertId",
                              "entity_id",
                              "entity_type",
                              "Entities"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    },
                    "Run_Query_And_List_Incidents_V2_(Preview)": {
                      "runAfter": {
                        "Initialize_Teams_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "query": "SecurityIncident\n| summarize arg_max(TimeGenerated, *) by IncidentName\n| where Severity == \"Medium\" and Status != \"Deleted\"\n| mv-expand AlertIds\n| extend AlertIds = tostring(AlertIds)\n| join kind=inner(SecurityAlert) on $left.AlertIds == $right.SystemAlertId\n| extend customdetails = todynamic(ExtendedProperties).[\"Custom Details\"]\n| parse-kv customdetails as (entity_id: string, entity_Id: string, entity_type: string) with(pair_delimiter=\",\",kv_delimiter=\":\",quote='\"')\n| summarize arg_max(TimeGenerated, *) by IncidentName\n| project IncidentName, IncidentUrl, SystemAlertId, entity_id, entity_type, Entities",
                          "timerange": {
                            "relativeTimeRange": "Last hour"
                          },
                          "timerangetype": "2"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryDataV2",
                        "queries": {
                          "resourcegroups": "[[resourceGroup().name]",
                          "resourcename": "[[trim(parameters('WorkspaceName'))]",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "[[subscription().subscriptionId]"
                        }
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuremonitorlogs": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                        "connectionName": "[[variables('AzuremonitorlogsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]"
                      },
                      "azuresentinel_1": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                        "connectionName": "[[variables('MicrosoftSentinelConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      },
                      "keyvault_3": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                        "connectionName": "[[variables('KeyvaultConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Keyvault')]"
                      },
                      "teams": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]",
                        "connectionName": "[[variables('TeamsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Teams')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "VectraUpdateIncidentBasedOnTagAndNotify",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "apiVersion": "2017-07-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('TeamsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzuremonitorlogsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzuremonitorlogsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('MicrosoftSentinelConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('MicrosoftSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('KeyvaultConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('KeyvaultConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-4')]"
                },
                "parameterValues": {
                  "token:TenantId": "[[trim(parameters('TenantId'))]",
                  "token:grantType": "code",
                  "vaultName": "[[trim(parameters('KeyVaultName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('TeamsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('TeamsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-5')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId17'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId17')]",
                "contentId": "[variables('_playbookContentId17')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion17')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ],
          "metadata": {
            "title": "Vectra Update Incident Based on Tag And Notify",
            "description": "This playbook runs hourly to identify entities with Medium severity incidents, checks for user-defined tags in Vectra, and if found, upgrades the incident severity to High, adds a comment, and sends a notification to a specified MS Teams channel.",
            "prerequisites": [
              "1. The Vectra XDR data connector should be configured to create alerts and generate an incident based on entity data in Microsoft Sentinel.",
              "2. Obtain keyvault name and tenantId where client credentials are stored using which access token will be generated.",
              "a. Create a Key Vault with unique name",
              "b. Go to Keyvaults → <your keyvault> → Overview and copy DirectoryID which will be used as tenantId",
              "NOTE: Make sure the Permission model in the Access Configuration of Keyvault is selected to the Vault access policy. If not then change it to 'Vault access policy'",
              "3. User must have a Microsoft Teams account.",
              "4. Make sure that VectraGenerateAccessToken playbook is deployed before deploying VectraUpdateIncidentBasedOnTagAndNotify playbook."
            ],
            "postDeployment": [
              "**a. Authorize connections**",
              "Once deployment is complete, authorize each connection.",
              "1. Go to your logic app → API connections → Select keyvault connection resource",
              "2. Go to General → edit API connection",
              "3. Click Authorize",
              "4. Sign in",
              "5. Click Save",
              "6. Repeat steps for other connections",
              "**b. Add Access policy in Keyvault**",
              "Add access policy for the playbook's managed identity and authorized user to read, and write secrets of key vault.",
              "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copy Object (principal) ID.",
              "2. Go to keyvaults → <your keyvault> → Access policies ? create.",
              "3. Select all keys & secrets permissions. Click next.",
              "4. In the principal section, search by copied object ID. Click next.",
              "5. Click review + create.",
              "6. Repeat the above step 2 to 5 to add access policy for the user account using which connection is authorized.",
              "**c. Assign Role to add comment in incident**",
              "Assign role to this playbook.",
              "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
              "2.Add role assignment",
              "3.Assignment type: Job function roles",
              "4.Role: Microsoft Sentinel Contributor",
              "5.Members: select managed identity for assigned access to and add your logic app as member",
              "6.Click on review+assign",
              "**d. Configurations in Microsoft Sentinel**",
              "1. In Microsoft sentinel, below analytical rules should be configured to trigger an incident.",
              "a. Vectra Create Incident Based On Tag For Entity Type Account",
              "b. Vectra Create Incident Based On Tag For Entity Type Host",
              "c. Vectra Priority Account Incidents",
              "d. Vectra Priority Host Incidents"
            ],
            "entities": [
              "Account",
              "Host"
            ],
            "tags": [
              "Vectra",
              "Incident",
              "Update",
              "Tags",
              "Comment",
              "Notification"
            ],
            "lastUpdateTime": "2024-08-30T15:13:46.787Z",
            "releaseNotes": {
              "version": "1.0",
              "title": "[variables('blanks')]",
              "notes": [
                "Initial version"
              ]
            }
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId17')]",
        "contentKind": "Playbook",
        "displayName": "VectraUpdateIncidentBasedOnTagAndNotify",
        "contentProductId": "[variables('_playbookcontentProductId17')]",
        "id": "[variables('_playbookcontentProductId17')]",
        "version": "[variables('playbookVersion17')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.2.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Vectra XDR",
        "publisherDisplayName": "Vectra Support",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Vectra%20XDR/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>Vectra AI is the leader in AI-driven threat detection and response for hybrid and multi-cloud enterprises. Vectra AI's cloud-native platform - powered by our patented Attack Signal Intelligence- provide security teams with unified threat visibility, context and control across public cloud, SaaS, identity and data center networks in a prioritized feed. Vectra AI-driven Attack Signal IntelligenceTM, empowers SOC analysts to rapidly prioritize, investigate and respond to the most urgent cyber-attacks in their hybrid cloud environment. Organizations worldwide rely on Vectra AI's cloud-native platform and MDR services to see and stop attacks from becoming breaches. The Vectra AI App enables the security operations team to consume the industry's richest threat signals spanning public cloud, SaaS, identity and data center networks inside of Microsoft Sentinel. For more information, visit <a href=\"http://www.vectra.ai\">www.vectra.ai</a>.</p>\n<p>The Vectra XDR App for Microsoft Sentinel contains:\nData Connector to ingest events generated by Vectra XDR (through OMS agent).\nWorkbook: Dynamic dashboard view of Entities, Detections, Lockdown, Audit and, Health</p>\n<p><strong>Data Connectors:</strong> 1, <strong>Parsers:</strong> 5, <strong>Workbooks:</strong> 1, <strong>Analytic Rules:</strong> 6, <strong>Playbooks:</strong> 17</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/AIVectraDetect.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject1').parserContentId1]",
              "version": "[variables('parserObject1').parserVersion1]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject2').parserContentId2]",
              "version": "[variables('parserObject2').parserVersion2]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject3').parserContentId3]",
              "version": "[variables('parserObject3').parserVersion3]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject4').parserContentId4]",
              "version": "[variables('parserObject4').parserVersion4]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject5').parserContentId5]",
              "version": "[variables('parserObject5').parserVersion5]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
              "version": "[variables('analyticRuleObject3').analyticRuleVersion3]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
              "version": "[variables('analyticRuleObject4').analyticRuleVersion4]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
              "version": "[variables('analyticRuleObject5').analyticRuleVersion5]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
              "version": "[variables('analyticRuleObject6').analyticRuleVersion6]"
            },
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId1')]",
              "version": "[variables('workbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraAddNoteToEntity')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraAddTagToEntityAllDetections')]",
              "version": "[variables('playbookVersion2')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraAddTagToEntity')]",
              "version": "[variables('playbookVersion3')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraAddTagToEntitySelectedDetections')]",
              "version": "[variables('playbookVersion4')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraDynamicAssignMembersToGroup')]",
              "version": "[variables('playbookVersion5')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraAssignDynamicUserToEntity')]",
              "version": "[variables('playbookVersion6')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraStaticAssignMembersToGroup')]",
              "version": "[variables('playbookVersion7')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraAssignStaticUserToEntity')]",
              "version": "[variables('playbookVersion8')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraDecorateIncidentBasedOnTag')]",
              "version": "[variables('playbookVersion9')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraDecorateIncidentBasedOnTagAndNotify')]",
              "version": "[variables('playbookVersion10')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraDynamicResolveAssignment')]",
              "version": "[variables('playbookVersion11')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraGenerateAccessToken')]",
              "version": "[variables('playbookVersion12')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraIncidentTimelineUpdate')]",
              "version": "[variables('playbookVersion13')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraMarkDetectionsAsFixed')]",
              "version": "[variables('playbookVersion14')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraOperateOnEntitySourceIP')]",
              "version": "[variables('playbookVersion15')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraStaticResolveAssignment')]",
              "version": "[variables('playbookVersion16')]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_VectraUpdateIncidentBasedOnTagAndNotify')]",
              "version": "[variables('playbookVersion17')]"
            }
          ]
        },
        "firstPublishDate": "2023-07-04",
        "lastPublishDate": "2024-08-01",
        "providers": [
          "Vectra"
        ],
        "categories": {
          "domains": [
            "Security - Network",
            "Security - Cloud Security"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
