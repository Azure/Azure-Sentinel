id: cec7a60f-c8ca-4ca9-96d6-6472331c2a2f
Function:
  Title: Workspace Function for Syslog Connectors Overall Status
  Version: '1.0.0'
  LastUpdated: '2024-07-11'
Category: Microsoft Sentinel Parser
FunctionName: SyslogConnectorsOverallStatus
FunctionAlias: SyslogConnectorsOverallStatus
FunctionParams:
  - Name: start
    Type: datetime
    Default: datetime(null)
  - Name: end
    Type: datetime
    Default: datetime(null)
FunctionQuery: |
  let startTime = start;
  let endTime = end;
  let empty_table_result = datatable (DeviceProduct:string, EventCount:long, ConnectionStatus:string ) [];
  let empty_table_connector_status = datatable (TimeGenerated:datetime, DeviceProduct:string, EventCount:long   ) [];
  let known_syslog_supported_devices = externaldata(DeviceProduct: string, ConnectorType:string)[@"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/SyslogCEFConnectors.csv"] with (format="csv", ignoreFirstRecord=true) | where ConnectorType == "Syslog" | distinct DeviceProduct;
  let BlackberryCylancePROTECT_Status = union isfuzzy=true empty_table_connector_status, CylancePROTECT | extend DeviceProduct = "Blackberry CylancePROTECT" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let CiscoACI_Status = union isfuzzy=true empty_table_connector_status, CiscoACIEvent | extend DeviceProduct = "Cisco Application Centric Infrastructure" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let CiscoISE_Status = union isfuzzy=true empty_table_connector_status, CiscoISEEvent | extend DeviceProduct = "Cisco Identity Services Engine" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let Stealthwatch_Status = union isfuzzy=true empty_table_connector_status, StealthwatchEvent | extend DeviceProduct = "Cisco Secure Cloud Analytics" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let CiscoUCS_Status = union isfuzzy=true empty_table_connector_status, CiscoUCS | extend DeviceProduct = "Cisco UCS" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let CiscoWSA_Status = union isfuzzy=true empty_table_connector_status, CiscoWSAEvent | extend DeviceProduct = "Cisco Web Security Appliance" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let CitrixADC_Status = union isfuzzy=true empty_table_connector_status, CitrixADCEvent | extend DeviceProduct = "Citrix ADC (former NetScaler)" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let DigitalGuardianDLP_Status = union isfuzzy=true empty_table_connector_status, DigitalGuardianDLPEvent | extend DeviceProduct = "Digital Guardian Data Loss Prevention" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let Exabeam_Status = union isfuzzy=true empty_table_connector_status, ExabeamEvent | extend DeviceProduct = "Exabeam Advanced Analytics" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let Forescout_Status = union isfuzzy=true empty_table_connector_status, ForescoutEvent | extend DeviceProduct = "Forescout" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let GitLab_Status = union isfuzzy=true empty_table_connector_status, GitLabApp, GitLabAudit, GitLabAccess  | extend DeviceProduct = "GitLab" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let InfobloxNIOS_Status = union isfuzzy=true empty_table_connector_status, Infoblox | extend DeviceProduct = "Infoblox NIOS" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let ISCBind_Status = union isfuzzy=true empty_table_connector_status, ISCBind | extend DeviceProduct = "ISC Bind" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let IvantiUEM_Status = union isfuzzy=true empty_table_connector_status, IvantiUEMEvent | extend DeviceProduct = "Ivanti Unified Endpoint Management" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let JuniperSRX_Status = union isfuzzy=true empty_table_connector_status, JuniperSRX | extend DeviceProduct = "Juniper SRX" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let McAfeeePO_Status = union isfuzzy=true empty_table_connector_status, McAfeeEPOEvent | extend DeviceProduct = "McAfee ePolicy Orchestrator (ePO)" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let McAfeeNSP_Status = union isfuzzy=true empty_table_connector_status, McAfeeNSPEvent | extend DeviceProduct = "McAfee Network Security Platform" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let OpenVPN_Status = union isfuzzy=true empty_table_connector_status, OpenVpnEvent | extend DeviceProduct = "OpenVPN Server" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let OracleDatabaseAudit_Status = union isfuzzy=true empty_table_connector_status, OracleDatabaseAuditEvent | extend DeviceProduct = "Oracle Database Audit" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let PulseConnectSecure_Status = union isfuzzy=true empty_table_connector_status, PulseConnectSecure  | extend DeviceProduct = "Pulse Connect Secure" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let RSASecurIDAM_Status = union isfuzzy=true empty_table_connector_status, RSASecurIDAMEvent | extend DeviceProduct = "RSA SecurID (Authentication Manager)" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let SophosXGFirewall_Status = union isfuzzy=true empty_table_connector_status, SophosXGFirewall | extend DeviceProduct = "Sophos XG Firewall" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let SymantecEndpointProtection_Status = union isfuzzy=true empty_table_connector_status, SymantecEndpointProtection  | extend DeviceProduct = "Symantec Endpoint Protection" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let SymantecVIP_Status = union isfuzzy=true empty_table_connector_status, SymantecVIP  | extend DeviceProduct = "Symantec VIP" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let MicrosoftSysmonForLinux_Status = union isfuzzy=true empty_table_connector_status, Syslog | where ProcessName == 'sysmon' | extend DeviceProduct = "Microsoft Sysmon For Linux" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let VMwareESXi_Status = union isfuzzy=true empty_table_connector_status, VMwareESXi  | extend DeviceProduct = "VMware ESXi" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let SymantecProxySG_Status = union isfuzzy=true empty_table_connector_status, SymantecProxySG | extend DeviceProduct = "Symantec ProxySG" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let ESETPROTECT_Status = union isfuzzy=true empty_table_connector_status, CylancePROTECT | extend DeviceProduct = "ESET PROTECT" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let BarracudaCloudFirewall_Status = union isfuzzy=true empty_table_connector_status, CGFWFirewallActivity | extend DeviceProduct = "Barracuda CloudGen Firewall" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let NasuniEdgeAppliance_Status = union isfuzzy=true empty_table_connector_status, Syslog | extend DeviceProduct = "Nasuni Edge Appliance" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  let WatchguardFirebox_Status = union isfuzzy=true empty_table_connector_status, WatchGuardFirebox | extend DeviceProduct = "WatchGuard Firebox" | where  TimeGenerated between (startTime .. endTime) | summarize EventCount = count ()  by DeviceProduct |  extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected");
  union isfuzzy=true  empty_table_result, BlackberryCylancePROTECT_Status, CiscoACI_Status, CiscoISE_Status, Stealthwatch_Status, CiscoUCS_Status, CiscoWSA_Status, CitrixADC_Status, DigitalGuardianDLP_Status, Exabeam_Status, Forescout_Status, GitLab_Status, InfobloxNIOS_Status, ISCBind_Status, IvantiUEM_Status, JuniperSRX_Status, McAfeeePO_Status, OpenVPN_Status, OracleDatabaseAudit_Status,  PulseConnectSecure_Status, RSASecurIDAM_Status, SophosXGFirewall_Status, SymantecEndpointProtection_Status, SymantecVIP_Status, MicrosoftSysmonForLinux_Status, VMwareESXi_Status, SymantecProxySG_Status, ESETPROTECT_Status, BarracudaCloudFirewall_Status, NasuniEdgeAppliance_Status, WatchguardFirebox_Status 
  | extend EventCount = coalesce(EventCount, 0)
  | extend ConnectionStatus = iff(EventCount > 0, "Connected", "Not-Connected")
  | join kind=fullouter known_syslog_supported_devices on DeviceProduct
  | extend DeviceProduct = coalesce(DeviceProduct, DeviceProduct1)
  | extend EventCount = coalesce(EventCount, 0)
  | extend ConnectionStatus = coalesce(ConnectionStatus, "Not-Connected")
  | extend OutofBoxSupport = iif(DeviceProduct in (known_syslog_supported_devices), "Available", "Unavailable")
  | project-away DeviceProduct1