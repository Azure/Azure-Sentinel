{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "DataminrPulseAlertEnrichment",
    "description": "This playbook provides an end-to-end example of how alert enrichment works. This will extract the IP, Domain, HostName, URL or Hashes from the generated incident and call the Get alerts API of Dataminr Pulse to get the data associated with that parameter and enrich the incident by adding Dataminr Pulse alerts data as an incident comment.",
    "prerequisites": [
      "1. Users must have a valid pair of Dataminr Pulse API Client ID and secret credentials.",
      "2. Store client credentials in Key Vault and obtain keyvault name and tenantId.",
      "a. Create a Key Vault with unique name",
      "b. Go to KeyVault -> secrets -> Generate/import and create 'DataMinrPulse-clientId'& 'DataMinrPulse-clientSecret' to store client_id and client_secret respectively. Also create a secret named 'DataMinrPulse-DmaToken' to store dmaToken."
    ],
    "postDeployment": [
      "**a. Authorize connections**",
      "Once deployment is complete, authorize each connection.",
      "1. Click the Keyvault connection resource",
      "2. Click edit API connection",
      "3. Click Authorize",
      "4. Sign in",
      "5. Click Save",
      "6. Repeat steps for other connections",
      "**b. Assign Role to add comment in incident**",
      "After authorizing each connection, assign role to this playbook.",
      "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
      "2.Add role assignment",
      "3.Assignment type: Job function roles",
      "4.Role: Microsoft Sentinel Contributor",
      "5.Members: select managed identity for assigned access to and add your logic app as member as shown in screenshot below",
      "6.Click on review+assign",
      "**c. Add Access policy in Keyvault**",
      "Add access policy for playbook's managed identity to read, write secrets of keyvault.",
      "1. Go to logic app → <your logic app> → identity → System assigned Managed identity and copied it.",
      "2. Go to keyvaults → <your keyvault> → Access policies → create.",
      "3. Select all keys & secrets permissions. Click next.",
      "4. In principal section, search by copied identity object ID. Click next.",
      "5. Click review + create.",
      "**d. Configurations in Sentinel**",
      "1. In Microsoft sentinel, Configure the analytic rules to trigger an incident.",
      "a. Analytic Rule must contain atleast one of the below fields mapped in Custom Details to successfully run this playbook.",
      "DstDomain",
      "DstHostname",
      "DstIpAddr",
      "DstMacAddr",
      "SrcDomain",
      "SrcFileMD5",
      "SrcFileSHA1",
      "SrcFileSHA256",
      "SrcFileSHA512",
      "SrcHostname",
      "SrcIpAddr",
      "SrcMacAddr",
      "TargetFileMD5",
      "TargetFileSHA1",
      "TargetFileSHA256",
      "TargetFileSHA512",
      "Url",
      "2. In Microsoft Sentinel, Configure the automation rules to trigger the playbook.",
      "a. Go to Microsoft Sentinel -> <your workspace> -> Automation",
      "b. Click on **Create** -> **Automation rule**",
      "c. Provide name for your rule",
      "d. In Analytic rule name condition, select analytic rule which you have created.",
      "e. In Actions dropdown select **Run playbook**",
      "f. In second dropdown select your deployed playbook",
      "g. Click on **Apply**",
      "h. Save the Automation rule."
    ],
    "entities": [
      "IP",
      "Host",
      "URL",
      "FileHash"
    ],
    "tags": [
      "Dataminr",
      "Pulse",
      "alerting",
      "enrichment"
    ],
    "lastUpdateTime": "2023-09-07T12:15:00Z",
    "support": {
      "tier": "community",
      "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
    },
    "author": {
      "name": "Dataminr"
    }
  },
  "parameters": {
    "PlaybookName": {
      "defaultValue": "DataminrPulseAlertEnrichment",
      "type": "string"
    },
    "azure key vault": {
      "type": "string",
      "defaultValue": "vault.azure",
      "metadata": {
        "description": "Enter value for azure key vault"
      }
    },
    "KeyVaultName": {
      "type": "string",
      "minLength": 1
    },
    "tenantId": {
      "type": "string",
      "minLength": 1
    },
    "BaseURL": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Enter baseurl for your Dataminr account.(e.g. https://gateway.dataminr.com/)"
      }
    }
  },
  "variables": {
    "MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
    "KeyvaultConnectionName": "[concat('Keyvault-', parameters('PlaybookName'))]"
  },
  "resources": [
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            },
            "azure key vault": {
              "type": "string",
              "defaultValue": "[parameters('azure key vault')]"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "For_Each_Alerts": {
              "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
              "actions": {
                "Does_DstDomain_exist_in_the_incident": {
                  "actions": {
                    "Append_DstDomain_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['DstDomain'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_SrcDomain_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['DstDomain'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_DstHostname_exist_in_the_incident": {
                  "actions": {
                    "Append_DstHostname_to_query_string_": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['DstHostname'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_SrcHostname_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['DstHostname'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_DstIpAddr_exist_in_the_incident": {
                  "actions": {
                    "Append_DstIpAddr_to_query_string_": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['DstIpAddr'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_SrcIpAddr_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['DstIpAddr'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_DstMacAddr_exist_in_the_incident": {
                  "actions": {
                    "Append_DstMacAddr_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['DstMacAddr'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_SrcMacAddr_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['DstMacAddr'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_SrcDomain_exist_in_the_incident": {
                  "actions": {
                    "Append_SrcDomain_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcDomain'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_DstHostname_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcDomain'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_SrcFileMD5_exist_in_the_incident": {
                  "actions": {
                    "Append_SrcFileMD5_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcFileMD5'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_DstMacAddr_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcFileMD5'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_SrcFileSHA1_exist_in_the_incident": {
                  "actions": {
                    "Append_SrcFileSHA1_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcFileSHA1'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_TargetFileMD5_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcFileSHA1'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_SrcFileSHA256_exist_in_the_incident": {
                  "actions": {
                    "Append_SrcFileSHA256_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcFileSHA256'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_TargetFileSHA1_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcFileSHA256'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_SrcFileSHA512_exist_in_the_incident": {
                  "actions": {
                    "Append_SrcFileSHA512_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcFileSHA512'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_TargetFileSHA256_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcFileSHA512'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_SrcHostname_exist_in_the_incident": {
                  "actions": {
                    "Append_SrcHostname_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcHostname'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_DstIpAddr_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcHostname'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_SrcIpAddr_exist_in_the_incident": {
                  "actions": {
                    "Append_SrcIpAddr_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcIpAddr'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Parse_Alerts_Custom_Data_into_JSON": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcIpAddr'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_SrcMacAddr_exist_in_the_incident": {
                  "actions": {
                    "Append_SrcMacAddr_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcMacAddr'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_DstDomain_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['SrcMacAddr'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_TargetFileMD5_exist_in_the_incident": {
                  "actions": {
                    "Append_TargetFileMD5_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['TargetFileMD5'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_SrcFileMD5_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['TargetFileMD5'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_TargetFileSHA1_exist_in_the_incident": {
                  "actions": {
                    "Append_TargetFileSHA1_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['TargetFileSHA1'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_SrcFileSHA1_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['TargetFileSHA1'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_TargetFileSHA256_exist_in_the_incident": {
                  "actions": {
                    "Append_TargetFileSHA256_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['TargetFileSHA256'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_SrcFileSHA256_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['TargetFileSHA256'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_TargetFileSHA512_exist_in_the_incident": {
                  "actions": {
                    "Append_TargetFileSHA512_to_query_string": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['TargetFileSHA512'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_SrcFileSHA512_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['TargetFileSHA512'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_Url_exist_in_the_incident": {
                  "actions": {
                    "Append_Url_to_string_variable": {
                      "runAfter": {},
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "query",
                        "value": "@concat(body('Parse_Alerts_Custom_Data_into_JSON')?['Url'],',')"
                      }
                    }
                  },
                  "runAfter": {
                    "Does_TargetFileSHA512_exist_in_the_incident": [
                      "Succeeded"
                    ]
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(body('Parse_Alerts_Custom_Data_into_JSON')?['Url'])",
                          false
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Parse_Alerts_Custom_Data_into_JSON": {
                  "runAfter": {},
                  "type": "ParseJson",
                  "inputs": {
                    "content": "@items('For_Each_Alerts')?['properties']?['additionalData']?['Custom Details']",
                    "schema": {
                      "properties": {
                        "DstDomain": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "DstHostname": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "DstIpAddr": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "DstMacAddr": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "SrcDomain": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "SrcFileMD5": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "SrcFileSHA1": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "SrcFileSHA256": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "SrcFileSHA512": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "SrcHostname": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "SrcIpAddr": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "SrcMacAddr": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "TargetFileMD5": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "TargetFileSHA1": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "TargetFileSHA256": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "TargetFileSHA512": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "Url": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              },
              "runAfter": {
                "Initialize_categories": [
                  "Succeeded"
                ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "Get_ClientId": {
              "runAfter": {
                "For_Each_Alerts": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('DataMinrPulse-clientId')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "Get_ClientSecret": {
              "runAfter": {
                "Get_ClientId": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('DataMinrPulse-clientSecret')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "If_alerts_contain_data": {
              "actions": {
                "For_each_alert": {
                  "foreach": "@body('Parse_Alerts_Data_into_JSON')?['data']?['alerts']",
                  "actions": {
                    "Add_comment_to_incident_when_matching_alert_data_found": {
                      "runAfter": {
                        "If_cyber_metadata_contains_hashValues": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p><span style=\"font-size: 14px\"><strong>alertId: </strong></span>@{items('For_each_alert')?['alertId']}<br>\n<span style=\"font-size: 14px\"><strong>eventTime: </strong></span><span style=\"font-size: 12px\"></span><span style=\"font-size: 12px\">@{addToTime('1970-01-01T00:00:00Z',div(int(items('For_each_alert')?['eventTime']),1000),'second')}</span><span style=\"font-size: 12px\"></span><span style=\"font-size: 14px\"><strong><br>\nwatchlistsMatchedByType: </strong></span><span style=\"font-size: 14px\"><strong>@{variables('watchlistsMatchedByType')}</strong></span><span style=\"font-size: 14px\"><strong></strong></span><br>\n<span style=\"font-size: 14px\"><strong>source_channels :</strong></span> @{items('For_each_alert')?['source']?['channels']}<br>\n<span style=\"font-size: 14px\"><strong>caption :</strong></span> @{items('For_each_alert')?['caption']}<br>\n<span style=\"font-size: 14px\"><strong>alertType :</strong></span> @{items('For_each_alert')?['alertType']?['id']}<br>\n<span style=\"font-size: 14px\"><strong>related Terms:</strong></span><span style=\"font-size: 14px\"> </span><span style=\"font-size: 14px\">@{variables('relatedTermsText')}</span><span style=\"font-size: 14px\"><br>\n</span><span style=\"font-size: 14px\"><strong>expandAlertURL:</strong></span><strong> </strong>@{items('For_each_alert')?['expandAlertURL']}<br>\n<span style=\"font-size: 14px\"><strong>categories:</strong></span><span style=\"font-size: 14px\"> </span><span style=\"font-size: 14px\">@{variables('categories')}</span><span style=\"font-size: 14px\"><br>\n</span><span style=\"font-size: 14px\"><strong>companies:</strong></span><span style=\"font-size: 12px\"> </span><span style=\"font-size: 12px\">@{variables('companies')}</span><span style=\"font-size: 12px\"></span><span style=\"font-size: 14px\"><strong><br>\neventLocation related details<br>\n</strong></span><span style=\"font-size: 12px\"><strong>coordinates: </strong></span><span style=\"font-size: 12px\"></span><span style=\"font-size: 12px\">@{items('For_each_alert')?['eventLocation']?['coordinates']}</span><span style=\"font-size: 12px\"><br>\n</span><span style=\"font-size: 12px\"><strong>name:</strong></span><span style=\"font-size: 12px\"> </span><span style=\"font-size: 12px\">@{items('For_each_alert')?['eventLocation']?['name']}</span><span style=\"font-size: 12px\"><br>\n</span><span style=\"font-size: 14px\"><br>\n</span><span style=\"font-size: 14px\"><strong>CYBER related metadata</strong></span><span style=\"font-size: 14px\"><br>\n</span><strong>vulnerabilities : </strong>@{variables('vulnerabilities')}<br>\n<strong>ip addresses :</strong> @{variables('ip')}<strong><br>\nport : </strong>@{variables('port')}<strong><br>\nasns :</strong> @{variables('asns')}<br>\n<strong>orgs : </strong>@{items('For_each_alert')?['metadata']?['cyber']?['orgs']}<br>\n<strong>products : </strong>@{items('For_each_alert')?['metadata']?['cyber']?['products']}<br>\n<strong>URLs : </strong>@{items('For_each_alert')?['metadata']?['cyber']?['URLs']}<br>\n<strong>threats : </strong>@{items('For_each_alert')?['metadata']?['cyber']?['threats']}<br>\n<strong>asOrgs : </strong><strong>@{variables('asOrg')}</strong><strong><br>\nhashes : </strong>@{variables('hashValues')}<br>\n<strong>Malwares :</strong> @{items('For_each_alert')?['metadata']?['cyber']?['malwares']}</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "If_alerts_contain_Companies": {
                      "actions": {
                        "For_each_companies": {
                          "foreach": "@items('For_each_alert')['companies']",
                          "actions": {
                            "Append_name_to_companies": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "companies",
                                "value": "@if(contains(items('For_each_companies'),'name'),items('For_each_companies')?['name'],'')"
                              }
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "If_alerts_contain_watchlistsMatchedByType_property": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@contains(items('For_each_alert'),'companies')",
                              true
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_alerts_contain_categories_property": {
                      "actions": {
                        "For_each_category": {
                          "foreach": "@items('For_each_alert')?['categories']",
                          "actions": {
                            "Append_name_to_categories": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "categories",
                                "value": "@if(contains(items('For_each_category'),'name'),items('For_each_category')?['name'],'')"
                              }
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "If_alerts_contain_related_Terms": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@contains(items('For_each_alert'),'categories')",
                              true
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_alerts_contain_related_Terms": {
                      "actions": {
                        "For_each_related_Terms": {
                          "foreach": "@items('For_each_alert')?['relatedTerms']",
                          "actions": {
                            "Append_text_to_relatedTermsText": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "relatedTermsText",
                                "value": "@if(contains(items('For_each_related_Terms'),'text'),items('For_each_related_Terms')?['text'],'')"
                              }
                            },
                            "Append_url_to_relatedTermsUrl": {
                              "runAfter": {
                                "Append_text_to_relatedTermsText": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "relatedTermsUrl",
                                "value": "@if(contains(items('For_each_related_Terms'),'url'),items('For_each_related_Terms')?['url'],'')"
                              }
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {},
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@contains(items('For_each_alert'),'relatedTerms')",
                              true
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_alerts_contain_watchlistsMatchedByType_property": {
                      "actions": {
                        "For_each_watchlists": {
                          "foreach": "@items('For_each_alert')['watchlistsMatchedByType']",
                          "actions": {
                            "Append_name_to_watchlistsMatchedByType": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "watchlistsMatchedByType",
                                "value": "@if(contains(items('For_each_watchlists'),'name'),items('For_each_watchlists')?['name'],'')"
                              }
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "If_alerts_contain_categories_property": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@contains(items('For_each_alert'),'watchlistsMatchedByType')",
                              true
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_cyber_metadata_contains_addresses": {
                      "actions": {
                        "For_each_cyber_addresses": {
                          "foreach": "@items('For_each_alert')['metadata']['cyber']['addresses']",
                          "actions": {
                            "Set_ip": {
                              "runAfter": {},
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ip",
                                "value": "@{if(contains(items('For_each_cyber_addresses'),'ip'),items('For_each_cyber_addresses')?['ip'],'')}"
                              }
                            },
                            "Set_port": {
                              "runAfter": {
                                "Set_ip": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "port",
                                "value": "@{if(contains(items('For_each_cyber_addresses'),'port'),items('For_each_cyber_addresses')?['port'],'')}"
                              }
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "If_alerts_contain_Companies": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@if(contains(items('For_each_alert'),'metadata'),if(contains(items('For_each_alert')?['metadata'],'cyber'),if(contains(items('For_each_alert')?['metadata']?['cyber'],'addresses'),true,false),false),false)",
                              true
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_cyber_metadata_contains_asOrgs": {
                      "actions": {
                        "For_each_asOrgs": {
                          "foreach": "@items('For_each_alert')?['metadata']?['cyber']?['asOrgs']",
                          "actions": {
                            "Append_asn_to_asns": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "asns",
                                "value": "@if(contains(items('For_each_asOrgs'),'asn'),items('For_each_asOrgs')?['asn'],'')"
                              }
                            },
                            "Append_to_array_variable": {
                              "runAfter": {
                                "Append_asn_to_asns": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "asOrg",
                                "value": "@if(contains(items('For_each_asOrgs'),'asOrg'),items('For_each_asOrgs')?['asOrg'],'')"
                              }
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "Ifcyber_metadata_contains_vulnerabilities": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@if(contains(items('For_each_alert'),'metadata'),if(contains(items('For_each_alert')?['metadata'],'cyber'),if(contains(items('For_each_alert')?['metadata']?['cyber'],'asOrgs'),true,false),false),false)",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "If_cyber_metadata_contains_hashValues": {
                      "actions": {
                        "For_each_hashValues": {
                          "foreach": "@items('For_each_alert')?['metadata']?['cyber']?['hashValues']",
                          "actions": {
                            "Append_to_array_hashValues": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "hashValues",
                                "value": "@if(contains(items('For_each_hashValues'),'value'),items('For_each_hashValues')?['value'],'')"
                              }
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "If_cyber_metadata_contains_asOrgs": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@if(contains(items('For_each_alert'),'metadata'),if(contains(items('For_each_alert')?['metadata'],'cyber'),if(contains(items('For_each_alert')?['metadata']?['cyber'],'hashValues'),true,false),false),false)",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Ifcyber_metadata_contains_vulnerabilities": {
                      "actions": {
                        "For_each_vulnerabilities": {
                          "foreach": "@items('For_each_alert')?['metadata']?['cyber']?['vulnerabilities']",
                          "actions": {
                            "Append_id_to_velnerabilities": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "vulnerabilities",
                                "value": "@if(contains(items('For_each_vulnerabilities'),'id'),items('For_each_vulnerabilities')?['id'],'')"
                              }
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        }
                      },
                      "runAfter": {
                        "If_cyber_metadata_contains_addresses": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@if(contains(items('For_each_alert'),'metadata'),if(contains(items('For_each_alert')?['metadata'],'cyber'),if(contains(items('For_each_alert')?['metadata']?['cyber'],'vulnerabilities'),true,false),false),false)",
                              true
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Set_asOrg_to_empty": {
                      "runAfter": {
                        "Set_asns_to_empty": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "asOrg",
                        "value": "@null"
                      }
                    },
                    "Set_asns_to_empty": {
                      "runAfter": {
                        "Set_vulnerabilities_to_empty": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "asns",
                        "value": "@null"
                      }
                    },
                    "Set_categories": {
                      "runAfter": {
                        "Add_comment_to_incident_when_matching_alert_data_found": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "categories",
                        "value": "@null"
                      }
                    },
                    "Set_companies_to_empty": {
                      "runAfter": {
                        "Set_relatedTermsUrl": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "companies",
                        "value": "@null"
                      }
                    },
                    "Set_hashValues_to_empty": {
                      "runAfter": {
                        "Set_asOrg_to_empty": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "hashValues",
                        "value": "@null"
                      }
                    },
                    "Set_relatedTermsText": {
                      "runAfter": {
                        "Set_categories": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "relatedTermsText",
                        "value": "@null"
                      }
                    },
                    "Set_relatedTermsUrl": {
                      "runAfter": {
                        "Set_relatedTermsText": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "relatedTermsUrl",
                        "value": "@null"
                      }
                    },
                    "Set_vulnerabilities_to_empty": {
                      "runAfter": {
                        "Set_watchlistsMatchedByType_to_empty": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "vulnerabilities",
                        "value": "@null"
                      }
                    },
                    "Set_watchlistsMatchedByType_to_empty": {
                      "runAfter": {
                        "Set_companies_to_empty": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "watchlistsMatchedByType",
                        "value": "@null"
                      }
                    }
                  },
                  "runAfter": {},
                  "type": "Foreach",
                  "runtimeConfiguration": {
                    "concurrency": {
                      "repetitions": 1
                    }
                  }
                }
              },
              "runAfter": {
                "If_status_code_is_not_200": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Add_comment_to_incident_when_no_matching_alert_data_found": {
                    "runAfter": {},
                    "type": "ApiConnection",
                    "inputs": {
                      "body": {
                        "incidentArmId": "@triggerBody()?['object']?['id']",
                        "message": "<p>No data found from DataminrPulse related to &nbsp;query parameter : @{variables('query')}</p>"
                      },
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                        }
                      },
                      "method": "post",
                      "path": "/Incidents/Comment"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@empty(body('Parse_Alerts_Data_into_JSON')?['data']?['alerts'])",
                      false
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "If_loop_exit_due_to_authentication_error": {
              "actions": {
                "Terminate_": {
                  "runAfter": {},
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "@{outputs('Generate_auth_token')['statusCode']}",
                      "message": "@variables('AuthErrorMessage')"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Initialize_hashValues": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@empty(variables('AuthErrorMessage'))",
                      false
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "If_status_code_is_not_200": {
              "actions": {
                "Terminate": {
                  "runAfter": {},
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "@{outputs('Get_Alerts_from_Dataminr_Pulse_API')['statusCode']}",
                      "message": "@{body('Get_Alerts_from_Dataminr_Pulse_API')?['errors'][0]?['message']}"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "If_loop_exit_due_to_authentication_error": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('Get_Alerts_from_Dataminr_Pulse_API')['statusCode']",
                        200
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Initialize_AuthErrorMessage": {
              "runAfter": {
                "Initialize_ErrorMessage": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AuthErrorMessage",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_BaseUrl": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "BaseUrl",
                    "type": "string",
                    "value": "[parameters('BaseURL')]"
                  }
                ]
              }
            },
            "Initialize_DmaTokenKey": {
              "runAfter": {
                "Initialize_AuthErrorMessage": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "DmaTokenKey",
                    "type": "string",
                    "value": "DataMinrPulse-DmaToken"
                  }
                ]
              }
            },
            "Initialize_ErrorMessage": {
              "runAfter": {
                "Initialize_BaseUrl": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ErrorMessage",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_ExpireTimeKey": {
              "runAfter": {
                "Initialize_RefreshTokenKey": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ExpireTimeKey",
                    "type": "string",
                    "value": "DataMinrPulse-Expire"
                  }
                ]
              }
            },
            "Initialize_KeyVaultName": {
              "runAfter": {
                "Initialize_ExpireTimeKey": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "KeyVaultName",
                    "type": "string",
                    "value": "[parameters('KeyVaultName')]"
                  }
                ]
              }
            },
            "Initialize_RefreshTokenKey": {
              "runAfter": {
                "Initialize_DmaTokenKey": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RefreshTokenKey",
                    "type": "string",
                    "value": "DataMinrPulse-RefreshToken"
                  }
                ]
              }
            },
            "Initialize_asOrg": {
              "runAfter": {
                "Initialize_asns": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "asOrg",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_asns": {
              "runAfter": {
                "Initialize_vulnerabilities": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "asns",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_categories": {
              "runAfter": {
                "Initialize_relatedTermsText": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "categories",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_companies": {
              "runAfter": {
                "Initialize_watchlistsMatchedByType": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "companies",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_count": {
              "runAfter": {
                "Initialize_query": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "count",
                    "type": "integer",
                    "value": 2
                  }
                ]
              }
            },
            "Initialize_hashValues": {
              "runAfter": {
                "Initialize_asOrg": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "hashValues",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_ip": {
              "runAfter": {
                "Initialize_relatedTermsUrl": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ip",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_port": {
              "runAfter": {
                "Initialize_ip": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "port",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_query": {
              "runAfter": {
                "Initialize_KeyVaultName": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "query",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_relatedTermsText": {
              "runAfter": {
                "Initialize_count": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "relatedTermsText",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_relatedTermsUrl": {
              "runAfter": {
                "Initialize_companies": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "relatedTermsUrl",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_vulnerabilities": {
              "runAfter": {
                "Initialize_port": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "vulnerabilities",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_watchlistsMatchedByType": {
              "runAfter": {
                "Until_retry_count_gets_0": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "watchlistsMatchedByType",
                    "type": "array"
                  }
                ]
              }
            },
            "Until_retry_count_gets_0": {
              "actions": {
                "Get_Alerts_from_Dataminr_Pulse_API": {
                  "runAfter": {
                    "Get_DmaToken": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "Authorization": "Dmauth @{body('Get_DmaToken')?['value']}"
                    },
                    "method": "GET",
                    "queries": {
                      "alertversion": "14",
                      "query": "@variables('query')"
                    },
                    "uri": "@{concat(variables('BaseUrl'),'api/3/alerts')}"
                  }
                },
                "Get_DmaToken": {
                  "runAfter": {},
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                      }
                    },
                    "method": "get",
                    "path": "/secrets/@{encodeURIComponent('DataMinrPulse-DmaToken')}/value"
                  },
                  "runtimeConfiguration": {
                    "secureData": {
                      "properties": [
                        "inputs",
                        "outputs"
                      ]
                    }
                  }
                },
                "_if_status_code_is_200": {
                  "actions": {
                    "Parse_Alerts_Data_into_JSON": {
                      "runAfter": {},
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_Alerts_from_Dataminr_Pulse_API')",
                        "schema": {
                          "properties": {
                            "data": {
                              "properties": {
                                "alerts": {
                                  "items": {
                                    "properties": {
                                      "alertId": {
                                        "type": "string"
                                      },
                                      "alertType": {
                                        "properties": {
                                          "color": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "availableRelatedAlerts": {
                                        "type": "integer"
                                      },
                                      "caption": {
                                        "type": "string"
                                      },
                                      "categories": {
                                        "items": {
                                          "properties": {
                                            "id": {
                                              "type": "string"
                                            },
                                            "idStr": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "path": {
                                              "type": "string"
                                            },
                                            "requested": {
                                              "type": "string"
                                            },
                                            "retired": {
                                              "type": "boolean"
                                            },
                                            "topicType": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "companies": {
                                        "items": {
                                          "properties": {
                                            "dm_bucket": {
                                              "items": {
                                                "properties": {
                                                  "id": {
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "dm_sector": {
                                              "items": {
                                                "properties": {
                                                  "id": {
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "id": {
                                              "type": "string"
                                            },
                                            "idStr": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "retired": {
                                              "type": "boolean"
                                            },
                                            "ticker": {
                                              "type": "string"
                                            },
                                            "topicType": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "eventLocation": {
                                        "properties": {
                                          "coordinates": {
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "places": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "probability": {
                                            "type": "integer"
                                          },
                                          "radius": {
                                            "type": [
                                              "number",
                                              "integer"
                                            ]
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "eventMapLargeURL": {
                                        "type": "string"
                                      },
                                      "eventMapSmallURL": {
                                        "type": "string"
                                      },
                                      "eventTime": {
                                        "type": "integer"
                                      },
                                      "eventVolume": {
                                        "type": "integer"
                                      },
                                      "expandAlertURL": {
                                        "type": "string"
                                      },
                                      "expandMapURL": {
                                        "type": "string"
                                      },
                                      "headerColor": {
                                        "type": "string"
                                      },
                                      "headerLabel": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "properties": {
                                          "cyber": {
                                            "properties": {
                                              "URLs": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "addresses": {
                                                "items": {
                                                  "properties": {
                                                    "ip": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "type": "integer"
                                                    },
                                                    "version": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "asOrgs": {
                                                "items": {
                                                  "properties": {
                                                    "asOrg": {
                                                      "type": "string"
                                                    },
                                                    "asn": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "asns": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "hashValues": {
                                                "items": {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string"
                                                    },
                                                    "value": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "hashes": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "malwares": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "orgs": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "products": {
                                                "items": {
                                                  "properties": {
                                                    "productName": {
                                                      "type": "string"
                                                    },
                                                    "productVendor": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": [
                                                    "object",
                                                    "string"
                                                  ]
                                                },
                                                "type": "array"
                                              },
                                              "threats": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "vulnerabilities": {
                                                "items": {
                                                  "properties": {
                                                    "id": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "post": {
                                        "properties": {
                                          "languages": {
                                            "items": {
                                              "properties": {
                                                "lang": {
                                                  "type": "string"
                                                },
                                                "position": {
                                                  "type": "integer"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "link": {
                                            "type": "string"
                                          },
                                          "media": {
                                            "type": "array"
                                          },
                                          "text": {
                                            "type": "string"
                                          },
                                          "timestamp": {
                                            "type": "integer"
                                          },
                                          "translatedText": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "publisherCategory": {
                                        "properties": {
                                          "color": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "shortName": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "relatedTerms": {
                                        "items": {
                                          "properties": {
                                            "text": {
                                              "type": "string"
                                            },
                                            "url": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "relatedTermsQueryURL": {
                                        "type": "string"
                                      },
                                      "sectors": {
                                        "items": {
                                          "properties": {
                                            "id": {
                                              "type": "string"
                                            },
                                            "idStr": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "retired": {
                                              "type": "boolean"
                                            },
                                            "topicType": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "source": {
                                        "properties": {
                                          "channels": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "subCaption": {
                                        "properties": {
                                          "bullets": {
                                            "properties": {
                                              "content": {
                                                "type": "string"
                                              },
                                              "media": {
                                                "type": "string"
                                              },
                                              "source": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "userRecentImages": {
                                        "type": "array"
                                      },
                                      "userTopHashtags": {
                                        "type": "array"
                                      },
                                      "watchlistsMatchedByType": {
                                        "items": {
                                          "properties": {
                                            "externalTopicIds": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "id": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "type": {
                                              "type": "string"
                                            },
                                            "userProperties": {
                                              "properties": {
                                                "omnilist": {
                                                  "type": "string"
                                                },
                                                "uiListType": {
                                                  "type": "string"
                                                },
                                                "watchlistColor": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "from": {
                                  "type": "string"
                                },
                                "to": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Set_count_variable_to_0": {
                      "runAfter": {
                        "Parse_Alerts_Data_into_JSON": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "count",
                        "value": 0
                      }
                    }
                  },
                  "runAfter": {
                    "Get_Alerts_from_Dataminr_Pulse_API": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "_if_status_code_is_401": {
                        "actions": {
                          "Generate_auth_token": {
                            "runAfter": {},
                            "type": "Http",
                            "inputs": {
                              "body": "client_id=@{body('Get_ClientId')?['value']}&client_secret=@{body('Get_ClientSecret')?['value']}&grant_type=api_key",
                              "headers": {
                                "Content-Type": "application/x-www-form-urlencoded"
                              },
                              "method": "POST",
                              "uri": "@{concat(variables('BaseUrl'),'auth/2/token')}"
                            },
                            "runtimeConfiguration": {
                              "secureData": {
                                "properties": [
                                  "outputs"
                                ]
                              }
                            }
                          },
                          "If_Generate_auth_token_status_code_is_200": {
                            "actions": {
                              "If_Update_DmaToken_status_code_is_200": {
                                "actions": {},
                                "runAfter": {
                                  "Update_DmaToken_in_Keyvault": [
                                    "Succeeded",
                                    "Failed"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_AuthErrorMessage_for_updating_DmaToken": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "AuthErrorMessage",
                                        "value": "Error:@{body('Update_DmaToken_in_Keyvault')?['error']?['message']}"
                                      }
                                    },
                                    "Set_count_equals_to_0": {
                                      "runAfter": {
                                        "Set_AuthErrorMessage_for_updating_DmaToken": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "count",
                                        "value": 0
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('Update_DmaToken_in_Keyvault')['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Parse_JSON": {
                                "runAfter": {},
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('Generate_auth_token')",
                                  "schema": {
                                    "properties": {
                                      "dmaToken": {
                                        "type": "string"
                                      },
                                      "expire": {
                                        "type": "integer"
                                      },
                                      "refreshToken": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              },
                              "Update_DmaToken_in_Keyvault": {
                                "runAfter": {
                                  "Parse_JSON": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "authentication": {
                                    "audience": "[concat('https://',parameters('azure key vault'),'.net')]",
                                    "type": "ManagedServiceIdentity"
                                  },
                                  "body": {
                                    "value": "@{body('Parse_JSON')?['dmaToken']}"
                                  },
                                  "method": "PUT",
                                  "uri": "@{concat('https://',variables('KeyVaultName'),'.',parameters('azure key vault'),'.net/secrets/',body('Get_DmaToken')?['name'],'?api-version=7.2')}"
                                }
                              },
                              "if_count_value_is_greater_than_0": {
                                "actions": {
                                  "Decrement_count_by_1": {
                                    "runAfter": {},
                                    "type": "DecrementVariable",
                                    "inputs": {
                                      "name": "count",
                                      "value": 1
                                    }
                                  }
                                },
                                "runAfter": {
                                  "If_Update_DmaToken_status_code_is_200": [
                                    "Succeeded",
                                    "Failed",
                                    "Skipped"
                                  ]
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "greater": [
                                        "@variables('count')",
                                        0
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "runAfter": {
                              "Generate_auth_token": [
                                "Succeeded",
                                "Failed"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Set_ErrorMessage": {
                                  "runAfter": {},
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "AuthErrorMessage",
                                    "value": "Message:@{body('Generate_auth_token')?['errors'][0]?['message']}"
                                  }
                                },
                                "Set_count_to_0_as_error_in_authentication": {
                                  "runAfter": {
                                    "Set_ErrorMessage": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "count",
                                    "value": 0
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@outputs('Generate_auth_token')['statusCode']",
                                    200
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          }
                        },
                        "runAfter": {},
                        "else": {
                          "actions": {
                            "Set_Errormessage_ofr_status_code_other_than_200_and_401": {
                              "runAfter": {},
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ErrorMessage",
                                "value": "Error:@{body('Get_Alerts_from_Dataminr_Pulse_API')?['errors'][0]?['message']}"
                              }
                            },
                            "Set_retry_count_to_0": {
                              "runAfter": {
                                "Set_Errormessage_ofr_status_code_other_than_200_and_401": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "count",
                                "value": 0
                              }
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "equals": [
                                "@outputs('Get_Alerts_from_Dataminr_Pulse_API')['statusCode']",
                                401
                              ]
                            }
                          ]
                        },
                        "type": "If"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('Get_Alerts_from_Dataminr_Pulse_API')['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Get_ClientSecret": [
                  "Succeeded"
                ]
              },
              "expression": "@equals(variables('count'), 0)",
              "limit": {
                "count": 60,
                "timeout": "PT1H"
              },
              "type": "Until"
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuresentinel": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              },
              "keyvault": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                "connectionName": "[variables('KeyvaultConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
              }
            }
          }
        }
      },
      "name": "[parameters('PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[resourceGroup().location]",
      "tags": {
        "hidden-SentinelTemplateName": "DataminrPulseAlertEnrichment",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2019-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('MicrosoftSentinelConnectionName')]",
      "location": "[resourceGroup().location]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('MicrosoftSentinelConnectionName')]",
        "customParameterValues": {},
        "parameterValueType": "Alternative",
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('KeyvaultConnectionName')]",
      "location": "[resourceGroup().location]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('KeyvaultConnectionName')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Keyvault')]"
        },
        "parameterValues": {
          "token:TenantId": "[parameters('tenantId')]",
          "token:grantType": "code",
          "vaultName": "[parameters('keyvaultName')]"
        }
      }
    }
  ]
}