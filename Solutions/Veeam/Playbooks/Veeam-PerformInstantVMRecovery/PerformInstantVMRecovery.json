{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "Veeam-PerformInstantVMRecovery",
    "description": "This Microsoft Sentinel playbook performs instant VM recovery on the vm specified by MachineDisplayName custom field of Microsoft Sentinel's incident custom fields. The playbook automatically finds the latest clean restore point, initiates the instant recovery monitor for its state and indicates results as incident comments.",
    "prerequisites": [
      "1. Microsoft Sentinel workspace configured.",
      "2. Permissions to create Logic Apps and API Connections.",
      "3. Permissions to assign roles to the Resource Group.",
      "4. Veeam Azure Function App deployed and configured.",
      "5. Hybrid Connection and Key Vault secrets configured for each VBR Server."
    ],
    "entities": [],
    "tags": [ "Security", "Veeam", "Recovery", "Incident Response" ],
    "lastUpdateTime": "2025-08-25T00:00:00.000Z",
    "support": {
      "tier": "community"
    },
    "author": {
      "name": "Custom Template"
    },
    "parameterTemplateVersion": "1.0.0",
    "postDeployment": [
      "1. Assign the Microsoft Sentinel Contributor role to the Logic App's managed identity on the Microsoft Sentinel workspace."
    ]
  },
  "parameters": {
    "PlaybookName": {
      "defaultValue": "Veeam-PerformInstantVMRecovery",
      "type": "string",
      "metadata": {
        "description": "Name of the playbook (Logic App) to be created"
      }
    },
    "functionAppName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure Function App for Veeam integration"
      }
    },
    "AzureSentinelConnectionName": {
      "type": "string",
      "defaultValue": "azuresentinel-connection",
      "metadata": {
        "description": "The name to use for the Microsoft Sentinel Connector in the Logic App (This will exist as an API Connection in your subscription)"
      }
    }
  },
  "variables": {
    "functionAppId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[parameters('AzureSentinelConnectionName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "displayName": "[parameters('AzureSentinelConnectionName')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
        },
        "parameterValueType": "Alternative"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('PlaybookName')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "hidden-SentinelTemplateName": "Veeam-PerformInstantVMRecovery",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.1.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "body": {
                  "callback_url": "@listCallbackUrl()"
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "Initialize_VbrHostName": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "VbrHostName",
                    "type": "string",
                    "value": "none"
                  }
                ]
              }
            },
            "Initialize_MachineDisplayName": {
              "runAfter": {
                "Initialize_VbrHostName": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "MachineDisplayName",
                    "type": "string",
                    "value": "none"
                  }
                ]
              }
            },
            "Get_variables_from_custom_fields": {
              "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
              "actions": {
                "Parse_custom_fields": {
                  "type": "ParseJson",
                  "inputs": {
                    "content": "@items('Get_variables_from_custom_fields')?['properties']?['additionalData']?['Custom Details']",
                    "schema": {
                      "type": "object",
                      "properties": {
                        "VbrHostName": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "MachineDisplayName": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "MachineUuid": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "BackupObjectId": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "Get_VbrHostName": {
                  "foreach": "@outputs('Parse_custom_fields')?['body']?['VbrHostName']",
                  "actions": {
                    "Set_VbrHostName": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "VbrHostName",
                        "value": "@items('Get_VbrHostName')"
                      }
                    }
                  },
                  "runAfter": {
                    "Parse_custom_fields": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                },
                "Get_MachineDispalyName": {
                  "foreach": "@body('Parse_custom_fields')?['MachineDisplayName']",
                  "actions": {
                    "Set_MachineDispalyName": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "MachineDisplayName",
                        "value": "@items('Get_MachineDispalyName')"
                      }
                    }
                  },
                  "runAfter": {
                    "Get_VbrHostName": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                }
              },
              "runAfter": {
                "Initialize_MachineDisplayName": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "GetLastCleanRestorePointForVMAsync": {
              "runAfter": {
                "Get_variables_from_custom_fields": [
                  "Succeeded"
                ]
              },
              "type": "Function",
              "inputs": {
                "queries": {
                  "VbrHostName": "@variables('VbrHostName')",
                  "vmName": "@variables('MachineDisplayName')"
                },
                "function": {
                  "id": "[concat(variables('functionAppId'), '/functions/GetCleanRestorePointsAsync')]"
                }
              }
            },
            "Does_clean_restore_point_exist": {
              "actions": {},
              "runAfter": {
                "GetLastCleanRestorePointForVMAsync": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Add_comment": {
                    "type": "ApiConnection",
                    "inputs": {
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                        }
                      },
                      "method": "post",
                      "body": {
                        "incidentArmId": "@triggerBody()?['object']?['id']",
                        "message": "<p class=\"editor-paragraph\">No clean restore points were found for @{variables('MachineDisplayName')}.</p>"
                      },
                      "path": "/Incidents/Comment"
                    }
                  },
                  "Terminate": {
                    "runAfter": {
                      "Add_comment": [
                        "Succeeded"
                      ]
                    },
                    "type": "Terminate",
                    "inputs": {
                      "runStatus": "Cancelled"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('GetLastCleanRestorePointForVMAsync')?['statusCode']",
                        404
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Parse_restorePointId": {
              "runAfter": {
                "Does_clean_restore_point_exist": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('GetLastCleanRestorePointForVMAsync')",
                "schema": {
                  "type": "object",
                  "properties": {
                    "platformName": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "integer"
                    },
                    "malwareStatus": {
                      "type": "integer"
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "platformId": {
                      "type": "string"
                    },
                    "creationTime": {
                      "type": "string"
                    },
                    "backupId": {
                      "type": "string"
                    },
                    "sessionId": {
                      "type": "string"
                    },
                    "allowedOperations": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "backupFileId": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "StartInstantVMRecoveryAsync": {
              "runAfter": {
                "Parse_restorePointId": [
                  "Succeeded"
                ]
              },
              "type": "Function",
              "inputs": {
                "queries": {
                  "VbrHostName": "@variables('VbrHostName')",
                  "restorePointId": "@body('Parse_restorePointId')?['id']"
                },
                "function": {
                  "id": "[concat(variables('functionAppId'), '/functions/StartInstantVMRecoveryAsync')]"
                }
              }
            },
            "Parse_sessionId": {
              "runAfter": {
                "StartInstantVMRecoveryAsync": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('StartInstantVMRecoveryAsync')",
                "schema": {

                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "sessionType": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "integer"
                        },
                        "platformName": {},
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "jobId": {
                          "type": "string"
                        },
                        "creationTime": {
                          "type": "string"
                        },
                        "endTime": {},
                        "progressPercent": {
                          "type": "integer"
                        },
                        "result": {
                          "type": "object",
                          "properties": {
                            "result": {
                              "type": "integer"
                            },
                            "message": {
                              "type": "string"
                            },
                            "isCanceled": {}
                          }
                        },
                        "resourceId": {},
                        "resourceReference": {},
                        "parentSessionId": {},
                        "usn": {
                          "type": "integer"
                        },
                        "platformId": {}
                      }

                    }
                  }
                }
              }
            },
            "Add_comment_to_incident": {
              "runAfter": {
                "Parse_sessionId": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "post",
                "body": {
                  "incidentArmId": "@triggerBody()?['object']?['id']",
                  "message": "<p class=\"editor-paragraph\">Instant VM recovery has started for @{variables('MachineDisplayName')} and restore point @{body('Parse_restorePointId')?['id']}.</p>"
                },
                "path": "/Incidents/Comment"
              }
            },
            "Until_state_is_not_Stopped": {
              "actions": {
                "GetSession_": {
                  "type": "Function",
                  "inputs": {
                    "queries": {
                      "vbrHostName": "@variables('VbrHostName')",
                      "sessionId": "@body('Parse_sessionId')?['data']?['id']"
                    },
                    "function": {
                      "id": "[concat(variables('functionAppId'), '/functions/GetSessionAsync')]"
                    }
                  }
                },
                "Parse_session": {
                  "runAfter": {
                    "GetSession_": [
                      "Succeeded"
                    ]
                  },
                  "type": "ParseJson",
                  "inputs": {
                    "content": "@body('GetSession_')",
                    "schema": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "sessionType": {
                              "type": "integer"
                            },
                            "state": {
                              "type": "integer"
                            },
                            "platformName": {},
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "jobId": {
                              "type": "string"
                            },
                            "creationTime": {
                              "type": "string"
                            },
                            "endTime": {},
                            "progressPercent": {
                              "type": "integer"
                            },
                            "result": {
                              "type": "object",
                              "properties": {
                                "result": {
                                  "type": "integer"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "isCanceled": {}
                              }
                            },
                            "resourceId": {},
                            "resourceReference": {},
                            "parentSessionId": {},
                            "usn": {
                              "type": "integer"
                            },
                            "platformId": {}
                          }
                        }
                      }
                    }
                  }
                },
                "Delay": {
                  "runAfter": {
                    "Parse_session": [
                      "Succeeded"
                    ]
                  },
                  "type": "Wait",
                  "inputs": {
                    "interval": {
                      "count": 3,
                      "unit": "Minute"
                    }
                  }
                }
              },
              "runAfter": {
                "Add_comment_to_incident": [
                  "Succeeded"
                ]
              },
              "expression": "@equals(body('Parse_session')?['state'],1)",
              "limit": {
                "timeout": "PT3H"
              },
              "type": "Until"
            },
            "Result": {
              "runAfter": {
                "Until_state_is_not_Stopped": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": "@body('Parse_session')?['result']"
            },
            "Add_comment_to_incident_(V3)": {
              "runAfter": {
                "Result": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "post",
                "body": {
                  "incidentArmId": "@triggerBody()?['object']?['id']",
                  "message": "<p class=\"editor-paragraph\">Instant VM recovery for @{variables('MachineDisplayName')} has finished. Details: @{body('Parse_session')?['result']}.</p><br>"
                },
                "path": "/Incidents/Comment"
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuresentinel": {
                "connectionName": "[parameters('AzureSentinelConnectionName')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]",
                "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/azuresentinel', subscription().subscriptionId, resourceGroup().location)]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          }
        }
      }
    }
  ]
}