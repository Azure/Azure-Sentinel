{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",  "metadata": {
    "title": "Veeam-FindCleanRestorePoints",
    "description": "A Microsoft Sentinel playbook with the incident trigger, that finds the last clean restore point for VM, specified in the incident by VbrHostName and MachineDisplayName. If finds a clean restore point, adds its date as incident's comment, and if a clean restore point is not found, adds a comment indicating that.",
    "prerequisites": [
      "1. Microsoft Sentinel workspace configured.",
      "2. Permissions to create Logic Apps and API Connections.",
      "3. Permissions to assign roles to the Resource Group.",
      "4. Veeam Azure Function App deployed and configured.",
      "5. Hybrid Connection and Key Vault secrets configured for each VBR Server."
    ],
    "entities": [],
    "tags": [ "Automation", "Veeam", "Backup", "RestorePoints", "Recovery" ],
    "lastUpdateTime": "2025-08-25T00:00:00.000Z",
    "support": {
      "tier": "community"
    },
    "author": {
      "name": "Custom Template"
    },
    "parameterTemplateVersion": "1.0.0",
    "postDeployment": [
      "1. Assign the Microsoft Sentinel Contributor role to the Logic App's managed identity on the Microsoft Sentinel workspace."
    ],
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "8701067040678761767"
    }
  },
  "parameters": {
    "PlaybookName": {
      "defaultValue": "Veeam-FindCleanRestorePoints",
      "type": "string",
      "metadata": {
        "description": "Name of the playbook (Logic App) to be created"
      }
    },
    "functionAppName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure Function App for Veeam integration"
      }
    },
    "AzureSentinelConnectionName": {
      "type": "string",
      "defaultValue": "azuresentinel-connection",
      "metadata": {
        "description": "The name to use for the Microsoft Sentinel Connector in the Logic App (This will exist as an API Connection in your subscription)"
      }
    }
  },
  "variables": {
    "functionAppId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[parameters('AzureSentinelConnectionName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "displayName": "[parameters('AzureSentinelConnectionName')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
        },
        "parameterValueType": "Alternative"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('PlaybookName')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "hidden-SentinelTemplateName": "Veeam-FindCleanRestorePoints",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "Parse_custom_fields": {
              "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
              "actions": {                "Parse_JSON": {
                  "type": "ParseJson",
                  "inputs": {
                    "content": "@items('Parse_custom_fields')?['properties']?['additionalData']?['Custom Details']",
                    "schema": {
                      "type": "object",
                      "properties": {
                        "VbrHostName": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "MachineDisplayName": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "MachineUuid": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "BackupObjectId": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },                "For_each_alert": {
                  "foreach": "@outputs('Parse_JSON')?['body']?['VbrHostName']",
                  "actions": {
                    "Set_variable_VbrHostName": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "VbrHostName",
                        "value": "@items('For_each_alert')"
                      }
                    }
                  },                  "runAfter": {
                    "Parse_JSON": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                },                "For_each_alert_2": {
                  "foreach": "@outputs('Parse_JSON')?['body']?['MachineDisplayName']",
                  "actions": {
                    "Set_variable_MachineDisplayName": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "MachineDisplayName",
                        "value": "@item()"
                      }
                    }
                  },
                  "runAfter": {
                    "For_each_alert": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                }
              },
              "runAfter": {
                "Initialize_MachineDisplayName": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Initialize_VbrHostName": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "VbrHostName",
                    "type": "string"
                  }
                ]
              }
            },
            "GetLastCleanRestorePoint": {
              "runAfter": {
                "Parse_custom_fields": [
                  "Succeeded"
                ]
              },
              "type": "Function",
              "inputs": {
                "queries": {
                  "vbrHostName": "@variables('VbrHostName')",
                  "VmName": "@variables('MachineDisplayName')"
                },
                "function": {
                  "id": "[concat(variables('functionAppId'), '/functions/GetCleanRestorePointsAsync')]"
                }
              }
            },            "Are_there_any_clean_restore_points": {
              "actions": {
                "Parse_restore_point": {
                  "type": "ParseJson",
                  "inputs": {
                    "content": "@body('GetLastCleanRestorePoint')",
                    "schema": {
                      "type": "object",
                      "properties": {
                        "platformName": {
                          "type": "integer"
                        },
                        "type": {
                          "type": "integer"
                        },
                        "malwareStatus": {
                          "type": "integer"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "platformId": {
                          "type": "string"
                        },
                        "creationTime": {
                          "type": "string"
                        },
                        "backupId": {
                          "type": "string"
                        },
                        "sessionId": {
                          "type": "string"
                        },
                        "allowedOperations": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "backupFileId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "Add_last_restore_point_comment": {
                  "runAfter": {
                    "Parse_restore_point": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                      }
                    },
                    "method": "post",                      "body": {
                        "incidentArmId": "@triggerBody()?['object']?['id']",
                        "message": "<p class=\"editor-paragraph\"><span style=\"background-color: rgb(255, 255, 255);\">Last clean restore point was created on </span>@{variables('VbrHostName')}<span style=\"background-color: rgb(255, 255, 255);\"> on </span>@{body('Parse_restore_point')?['creationTime']}</p>"
                      },
                    "path": "/Incidents/Comment"
                  }
                }
              },
              "runAfter": {
                "GetLastCleanRestorePoint": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Add_no_restore_points_comment": {
                    "type": "ApiConnection",
                    "inputs": {
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                        }
                      },
                      "method": "post",                      "body": {
                        "incidentArmId": "@triggerBody()?['object']?['id']",
                        "message": "<p class=\"editor-paragraph\"><span style=\"background-color: rgb(255, 255, 255);\">No restore points were found on </span>@{variables('VbrHostName')}</p>"
                      },
                      "path": "/Incidents/Comment"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('GetLastCleanRestorePoint')?['statusCode']",
                        404
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Initialize_MachineDisplayName": {
              "runAfter": {
                "Initialize_VbrHostName": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "MachineDisplayName",
                    "type": "string"
                  }
                ]
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuresentinel": {
                "connectionName": "[parameters('AzureSentinelConnectionName')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          }
        }
      }
    }
  ]
}