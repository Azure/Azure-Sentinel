// Title:           ESET PROTECT
// Author:          Donny Maasland | ESET Netherlands
//                  Katelyn Overbeeke | ESET Netherlands
// Version:         1.0
// Last Updated:    03/17/2021
// Comment:         Inital Release
//
// DESCRIPTION:
// This parser takes ESET PROTECT event logs from a Syslog data stream and parses the data into a normalized schema
//
// REFERENCES: 
// Using functions in Azure monitor log queries: https:docs.microsoft.com/azure/azure-monitor/log-query/functions
// ESET PROTECT event log format: https:help.eset.com/protect_admin/latest/en-US/events-exported-to-json-format.html
//
// LOG SAMPLES:
// This parser assumes the raw log are formatted as follows:
// 
//      <12>Mar 17 09:41:53 ESMC-linux ERAServer[12412]: {"event_type":"BlockedFiles_Event","ipv4":"10.0.0.6","hostname":"azwin10vm.lab.local","source_uuid":"763a89ef-f8dd-41a4-9b8c-0e3bf34437d5","occured":"17-Mar-2021 09:41:27","severity":"Warning","action":"Execution blocked","username":"lab\\donny","processname":"C:\\Windows\\explorer.exe","hash":"AC08B28E953D7D200BBB3C2E644890A689D0D8B1","object_uri":"file:///C:/Users/donny/Desktop/HxDSetup.exe","firstseen":"10-Feb-2021 22:27:58","cause":"Blocked by Administrator","description":"Enterprise Inspector"}
//      <12>Mar 17 09:42:08 ESMC-linux ERAServer[12412]: {"event_type":"EnterpriseInspectorAlert_Event","ipv4":"10.0.0.11","hostname":"exchange.lab.local","source_uuid":"178a0124-b66d-426b-8097-fb3261146eed","occured":"17-Mar-2021 09:40:09","severity":"Warning","processname":"%SYSTEM%\\svchost.exe","username":"nt authority\\network service","rulename":"Remote Desktop connection from external IP range [D0522]","count":1,"hash":"A1385CE20AD79F55DF235EFFD9780C31442AA234","eiconsolelink":"https://eei663777.lab.local:443/console/detection/11614"}
//      <10>Mar 17 09:42:38 ESMC-linux ERAServer[12412]: {"event_type":"Threat_Event","ipv4":"10.0.0.6","hostname":"azwin10vm.lab.local","source_uuid":"763a89ef-f8dd-41a4-9b8c-0e3bf34437d5","occured":"17-Mar-2021 09:42:31","severity":"Critical","threat_type":"test file","threat_name":"Eicar","scanner_id":"HTTP filter","scan_id":"virlog.dat","engine_version":"22977P (20210317)","object_type":"file","object_uri":"https://secure.eicar.org/eicarcom2.zip","action_taken":"retained","threat_handled":false,"need_restart":false,"username":"lab\\donny","processname":"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe","circumstances":"Event occurred during an attempt to access the web.","hash":"BEC1B52D350D721C7E22A6D4BB0A92909893A3AE"}
//      <10>Mar 17 09:42:53 ESMC-linux ERAServer[12412]: {"event_type":"Threat_Event","ipv4":"10.0.0.6","hostname":"azwin10vm.lab.local","source_uuid":"763a89ef-f8dd-41a4-9b8c-0e3bf34437d5","occured":"17-Mar-2021 09:42:45","severity":"Critical","threat_type":"test file","threat_name":"Eicar","scanner_id":"Real-time file system protection","scan_id":"virlog.dat","engine_version":"22977P (20210317)","object_type":"file","object_uri":"file:///C:/Users/donny/Desktop/eicar.com","action_taken":"retained","threat_handled":false,"need_restart":false,"username":"lab\\donny","processname":"C:\\Windows\\explorer.exe","circumstances":"Event occurred on a newly created file.","firstseen":"06-Jan-2021 09:06:28","hash":"3395856CE81F2B7382DEE72602F798B642F14140"}
//      <14>Mar 17 09:46:49 ESMC-linux ERAServer[12412]: {"event_type":"Audit_Event","ipv4":"10.0.0.4","hostname":"ESMC-linux","source_uuid":"c216d4e0-3469-4916-a469-923f4bd1cf9b","occured":"17-Mar-2021 09:46:49","severity":"Information","domain":"Domain group","action":"Login attempt","target":"82764bdf-f5cf-477b-be47-6a670bcbf30e","detail":"Authenticating domain user 'donny'.","user":"","result":"Success"}
//

//
// Get event data
//
let LogHeader = Syslog
    | where ProcessName == "ERAServer"
    | project-rename EventProduct = ProcessName 
    | extend EventVendor = "ESET",
        Message = parse_json(SyslogMessage)
    | extend EventType = Message['event_type'],
        DvcIpAddr = Message['ipv4'],
        EventResourceId = Message['source_uuid'],
        EventCreationTime = make_datetime(Message['occured']),
        EventSeverity = Message['severity'],
        DvcHostname = Message['hostname'];
//
// Threat events
//
let ThreatEvents = LogHeader
    | where EventType == "Threat_Event"
    | extend ThreatCategory = Message['threat_type'],
        ThreatName = Message['threat_name'],
        ThreatFlags = Message['threat_flags'],
        EventSubType = Message['scanner_id'],
        EngineVersion = Message['engine_version'],
        ObjectType = Message['object_type'],
        FilePath = Message['object_uri'],
        EventResult = Message['action_taken'],
        EventError = Message['action_error'],
        ScanId = Message['scanner_id'],
        ThreatHandled = Message['threat_handled'],
        NeedRestart = Message['need_restart'],
        ProcessFilePath = Message['processname'],
        EventMessage = Message['circumstances'],
        FileHashSha1 = Message['hash'],
        SrcUserDomain = todynamic(iff(Message['username'] contains '\\', split(Message['username'], '\\')[0], '')),
        SrcUserName = todynamic(iff(Message['username'] contains '\\', split(Message['username'], '\\')[1], Message['username'])),
        FirstSeen = make_datetime(Message['firstseen']);
//
// Firewall Aggregated events
//
let FirewallEvents = LogHeader
    | where EventType == "FirewallAggregated_Event"
    | extend EventMessage = Message['event'],
        SrcDvcIpAddr = Message['source_address'],
        SrcIpIsIpv6 = tobool(iff(Message['source_address_type'] == "IPv6", true, false)),
        SrcPortNumber = Message['source_port'],
        DstDvcIpAddr = Message['target_address'],
        DstIpIsIpv6 = tobool(iff(Message['target_address_type'] == "IPv6", true, false)),
        DstPortNumber = Message['target_port'],
        NetworkProtocol = Message['protocol'],
        DstUserDomain = todynamic(iff(tobool(Message['inbound']), iff(Message['account'] contains '\\', split(Message['account'], '\\')[0], ''), '')),
        DstUserName = todynamic(iff(tobool(Message['inbound']), iff(Message['account'] contains '\\', split(Message['account'], '\\')[1], Message['account']), '')),
        SrcUserDomain = todynamic(iff(tobool(Message['inbound']), '', iff(Message['account'] contains '\\', split(Message['account'], '\\')[0], ''))),
        SrcUserName = todynamic(iff(tobool(Message['inbound']), '', iff(Message['account'] contains '\\', split(Message['account'], '\\')[1], Message['account']))),
        ProcessFilePath = Message['process_name'],
        NetworkRuleName = Message['rule_name'],
        NetworkRuleNumber = Message['rule_id'],
        NetworkDirection = todynamic(iff(tobool(Message['inbound']), "Inbound", "Outbound")),
        ThreatName = Message['threat_name'],
        EventCount = Message['aggregate_count'];
//
// Hips events
//
let HipsEvents = LogHeader
    | where EventType == "HIPSAggregated_Event"
    | extend ProcessFilePath = Message['application'],
        EventSubType = Message['action'],
        NetworkRuleName = Message['rule_name'],
        NetworkRuleNumber = Message['rule_id'],
        EventCount = Message['aggregate_count'];
//
// Audit events
//
let AuditEvents = LogHeader
    | where EventType == "Audit_Event"
    | extend SrcUserDomain = todynamic(iff(Message['action'] == 'Login attempt', '', Message['domain'])),
        DstUserDomain = todynamic(iff(Message['action'] != 'Login attempt', '', Message['domain'])),
        EventSubType = Message['action'],
        EventMessage = Message['detail'],
        DstUserName = Message['target'],
        SrcUserName = Message['user'],
        EventResult = Message['result'];
//
// Enterprise Inspector alert events
//
let EnterpriseInspectorAlertEvents = LogHeader
    | where EventType == "EnterpriseInspectorAlert_Event"
    | extend ProcessFilePath = Message['processname'],
        SrcUserDomain = todynamic(iff(Message['username'] contains '\\', split(Message['username'], '\\')[0], '')),
        SrcUserName = todynamic(iff(Message['username'] contains '\\', split(Message['username'], '\\')[1], Message['username'])),
        NetworkRuleName = Message['rulename'],
        FileHashSha1 = Message['hash'],
        EventCount = Message['count'],
        EventReportUrl = Message['eiconsolelink'];
//
// BlockedFiles_Event
//
let BlockedFilesEvents = LogHeader
    | where EventType == "BlockedFiles_Event"
    | extend ProcessFilePath = Message['processname'],
        SrcUserDomain = todynamic(iff(Message['username'] contains '\\', split(Message['username'], '\\')[0], '')),
        SrcUserName = todynamic(iff(Message['username'] contains '\\', split(Message['username'], '\\')[1], Message['username'])),
        ThreatHandled = Message['resolved'],
        FileHashSha1 = Message['hash'],
        FilePath = Message['object_uri'],
        EventSubType = Message['action'],
        FirstSeen = make_datetime(Message['firstseen']),
        EventMessage = Message['cause'];
//
// Filtered Website events
//
let FilteredWebsiteEvents = LogHeader
    | where EventType == "FilteredWebsites_Event"
    | extend ProcessFilePath = Message['processname'],
        SrcUserDomain = todynamic(iff(Message['username'] contains '\\', split(Message['username'], '\\')[0], '')),
        SrcUserName = todynamic(iff(Message['username'] contains '\\', split(Message['username'], '\\')[1], Message['username'])),
        ThreatHandled = Message['resolved'],
        FileHashSha1 = Message['hash'],
        EventMessage = Message['event'],
        NetworkRuleNumber = Message['rule_id'],
        EventResult = Message['action_taken'],
        ScanId = Message['scanner_id'],
        FilePath = Message['object_uri'],
        UrlOriginal = Message['target_address'];
//
// Format output
//
union ThreatEvents, AuditEvents, FirewallEvents, HipsEvents, BlockedFilesEvents, FilteredWebsiteEvents, EnterpriseInspectorAlertEvents
| project-away SyslogMessage, Message
