{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "proxy": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable proxy logs ingestion."
      }
    },
    "auth": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable authentication logs ingestion."
      }
    },
    "firewall": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable firewall logs ingestion."
      }
    },
    "ztna": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable ZTNA logs ingestion."
      }
    },
    "mail": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable mail logs ingestion."
      }
    },
    "zeek": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Zeek logs ingestion."
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Log Analytics workspace. This will be provided by the createUiDefinition."
      }
    },
    "dceName": {
      "type": "string",
      "defaultValue": "osag-sentinel-eventhub",
      "metadata": {
        "description": "Name of the data collection endpoint."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources. This will be provided by the createUiDefinition based on the selected Log Analytics workspace."
      }
    },
    "principalId": {
      "type": "array",
      "metadata": {
        "description": "Principal ID (Object ID) of the service principal. This will be provided by the createUiDefinition."
      }
    },
    "principalSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Principal secret of the user or service principal."
      }
    },
    "principalClientId": {
      "type": "string",
      "metadata": {
        "description": "Principal client ID of the user or service principal."
      }
    },
    "eventhubEndpoint": {
      "type": "string",
      "metadata": {
        "description": "Eventhub endpoint."
      }
    },
    "eventhubConnectionString": {
      "type": "securestring",
      "metadata": {
        "description": "Eventhub connection string."
      }
    }
  },
  "variables": {
    "logTypes": [
      {
        "name": "Zeek",
        "enabled": "[parameters('zeek')]",
        "columns": [
          {
            "name": "TimeGenerated",
            "type": "datetime"
          },
          {
            "name": "timestamp",
            "type": "datetime"
          },
          {
            "name": "message",
            "type": "dynamic"
          },
          {
            "name": "RawData",
            "type": "string"
          }
        ],
        "transformKql": "source | extend TimeGenerated = todatetime(timestamp)"
      },
      {
        "name": "Mail",
        "enabled": "[parameters('mail')]",
        "columns": [
          {
            "name": "TimeGenerated",
            "type": "datetime"
          },
          {
            "name": "timestamp",
            "type": "datetime"
          },
          {
            "name": "message",
            "type": "dynamic"
          },
          {
            "name": "RawData",
            "type": "string"
          }
        ],
        "transformKql": "source | extend TimeGenerated = todatetime(timestamp)"
      },
      {
        "name": "Ztna",
        "enabled": "[parameters('ztna')]",
        "columns": [
          {
            "name": "TimeGenerated",
            "type": "datetime"
          },
          {
            "name": "authority_name",
            "type": "string"
          },
          {
            "name": "message",
            "type": "string"
          },
          {
            "name": "message_type",
            "type": "string"
          },
          {
            "name": "object_name",
            "type": "string"
          },
          {
            "name": "object_name_portal",
            "type": "string"
          },
          {
            "name": "remote_address",
            "type": "string"
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "subject_name",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "string"
          },
          {
            "name": "uuid",
            "type": "string"
          },
          {
            "name": "ztna_tenant",
            "type": "string"
          },
          {
            "name": "ztna_upstream",
            "type": "string"
          },
          {
            "name": "RawData",
            "type": "string"
          }
        ],
        "transformKql": "source | extend TimeGenerated = todatetime(timestamp)"
      },
      {
        "name": "Firewall",
        "enabled": "[parameters('firewall')]",
        "columns": [
          {
            "name": "TimeGenerated",
            "type": "datetime"
          },
          {
            "name": "action",
            "type": "string"
          },
          {
            "name": "host_name",
            "type": "string"
          },
          {
            "name": "iface_in",
            "type": "string"
          },
          {
            "name": "iface_out",
            "type": "string"
          },
          {
            "name": "ip_dst",
            "type": "string"
          },
          {
            "name": "ip_src",
            "type": "string"
          },
          {
            "name": "port_dst",
            "type": "int"
          },
          {
            "name": "port_src",
            "type": "int"
          },
          {
            "name": "timestamp",
            "type": "int"
          },
          {
            "name": "zone_dst",
            "type": "string"
          },
          {
            "name": "zone_src",
            "type": "string"
          },
          {
            "name": "RawData",
            "type": "string"
          }
        ],
        "transformKql": "source | extend TimeGenerated = datetime_add('second', timestamp, datetime(1970-01-01))"
      },
      {
        "name": "Authentication",
        "enabled": "[parameters('auth')]",
        "columns": [
          {
            "name": "TimeGenerated",
            "type": "datetime"
          },
          {
            "name": "login",
            "type": "string"
          },
          {
            "name": "remoteAddress",
            "type": "dynamic"
          },
          {
            "name": "result",
            "type": "string"
          },
          {
            "name": "event_time",
            "type": "datetime"
          },
          {
            "name": "RawData",
            "type": "string"
          }
        ],
        "transformKql": "source | extend TimeGenerated = todatetime(event_time)"
      },
      {
        "name": "Proxy",
        "enabled": "[parameters('proxy')]",
        "columns": [
          {
            "name": "TimeGenerated",
            "type": "datetime"
          },
          {
            "name": "casb_application",
            "type": "string"
          },
          {
            "name": "casb_category",
            "type": "string"
          },
          {
            "name": "casb_operation",
            "type": "string"
          },
          {
            "name": "casb_risk_score",
            "type": "string"
          },
          {
            "name": "client_ip",
            "type": "string"
          },
          {
            "name": "client_request_size",
            "type": "string"
          },
          {
            "name": "client_response_size",
            "type": "string"
          },
          {
            "name": "client_response_status",
            "type": "string"
          },
          {
            "name": "content_type",
            "type": "string"
          },
          {
            "name": "duration",
            "type": "string"
          },
          {
            "name": "error_details",
            "type": "string"
          },
          {
            "name": "http_method",
            "type": "string"
          },
          {
            "name": "server_ip",
            "type": "string"
          },
          {
            "name": "server_response_size",
            "type": "string"
          },
          {
            "name": "time_dns",
            "type": "string"
          },
          {
            "name": "time_icap",
            "type": "string"
          },
          {
            "name": "time_server",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "real"
          },
          {
            "name": "tls_cert_errors",
            "type": "string"
          },
          {
            "name": "tls_client_cipher",
            "type": "string"
          },
          {
            "name": "tls_client_max_version",
            "type": "string"
          },
          {
            "name": "tls_client_version",
            "type": "string"
          },
          {
            "name": "tls_server_cipher",
            "type": "string"
          },
          {
            "name": "tls_server_max_version",
            "type": "string"
          },
          {
            "name": "tls_server_version",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "url_filter_action",
            "type": "string"
          },
          {
            "name": "url_filter_categories",
            "type": "string"
          },
          {
            "name": "url_filter_result",
            "type": "string"
          },
          {
            "name": "user_agent",
            "type": "string"
          },
          {
            "name": "user_id",
            "type": "string"
          },
          {
            "name": "RawData",
            "type": "string"
          }
        ],
        "transformKql": "source | extend TimeGenerated = datetime_add('second', tolong(timestamp), datetime(1970-01-01))"
      }
    ],
    "proxyLogstash": {
      "input": "
          kafka { 
            bootstrap_servers=>\"${EVENTHUB_ENDPOINT}\" 
            security_protocol=>\"SASL_SSL\" 
            sasl_mechanism=>\"PLAIN\" 
            sasl_jaas_config=>\"org.apache.kafka.common.security.plain.PlainLoginModule required username='$ConnectionString' password='${EVENTHUB_STRING};EntityPath=proxy';\" 
            topics=>[\"proxy\"]
            decorate_events => \"basic\"
            codec => \"json\"
            group_id => \"$Default\"
            auto_offset_reset => \"earliest\"
            client_id => \"sentinel-connector-proxy\"
          }
        ",
      "output": "
          if [@metadata][kafka][topic] == \"proxy\" {
            microsoft-sentinel-log-analytics-logstash-output-plugin {
              client_app_Id => \"${CLIENT_ID}\"
              client_app_secret => \"${CLIENT_SECRET}\"
              tenant_id => \"${TENANT_ID}\"
              data_collection_endpoint => \"${DCR_ENDPOINT}\"
              dcr_immutable_id => \"${PROXY_DCR_ID}\"
              dcr_stream_name => \"${PROXY_DCR_STREAM}\"
            }
          }
        "
    },
    "authLogstash": {
      "input": "
          kafka { 
            bootstrap_servers=>\"${EVENTHUB_ENDPOINT}\" 
            security_protocol=>\"SASL_SSL\" 
            sasl_mechanism=>\"PLAIN\" 
            sasl_jaas_config=>\"org.apache.kafka.common.security.plain.PlainLoginModule required username='$ConnectionString' password='${EVENTHUB_STRING};EntityPath=auth';\" 
            topics=>[\"auth\"]
            decorate_events => \"basic\"
            codec => \"json\"
            group_id => \"$Default\"
            auto_offset_reset => \"earliest\"
            client_id => \"sentinel-connector-auth\"
          }
        ",
      "output": "
          if [@metadata][kafka][topic] == \"auth\" {
            microsoft-sentinel-log-analytics-logstash-output-plugin {
              client_app_Id => \"${CLIENT_ID}\"
              client_app_secret => \"${CLIENT_SECRET}\"
              tenant_id => \"${TENANT_ID}\"
              data_collection_endpoint => \"${DCR_ENDPOINT}\"
              dcr_immutable_id => \"${AUTH_DCR_ID}\"
              dcr_stream_name => \"${AUTH_DCR_STREAM}\"
            }
          }
        "
    },
    "firewallLogstash": {
      "input": "
          kafka { 
            bootstrap_servers=>\"${EVENTHUB_ENDPOINT}\" 
            security_protocol=>\"SASL_SSL\" 
            sasl_mechanism=>\"PLAIN\" 
            sasl_jaas_config=>\"org.apache.kafka.common.security.plain.PlainLoginModule required username='$ConnectionString' password='${EVENTHUB_STRING};EntityPath=firewall';\" 
            topics=>[\"firewall\"]
            decorate_events => \"basic\"
            codec => \"json\"
            group_id => \"$Default\"
            auto_offset_reset => \"earliest\"
            client_id => \"sentinel-connector-firewall\"
          }
        ",
      "output": "
          if [@metadata][kafka][topic] == \"firewall\" {
            microsoft-sentinel-log-analytics-logstash-output-plugin {
              client_app_Id => \"${CLIENT_ID}\"
              client_app_secret => \"${CLIENT_SECRET}\"
              tenant_id => \"${TENANT_ID}\"
              data_collection_endpoint => \"${DCR_ENDPOINT}\"
              dcr_immutable_id => \"${FIREWALL_DCR_ID}\"
              dcr_stream_name => \"${FIREWALL_DCR_STREAM}\"
            }
          }
        "
    },
    "ztnaLogstash": {
      "input": "
          kafka { 
            bootstrap_servers=>\"${EVENTHUB_ENDPOINT}\" 
            security_protocol=>\"SASL_SSL\" 
            sasl_mechanism=>\"PLAIN\" 
            sasl_jaas_config=>\"org.apache.kafka.common.security.plain.PlainLoginModule required username='$ConnectionString' password='${EVENTHUB_STRING};EntityPath=ztna';\" 
            topics=>[\"ztna\"]
            decorate_events => \"basic\"
            codec => \"json\"
            group_id => \"$Default\"
            auto_offset_reset => \"earliest\"
            client_id => \"sentinel-connector-ztna\"
          }
        ",
      "output": "
          if [@metadata][kafka][topic] == \"ztna\" {
            microsoft-sentinel-log-analytics-logstash-output-plugin {
              client_app_Id => \"${CLIENT_ID}\"
              client_app_secret => \"${CLIENT_SECRET}\"
              tenant_id => \"${TENANT_ID}\"
              data_collection_endpoint => \"${DCR_ENDPOINT}\"
              dcr_immutable_id => \"${ZTNA_DCR_ID}\"
              dcr_stream_name => \"${ZTNA_DCR_STREAM}\"
            }
          }
        "
    },
    "mailLogstash": {
      "input": "
          kafka { 
            bootstrap_servers=>\"${EVENTHUB_ENDPOINT}\" 
            security_protocol=>\"SASL_SSL\" 
            sasl_mechanism=>\"PLAIN\" 
            sasl_jaas_config=>\"org.apache.kafka.common.security.plain.PlainLoginModule required username='$ConnectionString' password='${EVENTHUB_STRING};EntityPath=mail';\" 
            topics=>[\"mail\"]
            decorate_events => \"basic\"
            group_id => \"$Default\"
            auto_offset_reset => \"earliest\"
            client_id => \"sentinel-connector-mail\"
          }
        ",
      "output": "
          if [@metadata][kafka][topic] == \"mail\" {
            microsoft-sentinel-log-analytics-logstash-output-plugin {
              client_app_Id => \"${CLIENT_ID}\"
              client_app_secret => \"${CLIENT_SECRET}\"
              tenant_id => \"${TENANT_ID}\"
              data_collection_endpoint => \"${DCR_ENDPOINT}\"
              dcr_immutable_id => \"${MAIL_DCR_ID}\"
              dcr_stream_name => \"${MAIL_DCR_STREAM}\"
            }
          }
        "
    },
    "zeekLogstash": {
      "input": "
          kafka { 
            bootstrap_servers=>\"${EVENTHUB_ENDPOINT}\" 
            security_protocol=>\"SASL_SSL\" 
            sasl_mechanism=>\"PLAIN\" 
            sasl_jaas_config=>\"org.apache.kafka.common.security.plain.PlainLoginModule required username='$ConnectionString' password='${EVENTHUB_STRING};EntityPath=zeek';\" 
            topics=>[\"zeek\"]
            decorate_events => \"basic\"
            group_id => \"$Default\"
            auto_offset_reset => \"earliest\"
            client_id => \"sentinel-connector-zeek\"
          }
        ",
      "output": "
          if [@metadata][kafka][topic] == \"zeek\" {
            microsoft-sentinel-log-analytics-logstash-output-plugin {
              client_app_Id => \"${CLIENT_ID}\"
              client_app_secret => \"${CLIENT_SECRET}\"
              tenant_id => \"${TENANT_ID}\"
              data_collection_endpoint => \"${DCR_ENDPOINT}\"
              dcr_immutable_id => \"${ZEEK_DCR_ID}\"
              dcr_stream_name => \"${ZEEK_DCR_STREAM}\"
            }
          }
        "
    },
    "enabledLogstashInputs": "[
      concat(
        'input {\n',
        if(parameters('proxy'), variables('proxyLogstash').input, ''),
        if(parameters('auth'), variables('authLogstash').input, ''),
        if(parameters('firewall'), variables('firewallLogstash').input, ''),
        if(parameters('ztna'), variables('ztnaLogstash').input, ''), 
        if(parameters('mail'), variables('mailLogstash').input, ''),
        if(parameters('zeek'), variables('zeekLogstash').input, ''),
        '\n} \n'
      )]",
    "enabledLogstashOutputs": "[
      concat(
        'output {\n',
        if(parameters('proxy'), variables('proxyLogstash').output, ''),
        if(parameters('auth'), variables('authLogstash').output, ''),
        if(parameters('firewall'), variables('firewallLogstash').output, ''),
        if(parameters('ztna'), variables('ztnaLogstash').output, ''), 
        if(parameters('mail'), variables('mailLogstash').output, ''),
        if(parameters('zeek'), variables('zeekLogstash').output, ''),
        '\n} \n'
      )]",
    "logstashConfig": "[
      concat(
        variables('enabledLogstashInputs'), 
        'filter { mutate { remove_field => [ \"event\", \"ls_version\"] }}\n',
        variables('enabledLogstashOutputs')
        )]"
  },
  "resources": [
    {
      "type": "Microsoft.Insights/dataCollectionEndpoints",
      "apiVersion": "2023-03-11",
      "name": "[parameters('dceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "logsIngestion": {
          "enabled": true
        }
      }
    },
    {
      "copy": {
        "name": "tablesCopy",
        "count": "[length(variables('logTypes'))]"
      },
      "condition": "[variables('logTypes')[copyIndex()].enabled]",
      "type": "Microsoft.OperationalInsights/workspaces/tables",
      "apiVersion": "2023-09-01",
      "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/OSAG', variables('logTypes')[copyIndex()].name, 'Logs_CL')]",
      "properties": {
        "schema": {
          "name": "[concat('OSAG', variables('logTypes')[copyIndex()].name, 'Logs_CL')]",
          "columns": "[variables('logTypes')[copyIndex()].columns]"
        }
      }
    },
    {
      "copy": {
        "name": "dcrsCopy",
        "count": "[length(variables('logTypes'))]"
      },
      "condition": "[variables('logTypes')[copyIndex()].enabled]",
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2023-03-11",
      "name": "[concat('osag-', toLower(variables('logTypes')[copyIndex()].name), '-dcr')]",
      "location": "[parameters('location')]",
      "properties": {
        "dataCollectionEndpointId": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dceName'))]",
        "streamDeclarations": {
          "[concat('Custom-OSAG', variables('logTypes')[copyIndex()].name, 'Logs')]": {
            "columns": "[variables('logTypes')[copyIndex()].columns]"
          }
        },
        "destinations": {
          "logAnalytics": [
            {
              "name": "logAnalyticsDestination",
              "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": [ "[concat('Custom-OSAG', variables('logTypes')[copyIndex()].name, 'Logs')]" ],
            "destinations": [ "logAnalyticsDestination" ],
            "transformKql": "[variables('logTypes')[copyIndex()].transformKql]",
            "outputStream": "[concat('Custom-OSAG', variables('logTypes')[copyIndex()].name, 'Logs_CL')]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dceName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('logAnalyticsWorkspaceName'), concat('OSAG', variables('logTypes')[copyIndex()].name, 'Logs_CL'))]"
      ]
    },
    {
      "copy": {
        "name": "roleAssignmentsCopy",
        "count": "[length(variables('logTypes'))]"
      },
      "condition": "[variables('logTypes')[copyIndex()].enabled]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, concat('osag-', toLower(variables('logTypes')[copyIndex()].name), '-dcr'), parameters('principalId')[0], 'MetricsPublisher')]",
      "scope": "[concat('Microsoft.Insights/dataCollectionRules', '/', concat('osag-', toLower(variables('logTypes')[copyIndex()].name), '-dcr'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/dataCollectionRules', concat('osag-', toLower(variables('logTypes')[copyIndex()].name), '-dcr'))]"
      ],
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
        "principalId": "[parameters('principalId')[0]]"
      }
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2024-03-01",
      "name": "osag-sentinel-conector",
      "location": "[parameters('location')]",
      "properties": {}
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2024-03-01",
      "name": "osag-sentinel-conector",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', 'osag-sentinel-conector')]"
      ],
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', 'osag-sentinel-conector')]",
        "configuration": {
          "activeRevisionsMode": "Single",
          "secrets": [
            {
              "name": "eventhub-connection-string",
              "value": "[parameters('eventhubConnectionString')]"
            },
            {
              "name": "principal-secret",
              "value": "[parameters('principalSecret')]"
            },
            {
              "name": "protocols",
              "value": "ip      0       IP      # internet protocol\nicmp    1       ICMP    # internet control message protocol\ntcp     6       TCP     # transmission control protocol\nudp     17      UDP     # user datagram protocol"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "name": "logstash",
              "image": "docker.elastic.co/logstash/logstash:8.12.0",
              "resources": {
                "cpu": 1.0,
                "memory": "2Gi"
              },
              "command": [
                "/bin/bash",
                "-c",
                "/usr/share/logstash/bin/logstash-plugin install microsoft-sentinel-log-analytics-logstash-output-plugin && cat /usr/share/logstash/pipeline/logstash.conf && /usr/local/bin/docker-entrypoint"
              ],
              "env": [
                {
                  "name": "XPACK_MONITORING_ENABLED",
                  "value": "false"
                },
                {
                  "name": "XPACK_SECURITY_ENABLED",
                  "value": "false"
                },
                {
                  "name": "XPACK_ML_ENABLED",
                  "value": "false"
                },
                {
                  "name": "EVENTHUB_ENDPOINT",
                  "value": "[parameters('eventhubEndpoint')]"
                },
                {
                  "name": "EVENTHUB_STRING",
                  "secretRef": "eventhub-connection-string"
                },
                {
                  "name": "CLIENT_ID",
                  "value": "[parameters('principalClientId')]"
                },
                {
                  "name": "CLIENT_SECRET",
                  "secretRef": "principal-secret"
                },
                {
                  "name": "TENANT_ID",
                  "value": "[subscription().tenantId]"
                },
                {
                  "name": "DCR_ENDPOINT",
                  "value": "[reference(resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dceName')), '2023-03-11').logsIngestion.endpoint]"
                },
                {
                  "name": "PROXY_DCR_ID",
                  "value": "[if( parameters('proxy'),reference(resourceId('Microsoft.Insights/dataCollectionRules', 'osag-proxy-dcr'), '2023-03-11').immutableId, '')]"
                },
                {
                  "name": "PROXY_DCR_STREAM",
                  "value": "Custom-OSAGProxyLogs"
                },
                {
                  "name": "AUTH_DCR_ID",
                  "value": "[if (parameters('auth'), reference(resourceId('Microsoft.Insights/dataCollectionRules', 'osag-Authentication-dcr'), '2023-03-11').immutableId, '')]"
                },
                {
                  "name": "AUTH_DCR_STREAM",
                  "value": "Custom-OSAGAuthenticationLogs"
                },
                {
                  "name": "FIREWALL_DCR_ID",
                  "value": "[ if (parameters('firewall'), reference(resourceId('Microsoft.Insights/dataCollectionRules', 'osag-firewall-dcr'), '2023-03-11').immutableId, '')]"
                },
                {
                  "name": "FIREWALL_DCR_STREAM",
                  "value": "Custom-OSAGFirewallLogs"
                },
                {
                  "name": "ZTNA_DCR_ID",
                  "value": "[if (parameters('ztna'), reference(resourceId('Microsoft.Insights/dataCollectionRules', 'osag-ztna-dcr'), '2023-03-11').immutableId, '')]"
                },
                {
                  "name": "ZTNA_DCR_STREAM",
                  "value": "Custom-OSAGZtnaLogs"
                },
                {
                  "name": "MAIL_DCR_ID",
                  "value": "[if (parameters('mail'), reference(resourceId('Microsoft.Insights/dataCollectionRules', 'osag-mail-dcr'), '2023-03-11').immutableId, '')]"
                },
                {
                  "name": "MAIL_DCR_STREAM",
                  "value": "Custom-OSAGMailLogs"
                },
                {
                  "name": "ZEEK_DCR_ID",
                  "value": "[if (parameters('zeek'), reference(resourceId('Microsoft.Insights/dataCollectionRules', 'osag-zeek-dcr'), '2023-03-11').immutableId, '')]"
                },
                {
                  "name": "ZEEK_DCR_STREAM",
                  "value": "Custom-OSAGZeekLogs"
                }
              ],
              "volumeMounts": [
                {
                  "volumeName": "logstash-config",
                  "mountPath": "/usr/share/logstash/pipeline"
                },
                {
                  "volumeName": "protocols",
                  "mountPath": "/etc/protocols",
                  "subPath": "protocols"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": 1,
            "maxReplicas": 1
          },
          "volumes": [
            {
              "name": "logstash-config",
              "storageType": "EmptyDir"
            },
            {
              "name": "protocols",
              "storageType": "Secret",
              "secrets": [
                {
                  "secretRef": "protocols"
                }
              ]
            }
          ],
          "initContainers": [
            {
              "name": "init-config",
              "image": "busybox",
              "command": [
                "sh",
                "-c",
                "[concat('cat > /config/logstash.conf << ''EOT''\n', variables('logstashConfig'), '\nEOT\n')]"
              ],
              "volumeMounts": [
                {
                  "volumeName": "logstash-config",
                  "mountPath": "/config"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/OpenSystemsImNetworkSessionProxy')]",
      "location": "[parameters('location')]",
      "condition": "[parameters('proxy')]",
      "properties": {
        "category": "ASIM Parsers",
        "displayName": "OpenSystems Proxy ASIM Parser",
        "functionAlias": "OpenSystemsImNetworkSessionProxy",
        "query": "// filepath: /home/mdarii/osag/Azure-Sentinel/Solutions/OpenSystems/Parsers/ProxyASIMParser.kql\n// ASIM Parser for OpenSystems Proxy logs to ASIM NetworkSession Schema\n// Table name: OSAGProxyLogs_CL\n// Ingestion-time KQL transform: source | extend TimeGenerated = datetime_add('second', tolong(timestamp), datetime(1970-01-01))\n// ASIM NetworkSession Schema: https://learn.microsoft.com/azure/sentinel/normalization-schema-reference-network-session\n\nlet parser = (disabled: bool=false) {\n  OSAGProxyLogs_CL\n  | where not(disabled)\n  | extend\n      // --- Event Information ---\n      EventProduct = \"OpenSystems\",\n      EventVendor = \"OpenSystems\",\n      EventSchemaVersion = \"0.2.7\", // Refer to the latest ASIM NetworkSession version\n      EventType = \"HttpRequest\",    // Assuming these are HTTP/HTTPS proxy logs\n\n      // --- Event Timestamps ---\n      // TimeGenerated is already set at ingestion from 'timestamp' (epoch seconds)\n      EventStartTime = TimeGenerated,\n      EventEndTime = case(\n                        isnotempty(duration) and isnotempty(TimeGenerated), TimeGenerated + totimespan(strcat(tostring(toint(duration)), \"ms\")), // Assuming duration is in milliseconds\n                        TimeGenerated // Fallback if duration is not available\n                       ),\n\n      // --- Network Information ---\n      SrcIpAddr = client_ip,\n      DstIpAddr = server_ip,\n      NetworkProtocol = case(\n                          url startswith \"https://\", \"HTTPS\",\n                          url startswith \"http://\", \"HTTP\",\n                          \"Other\"\n                        ),\n      NetworkDirection = \"Outbound\", // Typically for proxy logs\n\n      // --- URL and HTTP Details ---\n      Url = url,\n      HttpRequestMethod = http_method,\n      HttpUserAgent = user_agent,\n      HttpStatusCode = tostring(client_response_status), // Ensure it's a string\n      HttpContentType = content_type,\n\n      // --- Size Information ---\n      // Convert sizes to long. Handle potential non-numeric values or empty strings.\n      NetworkBytesSent = todouble(client_request_size), // DvcHttpRequestSizeBytes in some contexts\n      NetworkBytesReceived = todouble(client_response_size), // DvcHttpResponseSizeBytes in some contexts\n\n      // --- Event Result & Details ---\n      EventResult = case(\n                      url_filter_action has_cs \"allow\", \"Success\",\n                      url_filter_action has_cs \"block\", \"Failure\",\n                      url_filter_action has_cs \"monitor\", \"Success\", // Or \"Other\" depending on intent\n                      isnotempty(client_response_status) and tostring(client_response_status) startswith \"2\", \"Success\", // 2xx codes\n                      isnotempty(client_response_status) and tostring(client_response_status) startswith \"3\", \"Success\", // 3xx codes (redirects are usually successful from proxy PoV)\n                      isnotempty(client_response_status), \"Failure\", // 4xx, 5xx and others\n                      \"Other\"\n                    ),\n      EventResultDetails = coalesce(error_details, url_filter_result, \"\"),\n\n      // --- Actor (User) Information ---\n      ActorUsername = user_id,\n      ActorUsernameType = iff(isnotempty(user_id), \"Simple\", \"\"), // Assuming simple username\n\n      // --- Threat & Category Information ---\n      ThreatCategory = url_filter_categories, // Can be mapped to NetworkRuleName as well\n      // Assuming casb_risk_score is numeric or can be mapped to ASIM risk levels (Informational, Low, Medium, High, Critical)\n      ThreatRiskLevel = case(\n                          casb_risk_score == \"1\", \"Low\",\n                          casb_risk_score == \"2\", \"Low\",\n                          casb_risk_score == \"3\", \"Medium\",\n                          casb_risk_score == \"4\", \"High\",\n                          casb_risk_score == \"5\", \"Critical\",\n                          \"\" // Default or if not applicable\n                        ),\n\n      // --- Device Information (Proxy Server itself) ---\n      // Dvc fields are usually for the reporting device.\n      // DvcHostname, DvcIpAddr could be added if known and static for the proxy.\n\n      // --- Additional Fields ---\n      AdditionalFields = pack(\n                            \"CasbApplication\", casb_application,\n                            \"CasbCategory\", casb_category,\n                            \"CasbOperation\", casb_operation,\n                            \"CasbRiskScore\", casb_risk_score,\n                            \"ClientRequestSize\", client_request_size,\n                            \"ClientResponseSize\", client_response_size,\n                            \"DurationMs\", duration,\n                            \"TimeDns\", time_dns,\n                            \"TimeIcap\", time_icap,\n                            \"TimeServer\", time_server,\n                            \"TlsCertErrors\", tls_cert_errors,\n                            \"TlsClientCipher\", tls_client_cipher,\n                            \"TlsClientMaxVersion\", tls_client_max_version,\n                            \"TlsClientVersion\", tls_client_version,\n                            \"TlsServerCipher\", tls_server_cipher,\n                            \"TlsServerMaxVersion\", tls_server_max_version,\n                            \"TlsServerVersion\", tls_server_version,\n                            \"UrlFilterAction\", url_filter_action,\n                            \"UrlFilterResult\", url_filter_result,\n                            \"OriginalTimestamp\", timestamp\n                         )\n\n  // --- Aliases & Standard Fields ---\n  | project-rename\n      EventOriginalUid = RawData, // Assuming RawData contains a unique ID or the full log. If not, generate one.\n      HttpReferrer = casb_application, // Or another field if more appropriate for referrer\n      User = ActorUsername,\n      IpAddress = SrcIpAddr, // Common alias, though DstIpAddr is also important\n      RuleName = url_filter_categories // Alias for ThreatCategory or specific rule name\n\n  // --- Select and Order ASIM Fields ---\n  | project\n      // Event\n      EventTime, // Alias for EventStartTime, using TimeGenerated\n      EventProduct,\n      EventVendor,\n      EventSchemaVersion,\n      EventType,\n      EventResult,\n      EventResultDetails,\n      EventStartTime,\n      EventEndTime,\n      EventOriginalUid,\n      // Network\n      SrcIpAddr,\n      DstIpAddr,\n      NetworkProtocol,\n      NetworkDirection,\n      // URL & HTTP\n      Url,\n      HttpRequestMethod,\n      HttpUserAgent,\n      HttpStatusCode,\n      HttpContentType,\n      HttpReferrer,\n      // Size & Duration\n      NetworkBytesSent,\n      NetworkBytesReceived,\n      Duration, // This should be the ASIM Duration field (in ms)\n      // Actor\n      ActorUsername,\n      ActorUsernameType,\n      // Threat\n      ThreatCategory,\n      ThreatRiskLevel,\n      // Aliases\n      User,\n      IpAddress,\n      RuleName,\n      // Additional & Raw\n      AdditionalFields,\n      RawData\n  // Ensure Duration is correctly populated as a timespan or long (milliseconds)\n  // The extend for EventEndTime already calculates duration, let's ensure ASIM 'Duration' field is also populated\n  | extend Duration = todouble(duration) // Assuming original 'duration' field is in milliseconds and numeric\n};\nparser // Execute the parser function",
        "version": 1
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/OpenSystemsImAuthentication')]",
      "location": "[parameters('location')]",
      "condition": "[parameters('auth')]",
      "properties": {
        "category": "ASIM Parsers",
        "displayName": "OpenSystems Authentication ASIM Parser",
        "functionAlias": "OpenSystemsImAuthentication",
        "query": "// filepath: /home/mdarii/osag/Azure-Sentinel/Solutions/OpenSystems/Parsers/AuthASIMParser.kql\n// ASIM Parser for Authentication (Auth) logs\n// Function to parse OpenSystems Authentication logs into ASIM Authentication schema\n// Ingestion-time KQL transform already maps 'event_time' to 'TimeGenerated'\n// Table name: OSAGAuthenticationLogs_CL\n//\n// Relevant columns from OSAGAuthenticationLogs_CL (based on mainTemplate.json):\n// - TimeGenerated (datetime)\n// - login (string)         -> ActorUsername / TargetUsername\n// - remoteAddress (dynamic) -> SrcIpAddr\n// - result (string)        -> EventResult\n// - event_time (datetime)  -> EventStartTime\n// - RawData (string)\n//\n// ASIM Authentication Schema: https://learn.microsoft.com/azure/sentinel/normalization-schema-reference-authentication\n\nlet parser = (disabled: bool=false) {\n  OSAGAuthenticationLogs_CL\n  | where not(disabled)\n  | extend\n      // --- Event Information ---\n      EventProduct = \"OpenSystems\",\n      EventVendor = \"OpenSystems\",\n      EventSchemaVersion = \"0.1.0\", // ASIM Authentication schema version. Adjust if necessary.\n      // Assuming 'result' contains strings like \"success\", \"failure\", \"successful\", \"failed\", etc.\n      // Customize this logic based on the actual values in your 'result' field.\n      EventType = iff(result has_cs \"success\", \"LogonSuccess\", \"LogonFailed\"),\n      EventResult = case(\n                        result has_cs \"success\", \"Success\",\n                        result has_cs \"fail\", \"Failure\", // Catches \"failure\", \"failed\"\n                        // Add more specific cases for other 'result' values if they exist\n                        \"Other\" // Default if no other case matches\n                      ),\n      EventStartTime = todatetime(event_time), // Derived from the original event_time\n      EventEndTime = todatetime(event_time),   // Assuming logon events are point-in-time\n\n      // --- Actor Information (User performing the logon attempt) ---\n      ActorUsername = tostring(login),\n      ActorUsernameType = \"Simple\", // Assuming 'login' is a simple username. Change to \"UPN\", \"SID\", etc., if applicable.\n\n      // --- Target User Information (User whose credentials are being used) ---\n      // For authentication events, Actor and Target are often the same.\n      TargetUsername = tostring(login),\n      TargetUsernameType = \"Simple\",\n\n      // --- Source Device Information ---\n      // Assuming 'remoteAddress' directly contains the IP address as a string.\n      // If 'remoteAddress' is a JSON object (e.g., { \"ip\": \"1.2.3.4\", \"port\": 1234 }),\n      // you would need to parse it: SrcIpAddr = tostring(parse_json(remoteAddress).ip)\n      SrcIpAddr = tostring(remoteAddress),\n\n      // --- Additional Fields ---\n      // Preserving original values that informed ASIM fields or other relevant raw data.\n      AdditionalFields = pack(\n                            \"OriginalResult\", result,\n                            \"OriginalRemoteAddress\", remoteAddress,\n                            \"OriginalLogin\", login,\n                            \"OriginalEventTime\", event_time\n                         )\n\n  // --- Aliases & Standard Fields ---\n  // EventTime is an alias for EventStartTime, and TimeGenerated is often used as EventTime.\n  // Since TimeGenerated is already set to event_time at ingestion, we can use it directly.\n  | project-rename\n      EventTime = TimeGenerated, // Standard ASIM alias for the primary event time\n      User = ActorUsername,      // Common alias for ActorUsername\n      IpAddress = SrcIpAddr      // Common alias for SrcIpAddr\n\n  // --- Select and Order ASIM Fields ---\n  // Project only the fields that are being populated, plus common aliases.\n  | project\n      // Event\n      EventTime,\n      EventProduct,\n      EventVendor,\n      EventSchemaVersion,\n      EventType,\n      EventResult,\n      EventStartTime,\n      EventEndTime,\n      // Actor\n      ActorUsername,\n      ActorUsernameType,\n      // Target User\n      TargetUsername,\n      TargetUsernameType,\n      // Source Device\n      SrcIpAddr,\n      // Aliases\n      User,\n      IpAddress,\n      // Additional & Raw\n      AdditionalFields,\n      RawData // Include the original raw log message\n};\nparser // Execute the parser function",
        "version": 1
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/OpenSystemsImNetworkSessionFirewall')]",
      "location": "[parameters('location')]",
      "condition": "[parameters('firewall')]",
      "properties": {
        "category": "ASIM Parsers",
        "displayName": "OpenSystems Firewall ASIM Parser",
        "functionAlias": "OpenSystemsImNetworkSessionFirewall",
        "query": "// filepath: /home/mdarii/osag/Azure-Sentinel/Solutions/OpenSystems/Parsers/FirewallASIMParser.kql\n// ASIM Parser for OpenSystems Firewall logs to ASIM NetworkSession Schema\n// Table name: OSAGFirewallLogs_CL\n// Ingestion-time KQL transform: source | extend TimeGenerated = datetime_add('second', timestamp, datetime(1970-01-01))\n// ASIM NetworkSession Schema: https://learn.microsoft.com/azure/sentinel/normalization-schema-reference-network-session\n\nlet parser = (disabled: bool=false) {\n  OSAGFirewallLogs_CL\n  | where not(disabled)\n  | extend\n      // --- Event Information ---\n      EventProduct = \"OpenSystems\",\n      EventVendor = \"OpenSystems\",\n      EventSchemaVersion = \"0.2.7\", // Refer to the latest ASIM NetworkSession version\n      EventType = iff(action in (\"accept\", \"allow\"), \"NetworkSession\", \"NetworkFlow\"), // Or more specific if available\n\n      // --- Event Timestamps ---\n      // TimeGenerated is already set at ingestion from 'timestamp' (epoch seconds)\n      EventStartTime = TimeGenerated,\n      EventEndTime = TimeGenerated, // Firewall logs are typically point-in-time for a session/flow event\n\n      // --- Network Information ---\n      SrcIpAddr = ip_src,\n      DstIpAddr = ip_dst,\n      SrcPortNumber = toint(port_src),\n      DstPortNumber = toint(port_dst),\n      // NetworkProtocol needs to be derived if not directly available. Assuming TCP/UDP based on common ports or a dedicated protocol field if it exists.\n      // For this example, we'll leave it generic or try to infer. If you have a protocol field, use it.\n      NetworkProtocol = case( DstPortNumber == 53 or SrcPortNumber == 53, \"UDP\", // Example for DNS\n                               DstPortNumber == 80 or SrcPortNumber == 80, \"TCP\", // Example for HTTP\n                               DstPortNumber == 443 or SrcPortNumber == 443, \"TCP\", // Example for HTTPS\n                               // Add more protocol inferences based on common ports\n                               \"Other\"\n                              ),\n      NetworkDirection = case(\n                            // Infer direction based on zones or interfaces if possible. This is a placeholder.\n                            // Example: iface_in startswith \"lan\" and iface_out startswith \"wan\", \"Outbound\",\n                            //          iface_in startswith \"wan\" and iface_out startswith \"lan\", \"Inbound\",\n                            isnotempty(iface_in) and isnotempty(iface_out), \"Other\", // If interfaces are known but direction unclear\n                            \"Unknown\"\n                          ),\n\n      // --- Event Result & Details ---\n      EventResult = case(\n                      action in (\"accept\", \"allow\", \"permit\"), \"Success\",\n                      action in (\"deny\", \"drop\", \"reject\"), \"Failure\",\n                      \"Other\"\n                    ),\n      EventResultDetails = action, // Original action can serve as details\n\n      // --- Device Information (Firewall itself) ---\n      DvcHostname = host_name,\n      DvcInboundInterface = iface_in,\n      DvcOutboundInterface = iface_out,\n\n      // --- Rule Information ---\n      // If a specific firewall rule name/ID is logged, map it here.\n      // NetworkRuleName = firewall_rule_name, // Example\n\n      // --- Additional Fields ---\n      AdditionalFields = pack(\n                            \"ZoneSrc\", zone_src,\n                            \"ZoneDst\", zone_dst,\n                            \"OriginalAction\", action,\n                            \"OriginalTimestamp\", timestamp // Original epoch timestamp\n                         )\n\n  // --- Aliases & Standard Fields ---\n  | project-rename\n      EventOriginalUid = RawData, // Assuming RawData contains a unique ID or the full log.\n      IpAddress = SrcIpAddr,      // Common alias\n      Rule = action // Simple alias for the action taken\n\n  // --- Select and Order ASIM Fields ---\n  | project\n      // Event\n      EventTime, // Alias for EventStartTime, using TimeGenerated\n      EventProduct,\n      EventVendor,\n      EventSchemaVersion,\n      EventType,\n      EventResult,\n      EventResultDetails,\n      EventStartTime,\n      EventEndTime,\n      EventOriginalUid,\n      // Network\n      SrcIpAddr,\n      DstIpAddr,\n      SrcPortNumber,\n      DstPortNumber,\n      NetworkProtocol,\n      NetworkDirection,\n      // Device\n      DvcHostname,\n      DvcInboundInterface,\n      DvcOutboundInterface,\n      // Rule\n      Rule, // Alias for action\n      // Aliases\n      IpAddress,\n      // Additional & Raw\n      AdditionalFields,\n      RawData\n};\nparser // Execute the parser function",
        "version": 1
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/OpenSystemsImZTNA')]",
      "location": "[parameters('location')]",
      "condition": "[parameters('ztna')]",
      "properties": {
        "category": "ASIM Parsers",
        "displayName": "OpenSystems ZTNA ASIM Parser",
        "functionAlias": "OpenSystemsImZTNA",
        "query": "// filepath: /home/mdarii/osag/Azure-Sentinel/Solutions/OpenSystems/Parsers/ZtnaASIMParser.kql\n// ASIM Parser for OpenSystems ZTNA logs to ASIM Authentication Schema\n// Table name: OSAGZtnaLogs_CL\n// Ingestion-time KQL transform: source | extend TimeGenerated = todatetime(timestamp)\n// ASIM Authentication Schema: https://learn.microsoft.com/azure/sentinel/normalization-schema-reference-authentication\n\nlet parser = (disabled: bool=false) {\n  OSAGZtnaLogs_CL\n  | where not(disabled)\n  | extend\n      // --- Event Information ---\n      EventProduct = \"OpenSystems ZTNA\",\n      EventVendor = \"OpenSystems\",\n      EventSchemaVersion = \"0.1.0\", // Refer to the latest ASIM Authentication version\n      // Infer EventType based on 'status' or 'message_type' if possible. Defaulting to ZTNAAccess.\n      EventType = case(\n                      status has_cs \"success\", \"LogonSuccess\",\n                      status has_cs \"fail\", \"LogonFailed\",\n                      status has_cs \"denied\", \"LogonFailed\",\n                      status has_cs \"allowed\", \"LogonSuccess\",\n                      \"ZTNAAccess\" // Generic fallback\n                    ),\n      EventResult = case(\n                      status has_cs \"success\", \"Success\",\n                      status has_cs \"allowed\", \"Success\",\n                      status has_cs \"fail\", \"Failure\",\n                      status has_cs \"denied\", \"Failure\",\n                      // Add more specific cases for other 'status' values if they exist\n                      \"Other\" // Default if no other case matches\n                    ),\n      EventStartTime = TimeGenerated, // Already derived from original 'timestamp'\n      EventEndTime = TimeGenerated,   // Assuming ZTNA events are point-in-time\n      EventOriginalUid = uuid,\n      EventMessage = message,\n\n      // --- Actor Information (User attempting access) ---\n      ActorUsername = subject_name,\n      ActorUsernameType = \"Simple\", // Assuming 'subject_name' is a simple username. Change if applicable.\n\n      // --- Target User Information (Often same as Actor in ZTNA context) ---\n      TargetUsername = subject_name,\n      TargetUsernameType = \"Simple\",\n\n      // --- Source Device Information ---\n      SrcIpAddr = remote_address,\n\n      // --- Target Application Information ---\n      TargetAppName = object_name,\n      TargetAppType = \"ZTNA\", // Or more specific if available\n\n      // --- Additional Fields ---\n      AdditionalFields = pack(\n                            \"AuthorityName\", authority_name,\n                            \"MessageType\", message_type,\n                            \"ObjectNamePortal\", object_name_portal,\n                            \"OriginalStatus\", status,\n                            \"OriginalTimestamp\", timestamp,\n                            \"ZtnaTenant\", ztna_tenant,\n                            \"ZtnaUpstream\", ztna_upstream\n                         )\n\n  // --- Aliases & Standard Fields ---\n  | project-rename\n      EventTime = EventStartTime, // Standard ASIM alias\n      User = ActorUsername,       // Common alias\n      IpAddress = SrcIpAddr,      // Common alias\n      Application = TargetAppName // Common alias\n\n  // --- Select and Order ASIM Fields ---\n  | project\n      // Event\n      EventTime,\n      EventProduct,\n      EventVendor,\n      EventSchemaVersion,\n      EventType,\n      EventResult,\n      EventStartTime,\n      EventEndTime,\n      EventOriginalUid,\n      EventMessage,\n      // Actor\n      ActorUsername,\n      ActorUsernameType,\n      // Target User\n      TargetUsername,\n      TargetUsernameType,\n      // Source Device\n      SrcIpAddr,\n      // Target Application\n      TargetAppName,\n      TargetAppType,\n      // Aliases\n      User,\n      IpAddress,\n      Application,\n      // Additional & Raw\n      AdditionalFields,\n      RawData // Include the original raw log message\n};\nparser // Execute the parser function",
        "version": 1
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/OpenSystemsImMail')]",
      "location": "[parameters('location')]",
      "condition": "[parameters('mail')]",
      "properties": {
        "category": "ASIM Parsers",
        "displayName": "OpenSystems Mail ASIM Parser (Placeholder)",
        "functionAlias": "OpenSystemsImMail",
        "query": "// filepath: /home/mdarii/osag/Azure-Sentinel/Solutions/OpenSystems/Parsers/MailASIMParser.kql\n// ASIM Parser for Mail logs\n// TODO: Implement KQL function to transform raw Mail logs into the relevant ASIM schema.\n// Function name should follow ASIM naming convention.\n// Refer to ASIM documentation for schema details.",
        "version": 1
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/OpenSystemsImZeek')]",
      "location": "[parameters('location')]",
      "condition": "[parameters('zeek')]",
      "properties": {
        "category": "ASIM Parsers",
        "displayName": "OpenSystems Zeek ASIM Parser (Placeholder)",
        "functionAlias": "OpenSystemsImZeek",
        "query": "// filepath: /home/mdarii/osag/Azure-Sentinel/Solutions/OpenSystems/Parsers/ZeekASIMParser.kql\n// ASIM Parser for Zeek logs\n// TODO: Implement KQL function to transform raw Zeek logs into the relevant ASIM schema.\n// Function name should follow ASIM naming convention.\n// Refer to ASIM documentation for schema details.",
        "version": 1
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/OpenSystemsAuthASIMParser')]",
      "location": "[parameters('location')]",
      "dependsOn": [],
      "properties": {
        "etag": "*",
        "displayName": "ASIM Authentication Parser for OpenSystems Logs",
        "category": "ASIM",
        "functionAlias": "vimAuthenticationOpenSystems",
        "query": "// ASIM Parser for Authentication (Auth) logs\n// Function to parse OpenSystems Authentication logs into ASIM Authentication schema\n// Ingestion-time KQL transform already maps 'event_time' to 'TimeGenerated'\n// Table name: OSAGAuthenticationLogs_CL\n//\n// Relevant columns from OSAGAuthenticationLogs_CL (based on mainTemplate.json):\n// - TimeGenerated (datetime)\n// - login (string)         -> ActorUsername / TargetUsername\n// - remoteAddress (dynamic) -> SrcIpAddr\n// - result (string)        -> EventResult\n// - event_time (datetime)  -> EventStartTime\n// - RawData (string)\n//\n// ASIM Authentication Schema: https://learn.microsoft.com/azure/sentinel/normalization-schema-reference-authentication\n\nlet parser = (disabled: bool=false) {\n  OSAGAuthenticationLogs_CL\n  | where not(disabled)\n  | extend\n      // --- Event Information ---\n      EventProduct = \"OpenSystems\",\n      EventVendor = \"OpenSystems\",\n      EventSchemaVersion = \"0.1.0\", // ASIM Authentication schema version. Adjust if necessary.\n      // Assuming 'result' contains strings like \"success\", \"failure\", \"successful\", \"failed\", etc.\n      // Customize this logic based on the actual values in your 'result' field.\n      EventType = iff(result has_cs \"success\", \"LogonSuccess\", \"LogonFailed\"),\n      EventResult = case(\n                        result has_cs \"success\", \"Success\",\n                        result has_cs \"fail\", \"Failure\", // Catches \"failure\", \"failed\"\n                        // Add more specific cases for other 'result' values if they exist\n                        \"Other\" // Default if no other case matches\n                      ),\n      EventStartTime = todatetime(event_time), // Derived from the original event_time\n      EventEndTime = todatetime(event_time),   // Assuming logon events are point-in-time\n\n      // --- Actor Information (User performing the logon attempt) ---\n      ActorUsername = tostring(login),\n      ActorUsernameType = \"Simple\", // Assuming 'login' is a simple username. Change to \"UPN\", \"SID\", etc., if applicable.\n\n      // --- Target User Information (User whose credentials are being used) ---\n      // For authentication events, Actor and Target are often the same.\n      TargetUsername = tostring(login),\n      TargetUsernameType = \"Simple\",\n\n      // --- Source Device Information ---\n      // Assuming 'remoteAddress' directly contains the IP address as a string.\n      // If 'remoteAddress' is a JSON object (e.g., { \"ip\": \"1.2.3.4\", \"port\": 1234 }),\n      // you would need to parse it: SrcIpAddr = tostring(parse_json(remoteAddress).ip)\n      SrcIpAddr = tostring(remoteAddress),\n\n      // --- Additional Fields ---\n      // Preserving original values that informed ASIM fields or other relevant raw data.\n      AdditionalFields = pack(\n                            \"OriginalResult\", result,\n                            \"OriginalRemoteAddress\", remoteAddress,\n                            \"OriginalLogin\", login,\n                            \"OriginalEventTime\", event_time\n                         )\n\n  // --- Aliases & Standard Fields ---\n  // EventTime is an alias for EventStartTime, and TimeGenerated is often used as EventTime.\n  // Since TimeGenerated is already set to event_time at ingestion, we can use it directly.\n  | project-rename\n      EventTime = TimeGenerated, // Standard ASIM alias for the primary event time\n      User = ActorUsername,      // Common alias for ActorUsername\n      IpAddress = SrcIpAddr      // Common alias for SrcIpAddr\n\n  // --- Select and Order ASIM Fields ---\n  // Project only the fields that are being populated, plus common aliases.\n  | project\n      // Event\n      EventTime,\n      EventProduct,\n      EventVendor,\n      EventSchemaVersion,\n      EventType,\n      EventResult,\n      EventStartTime,\n      EventEndTime,\n      // Actor\n      ActorUsername,\n      ActorUsernameType,\n      // Target User\n      TargetUsername,\n      TargetUsernameType,\n      // Source Device\n      SrcIpAddr,\n      // Aliases\n      User,\n      IpAddress,\n      // Additional & Raw\n      AdditionalFields,\n      RawData // Include the original raw log message\n};\nparser // Execute the parser function",
        "version": 1,
        "functionParameters": "disabled:bool"
      }
    }
  ]
}
