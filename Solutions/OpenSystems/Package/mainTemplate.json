{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "OpenSystems - support@opensystems.com",
    "comments": "Solution template for OpenSystems"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "support@opensystems.com",
    "_email": "[variables('email')]",
    "_solutionName": "OpenSystems",
    "_solutionVersion": "3.0.0",
    "solutionId": "opensystems.osag-sentinel",
    "_solutionId": "[variables('solutionId')]",
    "parserObject1": {
      "_parserName1": "[concat(parameters('workspace'),'/','AuthASIMParser')]",
      "_parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'AuthASIMParser')]",
      "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('AuthASIMParser-Parser')))]",
      "parserVersion1": "1.0.0",
      "parserContentId1": "AuthASIMParser-Parser"
    },
    "parserObject2": {
      "_parserName2": "[concat(parameters('workspace'),'/','FirewallASIMParser')]",
      "_parserId2": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'FirewallASIMParser')]",
      "parserTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('FirewallASIMParser-Parser')))]",
      "parserVersion2": "1.0.0",
      "parserContentId2": "FirewallASIMParser-Parser"
    },
    "parserObject3": {
      "_parserName3": "[concat(parameters('workspace'),'/','FirewallASIMFilterParser')]",
      "_parserId3": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'FirewallASIMFilterParser')]",
      "parserTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('FirewallASIMFilterParser-Parser')))]",
      "parserVersion3": "1.0.0",
      "parserContentId3": "FirewallASIMFilterParser-Parser"
    },
    "parserObject4": {
      "_parserName4": "[concat(parameters('workspace'),'/','ProxyASIMParser')]",
      "_parserId4": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ProxyASIMParser')]",
      "parserTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('ProxyASIMParser-Parser')))]",
      "parserVersion4": "1.0.0",
      "parserContentId4": "ProxyASIMParser-Parser"
    },
    "parserObject5": {
      "_parserName5": "[concat(parameters('workspace'),'/','ProxyASIMFilterParser')]",
      "_parserId5": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ProxyASIMFilterParser')]",
      "parserTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring('ProxyASIMFilterParser-Parser')))]",
      "parserVersion5": "1.0.0",
      "parserContentId5": "ProxyASIMFilterParser-Parser"
    },
    "uiConfigId1": "OpenSystemsLogstash",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "OpenSystemsLogstash",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "_dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject1').parserTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AuthASIMParser Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject1').parserVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject1')._parserName1]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "ASIM Parser for Authentication (Auth) logs",
                "category": "OpenSystemsParser",
                "functionAlias": "AuthASIMParser",
                "query": "let parser = () { \n    OSAGAuthenticationLogs_CL | \n      extend\n          EventProduct = \"OpenSystems\",\n          EventVendor = \"OpenSystems\",\n          EventSchema = \"Authentication\",\n          EventSchemaVersion = \"0.1.3\",\n          EventType = \"Logon\",\n          EventResult = case(\n                            result has_cs \"successful\", \"Success\",\n                            result has_cs \"failure\", \"Failure\",\n                            \"Other\"\n                          ),\n          EventResultDetails = iff(result == \"failure\", tostring(result), \"\"),\n          EventStartTime = todatetime(TimeGenerated),\n          EventEndTime = todatetime(TimeGenerated),\n          EventCount = 1,\n          ActorUsername = tostring(login),\n          ActorUsernameType = \"UPN\",\n          SrcIpAddr = remoteAddress[0],\n          Dvc = \"OpenSystems\",\n          AdditionalFields = pack(\n                                \"OriginalResult\", result,\n                                \"OriginalRemoteAddress\", remoteAddress,\n                                \"OriginalLogin\", login,\n                                \"OriginalEventTime\", TimeGenerated\n                            )\n      | project-rename\n          EventTime = TimeGenerated\n      | project\n          EventTime,\n          EventStartTime,\n          EventEndTime,\n          EventProduct,\n          EventVendor,\n          EventSchema,\n          EventSchemaVersion,\n          EventType,\n          EventResult,\n          EventResultDetails,\n          EventCount,\n          ActorUsername,\n          ActorUsernameType,\n          SrcIpAddr,\n          Dvc,\n          AdditionalFields,\n          RawData\n};\nparser\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
              "dependsOn": [
                "[variables('parserObject1')._parserId1]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'AuthASIMParser')]",
                "contentId": "[variables('parserObject1').parserContentId1]",
                "kind": "Parser",
                "version": "[variables('parserObject1').parserVersion1]",
                "source": {
                  "name": "OpenSystems",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "OpenSystems",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "OpenSystems",
                  "email": "support@opensystems.com",
                  "tier": "Partner",
                  "link": "https://www.opensystems.com/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "contentKind": "Parser",
        "displayName": "ASIM Parser for Authentication (Auth) logs",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject1').parserContentId1,'-', '1.0.0')))]",
        "version": "[variables('parserObject1').parserVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject1')._parserName1]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "ASIM Parser for Authentication (Auth) logs",
        "category": "OpenSystemsParser",
        "functionAlias": "AuthASIMParser",
        "query": "let parser = () { \n    OSAGAuthenticationLogs_CL | \n      extend\n          EventProduct = \"OpenSystems\",\n          EventVendor = \"OpenSystems\",\n          EventSchema = \"Authentication\",\n          EventSchemaVersion = \"0.1.3\",\n          EventType = \"Logon\",\n          EventResult = case(\n                            result has_cs \"successful\", \"Success\",\n                            result has_cs \"failure\", \"Failure\",\n                            \"Other\"\n                          ),\n          EventResultDetails = iff(result == \"failure\", tostring(result), \"\"),\n          EventStartTime = todatetime(TimeGenerated),\n          EventEndTime = todatetime(TimeGenerated),\n          EventCount = 1,\n          ActorUsername = tostring(login),\n          ActorUsernameType = \"UPN\",\n          SrcIpAddr = remoteAddress[0],\n          Dvc = \"OpenSystems\",\n          AdditionalFields = pack(\n                                \"OriginalResult\", result,\n                                \"OriginalRemoteAddress\", remoteAddress,\n                                \"OriginalLogin\", login,\n                                \"OriginalEventTime\", TimeGenerated\n                            )\n      | project-rename\n          EventTime = TimeGenerated\n      | project\n          EventTime,\n          EventStartTime,\n          EventEndTime,\n          EventProduct,\n          EventVendor,\n          EventSchema,\n          EventSchemaVersion,\n          EventType,\n          EventResult,\n          EventResultDetails,\n          EventCount,\n          ActorUsername,\n          ActorUsernameType,\n          SrcIpAddr,\n          Dvc,\n          AdditionalFields,\n          RawData\n};\nparser\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject1')._parserId1,'/'))))]",
      "dependsOn": [
        "[variables('parserObject1')._parserId1]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'AuthASIMParser')]",
        "contentId": "[variables('parserObject1').parserContentId1]",
        "kind": "Parser",
        "version": "[variables('parserObject1').parserVersion1]",
        "source": {
          "kind": "Solution",
          "name": "OpenSystems",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "OpenSystems",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "OpenSystems",
          "email": "support@opensystems.com",
          "tier": "Partner",
          "link": "https://www.opensystems.com/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject2').parserTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "FirewallASIMParser Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject2').parserVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject2')._parserName2]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "ASIM Parser for OpenSystems Firewall logs",
                "category": "OpenSystemsParser",
                "functionAlias": "FirewallASIMParser",
                "query": "let parser = () {\n  OSAGFirewallLogs_CL\n  | extend EventCount = toint(1)\n  | extend EventStartTime = timestamp\n  | extend EventEndTime = TimeGenerated\n  | extend EventType = \"NetworkSession\"\n  | extend EventProduct = \"OSAG Firewall\"\n  | extend EventVendor = \"Open Systems\"\n  | extend EventSchema = \"NetworkSession\"\n  | extend EventSchemaVersion = \"0.2.6\"\n  | extend EventResult = iff(action in (\"DROP\", \"REJECT\"), \"Failure\", \"Success\")\n  | extend EventResultDetails = \"Unknown\"\n  | extend EventSeverity = \"Informational\"\n  | extend DvcHostname = host_name\n  | extend Dvc = DvcHostname\n  | extend DstIpAddr = ip_dst\n  | extend DstPortNumber = iff(isnotempty(port_dst), toint(port_dst), int(null))\n  | extend DstZone = zone_dst\n  | extend Dst = DstIpAddr\n  | extend SrcIpAddr = ip_src\n  | extend SrcPortNumber = iff(isnotempty(port_src), toint(port_src), int(null))\n  | extend SrcZone = zone_src\n  | extend Src = SrcIpAddr\n  | extend IpAddr = SrcIpAddr\n  | project\n        EventCount,\n        EventStartTime,\n        EventEndTime,\n        EventType,\n        EventProduct,\n        EventVendor,\n        EventSchema,\n        EventSchemaVersion,\n        EventResult,\n        EventResultDetails,\n        EventSeverity,\n        DvcHostname,\n        Dvc,\n        DstIpAddr,\n        DstPortNumber,\n        DstZone,\n        Dst,\n        SrcIpAddr,\n        SrcPortNumber,\n        SrcZone,\n        Src,\n        IpAddr\n};\nparser\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
              "dependsOn": [
                "[variables('parserObject2')._parserId2]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'FirewallASIMParser')]",
                "contentId": "[variables('parserObject2').parserContentId2]",
                "kind": "Parser",
                "version": "[variables('parserObject2').parserVersion2]",
                "source": {
                  "name": "OpenSystems",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "OpenSystems",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "OpenSystems",
                  "email": "support@opensystems.com",
                  "tier": "Partner",
                  "link": "https://www.opensystems.com/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "contentKind": "Parser",
        "displayName": "ASIM Parser for OpenSystems Firewall logs",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject2').parserContentId2,'-', '1.0.0')))]",
        "version": "[variables('parserObject2').parserVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject2')._parserName2]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "ASIM Parser for OpenSystems Firewall logs",
        "category": "OpenSystemsParser",
        "functionAlias": "FirewallASIMParser",
        "query": "let parser = () {\n  OSAGFirewallLogs_CL\n  | extend EventCount = toint(1)\n  | extend EventStartTime = timestamp\n  | extend EventEndTime = TimeGenerated\n  | extend EventType = \"NetworkSession\"\n  | extend EventProduct = \"OSAG Firewall\"\n  | extend EventVendor = \"Open Systems\"\n  | extend EventSchema = \"NetworkSession\"\n  | extend EventSchemaVersion = \"0.2.6\"\n  | extend EventResult = iff(action in (\"DROP\", \"REJECT\"), \"Failure\", \"Success\")\n  | extend EventResultDetails = \"Unknown\"\n  | extend EventSeverity = \"Informational\"\n  | extend DvcHostname = host_name\n  | extend Dvc = DvcHostname\n  | extend DstIpAddr = ip_dst\n  | extend DstPortNumber = iff(isnotempty(port_dst), toint(port_dst), int(null))\n  | extend DstZone = zone_dst\n  | extend Dst = DstIpAddr\n  | extend SrcIpAddr = ip_src\n  | extend SrcPortNumber = iff(isnotempty(port_src), toint(port_src), int(null))\n  | extend SrcZone = zone_src\n  | extend Src = SrcIpAddr\n  | extend IpAddr = SrcIpAddr\n  | project\n        EventCount,\n        EventStartTime,\n        EventEndTime,\n        EventType,\n        EventProduct,\n        EventVendor,\n        EventSchema,\n        EventSchemaVersion,\n        EventResult,\n        EventResultDetails,\n        EventSeverity,\n        DvcHostname,\n        Dvc,\n        DstIpAddr,\n        DstPortNumber,\n        DstZone,\n        Dst,\n        SrcIpAddr,\n        SrcPortNumber,\n        SrcZone,\n        Src,\n        IpAddr\n};\nparser\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject2')._parserId2,'/'))))]",
      "dependsOn": [
        "[variables('parserObject2')._parserId2]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'FirewallASIMParser')]",
        "contentId": "[variables('parserObject2').parserContentId2]",
        "kind": "Parser",
        "version": "[variables('parserObject2').parserVersion2]",
        "source": {
          "kind": "Solution",
          "name": "OpenSystems",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "OpenSystems",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "OpenSystems",
          "email": "support@opensystems.com",
          "tier": "Partner",
          "link": "https://www.opensystems.com/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject3').parserTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "FirewallASIMParserFilter Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject3').parserVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject3')._parserName3]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "ASIM Parser for OpenSystems Firewall logs",
                "category": "OpenSystemsParser",
                "functionAlias": "FirewallASIMFilterParser",
                "query": "let parser = (\n  starttime:datetime=datetime(null),\n  endtime:datetime=datetime(null),\n  srcipaddr_has_any_prefix:dynamic=dynamic([]),\n  dstipaddr_has_any_prefix:dynamic=dynamic([]),\n  ipaddr_has_any_prefix:dynamic=dynamic([]),\n  dstportnumber:int=int(null),\n  hostname_has_any:dynamic=dynamic([]),\n  dvcaction:dynamic=dynamic([]),\n  eventresult:string='*',\n  disabled:bool=false\n  )\n  {\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);\n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n  let ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  OSAGFirewallLogs_CL\n    | extend DvcHostname = host_name\n    | extend EventResult = iff(action in (\"DROP\", \"REJECT\"), \"Failure\", \"Success\")\n    | extend DstPortNumber = iff(isnotempty(port_dst), toint(port_dst), int(null))\n    | where (isnull(starttime) or TimeGenerated>=starttime)\n      and (isnull(endtime) or TimeGenerated<=endtime)\n      and not(disabled)\n      and (array_length(hostname_has_any) == 0 or DvcHostname has_any (tostring(hostname_has_any)))\n      and (array_length(dvcaction) == 0)\n      and (eventresult == \"*\" or eventresult == EventResult)\n      and (array_length(ip_any)==0 or has_any_ipv4_prefix(ip_src,ip_any) or has_any_ipv4_prefix(ip_dst ,ip_any))\n      and (isnull(dstportnumber) or (DstPortNumber == dstportnumber))\n    | extend EventCount = toint(1)\n    | extend EventStartTime = timestamp\n    | extend EventEndTime = TimeGenerated\n    | extend EventType = \"NetworkSession\"\n    | extend EventProduct = \"OSAG Firewall\"\n    | extend EventVendor = \"Open Systems\"\n    | extend EventSchema = \"NetworkSession\"\n    | extend EventSchemaVersion = \"0.2.6\"\n    | extend EventResultDetails = \"Unknown\"\n    | extend EventSeverity = \"Informational\"\n    | extend Dvc = DvcHostname\n    | extend DstIpAddr = ip_dst\n    | extend DstZone = zone_dst\n    | extend Dst = DstIpAddr\n    | extend SrcIpAddr = ip_src\n    | extend SrcPortNumber = iff(isnotempty(port_src), toint(port_src), int(null))\n    | extend SrcZone = zone_src\n    | extend Src = SrcIpAddr\n    | extend IpAddr = SrcIpAddr\n    | extend\n      temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any),\n      temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n    | extend ASimMatchingIpAddr = case(\n        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\", // match not requested: probably most common case\n                          (temp_isSrcMatch and temp_isDstMatch), \"Both\", // has to be checked before the individual\n                          temp_isSrcMatch, \"SrcIpAddr\",\n                          temp_isDstMatch, \"DstIpAddr\",\n                          \"No match\")\n    | project-away temp*\n    | where ASimMatchingIpAddr != \"No match\"\n    | project\n      DvcHostname,\n      EventResult,\n      DstPortNumber,\n      EventCount,\n      EventStartTime,\n      EventEndTime,\n      EventType,\n      EventProduct,\n      EventVendor,\n      EventSchema,\n      EventSchemaVersion,\n      EventResultDetails,\n      EventSeverity,\n      Dvc,\n      DstIpAddr,\n      DstZone,\n      Dst,\n      SrcIpAddr,\n      SrcPortNumber,\n      SrcZone,\n      Src,\n      IpAddr,\n      ASimMatchingIpAddr\n  };\n  parser (\n  starttime=starttime, \n  endtime=endtime, \n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n  dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \n  ipaddr_has_any_prefix=ipaddr_has_any_prefix, \n  dstportnumber=dstportnumber, \n  hostname_has_any=hostname_has_any, \n  dvcaction=dvcaction,\n  eventresult=eventresult,\n  disabled=disabled\n  )\n",
                "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string=''*'',disabled:bool=False",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
              "dependsOn": [
                "[variables('parserObject3')._parserId3]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'FirewallASIMFilterParser')]",
                "contentId": "[variables('parserObject3').parserContentId3]",
                "kind": "Parser",
                "version": "[variables('parserObject3').parserVersion3]",
                "source": {
                  "name": "OpenSystems",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "OpenSystems",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "OpenSystems",
                  "email": "support@opensystems.com",
                  "tier": "Partner",
                  "link": "https://www.opensystems.com/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "contentKind": "Parser",
        "displayName": "ASIM Parser for OpenSystems Firewall logs",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject3').parserContentId3,'-', '1.0.0')))]",
        "version": "[variables('parserObject3').parserVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject3')._parserName3]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "ASIM Parser for OpenSystems Firewall logs",
        "category": "OpenSystemsParser",
        "functionAlias": "FirewallASIMFilterParser",
        "query": "let parser = (\n  starttime:datetime=datetime(null),\n  endtime:datetime=datetime(null),\n  srcipaddr_has_any_prefix:dynamic=dynamic([]),\n  dstipaddr_has_any_prefix:dynamic=dynamic([]),\n  ipaddr_has_any_prefix:dynamic=dynamic([]),\n  dstportnumber:int=int(null),\n  hostname_has_any:dynamic=dynamic([]),\n  dvcaction:dynamic=dynamic([]),\n  eventresult:string='*',\n  disabled:bool=false\n  )\n  {\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);\n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\n  let ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \n  OSAGFirewallLogs_CL\n    | extend DvcHostname = host_name\n    | extend EventResult = iff(action in (\"DROP\", \"REJECT\"), \"Failure\", \"Success\")\n    | extend DstPortNumber = iff(isnotempty(port_dst), toint(port_dst), int(null))\n    | where (isnull(starttime) or TimeGenerated>=starttime)\n      and (isnull(endtime) or TimeGenerated<=endtime)\n      and not(disabled)\n      and (array_length(hostname_has_any) == 0 or DvcHostname has_any (tostring(hostname_has_any)))\n      and (array_length(dvcaction) == 0)\n      and (eventresult == \"*\" or eventresult == EventResult)\n      and (array_length(ip_any)==0 or has_any_ipv4_prefix(ip_src,ip_any) or has_any_ipv4_prefix(ip_dst ,ip_any))\n      and (isnull(dstportnumber) or (DstPortNumber == dstportnumber))\n    | extend EventCount = toint(1)\n    | extend EventStartTime = timestamp\n    | extend EventEndTime = TimeGenerated\n    | extend EventType = \"NetworkSession\"\n    | extend EventProduct = \"OSAG Firewall\"\n    | extend EventVendor = \"Open Systems\"\n    | extend EventSchema = \"NetworkSession\"\n    | extend EventSchemaVersion = \"0.2.6\"\n    | extend EventResultDetails = \"Unknown\"\n    | extend EventSeverity = \"Informational\"\n    | extend Dvc = DvcHostname\n    | extend DstIpAddr = ip_dst\n    | extend DstZone = zone_dst\n    | extend Dst = DstIpAddr\n    | extend SrcIpAddr = ip_src\n    | extend SrcPortNumber = iff(isnotempty(port_src), toint(port_src), int(null))\n    | extend SrcZone = zone_src\n    | extend Src = SrcIpAddr\n    | extend IpAddr = SrcIpAddr\n    | extend\n      temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any),\n      temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\n    | extend ASimMatchingIpAddr = case(\n        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\", // match not requested: probably most common case\n                          (temp_isSrcMatch and temp_isDstMatch), \"Both\", // has to be checked before the individual\n                          temp_isSrcMatch, \"SrcIpAddr\",\n                          temp_isDstMatch, \"DstIpAddr\",\n                          \"No match\")\n    | project-away temp*\n    | where ASimMatchingIpAddr != \"No match\"\n    | project\n      DvcHostname,\n      EventResult,\n      DstPortNumber,\n      EventCount,\n      EventStartTime,\n      EventEndTime,\n      EventType,\n      EventProduct,\n      EventVendor,\n      EventSchema,\n      EventSchemaVersion,\n      EventResultDetails,\n      EventSeverity,\n      Dvc,\n      DstIpAddr,\n      DstZone,\n      Dst,\n      SrcIpAddr,\n      SrcPortNumber,\n      SrcZone,\n      Src,\n      IpAddr,\n      ASimMatchingIpAddr\n  };\n  parser (\n  starttime=starttime, \n  endtime=endtime, \n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n  dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \n  ipaddr_has_any_prefix=ipaddr_has_any_prefix, \n  dstportnumber=dstportnumber, \n  hostname_has_any=hostname_has_any, \n  dvcaction=dvcaction,\n  eventresult=eventresult,\n  disabled=disabled\n  )\n",
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string=''*'',disabled:bool=False",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject3')._parserId3,'/'))))]",
      "dependsOn": [
        "[variables('parserObject3')._parserId3]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'FirewallASIMFilterParser')]",
        "contentId": "[variables('parserObject3').parserContentId3]",
        "kind": "Parser",
        "version": "[variables('parserObject3').parserVersion3]",
        "source": {
          "kind": "Solution",
          "name": "OpenSystems",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "OpenSystems",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "OpenSystems",
          "email": "support@opensystems.com",
          "tier": "Partner",
          "link": "https://www.opensystems.com/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject4').parserTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ProxyASIMParser Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject4').parserVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject4')._parserName4]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "ASIM Parser for OpenSystems Proxy logs",
                "category": "OpenSystemsParser",
                "functionAlias": "ProxyASIMParser",
                "query": "let parser = () {\n  OSAGProxyLogs_CL\n      | extend tmp = iff(url matches regex @\"^https?\\:\\/\\/|ftp\\:\\/\\/\", url, strcat(\"http://\", url))\n      | extend tmp2 = parse_url(tmp)\n      | extend host = tostring(tmp2.Host)\n      | extend port = tostring(tmp2.Port)\n      | project-away tmp, tmp2\n      | extend EventCount = toint(1)\n      | extend EventStartTime = timestamp\n      | extend EventEndTime = TimeGenerated\n      | extend EventType = \"HTTPsession\"\n      | extend EventResult = iff(toint(client_response_status) < 400, \"Success\", \"Failure\") \n      | extend EventResultDetails = tostring(client_response_status)\n      | extend EventProduct = \"OSAG Proxy\"\n      | extend EventVendor = \"Open Systems\"\n      | extend EventSchema = \"WebSession\"\n      | extend EventSchemaVersion = \"0.2.6\"\n      | extend DvcHostname = tostring(host_id_d)\n      | extend Dvc = DvcHostname\n      | extend Url = tostring(url)\n      | extend HttpRequestMethod = tostring(http_method)\n      | extend HttpStatusCode = EventResultDetails\n      | extend HttpContentType = tostring(content_type)\n      | extend HttpReferrer = tostring(referer_s)\n      | extend HttpUserAgent = tostring(user_agent)\n      | extend UserAgent = HttpUserAgent\n      | extend HttpHost = tostring(host)\n      | extend NetworkDuration = toint(duration)\n      | extend Duration = NetworkDuration\n      | extend DstBytes = tolong(server_response_size)\n      | extend SrcBytes = tolong(client_request_size)\n      | extend DstIpAddr = tostring(server_ip)\n      | extend Dst = DstIpAddr\n      | extend DstPortNumber = toint(port)\n      | extend SrcIpAddr = tostring(client_ip)\n      | extend Src = SrcIpAddr\n      | extend DvcOriginalAction = tostring(url_filter_action)\n      | extend DvcAction = case(\n                              url_filter_action == \"allow\", \"Allow\",\n                              url_filter_action == \"whitelist\", \"Allow\",\n                              url_filter_action == \"deny\", \"Drop\",\n                              \"Allow\"\n                          )\n      | project\n          EventCount,\n          EventStartTime,\n          EventEndTime,\n          EventType,\n          EventResult,\n          EventResultDetails,\n          EventProduct,\n          EventVendor,\n          EventSchema,\n          EventSchemaVersion,\n          DvcHostname,\n          Dvc,\n          Url,\n          HttpRequestMethod,\n          HttpStatusCode,\n          HttpContentType,\n          HttpReferrer,\n          HttpUserAgent,\n          UserAgent,\n          HttpHost,\n          NetworkDuration,\n          Duration,\n          DstBytes,\n          SrcBytes,\n          DstIpAddr,\n          Dst,\n          DstPortNumber,\n          SrcIpAddr,\n          Src,\n          DvcOriginalAction,\n          DvcAction\n};\nparser\n",
                "functionParameters": "",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject4')._parserId4,'/'))))]",
              "dependsOn": [
                "[variables('parserObject4')._parserId4]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ProxyASIMParser')]",
                "contentId": "[variables('parserObject4').parserContentId4]",
                "kind": "Parser",
                "version": "[variables('parserObject4').parserVersion4]",
                "source": {
                  "name": "OpenSystems",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "OpenSystems",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "OpenSystems",
                  "email": "support@opensystems.com",
                  "tier": "Partner",
                  "link": "https://www.opensystems.com/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject4').parserContentId4]",
        "contentKind": "Parser",
        "displayName": "ASIM Parser for OpenSystems Proxy logs",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject4').parserContentId4,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject4').parserContentId4,'-', '1.0.0')))]",
        "version": "[variables('parserObject4').parserVersion4]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject4')._parserName4]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "ASIM Parser for OpenSystems Proxy logs",
        "category": "OpenSystemsParser",
        "functionAlias": "ProxyASIMParser",
        "query": "let parser = () {\n  OSAGProxyLogs_CL\n      | extend tmp = iff(url matches regex @\"^https?\\:\\/\\/|ftp\\:\\/\\/\", url, strcat(\"http://\", url))\n      | extend tmp2 = parse_url(tmp)\n      | extend host = tostring(tmp2.Host)\n      | extend port = tostring(tmp2.Port)\n      | project-away tmp, tmp2\n      | extend EventCount = toint(1)\n      | extend EventStartTime = timestamp\n      | extend EventEndTime = TimeGenerated\n      | extend EventType = \"HTTPsession\"\n      | extend EventResult = iff(toint(client_response_status) < 400, \"Success\", \"Failure\") \n      | extend EventResultDetails = tostring(client_response_status)\n      | extend EventProduct = \"OSAG Proxy\"\n      | extend EventVendor = \"Open Systems\"\n      | extend EventSchema = \"WebSession\"\n      | extend EventSchemaVersion = \"0.2.6\"\n      | extend DvcHostname = tostring(host_id_d)\n      | extend Dvc = DvcHostname\n      | extend Url = tostring(url)\n      | extend HttpRequestMethod = tostring(http_method)\n      | extend HttpStatusCode = EventResultDetails\n      | extend HttpContentType = tostring(content_type)\n      | extend HttpReferrer = tostring(referer_s)\n      | extend HttpUserAgent = tostring(user_agent)\n      | extend UserAgent = HttpUserAgent\n      | extend HttpHost = tostring(host)\n      | extend NetworkDuration = toint(duration)\n      | extend Duration = NetworkDuration\n      | extend DstBytes = tolong(server_response_size)\n      | extend SrcBytes = tolong(client_request_size)\n      | extend DstIpAddr = tostring(server_ip)\n      | extend Dst = DstIpAddr\n      | extend DstPortNumber = toint(port)\n      | extend SrcIpAddr = tostring(client_ip)\n      | extend Src = SrcIpAddr\n      | extend DvcOriginalAction = tostring(url_filter_action)\n      | extend DvcAction = case(\n                              url_filter_action == \"allow\", \"Allow\",\n                              url_filter_action == \"whitelist\", \"Allow\",\n                              url_filter_action == \"deny\", \"Drop\",\n                              \"Allow\"\n                          )\n      | project\n          EventCount,\n          EventStartTime,\n          EventEndTime,\n          EventType,\n          EventResult,\n          EventResultDetails,\n          EventProduct,\n          EventVendor,\n          EventSchema,\n          EventSchemaVersion,\n          DvcHostname,\n          Dvc,\n          Url,\n          HttpRequestMethod,\n          HttpStatusCode,\n          HttpContentType,\n          HttpReferrer,\n          HttpUserAgent,\n          UserAgent,\n          HttpHost,\n          NetworkDuration,\n          Duration,\n          DstBytes,\n          SrcBytes,\n          DstIpAddr,\n          Dst,\n          DstPortNumber,\n          SrcIpAddr,\n          Src,\n          DvcOriginalAction,\n          DvcAction\n};\nparser\n",
        "functionParameters": "",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject4')._parserId4,'/'))))]",
      "dependsOn": [
        "[variables('parserObject4')._parserId4]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ProxyASIMParser')]",
        "contentId": "[variables('parserObject4').parserContentId4]",
        "kind": "Parser",
        "version": "[variables('parserObject4').parserVersion4]",
        "source": {
          "kind": "Solution",
          "name": "OpenSystems",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "OpenSystems",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "OpenSystems",
          "email": "support@opensystems.com",
          "tier": "Partner",
          "link": "https://www.opensystems.com/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserObject5').parserTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ProxyASIMParserFilter Data Parser with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserObject5').parserVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('parserObject5')._parserName5]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "ASIM Parser for OpenSystems Proxy logs",
                "category": "OpenSystemsParser",
                "functionAlias": "ProxyASIMFilterParser",
                "query": "let parser=(\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null),\n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \n  ipaddr_has_any_prefix:dynamic=dynamic([]), \n  url_has_any:dynamic=dynamic([]),\n  httpuseragent_has_any:dynamic=dynamic([]),\n  eventresultdetails_in:dynamic=dynamic([]),\n  eventresultdetails_has_any:dynamic=dynamic([]),\n  eventresult:string='*',\n  disabled:bool=false\n  )\n  {\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);\n  OSAGProxyLogs_CL\n  | extend Url = tostring(url)\n  | extend HttpUserAgent = tostring(user_agent)\n  | extend EventResultDetails = tostring(client_response_status)\n  | extend EventResult = iff(toint(client_response_status) < 400, \"Success\", \"Failure\")\n  | extend SrcIpAddr = tostring(client_ip)\n  | extend DstIpAddr = tostring(server_ip)\n  | where not(disabled)\n      and (isnull(starttime) or TimeGenerated >= starttime)\n      and (isnull(endtime) or TimeGenerated <= endtime)\n      and (array_length(url_has_any) == 0 or Url has_any (url_has_any))\n      and (array_length(httpuseragent_has_any) == 0 or HttpUserAgent has_any(httpuseragent_has_any))\n      and (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in))\n      and (eventresult == '*' or EventResult =~ eventresult)\n  | extend temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any) , temp_DstMatch=has_any_ipv4_prefix(DstIpAddr,ipaddr_has_any_prefix)\n  | extend ASimMatchingIpAddr=case(\n                                array_length(src_or_any) == 0 ,\"-\",\n                                temp_SrcMatch and temp_DstMatch, \"Both\",\n                                temp_SrcMatch, \"SrcIpAddr\",\n                                temp_DstMatch, \"DstIpAddr\",\n                                \"No match\"\n                            )\n  | where ASimMatchingIpAddr != \"No match\"\n  | extend tmp = iff(url matches regex @\"^https?\\:\\/\\/|ftp\\:\\/\\/\", url, strcat(\"http://\", url))\n  | extend tmp2 = parse_url(tmp)\n  | extend host = tostring(tmp2.Host)\n  | extend port = tostring(tmp2.Port)\n  | project-away tmp, tmp2, temp_*\n  | extend EventCount = toint(1)\n  | extend EventStartTime = timestamp\n  | extend EventEndTime = TimeGenerated\n  | extend EventType = \"HTTPsession\"\n  | extend EventProduct = \"OSAG Proxy\"\n  | extend EventVendor = \"Open Systems\"\n  | extend EventSchema = \"WebSession\"\n  | extend EventSchemaVersion = \"0.2.6\"\n  | extend DvcHostname = tostring(host_id_d)\n  | extend Dvc = DvcHostname\n  | extend HttpRequestMethod = tostring(http_method)\n  | extend HttpStatusCode = EventResultDetails\n  | extend HttpContentType = tostring(content_type)\n  | extend HttpReferrer = tostring(referer_s)\n  | extend UserAgent = HttpUserAgent\n  | extend HttpHost = tostring(host)\n  | extend NetworkDuration = toint(duration)\n  | extend Duration = NetworkDuration\n  | extend DstBytes = tolong(server_response_size)\n  | extend SrcBytes = tolong(client_request_size)\n  | extend Dst = DstIpAddr\n  | extend DstPortNumber = toint(port)\n  | extend Src = SrcIpAddr\n  | extend DvcOriginalAction = tostring(url_filter_action)\n  | extend DvcAction = case(\n                          url_filter_action == \"allow\", \"Allow\",\n                          url_filter_action == \"whitelist\", \"Allow\",\n                          url_filter_action == \"deny\", \"Drop\",\n                          \"Allow\"\n                      )\n  | project\n      EventCount,\n      EventStartTime,\n      EventEndTime,\n      EventType,\n      EventProduct,\n      EventVendor,\n      EventSchema,\n      EventSchemaVersion,\n      DvcHostname,\n      Dvc,\n      HttpRequestMethod,\n      HttpStatusCode,\n      HttpContentType,\n      HttpReferrer,\n      UserAgent,\n      HttpHost,\n      NetworkDuration,\n      Duration,\n      DstBytes,\n      SrcBytes,\n      Dst,\n      DstPortNumber,\n      Src,\n      DvcOriginalAction,\n      DvcAction,\n      ASimMatchingIpAddr,\n      Url,\n      HttpUserAgent,\n      EventResult,\n      EventResultDetails,\n      SrcIpAddr,\n      DstIpAddr\n  };\nparser (\n  starttime=starttime, \n  endtime=endtime, \n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n  ipaddr_has_any_prefix=ipaddr_has_any_prefix, \n  url_has_any=url_has_any, \n  httpuseragent_has_any=httpuseragent_has_any, \n  eventresultdetails_in=eventresultdetails_in,\n  eventresultdetails_has_any=eventresultdetails_has_any, \n  eventresult=eventresult, disabled=disabled\n)\n",
                "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),url_has_any:dynamic=dynamic([]),httpuseragent_has_any:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresultdetails_has_any:dynamic=dynamic([]),eventresult:string=''*'',disabled:bool=False",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": ""
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject5')._parserId5,'/'))))]",
              "dependsOn": [
                "[variables('parserObject5')._parserId5]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ProxyASIMFilterParser')]",
                "contentId": "[variables('parserObject5').parserContentId5]",
                "kind": "Parser",
                "version": "[variables('parserObject5').parserVersion5]",
                "source": {
                  "name": "OpenSystems",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "OpenSystems",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "OpenSystems",
                  "email": "support@opensystems.com",
                  "tier": "Partner",
                  "link": "https://www.opensystems.com/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('parserObject5').parserContentId5]",
        "contentKind": "Parser",
        "displayName": "ASIM Parser for OpenSystems Proxy logs",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject5').parserContentId5,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('parserObject5').parserContentId5,'-', '1.0.0')))]",
        "version": "[variables('parserObject5').parserVersion5]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('parserObject5')._parserName5]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "ASIM Parser for OpenSystems Proxy logs",
        "category": "OpenSystemsParser",
        "functionAlias": "ProxyASIMFilterParser",
        "query": "let parser=(\n  starttime:datetime=datetime(null), \n  endtime:datetime=datetime(null),\n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \n  ipaddr_has_any_prefix:dynamic=dynamic([]), \n  url_has_any:dynamic=dynamic([]),\n  httpuseragent_has_any:dynamic=dynamic([]),\n  eventresultdetails_in:dynamic=dynamic([]),\n  eventresultdetails_has_any:dynamic=dynamic([]),\n  eventresult:string='*',\n  disabled:bool=false\n  )\n  {\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);\n  OSAGProxyLogs_CL\n  | extend Url = tostring(url)\n  | extend HttpUserAgent = tostring(user_agent)\n  | extend EventResultDetails = tostring(client_response_status)\n  | extend EventResult = iff(toint(client_response_status) < 400, \"Success\", \"Failure\")\n  | extend SrcIpAddr = tostring(client_ip)\n  | extend DstIpAddr = tostring(server_ip)\n  | where not(disabled)\n      and (isnull(starttime) or TimeGenerated >= starttime)\n      and (isnull(endtime) or TimeGenerated <= endtime)\n      and (array_length(url_has_any) == 0 or Url has_any (url_has_any))\n      and (array_length(httpuseragent_has_any) == 0 or HttpUserAgent has_any(httpuseragent_has_any))\n      and (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in))\n      and (eventresult == '*' or EventResult =~ eventresult)\n  | extend temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any) , temp_DstMatch=has_any_ipv4_prefix(DstIpAddr,ipaddr_has_any_prefix)\n  | extend ASimMatchingIpAddr=case(\n                                array_length(src_or_any) == 0 ,\"-\",\n                                temp_SrcMatch and temp_DstMatch, \"Both\",\n                                temp_SrcMatch, \"SrcIpAddr\",\n                                temp_DstMatch, \"DstIpAddr\",\n                                \"No match\"\n                            )\n  | where ASimMatchingIpAddr != \"No match\"\n  | extend tmp = iff(url matches regex @\"^https?\\:\\/\\/|ftp\\:\\/\\/\", url, strcat(\"http://\", url))\n  | extend tmp2 = parse_url(tmp)\n  | extend host = tostring(tmp2.Host)\n  | extend port = tostring(tmp2.Port)\n  | project-away tmp, tmp2, temp_*\n  | extend EventCount = toint(1)\n  | extend EventStartTime = timestamp\n  | extend EventEndTime = TimeGenerated\n  | extend EventType = \"HTTPsession\"\n  | extend EventProduct = \"OSAG Proxy\"\n  | extend EventVendor = \"Open Systems\"\n  | extend EventSchema = \"WebSession\"\n  | extend EventSchemaVersion = \"0.2.6\"\n  | extend DvcHostname = tostring(host_id_d)\n  | extend Dvc = DvcHostname\n  | extend HttpRequestMethod = tostring(http_method)\n  | extend HttpStatusCode = EventResultDetails\n  | extend HttpContentType = tostring(content_type)\n  | extend HttpReferrer = tostring(referer_s)\n  | extend UserAgent = HttpUserAgent\n  | extend HttpHost = tostring(host)\n  | extend NetworkDuration = toint(duration)\n  | extend Duration = NetworkDuration\n  | extend DstBytes = tolong(server_response_size)\n  | extend SrcBytes = tolong(client_request_size)\n  | extend Dst = DstIpAddr\n  | extend DstPortNumber = toint(port)\n  | extend Src = SrcIpAddr\n  | extend DvcOriginalAction = tostring(url_filter_action)\n  | extend DvcAction = case(\n                          url_filter_action == \"allow\", \"Allow\",\n                          url_filter_action == \"whitelist\", \"Allow\",\n                          url_filter_action == \"deny\", \"Drop\",\n                          \"Allow\"\n                      )\n  | project\n      EventCount,\n      EventStartTime,\n      EventEndTime,\n      EventType,\n      EventProduct,\n      EventVendor,\n      EventSchema,\n      EventSchemaVersion,\n      DvcHostname,\n      Dvc,\n      HttpRequestMethod,\n      HttpStatusCode,\n      HttpContentType,\n      HttpReferrer,\n      UserAgent,\n      HttpHost,\n      NetworkDuration,\n      Duration,\n      DstBytes,\n      SrcBytes,\n      Dst,\n      DstPortNumber,\n      Src,\n      DvcOriginalAction,\n      DvcAction,\n      ASimMatchingIpAddr,\n      Url,\n      HttpUserAgent,\n      EventResult,\n      EventResultDetails,\n      SrcIpAddr,\n      DstIpAddr\n  };\nparser (\n  starttime=starttime, \n  endtime=endtime, \n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \n  ipaddr_has_any_prefix=ipaddr_has_any_prefix, \n  url_has_any=url_has_any, \n  httpuseragent_has_any=httpuseragent_has_any, \n  eventresultdetails_in=eventresultdetails_in,\n  eventresultdetails_has_any=eventresultdetails_has_any, \n  eventresult=eventresult, disabled=disabled\n)\n",
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),url_has_any:dynamic=dynamic([]),httpuseragent_has_any:dynamic=dynamic([]),eventresultdetails_in:dynamic=dynamic([]),eventresultdetails_has_any:dynamic=dynamic([]),eventresult:string=''*'',disabled:bool=False",
        "version": 2,
        "tags": [
          {
            "name": "description",
            "value": ""
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('parserObject5')._parserId5,'/'))))]",
      "dependsOn": [
        "[variables('parserObject5')._parserId5]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'ProxyASIMFilterParser')]",
        "contentId": "[variables('parserObject5').parserContentId5]",
        "kind": "Parser",
        "version": "[variables('parserObject5').parserVersion5]",
        "source": {
          "kind": "Solution",
          "name": "OpenSystems",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "OpenSystems",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "OpenSystems",
          "email": "support@opensystems.com",
          "tier": "Partner",
          "link": "https://www.opensystems.com/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "OpenSystems data connector with template version 3.0.0",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "OpenSystems Logstash Connector (using Azure Functions)",
                  "publisher": "OpenSystems",
                  "descriptionMarkdown": "This data connector deploys a Logstash instance to collect logs from your OpenSystems environment via Event Hub and ingest them into Azure Sentinel.",
                  "graphQueries": [
                    {
                      "metricName": "Total ZTNA logs received",
                      "legend": "OSAGZtnaLogs_CL",
                      "baseQuery": "OSAGZtnaLogs_CL"
                    },
                    {
                      "metricName": "Total Firewall logs received",
                      "legend": "OSAGFirewallLogs_CL",
                      "baseQuery": "OSAGFirewallLogs_CL"
                    },
                    {
                      "metricName": "Total Authentication logs received",
                      "legend": "OSAGAuthenticationLogs_CL",
                      "baseQuery": "OSAGAuthenticationLogs_CL"
                    },
                    {
                      "metricName": "Total Proxy logs received",
                      "legend": "OSAGProxyLogs_CL",
                      "baseQuery": "OSAGProxyLogs_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Raw ZTNA logs",
                      "query": "OSAGZtnaLogs_CL | take 100"
                    },
                    {
                      "description": "View normalized ZTNA events (ASIM Authentication)",
                      "query": "OpenSystemsImZTNA | take 100"
                    },
                    {
                      "description": "Raw Firewall logs",
                      "query": "OSAGFirewallLogs_CL | take 100"
                    },
                    {
                      "description": "View normalized Firewall network sessions (ASIM NetworkSession)",
                      "query": "OpenSystemsImNetworkSessionFirewall | take 100"
                    },
                    {
                      "description": "Raw Authentication logs",
                      "query": "OSAGAuthenticationLogs_CL | take 100"
                    },
                    {
                      "description": "View normalized Authentication events (ASIM Authentication)",
                      "query": "OpenSystemsImAuthentication | take 100"
                    },
                    {
                      "description": "Raw Proxy logs",
                      "query": "OSAGProxyLogs_CL | take 100"
                    },
                    {
                      "description": "View normalized Proxy network events (ASIM NetworkSession/HTTP)",
                      "query": "OpenSystemsImNetworkSessionProxy | take 100"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "OSAGZtnaLogs_CL",
                      "lastDataReceivedQuery": "OSAGZtnaLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project LastLogReceived"
                    },
                    {
                      "name": "OSAGFirewallLogs_CL",
                      "lastDataReceivedQuery": "OSAGFirewallLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project LastLogReceived"
                    },
                    {
                      "name": "OSAGAuthenticationLogs_CL",
                      "lastDataReceivedQuery": "OSAGAuthenticationLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project LastLogReceived"
                    },
                    {
                      "name": "OSAGProxyLogs_CL",
                      "lastDataReceivedQuery": "OSAGProxyLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project LastLogReceived"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "OSAGZtnaLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project IsConnected = LastLogReceived > ago(1d)",
                        "OSAGFirewallLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project IsConnected = LastLogReceived > ago(1d)",
                        "OSAGAuthenticationLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project IsConnected = LastLogReceived > ago(1d)",
                        "OSAGProxyLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project IsConnected = LastLogReceived > ago(1d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/solutions",
                        "permissionsDisplayText": "read permission is required.",
                        "providerDisplayName": "Solution",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "read": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Azure Container Apps, DCRs, and DCEs",
                        "description": "Permissions to deploy Azure Container Apps, Managed Environments, Data Collection Rules (DCRs), and Data Collection Endpoints (DCEs) are required. This is typically covered by having the 'Contributor' role on the subscription or resource group."
                      },
                      {
                        "name": "Role Assignment Permissions",
                        "description": "Permissions to create role assignments (specifically 'Monitoring Metrics Publisher' on DCRs) are required for the deploying user or service principal."
                      },
                      {
                        "name": "Required Credentials for ARM Template",
                        "description": "During deployment, you will need to provide: Event Hub endpoint and connection string, and Service Principal credentials (Client ID, Client Secret, Object/Principal ID)."
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": "Ensure you have the following information and permissions before proceeding: \n1. Event Hub Endpoint and Connection String. \n2. Service Principal credentials (Client ID, Client Secret, Object/Principal ID). \n3. Permissions to deploy Azure Container Apps, Managed Environments, Data Collection Rules (DCRs), Data Collection Endpoints (DCEs), and create Role Assignments (typically 'Contributor' role on the subscription or resource group).",
                      "title": "STEP 1: Prerequisites"
                    },
                    {
                      "description": "Deploy the ARM template to set up the Logstash container instance, data collection rule, and associated resources.\n\n1. Click the **Deploy to Azure** button below. This will take you to the Azure portal.\n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-OpenSystemsLogstash-azuredeploy)\n\n2. In the Azure portal, select your desired **Subscription**, **Resource Group**, and **Region**.\n3. Provide the required parameters, including those gathered in the prerequisites step (Event Hub details, Service Principal credentials, etc.), when prompted by the deployment wizard.\n4. Review the terms and click **Review + create**, then **Create** to start the deployment.",
                      "title": "STEP 2: Deploy the Connector"
                    },
                    {
                      "description": "After successful deployment: \n1. Verify that the Azure Container App running the Logstash instance is in a 'Running' state. \n2. Check the `OSAGZtnaLogs_CL`, `OSAGFirewallLogs_CL`, `OSAGAuthenticationLogs_CL`, and `OSAGProxyLogs_CL` tables in your Log Analytics workspace for incoming data. It may take some time for logs to appear after initial setup. \n3. Use the sample queries provided in the 'Next Steps' tab of this data connector page to view and analyze your logs.",
                      "title": "STEP 3: Post-Deployment Verification"
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "OpenSystems",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "OpenSystems",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "OpenSystems",
                  "email": "support@opensystems.com",
                  "tier": "Partner",
                  "link": "https://www.opensystems.com/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "OpenSystems Logstash Connector (using Azure Functions)",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "OpenSystems",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "OpenSystems",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "OpenSystems",
          "email": "support@opensystems.com",
          "tier": "Partner",
          "link": "https://www.opensystems.com/support"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "OpenSystems Logstash Connector (using Azure Functions)",
          "publisher": "OpenSystems",
          "descriptionMarkdown": "This data connector deploys a Logstash instance to collect logs from your OpenSystems environment via Event Hub and ingest them into Azure Sentinel.",
          "graphQueries": [
            {
              "metricName": "Total ZTNA logs received",
              "legend": "OSAGZtnaLogs_CL",
              "baseQuery": "OSAGZtnaLogs_CL"
            },
            {
              "metricName": "Total Firewall logs received",
              "legend": "OSAGFirewallLogs_CL",
              "baseQuery": "OSAGFirewallLogs_CL"
            },
            {
              "metricName": "Total Authentication logs received",
              "legend": "OSAGAuthenticationLogs_CL",
              "baseQuery": "OSAGAuthenticationLogs_CL"
            },
            {
              "metricName": "Total Proxy logs received",
              "legend": "OSAGProxyLogs_CL",
              "baseQuery": "OSAGProxyLogs_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "OSAGZtnaLogs_CL",
              "lastDataReceivedQuery": "OSAGZtnaLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project LastLogReceived"
            },
            {
              "name": "OSAGFirewallLogs_CL",
              "lastDataReceivedQuery": "OSAGFirewallLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project LastLogReceived"
            },
            {
              "name": "OSAGAuthenticationLogs_CL",
              "lastDataReceivedQuery": "OSAGAuthenticationLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project LastLogReceived"
            },
            {
              "name": "OSAGProxyLogs_CL",
              "lastDataReceivedQuery": "OSAGProxyLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project LastLogReceived"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "OSAGZtnaLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project IsConnected = LastLogReceived > ago(1d)",
                "OSAGFirewallLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project IsConnected = LastLogReceived > ago(1d)",
                "OSAGAuthenticationLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project IsConnected = LastLogReceived > ago(1d)",
                "OSAGProxyLogs_CL | summarize LastLogReceived = max(TimeGenerated) | project IsConnected = LastLogReceived > ago(1d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Raw ZTNA logs",
              "query": "OSAGZtnaLogs_CL | take 100"
            },
            {
              "description": "View normalized ZTNA events (ASIM Authentication)",
              "query": "OpenSystemsImZTNA | take 100"
            },
            {
              "description": "Raw Firewall logs",
              "query": "OSAGFirewallLogs_CL | take 100"
            },
            {
              "description": "View normalized Firewall network sessions (ASIM NetworkSession)",
              "query": "OpenSystemsImNetworkSessionFirewall | take 100"
            },
            {
              "description": "Raw Authentication logs",
              "query": "OSAGAuthenticationLogs_CL | take 100"
            },
            {
              "description": "View normalized Authentication events (ASIM Authentication)",
              "query": "OpenSystemsImAuthentication | take 100"
            },
            {
              "description": "Raw Proxy logs",
              "query": "OSAGProxyLogs_CL | take 100"
            },
            {
              "description": "View normalized Proxy network events (ASIM NetworkSession/HTTP)",
              "query": "OpenSystemsImNetworkSessionProxy | take 100"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/solutions",
                "permissionsDisplayText": "read permission is required.",
                "providerDisplayName": "Solution",
                "scope": "Workspace",
                "requiredPermissions": {
                  "read": true
                }
              }
            ],
            "customs": [
              {
                "name": "Azure Container Apps, DCRs, and DCEs",
                "description": "Permissions to deploy Azure Container Apps, Managed Environments, Data Collection Rules (DCRs), and Data Collection Endpoints (DCEs) are required. This is typically covered by having the 'Contributor' role on the subscription or resource group."
              },
              {
                "name": "Role Assignment Permissions",
                "description": "Permissions to create role assignments (specifically 'Monitoring Metrics Publisher' on DCRs) are required for the deploying user or service principal."
              },
              {
                "name": "Required Credentials for ARM Template",
                "description": "During deployment, you will need to provide: Event Hub endpoint and connection string, and Service Principal credentials (Client ID, Client Secret, Object/Principal ID)."
              }
            ]
          },
          "instructionSteps": [
            {
              "description": "Ensure you have the following information and permissions before proceeding: \n1. Event Hub Endpoint and Connection String. \n2. Service Principal credentials (Client ID, Client Secret, Object/Principal ID). \n3. Permissions to deploy Azure Container Apps, Managed Environments, Data Collection Rules (DCRs), Data Collection Endpoints (DCEs), and create Role Assignments (typically 'Contributor' role on the subscription or resource group).",
              "title": "STEP 1: Prerequisites"
            },
            {
              "description": "Deploy the ARM template to set up the Logstash container instance, data collection rule, and associated resources.\n\n1. Click the **Deploy to Azure** button below. This will take you to the Azure portal.\n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-OpenSystemsLogstash-azuredeploy)\n\n2. In the Azure portal, select your desired **Subscription**, **Resource Group**, and **Region**.\n3. Provide the required parameters, including those gathered in the prerequisites step (Event Hub details, Service Principal credentials, etc.), when prompted by the deployment wizard.\n4. Review the terms and click **Review + create**, then **Create** to start the deployment.",
              "title": "STEP 2: Deploy the Connector"
            },
            {
              "description": "After successful deployment: \n1. Verify that the Azure Container App running the Logstash instance is in a 'Running' state. \n2. Check the `OSAGZtnaLogs_CL`, `OSAGFirewallLogs_CL`, `OSAGAuthenticationLogs_CL`, and `OSAGProxyLogs_CL` tables in your Log Analytics workspace for incoming data. It may take some time for logs to appear after initial setup. \n3. Use the sample queries provided in the 'Next Steps' tab of this data connector page to view and analyze your logs.",
              "title": "STEP 3: Post-Deployment Verification"
            }
          ],
          "id": "[variables('_uiConfigId1')]"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "OpenSystems",
        "publisherDisplayName": "OpenSystems",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/OpenSystems/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>This solution integrates OpenSystems Logs-API with Microsoft Sentinel, enabling customers to ingest security logs and leverage them for threat detection and response. It includes parsers to normalize the data and supports various security monitoring use cases.</p>\n<p><strong>Data Connectors:</strong> 1, <strong>Parsers:</strong> 5</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Solutions/OpenSystems/Images/opensystems_logo.png\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "OpenSystems",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "OpenSystems",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "OpenSystems",
          "email": "support@opensystems.com",
          "tier": "Partner",
          "link": "https://www.opensystems.com/support"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject1').parserContentId1]",
              "version": "[variables('parserObject1').parserVersion1]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject2').parserContentId2]",
              "version": "[variables('parserObject2').parserVersion2]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject3').parserContentId3]",
              "version": "[variables('parserObject3').parserVersion3]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject4').parserContentId4]",
              "version": "[variables('parserObject4').parserVersion4]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('parserObject5').parserContentId5]",
              "version": "[variables('parserObject5').parserVersion5]"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            }
          ]
        },
        "firstPublishDate": "2025-05-12",
        "providers": [
          "OpenSystems"
        ],
        "categories": {
          "domains": [
            "Security - Threat Protection",
            "Security - Network Security"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
