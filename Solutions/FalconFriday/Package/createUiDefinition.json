{
  "$schema": "https://schema.management.azure.com/schemas/0.1.2-preview/CreateUIDefinition.MultiVm.json#",
  "handler": "Microsoft.Azure.CreateUIDef",
  "version": "0.1.2-preview",
  "parameters": {
    "config": {
      "isWizard": false,
      "basics": {
        "description": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/falconforce_logo.svg\"width=\"75px\"height=\"75px\">\n\n**Note:** Please refer to the following before installing the solution: \n\n• Review the solution [Release Notes](https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/FalconFriday/ReleaseNotes.md)\n\n • There may be [known issues](https://aka.ms/sentinelsolutionsknownissues) pertaining to this Solution, please refer to them before installing.\n\n[FalconFriday](https://github.com/FalconForceTeam/FalconFriday/blob/master/README.md) is a blog post series by FalconForce providing the community with free detection content for various attacks seen and executed in the wild by FalconForce.\n\n**Analytic Rules:** 30\n\n[Learn more about Microsoft Sentinel](https://aka.ms/azuresentinel) | [Learn more about Solutions](https://aka.ms/azuresentinelsolutionsdoc)",
        "subscription": {
          "resourceProviders": [
            "Microsoft.OperationsManagement/solutions",
            "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "Microsoft.Insights/workbooks",
            "Microsoft.Logic/workflows"
          ]
        },
        "location": {
          "metadata": {
            "hidden": "Hiding location, we get it from the log analytics workspace"
          },
          "visible": false
        },
        "resourceGroup": {
          "allowExisting": true
        }
      }
    },
    "basics": [
      {
        "name": "getLAWorkspace",
        "type": "Microsoft.Solutions.ArmApiControl",
        "toolTip": "This filters by workspaces that exist in the Resource Group selected",
        "condition": "[greater(length(resourceGroup().name),0)]",
        "request": {
          "method": "GET",
          "path": "[concat(subscription().id,'/providers/Microsoft.OperationalInsights/workspaces?api-version=2020-08-01')]"
        }
      },
      {
        "name": "workspace",
        "type": "Microsoft.Common.DropDown",
        "label": "Workspace",
        "placeholder": "Select a workspace",
        "toolTip": "This dropdown will list only workspace that exists in the Resource Group selected",
        "constraints": {
          "allowedValues": "[map(filter(basics('getLAWorkspace').value, (filter) => contains(toLower(filter.id), toLower(resourceGroup().name))), (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.name, '\"}')))]",
          "required": true
        },
        "visible": true
      }
    ],
    "steps": [
      {
        "name": "analytics",
        "label": "Analytics",
        "subLabel": {
          "preValidation": "Configure the analytics",
          "postValidation": "Done"
        },
        "bladeTitle": "Analytics",
        "elements": [
          {
            "name": "analytics-text",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "text": "This solution installs the following analytic rule templates. After installing the solution, create and enable analytic rules in Manage solution view."
            }
          },
          {
            "name": "analytics-link",
            "type": "Microsoft.Common.TextBlock",
            "options": {
              "link": {
                "label": "Learn more",
                "uri": "https://docs.microsoft.com/azure/sentinel/tutorial-detect-threats-custom?WT.mc_id=Portal-Microsoft_Azure_CreateUIDef"
              }
            }
          },
          {
            "name": "analytic1",
            "type": "Microsoft.Common.Section",
            "label": "ASR Bypassing Writing Executable Content",
            "elements": [
              {
                "name": "analytic1-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "The query checks for any file which has been created/written by an Office application and shortly after renamed to one of the deny-listed \"executable extensions\" which are text files. (e.g. ps1, .js, .vbs)."
                }
              }
            ]
          },
          {
            "name": "analytic2",
            "type": "Microsoft.Common.Section",
            "label": "Microsoft Entra ID Rare UserAgent App Sign-in",
            "elements": [
              {
                "name": "analytic2-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query establishes a baseline of the type of UserAgent (i.e. browser, office application, etc) that is typically used for a particular application by looking back for a number of days. \nIt then searches the current day for any deviations from this pattern, i.e. types of UserAgents not seen before in combination with this application."
                }
              }
            ]
          },
          {
            "name": "analytic3",
            "type": "Microsoft.Common.Section",
            "label": "Microsoft Entra ID UserAgent OS Missmatch",
            "elements": [
              {
                "name": "analytic3-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query extracts the operating system from the UserAgent header and compares this to the DeviceDetail information present in Microsoft Entra ID."
                }
              }
            ]
          },
          {
            "name": "analytic4",
            "type": "Microsoft.Common.Section",
            "label": "Component Object Model Hijacking - Vault7 trick",
            "elements": [
              {
                "name": "analytic4-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This detection looks for the very specific value of \"Attribute\" in the \"ShellFolder\" CLSID of a COM object. This value (0xf090013d) seems to only link back to this specific persistence method. \nThe blog post linked here (https://www.ired.team/offensive-security/code-execution/forcing-iexplore.exe-to-load-a-malicious-dll-via-com-abuse) provides more background on the meaning of this value."
                }
              }
            ]
          },
          {
            "name": "analytic5",
            "type": "Microsoft.Common.Section",
            "label": "Certified Pre-Owned - TGTs requested with certificate authentication",
            "elements": [
              {
                "name": "analytic5-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query identifies someone using machine certificates to request Kerberos Ticket Granting Tickets (TGTs)."
                }
              }
            ]
          },
          {
            "name": "analytic6",
            "type": "Microsoft.Common.Section",
            "label": "Certified Pre-Owned - backup of CA private key - rule 1",
            "elements": [
              {
                "name": "analytic6-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query identifies someone that performs a read operation of they CA key from the file."
                }
              }
            ]
          },
          {
            "name": "analytic7",
            "type": "Microsoft.Common.Section",
            "label": "Certified Pre-Owned - backup of CA private key - rule 2",
            "elements": [
              {
                "name": "analytic7-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query identifies someone that performs a backup of they CA key."
                }
              }
            ]
          },
          {
            "name": "analytic8",
            "type": "Microsoft.Common.Section",
            "label": "Ingress Tool Transfer - Certutil",
            "elements": [
              {
                "name": "analytic8-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This detection addresses most of the known ways to utilize this binary for malicious/unintended purposes. \nIt attempts to accommodate for most detection evasion techniques, like commandline obfuscation and binary renaming."
                }
              }
            ]
          },
          {
            "name": "analytic9",
            "type": "Microsoft.Common.Section",
            "label": "Access Token Manipulation - Create Process with Token",
            "elements": [
              {
                "name": "analytic9-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query detects the use of the 'runas' command and checks whether the account used to elevate privileges isn't the user's own admin account. \nAdditionally, it will match this event to the logon events - to check whether it has been successful as well as augment the event with the new SID."
                }
              }
            ]
          },
          {
            "name": "analytic10",
            "type": "Microsoft.Common.Section",
            "label": "DCOM Lateral Movement",
            "elements": [
              {
                "name": "analytic10-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This detection looks for cases of close-time proximity between incoming network traffic on RPC/TCP, followed by the creation of a DCOM object, followed by the creation of a child process of the DCOM object. \nThe query first identifies incoming network traffic over RPC/TCP, followed by the creation of a DCOM object (process) within 2 seconds, followed by the creation of a child process of this DCOM object."
                }
              }
            ]
          },
          {
            "name": "analytic11",
            "type": "Microsoft.Common.Section",
            "label": "Hijack Execution Flow - DLL Side-Loading",
            "elements": [
              {
                "name": "analytic11-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This detection tries to identify all DLLs loaded by \"high integrity\" processes and cross-checks the DLL paths against FileCreate/FileModify events of the same DLL by a medium integrity process.\nOf course, we need to do some magic to filter out false positives as much as possible. So any FileCreate/FileModify done by \"NT Authoriy\\System\" and the \"RID 500\" users aren't interesting.\nAlso, we only want to see the FileCreate/FileModify actions which are performed with a default or limited token elevation. If done with a full elevated token, the user is apparently admin already."
                }
              }
            ]
          },
          {
            "name": "analytic12",
            "type": "Microsoft.Common.Section",
            "label": "Disable or Modify Windows Defender",
            "elements": [
              {
                "name": "analytic12-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This detection watches the commandline logs for known commands that are used to disable the Defender AV. This is based on research performed by @olafhartong on a large sample of malware for varying purposes. \nNote that this detection is imperfect and is only meant to serve as basis for building a more resilient detection rule. Make the detection more resilient, currently the order of parameters matters. You don't want that for a production rule. \nSee blogpost (https://medium.com/falconforce/falconfriday-av-manipulation-0xff0e-67ed4387f9ab?source=friends_link&sk=3c7c499797bbb4d74879e102ef3ecf8f) for more resilience considerations. The current approach can easily be bypassed by not using the powershell.exe executable. \nConsider adding more ways to detect this behavior."
                }
              }
            ]
          },
          {
            "name": "analytic13",
            "type": "Microsoft.Common.Section",
            "label": "Detect .NET runtime being loaded in JScript for code execution",
            "elements": [
              {
                "name": "analytic13-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query detects .NET being loaded from wscript or cscript to run .NET code, such as cactustorch and sharpshooter.\nAll based on the DotNetToJScript by James Foreshaw documented here https://github.com/tyranid/DotNetToJScript."
                }
              }
            ]
          },
          {
            "name": "analytic14",
            "type": "Microsoft.Common.Section",
            "label": "Excessive share permissions",
            "elements": [
              {
                "name": "analytic14-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "The query searches for event 5143, which is triggered when a share is created or changed and includes de share permissions.\nFirst it checks to see if this is a whitelisted share for the system (e.g. domaincontroller netlogon, printserver print$ etc.).\nThe share permissions are then checked against 'allow' rule (A) for a number of well known overly permissive groups, like all users, guests, authenticated users etc.\nIf these are found, an alert is raised so the share creation may be audited.\nNote: this rule only checks for changed permissions, to prevent repeat alerts if for example a comment is changed, but the permissions are not altered."
                }
              }
            ]
          },
          {
            "name": "analytic15",
            "type": "Microsoft.Common.Section",
            "label": "Expired access credentials being used in Azure",
            "elements": [
              {
                "name": "analytic15-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query searches for logins with an expired access credential (for example an expired cookie). It then matches the IP address from which the expired credential access occurred with the IP addresses of successful logins.\nIf there are logins with expired credentials, but no successful logins from an IP, this might indicate an attacker has copied the authentication cookie and is re-using it on another machine."
                }
              }
            ]
          },
          {
            "name": "analytic16",
            "type": "Microsoft.Common.Section",
            "label": "Match Legitimate Name or Location - 2",
            "elements": [
              {
                "name": "analytic16-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Attackers often match or approximate the name or location of legitimate files to avoid detection rules that are based trust of on certain operating system processes.\nThis query detects mismatches in the parent-child relationship of core operating system processes to uncover different masquerading attempts."
                }
              }
            ]
          },
          {
            "name": "analytic17",
            "type": "Microsoft.Common.Section",
            "label": "Office ASR rule triggered from browser spawned office process.",
            "elements": [
              {
                "name": "analytic17-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "The attacker sends a spearphishing email to a user. The email contains a link which points to a website that eventually presents the user a download of an MS Office document. This document contains a malicious macro. The macro triggers one of the ASR rules. \nThis detection looks for Office ASR violations triggered by an Office document opened from a browser.\nNote: be aware that you need to have the proper ASR rules enabled for this detection to work."
                }
              }
            ]
          },
          {
            "name": "analytic18",
            "type": "Microsoft.Common.Section",
            "label": "Suspicious Process Injection from Office application",
            "elements": [
              {
                "name": "analytic18-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query detects process injections using CreateRemoteThread, QueueUserAPC or SetThread context APIs, originating from an Office process (only Word/Excel/PowerPoint)that might contains macros. Performing process injection from a macro is a common technique by attackers to escape out of the Office process into something longer running."
                }
              }
            ]
          },
          {
            "name": "analytic19",
            "type": "Microsoft.Common.Section",
            "label": "Oracle suspicious command execution",
            "elements": [
              {
                "name": "analytic19-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "The query searches process creation events that are indicative of an attacker spawning OS commands from an Oracle database."
                }
              }
            ]
          },
          {
            "name": "analytic20",
            "type": "Microsoft.Common.Section",
            "label": "Password Spraying",
            "elements": [
              {
                "name": "analytic20-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query detects a password spraying attack, where a single machine has performed a large number of failed login attempts, with a large number of different accounts. \nFor each account, the attacker uses just a few attempts to prevent account lockout. This query uses the DeviceLogonEvents per machine to detect a password spraying attacks. \nThe machine against which the password spraying is performed (can be DC, a server or even an endpoint) needs to be enrolled in Microsoft Defender for Endpoint."
                }
              }
            ]
          },
          {
            "name": "analytic21",
            "type": "Microsoft.Common.Section",
            "label": "Beacon Traffic Based on Common User Agents Visiting Limited Number of Domains",
            "elements": [
              {
                "name": "analytic21-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query searches web proxy logs for a specific type of beaconing behavior by joining a number of sources together: \n- Traffic by actual web browsers - by looking at traffic generated by a UserAgent that looks like a browser and is used by multiple users to visit a large number of domains.\n- Users that make requests using one of these actual browsers, but only to a small set of domains, none of which are common domains.\n- The traffic is beacon-like; meaning that it occurs during many different hours of the day (i.e. periodic)."
                }
              }
            ]
          },
          {
            "name": "analytic22",
            "type": "Microsoft.Common.Section",
            "label": "Remote Desktop Protocol - SharpRDP",
            "elements": [
              {
                "name": "analytic22-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This detection monitors for the behavior that SharpRDP exhibits on the target system. The most relevant is leveraging taskmgr.exe to gain elevated execution, which means that taskmgr.exe is creating unexpected child processes."
                }
              }
            ]
          },
          {
            "name": "analytic23",
            "type": "Microsoft.Common.Section",
            "label": "Rename System Utilities",
            "elements": [
              {
                "name": "analytic23-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "Attackers often use LOLBINs that are renamed to avoid detection rules that are based on filenames.\nThis rule detects renamed LOLBINs by first searching for all the known SHA1 hashes of the LOLBINs in your DeviceProcessEvents. This list is then used as reference to find other files executed which have a name that doesn't match the original filename. \nThis query is really heavy on resources. Use it with care."
                }
              }
            ]
          },
          {
            "name": "analytic24",
            "type": "Microsoft.Common.Section",
            "label": "SMB/Windows Admin Shares",
            "elements": [
              {
                "name": "analytic24-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query is based on detecting incoming RPC/TCP on the SCM, followed by the start of a child process of services.exe. Remotely interacting with the SCM triggers the RPC/TCP traffic on services.exe, and the creation of the child processes is a result of starting the service. \nThe query might look intimidating given its size. That's why we've commented the query per logic block to walk you through the details."
                }
              }
            ]
          },
          {
            "name": "analytic25",
            "type": "Microsoft.Common.Section",
            "label": "Suspicious named pipes",
            "elements": [
              {
                "name": "analytic25-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query looks for Named Pipe events that either contain one of the known IOCs or make use of patterns that can be linked to CobaltStrike usage."
                }
              }
            ]
          },
          {
            "name": "analytic26",
            "type": "Microsoft.Common.Section",
            "label": "Suspicious parentprocess relationship - Office child processes.",
            "elements": [
              {
                "name": "analytic26-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "The attacker sends a spearphishing email to a user. The email contains a link, which points to a website that eventually presents the user a download of an MS Office document. This document contains a malicious macro. The macro spawns a new child process providing initial access. This detection looks for suspicious parent-process chains starting with a browser which spawns an Office application which spawns something else."
                }
              }
            ]
          },
          {
            "name": "analytic27",
            "type": "Microsoft.Common.Section",
            "label": "Trusted Developer Utilities Proxy Execution",
            "elements": [
              {
                "name": "analytic27-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This detection looks at process executions - in some cases with specific command line attributes to filter a lot of common noise."
                }
              }
            ]
          },
          {
            "name": "analytic28",
            "type": "Microsoft.Common.Section",
            "label": "Detecting UAC bypass - elevated COM interface",
            "elements": [
              {
                "name": "analytic28-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query identifies processes spawned with high integrity from dllhost.exe with a command line that contains one of three specific CLSID GUIDs."
                }
              }
            ]
          },
          {
            "name": "analytic29",
            "type": "Microsoft.Common.Section",
            "label": "Detecting UAC bypass - modify Windows Store settings",
            "elements": [
              {
                "name": "analytic29-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query identifies modification a specific registry key and then launching wsreset.exe that resets the Windows Store settings."
                }
              }
            ]
          },
          {
            "name": "analytic30",
            "type": "Microsoft.Common.Section",
            "label": "Detecting UAC bypass - ChangePK and SLUI registry tampering",
            "elements": [
              {
                "name": "analytic30-text",
                "type": "Microsoft.Common.TextBlock",
                "options": {
                  "text": "This query identifies setting a registry key under HKCU, launching slui.exe and then ChangePK.exe."
                }
              }
            ]
          }
        ]
      }
    ],
    "outputs": {
      "workspace-location": "[first(map(filter(basics('getLAWorkspace').value, (filter) => and(contains(toLower(filter.id), toLower(resourceGroup().name)),equals(filter.name,basics('workspace')))), (item) => item.location))]",
      "location": "[location()]",
      "workspace": "[basics('workspace')]"
    }
  }
}
