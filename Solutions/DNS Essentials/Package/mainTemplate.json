{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for DNS Essentials"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "DNS Solution Workbook",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    }
  },
  "variables": {
    "email": "support@microsoft.com",
    "_email": "[variables('email')]",
    "_solutionName": "DNS Essentials",
    "_solutionVersion": "3.0.3",
    "solutionId": "azuresentinel.azure-sentinel-solution-dns-domain",
    "_solutionId": "[variables('solutionId')]",
    "workbookVersion1": "1.0.0",
    "workbookContentId1": "DNSSolutionWorkbook",
    "workbookId1": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId1'))]",
    "workbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId1'))))]",
    "_workbookContentId1": "[variables('workbookContentId1')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_workbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','wb','-', uniqueString(concat(variables('_solutionId'),'-','Workbook','-',variables('_workbookContentId1'),'-', variables('workbookVersion1'))))]",
    "analyticRuleObject1": {
      "analyticRuleVersion1": "1.0.2",
      "_analyticRulecontentId1": "02f23312-1a33-4390-8b80-f7cd4df4dea0",
      "analyticRuleId1": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '02f23312-1a33-4390-8b80-f7cd4df4dea0')]",
      "analyticRuleTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('02f23312-1a33-4390-8b80-f7cd4df4dea0')))]",
      "_analyticRulecontentProductId1": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','02f23312-1a33-4390-8b80-f7cd4df4dea0','-', '1.0.2')))]"
    },
    "analyticRuleObject2": {
      "analyticRuleVersion2": "1.0.2",
      "_analyticRulecontentId2": "4ab8b09e-3c23-4974-afbe-7e653779eb2b",
      "analyticRuleId2": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '4ab8b09e-3c23-4974-afbe-7e653779eb2b')]",
      "analyticRuleTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('4ab8b09e-3c23-4974-afbe-7e653779eb2b')))]",
      "_analyticRulecontentProductId2": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','4ab8b09e-3c23-4974-afbe-7e653779eb2b','-', '1.0.2')))]"
    },
    "analyticRuleObject3": {
      "analyticRuleVersion3": "1.0.2",
      "_analyticRulecontentId3": "cf687598-5a2c-46f8-81c8-06b15ed489b1",
      "analyticRuleId3": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'cf687598-5a2c-46f8-81c8-06b15ed489b1')]",
      "analyticRuleTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('cf687598-5a2c-46f8-81c8-06b15ed489b1')))]",
      "_analyticRulecontentProductId3": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','cf687598-5a2c-46f8-81c8-06b15ed489b1','-', '1.0.2')))]"
    },
    "analyticRuleObject4": {
      "analyticRuleVersion4": "1.0.3",
      "_analyticRulecontentId4": "5b8344eb-fa28-4ac3-bcff-bc19d5d63089",
      "analyticRuleId4": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '5b8344eb-fa28-4ac3-bcff-bc19d5d63089')]",
      "analyticRuleTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('5b8344eb-fa28-4ac3-bcff-bc19d5d63089')))]",
      "_analyticRulecontentProductId4": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','5b8344eb-fa28-4ac3-bcff-bc19d5d63089','-', '1.0.3')))]"
    },
    "analyticRuleObject5": {
      "analyticRuleVersion5": "1.0.2",
      "_analyticRulecontentId5": "01191239-274e-43c9-b154-3a042692af06",
      "analyticRuleId5": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '01191239-274e-43c9-b154-3a042692af06')]",
      "analyticRuleTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('01191239-274e-43c9-b154-3a042692af06')))]",
      "_analyticRulecontentProductId5": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','01191239-274e-43c9-b154-3a042692af06','-', '1.0.2')))]"
    },
    "analyticRuleObject6": {
      "analyticRuleVersion6": "1.0.2",
      "_analyticRulecontentId6": "89ba52fa-96a7-4653-829a-ca49bb13336c",
      "analyticRuleId6": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '89ba52fa-96a7-4653-829a-ca49bb13336c')]",
      "analyticRuleTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('89ba52fa-96a7-4653-829a-ca49bb13336c')))]",
      "_analyticRulecontentProductId6": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','89ba52fa-96a7-4653-829a-ca49bb13336c','-', '1.0.2')))]"
    },
    "analyticRuleObject7": {
      "analyticRuleVersion7": "1.0.2",
      "_analyticRulecontentId7": "0fe6bde4-b215-480c-99b4-84a96edcdbd7",
      "analyticRuleId7": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '0fe6bde4-b215-480c-99b4-84a96edcdbd7')]",
      "analyticRuleTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('0fe6bde4-b215-480c-99b4-84a96edcdbd7')))]",
      "_analyticRulecontentProductId7": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','0fe6bde4-b215-480c-99b4-84a96edcdbd7','-', '1.0.2')))]"
    },
    "analyticRuleObject8": {
      "analyticRuleVersion8": "1.0.2",
      "_analyticRulecontentId8": "77b7c820-5f60-4779-8bdb-f06e21add5f1",
      "analyticRuleId8": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '77b7c820-5f60-4779-8bdb-f06e21add5f1')]",
      "analyticRuleTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('77b7c820-5f60-4779-8bdb-f06e21add5f1')))]",
      "_analyticRulecontentProductId8": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','77b7c820-5f60-4779-8bdb-f06e21add5f1','-', '1.0.2')))]"
    },
    "analyticRuleObject9": {
      "analyticRuleVersion9": "1.0.0",
      "_analyticRulecontentId9": "50b0dfb7-2c94-4eaf-a332-a5936d78c263",
      "analyticRuleId9": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '50b0dfb7-2c94-4eaf-a332-a5936d78c263')]",
      "analyticRuleTemplateSpecName9": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-ar-',uniquestring('50b0dfb7-2c94-4eaf-a332-a5936d78c263')))]",
      "_analyticRulecontentProductId9": "[concat(take(variables('_solutionId'),50),'-','ar','-', uniqueString(concat(variables('_solutionId'),'-','AnalyticsRule','-','50b0dfb7-2c94-4eaf-a332-a5936d78c263','-', '1.0.0')))]"
    },
    "SummarizeData_DNSEssentials": "SummarizeData_DNSEssentials",
    "_SummarizeData_DNSEssentials": "[variables('SummarizeData_DNSEssentials')]",
    "playbookVersion1": "1.0",
    "playbookContentId1": "SummarizeData_DNSEssentials",
    "_playbookContentId1": "[variables('playbookContentId1')]",
    "playbookId1": "[resourceId('Microsoft.Logic/workflows', variables('playbookContentId1'))]",
    "playbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pl-',uniquestring(variables('_playbookContentId1'))))]",
    "_playbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pl','-', uniqueString(concat(variables('_solutionId'),'-','Playbook','-',variables('_playbookContentId1'),'-', variables('playbookVersion1'))))]",
    "huntingQueryObject1": {
      "huntingQueryVersion1": "1.0.0",
      "_huntingQuerycontentId1": "50f0cdfb-8b01-4eca-823d-2bbe6b8a5b95",
      "huntingQueryTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('50f0cdfb-8b01-4eca-823d-2bbe6b8a5b95')))]"
    },
    "huntingQueryObject2": {
      "huntingQueryVersion2": "1.0.0",
      "_huntingQuerycontentId2": "83e70a34-d96f-419d-815b-43d1499e88ed",
      "huntingQueryTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('83e70a34-d96f-419d-815b-43d1499e88ed')))]"
    },
    "huntingQueryObject3": {
      "huntingQueryVersion3": "1.0.0",
      "_huntingQuerycontentId3": "0a8f5777-f38a-4c37-b531-411bdecef976",
      "huntingQueryTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('0a8f5777-f38a-4c37-b531-411bdecef976')))]"
    },
    "huntingQueryObject4": {
      "huntingQueryVersion4": "1.0.0",
      "_huntingQuerycontentId4": "4717929b-121d-4d90-b7ba-e3259ef16aca",
      "huntingQueryTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('4717929b-121d-4d90-b7ba-e3259ef16aca')))]"
    },
    "huntingQueryObject5": {
      "huntingQueryVersion5": "1.0.0",
      "_huntingQuerycontentId5": "5366b848-0886-439f-b312-0b94bb687d06",
      "huntingQueryTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('5366b848-0886-439f-b312-0b94bb687d06')))]"
    },
    "huntingQueryObject6": {
      "huntingQueryVersion6": "1.0.0",
      "_huntingQuerycontentId6": "b31b5d70-4c75-4a5f-8af7-6a83f6eb372c",
      "huntingQueryTemplateSpecName6": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('b31b5d70-4c75-4a5f-8af7-6a83f6eb372c')))]"
    },
    "huntingQueryObject7": {
      "huntingQueryVersion7": "1.0.0",
      "_huntingQuerycontentId7": "74e8773c-dfa9-45ca-bb60-5d767303e5b3",
      "huntingQueryTemplateSpecName7": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('74e8773c-dfa9-45ca-bb60-5d767303e5b3')))]"
    },
    "huntingQueryObject8": {
      "huntingQueryVersion8": "1.0.0",
      "_huntingQuerycontentId8": "c4956c0b-4527-406c-b135-ef44002e1e70",
      "huntingQueryTemplateSpecName8": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('c4956c0b-4527-406c-b135-ef44002e1e70')))]"
    },
    "huntingQueryObject9": {
      "huntingQueryVersion9": "1.0.0",
      "_huntingQuerycontentId9": "b35f6633-0d18-494c-a5e4-2828daf442bf",
      "huntingQueryTemplateSpecName9": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('b35f6633-0d18-494c-a5e4-2828daf442bf')))]"
    },
    "huntingQueryObject10": {
      "huntingQueryVersion10": "1.0.0",
      "_huntingQuerycontentId10": "4c8d6412-5a48-42c3-8b5e-1f29fb15c749",
      "huntingQueryTemplateSpecName10": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-hq-',uniquestring('4c8d6412-5a48-42c3-8b5e-1f29fb15c749')))]"
    },
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('workbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DNSSolutionWorkbook Workbook with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId1')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "This workbook is included as part of the DNS Essentials solution and gives a summary of analyzed DNS traffic. It also helps with threat analysis and investigating suspicious Domains, IPs and DNS traffic. DNS Essentials Solution also includes a playbook to periodically summarize the logs, thus enhancing the user experience and improving data search. For effective usage of workbook, we highly recommend enabling the summarization playbook that is provided with this solution."
              },
              "properties": {
                "displayName": "[parameters('workbook1-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## DNS Essentials\\n---\\n\\nThe 'DNS Essentials' solution provides real-time insights into activity and potential threats in your network. This solution is designed for network teams, security architects, analysts, and consultants to monitor DNS assets as well as identify and investigate DNS threats. This Workbook gives a summary of analysed DNS traffic and helps with threat analysis and investigating suspicious domains and IPs.\"},\"name\":\"text - 2\"},{\"type\":1,\"content\":{\"json\":\"The \\\"SummarizeDNSData\\\" Playbook installed along with the solution helps in summarizing the logs and improving the performance of the Workbook and data searches. This Workbook leverages the default as well as DNS summarized data tables for visualising the data. Although enabling the summarization playbook is optional, we highly recommend enabling it for a better user experience in environments with high EPS (events per second) data ingestion. Please note that summarization would require the playbook to run on a scheduled basis to utilise this workbook's capabilities.\",\"style\":\"info\"},\"name\":\"text - 1\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Subscription}\"],\"parameters\":[{\"id\":\"8b093d06-178f-4c2f-9726-88b4a0be0bf8\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DefaultSubscription_Internal\",\"type\":1,\"isRequired\":true,\"query\":\"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| take 1\\r\\n| project subscriptionId\",\"crossComponentResources\":[\"value::selected\"],\"isHiddenWhenLocked\":true,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"a477e3d3-fb34-47ad-98d8-e25df35ac13f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscription\",\"type\":6,\"query\":\"summarize by subscriptionId\\r\\n| project value = strcat(\\\"/subscriptions/\\\", subscriptionId), label = subscriptionId, selected = iff(subscriptionId =~ '{DefaultSubscription_Internal}', true, false)\\r\\n\",\"crossComponentResources\":[\"value::selected\"],\"typeSettings\":{\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"36f227e1-74b9-4d57-a49c-ab48c9d6cff3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"workspace\",\"label\":\"Workspace\",\"type\":5,\"description\":\"Select required Log Analytics Workspace\",\"query\":\"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| project id\",\"crossComponentResources\":[\"{Subscription}\"],\"typeSettings\":{\"resourceTypeFilter\":{\"microsoft.operationalinsights/workspaces\":true},\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"464786c8-5462-42a2-a134-431fbbc8cde0\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}]},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":1209600000}}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 2\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"58c1e08c-2ff8-41a4-85f0-0c399d3ef36f\",\"cellValue\":\"tabVisibility\",\"linkTarget\":\"parameter\",\"linkLabel\":\"DNS Overview\",\"subTarget\":\"overview\",\"style\":\"link\"},{\"id\":\"5251d94a-1f9c-4cbc-8c7d-e7abfd3ae88a\",\"cellValue\":\"tabVisibility\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Top Queries\",\"subTarget\":\"topQueries\",\"style\":\"link\"},{\"id\":\"a816997b-65c1-4979-a0a5-ad01e00f70b2\",\"cellValue\":\"tabVisibility\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Investigate\",\"subTarget\":\"investigate\",\"style\":\"link\"}]},\"name\":\"links - 3\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_sourceInfo_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n\\t  | extend EventProduct = strcat(EventVendor,\\\"-\\\",EventProduct)\\r\\n        | summarize Instances=tolong(count()) by EventProduct, bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_sourceInfo_CL\\r\\n        | where EventTime_t >= {TimeRange:start}\\r\\n        | where isnotempty(EventProduct_s)\\r\\n        | summarize Instances=tolong(sum(count__d)) by EventProduct=EventProduct_s, TimeGenerated=bin(EventTime_t, 6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by EventProduct, bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"Events by Source Type over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"timechart\"},\"customWidth\":\"50\",\"name\":\"query - 0\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_sourceInfo_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | summarize Instances=tolong(count()) by bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_sourceInfo_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | summarize Instances=tolong(sum(count__d)) by TimeGenerated=bin(EventTime_t,6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"DNS Events over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"areachart\"},\"customWidth\":\"50\",\"name\":\"query - 1\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\",\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_sourceInfo_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(EventType)\\r\\n        | summarize SubTypeCount=tolong(count()) by EventType\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_sourceInfo_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(EventType_s)\\r\\n        | summarize SubTypeCount=tolong(sum(count__d)) by EventType=EventType_s\\r\\n    )\\r\\n    | summarize Sum = sum(SubTypeCount) by EventType\",\"size\":0,\"title\":\"Dns events by EventType\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"piechart\"},\"customWidth\":\"25\",\"name\":\"query - 2\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_sourceInfo_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(DnsQueryTypeName)\\r\\n        | summarize QueryTypeCount=tolong(count()) by DnsQueryTypeName\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_sourceInfo_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(DnsQueryTypeName_s)\\r\\n        | summarize QueryTypeCount=tolong(sum(count__d)) by DnsQueryTypeName=DnsQueryTypeName_s\\r\\n    )\\r\\n    | summarize Sum = sum(QueryTypeCount) by DnsQueryTypeName\\r\\n    | extend DnsQueryTypeName = case(\\r\\n    DnsQueryTypeName == \\\"A\\\", \\\"IPv4 address record\\\", \\r\\n    DnsQueryTypeName == \\\"AAAA\\\", \\\"IPv6 address record\\\",\\r\\n    DnsQueryTypeName == \\\"ANY\\\", \\\"All cached records\\\",\\r\\n    DnsQueryTypeName == \\\"CNAME\\\", \\\"Canonical name record\\\",\\r\\n    DnsQueryTypeName == \\\"MX\\\", \\\"Mail exchange record\\\",\\r\\n    DnsQueryTypeName == \\\"NS\\\", \\\"Name server record\\\",\\r\\n    DnsQueryTypeName == \\\"PTR\\\", \\\"Pointer record\\\",\\r\\n    DnsQueryTypeName == \\\"SIG\\\", \\\"Signature\\\",\\r\\n    DnsQueryTypeName == \\\"SOA\\\", \\\"Start of authority record\\\",\\r\\n    DnsQueryTypeName == \\\"SRV\\\", \\\"Service locator\\\",\\r\\n    DnsQueryTypeName == \\\"TXT\\\", \\\"Text record\\\",\\r\\n    strcat('Other'))\",\"size\":0,\"title\":\"DNS events by Query Type\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"piechart\"},\"customWidth\":\"25\",\"name\":\"query - 3\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_sourceInfo_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(DnsQueryTypeName)\\r\\n        | summarize QueryTypeCount=tolong(count()) by DnsQueryTypeName, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_sourceInfo_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(DnsQueryTypeName_s)\\r\\n        | summarize QueryTypeCount=tolong(sum(count__d)) by DnsQueryTypeName=DnsQueryTypeName_s,TimeGenerated=bin(EventTime_t,6h)\\r\\n    )\\r\\n    | summarize QueryTypeCount = sum(QueryTypeCount) by DnsQueryTypeName, bin(TimeGenerated, 6h)\\r\\n    | order by TimeGenerated\",\"size\":0,\"title\":\"Query Type over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"areachart\"},\"customWidth\":\"50\",\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_sourceInfo_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('minute',10,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where (EventSubType == 'request' or EventSubType == 'response')\\r\\n        | summarize DNSEvents=tolong(count()) by EventSubType, bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_sourceInfo_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where (EventSubType_s == 'request' or EventSubType_s == 'response')\\r\\n        | summarize DNSEvents=tolong(sum(count__d)) by EventSubType=EventSubType_s, TimeGenerated=bin(EventTime_t,6h)\\r\\n    )\\r\\n    | summarize DNSEvents = sum(DNSEvents) by EventSubType, bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"DNS - Requests Vs Responses\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"linechart\"},\"customWidth\":\"50\",\"name\":\"query - 5\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(DnsQuery)\\r\\n        | distinct DnsQuery, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(DnsQuery_s)\\r\\n        | extend DnsQuery=DnsQuery_s\\r\\n        | distinct DnsQuery, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize DistinctQueries=dcount(DnsQuery) by bin(TimeGenerated, 6h)\",\"size\":1,\"title\":\"Unique domains queried over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"timechart\"},\"customWidth\":\"50\",\"name\":\"query - 6\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where EventResultDetails == 'NXDOMAIN'\\r\\n        | summarize NXDOMAINCount=tolong(count()) by bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where EventResultDetails_s == 'NXDOMAIN'\\r\\n        | summarize NXDOMAINCount=tolong(sum(count__d)) by bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize NXDOMAINCount = sum(NXDOMAINCount) by bin(TimeGenerated, 6h)\",\"size\":0,\"title\":\"Requests to non-existent domains over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"areachart\"},\"customWidth\":\"50\",\"name\":\"query - 8\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(EventResultDetails)\\r\\n        | summarize ResultCount=tolong(count()) by EventResultDetails\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(EventResultDetails_s)\\r\\n        | summarize ResultCount=tolong(sum(count__d)) by EventResultDetails=EventResultDetails_s\\r\\n    )\\r\\n    | summarize ResultCount = sum(ResultCount) by EventResultDetails\",\"size\":0,\"title\":\"DNS Events by Result type\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"piechart\"},\"customWidth\":\"50\",\"name\":\"query - 9\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"tabVisibility\",\"comparison\":\"isEqualTo\",\"value\":\"overview\"},\"name\":\"Group - DNS Overview\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet DNSData =    \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(DnsQuery)\\r\\n        | summarize DNSEvents=tolong(count()) by DnsQuery, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(DnsQuery_s)\\r\\n        | summarize DNSEvents=tolong(sum(count__d)) by DnsQuery=DnsQuery_s, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize DNSEvents = sum(DNSEvents) by DnsQuery, bin(TimeGenerated, 6h);\\r\\n    DNSData\\r\\n    | summarize TotalCount = sum(DNSEvents) by DnsQuery\\r\\n    | join kind=inner (DNSData\\r\\n    | summarize Trend=make_set(DNSEvents,1000000) by DnsQuery\\r\\n    ) on DnsQuery\\r\\n    | project DnsQuery, TotalCount, Trend\\r\\n    | order by TotalCount desc\\r\\n    | take 25\",\"size\":1,\"title\":\"Top 25 queried Domains\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"TotalCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"blue\"}}]}},\"customWidth\":\"50\",\"name\":\"query - 0\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet DNSData =    \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(SrcIpAddr)\\r\\n        | summarize Clients=tolong(count()) by SrcIpAddr, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(SrcIpAddr_s)\\r\\n        | summarize Clients=tolong(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize Clients = sum(Clients) by SrcIpAddr, bin(TimeGenerated, 6h);\\r\\n    DNSData\\r\\n    | summarize TotalCount = sum(Clients) by SrcIpAddr\\r\\n    | join kind=inner (DNSData\\r\\n    | summarize Trend=make_set(Clients,1000000) by SrcIpAddr\\r\\n    ) on SrcIpAddr\\r\\n    | project SrcIpAddr, TotalCount, Trend\\r\\n    | order by TotalCount desc\\r\\n    | take 25\",\"size\":1,\"title\":\"Top 25 Clients by events\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"TotalCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"orange\"}},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"orange\"}}]}},\"customWidth\":\"50\",\"name\":\"query - 1\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet DNSData =    \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(DnsQuery) and EventResultDetails == 'NXDOMAIN'\\r\\n        | summarize DNSEvents=tolong(count()) by DnsQuery, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(DnsQuery_s) and EventResultDetails_s == 'NXDOMAIN'\\r\\n        | summarize DNSEvents=tolong(sum(count__d)) by DnsQuery=DnsQuery_s, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize DNSEvents = sum(DNSEvents) by DnsQuery, bin(TimeGenerated, 6h);\\r\\n    DNSData\\r\\n    | summarize TotalCount = sum(DNSEvents) by DnsQuery\\r\\n    | join kind=inner (DNSData\\r\\n    | summarize Trend=make_set(DNSEvents,1000000) by DnsQuery\\r\\n    ) on DnsQuery\\r\\n    | project DnsQuery, TotalCount, Trend\\r\\n    | order by TotalCount desc\\r\\n    | take 25\",\"size\":1,\"title\":\"Top 25 DNSQueries resulting in non-existent Domains (NXDOMAIN)\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"TotalCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"purpleDark\"}},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"purpleDark\"}}]}},\"customWidth\":\"50\",\"name\":\"query - 2\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet DNSData =    \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(SrcIpAddr) and EventResultDetails == 'NXDOMAIN'\\r\\n        | summarize Clients=tolong(count()) by SrcIpAddr, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(SrcIpAddr_s) and EventResultDetails_s == 'NXDOMAIN'\\r\\n        | summarize Clients=tolong(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize Clients = sum(Clients) by SrcIpAddr, bin(TimeGenerated, 6h);\\r\\n    DNSData\\r\\n    | summarize TotalCount = sum(Clients) by SrcIpAddr\\r\\n    | join kind=inner (DNSData\\r\\n    | summarize Trend=make_set(Clients,1000000) by SrcIpAddr\\r\\n    ) on SrcIpAddr\\r\\n    | project SrcIpAddr, TotalCount, Trend\\r\\n    | order by TotalCount desc\\r\\n    | take 25\",\"size\":1,\"title\":\"Top 25 Originators for non-existent Domains (NXDOMAIN)\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"TotalCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"turquoise\"}},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"blue\"}}]}},\"customWidth\":\"50\",\"name\":\"query - 3\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Errors=dynamic([\\\"NXDOMAIN\\\", \\\"SERVFAIL\\\", \\\"REFUSED\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet DNSData =    \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(DnsQuery) and EventResultDetails in (Errors)\\r\\n        | summarize DNSEvents=tolong(count()) by DnsQuery, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(DnsQuery_s) and EventResultDetails_s in (Errors)\\r\\n        | summarize DNSEvents=tolong(sum(count__d)) by DnsQuery=DnsQuery_s, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize DNSEvents = sum(DNSEvents) by DnsQuery, bin(TimeGenerated, 6h);\\r\\n    DNSData\\r\\n    | summarize TotalCount = sum(DNSEvents) by DnsQuery\\r\\n    | join kind=inner (DNSData\\r\\n    | summarize Trend=make_set(DNSEvents,1000000) by DnsQuery\\r\\n    ) on DnsQuery\\r\\n    | project DnsQuery, TotalCount, Trend\\r\\n    | order by TotalCount desc\\r\\n    | take 25\",\"size\":1,\"title\":\"Top 25 DNSQueries resulting in errors\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"TotalCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"brown\"}},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"brown\"}}]}},\"customWidth\":\"50\",\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let Errors=dynamic([\\\"NXDOMAIN\\\", \\\"SERVFAIL\\\", \\\"REFUSED\\\"]);\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet DNSData =    \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where isnotempty(SrcIpAddr) and EventResultDetails in (Errors)\\r\\n        | summarize Clients=tolong(count()) by SrcIpAddr, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where isnotempty(SrcIpAddr_s) and EventResultDetails_s in (Errors)\\r\\n        | summarize Clients=tolong(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize Clients = sum(Clients) by SrcIpAddr, bin(TimeGenerated, 6h);\\r\\n    DNSData\\r\\n    | summarize TotalCount = sum(Clients) by SrcIpAddr\\r\\n    | join kind=inner (DNSData\\r\\n    | summarize Trend=make_set(Clients,1000000) by SrcIpAddr\\r\\n    ) on SrcIpAddr\\r\\n    | project SrcIpAddr, TotalCount, Trend\\r\\n    | order by TotalCount desc\\r\\n    | take 25\",\"size\":1,\"title\":\"Top 25 Originators for errors\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"TotalCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"magenta\"}},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"magenta\"}}]}},\"customWidth\":\"50\",\"name\":\"query - 5\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let SearchString = \\\"in-addr.arpa\\\";\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );  \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where DnsQuery has SearchString and EventResultDetails=='NOERROR'\\r\\n        | summarize ReverseLookupCount=tolong(count()) by DnsQuery, EventResultDetails\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where DnsQuery_s has SearchString and EventResultDetails_s=='NOERROR'\\r\\n        | summarize ReverseLookupCount=tolong(sum(count__d)) by DnsQuery=DnsQuery_s, EventResultDetails=EventResultDetails_s\\r\\n    )\\r\\n    | summarize ReverseLookupCount = sum(ReverseLookupCount) by DnsQuery, EventResultDetails\\r\\n    | order by ReverseLookupCount\\r\\n    | take 25\",\"size\":0,\"title\":\"Top Successful Reverse Queries by Count\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\"},\"customWidth\":\"50\",\"name\":\"query - 6\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let SearchDomain = \\\"in-addr.arpa\\\";\\r\\nlet maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );  \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where DnsQuery has SearchDomain and EventResultDetails=='NXDOMAIN'\\r\\n        | summarize ReverseLookupCount=count() by DnsQuery, EventResultDetails\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where DnsQuery_s has SearchDomain and EventResultDetails_s=='NXDOMAIN'\\r\\n        | summarize ReverseLookupCount=tolong(sum(count__d)) by DnsQuery=DnsQuery_s, EventResultDetails=EventResultDetails_s\\r\\n    )\\r\\n    | summarize ReverseLookupCount = sum(ReverseLookupCount) by DnsQuery, EventResultDetails\\r\\n    | order by ReverseLookupCount\\r\\n    | take 25\",\"size\":0,\"title\":\"Top Reverse Queries by Count to Non-Existent Domains\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"]},\"customWidth\":\"50\",\"name\":\"query - 7\",\"styleSettings\":{\"showBorder\":true}}]},\"conditionalVisibility\":{\"parameterName\":\"tabVisibility\",\"comparison\":\"isEqualTo\",\"value\":\"topQueries\"},\"name\":\"Group - Top Queries\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"cabe7893-adaf-48d4-b1b5-f212a03a2fba\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SrcIpAddr\",\"type\":1,\"description\":\"Enter the IP to be investigated\",\"isRequired\":true,\"timeContext\":{\"durationMs\":86400000},\"value\":\"*\"},{\"id\":\"879925a8-2711-41fa-b8b9-f722ae689c54\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DnsQuery\",\"type\":1,\"description\":\"Enter DNSQuery to be investigated\",\"isRequired\":true,\"timeContext\":{\"durationMs\":86400000},\"value\":\"*\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"_Im_Dns(starttime={TimeRange:start},endtime={TimeRange:end})\\r\\n| where ('{SrcIpAddr}' == '*' or (SrcIpAddr == '{SrcIpAddr}'))\\r\\nand ('{DnsQuery}' == '*' or (DnsQuery == '{DnsQuery}'))\\r\\n| summarize count() by EventProduct\",\"size\":0,\"title\":\"Data Volume from different Sources\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"piechart\"},\"customWidth\":\"25\",\"name\":\"query - 1\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery == '{DnsQuery}'))\\r\\n        | summarize Instances=tolong(count()) by bin(TimeGenerated, 6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr_s == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery_s == '{DnsQuery}'))\\r\\n        | summarize Instances=tolong(sum(count__d)) by TimeGenerated=bin(EventTime_t,6h)\\r\\n    )\\r\\n    | summarize Instances = sum(Instances) by bin(TimeGenerated, 6h)\",\"size\":0,\"title\":\"DNS Events over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"timechart\"},\"customWidth\":\"25\",\"name\":\"query - 2\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery == '{DnsQuery}'))\\r\\n        | where isnotempty(DnsQuery)\\r\\n        | distinct DnsQuery, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr_s == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery_s == '{DnsQuery}'))\\r\\n        | where isnotempty(DnsQuery_s)\\r\\n        | extend DnsQuery=DnsQuery_s\\r\\n        | distinct DnsQuery, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize DistinctQueries=dcount(DnsQuery) by bin(TimeGenerated, 6h)\",\"size\":0,\"title\":\"Unique domains queried over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"timechart\"},\"customWidth\":\"25\",\"name\":\"query - 3\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery == '{DnsQuery}'))\\r\\n        | where EventResultDetails == 'NXDOMAIN'\\r\\n        | summarize NXDOMAINCount=tolong(count()) by bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr_s == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery_s == '{DnsQuery}'))\\r\\n        | where EventResultDetails_s == 'NXDOMAIN'\\r\\n        | summarize NXDOMAINCount=tolong(sum(count__d)) by bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize NXDOMAINCount = sum(NXDOMAINCount) by bin(TimeGenerated, 6h)\",\"size\":0,\"title\":\"Requests to non-existent domains over time\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"timechart\"},\"customWidth\":\"25\",\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery == '{DnsQuery}'))\\r\\n        | where isnotempty(EventResultDetails)\\r\\n        | summarize ResultCount=tolong(count()) by EventResultDetails\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr_s == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery_s == '{DnsQuery}'))\\r\\n        | where isnotempty(EventResultDetails_s)\\r\\n        | summarize ResultCount=tolong(sum(count__d)) by EventResultDetails=EventResultDetails_s\\r\\n    )\\r\\n    | summarize ResultCount = sum(ResultCount) by EventResultDetails\",\"size\":0,\"title\":\"DNS Events by Result type\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"query - 5\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet DNSData =    \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery == '{DnsQuery}'))\\r\\n        | where isnotempty(DnsQuery)\\r\\n        | summarize DNSEvents=tolong(count()) by DnsQuery, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr_s == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery_s == '{DnsQuery}'))\\r\\n        | where isnotempty(DnsQuery_s)\\r\\n        | summarize DNSEvents=tolong(sum(count__d)) by DnsQuery=DnsQuery_s, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize DNSEvents = sum(DNSEvents) by DnsQuery, bin(TimeGenerated, 6h);\\r\\n    DNSData\\r\\n    | summarize TotalCount = sum(DNSEvents) by DnsQuery\\r\\n    | join kind=inner (DNSData\\r\\n    | summarize Trend=make_set(DNSEvents,1000000) by DnsQuery\\r\\n    ) on DnsQuery\\r\\n    | project DnsQuery, TotalCount, Trend\\r\\n    | order by TotalCount desc\\r\\n    | take 25\",\"size\":0,\"title\":\"Top 25 queried Domains\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"TotalCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"pink\"}},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"pink\"}}]}},\"customWidth\":\"33\",\"name\":\"query - 6\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet DNSData =    \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery == '{DnsQuery}'))\\r\\n        | where isnotempty(SrcIpAddr)\\r\\n        | summarize Clients=tolong(count()) by SrcIpAddr, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr_s == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery_s == '{DnsQuery}'))\\r\\n        | where isnotempty(SrcIpAddr_s)\\r\\n        | summarize Clients=tolong(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize Clients = sum(Clients) by SrcIpAddr, bin(TimeGenerated, 6h);\\r\\n    DNSData\\r\\n    | summarize TotalCount = sum(Clients) by SrcIpAddr\\r\\n    | join kind=inner (DNSData\\r\\n    | summarize Trend=make_set(Clients,1000000) by SrcIpAddr\\r\\n    ) on SrcIpAddr\\r\\n    | project SrcIpAddr, TotalCount, Trend\\r\\n    | order by TotalCount desc\\r\\n    | take 25\",\"size\":0,\"title\":\"Top 25 Clients by events\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"TotalCount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blueDark\"}},{\"columnMatch\":\"Trend\",\"formatter\":9,\"formatOptions\":{\"palette\":\"blueDark\"}}]}},\"customWidth\":\"33\",\"name\":\"query - 7\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"ThreatIntelligenceIndicator\\r\\n| where DomainName == \\\"{DnsQuery}\\\"\\r\\n| where Active == true\\r\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\r\\n| project LatestIndicatorTime, DomainName, Action, ConfidenceScore,ThreatType, ThreatSeverity, Description, ExternalIndicatorId, ExpirationDateTime, IndicatorId, TrafficLightProtocolLevel\",\"size\":0,\"title\":\"Domain Information from Threat Intelligence table\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"]},\"customWidth\":\"50\",\"name\":\"query - 8\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"ThreatIntelligenceIndicator\\r\\n// Picking up only IOC's that contain the entities we want\\r\\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\\r\\n// Taking the first non-empty value based on potential IOC match availability\\r\\n| extend TI_ipEntity = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP,EmailSourceIpAddress,\\\"\\\")\\r\\n| where TI_ipEntity=='{SrcIpAddr}' and Active == true\\r\\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\\r\\n| project LatestIndicatorTime, TI_ipEntity, Action, ConfidenceScore,ThreatType, ThreatSeverity, Description, ExternalIndicatorId, ExpirationDateTime, IndicatorId, TrafficLightProtocolLevel\",\"size\":0,\"title\":\"IP information from Threat Intelligence table\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"]},\"customWidth\":\"50\",\"name\":\"query - 9\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"SecurityAlert\\r\\n| where Entities has \\\"{SrcIpAddr}\\\" or Entities has \\\"{DnsQuery}\\\"\\r\\n| project TimeGenerated, DisplayName, AlertName, AlertSeverity, ProviderName, VendorName, SystemAlertId, StartTime, EndTime, todynamic(ExtendedProperties), Entities\",\"size\":0,\"title\":\"Security alerts with searched IP or DNS query\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"]},\"customWidth\":\"50\",\"name\":\"query - 10\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery == '{DnsQuery}'))\\r\\n        | where isnotempty(DnsQuery)\\r\\n        | extend QueryLength = strlen(DnsQuery)\\r\\n        | summarize TotalCount=tolong(count()) by QueryLength, SrcIpAddr\\r\\n        | order by QueryLength, TotalCount desc\\r\\n        | project SrcIpAddr, QueryLength, TotalCount\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr_s == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery_s == '{DnsQuery}'))\\r\\n        | where isnotempty(DnsQuery_s)\\r\\n        | extend QueryLength = strlen(DnsQuery_s)\\r\\n        | summarize TotalCount=tolong(sum(count__d)) by QueryLength, SrcIpAddr=SrcIpAddr_s\\r\\n        | order by QueryLength, TotalCount desc\\r\\n        | project SrcIpAddr, QueryLength, TotalCount\\r\\n    )\\r\\n    | summarize TotalCount = sum(TotalCount) by SrcIpAddr, QueryLength\\r\\n    | where isnotempty(SrcIpAddr)\\r\\n    | order by QueryLength, TotalCount desc\\r\\n    | take 10\\r\\n    \",\"size\":0,\"title\":\"Query length by SrcIpAddr\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"scatterchart\",\"chartSettings\":{\"showLegend\":true}},\"customWidth\":\"50\",\"name\":\"query - 11\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxSummarizedTime = toscalar (\\r\\n    union isfuzzy=true \\r\\n        (\\r\\n            DNS_Summarized_Logs_ip_CL\\r\\n                | where EventTime_t >= {TimeRange:start}\\r\\n                | summarize max_TimeGenerated=max(EventTime_t)\\r\\n                | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\\r\\n        ),\\r\\n        (\\r\\n            print({TimeRange:start})\\r\\n            | extend max_TimeGenerated = print_0\\r\\n            | project max_TimeGenerated\\r\\n        )\\r\\n        | summarize maxTimeGenerated = max(max_TimeGenerated) \\r\\n    );\\r\\nlet DNSData =    \\r\\nunion isfuzzy=true \\r\\n    (\\r\\n        _Im_Dns(starttime=todatetime(maxSummarizedTime), endtime=now())\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery == '{DnsQuery}'))\\r\\n        | where isnotempty(DnsQuery)\\r\\n        | summarize DNSEvents=tolong(count()) by DnsQuery, bin(TimeGenerated,6h)\\r\\n    ),\\r\\n    (\\r\\n        DNS_Summarized_Logs_ip_CL\\r\\n        | where TimeGenerated >= {TimeRange:start}\\r\\n        | where ('{SrcIpAddr}' == '*' or (SrcIpAddr_s == '{SrcIpAddr}'))\\r\\n            and ('{DnsQuery}' == '*' or (DnsQuery_s == '{DnsQuery}'))\\r\\n        | where isnotempty(DnsQuery_s)\\r\\n        | summarize DNSEvents=tolong(sum(count__d)) by DnsQuery=DnsQuery_s, bin(TimeGenerated=EventTime_t,6h)\\r\\n    )\\r\\n    | summarize DNSEvents = sum(DNSEvents) by DnsQuery, bin(TimeGenerated, 6h);\\r\\n    DNSData\\r\\n    //Break the domain into its parts\\r\\n    | extend DomainParts = split(DnsQuery,'.')\\r\\n    //Use the rightmost parts of the URL\\r\\n    | extend Top_Level_Domain =  strcat(DomainParts[toint(array_length(DomainParts)-2)],'.',DomainParts[toint(array_length(DomainParts)-1)])\\r\\n    //If the two right most parts are too short (e.g. \\\"co.uk\\\" or \\\"com.tr\\\", add another part\\r\\n    | extend Top_Level_Domain = iif(strlen(Top_Level_Domain)<7,strcat(DomainParts[toint(array_length(DomainParts)-3)],'.',Top_Level_Domain),Top_Level_Domain)\\r\\n    | summarize SubDomainRequestCount = toint(sum(DNSEvents)) by Top_Level_Domain, DnsQuery\\r\\n    | join kind=inner \\r\\n    (\\r\\n            DNSData\\r\\n            //Break the domain into its parts\\r\\n            | extend DomainParts = split(DnsQuery,'.')\\r\\n            //Use the rightmost parts of the URL\\r\\n            | extend Top_Level_Domain =  strcat(DomainParts[toint(array_length(DomainParts)-2)],'.',DomainParts[toint(array_length(DomainParts)-1)])\\r\\n            //If the two right most parts are too short (e.g. \\\"co.uk\\\" or \\\"com.tr\\\", add another part\\r\\n            | extend Top_Level_Domain = iif(strlen(Top_Level_Domain)<7,strcat(DomainParts[toint(array_length(DomainParts)-3)],'.',Top_Level_Domain),Top_Level_Domain)\\r\\n            | summarize DomainRequestCount = toint(sum(DNSEvents)) by Top_Level_Domain\\r\\n    ) on Top_Level_Domain\\r\\n    | extend pk = SubDomainRequestCount/todouble(DomainRequestCount)\\r\\n    //calculate entropy according to Shannon function https://en.wiktionary.org/wiki/Shannon_entropy\\r\\n    | extend h1= -log2(pk)*pk\\r\\n    | summarize SubDomainEntropy = sum(h1), DomainRequestCount = any(DomainRequestCount) ,DNSQueries=make_list(DnsQuery)  by TopLevelDomain=Top_Level_Domain\\r\\n    | order by SubDomainEntropy desc\\r\\n    | take 25\",\"size\":0,\"title\":\"Domain entropy\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{workspace}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"SubDomainEntropy\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"}},{\"columnMatch\":\"TotalSubDomains\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blueDark\"}},{\"columnMatch\":\"DNSQueries\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"75%\"}},{\"columnMatch\":\"Sub_Domain_Entropy\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"}},{\"columnMatch\":\"Total_Sub_Domains\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blueDark\"}},{\"columnMatch\":\"list_DnsQuery\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"75%\"}}]}},\"name\":\"query - 12\"}]},\"conditionalVisibility\":{\"parameterName\":\"tabVisibility\",\"comparison\":\"isEqualTo\",\"value\":\"investigate\"},\"name\":\"Group - IP Investigate\"}],\"fromTemplateId\":\"sentinel-DNSDomainSolution\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId1'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=DNSSolutionWorkbook; logoFileName=Azure_Sentinel.svg; description=This workbook is included as part of the DNS Essentials solution and gives a summary of analyzed DNS traffic. It also helps with threat analysis and investigating suspicious Domains, IPs and DNS traffic. DNS Essentials Solution also includes a playbook to periodically summarize the logs, thus enhancing the user experience and improving data search. For effective usage of workbook, we highly recommend enabling the summarization playbook that is provided with this solution.; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=1.0.0; title=DNS Solution Workbook; templateRelativePath=DNSSolutionWorkbook.json; subtitle=; provider=Microsoft}.description",
                "parentId": "[variables('workbookId1')]",
                "contentId": "[variables('_workbookContentId1')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_workbookContentId1')]",
        "contentKind": "Workbook",
        "displayName": "[parameters('workbook1-name')]",
        "contentProductId": "[variables('_workbookcontentProductId1')]",
        "id": "[variables('_workbookcontentProductId1')]",
        "version": "[variables('workbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject1').analyticRuleTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ExcessiveNXDOMAINDNSQueriesAnomalyBased_AnalyticalRules Analytics Rule with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject1').analyticRuleVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule makes use of the series decompose anomaly method to generate an alert when client requests excessive amount of DNS queries to non-existent domains. This helps in identifying possible C2 communications. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.",
                "displayName": "Detect excessive NXDOMAIN DNS queries - Anomaly based (ASIM DNS Solution)",
                "enabled": false,
                "query": "let threshold = 2.5;\nlet min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\nlet summarizationexist = (\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > ago(1d) \n      | project v = int(2)\n      ),\n      (\n      print int(1) \n      | project v = print_0\n      )\n  | summarize maxv = max(v)\n  | extend sumexist = (maxv > 1)\n  );\nlet allData = union isfuzzy=true\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(min_t), endtime=max_t)\n          | summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > min_t and EventResultDetails_s == 'NXDOMAIN'\n      | summarize Count=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, bin(EventTime=EventTime_t, 1h)\n      );\nallData\n| make-series EventCount=sum(Count) on EventTime from min_t to max_t step dt by SrcIpAddr\n| extend (anomalies, score, baseline) = series_decompose_anomalies(EventCount, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, EventCount\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(EventTime),\n  Total = tolong(EventCount)\n| where EventTime >= ago(dt)\n| where score >= threshold * 2\n| join kind=inner(_Im_Dns(responsecodename='NXDOMAIN', starttime=ago(dt), endtime=max_t)\n  | summarize DNSQueries = make_set(DnsQuery) by SrcIpAddr)\n  on SrcIpAddr\n| project-away SrcIpAddr1\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "CommandAndControl"
                ],
                "techniques": [
                  "T1568",
                  "T1008"
                ],
                "entityMappings": [
                  {
                    "entityType": "IP",
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "baseline": "baseline",
                  "DNSQueries": "DNSQueries",
                  "Total": "Total",
                  "AnomalyScore": "score"
                },
                "alertDetailsOverride": {
                  "alertDescriptionFormat": "This client is generating excessive amount of DNS queries for non-existent domains. This can be an indication of possible C2 communications.\n\nBaseline for 'NXDOMAIN' error count for this client: '{{baseline}}'\n\nCurrent 'NXDOMAIN' error count for this client: '{{Total}}'\n\nDNS queries requested by the client include:\n\n'{{DNSQueries}}'",
                  "alertDisplayNameFormat": "[Anomaly] Excessive NXDOMAIN DNS Queries has been detected from client IP: '{{SrcIpAddr}}'"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject1').analyticRuleId1,'/'))))]",
              "properties": {
                "description": "DNS Essentials Analytics Rule 1",
                "parentId": "[variables('analyticRuleObject1').analyticRuleId1]",
                "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject1').analyticRuleVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
        "contentKind": "AnalyticsRule",
        "displayName": "Detect excessive NXDOMAIN DNS queries - Anomaly based (ASIM DNS Solution)",
        "contentProductId": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "id": "[variables('analyticRuleObject1')._analyticRulecontentProductId1]",
        "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject2').analyticRuleTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ExcessiveNXDOMAINDNSQueriesStaticThresholdBased_AnalyticalRules Analytics Rule with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject2').analyticRuleVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule generates an alert when the configured threshold for DNS queries to non-existent domains is breached. This helps in identifying possible C2 communications. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.",
                "displayName": "Detect excessive NXDOMAIN DNS queries - Static threshold based (ASIM DNS Solution)",
                "enabled": false,
                "query": "let lookback = 1h;\nlet threshold = 200;\n_Im_Dns(starttime=ago(lookback), responsecodename='NXDOMAIN')\n| summarize NXDOMAINCount=count() by SrcIpAddr, bin(TimeGenerated, 15m)\n| where NXDOMAINCount > threshold\n| join kind=inner (_Im_Dns(starttime=ago(lookback), responsecodename='NXDOMAIN')\n  | summarize DNSQueries = makeset(DnsQuery) by SrcIpAddr)\n  on SrcIpAddr\n| extend NXDOMAINthreshold=threshold\n| project-away SrcIpAddr1\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "CommandAndControl"
                ],
                "techniques": [
                  "T1568",
                  "T1008"
                ],
                "entityMappings": [
                  {
                    "entityType": "IP",
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "NXDOMAINthreshold": "NXDOMAINthreshold",
                  "NXDOMAINCount": "NXDOMAINCount",
                  "DNSQueries": "DNSQueries"
                },
                "alertDetailsOverride": {
                  "alertDescriptionFormat": "Client is generating excessive amount of DNS queries for non-existent domains. This can be an indication of possible C2 communications. \n\n'NXDOMAIN' error count threshold: '{{NXDOMAINthreshold}}'\n\nCurrent 'NXDOMAIN' error count from this client: '{{NXDOMAINCount}}'\n\nDNS queries requested by the client include:\n\n'{{DNSQueries}}'",
                  "alertDisplayNameFormat": "[Static threshold] Excessive NXDOMAIN DNS Queries has been detected from client IP: '{{SrcIpAddr}}'"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject2').analyticRuleId2,'/'))))]",
              "properties": {
                "description": "DNS Essentials Analytics Rule 2",
                "parentId": "[variables('analyticRuleObject2').analyticRuleId2]",
                "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject2').analyticRuleVersion2]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
        "contentKind": "AnalyticsRule",
        "displayName": "Detect excessive NXDOMAIN DNS queries - Static threshold based (ASIM DNS Solution)",
        "contentProductId": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "id": "[variables('analyticRuleObject2')._analyticRulecontentProductId2]",
        "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject3').analyticRuleTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "MultipleErrorsReportedForSameDNSQueryAnomalyBased_AnalyticalRules Analytics Rule with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject3').analyticRuleVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule makes use of the series decompose anomaly method to generate an alert when multiple clients report errors for the same DNS query. This rule monitors DNS traffic over a period of 14 days to detect possible similar C2 communication originating from different clients. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.",
                "displayName": "Detect DNS queries reporting multiple errors from different clients - Anomaly Based (ASIM DNS Solution)",
                "enabled": false,
                "query": "let threshold = 2.5;\nlet min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\nlet Errors = dynamic(['NXDOMAIN', 'SERVFAIL', 'REFUSED']);\n// calculate avg. eps(events per second)\nlet eps = materialize (_Im_Dns | project TimeGenerated | where TimeGenerated > ago(5m) | count | extend Count = Count/300);\nlet maxSummarizedTime = toscalar (\n  union isfuzzy=true \n      (\n          DNS_Summarized_Logs_ip_CL \n              | where EventTime_t >= min_t\n              | summarize max_TimeGenerated=max(EventTime_t)\n              | extend max_TimeGenerated = datetime_add('hour',1,max_TimeGenerated)\n      ),\n      (\n          print(min_t)\n          | project max_TimeGenerated = print_0\n      )\n    | summarize maxTimeGenerated = max(max_TimeGenerated) \n  );\n  let summarizationexist = materialize(\n            union isfuzzy=true \n              (\n                  DNS_Summarized_Logs_ip_CL\n                  | where EventTime_t > ago(1d) \n                  | project v = int(2)\n              ),\n              (\n                  print int(1) \n                  | project v = print_0\n              )\n              | summarize maxv = max(v)\n              | extend sumexist = (maxv > 1)\n            );\nlet allData = union isfuzzy=true\n(\n  (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) > 1000 | join (summarizationexist) on sumexist) | join (\n  _Im_Dns(starttime=todatetime(ago(2d)), endtime=now())\n  | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)\n  | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)\n  | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n  ) on exists\n  | project-away exists, maxv, sum*\n),\n(\n  (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) between (501 .. 1000) | join (summarizationexist) on sumexist) | join (\n  _Im_Dns(starttime=todatetime(ago(3d)), endtime=now())\n  | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)\n  | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)\n  | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n  ) on exists\n  | project-away exists, maxv, sum*\n),\n(\n  (datatable(exists:int, sumexist:bool)[1,false] | where toscalar(eps) <= 500 | join (summarizationexist) on sumexist) | join (\n  _Im_Dns(starttime=todatetime(ago(4d)), endtime=now())\n  | where TimeGenerated > maxSummarizedTime and EventResultDetails in (Errors)\n  | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated,1h)\n  | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n  ) on exists\n  | project-away exists, maxv, sum*\n),\n(\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > min_t and EventResultDetails_s in (Errors)\n      | project-rename SrcIpAddr=SrcIpAddr_s, DnsQuery=DnsQuery_s, Count=count__d, EventTime=EventTime_t\n      | extend Count = toint(Count) \n);\nallData\n| make-series TotalIPCount=dcount(SrcIpAddr) on EventTime from min_t to max_t step dt by DnsQuery\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalIPCount, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, TotalIPCount\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(EventTime),\n  TotalIPs = tolong(TotalIPCount)\n| where EventTime >= ago(dt)\n| where score >= threshold * 2\n| join kind=inner(allData | where TimeGenerated>ago(dt) | summarize SrcIps = make_set(SrcIpAddr,1000) by DnsQuery) on DnsQuery\n| project-away DnsQuery1\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "CommandAndControl"
                ],
                "techniques": [
                  "T1568",
                  "T1573",
                  "T1008"
                ],
                "entityMappings": [
                  {
                    "entityType": "DNS",
                    "fieldMappings": [
                      {
                        "identifier": "DomainName",
                        "columnName": "DnsQuery"
                      }
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "baseline": "baseline",
                  "TotalIPs": "TotalIPs",
                  "SrcIps": "SrcIps",
                  "AnomalyScore": "score"
                },
                "alertDetailsOverride": {
                  "alertDescriptionFormat": "Multiple errors were detected on different clients for the same DNS query. These unsuccessful responses can be an indication of C2 communication. \n\nBaseline for total clients reporting errors for this DNS query: '{{baseline}}'\n\nCurrent count of clients reporting errors for this DNS query: '{{TotalIPs}}'\n\nClients requesting this DNS query include:\n'{{SrcIps}}'",
                  "alertDisplayNameFormat": "[Anomaly] Multiple errors for the same DNS query has been detected - '{{DnsQuery}}'"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject3').analyticRuleId3,'/'))))]",
              "properties": {
                "description": "DNS Essentials Analytics Rule 3",
                "parentId": "[variables('analyticRuleObject3').analyticRuleId3]",
                "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject3').analyticRuleVersion3]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
        "contentKind": "AnalyticsRule",
        "displayName": "Detect DNS queries reporting multiple errors from different clients - Anomaly Based (ASIM DNS Solution)",
        "contentProductId": "[variables('analyticRuleObject3')._analyticRulecontentProductId3]",
        "id": "[variables('analyticRuleObject3')._analyticRulecontentProductId3]",
        "version": "[variables('analyticRuleObject3').analyticRuleVersion3]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject4').analyticRuleTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "MultipleErrorsReportedForSameDNSQueryStaticThresholdBased_AnalyticalRules Analytics Rule with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject4').analyticRuleVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule creates an alert when multiple clients report errors for the same DNS query. This helps in identifying possible similar C2 communications originating from different clients. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.",
                "displayName": "Detect DNS queries reporting multiple errors from different clients - Static threshold based (ASIM DNS Solution)",
                "enabled": false,
                "query": "let lookback=1h;\nlet threshold = 2;\nlet errors = dynamic(['NXDOMAIN', 'SERVFAIL', 'REFUSED']); \n_Im_Dns(starttime=ago(lookback)) \n  | where EventResultDetails has_any (errors) \n  | summarize SrcIPs = make_set(SrcIpAddr, 100), Dvcs = make_set(Dvc, 100), ResourceIds = make_set(_ResourceId, 100) by DnsQuery, bin(TimeGenerated, 10min) \n  | where array_length(SrcIPs) >= threshold \n  | extend TotalIPs = array_length(SrcIPs),IPCountthreshold = threshold \n  | extend DomainName = strcat(split(DnsQuery, \".\")[1], \".\", split(DnsQuery, \".\")[2])  \n  | mv-expand SrcIPs  \n  | extend SrcIP = tostring(SrcIPs)  \n  | mv-expand Dvcs  \n  | extend Dvc = tostring(Dvcs)  \n  | mv-expand ResourceIds  \n  | extend ResourceId = tostring(ResourceIds)  \n  | extend Dvc = strcat(split(Dvc, \".\")[0])\n  | summarize Start=min(TimeGenerated), End=max(TimeGenerated) by SrcIP, Dvc, ResourceId, DnsQuery, DomainName, SrcIPs = tostring(SrcIPs), IPCountthreshold = threshold, TotalIPs\n  | extend HostName = tostring(split(Dvc, \".\")[0]), DomainIndex = toint(indexof(Dvc, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(Dvc, DomainIndex + 1), Dvc)\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "CommandAndControl"
                ],
                "techniques": [
                  "T1568",
                  "T1573",
                  "T1008"
                ],
                "entityMappings": [
                  {
                    "entityType": "DNS",
                    "fieldMappings": [
                      {
                        "identifier": "DomainName",
                        "columnName": "DnsQuery"
                      }
                    ]
                  },
                  {
                    "entityType": "IP",
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIP"
                      }
                    ]
                  },
                  {
                    "entityType": "AzureResource",
                    "fieldMappings": [
                      {
                        "identifier": "ResourceId",
                        "columnName": "ResourceId"
                      }
                    ]
                  },
                  {
                    "entityType": "Url",
                    "fieldMappings": [
                      {
                        "identifier": "Url",
                        "columnName": "DnsQuery"
                      }
                    ]
                  },
                  {
                    "entityType": "Host",
                    "fieldMappings": [
                      {
                        "identifier": "HostName",
                        "columnName": "HostName"
                      },
                      {
                        "identifier": "NTDomain",
                        "columnName": "HostNameDomain"
                      }
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "SingleAlert"
                },
                "customDetails": {
                  "TotalIPs": "TotalIPs",
                  "SrcIPs": "SrcIPs",
                  "IPCountthreshold": "IPCountthreshold"
                },
                "alertDetailsOverride": {
                  "alertDescriptionFormat": "Multiple errors were detected on different clients for the same DNS query. These unsuccessful responses can be an indication of C2 communication. \n\nThreshold for total clients reporting errors: '{{IPCountthreshold}}'\n\nCurrent count of clients reporting errors for this DNS query: '{{TotalIPs}}'\n\nClients requesting this DNSQuery include:\n\n'{{SrcIPs}}'",
                  "alertDisplayNameFormat": "[Static threshold] Multiple errors for the same DNS query has been detected - '{{DnsQuery}}'"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject4').analyticRuleId4,'/'))))]",
              "properties": {
                "description": "DNS Essentials Analytics Rule 4",
                "parentId": "[variables('analyticRuleObject4').analyticRuleId4]",
                "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject4').analyticRuleVersion4]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
        "contentKind": "AnalyticsRule",
        "displayName": "Detect DNS queries reporting multiple errors from different clients - Static threshold based (ASIM DNS Solution)",
        "contentProductId": "[variables('analyticRuleObject4')._analyticRulecontentProductId4]",
        "id": "[variables('analyticRuleObject4')._analyticRulecontentProductId4]",
        "version": "[variables('analyticRuleObject4').analyticRuleVersion4]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject5').analyticRuleTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "PotentialDGADetectedviaRepetitiveFailuresAnomalyBased_AnalyticalRules Analytics Rule with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject5').analyticRuleVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule makes use of the series decompose anomaly method to detect clients with a high NXDomain response count, which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). An alert is generated when new IP address DNS activity is identified as an outlier when compared to the baseline, indicating a recurring pattern. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.",
                "displayName": "Potential DGA(Domain Generation Algorithm) detected via Repetitive Failures - Anomaly based (ASIM DNS Solution)",
                "enabled": false,
                "query": "let threshold = 2.5;\nlet min_t = ago(14d);\nlet max_t = now();\nlet timeframe = 1d;\n// calculate avg. eps(events per second)\nlet eps = materialize (_Im_Dns\n  | project TimeGenerated\n  | where TimeGenerated > ago(5m)\n  | count\n  | extend Count = Count / 300);\nlet maxSummarizedTime = toscalar (\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL \n      | where EventTime_t >= min_t\n      | summarize max_TimeGenerated=max(EventTime_t)\n      | extend max_TimeGenerated = datetime_add('hour', 1, max_TimeGenerated)\n      ),\n      (\n      print(min_t)\n      | project max_TimeGenerated = print_0\n      )\n  | summarize maxTimeGenerated = max(max_TimeGenerated) \n  );\nlet summarizationexist = materialize(\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > ago(1d) \n      | project v = int(2)\n      ),\n      (\n      print int(1) \n      | project v = print_0\n      )\n  | summarize maxv = max(v)\n  | extend sumexist = (maxv > 1)\n  );\nlet allData = union isfuzzy=true\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) > 1000\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(ago(2d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) between (501 .. 1000)\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(ago(3d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) <= 500\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(responsecodename='NXDOMAIN', starttime=todatetime(ago(4d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by SrcIpAddr, DnsQuery, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > min_t and EventResultDetails_s == 'NXDOMAIN'\n      | project-rename\n          SrcIpAddr=SrcIpAddr_s,\n          DnsQuery=DnsQuery_s,\n          Count=count__d,\n          EventTime=EventTime_t\n      | extend Count = toint(Count)\n      );\nallData\n| make-series QueryCount=dcount(DnsQuery) on EventTime from min_t to max_t step timeframe by SrcIpAddr\n// include calculated Anomalies, Score and Baseline\n| extend (anomalies, score, baseline) = series_decompose_anomalies(QueryCount, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, QueryCount\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(EventTime),\n  Total = tolong(QueryCount)\n| where EventTime >= ago(timeframe)\n| where score >= threshold * 2\n// Join allData to include DnsQuery details\n| join kind=inner(allData\n  | where TimeGenerated >= ago(timeframe)\n  | summarize DNSQueries = make_set(DnsQuery, 1000) by SrcIpAddr)\n  on SrcIpAddr\n| project-away SrcIpAddr1\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "CommandAndControl"
                ],
                "techniques": [
                  "T1568",
                  "T1008"
                ],
                "entityMappings": [
                  {
                    "entityType": "IP",
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "baseline": "baseline",
                  "DNSQueries": "DNSQueries",
                  "Total": "Total",
                  "AnomalyScore": "score"
                },
                "alertDetailsOverride": {
                  "alertDescriptionFormat": "Client has been identified with high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). This client is found to be communicating with multiple Domains which do not exist.\n\nBaseline Domain or DNS query count from this client: '{{baseline}}'\n\nCurrent Domain or DNS query count from this client: '{{Total}}'\n\nDNS queries requested by this client inlcude: '{{DNSQueries}}'",
                  "alertDisplayNameFormat": "[Anomaly] Potential DGA (Domain Generation Algorithm) originating from client IP: '{{SrcIpAddr}}' has been detected."
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject5').analyticRuleId5,'/'))))]",
              "properties": {
                "description": "DNS Essentials Analytics Rule 5",
                "parentId": "[variables('analyticRuleObject5').analyticRuleId5]",
                "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject5').analyticRuleVersion5]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
        "contentKind": "AnalyticsRule",
        "displayName": "Potential DGA(Domain Generation Algorithm) detected via Repetitive Failures - Anomaly based (ASIM DNS Solution)",
        "contentProductId": "[variables('analyticRuleObject5')._analyticRulecontentProductId5]",
        "id": "[variables('analyticRuleObject5')._analyticRulecontentProductId5]",
        "version": "[variables('analyticRuleObject5').analyticRuleVersion5]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject6').analyticRuleTemplateSpecName6]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "PotentialDGADetectedviaRepetitiveFailuresStaticThresholdBased_AnalyticalRules Analytics Rule with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject6').analyticRuleVersion6]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule identifies clients with a high NXDomain count, which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). An alert is generated when a new IP address is seen (based on not being seen associated with NXDomain records in prior 10-day baseline period). It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.",
                "displayName": "Potential DGA(Domain Generation Algorithm) detected via Repetitive Failures - Static threshold based (ASIM DNS Solution)",
                "enabled": false,
                "query": "let threshold = 100;\nlet lookback = 10d;\nlet referenceendtime = 1d;\nlet nxDomainDnsEvents = (stime: datetime, etime: datetime) {\n  _Im_Dns(responsecodename='NXDOMAIN', starttime=stime, endtime=etime)\n  | where DnsQueryTypeName in (\"A\", \"AAAA\")\n  | where ipv4_is_match(\"127.0.0.1\", SrcIpAddr) == False\n  | where DnsQuery !contains \"/\" and DnsQuery contains \".\"\n};\nnxDomainDnsEvents (stime=ago(referenceendtime), etime=now())\n| summarize\n  StartTimeUtc = min(TimeGenerated),\n  EndTimeUtc = max(TimeGenerated),\n  DNSQueryCount=dcount(DnsQuery)\n  by SrcIpAddr\n| where DNSQueryCount > threshold\n// Filter out previously seen IPs\n| join kind=leftanti (nxDomainDnsEvents (stime=ago(lookback), etime=ago(referenceendtime))\n  | summarize DNSQueryCount=dcount(DnsQuery) by SrcIpAddr, bin(TimeGenerated,1d)\n  | where DNSQueryCount > threshold)\n  on SrcIpAddr\n// Pull out sample NXDomain responses for those remaining potentially infected IPs\n| join kind = inner (nxDomainDnsEvents (stime=ago(lookback), etime=now())\n  | summarize by DnsQuery, SrcIpAddr)\n  on SrcIpAddr\n| summarize\n  StartTimeUtc = min(StartTimeUtc),\n  EndTimeUtc = max(EndTimeUtc),\n  DNSQueries=make_list(DnsQuery, 100)\n  by SrcIpAddr, DNSQueryCount\n| extend DNSQueryThreshold=threshold\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P10D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "CommandAndControl"
                ],
                "techniques": [
                  "T1568",
                  "T1008"
                ],
                "entityMappings": [
                  {
                    "entityType": "IP",
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "DNSQueryThreshold": "DNSQueryThreshold",
                  "DNSQueries": "DNSQueries",
                  "DNSQueryCount": "DNSQueryCount"
                },
                "alertDetailsOverride": {
                  "alertDescriptionFormat": "Client has been identified with high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). This client is found to be communicating with multiple Domains which do not exist.\n\nDGA DNS query count baseline is: '{{DNSQueryThreshold}}'\n\nCurrent failed DNS query count from this client: '{{DNSQueryCount}}'\n\nDNS queries requested by this client inlcude: '{{DNSQueries}}'",
                  "alertDisplayNameFormat": "[Static threshold] Potential DGA (Domain Generation Algorithm) originating from client IP: '{{SrcIpAddr}}' has been detected."
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject6').analyticRuleId6,'/'))))]",
              "properties": {
                "description": "DNS Essentials Analytics Rule 6",
                "parentId": "[variables('analyticRuleObject6').analyticRuleId6]",
                "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject6').analyticRuleVersion6]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
        "contentKind": "AnalyticsRule",
        "displayName": "Potential DGA(Domain Generation Algorithm) detected via Repetitive Failures - Static threshold based (ASIM DNS Solution)",
        "contentProductId": "[variables('analyticRuleObject6')._analyticRulecontentProductId6]",
        "id": "[variables('analyticRuleObject6')._analyticRulecontentProductId6]",
        "version": "[variables('analyticRuleObject6').analyticRuleVersion6]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject7').analyticRuleTemplateSpecName7]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RareClientObservedWithHighReverseDNSLookupCountAnomalyBased_AnalyticalRules Analytics Rule with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject7').analyticRuleVersion7]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule makes use of the series decompose anomaly method to identify clients with high reverse DNS counts. This helps in detecting the possible initial phases of an attack, like discovery and reconnaissance. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.",
                "displayName": "Rare client observed with high reverse DNS lookup count - Anomaly based (ASIM DNS Solution)",
                "enabled": false,
                "query": "let threshold = 2.5;\nlet SearchDomain = dynamic([\"in-addr.arpa\"]);\nlet min_t = ago(14d);\nlet max_t = now();\nlet timeframe = 1d;\nlet DNSEvents=(stime: datetime, etime: datetime) {\n  _Im_Dns(starttime=stime, endtime=etime, domain_has_any=SearchDomain)\n};\nDNSEvents(stime=min_t, etime=max_t)\n| make-series QueryCount=dcount(DnsQuery) on TimeGenerated from min_t to max_t step timeframe by SrcIpAddr\n| extend (anomalies, score, baseline) = series_decompose_anomalies(QueryCount, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, TimeGenerated, QueryCount\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(TimeGenerated),\n  Total = tolong(QueryCount)\n| where EventTime >= ago(timeframe)\n| where score >= threshold * 2\n| join kind = inner (DNSEvents(stime=ago(timeframe), etime=max_t)\n  | summarize DNSQueries=make_set(DnsQuery, 1000) by SrcIpAddr)\n  on SrcIpAddr\n| project-away SrcIpAddr1\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "Reconnaissance"
                ],
                "techniques": [
                  "T1590"
                ],
                "entityMappings": [
                  {
                    "entityType": "IP",
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "baseline": "baseline",
                  "DNSQueries": "DNSQueries",
                  "Total": "Total",
                  "AnomalyScore": "score"
                },
                "alertDetailsOverride": {
                  "alertDescriptionFormat": "Client has been identified as making high reverse DNS counts which could be carrying out reconnaissance or discovery activity.\n\nReverse DNS lookup count baseline for this client: '{{baseline}}'\n\nCurrent reverse DNS lookup count by this client showing as: '{{Total}}'\n\nDNS queries requested by this client inlcude: '{{DNSQueries}}'",
                  "alertDisplayNameFormat": "[Anomaly] Rare client has been observed as making high reverse DNS lookup count  - client IP: '{{SrcIpAddr}}'"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject7').analyticRuleId7,'/'))))]",
              "properties": {
                "description": "DNS Essentials Analytics Rule 7",
                "parentId": "[variables('analyticRuleObject7').analyticRuleId7]",
                "contentId": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject7').analyticRuleVersion7]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
        "contentKind": "AnalyticsRule",
        "displayName": "Rare client observed with high reverse DNS lookup count - Anomaly based (ASIM DNS Solution)",
        "contentProductId": "[variables('analyticRuleObject7')._analyticRulecontentProductId7]",
        "id": "[variables('analyticRuleObject7')._analyticRulecontentProductId7]",
        "version": "[variables('analyticRuleObject7').analyticRuleVersion7]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject8').analyticRuleTemplateSpecName8]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "RareClientObservedWithHighReverseDNSLookupCountStaticThresholdBased_AnalyticalRules Analytics Rule with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject8').analyticRuleVersion8]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This rule identifies clients with high reverse DNS counts, which could be carrying out reconnaissance or discovery activity. This helps in detecting the possible initial phases of an attack, like discovery and reconnaissance. It utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema.",
                "displayName": "Rare client observed with high reverse DNS lookup count - Static threshold based (ASIM DNS Solution)",
                "enabled": false,
                "query": "let threshold = 10;\nlet stime = 10d;\nlet etime = 1d;\nlet SearchDomain = dynamic([\"in-addr.arpa\"]);\n_Im_Dns(starttime=ago(etime), domain_has_any=SearchDomain)\n| summarize\n  StartTimeUtc = min(TimeGenerated),\n  EndTimeUtc = max(TimeGenerated),\n  DNSQueryCount=dcount(DnsQuery)\n  by SrcIpAddr\n| where DNSQueryCount > threshold\n| project StartTimeUtc, EndTimeUtc, SrcIpAddr, DNSQueryCount \n| join kind=leftanti (_Im_Dns(starttime=ago(stime), endtime=ago(etime), domain_has_any=SearchDomain)\n  | summarize DNSQueryCount=dcount(DnsQuery) by SrcIpAddr, bin(TimeGenerated, 1d)\n  | where DNSQueryCount > threshold\n  | project SrcIpAddr, DNSQueryCount\n  )\n  on SrcIpAddr\n| join kind=inner (_Im_Dns(starttime=ago(etime), domain_has_any=SearchDomain)\n  | summarize DNSQueries=make_set(DnsQuery, 1000) by SrcIpAddr)\n  on SrcIpAddr\n| extend DNSQuerythreshold = threshold\n| project-away SrcIpAddr1\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P10D",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "Reconnaissance"
                ],
                "techniques": [
                  "T1590"
                ],
                "entityMappings": [
                  {
                    "entityType": "IP",
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                },
                "customDetails": {
                  "DNSQuerythreshold": "DNSQuerythreshold",
                  "DNSQueries": "DNSQueries",
                  "DNSQueryCount": "DNSQueryCount"
                },
                "alertDetailsOverride": {
                  "alertDescriptionFormat": "Client identified as making high reverse DNS counts which could be carrying out reconnaissance or discovery activity.\n\nReverse DNS lookup threshold is: '{{DNSQuerythreshold}}'\n\nCurrent reverse DNS lookup count from this client is : '{{DNSQueryCount}}'\n\nDNS queries requested by this client inlcude: '{{DNSQueries}}'",
                  "alertDisplayNameFormat": "[Static threshold] Rare client has been observed as making high reverse DNS lookup count  - client IP: '{{SrcIpAddr}}'"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject8').analyticRuleId8,'/'))))]",
              "properties": {
                "description": "DNS Essentials Analytics Rule 8",
                "parentId": "[variables('analyticRuleObject8').analyticRuleId8]",
                "contentId": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject8').analyticRuleVersion8]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
        "contentKind": "AnalyticsRule",
        "displayName": "Rare client observed with high reverse DNS lookup count - Static threshold based (ASIM DNS Solution)",
        "contentProductId": "[variables('analyticRuleObject8')._analyticRulecontentProductId8]",
        "id": "[variables('analyticRuleObject8')._analyticRulecontentProductId8]",
        "version": "[variables('analyticRuleObject8').analyticRuleVersion8]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('analyticRuleObject9').analyticRuleTemplateSpecName9]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "NgrokReverseProxyOnNetwork_AnalyticalRules Analytics Rule with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('analyticRuleObject9').analyticRuleVersion9]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
              "apiVersion": "2023-02-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "This detection identifies the top four Ngrok domains from DNS resolution. Ngrok reverse proxy can bypass network defense. While not inherently harmful, it has been used for malicious activities recently.",
                "displayName": "Ngrok Reverse Proxy on Network (ASIM DNS Solution)",
                "enabled": false,
                "query": "// Define a list of Ngrok domains\nlet NgrokDomains = dynamic([\"ngrok.com\", \"ngrok.io\", \"ngrok\", \"tunnel.com\", \"korgn\", \"lennut.com\"]);\n// Query the _Im_Dns function for the past 1 hour\n_Im_Dns(starttime=ago(1h))\n| where isnotempty(DnsQuery) // Filter out empty DNS queries\n| where DnsQuery has_any (NgrokDomains) // Filter DNS queries that match any of the Ngrok domains\n| summarize Starttime = min(EventStartTime),Endtime=max(EventEndTime),EventsCount=sum(EventCount),EventResults=make_set(EventResult,4) by DnsQuery, Domain, SrcIpAddr, Dvc\n// Summarize the data by Domain, DNS query, source IP address, and device Dvc\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "severity": "Medium",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [],
                "tactics": [
                  "CommandAndControl"
                ],
                "techniques": [
                  "T1572",
                  "T1090",
                  "T1102"
                ],
                "entityMappings": [
                  {
                    "entityType": "IP",
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "SrcIpAddr"
                      }
                    ]
                  },
                  {
                    "entityType": "DNS",
                    "fieldMappings": [
                      {
                        "identifier": "DomainName",
                        "columnName": "Domain"
                      }
                    ]
                  }
                ],
                "eventGroupingSettings": {
                  "aggregationKind": "AlertPerResult"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(variables('analyticRuleObject9').analyticRuleId9,'/'))))]",
              "properties": {
                "description": "DNS Essentials Analytics Rule 9",
                "parentId": "[variables('analyticRuleObject9').analyticRuleId9]",
                "contentId": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
                "kind": "AnalyticsRule",
                "version": "[variables('analyticRuleObject9').analyticRuleVersion9]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
        "contentKind": "AnalyticsRule",
        "displayName": "Ngrok Reverse Proxy on Network (ASIM DNS Solution)",
        "contentProductId": "[variables('analyticRuleObject9')._analyticRulecontentProductId9]",
        "id": "[variables('analyticRuleObject9')._analyticRulecontentProductId9]",
        "version": "[variables('analyticRuleObject9').analyticRuleVersion9]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('playbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "SummarizeDNSData_DNSEssentials Playbook with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('playbookVersion1')]",
          "parameters": {
            "PlaybookName": {
              "defaultValue": "SummarizeDNSData_DNSEssentials",
              "type": "string"
            },
            "logAnalyticsName": {
              "type": "string",
              "metadata": {
                "description": "Enter value for logAnalyticsName"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Enter value for resourceGroupName"
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Enter value for subscriptionId"
              }
            }
          },
          "variables": {
            "AzureloganalyticsdatacollectorConnectionName": "[[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
            "AzuremonitorlogsConnectionName": "[[concat('Azuremonitorlogs-', parameters('PlaybookName'))]",
            "connection-2": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]",
            "_connection-2": "[[variables('connection-2')]",
            "connection-3": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]",
            "_connection-3": "[[variables('connection-3')]",
            "workspace-location-inline": "[concat('[resourceGroup().locatio', 'n]')]",
            "workspace-name": "[parameters('workspace')]",
            "workspaceResourceId": "[[resourceId('microsoft.OperationalInsights/Workspaces', variables('workspace-name'))]"
          },
          "resources": [
            {
              "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    },
                    "logAnalyticsName": {
                      "defaultValue": "[[parameters('logAnalyticsName')]",
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "defaultValue": "[[parameters('resourceGroupName')]",
                      "type": "string"
                    },
                    "subscriptionId": {
                      "defaultValue": "[[parameters('subscriptionId')]",
                      "type": "string"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Minute",
                        "interval": 10
                      },
                      "evaluatedRecurrence": {
                        "frequency": "Minute",
                        "interval": 10
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "Condition": {
                      "actions": {
                        "Condition_-_If_Data_-_IP": {
                          "actions": {
                            "For_each_-_SubArray_-_IP": {
                              "foreach": "@variables('multipleArraysIP')",
                              "actions": {
                                "Send_Data_-_IP": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": "@{items('For_each_-_SubArray_-_IP')}",
                                    "headers": {
                                      "Log-Type": "DNS_Summarized_Logs_ip_CL"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "path": "/api/logs"
                                  }
                                }
                              },
                              "runAfter": {
                                "Set_variable_-_multipleArrays_-_IP": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach"
                            },
                            "Set_variable_-_multipleArrays_-_IP": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "multipleArraysIP",
                                "value": "@chunk(body('Run_query_and_list_results_-_IP')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthIP'),variables('ArraySizeIP'))))"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable_-_TotalCharacterLength_-_IP": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@variables('ArraySizeIP')",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Run_query_and_list_results_-_IP": {
                          "type": "ApiConnection",
                          "inputs": {
                            "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           DNS_Summarized_Logs_ip_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('hour',1,bin(max_EventTime_t,1h))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,1h)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_Dns(starttime=lastRecievedTime,endtime=bin(nowTime,1h))\n| where TimeGenerated < bin(nowTime,1h)\n| summarize count() by SrcIpAddr, DnsQuery, EventResultDetails, DnsResponseName, bin(TimeGenerated,1h)\n| extend EventTime = TimeGenerated",
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/queryData",
                            "queries": {
                              "resourcegroups": "@parameters('resourceGroupName')",
                              "resourcename": "@parameters('logAnalyticsName')",
                              "resourcetype": "Log Analytics Workspace",
                              "subscriptions": "@parameters('subscriptionId')",
                              "timerange": "Last 1 day"
                            }
                          }
                        },
                        "Set_variable_-_ArraySize_-_IP": {
                          "runAfter": {
                            "Run_query_and_list_results_-_IP": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ArraySizeIP",
                            "value": "@length(body('Run_query_and_list_results_-_IP')?['value'])"
                          }
                        },
                        "Set_variable_-_TotalCharacterLength_-_IP": {
                          "runAfter": {
                            "Set_variable_-_ArraySize_-_IP": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "TotalCharacterLengthIP",
                            "value": "@length(string(body('Run_query_and_list_results_-_IP')?['value']))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArraysIP": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "lessOrEquals": [
                              "@div(sub(ticks(variables('nowTime')),ticks(startOfHour(variables('nowTime')))),10000000)",
                              600
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_2": {
                      "actions": {
                        "For_each_-_SubArray_-_SourceInfo": {
                          "foreach": "@variables('multipleArraysSourceInfo')",
                          "actions": {
                            "Send_Data": {
                              "type": "ApiConnection",
                              "inputs": {
                                "body": "@{items('For_each_-_SubArray_-_SourceInfo')}",
                                "headers": {
                                  "Log-Type": "DNS_Summarized_Logs_sourceInfo_CL"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/api/logs"
                              }
                            }
                          },
                          "runAfter": {
                            "Set_variable": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "Set_variable": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "multipleArraysSourceInfo",
                            "value": "@chunk(body('Run_query_and_list_results_-_SourceInfo')?['value'],div(variables('MaxByteSizeAllowed'),div(variables('TotalCharacterLengthSourceInfo'),variables('ArraySizeSourceInfo'))))"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_-_multipleArrays_-_SourceInfo": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "greater": [
                              "@variables('ArraySizeSourceInfo')",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Initialize_variable_-_ArraySizeIP": {
                      "runAfter": {
                        "MaxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeIP",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_ArraySize_-_SourceInfo": {
                      "runAfter": {
                        "Run_query_and_list_results_-_SourceInfo": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ArraySizeSourceInfo",
                            "type": "integer",
                            "value": "@length(body('Run_query_and_list_results_-_SourceInfo')?['value'])"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLengthIP": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySizeIP": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthIP",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_TotalCharacterLength_-_SourceInfo": {
                      "runAfter": {
                        "Initialize_variable_-_ArraySize_-_SourceInfo": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TotalCharacterLengthSourceInfo",
                            "type": "integer",
                            "value": "@length(string(body('Run_query_and_list_results_-_SourceInfo')?['value']))"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArraysIP": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLengthIP": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysIP",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_-_multipleArrays_-_SourceInfo": {
                      "runAfter": {
                        "Initialize_variable_-_TotalCharacterLength_-_SourceInfo": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "multipleArraysSourceInfo",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "MaxRequestSizeAllowed": {
                      "runAfter": {
                        "nowTime": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "MaxByteSizeAllowed",
                            "type": "integer",
                            "value": 26214400
                          }
                        ]
                      }
                    },
                    "Run_query_and_list_results_-_SourceInfo": {
                      "runAfter": {
                        "MaxRequestSizeAllowed": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "let nowTime = todatetime(\"@{variables('nowTime')}\");\nlet lastRecievedTime = toscalar (\n    union isfuzzy=true\n        (\n           DNS_Summarized_Logs_sourceInfo_CL \n            | summarize max(EventTime_t)\n            | extend max_TimeGenerated = datetime_add('minute',10,bin(max_EventTime_t,10m))\n        ),\n        (\n            print (nowTime)\n            | extend max_TimeGenerated = datetime_add('day',-1,bin(print_0,10m)) \n            | project-away print_0\n        )\n        | summarize max(max_TimeGenerated)\n    );\n_Im_Dns(starttime=lastRecievedTime,endtime=bin(nowTime,10m))\n| where TimeGenerated < bin(nowTime,10m)\n| extend EventProduct = strcat(EventVendor,\"-\",EventProduct)\n| summarize count() by EventProduct, DvcHostname,EventType,EventSubType, DnsQueryTypeName, bin(TimeGenerated,10m)\n| extend EventTime = TimeGenerated",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/queryData",
                        "queries": {
                          "resourcegroups": "@parameters('resourceGroupName')",
                          "resourcename": "@parameters('logAnalyticsName')",
                          "resourcetype": "Log Analytics Workspace",
                          "subscriptions": "@parameters('subscriptionId')",
                          "timerange": "Last 1 day"
                        }
                      }
                    },
                    "nowTime": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "nowTime",
                            "type": "string",
                            "value": "@{utcNow()}"
                          }
                        ]
                      }
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureloganalyticsdatacollector": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                        "connectionName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azureloganalyticsdatacollector')]"
                      },
                      "azuremonitorlogs": {
                        "connectionId": "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                        "connectionName": "[[variables('AzuremonitorlogsConnectionName')]",
                        "id": "[[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/Azuremonitorlogs')]"
                      }
                    }
                  }
                }
              },
              "name": "[[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[[variables('workspace-location-inline')]",
              "tags": {
                "hidden-SentinelTemplateName": "SummarizeDNSData",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[[variables('workspaceResourceId')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2019-05-01",
              "dependsOn": [
                "[[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                "[[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[[variables('AzuremonitorlogsConnectionName')]",
              "location": "[[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[[variables('AzuremonitorlogsConnectionName')]",
                "api": {
                  "id": "[[variables('_connection-3')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(variables('playbookId1'),'/'))))]",
              "properties": {
                "parentId": "[variables('playbookId1')]",
                "contentId": "[variables('_playbookContentId1')]",
                "kind": "Playbook",
                "version": "[variables('playbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ],
          "metadata": {
            "title": "Summarize Data for DNS Essentials Solution",
            "description": "This playbook summarizes data for DNS Essentials Solution and ingests into custom tables.",
            "postDeployment": [
              "1. Authorize 'Azure Monitor Logs' and 'Azure Log Analytics Data Collector' API connections."
            ],
            "tags": [
              "Networking"
            ],
            "releaseNotes": {
              "version": "1.0",
              "title": "SummarizeDNSData",
              "notes": [
                "Initial version"
              ]
            },
            "lastUpdateTime": "2024-11-28T15:50:54.325Z"
          }
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_playbookContentId1')]",
        "contentKind": "Playbook",
        "displayName": "SummarizeDNSData_DNSEssentials",
        "contentProductId": "[variables('_playbookcontentProductId1')]",
        "id": "[variables('_playbookcontentProductId1')]",
        "version": "[variables('playbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject1').huntingQueryTemplateSpecName1]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "AnomalousIncreaseInDNSActivityByClients_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject1').huntingQueryVersion1]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_1",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "[Anomaly] Anomalous Increase in DNS activity by clients (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "let threshold = 2.5;\nlet min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\n// calculate avg. eps(events per second)\nlet eps = materialize (_Im_Dns\n  | project TimeGenerated\n  | where TimeGenerated > ago(5m)\n  | count\n  | extend Count = Count / 300);\nlet maxSummarizedTime = toscalar (\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL \n      | where EventTime_t >= min_t\n      | summarize max_TimeGenerated=max(EventTime_t)\n      | extend max_TimeGenerated = datetime_add('hour', 1, max_TimeGenerated)\n      ),\n      (\n      print(min_t)\n      | project max_TimeGenerated = print_0\n      )\n  | summarize maxTimeGenerated = max(max_TimeGenerated) \n  );\nlet summarizationexist = materialize(\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > ago(1d) \n      | project v = int(2)\n      ),\n      (\n      print int(1) \n      | project v = print_0\n      )\n  | summarize maxv = max(v)\n  | extend sumexist = (maxv > 1)\n  );\nlet allData = union isfuzzy=true\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) > 1000\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(2d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime and isnotempty(SrcIpAddr)\n          | summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) between (501 .. 1000)\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(3d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime and isnotempty(SrcIpAddr)\n          | summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) <= 500\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(4d)), endtime=now())\n          | where TimeGenerated > maxSummarizedTime and isnotempty(SrcIpAddr)\n          | summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1h)\n          | extend EventTime = TimeGenerated, Count = toint(Count), exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > min_t and isnotempty(SrcIpAddr_s)\n      | summarize Count=toint(sum(count__d)) by SrcIpAddr=SrcIpAddr_s, bin(EventTime=EventTime_t, 1h)\n      );\nallData\n| make-series TotalEventCountPerDay= sum(Count) on EventTime from min_t to max_t step dt by SrcIpAddr\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalEventCountPerDay, threshold, -1, 'linefit')\n| mv-expand anomalies, score, baseline, EventTime, TotalEventCountPerDay\n| extend\n  anomalies = toint(anomalies),\n  score = toint(score),\n  baseline = toint(baseline),\n  EventTime = todatetime(EventTime),\n  TotalEvents = tolong(TotalEventCountPerDay)\n| where EventTime >= ago(dt)\n| where score >= threshold * 2\n| order by score\n| extend IP_0_Address = SrcIpAddr\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Checks for an anomalous increase in DNS activity per client in the last 24 hours as compared to the last 14 days. Please note: To enhance performance, this query uses summarized data if available."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl,Exfiltration"
                  },
                  {
                    "name": "techniques",
                    "value": "T1568,T1008,T1048"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject1')._huntingQuerycontentId1),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 1",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject1')._huntingQuerycontentId1)]",
                "contentId": "[variables('huntingQueryObject1')._huntingQuerycontentId1]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject1').huntingQueryVersion1]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject1')._huntingQuerycontentId1]",
        "contentKind": "HuntingQuery",
        "displayName": "[Anomaly] Anomalous Increase in DNS activity by clients (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject1')._huntingQuerycontentId1,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject1')._huntingQuerycontentId1,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject2').huntingQueryTemplateSpecName2]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "ConnectionToUnpopularWebsiteDetected_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject2').huntingQueryVersion2]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_2",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Connection to Unpopular Website Detected (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "let min_t = ago(14d);\nlet max_t = now();\nlet dt = 1d;\n// calculate avg. eps(events per second)\nlet eps = materialize (_Im_Dns\n  | project TimeGenerated\n  | where TimeGenerated > ago(5m)\n  | count\n  | extend Count = Count / 300);\nlet maxSummarizedTime = toscalar (\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL \n      | where EventTime_t >= min_t\n      | summarize max_TimeGenerated=max(EventTime_t)\n      | extend max_TimeGenerated = datetime_add('hour', 1, max_TimeGenerated)\n      ),\n      (\n      print(min_t)\n      | project max_TimeGenerated = print_0\n      )\n  | summarize maxTimeGenerated = max(max_TimeGenerated) \n  );\nlet summarizationexist = materialize(\n  union isfuzzy=true \n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t > ago(1d) \n      | project v = int(2)\n      ),\n      (\n      print int(1) \n      | project v = print_0\n      )\n  | summarize maxv = max(v)\n  | extend sumexist = (maxv > 1)\n  );\n  let allData = ( union isfuzzy=true\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) > 1000\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(2d)), endtime=ago(dt))\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by DnsQuery\n          | top 1000000 by Count\n          | summarize TopOneMillionDNSQuery=make_list(DnsQuery,1000000)\n          | extend exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) between (501 .. 1000)\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(3d)), endtime=ago(dt))\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by DnsQuery\n          | top 1000000 by Count\n          | summarize TopOneMillionDNSQuery=make_list(DnsQuery,1000000)\n          | extend exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      (datatable(exists: int, sumexist: bool)[1, false]\n      | where toscalar(eps) <= 500\n      | join (summarizationexist) on sumexist)\n      | join (\n          _Im_Dns(starttime=todatetime(ago(4d)), endtime=ago(dt))\n          | where TimeGenerated > maxSummarizedTime\n          | summarize Count=count() by DnsQuery\n          | top 1000000 by Count\n          | summarize TopOneMillionDNSQuery=make_list(DnsQuery,1000000)\n          | extend exists=int(1)\n          )\n          on exists\n      | project-away exists, maxv, sum*\n      ),\n      (\n      DNS_Summarized_Logs_ip_CL\n      | where EventTime_t between (min_t .. ago(dt)) and isnotempty(DnsQuery_s)\n      | project-rename\n          DnsQuery=DnsQuery_s,\n          Count=count__d\n      | extend Count = toint(Count)\n      | summarize TotalCount=toint(sum(Count)) by DnsQuery\n      | top 1000000 by TotalCount\n      | summarize TopOneMillionDNSQuery=make_list(DnsQuery,1000000)\n      )\n      );\n_Im_Dns(starttime=ago(dt),endtime=now())\n| summarize Count=count() by DnsQuery\n| where isnotempty(DnsQuery) and DnsQuery !in (allData)\n| extend DNS_0_DomainName = DnsQuery\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This query lists DNS queries not found in the top 1 million queries in the past 14 days. Please note: To enhance performance, this query uses summarized data if available."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl"
                  },
                  {
                    "name": "techniques",
                    "value": "T1095"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject2')._huntingQuerycontentId2),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 2",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject2')._huntingQuerycontentId2)]",
                "contentId": "[variables('huntingQueryObject2')._huntingQuerycontentId2]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject2').huntingQueryVersion2]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject2')._huntingQuerycontentId2]",
        "contentKind": "HuntingQuery",
        "displayName": "Connection to Unpopular Website Detected (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject2')._huntingQuerycontentId2,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject2')._huntingQuerycontentId2,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject3').huntingQueryTemplateSpecName3]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "CVE-2020-1350 (SIGRED)ExploitationPattern_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject3').huntingQueryVersion3]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_3",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "CVE-2020-1350 (SIGRED) exploitation pattern (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "let threshold = 15;\n_Im_Dns(starttime=ago(1d),endtime=now())\n| where DnsQueryTypeName in~ ('SIG', 'RRSIG')\n| where NetworkProtocol =~ 'TCP'\n| summarize Count=count() by SrcIpAddr, bin(TimeGenerated, 1m)\n| where Count > threshold\n| extend IP_0_Address = SrcIpAddr\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This query detects the exploitation pattern of the CVE-2020-1350 (SIGRED) vulnerability. This query utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema."
                  },
                  {
                    "name": "tactics",
                    "value": "DefenseEvasion,PrivilegeEscalation"
                  },
                  {
                    "name": "techniques",
                    "value": "T1068,T1055"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject3')._huntingQuerycontentId3),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 3",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject3')._huntingQuerycontentId3)]",
                "contentId": "[variables('huntingQueryObject3')._huntingQuerycontentId3]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject3').huntingQueryVersion3]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject3')._huntingQuerycontentId3]",
        "contentKind": "HuntingQuery",
        "displayName": "CVE-2020-1350 (SIGRED) exploitation pattern (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject3')._huntingQuerycontentId3,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject3')._huntingQuerycontentId3,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject4').huntingQueryTemplateSpecName4]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DNSQueryWithFailuresInLast24Hours_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject4').huntingQueryVersion4]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_4",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Top 25 DNS queries with most failures in last 24 hours (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "let timeframe = 1d;\n_Im_Dns(starttime=ago(timeframe), endtime=now())\n| where EventSubType =~ 'response' and DnsResponseCodeName != 'NOERROR'\n| summarize Count=count() by DnsQuery, DnsResponseCodeName\n| order by Count\n| take 25\n| extend DNS_0_DomainName = DnsQuery\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This query searches for DNS queries that resulted in errors. This query utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl"
                  },
                  {
                    "name": "techniques",
                    "value": "T1095"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject4')._huntingQuerycontentId4),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 4",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject4')._huntingQuerycontentId4)]",
                "contentId": "[variables('huntingQueryObject4')._huntingQuerycontentId4]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject4').huntingQueryVersion4]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject4')._huntingQuerycontentId4]",
        "contentKind": "HuntingQuery",
        "displayName": "Top 25 DNS queries with most failures in last 24 hours (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject4')._huntingQuerycontentId4,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject4')._huntingQuerycontentId4,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject5').huntingQueryTemplateSpecName5]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "DomainsWithLargeNumberOfSubDomains_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject5').huntingQueryVersion5]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_5",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Top 25 Domains with large number of Subdomains (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "let lookback=1d;\n_Im_Dns(starttime=ago(lookback),endtime=now())\n| distinct DnsQuery\n| extend DomainParts = split(DnsQuery,'.')\n| extend DomainName = strcat(DomainParts[toint(array_length(DomainParts)-2)],'.',DomainParts[toint(array_length(DomainParts)-1)])\n| summarize SubDomainCount=dcount(DnsQuery),make_list(DnsQuery) by DomainName\n| order by SubDomainCount\n| take 25\n| extend DNS_0_DomainName = DomainName\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "A large number of subdomains for a domain may be an indicator of a suspicious domain. This query returns the top 25 domains by number of subdomains."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl,Exfiltration"
                  },
                  {
                    "name": "techniques",
                    "value": "T1568,T1008,T1048"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject5')._huntingQuerycontentId5),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 5",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject5')._huntingQuerycontentId5)]",
                "contentId": "[variables('huntingQueryObject5')._huntingQuerycontentId5]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject5').huntingQueryVersion5]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject5')._huntingQuerycontentId5]",
        "contentKind": "HuntingQuery",
        "displayName": "Top 25 Domains with large number of Subdomains (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject5')._huntingQuerycontentId5,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject5')._huntingQuerycontentId5,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject6').huntingQueryTemplateSpecName6]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "IncreaseInDNSRequestsByClientThanTheDailyAverageCount_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject6').huntingQueryVersion6]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_6",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Increase in DNS Requests by client than the daily average count (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "let starttime = now();\nlet endtime = now();\nlet lookback = ago(7d);\n//example of excluding Saturday and Sunday in Average as those are potentially low volume and decrease the average, feel free to change\nlet excludedDays = dynamic([\"Saturday\", \"Sunday\"]);\n// average is across 5 days as we are dropping weekends, change as needed\nlet numDays = 5;\n// limit to over 1000 lookups somewhat random but helps focus in on higher lookups, change as needed\nlet avglookupThreshold = 3;\nlet lookupThreshold = 1000;\n//Setting to startofday so we get 7 days prior to today\n_Im_Dns(starttime=startofday(lookback),endtime=startofday(starttime))\n//getting the associated number of the day of the week so we can map to a given day for later parsing if needed\n| extend DayNumberofWeek = tostring(dayofweek(TimeGenerated))\n//Setting the Day of the week value so that certain days could be excluded if needed\n| extend DayofWeek = iff(DayNumberofWeek == \"00:00:00\", \"Sunday\",\n(iff(DayNumberofWeek == \"1.00:00:00\", \"Monday\",\n(iff(DayNumberofWeek == \"2.00:00:00\", \"Tuesday\",\n(iff(DayNumberofWeek == \"3.00:00:00\", \"Wednesday\",\n(iff(DayNumberofWeek == \"4.00:00:00\", \"Thursday\",\n(iff(DayNumberofWeek == \"5.00:00:00\", \"Friday\",\n(iff(DayNumberofWeek == \"6.00:00:00\", \"Saturday\", DayNumberofWeek)))))))))))))\n| where DayofWeek !in~ (excludedDays)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by SrcIpAddr, DnsQuery\n| project StartTime, EndTime, SrcIpAddr, FullNameLookup = DnsQuery, DailyAvgLookupCountOverLastWeek = count_/numDays\n| join ( _Im_Dns\n| where TimeGenerated between(startofday(starttime)..endofday(endtime))\n| summarize count() by SrcIpAddr, FullNameLookup = DnsQuery\n| project SrcIpAddr, LookupCountToday = count_, FullNameLookup\n)\non SrcIpAddr, FullNameLookup\n| where LookupCountToday > (DailyAvgLookupCountOverLastWeek * avglookupThreshold) and LookupCountToday >= lookupThreshold\n| project StartTime, EndTime, SrcIpAddr, LookupCountToday, DailyAvgLookupCountOverLastWeek, FullNameLookup\n| order by LookupCountToday desc nulls last\n| extend timestamp = StartTime\n| extend IP_0_Address = SrcIpAddr\n| extend DNS_0_DomainName = FullNameLookup\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Checking for a threefold increase or more in Full Name lookups per client IP for today vs. the daily average for the previous week."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl,Exfiltration"
                  },
                  {
                    "name": "techniques",
                    "value": "T1568,T1008,T1048"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject6')._huntingQuerycontentId6),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 6",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject6')._huntingQuerycontentId6)]",
                "contentId": "[variables('huntingQueryObject6')._huntingQuerycontentId6]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject6').huntingQueryVersion6]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject6')._huntingQuerycontentId6]",
        "contentKind": "HuntingQuery",
        "displayName": "Increase in DNS Requests by client than the daily average count (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject6')._huntingQuerycontentId6,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject6')._huntingQuerycontentId6,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject7').huntingQueryTemplateSpecName7]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "PossibleDNSTunnelingOrDataExfiltrationActivity_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject7').huntingQueryVersion7]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_7",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Possible DNS Tunneling or Data Exfiltration Activity (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "// Setting URI length threshold count, shorter URI's may cause noise, change as needed\nlet lookback=1day;\nlet uriThreshold = 150;\nlet ExcludeDomains=dynamic([\"cnr.io\", \"kr0.io\", \"arcticwolf.net\", \"webcfs00.com\", \"barracudabrts.com\", \"trendmicro.com\", \"sophosxl.net\", \n\"spotify.com\", \"e5.sk\", \"mcafee.com\", \"opendns.com\", \"spameatingmonkey.net\", \"_ldap\", \"_kerberos\", \"modsecurity.org\", \n\"fdmarc.net\", \"ipass.com\", \"wpad\"]);\n_Im_Dns(starttime=ago(lookback),endtime=now())\n| summarize count() by SrcIpAddr, DnsQuery\n| where not(DnsQuery has_any (ExcludeDomains))\n| extend Urilength = strlen(DnsQuery)\n| where Urilength >= uriThreshold\n| order by Urilength\n| extend IP_0_Address = SrcIpAddr\n| extend DNS_0_DomainName = DnsQuery\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "Typical domain name lengths are short, whereas domain name queries used for data exfiltration or tunneling can often be very large in size. The hunting query looks for DNS queries that are more than 150 characters long."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl,Exfiltration"
                  },
                  {
                    "name": "techniques",
                    "value": "T1568,T1008,T1048"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject7')._huntingQuerycontentId7),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 7",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject7')._huntingQuerycontentId7)]",
                "contentId": "[variables('huntingQueryObject7')._huntingQuerycontentId7]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject7').huntingQueryVersion7]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject7')._huntingQuerycontentId7]",
        "contentKind": "HuntingQuery",
        "displayName": "Possible DNS Tunneling or Data Exfiltration Activity (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject7')._huntingQuerycontentId7,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject7')._huntingQuerycontentId7,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject8').huntingQueryTemplateSpecName8]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "PotentialBeaconingActivity_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject8').huntingQueryVersion8]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_8",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Potential beaconing activity (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "let querystarttime = 2d;\nlet queryendtime = 1d;\nlet TimeDeltaThreshold = 10;\nlet TotalEventsThreshold = 15;\nlet PercentBeaconThreshold = 80;\n_Im_Dns(starttime=ago(querystarttime), endtime=ago(queryendtime))\n| where isnotempty(SrcIpAddr)\n| project TimeGenerated, SrcIpAddr, DnsQuery\n| sort by SrcIpAddr asc,TimeGenerated asc\n| serialize\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSrcIpAddr = next(SrcIpAddr, 1)\n| extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)\n| where SrcIpAddr == nextSrcIpAddr\n//Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds > TimeDeltaThreshold\n| project TimeGenerated, TimeDeltainSeconds, SrcIpAddr, DnsQuery\n| summarize count(), make_list(TimeDeltainSeconds) by TimeDeltainSeconds, bin(TimeGenerated, 1h), SrcIpAddr, DnsQuery\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_)\nby bin(TimeGenerated, 1h), SrcIpAddr, DnsQuery\n| where TotalEvents > TotalEventsThreshold\n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n| order by BeaconPercent\n| take 50\n| extend IP_0_Address = SrcIpAddr\n| extend DNS_0_DomainName = DnsQuery\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This query identifies beaconing patterns from DNS logs based on recurrent frequency patterns. Such a potential outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl"
                  },
                  {
                    "name": "techniques",
                    "value": "T1095,T1573,T1008,T1571,T1219"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject8')._huntingQuerycontentId8),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 8",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject8')._huntingQuerycontentId8)]",
                "contentId": "[variables('huntingQueryObject8')._huntingQuerycontentId8]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject8').huntingQueryVersion8]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject8')._huntingQuerycontentId8]",
        "contentKind": "HuntingQuery",
        "displayName": "Potential beaconing activity (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject8')._huntingQuerycontentId8,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject8')._huntingQuerycontentId8,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject9').huntingQueryTemplateSpecName9]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Sources(Clients)WithHighNumberOfErrors_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject9').huntingQueryVersion9]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_9",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Top 25 Sources(Clients) with high number of errors in last 24hours (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "let timeframe = 1d;\n_Im_Dns(starttime=ago(timeframe), endtime=now())\n| where EventSubType == 'response' and DnsResponseCodeName != 'NOERROR'\n| where isnotempty(SrcIpAddr)\n| summarize Count=count() by SrcIpAddr, DnsResponseCodeName\n| order by Count\n| take 25\n| extend IP_0_Address = SrcIpAddr\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This query searches for the top 25 clients with the most errors. This query utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl"
                  },
                  {
                    "name": "techniques",
                    "value": "T1095"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject9')._huntingQuerycontentId9),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 9",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject9')._huntingQuerycontentId9)]",
                "contentId": "[variables('huntingQueryObject9')._huntingQuerycontentId9]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject9').huntingQueryVersion9]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject9')._huntingQuerycontentId9]",
        "contentKind": "HuntingQuery",
        "displayName": "Top 25 Sources(Clients) with high number of errors in last 24hours (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject9')._huntingQuerycontentId9,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject9')._huntingQuerycontentId9,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('huntingQueryObject10').huntingQueryTemplateSpecName10]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "UnexpectedTopLevelDomains_HuntingQueries Hunting Query with template version 3.0.3",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('huntingQueryObject10').huntingQueryVersion10]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/savedSearches",
              "apiVersion": "2022-10-01",
              "name": "DNS_Essentials_Hunting_Query_10",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "Unexpected top level domains (ASIM DNS Solution)",
                "category": "Hunting Queries",
                "query": "// Check in last 24hours\nlet looback=1d;\n_Im_Dns(starttime=ago(looback),endtime=now())\n| summarize Count=count() by SrcIpAddr, DnsQuery\n| extend TopLevelDomain = tostring(split(DnsQuery, \".\")[-1])\n| where strlen(TopLevelDomain) > 4\n| order by Count\n| take 25\n| extend IP_0_Address = SrcIpAddr\n| extend DNS_0_DomainName = DnsQuery\n",
                "version": 2,
                "tags": [
                  {
                    "name": "description",
                    "value": "This query looks for top-level domains that are longer than four characters. This query utilizes [ASIM](https://aka.ms/AboutASIM) normalization and is applied to any source that supports the ASIM DNS schema."
                  },
                  {
                    "name": "tactics",
                    "value": "CommandAndControl"
                  },
                  {
                    "name": "techniques",
                    "value": "T1095"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('HuntingQuery-', last(split(resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject10')._huntingQuerycontentId10),'/'))))]",
              "properties": {
                "description": "DNS Essentials Hunting Query 10",
                "parentId": "[resourceId('Microsoft.OperationalInsights/savedSearches', variables('huntingQueryObject10')._huntingQuerycontentId10)]",
                "contentId": "[variables('huntingQueryObject10')._huntingQuerycontentId10]",
                "kind": "HuntingQuery",
                "version": "[variables('huntingQueryObject10').huntingQueryVersion10]",
                "source": {
                  "kind": "Solution",
                  "name": "DNS Essentials",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('huntingQueryObject10')._huntingQuerycontentId10]",
        "contentKind": "HuntingQuery",
        "displayName": "Unexpected top level domains (ASIM DNS Solution)",
        "contentProductId": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject10')._huntingQuerycontentId10,'-', '1.0.0')))]",
        "id": "[concat(take(variables('_solutionId'),50),'-','hq','-', uniqueString(concat(variables('_solutionId'),'-','HuntingQuery','-',variables('huntingQueryObject10')._huntingQuerycontentId10,'-', '1.0.0')))]",
        "version": "1.0.0"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.3",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "DNS Essentials",
        "publisherDisplayName": "Microsoft Sentinel, Microsoft Corporation",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/DNS%20Essentials/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>This is a <a href=\"https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fdocs.microsoft.com%2Fazure%2Fsentinel%2Fsentinel-solutions-catalog%23domain-solutions&amp;data=05%7C01%7Ckavishbakshi%40microsoft.com%7Cbe2a496082b24caa4b8c08da9cefacca%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637994850502413731%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=OJegu%2B2EqD7rmYmK9pm9QniD6YWp5ooloZ6tHzcwVi0%3D&amp;reserved=0\">domain solution</a> and does not include any data connectors. The content in this solution requires one of the product solutions below, as well as any other connector or data source normalized to the <a href=\"https://aka.ms/AboutASIM\">ASIM</a>.</p>\n<p><strong>Prerequisite :-</strong></p>\n<p>Install one or more of the listed solutions, or develop your custom ASIM parsers to unlock the value provided by this solution.</p>\n<ol>\n<li>Windows Server DNS</li>\n<li>Azure Firewall</li>\n<li>Cisco Umbrella</li>\n<li>Corelight Zeek</li>\n<li>Google Cloud Platform DNS</li>\n<li>Infoblox NIOS</li>\n<li>ISC Bind</li>\n<li>Vectra AI</li>\n<li>Zscaler Internet Access</li>\n</ol>\n<p><strong>Underlying Microsoft Technologies used:</strong></p>\n<p>This solution takes a dependency on the following technologies, and some of these dependencies either may be in Preview state or might result in additional ingestion or operational costs:</p>\n<ol>\n<li>Product solutions as described above</li>\n<li>Logic app for data summarization</li>\n</ol>\n<p><strong>Recommendation :-</strong></p>\n<p>It is highly recommended to use the <strong>Summarize Data for DNS Essentials Solution</strong> logic app playbook provided with this solution as it will significantly improve the performance of the Workbook, Analytic rules &amp; Hunting queries.</p>\n<p><strong>Workbooks:</strong> 1, <strong>Analytic Rules:</strong> 9, <strong>Hunting Queries:</strong> 10, <strong>Playbooks:</strong> 1</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/Azure_Sentinel.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "DNS Essentials",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "Microsoft",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId1')]",
              "version": "[variables('workbookVersion1')]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject1')._analyticRulecontentId1]",
              "version": "[variables('analyticRuleObject1').analyticRuleVersion1]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject2')._analyticRulecontentId2]",
              "version": "[variables('analyticRuleObject2').analyticRuleVersion2]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject3')._analyticRulecontentId3]",
              "version": "[variables('analyticRuleObject3').analyticRuleVersion3]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject4')._analyticRulecontentId4]",
              "version": "[variables('analyticRuleObject4').analyticRuleVersion4]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject5')._analyticRulecontentId5]",
              "version": "[variables('analyticRuleObject5').analyticRuleVersion5]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject6')._analyticRulecontentId6]",
              "version": "[variables('analyticRuleObject6').analyticRuleVersion6]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject7')._analyticRulecontentId7]",
              "version": "[variables('analyticRuleObject7').analyticRuleVersion7]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject8')._analyticRulecontentId8]",
              "version": "[variables('analyticRuleObject8').analyticRuleVersion8]"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('analyticRuleObject9')._analyticRulecontentId9]",
              "version": "[variables('analyticRuleObject9').analyticRuleVersion9]"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_SummarizeData_DNSEssentials')]",
              "version": "[variables('playbookVersion1')]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject1')._huntingQuerycontentId1]",
              "version": "[variables('huntingQueryObject1').huntingQueryVersion1]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject2')._huntingQuerycontentId2]",
              "version": "[variables('huntingQueryObject2').huntingQueryVersion2]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject3')._huntingQuerycontentId3]",
              "version": "[variables('huntingQueryObject3').huntingQueryVersion3]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject4')._huntingQuerycontentId4]",
              "version": "[variables('huntingQueryObject4').huntingQueryVersion4]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject5')._huntingQuerycontentId5]",
              "version": "[variables('huntingQueryObject5').huntingQueryVersion5]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject6')._huntingQuerycontentId6]",
              "version": "[variables('huntingQueryObject6').huntingQueryVersion6]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject7')._huntingQuerycontentId7]",
              "version": "[variables('huntingQueryObject7').huntingQueryVersion7]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject8')._huntingQuerycontentId8]",
              "version": "[variables('huntingQueryObject8').huntingQueryVersion8]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject9')._huntingQuerycontentId9]",
              "version": "[variables('huntingQueryObject9').huntingQueryVersion9]"
            },
            {
              "kind": "HuntingQuery",
              "contentId": "[variables('huntingQueryObject10')._huntingQuerycontentId10]",
              "version": "[variables('huntingQueryObject10').huntingQueryVersion10]"
            }
          ]
        },
        "firstPublishDate": "2023-01-14",
        "providers": [
          "Microsoft"
        ],
        "categories": {
          "domains": [
            "Networking"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
