id: e1a91db8-f2b3-4531-bff6-da133d4f4f1a
name: IAM Privilege Escalation by Instance Profile attachment
description: |
  'An instance profile is a container for an IAM role that you can use to pass role information to an EC2 instance when the instance start.
  Identifies when existing role is removed and new/existing high privileged role is added to instance profile. 
  Any instance with this instance profile attached is able to perform privileged operations.
  AWS Instance Profile: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html 
  and CloudGoat - IAM PrivilegeEscalation by Attachment: https://github.com/RhinoSecurityLabs/cloudgoat/tree/master/scenarios/iam_privesc_by_attachment '
requiredDataConnectors:
  - connectorId: AWS
    dataTypes:
      - AWSCloudTrail
  - connectorId: AWSS3
    dataTypes:
      - AWSCloudTrail
tactics:
  - PrivilegeEscalation
relevantTechniques:
  - T1098
query: |

  // Creating separate table for RemoveRoleToInstanceProfile
  let RemoveRole=AWSCloudTrail
  | where  EventName in~ ("RemoveRoleFromInstanceProfile") and isempty(ErrorMessage)
  | extend RoleRemoved = tostring(parse_json(RequestParameters).roleName), InstanceProfileName = tostring(parse_json(RequestParameters).instanceProfileName), TimeRemoved=TimeGenerated
  | extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))
  | summarize RoleRemovedCount= dcount(TimeRemoved) by TimeRemoved, EventName, EventTypeName, UserIdentityArn, UserIdentityUserName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, 
  SourceIpAddress, AWSRegion, EventSource, RoleRemoved, InstanceProfileName;
  // Creating separate table for AddRoleToInstanceProfile
  let AddRole=AWSCloudTrail
  | where  EventName in~ ("AddRoleToInstanceProfile") and isempty(ErrorMessage)
  | extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))
  | extend RoleAdded = tostring(parse_json(RequestParameters).roleName), InstanceProfileName = tostring(parse_json(RequestParameters).instanceProfileName), TimeAdded=TimeGenerated
  | summarize RoleAddedCount= dcount(TimeAdded) by TimeAdded, EventName, EventTypeName, UserIdentityArn, UserIdentityUserName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, 
  SourceIpAddress, AWSRegion, EventSource, RoleAdded, InstanceProfileName;
  //Joining both operations from the same source IP, user and instance profile name
  RemoveRole
  | join kind= inner (
     AddRole 
  ) on AWSRegion,SourceIpAddress, InstanceProfileName, UserIdentityUserName
  | where TimeAdded  > TimeRemoved // Checking if RoleAdd operation was performed after removal
  | summarize TotalCount=count() by TimeAdded, TimeRemoved, RoleAdded, RoleRemoved, UserIdentityUserName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent,
  SourceIpAddress, AWSRegion, EventSource, RoleRemovedCount, RoleAddedCount
  | extend timestamp = iff(TimeAdded > TimeRemoved,TimeAdded, TimeRemoved), IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName

entityMappings:
  - entityType: Account
    fieldMappings:
      - identifier: FullName
        columnName: AccountCustomEntity
  - entityType: IP
    fieldMappings:
      - identifier: Address
        columnName: IPCustomEntity