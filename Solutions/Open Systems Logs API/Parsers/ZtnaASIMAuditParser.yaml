id: 2b8f4f0e-6d7c-4a1e-8f9a-0b3c2d1e0f5a # Unique ID, generate a new one
Function:
  Title: ASIM Parser for OpenSystems ZTNA Audit logs
  Version: '0.1.1'
  LastUpdated: May 15th 2025 # Current date
Category: OpenSystemsParser # Or a more specific category if available
FunctionName: ZtnaASIMAuditParser
FunctionAlias: ZtnaASIMAuditParser # Typically same as FunctionName
FunctionQuery: |
  let parser = () {
    OpenSystemsZtnaLogs_CL
    | where message_type == "audit"
    | project-rename
        DvcHostname = ztna_upstream,
        EventOriginalUid = uuid,
        EventProduct = "ZTNA",
        EventVendor = "Open Systems",
        EventSchemaVersion = "0.1.1", // Version updated
        EventStartTime = TimeGenerated,
        // Actor
        ActorUsername = subject_name,
        // Target
        TargetAppName = authority_name,
        TargetResourceName = object_name,
        // Additional OpenSystems specific fields (retained for potential additional context)
        OpenSystemsTenant = ztna_tenant,
        OpenSystemsMessageType = message_type,
        OpenSystemsMessage = message,
        OpenSystemsStatus = status
    | extend
        EventCount = 1,
        EventSchema = "AuditEvent",
        EventEndTime = EventStartTime,
        // Using '''action''' and '''result''' fields, expected to be populated via updated DCR
        EventType = column_ifexists('''action''', tostring(OpenSystemsMessage)), // Fallback to OpenSystemsMessage if '''action''' is not present
        Operation = column_ifexists('''action''', tostring(OpenSystemsMessage)), // Fallback to OpenSystemsMessage if '''action''' is not present
        EventResult = case(
            column_ifexists('''result''', '''''') == "success", "Success",
            column_ifexists('''result''', '''''') == "failure", "Failure", // Assuming "failure" is a possible value from '''result''' field
            column_ifexists('''result''', '''''') == "Success", "Success", // Handle if source already uses capitalized version
            column_ifexists('''result''', '''''') == "Failure", "Failure", // Handle if source already uses capitalized version
            // Fallback to OpenSystemsStatus if '''result''' is empty or not informative
            (isempty(column_ifexists('''result''', '''''')) or column_ifexists('''result''', '''''') !in ("success", "failure", "Success", "Failure")) and OpenSystemsStatus == "success", "Success", // Hypothetical mapping from status
            (isempty(column_ifexists('''result''', '''''')) or column_ifexists('''result''', '''''') !in ("success", "failure", "Success", "Failure")) and OpenSystemsStatus == "failure", "Failure", // Hypothetical mapping from status
            "Unknown" // Default if no clear mapping
        ),
        EventSeverity = iff(EventResult == "Success", "Informational", iff(EventResult == "Failure", "Medium", "Low")),
        ActorUsernameType = "Unknown", // Default, can be refined
        TargetAppNameType = "Unknown", // Default
        TargetResourceNameType = "Unknown", // Default
        EventOriginalType = message_type // This is '''audit'''
    | project
        TimeGenerated, EventOriginalUid, EventProduct, EventVendor, EventSchemaVersion, EventType, EventStartTime, EventResult, EventCount, EventSeverity, EventEndTime, EventSchema,
        ActorUsername, ActorUsernameType,
        TargetAppName, TargetAppNameType, TargetResourceName, TargetResourceNameType,
        DvcHostname, Operation, EventOriginalType,
        OpenSystemsTenant, OpenSystemsMessageType, OpenSystemsMessage, OpenSystemsStatus, // Retaining these for full context
        OpenSystemsUpstream = ztna_upstream
        // Removed direct projection of '''action''' and '''result''' as they are mapped to ASIM fields.
  };
  parser
