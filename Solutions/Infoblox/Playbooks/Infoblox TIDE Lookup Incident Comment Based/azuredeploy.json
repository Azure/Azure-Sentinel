{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "Infoblox-TIDE-Lookup-Comment-Enrichment",
    "description": "The playbook enrich an incident by adding TIDE Lookup information as comment on an incident.",
    "prerequisites": "User must provide valid Infoblox API Key.",
    "postDeployment": [
      "**a. Assign Role to add comment in incident**",
      "Assign role to this playbook.",
      "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add",
      "2. Add role assignment",
      "3. Assignment type: Job function roles -> Add 'Microsoft Sentinel Contributor' as a Role",
      "4. Members: select managed identity for assigned access to and add your logic app as member",
      "5. Click on review+assign",
      "**b. Configurations in Microsoft Sentinel**",
      "1. In Microsoft sentinel, analytical rules should be configured to trigger an incident which has Entities Mapping.",
      "2. To manually run the playbook on a particular incident follow the below steps:",
      "a. Go to Microsoft Sentinel -> <your workspace> -> Incidents",
      "b. Select an incident.",
      "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
      "d. Click on the Run button beside this playbook."
    ],
    "entities": [ "Host", "IP", "Hash", "URL" ],
    "tags": [ "Infoblox", "TIDE", "Lookup", "Comment", "Enrichment" ],
    "lastUpdateTime": "2024-07-19T16:15:48.355Z",
    "support": {
      "tier": "Community",
      "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
    },
    "author": {
      "name": "Infoblox"
    }
  },
  "parameters": {
    "PlaybookName": {
      "defaultValue": "Infoblox-TIDE-Lookup-Comment-Enrichment",
      "minLength": 1,
      "type": "string",
      "metadata": {
        "description": "Please do not keep 'PlaybookName' parameter empty, else you will receive validation failure"
      }
    },
    "Infoblox API Key": {
      "type": "securestring",
      "metadata": {
        "description": "Enter Infoblox API Key"
      }
    },
    "Infoblox Base Url": {
      "type": "string",
      "defaultValue": "https://csp.infoblox.com",
      "minLength": 1,
      "metadata": {
        "description": "Enter Base URL for your infoblox account. (e.g. https://csp.infoblox.com)"
      }
    }
  },
  "variables": {
    "MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]"
  },
  "resources": [
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            },
            "API Key": {
              "type": "string",
              "defaultValue": "[trim(parameters('Infoblox API Key'))]"
            },
            "BaseUrl": {
              "type": "String",
              "defaultValue": "[trim(parameters('Infoblox Base Url'))]"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "Condition_To_Check_If_Entity_Mapping_Is_Not_Available": {
              "actions": {
                "Add_Comment_To_Incident_If_Entity_Mapping_Not_Found": {
                  "runAfter": {},
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "incidentArmId": "@triggerBody()?['object']?['id']",
                      "message": "<p>No Entity Mapping found associated with incident.</p>"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/Incidents/Comment"
                  }
                }
              },
              "runAfter": {
                "For_Each_Hash": [ "Succeeded", "TimedOut", "Failed" ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [ "@variables('entity_mapping')", "@false" ]
                  }
                ]
              },
              "type": "If"
            },
            "Condition_To_Indicate_Failure_For_All_Entities": {
              "actions": {
                "Terminate_If_Failure_For_All_Entities": {
                  "runAfter": {},
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "message": "@{variables('error_message')}"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Condition_To_Check_If_Entity_Mapping_Is_Not_Available": [ "Succeeded" ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@variables('failure_count')",
                      "@length(triggerBody()?['object']?['properties']?['relatedEntities'])"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "For_Each_Hash": {
              "foreach": "@body('Get_FileHashes_From_Entities')?['Filehashes']",
              "actions": {
                "Condition_To_Check_Hash_TIDE_Data_Fetched_Successfully": {
                  "actions": {
                    "Condition_To_Check_If_TIDE_Data_Not_Available_For_Hash": {
                      "actions": {
                        "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_Hash": {
                          "runAfter": {},
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No TIDE Lookup Results Found For Hash -&nbsp;@{items('For_Each_Hash')?['Value']}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Increment_Comment_Count_For_Empty_Response_For_Hash": {
                          "runAfter": {
                            "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_Hash": [
                              "Succeeded"
                            ]
                          },
                          "type": "IncrementVariable",
                          "inputs": {
                            "name": "comment_count",
                            "value": 1
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_TIDE_Data_For_Hash": [ "Succeeded" ]
                      },
                      "else": {
                        "actions": {
                          "For_Each_Threat_IOC_Of_Type_Hash": {
                            "foreach": "@body('Parse_TIDE_Data_For_Hash')?['threat']",
                            "actions": {
                              "Condition_To_Check_Comment_Limit_Exceed_For_Hash": {
                                "actions": {
                                  "Condition_To_Verify_That_Incident_Has_99_Comments_For_Hash": {
                                    "actions": {
                                      "Add_Comment_That_Limit_Has_Been_Exceeded_For_Hash": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Comment limit to an incident has been breached.</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@variables('comment_count')",
                                            99
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {},
                                "else": {
                                  "actions": {
                                    "Add_Hash_TIDE_Data_As_Comment": {
                                      "runAfter": {
                                        "Set_HTML_With_Hash_TIDE_Data_": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p>IOC - @{items('For_Each_Hash')?['Value']} - @{items('For_Each_Threat_IOC_Of_Type_Hash')?['type']} - @{items('For_Each_Threat_IOC_Of_Type_Hash')?['class']}<br>\n@{variables('html')}</p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "Increment_Comment_Count_For_Hash": {
                                      "runAfter": {
                                        "Add_Hash_TIDE_Data_As_Comment": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "IncrementVariable",
                                      "inputs": {
                                        "name": "comment_count",
                                        "value": 1
                                      }
                                    },
                                    "Set_HTML_With_Hash_TIDE_Data_": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "html",
                                        "value": "<p style=\"height:0px\"><table><tbody> \n<tr><td>Type</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['type']}</td></tr>\n<tr><td>Hash</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['hash']}       @{items('For_Each_Threat_IOC_Of_Type_Hash')?['hash_type']}</td></tr>\n<td>Class</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['class']}</td></tr>\n<tr><td>Profile</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['profile']}</td></tr>\n<tr><td>Property</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['property']}</td></tr>\n<tr><td>Threat Level</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['threat_level']}</td></tr>\n<tr><td>Confidence</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['confidence']}</td>\n</tr>\n<tr><td>Detected</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['detected']}</td></tr>\n<tr><td>Received</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['received']}</td></tr>\n<tr><td>Imported</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['imported']}</td></tr>\n<tr><td>Expiration</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['expiration']}</td></tr>\n<tr><td >Description</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Hash')?['extended']?['notes']}</td></tr>\n<tr><td >Open in CSP</td><td style=\"text-align:left\">@{variables('base_url')}/#/security_research/search/auto/@{items('For_Each_Threat_IOC_Of_Type_Hash')?['hash']}/summary</td></tr>\n</tbody></table></p>"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "greaterOrEquals": [
                                        "@variables('comment_count')",
                                        99
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "runAfter": {},
                            "type": "Foreach"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_TIDE_Data_For_Hash')?['record_count']",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_TIDE_Data_For_Hash": {
                      "runAfter": {},
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash')",
                        "schema": {
                          "properties": {
                            "record_count": {
                              "type": "integer"
                            },
                            "threat": {
                              "items": {
                                "properties": {
                                  "batch_id": {},
                                  "class": {},
                                  "confidence": {},
                                  "confidence_score": {},
                                  "confidence_score_rating": {},
                                  "confidence_score_vector": {},
                                  "detected": {},
                                  "expiration": {},
                                  "extended": {
                                    "properties": {
                                      "cyberint_guid": {},
                                      "notes": {}
                                    },
                                    "type": "object"
                                  },
                                  "hash": {},
                                  "hash_type": {},
                                  "id": {},
                                  "imported": {},
                                  "profile": {},
                                  "property": {},
                                  "received": {},
                                  "risk_score": {},
                                  "risk_score_rating": {},
                                  "risk_score_vector": {},
                                  "threat_level": {},
                                  "threat_score": {},
                                  "threat_score_rating": {},
                                  "threat_score_vector": {},
                                  "type": {},
                                  "up": {}
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash": [
                      "Succeeded",
                      "TimedOut",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Add_Error_Message_For_Hash": {
                        "runAfter": {},
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "error_message",
                          "value": "Error Occurred While Fetching Data For Hash - @{items('For_Each_Hash')?['Value']} With Status Code - @{outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash')['statusCode']}"
                        }
                      },
                      "Increment_Failure_Count_For_Hash": {
                        "runAfter": {
                          "Add_Error_Message_For_Hash": [ "Succeeded" ]
                        },
                        "type": "IncrementVariable",
                        "inputs": {
                          "name": "failure_count",
                          "value": 1
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash')['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "HTTP_Request_To_Get_TIDE_Data_Of_Type_Hash": {
                  "runAfter": {
                    "Set_Entity_Mapping_True_For_Hash": [ "Succeeded" ]
                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "Authorization": "Token @{parameters('API Key')}"
                    },
                    "method": "GET",
                    "queries": {
                      "fields": "@variables('fields_hash')",
                      "hash": "@items('For_Each_Hash')?['Value']",
                      "type": "hash"
                    },
                    "uri": "@{variables('base_url')}/tide/api/data/threats"
                  }
                },
                "Set_Entity_Mapping_True_For_Hash": {
                  "runAfter": {},
                  "type": "SetVariable",
                  "inputs": {
                    "name": "entity_mapping",
                    "value": "@true"
                  }
                }
              },
              "runAfter": {
                "Get_FileHashes_From_Entities": [ "Succeeded" ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "For_Each_Host": {
              "foreach": "@body('Get_Hosts_From_Entities')?['Hosts']",
              "actions": {
                "Condition_To_Check_Host_TIDE_Data_Fetched_Successfully": {
                  "actions": {
                    "Condition_To_Check_If_TIDE_Data_Not_Available_For_Host": {
                      "actions": {
                        "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_Host": {
                          "runAfter": {},
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No TIDE Lookup Results Found For Host -&nbsp;@{items('For_Each_Host')?['NetBiosName']}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Increment_Comment_Count_For_Empty_Response_For_Host": {
                          "runAfter": {
                            "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_Host": [
                              "Succeeded"
                            ]
                          },
                          "type": "IncrementVariable",
                          "inputs": {
                            "name": "comment_count",
                            "value": 1
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_TIDE_Data_For_Host": [ "Succeeded" ]
                      },
                      "else": {
                        "actions": {
                          "For_Each_Threat_IOC_Of_Type_Host": {
                            "foreach": "@body('Parse_TIDE_Data_For_Host')?['threat']",
                            "actions": {
                              "Condition_To_Check_Comment_Limit_Exceed_For_Host": {
                                "actions": {
                                  "Condition_To_Verify_Incident_Has_99_Comments_For_Host": {
                                    "actions": {
                                      "Add_Comment_That_Limit_Has_Been_Exceeded_For_Host": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Comment limit to an incident has been breached.</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@variables('comment_count')",
                                            99
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {},
                                "else": {
                                  "actions": {
                                    "Add_Host_TIDE_Data_As_Comment": {
                                      "runAfter": {
                                        "Set_HTML_With_Host_TIDE_Data": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p>IOC - @{items('For_Each_Host')?['NetBiosName']} - @{items('For_Each_Threat_IOC_Of_Type_Host')?['type']} - @{items('For_Each_Threat_IOC_Of_Type_Host')?['class']}<br>\n@{variables('html')}</p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "Increment_Comment_Count_For_Host": {
                                      "runAfter": {
                                        "Add_Host_TIDE_Data_As_Comment": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "IncrementVariable",
                                      "inputs": {
                                        "name": "comment_count",
                                        "value": 1
                                      }
                                    },
                                    "Set_HTML_With_Host_TIDE_Data": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "html",
                                        "value": "<p style=\"height:0px\"><table><tbody> \n<tr><td>Type</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['type']}</td></tr>\n<tr><td>Host</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['host']}</td></tr>\n<tr><td>Domain</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['domain']}</td></tr>\n<tr><td>URL</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['url']}</td></tr>\n<tr><td>IP</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['ip']}</td></tr>\n<tr><td>Profile</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['profile']}</td></tr>\n<tr><td>Property</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['property']}</td></tr>\n<tr><td>Threat Level</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['threat_level']}</td></tr>\n<tr><td>Confidence</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['confidence']}</td>\n</tr>\n<tr><td>Detected</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['detected']}</td></tr>\n<tr><td>Received</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['received']}</td></tr>\n<tr><td>Imported</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['imported']}</td></tr>\n<tr><td>Expiration</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['expiration']}</td></tr>\n<tr><td >Description</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_Host')?['extended']?['notes']}</td></tr>\n<tr><td >Open in CSP</td><td style=\"text-align:left\">@{variables('base_url')}/#/security_research/search/auto/@{items('For_Each_Threat_IOC_Of_Type_Host')?['host']}/summary</td></tr>\n</tbody></table></p>"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "greaterOrEquals": [
                                        "@variables('comment_count')",
                                        99
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "runAfter": {},
                            "type": "Foreach"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_TIDE_Data_For_Host')?['record_count']",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_TIDE_Data_For_Host": {
                      "runAfter": {},
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('HTTP_Request_To_Get_TIDE_Data_Of_Type_Host')",
                        "schema": {
                          "properties": {
                            "record_count": {
                              "type": "integer"
                            },
                            "threat": {
                              "items": {
                                "properties": {
                                  "class": {},
                                  "confidence": {},
                                  "confidence_score": {},
                                  "confidence_score_rating": {},
                                  "detected": {},
                                  "dga": {},
                                  "domain": {},
                                  "expiration": {},
                                  "extended": {
                                    "properties": {
                                      "cyberint_guid": {},
                                      "notes": {
                                        "type": "string"
                                      },
                                      "references": {}
                                    },
                                    "type": "object"
                                  },
                                  "host": {},
                                  "id": {},
                                  "imported": {},
                                  "profile": {},
                                  "property": {},
                                  "received": {},
                                  "risk_score": {},
                                  "risk_score_rating": {},
                                  "threat_level": {},
                                  "threat_score": {},
                                  "threat_score_rating": {},
                                  "type": {
                                    "type": "string"
                                  },
                                  "up": {}
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "HTTP_Request_To_Get_TIDE_Data_Of_Type_Host": [
                      "Succeeded",
                      "TimedOut",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Add_Error_Message_For_Host": {
                        "runAfter": {},
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "error_message",
                          "value": "Error Occurred While Fetching Data For Host - @{items('For_Each_Host')?['NetBiosName']} With Status Code - @{outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_Host')['statusCode']}"
                        }
                      },
                      "Increment_Failure_Count_For_Host": {
                        "runAfter": {
                          "Add_Error_Message_For_Host": [ "Succeeded" ]
                        },
                        "type": "IncrementVariable",
                        "inputs": {
                          "name": "failure_count",
                          "value": 1
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_Host')['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "HTTP_Request_To_Get_TIDE_Data_Of_Type_Host": {
                  "runAfter": {
                    "Set_Entity_Mapping_True_For_Host": [ "Succeeded" ]
                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "Authorization": "Token @{parameters('API Key')}"
                    },
                    "method": "GET",
                    "queries": {
                      "fields": "@variables('fields_host')",
                      "host": "@items('For_Each_Host')?['NetBiosName']",
                      "type": "host"
                    },
                    "uri": "@{variables('base_url')}/tide/api/data/threats"
                  }
                },
                "Set_Entity_Mapping_True_For_Host": {
                  "runAfter": {},
                  "type": "SetVariable",
                  "inputs": {
                    "name": "entity_mapping",
                    "value": "@true"
                  }
                }
              },
              "runAfter": {
                "Get_Hosts_From_Entities": [ "Succeeded" ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "For_Each_IP": {
              "foreach": "@body('Get_IPs_From_Entities')?['IPs']",
              "actions": {
                "Condition_To_Check_IP_TIDE_Data_Fetched_Successfully": {
                  "actions": {
                    "Condition_To_Check_If_TIDE_Data_Not_Available_For_IP": {
                      "actions": {
                        "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_IP": {
                          "runAfter": {},
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No TIDE Lookup Results Found For IP -&nbsp;@{items('For_Each_IP')?['Address']}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Increment_Comment_Count_For_Empty_Response_For_IP": {
                          "runAfter": {
                            "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_IP": [
                              "Succeeded"
                            ]
                          },
                          "type": "IncrementVariable",
                          "inputs": {
                            "name": "comment_count",
                            "value": 1
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_TIDE_Data_For_IP": [ "Succeeded" ]
                      },
                      "else": {
                        "actions": {
                          "For_Each_Threat_IOC_Of_Type_IP": {
                            "foreach": "@body('Parse_TIDE_Data_For_IP')?['threat']",
                            "actions": {
                              "Condition_To_Check_Comment_Limit_Exceed_For_IP": {
                                "actions": {
                                  "Condition_To_verify_Incident_Has_99_Comments_For_IP": {
                                    "actions": {
                                      "Add_Comment_That_Limit_Has_Been_Exceeded_For_IP": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Comment limit to an incident has been breached.</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@variables('comment_count')",
                                            99
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {},
                                "else": {
                                  "actions": {
                                    "Add_IP_TIDE_Data_As_Comment": {
                                      "runAfter": {
                                        "Set_HTML_With_IP_TIDE_Data": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p>IOC - @{items('For_Each_IP')?['Address']} - @{items('For_Each_Threat_IOC_Of_Type_IP')?['type']} - @{items('For_Each_Threat_IOC_Of_Type_IP')?['class']}<br>\n@{variables('html')}</p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "Increment_Comment_Count_For_IP": {
                                      "runAfter": {
                                        "Add_IP_TIDE_Data_As_Comment": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "IncrementVariable",
                                      "inputs": {
                                        "name": "comment_count",
                                        "value": 1
                                      }
                                    },
                                    "Set_HTML_With_IP_TIDE_Data": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "html",
                                        "value": "<p style=\"height:0px\"><table><tbody> \n<tr><td>Type</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['type']}</td></tr>\n<tr><td>IP</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['ip']}</td></tr>\n<tr><td>Profile</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['profile']}</td></tr>\n<tr><td>Class</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['class']}</td></tr>\n<tr><td>Property</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['profile']}</td></tr>\n<tr><td>Threat Level</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['threat_level']}</td></tr>\n<tr><td>Confidence</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['confidence']}</td>\n</tr>\n<tr><td>Detected</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['detected']}</td></tr>\n<tr><td>Received</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['received']}</td></tr>\n<tr><td>Imported</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['imported']}</td></tr>\n<tr><td>Expiration</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['expiration']}</td></tr>\n<tr><td >Description</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_IP')?['extended']?['notes']}</td></tr>\n<tr><td >Open in CSP</td><td style=\"text-align:left\">@{variables('base_url')}/#/security_research/search/auto/@{items('For_Each_Threat_IOC_Of_Type_IP')?['ip']}/summary</td></tr>\n</tbody></table></p>"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "greaterOrEquals": [
                                        "@variables('comment_count')",
                                        99
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "runAfter": {},
                            "type": "Foreach"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_TIDE_Data_For_IP')?['record_count']",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_TIDE_Data_For_IP": {
                      "runAfter": {},
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('HTTP_Request_To_Get_TIDE_Data_Of_Type_IP')",
                        "schema": {
                          "properties": {
                            "record_count": {
                              "type": "integer"
                            },
                            "threat": {
                              "items": {
                                "properties": {
                                  "batch_id": {},
                                  "class": {},
                                  "confidence": {},
                                  "detected": {},
                                  "expiration": {},
                                  "extended": {
                                    "properties": {
                                      "cyberint_guid": {},
                                      "notes": {}
                                    },
                                    "type": "object"
                                  },
                                  "id": {},
                                  "imported": {},
                                  "ip": {},
                                  "profile": {},
                                  "property": {},
                                  "received": {},
                                  "threat_level": {},
                                  "type": {},
                                  "up": {}
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "HTTP_Request_To_Get_TIDE_Data_Of_Type_IP": [
                      "Succeeded",
                      "TimedOut",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Add_Error_Message_For_IP": {
                        "runAfter": {},
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "error_message",
                          "value": "Error Occurred While Fetching Data For IP - @{items('For_Each_IP')?['Address']}  With Status Code - @{outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_IP')['statusCode']}"
                        }
                      },
                      "Increment_Failure_Count_For_IP": {
                        "runAfter": {
                          "Add_Error_Message_For_IP": [ "Succeeded" ]
                        },
                        "type": "IncrementVariable",
                        "inputs": {
                          "name": "failure_count",
                          "value": 1
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_IP')['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "HTTP_Request_To_Get_TIDE_Data_Of_Type_IP": {
                  "runAfter": {
                    "Set_Entity_Mapping_True_For_IP": [ "Succeeded" ]
                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "Authorization": "Token @{parameters('API Key')}"
                    },
                    "method": "GET",
                    "queries": {
                      "fields": "@variables('fields_ip')",
                      "ip": "@items('For_Each_IP')?['Address']",
                      "type": "ip"
                    },
                    "uri": "@{variables('base_url')}/tide/api/data/threats"
                  }
                },
                "Set_Entity_Mapping_True_For_IP": {
                  "runAfter": {},
                  "type": "SetVariable",
                  "inputs": {
                    "name": "entity_mapping",
                    "value": "@true"
                  }
                }
              },
              "runAfter": {
                "Get_IPs_From_Entities": [ "Succeeded" ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "For_Each_URL": {
              "foreach": "@body('Get_URLs_From_Entities')?['URLs']",
              "actions": {
                "Condition_To_Check_URL_TIDE_Data_Fetched_Successfully": {
                  "actions": {
                    "Condition_To_Check_If_TIDE_Data_Not_Available_For_urls": {
                      "actions": {
                        "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_URL": {
                          "runAfter": {},
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "message": "<p>No TIDE Lookup Results Found For URL -&nbsp;@{items('For_Each_URL')?['Url']}</p>"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                          }
                        },
                        "Increment_Comment_Count_For_Empty_Response_For_URL": {
                          "runAfter": {
                            "Add_Comment_To_Incident_If_No_TIDE_Data_Found_For_URL": [
                              "Succeeded"
                            ]
                          },
                          "type": "IncrementVariable",
                          "inputs": {
                            "name": "comment_count",
                            "value": 1
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_TIDE_Data_For_URL": [ "Succeeded" ]
                      },
                      "else": {
                        "actions": {
                          "For_Each_Threat_IOC_Of_Type_URL": {
                            "foreach": "@body('Parse_TIDE_Data_For_URL')?['threat']",
                            "actions": {
                              "Condition_To_Check_Comment_Limit_Exceed_For_urls": {
                                "actions": {
                                  "Condition_To_Verify_That_Incident_Has_99_Comments_For_urls": {
                                    "actions": {
                                      "Add_Comment_That_Limit_Has_Been_Exceeded_For_URL": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "message": "<p>Comment limit to an incident has been breached.</p>"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/Incidents/Comment"
                                        }
                                      }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@variables('comment_count')",
                                            99
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {},
                                "else": {
                                  "actions": {
                                    "Add_URL_TIDE_Data_As_Comment": {
                                      "runAfter": {
                                        "Set_HTML_With_URL_TIDE_Data": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "body": {
                                          "incidentArmId": "@triggerBody()?['object']?['id']",
                                          "message": "<p>IOC - @{items('For_Each_URL')?['Url']} - @{items('For_Each_Threat_IOC_Of_Type_URL')?['type']} - @{items('For_Each_Threat_IOC_Of_Type_URL')?['class']}<br>\n@{variables('html')}</p>"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "path": "/Incidents/Comment"
                                      }
                                    },
                                    "Increment_Comment_Count_For_URL": {
                                      "runAfter": {
                                        "Add_URL_TIDE_Data_As_Comment": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "IncrementVariable",
                                      "inputs": {
                                        "name": "comment_count",
                                        "value": 1
                                      }
                                    },
                                    "Set_HTML_With_URL_TIDE_Data": {
                                      "runAfter": {},
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "html",
                                        "value": "<p style=\"height:0px\"><table><tbody> \n<tr><td>Type</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['type']}</td></tr>\n<tr><td>Host</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['host']}</td></tr>\n<tr><td>Domain</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['domain']}</td></tr>\n<tr><td>URL</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['url']}</td></tr>\n<tr><td>Class</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['class']}</td>\n</tr>\n<tr><td>Profile</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['profile']}</td></tr>\n<tr><td>Property</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['property']}</td></tr>\n<tr><td>Threat Level</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['threat_level']}</td></tr>\n<tr><td>Confidence</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['confidence']}</td>\n</tr>\n<tr><td>Detected</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['detected']}</td></tr>\n<tr><td>Received</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['received']}</td></tr>\n<tr><td>Imported</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['imported']}</td></tr>\n<tr><td>Expiration</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['expiration']}</td></tr>\n<tr><td >Description</td><td style=\"text-align:left\">@{items('For_Each_Threat_IOC_Of_Type_URL')?['extended']?['notes']}</td></tr>\n<tr><td >Open in CSP</td><td style=\"text-align:left\">@{variables('base_url')}/#/security_research/search/auto/@{items('For_Each_Threat_IOC_Of_Type_URL')?['url']}/summary</td></tr>\n</tbody></table></p>"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "greaterOrEquals": [
                                        "@variables('comment_count')",
                                        99
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "runAfter": {},
                            "type": "Foreach"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_TIDE_Data_For_URL')?['record_count']",
                              0
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Parse_TIDE_Data_For_URL": {
                      "runAfter": {},
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('HTTP_Request_To_Get_TIDE_Data_Of_Type_URL')",
                        "schema": {
                          "properties": {
                            "record_count": {
                              "type": "integer"
                            },
                            "threat": {
                              "items": {
                                "properties": {
                                  "batch_id": {},
                                  "class": {},
                                  "confidence": {},
                                  "confidence_score": {},
                                  "confidence_score_rating": {},
                                  "confidence_score_vector": {},
                                  "detected": {},
                                  "domain": {},
                                  "expiration": {},
                                  "extended": {
                                    "properties": {
                                      "attack_chain": {},
                                      "cyberint_guid": {},
                                      "notes": {},
                                      "protocol": {},
                                      "references": {}
                                    },
                                    "type": "object"
                                  },
                                  "host": {},
                                  "id": {},
                                  "imported": {},
                                  "profile": {},
                                  "property": {},
                                  "received": {},
                                  "risk_score": {},
                                  "risk_score_rating": {},
                                  "risk_score_vector": {},
                                  "threat_level": {},
                                  "threat_score": {},
                                  "threat_score_rating": {},
                                  "threat_score_vector": {},
                                  "tld": {},
                                  "type": {},
                                  "up": {},
                                  "url": {}
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "HTTP_Request_To_Get_TIDE_Data_Of_Type_URL": [
                      "Succeeded",
                      "Failed",
                      "TimedOut"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Add_Error_Message_For_URL": {
                        "runAfter": {},
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "error_message",
                          "value": "Error Occurred While Fetching Data For URL - @{items('For_Each_URL')?['Url']} With Status Code - @{outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_URL')['statusCode']}"
                        }
                      },
                      "Increment_Failure_Count_For_URL": {
                        "runAfter": {
                          "Add_Error_Message_For_URL": [ "Succeeded" ]
                        },
                        "type": "IncrementVariable",
                        "inputs": {
                          "name": "failure_count",
                          "value": 1
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('HTTP_Request_To_Get_TIDE_Data_Of_Type_URL')['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "HTTP_Request_To_Get_TIDE_Data_Of_Type_URL": {
                  "runAfter": {
                    "Set_Entity_Mapping_True_For_URL": [ "Succeeded" ]
                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "Authorization": "Token @{parameters('API Key')}"
                    },
                    "method": "GET",
                    "queries": {
                      "fields": "@variables('fields_url')",
                      "type": "url",
                      "url": "@items('For_Each_URL')?['Url']"
                    },
                    "uri": "@{variables('base_url')}/tide/api/data/threats"
                  }
                },
                "Set_Entity_Mapping_True_For_URL": {
                  "runAfter": {},
                  "type": "SetVariable",
                  "inputs": {
                    "name": "entity_mapping",
                    "value": "@true"
                  }
                }
              },
              "runAfter": {
                "Get_URLs_From_Entities": [ "Succeeded" ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "Get_FileHashes_From_Entities": {
              "runAfter": {
                "For_Each_URL": [ "Succeeded", "TimedOut", "Failed" ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/entities/filehash"
              }
            },
            "Get_Hosts_From_Entities": {
              "runAfter": {
                "Initialize_Failure_Count": [ "Succeeded" ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/entities/host"
              }
            },
            "Get_IPs_From_Entities": {
              "runAfter": {
                "For_Each_Host": [ "Succeeded", "TimedOut", "Failed" ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/entities/ip"
              }
            },
            "Get_URLs_From_Entities": {
              "runAfter": {
                "For_Each_IP": [ "Succeeded", "TimedOut", "Failed" ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/entities/url"
              }
            },
            "Initialize_Base_URL": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "base_url",
                    "type": "string",
                    "value": "@parameters('BaseUrl')"
                  }
                ]
              }
            },
            "Initialize_Comment_Count": {
              "runAfter": {
                "Initialize_Entity_Mapping_False": [ "Succeeded" ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "comment_count",
                    "type": "integer",
                    "value": "@length(triggerBody()?['object']?['properties']?['Comments'])"
                  }
                ]
              }
            },
            "Initialize_Entity_Mapping_False": {
              "runAfter": {
                "Initialize_HTML": [ "Succeeded" ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "entity_mapping",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_Error_Message": {
              "runAfter": {
                "Initialize_Comment_Count": [ "Succeeded" ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "error_message",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_Failure_Count": {
              "runAfter": {
                "Initialize_Error_Message": [ "Succeeded" ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "failure_count",
                    "type": "integer",
                    "value": 0
                  }
                ]
              }
            },
            "Initialize_Fields_For_Hash": {
              "runAfter": {
                "Initialize_Fields_For_URL": [ "Succeeded" ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "fields_hash",
                    "type": "string",
                    "value": "id,type,ip,url,tld,email,hash,hash_type,host,domain,profile,property,class,threat_level,confidence,detected,received,imported,expiration,dga,up,threat_score,threat_score_rating,confidence_score,confidence_score_rating,risk_score,risk_score_rating,extended"
                  }
                ]
              }
            },
            "Initialize_Fields_For_Host": {
              "runAfter": {
                "Initialize_Base_URL": [ "Succeeded" ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "fields_host",
                    "type": "string",
                    "value": "id,type,host,domain,profile,property,class,threat_level,confidence,detected,received,imported,expiration,dga,up,threat_score,threat_score_rating,confidence_score,confidence_score_rating,risk_score,risk_score_rating,extended"
                  }
                ]
              }
            },
            "Initialize_Fields_For_IP": {
              "runAfter": {
                "Initialize_Fields_For_Host": [ "Succeeded" ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "fields_ip",
                    "type": "string",
                    "value": "id,type,ip,domain,profile,property,class,threat_level,confidence,detected,received,imported,expiration,dga,up,threat_score,threat_score_rating,confidence_score,confidence_score_rating,risk_score,risk_score_rating,extended"
                  }
                ]
              }
            },
            "Initialize_Fields_For_URL": {
              "runAfter": {
                "Initialize_Fields_For_IP": [ "Succeeded" ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "fields_url",
                    "type": "string",
                    "value": "id,type,url,tld,email,hash,hash_type,host,domain,profile,property,class,threat_level,confidence,detected,received,imported,expiration,dga,up,threat_score,threat_score_rating,confidence_score,confidence_score_rating,risk_score,risk_score_rating,extended"
                  }
                ]
              }
            },
            "Initialize_HTML": {
              "runAfter": {
                "Initialize_Fields_For_Hash": [ "Succeeded" ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "html",
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuresentinel": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          }
        }
      },
      "name": "[parameters('PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[resourceGroup().location]",
      "tags": {
        "hidden-SentinelTemplateName": "Infoblox-TIDE-Lookup-Comment-Enrichment",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('MicrosoftSentinelConnectionName')]",
      "location": "[resourceGroup().location]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('MicrosoftSentinelConnectionName')]",
        "customParameterValues": {},
        "parameterValueType": "Alternative",
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
        }
      }
    }
  ]
}
