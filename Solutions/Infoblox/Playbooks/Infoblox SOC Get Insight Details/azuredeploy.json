{
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion":  "1.0.0.0",
    "metadata":  {
        "title":  "Infoblox-SOC-Get-Insight-Details",
        "description":  "Leverages the Infoblox SOC Insights API to enrich a Microsoft Sentinel Incident triggered by an Infoblox SOC Insight & ingest Insight details into custom InfobloxInsight tables. The tables are used to build the Infoblox SOC Insights Workbook. This playbook can be configured to run automatically when an incident occurs (recommended) or run on demand.",
        "prerequisites":  [
            "1. User must have a valid Infoblox API Key",
            "2. User must have a valid Workspace ID",
            "3. User must have a valid Workspace Key",
            "4. User must have created an analytics rule from a rule template",
            "5. **Configure the associated automation rule as specified below:**",
            "a. Go to Microsoft Sentinel → *select your workspace* → Automation → Create → Automation rule",
            "b. Set Automation rule name",
            "c. Condition → If",
                "A. Incident provider → Select Microsoft Sentinel",
                "B. Analytic rule name → Select Analytic rule name created using step 4",
            "d. Action → Select Run playbook",
            "e. Select Infoblox-SOC-Get-Insight-Details playbook",
            "f. Click on Apply"
        ],
        "postDeployment":  [
            "**a. Authorize connections**",
            "Once deployment is complete, authorize each connection.",
            "1. Go to your logic app -> API connections -> Select azuremonitorlogs connection resource",
            "2. Go to General -> edit API connection",
            "3. Click Authorize",
            "4. Sign in",
            "5. Click Save",
            "6. Repeat steps for other connections",
            "**b. Assign Role to Update in incident**",
            "Assign role to this playbook.",
            "1. Go to Log Analytics Workspace → *select your workspace* → Access Control → Add",
            "2. Add role assignment",
            "3. Assignment type: Job function roles -> Add 'Microsoft Sentinel Contributor' as a Role",
            "4. Members: select managed identity for assigned access to and add your logic app as member",
            "5. Click on review+assign"
        ],
        "prerequisitesDeployTemplateFile": "",
        "entities": [
            "securitygroup",
            "malware"
        ],
        "tags":  [ "Enrichment"
        ],
        "lastUpdateTime": "2024-07-19T16:15:48.355Z",
        "support":  {
            "tier":  "Community",
            "armtemplate":  "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author":  {
            "name":  "Infoblox"
        }
    },
    "parameters":  {
        "PlaybookName":  {
            "defaultValue":  "Infoblox-SOC-Get-Insight-Details",
            "type":  "string"
        },
        "Infoblox API Key":  {
            "type":  "Securestring",
            "metadata":  {
                "description":  "Enter value for Infoblox API Key"
            }
        },
        "Assets Data Ingestion": {
            "type": "string",
            "defaultValue": "false",
            "metadata": {
                "description": "Provide true if you want to enable Assets data ingestion from SOC Insights. Default is false, Allowed values are true and false"
            },
            "allowedValues": [
                "true",
                "false"
            ]
        },
        "Comments Data Ingestion": {
            "type": "string",
            "defaultValue": "false",
            "metadata": {
                "description": "Provide true if you want to enable Comments data ingestion from SOC Insights. Default is false, Allowed values are true and false"
            },
            "allowedValues": [
                "true",
                "false"
            ]
        },
        "Events Data Ingestion": {
            "type": "string",
            "defaultValue": "false",
            "metadata": {
                "description": "Provide true if you want to enable Events data ingestion from SOC Insights. Default is false, Allowed values are true and false"
            },
            "allowedValues": [
                "true",
                "false"
            ]
        },
        "Indicators Data Ingestion": {
            "type": "string",
            "defaultValue": "false",
            "metadata": {
                "description": "Provide true if you want to enable Indicators data ingestion from SOC Insights. Default is false, Allowed values are true and false"
            },
            "allowedValues": [
                "true",
                "false"
            ]
        }
    },
    "variables": {
        "AzureloganalyticsdatacollectorConnectionName":  "[concat('Azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
        "MicrosoftSentinelConnectionName":  "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]"
    },
    "resources":  [
        {
            "properties":  {
                "provisioningState":  "Succeeded",
                "state":  "Enabled",
                "definition":  {
                    "$schema":  "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion":  "1.0.0.0",
                    "parameters":  {
                        "$connections":  {
                            "defaultValue":  {
                            },
                            "type":  "Object"
                        },
                        "Infoblox API Key":  {
                            "defaultValue":  "[trim(parameters('Infoblox API Key'))]",
                            "type":  "string"
                        },
                        "Assets Data Ingestion": {
                            "defaultValue": "[trim(parameters('Assets Data Ingestion'))]",
                            "type": "string"
                        },
                        "Comments Data Ingestion": {
                            "defaultValue": "[trim(parameters('Comments Data Ingestion'))]",
                            "type": "string"
                        },
                        "Events Data Ingestion": {
                            "defaultValue": "[trim(parameters('Events Data Ingestion'))]",
                            "type": "string"
                        },
                        "Indicators Data Ingestion": {
                            "defaultValue": "[trim(parameters('Indicators Data Ingestion'))]",
                            "type": "string"
                        }
                    },
                    "triggers":  {
                        "Microsoft_Sentinel_incident":  {
                            "type":  "ApiConnectionWebhook",
                            "inputs":  {
                                "body":  {
                                    "callback_url":  "@{listCallbackUrl()}"
                                },
                                "host":  {
                                    "connection":  {
                                        "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path":  "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "For_Each_Object_GUID": {
                            "type": "Foreach",
                            "foreach": "@body('Filter_array_for_Object_GUID_Entity')",
                            "actions": {
                                "Test_Connection_to_Infoblox_CSP": {
                                    "type": "Http",
                                    "inputs": {
                                        "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_Each_Object_GUID')?['properties']?['objectGuid']}",
                                        "method": "GET",
                                        "headers": {
                                            "Authorization": "Token @{parameters('Infoblox API Key')}"
                                        }
                                    }
                                },
                                "Condition_To_Verify_Test_Connection_Is_Successful": {
                                    "type": "If",
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('Test_Connection_to_Infoblox_CSP')?['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "actions": {},
                                    "else": {
                                        "actions": {
                                            "Set_Status_Code": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "status_code",
                                                    "value": "@{outputs('Test_Connection_to_Infoblox_CSP')?['statusCode']}"
                                                }
                                            },
                                            "Set_Error_Message": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "error_message",
                                                    "value": "Error: @{body('Test_Connection_to_Infoblox_CSP')}"
                                                },
                                                "runAfter": {
                                                    "Set_Status_Code": [
                                                        "Succeeded"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Test_Connection_to_Infoblox_CSP": [
                                            "Succeeded",
                                            "TimedOut",
                                            "Skipped",
                                            "Failed"
                                        ]
                                    }
                                }
                            },
                            "runAfter": {
                                "Filter_array_for_Object_GUID_Entity": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "For_each_Insight_ID": {
                            "type": "Foreach",
                            "foreach": "@body('Filter_array_for_Object_GUID_Entity')",
                            "actions": {
                                "Add_InfobloxInsightID_Tag": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "put",
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "tagsToAdd": {
                                                "TagsToAdd": [
                                                    {
                                                        "Tag": "InfobloxInsightID: @{items('For_each_Insight_ID')?['properties']?['objectGuid']}"
                                                    }
                                                ]
                                            }
                                        },
                                        "path": "/Incidents"
                                    }
                                },
                                "Add_Summary_data_if_observed_via_CDC": {
                                    "type": "If",
                                    "expression": {
                                        "and": [
                                            {
                                                "contains": [
                                                    "@body('Add_InfobloxInsightID_Tag')?['properties']?['description']",
                                                    "Observed via CDC"
                                                ]
                                            }
                                        ]
                                    },
                                    "actions": {
                                        "Get_Summary_Data": {
                                            "type": "Http",
                                            "inputs": {
                                                "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}",
                                                "method": "GET",
                                                "headers": {
                                                    "Authorization": "Token @{parameters('Infoblox API Key')}"
                                                }
                                            }
                                        },
                                        "Parse_Summary_JSON": {
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Get_Summary_Data')",
                                                "schema": {
                                                    "properties": {
                                                        "insight": {
                                                            "properties": {
                                                                "changer": {
                                                                    "type": "string"
                                                                },
                                                                "dateChanged": {
                                                                    "type": "string"
                                                                },
                                                                "description": {
                                                                    "type": "string"
                                                                },
                                                                "eventsBlockedCount": {
                                                                    "type": "string"
                                                                },
                                                                "eventsNotBlockedCount": {
                                                                    "type": "string"
                                                                },
                                                                "feedSource": {
                                                                    "type": "string"
                                                                },
                                                                "insightId": {
                                                                    "type": "string"
                                                                },
                                                                "mostRecentAt": {
                                                                    "type": "string"
                                                                },
                                                                "numEvents": {
                                                                    "type": "string"
                                                                },
                                                                "persistent": {
                                                                    "type": "string"
                                                                },
                                                                "persistentDate": {
                                                                    "type": "string"
                                                                },
                                                                "priorityText": {
                                                                    "type": "string"
                                                                },
                                                                "spreading": {
                                                                    "type": "string"
                                                                },
                                                                "spreadingDate": {
                                                                    "type": "string"
                                                                },
                                                                "startedAt": {
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "type": "string"
                                                                },
                                                                "tClass": {
                                                                    "type": "string"
                                                                },
                                                                "tFamily": {
                                                                    "type": "string"
                                                                },
                                                                "threatType": {
                                                                    "type": "string"
                                                                },
                                                                "userComment": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "runAfter": {
                                                "Get_Summary_Data": [
                                                    "Succeeded"
                                                ]
                                            }
                                        },
                                        "Send_Summary_(Insight)_Data": {
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "body": "@addProperty(addProperty(body('Parse_Summary_JSON')?['insight'], 'DataObservedVia', 'CDC'), 'InfobloxInsightLogType', 'Insight')",
                                                "headers": {
                                                    "Log-Type": "InfobloxInsight"
                                                },
                                                "path": "/api/logs"
                                            },
                                            "runAfter": {
                                                "Parse_Summary_JSON": [
                                                    "Succeeded"
                                                ]
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "runAfter": {
                                        "Add_InfobloxInsightID_Tag": [
                                            "Succeeded"
                                        ]
                                    }
                                },
                                "Condition_To_Check_Assets_Data_Ingestion_Flag": {
                                    "type": "If",
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('assets_data_ingestion')",
                                                    "true"
                                                ]
                                            }
                                        ]
                                    },
                                    "actions": {
                                        "Get_Asset_Data": {
                                            "type": "Http",
                                            "inputs": {
                                                "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}/assets",
                                                "method": "GET",
                                                "headers": {
                                                    "Authorization": "Token @{parameters('Infoblox API Key')}"
                                                }
                                            }
                                        },
                                        "Parse_Assets_JSON": {
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Get_Asset_Data')",
                                                "schema": {
                                                    "properties": {
                                                        "assets": {
                                                            "items": {
                                                                "properties": {
                                                                    "cid": {
                                                                        "type": "string"
                                                                    },
                                                                    "cmac": {
                                                                        "type": "string"
                                                                    },
                                                                    "count": {
                                                                        "type": "integer"
                                                                    },
                                                                    "location": {
                                                                        "type": "string"
                                                                    },
                                                                    "os_version": {
                                                                        "type": "string"
                                                                    },
                                                                    "qip": {
                                                                        "type": "string"
                                                                    },
                                                                    "threat_indicator_distinct_count": {
                                                                        "type": "string"
                                                                    },
                                                                    "threat_level_max": {
                                                                        "type": "string"
                                                                    },
                                                                    "time_max": {
                                                                        "type": "string"
                                                                    },
                                                                    "time_min": {
                                                                        "type": "string"
                                                                    },
                                                                    "user": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "runAfter": {
                                                "Get_Asset_Data": [
                                                    "Succeeded"
                                                ]
                                            }
                                        },
                                        "Condition_To_Ingest_Assets_Data_If_It_Is_Not_Null": {
                                            "type": "If",
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('Parse_Assets_JSON')?['assets']",
                                                                "@null"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "actions": {
                                                "For_each_Asset": {
                                                    "type": "Foreach",
                                                    "foreach": "@body('Parse_Assets_JSON')?['assets']",
                                                    "actions": {
                                                        "Send_Asset_Data": {
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "body": "@addProperty(addProperty(items('For_Each_Asset'), 'InfobloxInsightID', items('For_each_Insight_ID')?['properties']?['objectGuid']), 'InfobloxInsightLogType', 'Asset')",
                                                                "headers": {
                                                                    "Log-Type": "InfobloxInsightAssets"
                                                                },
                                                                "path": "/api/logs"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "else": {
                                                "actions": {}
                                            },
                                            "runAfter": {
                                                "Parse_Assets_JSON": [
                                                    "Succeeded"
                                                ]
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "runAfter": {
                                        "Add_InfobloxInsightID_Tag": [
                                            "Succeeded"
                                        ]
                                    }
                                },
                                "Condition_To_Check_Indicators_Data_Ingestion_Flag": {
                                    "type": "If",
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('indicators_data_ingestion')",
                                                    "true"
                                                ]
                                            }
                                        ]
                                    },
                                    "actions": {
                                        "Get_Indicator_Data": {
                                            "type": "Http",
                                            "inputs": {
                                                "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}/indicators",
                                                "method": "GET",
                                                "headers": {
                                                    "Authorization": "Token @{parameters('Infoblox API Key')}"
                                                }
                                            }
                                        },
                                        "Parse_Indicator_JSON": {
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Get_Indicator_Data')",
                                                "schema": {
                                                    "properties": {
                                                        "indicators": {
                                                            "items": {
                                                                "properties": {
                                                                    "action": {
                                                                        "type": "string"
                                                                    },
                                                                    "actor": {
                                                                        "type": "string"
                                                                    },
                                                                    "confidence": {
                                                                        "type": "string"
                                                                    },
                                                                    "count": {
                                                                        "type": "integer"
                                                                    },
                                                                    "feed_name": {
                                                                        "type": "string"
                                                                    },
                                                                    "indicator": {
                                                                        "type": "string"
                                                                    },
                                                                    "threat_level_max": {
                                                                        "type": "string"
                                                                    },
                                                                    "time_max": {
                                                                        "type": "string"
                                                                    },
                                                                    "time_min": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "runAfter": {
                                                "Get_Indicator_Data": [
                                                    "Succeeded"
                                                ]
                                            }
                                        },
                                        "Condition_To_Ingest_Indicator_Data_If_It_Is_Not_Null": {
                                            "type": "If",
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('Parse_Indicator_JSON')?['indicators']",
                                                                "@null"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "actions": {
                                                "For_each_Indicator": {
                                                    "type": "Foreach",
                                                    "foreach": "@body('Parse_Indicator_JSON')?['indicators']",
                                                    "actions": {
                                                        "Send_Indicator_Data": {
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "body": "@addProperty(addProperty(items('For_Each_Indicator'), 'InfobloxInsightID', items('For_each_Insight_ID')?['properties']?['objectGuid']), 'InfobloxInsightLogType', 'Indicator')\r\n",
                                                                "headers": {
                                                                    "Log-Type": "InfobloxInsightIndicators"
                                                                },
                                                                "path": "/api/logs"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "else": {
                                                "actions": {}
                                            },
                                            "runAfter": {
                                                "Parse_Indicator_JSON": [
                                                    "Succeeded"
                                                ]
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "runAfter": {
                                        "Add_InfobloxInsightID_Tag": [
                                            "Succeeded"
                                        ]
                                    }
                                },
                                "Condition_To_Check_Events_Data_Ingestion_Flag": {
                                    "type": "If",
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('events_data_ingestion')",
                                                    "true"
                                                ]
                                            }
                                        ]
                                    },
                                    "actions": {
                                        "Get_Event_Data": {
                                            "type": "Http",
                                            "inputs": {
                                                "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}/events",
                                                "method": "GET",
                                                "headers": {
                                                    "Authorization": "Token @{parameters('Infoblox API Key')}"
                                                }
                                            }
                                        },
                                        "Parse_Event_JSON": {
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Get_Event_Data')",
                                                "schema": {
                                                    "properties": {
                                                        "events": {
                                                            "items": {
                                                                "properties": {
                                                                    "action": {
                                                                        "type": "string"
                                                                    },
                                                                    "class": {
                                                                        "type": "string"
                                                                    },
                                                                    "confidence_level": {
                                                                        "type": "string"
                                                                    },
                                                                    "detected": {
                                                                        "type": "string"
                                                                    },
                                                                    "deviceIp": {
                                                                        "type": "string"
                                                                    },
                                                                    "device_country": {
                                                                        "type": "string"
                                                                    },
                                                                    "device_name": {
                                                                        "type": "string"
                                                                    },
                                                                    "device_region": {
                                                                        "type": "string"
                                                                    },
                                                                    "dhcp_fingerprint": {
                                                                        "type": "string"
                                                                    },
                                                                    "dns_view": {
                                                                        "type": "string"
                                                                    },
                                                                    "feed": {
                                                                        "type": "string"
                                                                    },
                                                                    "mac_address": {
                                                                        "type": "string"
                                                                    },
                                                                    "os_version": {
                                                                        "type": "string"
                                                                    },
                                                                    "policy": {
                                                                        "type": "string"
                                                                    },
                                                                    "property": {
                                                                        "type": "string"
                                                                    },
                                                                    "query": {
                                                                        "type": "string"
                                                                    },
                                                                    "query_type": {
                                                                        "type": "string"
                                                                    },
                                                                    "response": {
                                                                        "type": "string"
                                                                    },
                                                                    "response_country": {
                                                                        "type": "string"
                                                                    },
                                                                    "response_region": {
                                                                        "type": "string"
                                                                    },
                                                                    "source": {
                                                                        "type": "string"
                                                                    },
                                                                    "threat_family": {
                                                                        "type": "string"
                                                                    },
                                                                    "threat_indicator": {
                                                                        "type": "string"
                                                                    },
                                                                    "threat_level": {
                                                                        "type": "string"
                                                                    },
                                                                    "user": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "runAfter": {
                                                "Get_Event_Data": [
                                                    "Succeeded"
                                                ]
                                            }
                                        },
                                        "Condition_To_Ingest_Event_Data_If_It_Is_Not_Null": {
                                            "type": "If",
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('Parse_Event_JSON')?['events']",
                                                                "@null"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "actions": {
                                                "For_each_Event": {
                                                    "type": "Foreach",
                                                    "foreach": "@body('Parse_Event_JSON')?['events']",
                                                    "actions": {
                                                        "Send_Event_Data": {
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "body": "@addProperty(addProperty(items('For_Each_Event'), 'InfobloxInsightID', items('For_each_Insight_ID')?['properties']?['objectGuid']), 'InfobloxInsightLogType', 'Event')",
                                                                "headers": {
                                                                    "Log-Type": "InfobloxInsightEvents"
                                                                },
                                                                "path": "/api/logs"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "else": {
                                                "actions": {}
                                            },
                                            "runAfter": {
                                                "Parse_Event_JSON": [
                                                    "Succeeded"
                                                ]
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "runAfter": {
                                        "Add_InfobloxInsightID_Tag": [
                                            "Succeeded"
                                        ]
                                    }
                                },
                                "Condition_To_Check_Comments_Data_Ingestion_Flag": {
                                    "type": "If",
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('comments_data_ingestion')",
                                                    "true"
                                                ]
                                            }
                                        ]
                                    },
                                    "actions": {
                                        "Get_Comment_Data": {
                                            "type": "Http",
                                            "inputs": {
                                                "uri": "https://csp.infoblox.com/api/v1/insights/@{items('For_each_Insight_ID')?['properties']?['objectGuid']}/comments",
                                                "method": "GET",
                                                "headers": {
                                                    "Authorization": "Token @{parameters('Infoblox API Key')}"
                                                }
                                            }
                                        },
                                        "Parse_Comment_JSON": {
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Get_Comment_Data')",
                                                "schema": {
                                                    "properties": {
                                                        "comments": {
                                                            "items": {
                                                                "properties": {
                                                                    "commentsChanger": {
                                                                        "type": "string"
                                                                    },
                                                                    "dateChanged": {
                                                                        "type": "string"
                                                                    },
                                                                    "newComment": {
                                                                        "type": "string"
                                                                    },
                                                                    "status": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "runAfter": {
                                                "Get_Comment_Data": [
                                                    "Succeeded"
                                                ]
                                            }
                                        },
                                        "Condition_To_Ingest_Comment_Data_If_It_Is_Not_Null": {
                                            "type": "If",
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('Parse_Comment_JSON')?['comments']",
                                                                "@null"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "actions": {
                                                "For_each_Comment": {
                                                    "type": "Foreach",
                                                    "foreach": "@body('Parse_Comment_JSON')?['comments']",
                                                    "actions": {
                                                        "Send_Comment_Data": {
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "body": "@addProperty(addProperty(items('For_Each_Comment'), 'InfobloxInsightID', items('For_each_Insight_ID')?['properties']?['objectGuid']), 'InfobloxInsightLogType', 'Comment')",
                                                                "headers": {
                                                                    "Log-Type": "InfobloxInsightComments"
                                                                },
                                                                "path": "/api/logs"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "else": {
                                                "actions": {}
                                            },
                                            "runAfter": {
                                                "Parse_Comment_JSON": [
                                                    "Succeeded"
                                                ]
                                            }
                                        }
                                    },
                                    "else": {
                                        "actions": {}
                                    },
                                    "runAfter": {
                                        "Add_InfobloxInsightID_Tag": [
                                            "Succeeded"
                                        ]
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_To_Check_Error_Message_is_Not_Empty": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Parse_Entities_JSON": {
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            },
                                            "kind": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "properties": {
                                                "properties": {
                                                    "friendlyName": {
                                                        "type": "string"
                                                    },
                                                    "objectGuid": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "runAfter": {
                                "Initialize_Status_Code": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Initialize_Comments_Data_Ingestion_Flag": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "comments_data_ingestion",
                                        "type": "string",
                                        "value": "@parameters('Comments Data Ingestion')"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_Assets_Data_Ingestion_Flag": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Initialize_Assets_Data_Ingestion_Flag": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "assets_data_ingestion",
                                        "type": "string",
                                        "value": "@parameters('Assets Data Ingestion')"
                                    }
                                ]
                            },
                            "runAfter": {}
                        },
                        "Initialize_Events_Data_Ingestion_Flag": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "events_data_ingestion",
                                        "type": "string",
                                        "value": "@parameters('Events Data Ingestion')"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_Comments_Data_Ingestion_Flag": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Initialize_Indicators_Data_Ingestion_Flag": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "indicators_data_ingestion",
                                        "type": "string",
                                        "value": "@parameters('Indicators Data Ingestion')"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_Events_Data_Ingestion_Flag": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Initialize_Error_Message": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "error_message",
                                        "type": "string"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_Indicators_Data_Ingestion_Flag": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Initialize_Status_Code": {
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "status_code",
                                        "type": "string"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_Error_Message": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Filter_array_for_Malware_Entity": {
                            "type": "Query",
                            "inputs": {
                                "from": "@body('Parse_Entities_JSON')",
                                "where": "@equals(item()['kind'], 'Malware')"
                            },
                            "runAfter": {
                                "Parse_Entities_JSON": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "For_each_Malware_Entity": {
                            "type": "Foreach",
                            "foreach": "@body('Filter_array_for_Malware_Entity')",
                            "actions": {
                                "Update_Incident_Tags": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method": "put",
                                        "body": {
                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                            "tagsToAdd": {
                                                "TagsToAdd": [
                                                    {
                                                        "Tag": "@items('For_each_Malware_Entity')?['kind']"
                                                    },
                                                    {
                                                        "Tag": "@items('For_each_Malware_Entity')?['properties']?['malwareName']"
                                                    },
                                                    {
                                                        "Tag": "@items('For_each_Malware_Entity')?['properties']?['category']"
                                                    },
                                                    {
                                                        "Tag": "Insight"
                                                    }
                                                ]
                                            }
                                        },
                                        "path": "/Incidents"
                                    }
                                }
                            },
                            "runAfter": {
                                "Filter_array_for_Malware_Entity": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Condition_To_Check_Error_Message_is_Not_Empty": {
                            "type": "If",
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@empty(variables('error_message'))",
                                            "@false"
                                        ]
                                    }
                                ]
                            },
                            "actions": {
                                "Terminate_Due_Error_During_Test_Connction": {
                                    "type": "Terminate",
                                    "inputs": {
                                        "runStatus": "Failed",
                                        "runError": {
                                            "code": "@variables('status_code')",
                                            "message": "@variables('error_message')"
                                        }
                                    }
                                }
                            },
                            "else": {
                                "actions": {}
                            },
                            "runAfter": {
                                "For_Each_Object_GUID": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Filter_array_for_Object_GUID_Entity": {
                            "type": "Query",
                            "inputs": {
                                "from": "@body('Parse_Entities_JSON')",
                                "where": "@equals(item()?['kind'], 'SecurityGroup')"
                            },
                            "runAfter": {
                                "For_each_Malware_Entity": [
                                    "Succeeded"
                                ]
                            }
                        }
                    },
                    "outputs": {
                    }
                },
                "parameters": {
                    "$connections":  {
                        "value":  {
                            "azureloganalyticsdatacollector":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                                "connectionName":  "[variables('AzureloganalyticsdatacollectorConnectionName')]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azureloganalyticsdatacollector')]"
                            },
                            "azuresentinel":  {
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName":  "[variables('MicrosoftSentinelConnectionName')]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties":  {
                                    "authentication":  {
                                        "type":  "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "name":  "[parameters('PlaybookName')]",
            "type":  "Microsoft.Logic/workflows",
            "location":  "[resourceGroup().location]",
            "tags":  {
                "hidden-SentinelTemplateName":  "Infoblox-SOC-Get-Insight-Details",
                "hidden-SentinelTemplateVersion":  "1.0"
            },
            "identity":  {
                "type":  "SystemAssigned"
            },
            "apiVersion":  "2017-07-01",
            "dependsOn":  [
                "[resourceId('Microsoft.Web/connections', variables('AzureloganalyticsdatacollectorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
            ]
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('AzureloganalyticsdatacollectorConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('AzureloganalyticsdatacollectorConnectionName')]",
                "customParameterValues":  {
                },
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azureloganalyticsdatacollector')]"
                }
            }
        },
        {
            "type":  "Microsoft.Web/connections",
            "apiVersion":  "2016-06-01",
            "name":  "[variables('MicrosoftSentinelConnectionName')]",
            "location":  "[resourceGroup().location]",
            "kind":  "V1",
            "properties":  {
                "displayName":  "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues":  {
                },
                "parameterValueType":  "Alternative",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        }
    ]
}
