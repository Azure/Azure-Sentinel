{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Infoblox-TimeRangeBased-DHCP-Lookup",
        "description": "The playbook will retrieve IP entities from an incident, search for related DHCP data in a table for a apecified time range, and if found, add the DHCP lookup data as a comment on the incident.",
        "prerequisites": [
            "1. CEF based Infoblox Data Connector should be configured to ingest DHCP lease related data in Microsoft Sentinel."
        ],
        "postDeployment": [
            "**a. Authorize connections**",
            "Once deployment is complete, authorize each connection.",
            "1. Go to your logic app -> API connections -> Select azuremonitorlogs connection resource",
            "2. Go to General -> edit API connection",
            "3. Click Authorize",
            "4. Sign in",
            "5. Click Save",
            "6. Repeat steps for other connections",
            "**b. Assign Role to add comment in incident**",
            "Assign role to this playbook.",            
            "1. Go to Log Analytics Workspace → <your workspace> → Access Control → Add","2. Add role assignment",
            "3. Assignment type: Job function roles -> Add 'Microsoft Sentinel Contributor' as a Role",
            "4. Members: select managed identity for assigned access to and add your logic app as member",
            "5. Click on review+assign",
            "**c. Configurations in Microsoft Sentinel**",
            "1. In Microsoft sentinel, analytical rules should be configured to trigger an incident which has Entities Mapping available for IP.",
            "2. To manually run the playbook on a particular incident follow the below steps:",
            "a. Go to Microsoft Sentinel -> <your workspace> -> Incidents",
            "b. Select an incident.",
            "c. In the right pane, click on Actions, and from the dropdown select the 'Run Playbook' option.",
            "d. Click on the Run button beside this playbook."
        ],
        "entities": [ "IP" ],
        "tags": [ "Infoblox", "DHCP", "IP", "Lookup", "TimeBased" ],
        "lastUpdateTime": "2024-07-19T16:15:48.355Z",
        "support": {
            "tier": "Community",
            "armtemplate": "Generated from https://github.com/Azure/Azure-Sentinel/tree/master/Tools/Playbook-ARM-Template-Generator"
        },
        "author": {
            "name": "Infoblox"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Infoblox-TimeRangeBased-DHCP-Lookup",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Please do not keep 'Playbook Name' parameter empty, else you will receive validation failure"
            }
        },
        "Start Date": {
            "type": "String",
            "metadata": {
                "description": "Enter start date from which you want to perform lookup for DHCP data. Date should be in the format of yyyy-mm-dd"
            }
        },
        "End Date": {
            "type": "String",
            "metadata": {
                "description": "Enter end date till you want to perform lookup for DHCP data. Date should be in the format of yyyy-mm-dd"
            }
        },
        "Workspace Name": {
            "type": "string",
            "metadata": {
                "description": "Enter name of Log Analytics Workspace where DHCP data is available"
            }
        }
    },
    "variables": {
        "AzuremonitorlogsConnectionName": "[concat('Azuremonitorlogs-', parameters('PlaybookName'))]",
        "MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "StartDate": {
                            "type": "String",
                            "defaultValue": "[trim(parameters('Start Date'))]"
                        },
                        "EndDate": {
                            "type": "String",
                            "defaultValue": "[trim(parameters('End Date'))]"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Condition_To_Terminate_Execution_If_No_IPs_Found": {
                            "actions": {
                                "Terminate_As_No_IPs_Found": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "message": "No IPs found associated with incident."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Entities_-_Get_IPs": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@empty(body('Entities_-_Get_IPs')?['IPs'])",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_To_Validate_StartDate_And_EndDate": {
                            "actions": {
                                "Terminate_Due_To_Invalid_StartDate_And_EndDate": {
                                    "runAfter": {},
                                    "type": "Terminate",
                                    "inputs": {
                                        "runError": {
                                            "message": "StartDate Should be Less than EndDate."
                                        },
                                        "runStatus": "Failed"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_Incident_Comment": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greaterOrEquals": [
                                            "@variables('StartDate')",
                                            "@variables('EndDate')"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Entities_-_Get_IPs": {
                            "runAfter": {
                                "Condition_To_Validate_StartDate_And_EndDate": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/ip"
                            }
                        },
                        "For_Each_IP": {
                            "foreach": "@body('Entities_-_Get_IPs')?['IPs']",
                            "actions": {
                                "Condition_To_Verify_IP_Address_is_Empty_Or_Not": {
                                    "actions": {
                                        "Condition_To_Verify_Comments_Count_Does_Not_Exceeded_To_100": {
                                            "actions": {
                                                "Add_Comment_To_Incident_For_Empty_IP_Address_Found": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": {
                                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                                            "message": "<p>Empty IP Address found.</p>"
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/Incidents/Comment"
                                                    }
                                                },
                                                "Increment_Comments_Count_For_Empty_IP_Address": {
                                                    "runAfter": {
                                                        "Add_Comment_To_Incident_For_Empty_IP_Address_Found": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "IncrementVariable",
                                                    "inputs": {
                                                        "name": "number_of_comments",
                                                        "value": 1
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "else": {
                                                "actions": {
                                                    "Condition_To_Verify_That_Incident_Has_99_Comment": {
                                                        "actions": {
                                                            "Add_Comment_That_Limit_Has_Been_Exceeded_To_100": {
                                                                "runAfter": {},
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "body": {
                                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                        "message": "<p>Comment limit to an incident has been breached.</p>"
                                                                    },
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "post",
                                                                    "path": "/Incidents/Comment"
                                                                }
                                                            },
                                                            "Increment_Number_Of_Comments_For_Exceeded_Limit": {
                                                                "runAfter": {
                                                                    "Add_Comment_That_Limit_Has_Been_Exceeded_To_100": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "IncrementVariable",
                                                                "inputs": {
                                                                    "name": "number_of_comments",
                                                                    "value": 1
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "equals": [
                                                                        "@variables('number_of_comments')",
                                                                        99
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "less": [
                                                            "@variables('number_of_comments')",
                                                            99
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {},
                                    "else": {
                                        "actions": {
                                            "Condition_To_Check_That_Results_Are_Empty": {
                                                "actions": {
                                                    "Condition_To_Verify_Comments_Count_Does_Not_Exceeded_To_100_(2)": {
                                                        "actions": {
                                                            "Add_Comment__For_Empty_Results_Found_For_IP": {
                                                                "runAfter": {},
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "body": {
                                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                        "message": "<p>No Lookup Data Found For IP: @{items('For_Each_IP')?['Address']} From @{variables('StartDate')} To @{variables('EndDate')}</p>"
                                                                    },
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "post",
                                                                    "path": "/Incidents/Comment"
                                                                }
                                                            },
                                                            "Increment_Comments_Count_For_Empty_Results_For_IP": {
                                                                "runAfter": {
                                                                    "Add_Comment__For_Empty_Results_Found_For_IP": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "IncrementVariable",
                                                                "inputs": {
                                                                    "name": "number_of_comments",
                                                                    "value": 1
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "else": {
                                                            "actions": {
                                                                "Condition_To_Verify_That_Incident_Has_99_Comment_(2)": {
                                                                    "actions": {
                                                                        "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(2)": {
                                                                            "runAfter": {},
                                                                            "type": "ApiConnection",
                                                                            "inputs": {
                                                                                "body": {
                                                                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                                    "message": "<p>Comment limit to an incident has been breached.</p>"
                                                                                },
                                                                                "host": {
                                                                                    "connection": {
                                                                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                                    }
                                                                                },
                                                                                "method": "post",
                                                                                "path": "/Incidents/Comment"
                                                                            }
                                                                        },
                                                                        "Increment_Number_Of_Comments_For_Exceeded_Limit_(2)": {
                                                                            "runAfter": {
                                                                                "Add_Comment_That_Limit_Has_Been_Exceeded_To_100_(2)": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "IncrementVariable",
                                                                            "inputs": {
                                                                                "name": "number_of_comments",
                                                                                "value": 1
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "equals": [
                                                                                    "@variables('number_of_comments')",
                                                                                    99
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "less": [
                                                                        "@variables('number_of_comments')",
                                                                        99
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    }
                                                },
                                                "runAfter": {
                                                    "Run_Query_And_List_DHCP_Lookup_Data_For_Provided_Time_Range": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "else": {
                                                    "actions": {
                                                        "Condition_To_Verify_Records_Are_Remaining_To_Add_And_Count_Limit_is_Not_Exceeded": {
                                                            "actions": {
                                                                "Add_Comment_To_Incident_For_Remaining_Records": {
                                                                    "runAfter": {},
                                                                    "type": "ApiConnection",
                                                                    "inputs": {
                                                                        "body": {
                                                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                            "message": "<p>@{variables('incident_comment')}</p>"
                                                                        },
                                                                        "host": {
                                                                            "connection": {
                                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                            }
                                                                        },
                                                                        "method": "post",
                                                                        "path": "/Incidents/Comment"
                                                                    }
                                                                },
                                                                "Increment_Number_Of_Comments_For_Remaining_Records": {
                                                                    "runAfter": {
                                                                        "Add_Comment_To_Incident_For_Remaining_Records": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "IncrementVariable",
                                                                    "inputs": {
                                                                        "name": "number_of_comments",
                                                                        "value": 1
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "For_Each_Query_Result": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "else": {
                                                                "actions": {
                                                                    "Condition_To_Check_That_Comment_Count_Reaches_to_99": {
                                                                        "actions": {
                                                                            "Add_Comment_To_Incident_For_Limit_Exceeded": {
                                                                                "runAfter": {},
                                                                                "type": "ApiConnection",
                                                                                "inputs": {
                                                                                    "body": {
                                                                                        "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                                        "message": "<p>Comment limit to an incident has been breached.</p>"
                                                                                    },
                                                                                    "host": {
                                                                                        "connection": {
                                                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                                        }
                                                                                    },
                                                                                    "method": "post",
                                                                                    "path": "/Incidents/Comment"
                                                                                }
                                                                            },
                                                                            "Increment_Number_Of_Comments_For_Limit_Exceeded": {
                                                                                "runAfter": {
                                                                                    "Add_Comment_To_Incident_For_Limit_Exceeded": [
                                                                                        "Succeeded"
                                                                                    ]
                                                                                },
                                                                                "type": "IncrementVariable",
                                                                                "inputs": {
                                                                                    "name": "number_of_comments",
                                                                                    "value": 1
                                                                                }
                                                                            }
                                                                        },
                                                                        "runAfter": {},
                                                                        "expression": {
                                                                            "and": [
                                                                                {
                                                                                    "equals": [
                                                                                        "@variables('number_of_comments')",
                                                                                        99
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        "type": "If"
                                                                    }
                                                                }
                                                            },
                                                            "expression": {
                                                                "and": [
                                                                    {
                                                                        "not": {
                                                                            "equals": [
                                                                                "@variables('incident_comment')",
                                                                                "@null"
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "less": [
                                                                            "@variables('number_of_comments')",
                                                                            99
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "type": "If"
                                                        },
                                                        "For_Each_Query_Result": {
                                                            "foreach": "@body('Run_Query_And_List_DHCP_Lookup_Data_For_Provided_Time_Range')?['value']",
                                                            "actions": {
                                                                "Append_HTML_Table_Content_For_A_Record": {
                                                                    "runAfter": {
                                                                        "Parse_JSON_For_Query_Result_Data": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "AppendToStringVariable",
                                                                    "inputs": {
                                                                        "name": "html_table",
                                                                        "value": "<p style=\"height:0px\"><table><tbody> \n<tr><th colspan=\"2\">DHCP Lookup For IP @{body('Parse_JSON_For_Query_Result_Data')?['SourceIP']}</th></tr>\n<tr><td>Source IP</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['SourceIP']}</td></tr>\n<tr><td>Source HostName</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['SourceHostName']}</td></tr>\n<tr><td>Source Mac Address</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['SourceMACAddress']}</td></tr>\n<tr><td>Device Name</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['DeviceName']}</td></tr>\n<tr><td>Device Address</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['DeviceAddress']}</td></tr>\n<tr><td>Device DNS Domain</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['DeviceDnsDomain']}</td></tr>\n<tr><td>Infoblox Host</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxHost']}</td></tr>\n<tr><td>Infoblox Subnet</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxSubnet']}</td></tr>\n<tr><td>Infoblox Range Start</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxRangeStart']}</td></tr>\n<tr><td>Infoblox Range End</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxRangeEnd']}</td></tr>\n<tr><td>Infoblox Lease Op</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxLeaseOp']}</td></tr>\n<tr><td>Infoblox Client ID</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxClientID']}</td></tr>\n<tr><td>Infoblox Lifetime</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxLifetime']}</td></tr>\n<tr><td>Infoblox Fingerprint Pr</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxFingerprintPr']}</td></tr>\n<tr><td>Infoblox Fingerprint</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxFingerprint']}</td></tr>\n<tr><td>Infoblox DHCP Options</td><td style=\"text-align:left\">@{body('Parse_JSON_For_Query_Result_Data')?['InfobloxDHCPOptions']}</td></tr>\n</tbody></table></p>"
                                                                    }
                                                                },
                                                                "Condition_To_Verify_Character_Limit_Does_Not_Exceeded": {
                                                                    "actions": {
                                                                        "Set_Incident_Comment": {
                                                                            "runAfter": {},
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "incident_comment",
                                                                                "value": "@variables('html_table')"
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "Append_HTML_Table_Content_For_A_Record": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "else": {
                                                                        "actions": {
                                                                            "Condition_To_Verify_Comment_Count_Does_Not_Exceeded_To_100": {
                                                                                "actions": {
                                                                                    "Add_Comment_For_DHCP_Record_In_HTML_Table_Format_": {
                                                                                        "runAfter": {},
                                                                                        "type": "ApiConnection",
                                                                                        "inputs": {
                                                                                            "body": {
                                                                                                "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                                                "message": "<p>@{variables('incident_comment')}</p>"
                                                                                            },
                                                                                            "host": {
                                                                                                "connection": {
                                                                                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                                                }
                                                                                            },
                                                                                            "method": "post",
                                                                                            "path": "/Incidents/Comment"
                                                                                        }
                                                                                    },
                                                                                    "Increment_Comments_Count_For_HTML_Table": {
                                                                                        "runAfter": {
                                                                                            "Add_Comment_For_DHCP_Record_In_HTML_Table_Format_": [
                                                                                                "Succeeded"
                                                                                            ]
                                                                                        },
                                                                                        "type": "IncrementVariable",
                                                                                        "inputs": {
                                                                                            "name": "number_of_comments",
                                                                                            "value": 1
                                                                                        }
                                                                                    },
                                                                                    "Reset_HTML_Table": {
                                                                                        "runAfter": {
                                                                                            "Reset_Incident_Comment": [
                                                                                                "Succeeded"
                                                                                            ]
                                                                                        },
                                                                                        "type": "SetVariable",
                                                                                        "inputs": {
                                                                                            "name": "html_table",
                                                                                            "value": "@{null}"
                                                                                        }
                                                                                    },
                                                                                    "Reset_Incident_Comment": {
                                                                                        "runAfter": {
                                                                                            "Increment_Comments_Count_For_HTML_Table": [
                                                                                                "Succeeded"
                                                                                            ]
                                                                                        },
                                                                                        "type": "SetVariable",
                                                                                        "inputs": {
                                                                                            "name": "incident_comment",
                                                                                            "value": "@{null}"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "runAfter": {},
                                                                                "else": {
                                                                                    "actions": {
                                                                                        "Condition_To_Verify_That_Incident_Has_99_Comments": {
                                                                                            "actions": {
                                                                                                "Add_Comment_That_Limit_Has_Been_Exceeded": {
                                                                                                    "runAfter": {},
                                                                                                    "type": "ApiConnection",
                                                                                                    "inputs": {
                                                                                                        "body": {
                                                                                                            "incidentArmId": "@triggerBody()?['object']?['id']",
                                                                                                            "message": "<p>Comment limit to an incident has been breached.</p>"
                                                                                                        },
                                                                                                        "host": {
                                                                                                            "connection": {
                                                                                                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                                                                            }
                                                                                                        },
                                                                                                        "method": "post",
                                                                                                        "path": "/Incidents/Comment"
                                                                                                    }
                                                                                                },
                                                                                                "Increment_Number_Of_Comments": {
                                                                                                    "runAfter": {
                                                                                                        "Add_Comment_That_Limit_Has_Been_Exceeded": [
                                                                                                            "Succeeded"
                                                                                                        ]
                                                                                                    },
                                                                                                    "type": "IncrementVariable",
                                                                                                    "inputs": {
                                                                                                        "name": "number_of_comments",
                                                                                                        "value": 1
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            "runAfter": {},
                                                                                            "expression": {
                                                                                                "and": [
                                                                                                    {
                                                                                                        "equals": [
                                                                                                            "@variables('number_of_comments')",
                                                                                                            99
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "type": "If"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                "expression": {
                                                                                    "and": [
                                                                                        {
                                                                                            "less": [
                                                                                                "@variables('number_of_comments')",
                                                                                                99
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "type": "If"
                                                                            }
                                                                        }
                                                                    },
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "less": [
                                                                                    "@length(variables('html_table'))",
                                                                                    30000
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "Parse_JSON_For_Query_Result_Data": {
                                                                    "runAfter": {},
                                                                    "type": "ParseJson",
                                                                    "inputs": {
                                                                        "content": "@items('For_Each_Query_Result')",
                                                                        "schema": {
                                                                            "properties": {
                                                                                "Activity": {
                                                                                    "type": "string"
                                                                                },
                                                                                "DeviceAddress": {
                                                                                    "type": "string"
                                                                                },
                                                                                "DeviceDnsDomain": {
                                                                                    "type": "string"
                                                                                },
                                                                                "DeviceName": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxClientID": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxDHCPOptions": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxDUID": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxFingerprint": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxFingerprintPr": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxHost": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxHostID": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxIPSpace": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxLeaseOp": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxLeaseUUID": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxLifetime": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxRangeEnd": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxRangeStart": {
                                                                                    "type": "string"
                                                                                },
                                                                                "InfobloxSubnet": {
                                                                                    "type": "string"
                                                                                },
                                                                                "SourceHostName": {
                                                                                    "type": "string"
                                                                                },
                                                                                "SourceIP": {
                                                                                    "type": "string"
                                                                                },
                                                                                "SourceMACAddress": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {},
                                                            "type": "Foreach"
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "equals": [
                                                                "@empty(body('Run_Query_And_List_DHCP_Lookup_Data_For_Provided_Time_Range')?['value'])",
                                                                "@true"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            },
                                            "Run_Query_And_List_DHCP_Lookup_Data_For_Provided_Time_Range": {
                                                "runAfter": {},
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": {
                                                        "query": "let DHCP_VALUE = 'DHCP';\nlet IP = '@{items('For_each_IP')?['Address']}';\nCommonSecurityLog\n| where DeviceEventClassID contains DHCP_VALUE\n    and SourceIP == IP\n| parse-kv AdditionalExtensions as (InfobloxHost : string,\nInfobloxHostID : string,\nInfobloxIPSpace : string,\nInfobloxSubnet : string,\nInfobloxRangeStart : string,\nInfobloxRangeEnd : string,\nInfobloxLeaseOp : string,\nInfobloxClientID : string,\nInfobloxDUID : string,\nInfobloxLifetime : string,\nInfobloxLeaseUUID : string,\nInfobloxFingerprintPr : string,\nInfobloxFingerprint : string,\nInfobloxDHCPOptions : string) with(kv_delimiter=\"=\", pair_delimiter=\";\")\n| project \nSourceIP,SourceHostName,SourceMACAddress, Activity, DeviceName,DeviceAddress,DeviceDnsDomain,\nInfobloxHost,\nInfobloxHostID,\nInfobloxIPSpace,\nInfobloxSubnet,\nInfobloxRangeStart,\nInfobloxRangeEnd,\nInfobloxLeaseOp,\nInfobloxClientID,\nInfobloxDUID,\nInfobloxLifetime,\nInfobloxLeaseUUID,\nInfobloxFingerprintPr,\nInfobloxFingerprint,\nInfobloxDHCPOptions\n",
                                                        "timerange": {
                                                            "exactTimeRangeFrom": "@variables('StartDate')",
                                                            "exactTimeRangeTo": "@variables('EndDate')"
                                                        },
                                                        "timerangetype": "Exact"
                                                    },
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/queryDataV2",
                                                    "queries": {
                                                        "resourcegroups": "[resourceGroup().name]",
                                                        "resourcename": "[parameters('Workspace Name')]",
                                                        "resourcetype": "Log Analytics Workspace",
                                                        "subscriptions": "[subscription().subscriptionId]"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@empty(items('For_Each_IP')?['Address'])",
                                                    "@true"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Condition_To_Terminate_Execution_If_No_IPs_Found": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Initialize_Data_Variable": {
                            "runAfter": {
                                "Initialize_Length_of_Data": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "dhcp_data",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_End_Date": {
                            "runAfter": {
                                "Initialize_Start_Date": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "EndDate",
                                        "type": "string",
                                        "value": "@parameters('EndDate')"
                                    }
                                ]
                            }
                        },
                        "Initialize_Error_Message": {
                            "runAfter": {
                                "Initialize_Number_Of_Comments": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "error_message",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_HTML_Table": {
                            "runAfter": {
                                "Initialize_Error_Message": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "html_table",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Incident_Comment": {
                            "runAfter": {
                                "Initialize_Data_Variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "incident_comment",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_Length_of_Data": {
                            "runAfter": {
                                "Initialize_End_Date": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "length_of_data",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_Number_Of_Comments": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "number_of_comments",
                                        "type": "integer",
                                        "value": "@length(triggerBody()?['object']?['properties']?['Comments'])"
                                    }
                                ]
                            }
                        },
                        "Initialize_Start_Date": {
                            "runAfter": {
                                "Initialize_HTML_Table": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "StartDate",
                                        "type": "string",
                                        "value": "@parameters('StartDate')"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                                "connectionName": "[variables('AzuremonitorlogsConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuremonitorlogs')]"
                            },
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "name": "[parameters('PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "tags": {
                "hidden-SentinelTemplateName": "Infoblox-TimeRangeBased-DHCP-Lookup",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzuremonitorlogsConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzuremonitorlogsConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuremonitorlogs')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('MicrosoftSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        }
    ]
}
